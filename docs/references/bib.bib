@techreport{beebe:2002,
	abstract = {These notes describe an implementation of an algorithm for accurate computation of expm1(x) = exp(x) − 1, one of the new elementary functions introduced in the 1999 ISO C Standard, but already available in most UNIX C implementations. A test package modeled after the Cody and Waite Elementary Function Test Package, ELEFUNT, is developed to evaluate the accuracy of implementations of expm1(x).},
	author = {Nelson H.F. Beebe},
	keywords = {mathematics,math,special function,exponential,exp},
	institution = {University of Utah},
	title = {{Computation of expm1(x) = exp(x) − 1}},
	url = {http://www.math.utah.edu/~beebe/reports/expm1.pdf},
	year = {2002},
}

@article{blair:1976,
	abstract = {This report presents near-minimax rational approximations for the inverse of the error function inverf x, for  \\( 0 \leqslant x \leqslant 1 - {10^{ - 10000}} \\), with relative errors ranging down to  \\( {10^{ - 23}}\\). An asymptotic formula for the region \\( x \to 1\\) is also given.},
	author = {J.M. Blair and C.A. Edwards and J.H. Johnson},
	doi = {10.1090/S0025-5718-1976-0421040-7},
	journal = {Mathematics of Computation},
	keywords = {Rational Chebyshev approximations, inverse error function, minimal Newton form, erf, erfinv, mathematics, math, special function},
	pages = {827--830},
	title = {{Rational Chebyshev approximations for the inverse of the error function}},
	url = {http://www.ams.org/journals/mcom/1976-30-136/S0025-5718-1976-0421040-7/},
	volume = {30},
	year = {1976},
}

@inproceedings{borwein:1991,
	abstract = {A very simple class of algorithms for the computation of the Riemann-zeta function to arbitrary precision in arbitrary domains is proposed. These algorithms compete with the standard methods based on Euler-Maclaurin summation, are easier to implement and are easier to analyze.},
	author = {P. Borwein},
	booktitle = {Conference Proceedings},
	keywords = {Riemann zeta function, computation, high precision, algorithm, mathematics, math, special function, riemann, zeta},
	publisher = {Canadian Mathematical Society},
	title = {{An Efficient Algorithm for the Riemann Zeta Function}},
	year = {1991},
}

@article{carlitz:1963,
	author = {L. Carlitz},
	journal = {Pacific Journal of Mathematics},
	keywords = {mathematics, math, error function, erf},
	number = {2},
	pages = {459--470},
	publisher = {Pacific Journal of Mathematics, A Non-profit Corporation},
	title = {{The inverse of the error function.}},
	url = {http://msp.org/pjm/1963/13-2/pjm-v13-n2-p06-s.pdf},
	volume = {13},
	year = {1963},
}

@mastersthesis{segarra:2006,
	abstract = {Identified as one of the 7 Millennium Problems, the Riemann zeta hypothesis has successfully evaded mathematicians for over 100 years. Simply stated, Riemann conjectured that all of the nontrivial zeroes of his zeta function have real part equal to 1/2. This thesis attempts to explore the theory behind Riemann’s zeta function by first starting with Euler’s zeta series and building up to Riemann’s function. Along the way we will develop the math required to handle this theory in hopes that by the end the reader will have immersed themselves enough to pursue their own exploration and research into this fascinating subject.},
	author = {Elan Segarra},
	keywords = {math, mathematics, riemann zeta, riemann, zeta, special function},
	school = {Harvey Mudd College},
	title = {{An Exploration of the Riemann Zeta Function and its Application to the Theory of Prime Number Distribution}},
	url = {https://www.math.hmc.edu/seniorthesis/archives/2006/esegarra/esegarra-2006-thesis.pdf},
	year = {2006}
}

@article{fransen:1980,
	abstract = {In this paper we determine numerical values to 80D of the coefficients in the Taylor series expansion \\( {\Gamma ^m}(s + x) = \Sigma _0^\infty {g_k}(m,s){x^k}\\) for certain values of \\(m\\) and \\(s\\) and use these values to calculate  \\( \Gamma (p/q)\;(p,q = 1,2, \ldots ,10;\;p < q)\\) and  \\({\min _{x > 0}}\Gamma (x)\\) to 80D. Finally, we obtain a high-precision value of the integral  \\(\smallint _0^\infty {(\Gamma (x))^{ - 1}}\;dx\\).},
	author = {Arne Frans\'{e}n and Staffan Wrigge},
	doi = {10.1090/S0025-5718-1980-0559204-5},
	journal = {Mathematics of Computation},
	keywords = {Special functions, Gamma function, Riemann Zeta function, gamma, mathematics, math, special function},
	pages = {553--566},
	title = {{High-precision values of the gamma function and of some related coefficients}},
	url = {http://www.ams.org/journals/mcom/1980-34-150/S0025-5718-1980-0559204-5/},
	volume = {34},
	year = {1980},
}

@article{goldberg:1991,
	abstract = {Floating-point arithmetic is considered as esoteric subject by many people. This is rather surprising, because floating-point is ubiquitous in computer systems: Almost every language has a floating-point datatype; computers from PCs to supercomputers have floating-point accelerators; most compilers will be called upon to compile floating-point algorithms from time to time; and virtually every operating system must respond to floating-point exceptions such as overflow. This paper presents a tutorial on the aspects of floating-point that have a direct impact on designers of computer systems. It begins with background on floating-point representation and rounding error, continues with a discussion of the IEEE floating point standard, and concludes with examples of how computer system builders can better support floating point.},
	acmid = {103163},
	address = {New York, NY, USA},
	author = {David Goldberg},
	doi = {10.1145/103162.103163},
	journal = {ACM Comput. Surv.},
	issn = {0360-0300},
	issue_date = {March 1991},
	keywords = {NaN, denormalized number, exception, floating-point, floating-point standard, gradual underflow, guard digit, overflow, relative error, rounding error, rounding mode, ulp, underflow, computation, ieee754, math, double, float},
	month = {mar},
	number = {1},
	numpages = {44},
	pages = {5--48},
	publisher = {ACM},
	title = {What Every Computer Scientist Should Know About Floating-point Arithmetic},
	url = {http://doi.acm.org/10.1145/103162.103163},
	volume = {23},
	year = {1991},
}

@unpublished{gourdon:2003,
	author = {Xavier Gourdon and Pascal Sebah},
	keywords = {riemann zeta, riemann, zeta, math, mathematics, special function},
	note = {Numerical evaluation of the Riemann Zeta-function.},
	title = {{Numerical evaluation of the Riemann Zeta-function}},
	year = {2003},
}

@article{khajah:1994,
	abstract = {We describe a machine independent Fortran subroutine which performs the four basic arithmetic operations with a degree of accuracy prescribed by the user. Tables of Chebyshev expansions of orders 48 and 50 for some basic mathematical functions are obtained as a result of applying this subroutine in conjunction with the recursive formulation of the Tau Method. A recently devised technique for the sharp determination of upper and lower error bounds for Tau Method approximations (see [1]) enables us to find the degree n required to achieve a prescribed accuracy ϵ over a given interval [a,b]. A number of practical illustrations are given.},
	author = {H.G. Khajah and E.L. Ortiz},
	doi = {10.1016/0898-1221(94)90148-1},
	issn = {0898-1221},
	journal = {Computers & Mathematics with Applications},
	keywords = {numeric computing, precision, programming, computation},
	number = {7},
	pages = {41--57},
	title = {Ultra-high precision computations},
	url = {http://www.sciencedirect.com/science/article/pii/0898122194901481},
	volume = {27},
	year = {1994},
}

@phdthesis{pugh:2004,
	abstract = {This thesis is an analysis of C. Lanczos’ approximation of the classical gamma function Γ(z+1) as given in his 1964 paper \textit{A Precision Approximation of the Gamma Function}. The purposes of this study are: (i) to explain the details of Lanczos’ paper, including proofs of all claims made by the author; (ii) to address the question of how best to implement the approximation method in practice; and (iii) to generalize the methods used in the derivation of the approximation.},
	author = {Glendon Ralph Pugh},
	keywords = {gamma, lanczos, math, mathematics, special function},
	school = {The University of British Columbia},
	title = {{An Analysis of the Lanczos Gamma Approximation}},
	url = {https://web.viu.ca/pughg/phdThesis/phdThesis.pdf},
	year = {2004}
}

@article{meurer:2016,
	abstract = {SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become the standard symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select domain specific submodules. The supplementary materials provide additional examples and further outline details of the architecture and features of SymPy.},
	author = {A. Meurer and C.P. Smith and M. Paprocki and O. \u{C}ert\'{i}k and S.B. Kirpichev and M. Rocklin and A. Kumar and S. Ivanov and J.K. Moore and S. Singh and T. Rathnayake and S. Vig and B.E. Granger and R.P. Muller and F. Bonazzi and H. Gupta and S. Vats and F. Johansson and F. Pedregosa and M.J. Curry and A.R. Terrel and \u{S}. Rou\u{c}ka and A. Saboo and I. Fernando and S. Kulal and R. Cimrman and A. Scopatz},
	doi = {10.7287/peerj.preprints.2083v3},
	journal = {PeerJ Preprints},
	keywords = {symbolic, python, computer algebra system},
	month = {jun},
	number = {2083},
	title = {{SymPy: Symbolic computing in Python.}},
	url = {https://github.com/sympy/sympy-paper},
	volume = {4},
	year = {2016},
}

@unpublished{cao:high,
	abstract = {This paper presents the design and implementation of several fundamental dense linear algebra (DLA) algorithms in OpenCL. In particular, these are linear system solvers and eigenvalue problem solvers. Further, we give an overview of the clMAGMA library, an open source, high performance OpenCL library that incorporates the developments presented, and in general provides to heterogeneous architectures the DLA functionality of the popular LAPACK library. The LAPACK-compliance and use of OpenCL simplify the use of clMAGMA in applications, while providing them with portably performant DLA. High performance is obtained through use of the high-performance OpenCL BLAS, hardware and OpenCL-specific tuning, and a hybridization methodology where we split the algorithm into computational tasks of various granularities. Execution of those tasks is properly scheduled over the heterogeneous hardware components by minimizing data movements and mapping algorithmic requirements to the architectural strengths of the various heterogeneous hardware components.},
    author = {Chongxiao Cao and Jack Dongarra and Peng Du and Mark Gates and Piotr Luszczek and Stanimire Tomov},
    keywords = {gpu, opencl, blas, numeric computing, computation, lapack},
    note = {netlib},
    title = {{clMAGMA: High Performance Dense Linear Algebra with OpenCL}},
}

@misc{dawson:2013,
	author = {Bruce Dawson},
	keywords = {ieee754, floating-point, math, mathematics, numeric computing, computation},
	title = {{Floating-Point Determinism}},
	url = {https://randomascii.wordpress.com/2013/07/16/floating-point-determinism/},
	year = {2013}
}

@misc{godfrey:2001,
	author = {Paul Godfrey},
	keywords = {lanczos, gamma, special function, math, mathematics},
	title = {{A note on the computation of the convergent Lanczos complex Gamma approximation.}},
	url = {http://my.fit.edu/~gabdo/gamma.txt},
	year = {2001}
}

@misc{toth:gamma,
	author = {Viktor T. Toth},
	keywords = {lanczos, gamma, special function, math, mathematics},
	title = {{The Gamma function}},
	url = {http://www.rskey.org/CMS/index.php/the-library/11},
}

@article{vigna:2014,
	abstract = {xorshift\sup{*} generators are a variant of Marsaglia's xorshift generators that eliminate linear artifacts typical of generators based on \\(Z/2Z\\)-linear operations using multiplication by a suitable constant. Shortly after high-dimensional xorshift\sup{*} generators were introduced, Saito and Matsumoto suggested a different way to eliminate linear artifacts based on addition in \\(Z/2^{32}Z\\), leading to the XSadd generator. Starting from the observation that the lower bits of XSadd are very weak, as its reverse fails systematically several statistical tests, we explore xorshift+, a variant of XSadd using 64-bit operations, which leads, in small dimension, to extremely fast high-quality generators.},
	author = {Sebastiano Vigna},
	doi = {},
	journal = {CoRR},
	keywords = {random, prng, rng, marsaglia, xorshift, uniform, rand},
	month = {apr},
	number = {},
	pages = {},
	title = {{Further scramblings of Marsaglia's xorshift generators}},
	url = {https://arxiv.org/abs/1404.0390},
	volume = {abs/1404.0390},
	year = {2014},
}

@article{marsaglia:2003,
	abstract = {Description of a class of simple, extremely fast random number generators (RNGs) with periods \\(2^k −1\\) for \\(k = 32, 64, 96, 128, 160, 192\\). These RNGs seem to pass tests of randomness very well.},
	author = {George Marsaglia},
	doi = {10.18637/jss.v008.i14},
	journal = {Journal of Statistical Software},
	keywords = {random, rand, marsaglia, prng, rng, xorshift, uniform},
	note = {xoshift},
	number = {14},
	title = {{Xorshift RNGs}},
	url = {https://www.jstatsoft.org/article/view/v008i14},
	volume = {8},
	year = {2003},
}

@article{panneton:2005,
	abstract = {G. Marsaglia recently introduced a class of very fast xorshift random number generators, whose implementation uses three “xorshift” operations. They belong to a large family of generators based on linear recurrences modulo 2, which also includes shift-register generators, the Mersenne twister, and several others. In this article, we analyze the theoretical properties of xorshift generators, search for the best ones with respect to the equidistribution criterion, and test them empirically. We find that the vast majority of xorshift generators with only three xorshift operations, including those having good equidistribution, fail several simple statistical tests. We also discuss generators with more than three xorshifts.},
	acmid = {1113319},
	address = {New York, NY, USA},
	author = {Panneton, Fran\c{c}ois and L'Ecuyer, Pierre},
	doi = {10.1145/1113316.1113319},
	issn = {1049-3301},
	journal = {ACM Trans. Model. Comput. Simul.},
	issue_date = {October 2005},
	keywords = {random number generation, linear feedback shift register, linear recurrence modulo 2, xorshift, prng, rng, random, rand},
	month = {oct},
	number = {4},
	numpages = {16},
	pages = {346--361},
	publisher = {ACM},
	title = {On the Xorshift Random Number Generators},
	url = {http://doi.acm.org/10.1145/1113316.1113319},
	volume = {15},
	year = {2005},
}

@article{hellekalek:1998,
	abstract = {Every random number generator has its advantages and deficiencies. There are no "safe" generators. The practitioner's problem is how to decide which random number generator will suit his needs best. In this paper, we will discuss criteria for good random number generators: theoretical support, empirical evidence and practical aspects. We will study several recent algorithms that perform better than most generators in actual use. We will compare the different methods and supply numerical results as well as selected pointers and links to important literature and other sources. Additional information on random number generation, including the code of most algorithms discussed in this paper is available from our web-server under the address http://random.mat.sbg.ac.at/.},
	acmid = {284161},
	author = {P. Hellekalek},
	doi = {10.1016/S0378-4754(98)00078-0},
	issn = {0378-4754},
	issue_date = {June 1998},
	journal = {Mathematics and Computers in Simulation},
	month = {jun},
	number = {5-6},
	numpages = {21},
	pages = {485--505},
	publisher = {Elsevier Science Publishers B. V.},
address = {Amsterdam, The Netherlands, The Netherlands},
	title = {{Good Random Number Generators Are (Not So) Easy to Find}},
	url = {http://dx.doi.org/10.1016/S0378-4754(98)00078-0},
	volume = {46},
	year = {1998},
}

