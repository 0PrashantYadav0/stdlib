#/
# @license Apache-2.0
#
# Copyright (c) 2021 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: linux_test_cov

# Workflow triggers:
on:
  workflow_run:
    workflows:
      - linux_test
    types:
      - completed

# Workflow jobs:
jobs:

  # Define a workflow for determining test coverage on Linux...
  on-success:

    # Define a display name:
    name: "Node.js v${{ matrix.NODE_VERSION }}"

    # Define the type of virtual host machine on which to run the job:
    runs-on: ${{ matrix.OS }}

    # Ensure that this job only runs if the antecedent workflow is successful:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    # Define environment variables:
    env:
      FC: 'gfortran'
      FORTRAN_COMPILER: 'gfortran'
      CC: 'gcc'
      C_COMPILER: 'gcc'
      CXX: 'g++'
      CXX_COMPILER: 'g++'
      LINKER: 'g++'
      GITHUB: 'true'
      DISPLAY: ':99'

    # Define the build matrix strategy...
    strategy:

      # Specify whether to cancel all in-progress jobs if any matrix job fails:
      fail-fast: false

      # Define the build matrix:
      matrix:

        # Define the list of build tasks:
        BUILD_TASK: ['test-coverage']

        # Define the list of Node.js versions on which to run this job:
        NODE_VERSION: ['16', '14', '12']

        # Define the list of operating systems on which to run this job:
        OS: ['ubuntu-latest']

        # Define configuration options for each Node.js version:
        include:
          - OS: 'ubuntu-latest'
            PLATFORM: 'linux'

          - NODE_VERSION: '16'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '14'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '12'
            NPM_VERSION: '>2.7.0'

          # - NODE_VERSION: '10'
          #   NPM_VERSION: '>2.7.0 <6.0.0'

          # - NODE_VERSION: '8'
          #   NPM_VERSION: '>2.7.0 <6.0.0'

          # - NODE_VERSION: '6'
          #   NPM_VERSION: '>2.7.0 <6.0.0'

          # - NODE_VERSION: '4'
          #   NPM_VERSION: '>2.7.0 <6.0.0'

          # - NODE_VERSION: '0.12'
          #   NPM_VERSION: '>2.7.0 <4.0.0'

          # - NODE_VERSION: '0.10'
          #   NPM_VERSION: '>2.7.0 <4.0.0'

    # Set defaults:
    defaults:
      run:
        # Set the default shell to `bash`:
        shell: bash --noprofile --norc -eo pipefail {0}

    # Define the sequence of job steps...
    steps:

      # Install compilers:
      - name: 'Install compilers'
        run: |
          sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
          sudo -E apt-get update -q
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends --allow-downgrades --allow-remove-essential --allow-change-held-packages install binutils gcc-9 gcc-9-multilib g++-9 g++-9-multilib gfortran-9 gfortran-9-multilib
          mkdir -p $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH
          ln -s /usr/bin/gcc-9 $HOME/bin/gcc
          ln -s /usr/bin/g++-9 $HOME/bin/g++
          ln -s /usr/bin/gfortran-9 $HOME/bin/gfortran
        timeout-minutes: 10

      # Configure a virtual display server (needed for electron):
      - name: 'Configure virtual display server'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          sudo /usr/bin/Xvfb "${{ env.DISPLAY }}" -screen 0 1280x768x24 > /dev/null 2>&1 &
        timeout-minutes: 10

      # Install Node.js:
      - name: 'Install Node.js'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.NODE_VERSION }}
        timeout-minutes: 5

      # Print debug info:
      - name: 'Print debug info'
        run: |
          echo 'PATH:'
          echo $PATH
          echo ''
          echo 'gcc:'
          gcc --version
          echo ''
          echo 'g++:'
          g++ --version
          echo ''
          echo 'gfortran:'
          gfortran --version
          echo ''
          echo 'Git:'
          git --version
          echo ''
          echo 'Node.js:'
          file $(which node)
          node --version
          node -p 'process.platform + "@" + process.arch'
          echo ''
          echo 'npm:'
          npm --version
          npm config get registry
        timeout-minutes: 2

      # Update the npm client (older clients cannot handle scoped modules):
      - name: 'Update npm'
        run: |
          npm install -g npm@"${{ matrix.NPM_VERSION }}"
          npm --version
        timeout-minutes: 5

      # Checkout the repository:
      - name: 'Checkout repository'
        uses: actions/checkout@v1
        with:
          # Specify whether to remove untracked files before checking out the repository:
          clean: false

          # Limit clone depth to the most recent 100 commits:
          fetch-depth: 100

          # Specify whether to download Git-LFS files:
          lfs: false
        timeout-minutes: 10

      # Perform install sequence (accounting for spurious installation errors, such as network timeouts, which can occasionally happen when running `npm install`):
      - name: 'Perform install sequence'
        run: |
          make install || make install
        timeout-minutes: 30

      # Run the build task:
      - name: 'Run build task'
        run: |
          chmod +x $GITHUB_WORKSPACE/tools/ci/github/script
          "$GITHUB_WORKSPACE/tools/ci/github/script" ${{ matrix.BUILD_TASK }} || "$GITHUB_WORKSPACE/tools/ci/github/script" ${{ matrix.BUILD_TASK }}
        timeout-minutes: 360

      # View the log file if the previous step fails:
      - name: 'View log file'
        if: failure()
        run: |
          chmod +x $GITHUB_WORKSPACE/tools/ci/github/on_failure
          "$GITHUB_WORKSPACE/tools/ci/github/on_failure"
        timeout-minutes: 5
