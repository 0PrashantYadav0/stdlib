#/
# @license Apache-2.0
#
# Copyright (c) 2021 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: windows_test_npm_install

# Workflow triggers:
on:
  push:
    branches:
      - develop

  # Allow the workflow to be manually run:
  workflow_dispatch:

# Workflow jobs:
jobs:

  # Define a job for testing project installation on Windows...
  test_npm_install:

    # Define a display name:
    name: "Node.js v${{ matrix.NODE_VERSION }}"

    # Define the type of virtual host machine on which to run the job:
    runs-on: ${{ matrix.OS }}

    # Define environment variables:
    env:
      FC: 'gfortran'
      FORTRAN_COMPILER: 'gfortran'
      CC: 'gcc'
      C_COMPILER: 'gcc'
      CXX: 'g++'
      CXX_COMPILER: 'g++'
      LINKER: 'g++'
      GITHUB: 'true'

    # Define the build matrix strategy...
    strategy:

      # Specify whether to cancel all in-progress jobs if any matrix job fails:
      fail-fast: false

      # Define the build matrix:
      matrix:

        # Define the list of build tasks:
        BUILD_TASK: ['test-npm-install']

        # Define the list of Node.js versions:
        NODE_VERSION: ['16', '14', '12', '10', '8', '6', '4', '0.12', '0.10']

        # Define the list of operating systems:
        OS: ['windows-latest']

        # Define the list of host architectures:
        ARCHITECTURE:
          - x64

        # Define configuration options for each Node.js version:
        include:
          - OS: 'windows-latest'
            PLATFORM: 'windows'

          - NODE_VERSION: '16'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '14'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '12'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '10'
            NPM_VERSION: '>2.7.0 <7.0.0'

          - NODE_VERSION: '8'
            NPM_VERSION: '>2.7.0 <6.0.0'

          - NODE_VERSION: '6'
            NPM_VERSION: '>2.7.0 <6.0.0'

          - NODE_VERSION: '4'
            NPM_VERSION: '>2.7.0 <6.0.0'

          - NODE_VERSION: '0.12'
            NPM_VERSION: '>2.7.0 <4.0.0'

          - NODE_VERSION: '0.10'
            NPM_VERSION: '>2.7.0 <4.0.0'

    # Set defaults:
    defaults:
      run:
        # Set the default shell to MSYS2:
        shell: msys2 {0}

    # Define the sequence of job steps...
    steps:

      # Install MSYS2:
      - name: 'Install MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          # Set the MSYS system:
          msystem: MINGW64

          # Ensure packages are updated:
          update: true

          # Install packages after updating the system:
          install: git base mingw-w64-x86_64-toolchain
        timeout-minutes: 10

      # Configure Git:
      - name: 'Configure Git'

        # Instruct `git` to convert CRLF line endings (Windows) to LF on commit.
        #
        # [1]: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace
        run: git config --global core.autocrlf input
        timeout-minutes: 2

      # Configure NVS:
      - name: 'Configure NVS'
        run: |
          echo "NVS_HOME=$HOME/.nvs" >> $GITHUB_ENV
          echo "NVS_LINK_TO_SYSTEM=1" >> $GITHUB_ENV
        timeout-minutes: 2

      # Install Node.js:
      - name: 'Install Node.js'
        run: |
          echo 'Cloning NVS...'
          git clone https://github.com/jasongin/nvs "${{ env.NVS_HOME }}"
          echo ''
          echo 'Running NVS installation script...'
          . "${{ env.NVS_HOME }}/nvs.sh" install
          echo ''
          echo "Installing Node.js version ${{ matrix.NODE_VERSION }}..."
          nvs add ${{ matrix.NODE_VERSION }}
          echo ''
          echo 'Setting Node.js default executable...'
          nvs link ${{ matrix.NODE_VERSION }}
          echo ''
          echo "Activating Node.js version ${{matrix.NODE_VERSION }}..."
          nvs use ${{ matrix.NODE_VERSION }}
          echo ''
          echo 'Adding executable to PATH...'
          cygpath -u $(nvs which ${{ matrix.NODE_VERSION }}) >> $GITHUB_PATH
          echo ''
          echo 'Creating .bash_profile...'
          touch $HOME/.bash_profile
          echo "if [ -f $HOME/.bashrc ]; then . $HOME/.bashrc; fi" >> $HOME/.bash_profile
          echo ''
          echo 'Creating .bashrc...'
          touch $HOME/.bashrc
          echo ". ${{ env.NVS_HOME }}/nvs.sh" >> $HOME/.bashrc
        timeout-minutes: 15

      # Print debug info:
      - name: 'Print debug info'
        run: |
          echo 'PATH:'
          echo $PATH
          echo ''
          echo 'gcc:'
          gcc --version
          echo ''
          echo 'g++:'
          g++ --version
          echo ''
          echo 'gfortran:'
          gfortran --version
          echo ''
          echo 'Git:'
          git --version
          echo ''
          echo 'Node.js:'
          node --version
          node -p 'process.platform + "@" + process.arch'
          echo ''
          echo 'npm:'
          npm --version
          npm config get registry
        timeout-minutes: 2

      # Update the npm client (older clients cannot handle scoped modules):
      - name: 'Update npm'
        run: |
          npm install -g npm@"${{ matrix.NPM_VERSION }}"
          npm --version
        timeout-minutes: 5

      # Install Windows build tools for compiling Node.js native add-ons.
      #
      # ## Notes
      #
      # -   Installs both Visual Studio Build Tools and Python 3.8.
      # -   Path to Python executable: `%USERPROFILE%\.windows-build-tools\python38`.
      #
      # [1]: https://github.com/felixrieseberg/windows-build-tools
      # [2]: https://github.com/nodejs/node-gyp#installation
      - name: 'Install Windows build tools'
        run: npm install --global --production windows-build-tools
        timeout-minutes: 5

      # Configure npm:
      - name: 'Configure npm'
        run: |
          npm config set python "$USERPROFILE/.windows-build-tools/python38"
          npm config set msvs_version 2017
        timeout-minutes: 2

      # Checkout the repository:
      - name: 'Checkout repository'
        uses: actions/checkout@v2
        with:
          # Specify whether to remove untracked files before checking out the repository:
          clean: false

          # Limit clone depth to the most recent 100 commits:
          fetch-depth: 100

          # Specify whether to download Git-LFS files:
          lfs: false
        timeout-minutes: 10

      # Run the build task:
      - name: 'Run build task'
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x ./tools/ci/github/script
          "./tools/ci/github/script" ${{ matrix.BUILD_TASK }} || "./tools/ci/github/script" ${{ matrix.BUILD_TASK }}
        timeout-minutes: 360

      # View the log file if the previous step fails:
      - name: 'View log file'
        if: failure()
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x ./tools/ci/github/on_failure
          "./tools/ci/github/on_failure" ${{ matrix.BUILD_TASK }}
        timeout-minutes: 5

      # Upload the log file:
      - name: 'Upload log file'
        uses: actions/upload-artifact@v2
        if: always()
        with:
          # Define a name for the uploaded artifact (ensuring a unique name for each job):
          name: ${{ matrix.BUILD_TASK }}-log-v${{ matrix.NODE_VERSION }}-${{ matrix.PLATFORM }}

          # Specify the path to the file to upload:
          path: ./tmp/var/log/${{ matrix.BUILD_TASK }}.log

          # Specify the number of days to retain the artifact (default is 90 days):
          retention-days: 5
        timeout-minutes: 10

  # Define a job for sending notifications to Slack...
  slack:

    # Define a display name:
    name: 'Slack notification'

    # Define the type of virtual host machine:
    runs-on: 'ubuntu-latest'

    # Indicate that this job depends on the prior job finishing:
    needs: test_npm_install

    # Run this job regardless of the outcome of the prior job:
    if: always()

    # Set defaults:
    defaults:
      run:
        # Set the default shell to `bash`:
        shell: bash --noprofile --norc -eo pipefail {0}

    # Define the sequence of job steps...
    steps:

      # Resolve notification data:
      - name: 'Resolve notification data'
        run: |
          echo "NOTIFICATION_STATUS=${{ needs.test_npm_install.result}}" >> $GITHUB_ENV
          if [[ "${{ needs.test_npm_install.result }}" = "success" ]]; then
            echo "NOTIFICATION_TEXT='**test_npm_install** workflow succeeded (windows)'" >> $GITHUB_ENV
            echo "NOTIFICATION_AUTHOR_NAME=Success" >> $GITHUB_ENV
          elif [[ "${{ needs.test_npm_install.result }}" = "failure" ]]; then
            echo "NOTIFICATION_TEXT='**test_npm_install** workflow failed (windows)'" >> $GITHUB_ENV
            echo "NOTIFICATION_AUTHOR_NAME=Failure" >> $GITHUB_ENV
          elif [[ "${{ needs.test_npm_install.result }}" = "cancelled" ]]; then
            echo "NOTIFICATION_TEXT='**test_npm_install** workflow was canceled (windows)'" >> $GITHUB_ENV
            echo "NOTIFICATION_AUTHOR_NAME=Canceled" >> $GITHUB_ENV
          else
            exit 1
          fi
        timeout-minutes: 5

      # Send notification to Slack:
      - name: 'Send notification'
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: "${{ env.NOTIFICATION_STATUS }}"
          fields: repo,commit,message
          text: "${{ env.NOTIFICATION_TEXT }}"
          author_name: "${{ env.NOTIFICATION_AUTHOR_NAME }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.REPO_SLACK_WEBHOOK_URL }}
        timeout-minutes: 5
