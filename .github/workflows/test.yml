#/
# @license Apache-2.0
#
# Copyright (c) 2019 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: test

# Workflow triggers:
on:
  push:
    branches:
      - develop
      - master
    # paths:
    #   # Run workflow for all paths which have a `*.js` file extension:
    #   - '*.js'

    #   # Run workflow whenever the root `package.json` changes:
    #   - '/package.json'

    #   # Run workflow whenever this file changes:
    #   - '/.github/workflows/test.yml'

    #   # Except for paths within certain folders:
    #   - '!*/benchmark/*'
    #   - '!*/examples/*'
    #   - '!*/scripts/*'

    #   # Except for certain top-level directories:
    #   - '!/docs/*'
    #   - '!/tools/*'

# Workflow jobs:
jobs:

  # Define a workflow for running unit tests...
  unit_tests:

    # Define a display name:
    name: "unit tests: NODE_VERSION=${{ matrix.NODE_VERSION }}, OS=${{ matrix.OS }}"

    # Define the type of virtual host machine on which to run the job:
    runs-on: ${{ matrix.OS }}

    # Define the build matrix...
    strategy:
      matrix:
        # Define the list of Node.js versions on which to run this job:
        NODE_VERSION: ['12', '10', '8', '6', '4', '0.12', '0.10']

        # Define the list of operating systems on which to run this job:
        OS: [ubuntu-latest, macOS-latest]

        # Define configuration options for each Node.js version:
        include:
          - OS: 'ubuntu-latest'
            PLATFORM: 'linux'

          - OS: 'macOS-latest'
            PLATFORM: 'macos'

          - NODE_VERSION: '12'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '10'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '8'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '6'
            NPM_VERSION: '>2.7.0'

          - NODE_VERSION: '4'
            NPM_VERSION: '>2.7.0 <6.0.0'

          - NODE_VERSION: '0.12'
            NPM_VERSION: '>2.7.0 <4.0.0'

          - NODE_VERSION: '0.10'
            NPM_VERSION: '>2.7.0 <4.0.0'

    # Define the sequence of job steps...
    steps:
      # Install system packages:
      - name: 'Install system packages'
        shell: bash
        run: |
          if [[ ${{ matrix.PLATFORM }} = "linux" ]]; then
            sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
            sudo -E apt-get update -q
            sudo -E apt-get -yq --no-install-suggests --no-install-recommends --allow-downgrades --allow-remove-essential --allow-change-held-packages install binutils gcc-9 gcc-9-multilib g++-9 g++-9-multilib gfortran-9 gfortran-9-multilib xvfb
            mkdir -p $HOME/bin
            export PATH=$HOME/bin:$PATH
            echo $PATH
            ln -s /usr/bin/gcc-9 $HOME/bin/gcc
            ln -s /usr/bin/g++-9 $HOME/bin/g++
            ln -s /usr/bin/gfortran-9 $HOME/bin/gfortran
          else
            brew update
            brew install -v gcc
          fi
        timeout-minutes: 10

      # Configure the virtual display server (needed for electron):
      - name: 'Configure virtual display server'
        shell: bash
        run: |
          export DISPLAY=':99.0'
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        timeout-minutes: 2

      # Install Node.js:
      - name: 'Install Node.js'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.NODE_VERSION }}
        timeout-minutes: 5

      # Print debug info:
      - name: 'Print debug info'
        shell: bash
        run: |
          echo 'gcc:'
          gcc --version
          echo ''
          echo 'g++:'
          g++ --version
          echo ''
          echo 'gfortran:'
          gfortran --version
          echo ''
          echo 'Git:'
          git --version
          echo ''
          echo 'Node.js:'
          file $(which node)
          node --version
          node -p 'process.platform + "@" + process.arch'
          echo ''
          echo 'npm:'
          npm --version
          npm config get registry
        timeout-minutes: 2

      # Update the npm client (older clients cannot handle scoped modules):
      - name: 'Update npm'
        shell: bash
        run: |
          npm install -g npm@"${{ matrix.NPM_VERSION }}"
          npm --version
        timeout-minutes: 5

      # Checkout the repository:
      - name: 'Checkout repository'
        uses: actions/checkout@v1
        with:
          # Specify whether to remove untracked files before checking out the repository:
          clean: false

          # Limit clone depth to the most recent 100 commits:
          fetch-depth: 100

          # Specify whether to download Git-LFS files:
          lfs: false
