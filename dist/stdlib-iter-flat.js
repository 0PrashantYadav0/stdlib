(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.stdlib_iter_flat = f()}})(function(){var define,module,exports;
var createModuleFactory = function createModuleFactory(t){var e;return function(r){return e||t(e={exports:{},parent:r},e.exports),e.exports}};
var _$buffer_1428 = createModuleFactory(function (module, exports) {
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

/* removed: var _$base64Js_1427 = require('base64-js') */;
/* removed: var _$ieee754_1429 = require('ieee754') */;
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return _$base64Js_1427.fromByteArray(buf)
  } else {
    return _$base64Js_1427.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return _$ieee754_1429.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return _$ieee754_1429.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return _$ieee754_1429.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return _$ieee754_1429.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  _$ieee754_1429.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  _$ieee754_1429.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return _$base64Js_1427.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

}).call(this,_$buffer_1428({}).Buffer)
});
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


// EXPORTS //

var _$main_52 = main;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$main_52 = require( './define_property.js' ); */;


// MAIN //

/**
* Tests for `Object.defineProperty` support.
*
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/
function hasDefinePropertySupport() {
	var bool;

	if ( typeof _$main_52 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		_$main_52( {}, 'x', {} );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasDefinePropertySupport_54 = hasDefinePropertySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for `Object.defineProperty` support.
*
* @module @stdlib/assert/has-define-property-support
*
* @example
* var hasDefinePropertySupport = require( '@stdlib/assert/has-define-property-support' );
*
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasDefinePropertySupport_54 = require( './main.js' ); */;


// EXPORTS //

var _$hasDefinePropertySupport_53 = _$hasDefinePropertySupport_54;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
var __defineProperty_1363 = Object.defineProperty;


// EXPORTS //

var _$defineProperty_1363 = __defineProperty_1363;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if an object has a specified property, either own or inherited.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'bap' );
* // returns false
*/
function hasProp( value, property ) {
	if ( value === void 0 || value === null ) {
		return false;
	}
	if ( typeof property === 'symbol' ) {
		return property in Object( value );
	}
	return ( String( property ) in Object( value ) );
}


// EXPORTS //

var _$hasProp_81 = hasProp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property, either own or inherited.
*
* @module @stdlib/assert/has-property
*
* @example
* var hasProp = require( '@stdlib/assert/has-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* bool = hasProp( beep, 'bop' );
* // returns false
*/

// MODULES //

/* removed: var _$hasProp_81 = require( './main.js' ); */;


// EXPORTS //

var _$hasProp_80 = _$hasProp_81;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

var _$hasSymbolSupport_83 = hasSymbolSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasSymbolSupport_83 = require( './main.js' ); */;


// EXPORTS //

var _$hasSymbolSupport_82 = _$hasSymbolSupport_83;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasSymbolSupport_82 = require( '@stdlib/assert/has-symbol-support' ); */;


// VARIABLES //

var FLG = _$hasSymbolSupport_82();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

var _$hasToStringTagSupport_85 = hasToStringTagSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasToStringTagSupport_85 = require( './main.js' ); */;


// EXPORTS //

var _$hasToStringTagSupport_84 = _$hasToStringTagSupport_85;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

var _$toStr_1406 = toStr;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toStr_1406 = require( './tostring.js' ); */;


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return _$toStr_1406.call( v );
}


// EXPORTS //

var _$nativeClass_1404 = nativeClass;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

var _$hasOwnProp_79 = hasOwnProp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

/* removed: var _$hasOwnProp_79 = require( './main.js' ); */;


// EXPORTS //

var _$hasOwnProp_78 = _$hasOwnProp_79;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

var _$toStrTag_1407 = toStrTag;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$toStrTag_1407 = require( './tostringtag.js' ); */;
/* removed: var _$toStr_1406 = require( './tostring.js' ); */;


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function __nativeClass_1405( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return _$toStr_1406.call( v );
	}
	tag = v[ _$toStrTag_1407 ];
	isOwn = _$hasOwnProp_78( v, _$toStrTag_1407 );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ _$toStrTag_1407 ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return _$toStr_1406.call( v );
	}
	out = _$toStr_1406.call( v );

	if ( isOwn ) {
		v[ _$toStrTag_1407 ] = tag;
	} else {
		delete v[ _$toStrTag_1407 ];
	}
	return out;
}


// EXPORTS //

var _$nativeClass_1405 = __nativeClass_1405;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

/* removed: var _$hasToStringTagSupport_84 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1404 = require( './native_class.js' ); */;
/* removed: var _$nativeClass_1405 = require( './polyfill.js' ); */;


// MAIN //

var __nativeClass_1403;
if ( _$hasToStringTagSupport_84() ) {
	__nativeClass_1403 = _$nativeClass_1405;
} else {
	__nativeClass_1403 = _$nativeClass_1404;
}


// EXPORTS //

var _$nativeClass_1403 = __nativeClass_1403;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var f;


// FUNCTIONS //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( _$nativeClass_1403( value ) === '[object Array]' );
}


// MAIN //

if ( Array.isArray ) {
	f = Array.isArray;
} else {
	f = isArray;
}


// EXPORTS //

var _$f_107 = f;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

/* removed: var _$f_107 = require( './main.js' ); */;


// EXPORTS //

var _$isArray_106 = _$f_107;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArray_106 = require( '@stdlib/assert/is-array' ); */;


// MAIN //

/**
* Tests if a value is an object; e.g., `{}`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an object
*
* @example
* var bool = isObject( {} );
* // returns true
*
* @example
* var bool = isObject( null );
* // returns false
*/
function isObject( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		!_$isArray_106( value )
	);
}


// EXPORTS //

var _$isObject_171 = isObject;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an object.
*
* @module @stdlib/assert/is-object
*
* @example
* var isObject = require( '@stdlib/assert/is-object' );
*
* var bool = isObject( {} );
* // returns true
*
* bool = isObject( true );
* // returns false
*/

// MODULES //

/* removed: var _$isObject_171 = require( './main.js' ); */;


// EXPORTS //

var _$isObject_170 = _$isObject_171;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-proto */

'use strict';

// MODULES //

/* removed: var _$hasProp_80 = require( '@stdlib/assert/has-property' ); */;
/* removed: var _$isObject_170 = require( '@stdlib/assert/is-object' ); */;


// VARIABLES //

var objectProtoype = Object.prototype;
var defineGetter = objectProtoype.__defineGetter__;
var defineSetter = objectProtoype.__defineSetter__;
var lookupGetter = objectProtoype.__lookupGetter__;
var lookupSetter = objectProtoype.__lookupSetter__;


// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
function __defineProperty_1365( obj, prop, descriptor ) {
	var prototype;
	var hasValue;
	var hasGet;
	var hasSet;

	if ( !_$isObject_170( obj ) ) {
		throw new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );
	}
	if ( !_$isObject_170( descriptor ) ) {
		throw new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );
	}
	hasValue = _$hasProp_80( descriptor, 'value' );
	if ( hasValue ) {
		if (
			lookupGetter.call( obj, prop ) ||
			lookupSetter.call( obj, prop )
		) {
			// Override `__proto__` to avoid touching inherited accessors:
			prototype = obj.__proto__;
			obj.__proto__ = objectProtoype;

			// Delete property as existing getters/setters prevent assigning value to specified property:
			delete obj[ prop ];
			obj[ prop ] = descriptor.value;

			// Restore original prototype:
			obj.__proto__ = prototype;
		} else {
			obj[ prop ] = descriptor.value;
		}
	}
	hasGet = _$hasProp_80( descriptor, 'get' );
	hasSet = _$hasProp_80( descriptor, 'set' );

	if ( hasValue && ( hasGet || hasSet ) ) {
		throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
	}

	if ( hasGet && defineGetter ) {
		defineGetter.call( obj, prop, descriptor.get );
	}
	if ( hasSet && defineSetter ) {
		defineSetter.call( obj, prop, descriptor.set );
	}
	return obj;
}


// EXPORTS //

var _$defineProperty_1365 = __defineProperty_1365;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

// MODULES //

/* removed: var _$hasDefinePropertySupport_53 = require( '@stdlib/assert/has-define-property-support' ); */;
/* removed: var _$defineProperty_1363 = require( './builtin.js' ); */;
/* removed: var _$defineProperty_1365 = require( './polyfill.js' ); */;


// MAIN //

var __defineProperty_1364;
if ( _$hasDefinePropertySupport_53() ) {
	__defineProperty_1364 = _$defineProperty_1363;
} else {
	__defineProperty_1364 = _$defineProperty_1365;
}


// EXPORTS //

var _$defineProperty_1364 = __defineProperty_1364;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setReadOnly( obj, prop, value ) {
	_$defineProperty_1364( obj, prop, {
		'configurable': false,
		'enumerable': true,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

var _$setReadOnly_1367 = setReadOnly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setReadOnly_1367 = require( './main.js' ); */;


// EXPORTS //

var _$setReadOnly_1366 = _$setReadOnly_1367;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var RE = /./;


// EXPORTS //

var _$RE_1422 = RE;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnly( obj, prop, value ) {
	_$defineProperty_1364( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

var _$setNonEnumerableReadOnly_1360 = setNonEnumerableReadOnly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1360 = require( './main.js' ); */;


// EXPORTS //

var _$setNonEnumerableReadOnly_1359 = _$setNonEnumerableReadOnly_1360;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a boolean primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean primitive
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns false
*/
function isBoolean( value ) {
	return ( typeof value === 'boolean' );
}


// EXPORTS //

var _$isBoolean_111 = isBoolean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// eslint-disable-next-line stdlib/no-redeclare
var toString = Boolean.prototype.toString; // non-generic


// EXPORTS //

var _$toString_112 = toString;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toString_112 = require( './tostring.js' ); */; // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		_$toString_112.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

var _$test_113 = test;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasToStringTagSupport_84 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$test_113 = require( './try2serialize.js' ); */;


// VARIABLES //

var __FLG_110 = _$hasToStringTagSupport_84();


// MAIN //

/**
* Tests if a value is a boolean object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean object
*
* @example
* var bool = isBoolean( true );
* // returns false
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*/
function __isBoolean_110( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof Boolean ) {
			return true;
		}
		if ( __FLG_110 ) {
			return _$test_113( value );
		}
		return ( _$nativeClass_1403( value ) === '[object Boolean]' );
	}
	return false;
}


// EXPORTS //

var _$isBoolean_110 = __isBoolean_110;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isBoolean_111 = require( './primitive.js' ); */;
/* removed: var _$isBoolean_110 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a boolean.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a boolean
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns true
*/
function __isBoolean_109( value ) {
	return ( _$isBoolean_111( value ) || _$isBoolean_110( value ) );
}


// EXPORTS //

var _$isBoolean_109 = __isBoolean_109;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a boolean.
*
* @module @stdlib/assert/is-boolean
*
* @example
* var isBoolean = require( '@stdlib/assert/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* // Use interface to check for boolean primitives...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
*
* @example
* // Use interface to check for boolean objects...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isBoolean_109 = require( './main.js' ); */;
/* removed: var _$isBoolean_111 = require( './primitive.js' ); */;
/* removed: var _$isBoolean_110 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isBoolean_109, 'isPrimitive', _$isBoolean_111 );
_$setNonEnumerableReadOnly_1359( _$isBoolean_109, 'isObject', _$isBoolean_110 );


// EXPORTS //

var _$isBoolean_108 = _$isBoolean_109;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the global object using code generation.
*
* @private
* @returns {Object} global object
*/
function getGlobal() {
	return new Function( 'return this;' )(); // eslint-disable-line no-new-func
}


// EXPORTS //

var _$getGlobal_1376 = getGlobal;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof self === 'object' ) ? self : null;


// EXPORTS //

var _$obj_1380 = obj;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __obj_1381 = ( typeof window === 'object' ) ? window : null;


// EXPORTS //

var _$obj_1381 = __obj_1381;

var _$obj_1377 = {};
(function (global){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof global === 'object' ) ? global : null;


// EXPORTS //

_$obj_1377 = obj;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isBoolean_1379 = _$isBoolean_108.isPrimitive;
/* removed: var _$getGlobal_1376 = require( './codegen.js' ); */;
/* removed: var _$obj_1380 = require( './self.js' ); */;
/* removed: var _$obj_1381 = require( './window.js' ); */;
/* removed: var _$obj_1377 = require( './global.js' ); */;


// MAIN //

/**
* Returns the global object.
*
* ## Notes
*
* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.
*
* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object
* @throws {TypeError} must provide a boolean
* @throws {Error} unable to resolve global object
* @returns {Object} global object
*
* @example
* var g = getGlobal();
* // returns {...}
*/
function __getGlobal_1379( codegen ) {
	if ( arguments.length ) {
		if ( !__isBoolean_1379( codegen ) ) {
			throw new TypeError( 'invalid argument. Must provide a boolean primitive. Value: `'+codegen+'`.' );
		}
		if ( codegen ) {
			return _$getGlobal_1376();
		}
		// Fall through...
	}
	// Case: browsers and web workers
	if ( _$obj_1380 ) {
		return _$obj_1380;
	}
	// Case: browsers
	if ( _$obj_1381 ) {
		return _$obj_1381;
	}
	// Case: Node.js
	if ( _$obj_1377 ) {
		return _$obj_1377;
	}
	// Case: unknown
	throw new Error( 'unexpected error. Unable to resolve global object.' );
}


// EXPORTS //

var _$getGlobal_1379 = __getGlobal_1379;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the global object.
*
* @module @stdlib/utils/global
*
* @example
* var getGlobal = require( '@stdlib/utils/global' );
*
* var g = getGlobal();
* // returns {...}
*/

// MODULES //

/* removed: var _$getGlobal_1379 = require( './main.js' ); */;


// EXPORTS //

var _$getGlobal_1378 = _$getGlobal_1379;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getGlobal_1378 = require( '@stdlib/utils/global' ); */;


// MAIN //

var root = _$getGlobal_1378();
var nodeList = root.document && root.document.childNodes;


// EXPORTS //

var _$nodeList_1421 = nodeList;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var typedarray = Int8Array; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$typedarray_1423 = typedarray;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$RE_1422 = require( './fixtures/re.js' ); */;
/* removed: var _$nodeList_1421 = require( './fixtures/nodelist.js' ); */;
/* removed: var _$typedarray_1423 = require( './fixtures/typedarray.js' ); */;


// MAIN //

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/
function check() {
	if (
		// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
		typeof _$RE_1422 === 'function' ||

		// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
		typeof _$typedarray_1423 === 'object' ||

		// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
		typeof _$nodeList_1421 === 'function'
	) {
		return true;
	}
	return false;
}


// EXPORTS //

var _$check_1420 = check;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
* @type {RegExp}
*
* @example
* var RE_FUNCTION_NAME = require( '@stdlib/regexp/function-name' );
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/


// MAIN //

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* -   `/^\s*`
*     -   Match zero or more spaces at beginning
*
* -   `function`
*     -   Match the word `function`
*
* -   `\s*`
*     -   Match zero or more spaces after the word `function`
*
* -   `()`
*     -   Capture
*
* -   `[^(]*`
*     -   Match anything except a left parenthesis `(` zero or more times
*
* -   `/i`
*     -   ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/
var RE_FUNCTION_NAME = /^\s*function\s*([^(]*)/i;


// EXPORTS //

var _$RE_FUNCTION_NAME_1133 = RE_FUNCTION_NAME;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArray_106 = require( '@stdlib/assert/is-array' ); */;


// MAIN //

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arrayfcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( 'invalid argument. Must provide a function. Value: `' + predicate + '`.' );
	}
	return every;

	/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !_$isArray_106( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	}
}


// EXPORTS //

var _$arrayfcn_204 = arrayfcn;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

/* removed: var _$arrayfcn_204 = require( './arrayfcn.js' ); */;


// EXPORTS //

var _$arrayfcn_205 = _$arrayfcn_204;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/
function isObjectLike( value ) {
	return (
		value !== null &&
		typeof value === 'object'
	);
}


// EXPORTS //

var _$isObjectLike_169 = isObjectLike;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$arrayfcn_205 = require( '@stdlib/assert/tools/array-function' ); */;
/* removed: var _$isObjectLike_169 = require( './main.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isObjectLike_169, 'isObjectLikeArray', _$arrayfcn_205( _$isObjectLike_169 ) );


// EXPORTS //

var _$isObjectLike_168 = _$isObjectLike_169;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isObjectLike_168 = require( '@stdlib/assert/is-object-like' ); */;


// MAIN //

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/
function isBuffer( value ) {
	return (
		_$isObjectLike_168( value ) &&
		(
			// eslint-disable-next-line no-underscore-dangle
			value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
			(
				value.constructor &&

				// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
				typeof value.constructor.isBuffer === 'function' &&
				value.constructor.isBuffer( value )
			)
		)
	);
}


// EXPORTS //

var _$isBuffer_115 = isBuffer;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

// MODULES //

/* removed: var _$isBuffer_115 = require( './main.js' ); */;


// EXPORTS //

var _$isBuffer_114 = _$isBuffer_115;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$RE_FUNCTION_NAME_1133 = require( '@stdlib/regexp/function-name' ); */;
/* removed: var _$isBuffer_114 = require( '@stdlib/assert/is-buffer' ); */;


// MAIN //

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
*
* @example
* var v = constructorName( 5 );
* // returns 'Number'
*
* @example
* var v = constructorName( null );
* // returns 'Null'
*
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
*
* @example
* var v = constructorName( function noop() {} );
* // returns 'Function'
*/
function constructorName( v ) {
	var match;
	var name;
	var ctor;
	name = _$nativeClass_1403( v ).slice( 8, -1 );
	if ( (name === 'Object' || name === 'Error') && v.constructor ) {
		ctor = v.constructor;
		if ( typeof ctor.name === 'string' ) {
			return ctor.name;
		}
		match = _$RE_FUNCTION_NAME_1133.exec( ctor.toString() );
		if ( match ) {
			return match[ 1 ];
		}
	}
	if ( _$isBuffer_114( v ) ) {
		return 'Buffer';
	}
	return name;
}


// EXPORTS //

var _$constructorName_1350 = constructorName;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

// MODULES //

/* removed: var _$constructorName_1350 = require( './main.js' ); */;


// EXPORTS //

var _$constructorName_1349 = _$constructorName_1350;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constructorName_1349 = require( '@stdlib/utils/constructor-name' ); */;


// NOTES //

/*
* Built-in `typeof` operator behavior:
*
* ```text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	var type;

	// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
	if ( v === null ) {
		return 'null';
	}
	type = typeof v;

	// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
	if ( type === 'object' ) {
		return _$constructorName_1349( v ).toLowerCase();
	}
	return type;
}


// EXPORTS //

var _$typeOf_1426 = typeOf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constructorName_1349 = require( '@stdlib/utils/constructor-name' ); */;


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function __typeOf_1425( v ) {
	return _$constructorName_1349( v ).toLowerCase();
}


// EXPORTS //

var _$typeOf_1425 = __typeOf_1425;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

// MODULES //

/* removed: var _$check_1420 = require( './check.js' ); */;
/* removed: var _$typeOf_1426 = require( './typeof.js' ); */;
/* removed: var _$typeOf_1425 = require( './polyfill.js' ); */;


// MAIN //

var __main_1424 = ( _$check_1420() ) ? _$typeOf_1425 : _$typeOf_1426;


// EXPORTS //

var _$main_1424 = __main_1424;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$main_1424 = require( '@stdlib/utils/type-of' ); */;


// MAIN //

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/
function isFunction( value ) {
	// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
	return ( _$main_1424( value ) === 'function' );
}


// EXPORTS //

var _$isFunction_133 = isFunction;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

// MODULES //

/* removed: var _$isFunction_133 = require( './main.js' ); */;


// EXPORTS //

var _$isFunction_132 = _$isFunction_133;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$floor_522 = floor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$floor_522 = require( './floor.js' ); */;


// EXPORTS //

var _$floor_523 = _$floor_522;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (_$floor_523(x) === x);
}


// EXPORTS //

var _$isInteger_369 = isInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

/* removed: var _$isInteger_369 = require( './is_integer.js' ); */;


// EXPORTS //

var _$isInteger_368 = _$isInteger_369;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum length of a generic array.
*
* @module @stdlib/constants/array/max-array-length
*
* @example
* var MAX_ARRAY_LENGTH = require( '@stdlib/constants/array/max-array-length' );
* // returns 4294967295
*/

// MAIN //

/**
* Maximum length of a generic array.
*
* ```tex
* 2^{32} - 1
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var MAX_ARRAY_LENGTH = 4294967295>>>0; // asm type annotation


// EXPORTS //

var _$MAX_ARRAY_LENGTH_216 = MAX_ARRAY_LENGTH;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$MAX_ARRAY_LENGTH_216 = require( '@stdlib/constants/array/max-array-length' ); */;


// MAIN //

/**
* Tests if a value is an array-like object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is an array-like object
*
* @example
* var bool = isArrayLikeObject( [] );
* // returns true
*
* @example
* var bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* @example
* var bool = isArrayLikeObject( 'beep' );
* // returns false
*/
function isArrayLikeObject( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		typeof value.length === 'number' &&
		_$isInteger_368( value.length ) &&
		value.length >= 0 &&
		value.length <= _$MAX_ARRAY_LENGTH_216
	);
}


// EXPORTS //

var _$isArrayLikeObject_105 = isArrayLikeObject;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array-like object.
*
* @module @stdlib/assert/is-array-like-object
*
* @example
* var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
*
* var bool = isArrayLikeObject( [] );
* // returns true
*
* bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* bool = isArrayLikeObject( 'beep' );
* // returns false
*/

// MODULES //

/* removed: var _$isArrayLikeObject_105 = require( './main.js' ); */;


// EXPORTS //

var _$isArrayLikeObject_104 = _$isArrayLikeObject_105;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;


// MAIN //

/**
* Tests if a value is iterator-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is iterator-like
*
* @example
* var it = {
*     'next': function noop() {}
* };
* var bool = isIteratorLike( it );
* // returns true
*
* @example
* var bool = isIteratorLike( {} );
* // returns false
*
* @example
* var bool = isIteratorLike( null );
* // returns false
*/
function isIteratorLike( value ) {
	return (
		value !== null &&
		typeof value === 'object' &&
		_$isFunction_132( value.next ) &&
		value.next.length === 0
	);
}


// EXPORTS //

var _$isIteratorLike_146 = isIteratorLike;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is iterator-like.
*
* @module @stdlib/assert/is-iterator-like
*
* @example
* var isIteratorLike = require( '@stdlib/assert/is-iterator-like' );
*
* var it = {
*     'next': function noop() {}
* };
* var bool = isIteratorLike( it );
* // returns true
*
* bool = isIteratorLike( {} );
* // returns false
*/

// MODULES //

/* removed: var _$isIteratorLike_146 = require( './main.js' ); */;


// EXPORTS //

var _$isIterator_145 = _$isIteratorLike_146;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Creates (or fills) an array from an iterator.
*
* @param {Iterator} iterator - source iterator
* @param {ArrayLikeObject} [out] - output array
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} iterator argument must be an iterator
* @throws {TypeError} callback argument must be a function
* @returns {ArrayLikeObject} output array
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = randu({
*     'iter': 10
* });
*
* var arr = iterator2array( iter );
* // returns <Array>
*/
function iterator2array() {
	var iterator;
	var thisArg;
	var fcn;
	var out;
	var len;
	var i;
	var v;

	iterator = arguments[ 0 ];
	if ( arguments.length > 1 ) {
		if ( _$isArrayLikeObject_104( arguments[ 1 ] ) ) {
			out = arguments[ 1 ];
			if ( arguments.length > 2 ) {
				fcn = arguments[ 2 ];
				if ( !_$isFunction_132( fcn ) ) {
					throw new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + fcn + '`.' );
				}
				thisArg = arguments[ 3 ];
			}
		} else {
			fcn = arguments[ 1 ];
			if ( !_$isFunction_132( fcn ) ) {
				throw new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + fcn + '`.' );
			}
			thisArg = arguments[ 2 ];
		}
	}
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Iterator argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	i = -1;
	if ( out === void 0 ) {
		out = [];
		if ( fcn ) {
			while ( true ) {
				i += 1;
				v = iterator.next();
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					out.push( fcn.call( thisArg, v.value, i ) );
				}
				if ( v.done ) {
					break;
				}
			}
			return out;
		}
		while ( true ) {
			v = iterator.next();
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.push( v.value );
			}
			if ( v.done ) {
				break;
			}
		}
		return out;
	}
	len = out.length;
	if ( fcn ) {
		while ( i < len-1 ) {
			i += 1;
			v = iterator.next();
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out[ i ] = fcn.call( thisArg, v.value, i );
			}
			if ( v.done ) {
				break;
			}
		}
		return out;
	}
	while ( i < len-1 ) {
		i += 1;
		v = iterator.next();
		if ( _$hasOwnProp_78( v, 'value' ) ) {
			out[ i ] = v.value;
		}
		if ( v.done ) {
			break;
		}
	}
	return out;
}


// EXPORTS //

var _$iterator2array_8 = iterator2array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create (or fill) an array from an iterator.
*
* @module @stdlib/array/from-iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterator2array = require( '@stdlib/array/from-iterator' );
*
* var iter = randu({
*     'iter': 10
* });
*
* var arr = iterator2array( iter );
* // returns <Array>
*/

// MODULES //

/* removed: var _$iterator2array_8 = require( './main.js' ); */;


// EXPORTS //

var _$main_7 = _$iterator2array_8;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var getProto = Object.getPrototypeOf;


// EXPORTS //

var _$getProto_1373 = getProto;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/
function __getProto_1375( obj ) {
	// eslint-disable-next-line no-proto
	return obj.__proto__;
}


// EXPORTS //

var _$getProto_1375 = __getProto_1375;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$getProto_1375 = require( './proto.js' ); */;


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/
function getPrototypeOf( obj ) {
	var proto = _$getProto_1375( obj );
	if ( proto || proto === null ) {
		return proto;
	}
	if ( _$nativeClass_1403( obj.constructor ) === '[object Function]' ) {
		// May break if the constructor has been tampered with...
		return obj.constructor.prototype;
	}
	if ( obj instanceof Object ) {
		return Object.prototype;
	}
	// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.
	return null;
}


// EXPORTS //

var _$getPrototypeOf_1374 = getPrototypeOf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$getProto_1373 = require( './native.js' ); */;
/* removed: var _$getPrototypeOf_1374 = require( './polyfill.js' ); */;


// MAIN //

var __getProto_1370;
if ( _$isFunction_132( Object.getPrototypeOf ) ) {
	__getProto_1370 = _$getProto_1373;
} else {
	__getProto_1370 = _$getPrototypeOf_1374;
}


// EXPORTS //

var _$getProto_1370 = __getProto_1370;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getProto_1370 = require( './detect.js' ); */;


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/
function __getPrototypeOf_1371( value ) {
	if (
		value === null ||
		value === void 0
	) {
		return null;
	}
	// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:
	value = Object( value );

	return _$getProto_1370( value );
}


// EXPORTS //

var _$getPrototypeOf_1371 = __getPrototypeOf_1371;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

// MODULES //

/* removed: var _$getPrototypeOf_1371 = require( './get_prototype_of.js' ); */;


// EXPORTS //

var _$getPrototype_1372 = _$getPrototypeOf_1371;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isObject_170 = require( '@stdlib/assert/is-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$getPrototype_1372 = require( '@stdlib/utils/get-prototype-of' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var objectPrototype = Object.prototype;


// FUNCTIONS //

/**
* Tests that an object only has own properties.
*
* @private
* @param {Object} obj - value to test
* @returns {boolean} boolean indicating if an object only has own properties
*/
function ownProps( obj ) {
	var key;

	// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).
	for ( key in obj ) {
		if ( !_$hasOwnProp_78( obj, key ) ) {
			return false;
		}
	}
	return true;
}


// MAIN //

/**
* Tests if a value is a plain object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a plain object
*
* @example
* var bool = isPlainObject( {} );
* // returns true
*
* @example
* var bool = isPlainObject( null );
* // returns false
*/
function isPlainObject( value ) {
	var proto;

	// Screen for obvious non-objects...
	if ( !_$isObject_170( value ) ) {
		return false;
	}
	// Objects with no prototype (e.g., `Object.create( null )`) are plain...
	proto = _$getPrototype_1372( value );
	if ( !proto ) {
		return true;
	}
	// Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...
	return (
		// Cannot have own `constructor` property:
		!_$hasOwnProp_78( value, 'constructor' ) &&

		// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):
		_$hasOwnProp_78( proto, 'constructor' ) &&
		_$isFunction_132( proto.constructor ) &&
		_$nativeClass_1403( proto.constructor ) === '[object Function]' &&

		// Test for object-specific method:
		_$hasOwnProp_78( proto, 'isPrototypeOf' ) &&
		_$isFunction_132( proto.isPrototypeOf ) &&

		(
			// Test if the prototype matches the global `Object` prototype (same realm):
			proto === objectPrototype ||

			// Test that all properties are own properties (cross-realm; *most* likely a plain object):
			ownProps( value )
		)
	);
}


// EXPORTS //

var _$isPlainObject_173 = isPlainObject;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a plain object.
*
* @module @stdlib/assert/is-plain-object
*
* @example
* var isPlainObject = require( '@stdlib/assert/is-plain-object' );
*
* var bool = isPlainObject( {} );
* // returns true
*
* bool = isPlainObject( null );
* // returns false
*/

// MODULES //

/* removed: var _$isPlainObject_173 = require( './main.js' ); */;


// EXPORTS //

var _$isPlainObject_172 = _$isPlainObject_173;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );
}


// EXPORTS //

var _$isNumber_165 = isNumber;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

var _$Number_821 = Number; // eslint-disable-line stdlib/require-globals

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

/* removed: var _$Number_821 = require( './number.js' ); */;


// EXPORTS //

var _$Number_820 = _$Number_821;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$Number_820 = require( '@stdlib/number/ctor' ); */;


// MAIN //

// eslint-disable-next-line stdlib/no-redeclare
var __toString_166 = _$Number_820.prototype.toString; // non-generic


// EXPORTS //

var _$toString_166 = __toString_166;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toString_166 = require( './tostring.js' ); */; // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function __test_167( value ) {
	try {
		_$toString_166.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

var _$test_167 = __test_167;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasToStringTagSupport_84 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$Number_820 = require( '@stdlib/number/ctor' ); */;
/* removed: var _$test_167 = require( './try2serialize.js' ); */;


// VARIABLES //

var __FLG_164 = _$hasToStringTagSupport_84();


// MAIN //

/**
* Tests if a value is a number object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object
*
* @example
* var bool = isNumber( 3.14 );
* // returns false
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*/
function __isNumber_164( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof _$Number_820 ) {
			return true;
		}
		if ( __FLG_164 ) {
			return _$test_167( value );
		}
		return ( _$nativeClass_1403( value ) === '[object Number]' );
	}
	return false;
}


// EXPORTS //

var _$isNumber_164 = __isNumber_164;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNumber_165 = require( './primitive.js' ); */;
/* removed: var _$isNumber_164 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a number
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( null );
* // returns false
*/
function __isNumber_163( value ) {
	return ( _$isNumber_165( value ) || _$isNumber_164( value ) );
}


// EXPORTS //

var _$isNumber_163 = __isNumber_163;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a number.
*
* @module @stdlib/assert/is-number
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' ).isObject;
*
* var bool = isNumber( 3.14 );
* // returns false
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isNumber_163 = require( './main.js' ); */;
/* removed: var _$isNumber_165 = require( './primitive.js' ); */;
/* removed: var _$isNumber_164 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isNumber_163, 'isPrimitive', _$isNumber_165 );
_$setNonEnumerableReadOnly_1359( _$isNumber_163, 'isObject', _$isNumber_164 );


// EXPORTS //

var _$isNumber_162 = _$isNumber_163;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$FLOAT64_PINF_238 = FLOAT64_PINF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$Number_820 = require( '@stdlib/number/ctor' ); */;


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = _$Number_820.NEGATIVE_INFINITY;


// EXPORTS //

var _$FLOAT64_NINF_235 = FLOAT64_NINF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Tests if a number primitive is an integer value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a number primitive is an integer value
*/
function __isInteger_141( value ) {
	return (
		value < _$FLOAT64_PINF_238 &&
		value > _$FLOAT64_NINF_235 &&
		_$isInteger_368( value )
	);
}


// EXPORTS //

var _$isInteger_141 = __isInteger_141;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_144 = _$isNumber_162.isPrimitive;
/* removed: var _$isInteger_141 = require( './integer.js' ); */;


// MAIN //

/**
* Tests if a value is a number primitive having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an integer value
*
* @example
* var bool = isInteger( -3.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( -3.0 ) );
* // returns false
*/
function __isInteger_144( value ) {
	return (
		__isNumber_144( value ) &&
		_$isInteger_141( value )
	);
}


// EXPORTS //

var _$isInteger_144 = __isInteger_144;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_143 = _$isNumber_162.isObject;
/* removed: var _$isInteger_141 = require( './integer.js' ); */;


// MAIN //

/**
* Tests if a value is a number object having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an integer value
*
* @example
* var bool = isInteger( 3.0 );
* // returns false
*
* @example
* var bool = isInteger( new Number( 3.0 ) );
* // returns true
*/
function __isInteger_143( value ) {
	return (
		__isNumber_143( value ) &&
		_$isInteger_141( value.valueOf() )
	);
}


// EXPORTS //

var _$isInteger_143 = __isInteger_143;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_144 = require( './primitive.js' ); */;
/* removed: var _$isInteger_143 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is an integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an integer
*
* @example
* var bool = isInteger( 5.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isInteger( -3.14 );
* // returns false
*
* @example
* var bool = isInteger( null );
* // returns false
*/
function __isInteger_142( value ) {
	return ( _$isInteger_144( value ) || _$isInteger_143( value ) );
}


// EXPORTS //

var _$isInteger_142 = __isInteger_142;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an integer.
*
* @module @stdlib/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/assert/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/assert/is-integer' ).isObject;
*
* var bool = isInteger( 3.0 );
* // returns false
*
* bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isInteger_142 = require( './main.js' ); */;
/* removed: var _$isInteger_144 = require( './primitive.js' ); */;
/* removed: var _$isInteger_143 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isInteger_142, 'isPrimitive', _$isInteger_144 );
_$setNonEnumerableReadOnly_1359( _$isInteger_142, 'isObject', _$isInteger_143 );


// EXPORTS //

var _$isInteger_140 = _$isInteger_142;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_157 = _$isInteger_140.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return (
		__isInteger_157( value ) &&
		value >= 0
	);
}


// EXPORTS //

var _$isNonNegativeInteger_157 = isNonNegativeInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_156 = _$isInteger_140.isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/
function __isNonNegativeInteger_156( value ) {
	return (
		__isInteger_156( value ) &&
		value.valueOf() >= 0
	);
}


// EXPORTS //

var _$isNonNegativeInteger_156 = __isNonNegativeInteger_156;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_157 = require( './primitive.js' ); */;
/* removed: var _$isNonNegativeInteger_156 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/
function __isNonNegativeInteger_155( value ) {
	return ( _$isNonNegativeInteger_157( value ) || _$isNonNegativeInteger_156( value ) );
}


// EXPORTS //

var _$isNonNegativeInteger_155 = __isNonNegativeInteger_155;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isNonNegativeInteger_155 = require( './main.js' ); */;
/* removed: var _$isNonNegativeInteger_157 = require( './primitive.js' ); */;
/* removed: var _$isNonNegativeInteger_156 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isNonNegativeInteger_155, 'isPrimitive', _$isNonNegativeInteger_157 );
_$setNonEnumerableReadOnly_1359( _$isNonNegativeInteger_155, 'isObject', _$isNonNegativeInteger_156 );


// EXPORTS //

var _$isNonNegativeInteger_154 = _$isNonNegativeInteger_155;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Tests for native `Symbol.iterator` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support
*
* @example
* var bool = hasIteratorSymbolSupport();
* // returns <boolean>
*/
function hasIteratorSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol' &&
		_$hasOwnProp_78( Symbol, 'iterator' ) &&
		typeof Symbol.iterator === 'symbol'
	);
}


// EXPORTS //

var _$hasIteratorSymbolSupport_74 = hasIteratorSymbolSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol.iterator` support.
*
* @module @stdlib/assert/has-iterator-symbol-support
*
* @example
* var hasIteratorSymbolSupport = require( '@stdlib/assert/has-iterator-symbol-support' );
*
* var bool = hasIteratorSymbolSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasIteratorSymbolSupport_74 = require( './main.js' ); */;


// EXPORTS //

var _$hasIteratorSymbolSupport_73 = _$hasIteratorSymbolSupport_74;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasIteratorSymbolSupport_73 = require( '@stdlib/assert/has-iterator-symbol-support' ); */;


// MAIN //

/**
* Iterator symbol.
*
* @name IteratorSymbol
* @constant
* @type {(symbol|null)}
*
* @example
* function iterator() {
*     var it;
*     var i;
*
*     i = -1;
*
*     it = {};
*     it.next = next;
*     it.return = done;
*
*     if ( IteratorSymbol ) {
*         it[ IteratorSymbol ] = iterator;
*     }
*     return it;
*
*     function next() {
*         i += 1;
*         return {
*             'value': i,
*             'done': false
*         };
*     }
*
*     function done( value ) {
*         if ( arguments.length === 0 ) {
*             return {
*                 'done': true
*             };
*         }
*         return {
*             'value': value,
*             'done': true
*         };
*     }
* }
*
* var obj = iterator();
*/
var IteratorSymbol = ( _$hasIteratorSymbolSupport_73() ) ? Symbol.iterator : null;


// EXPORTS //

var _$IteratorSymbol_1346 = IteratorSymbol;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Iterator symbol.
*
* @module @stdlib/symbol/iterator
*
* @example
* var IteratorSymbol = require( '@stdlib/symbol/iterator' );
*
* function iterator() {
*     var it;
*     var i;
*
*     i = -1;
*
*     it = {};
*     it.next = next;
*     it.return = done;
*
*     if ( IteratorSymbol ) {
*         it[ IteratorSymbol ] = iterator;
*     }
*     return it;
*
*     function next() {
*         i += 1;
*         return {
*             'value': i,
*             'done': false
*         };
*     }
*
*     function done( value ) {
*         if ( arguments.length === 0 ) {
*             return {
*                 'done': true
*             };
*         }
*         return {
*             'value': value,
*             'done': true
*         };
*     }
* }
*
* var obj = iterator();
*/

// MAIN //

/* removed: var _$IteratorSymbol_1346 = require( './main.js' ); */;


// EXPORTS //

var _$IteratorSymbol_1345 = _$IteratorSymbol_1346;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_19 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which repeatedly iterates over each element in an array-like object.
*
* @param {ArrayLikeObject} src - input value
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @param {integer} [options.dir=1] - iteration direction
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} callback argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = circarray2iterator( [ 1, 2, 3, 4 ] );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function circarray2iterator( src ) {
	var thisArg;
	var options;
	var count;
	var opts;
	var iter;
	var FLG;
	var fcn;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	opts = {
		'iter': 1e308, // ~infinity
		'dir': 1       // left to right iteration
	};
	if ( arguments.length > 1 ) {
		if ( _$isPlainObject_172( arguments[ 1 ] ) ) {
			options = arguments[ 1 ];
			if ( arguments.length > 2 ) {
				fcn = arguments[ 2 ];
				if ( !_$isFunction_132( fcn ) ) {
					throw new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + fcn + '`.' );
				}
				thisArg = arguments[ 3 ];
			}
			if ( _$hasOwnProp_78( options, 'iter' ) ) {
				opts.iter = options.iter;
				if ( !__isNonNegativeInteger_19( options.iter ) ) {
					throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
				}
			}
			if ( _$hasOwnProp_78( options, 'dir' ) ) {
				opts.dir = options.dir;
				if ( options.dir !== 1 && options.dir !== -1 ) {
					throw new TypeError( 'invalid option. `dir` option must be either `1` or `-1`. Option: `' + options.dir + '`.' );
				}
			}
		} else {
			fcn = arguments[ 1 ];
			if ( !_$isFunction_132( fcn ) ) {
				throw new TypeError( 'invalid argument. Second argument must be either a function or an options object. Value: `' + fcn + '`.' );
			}
			thisArg = arguments[ 2 ];
		}
	}
	count = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		if ( opts.dir === 1 ) {
			i = -1;
			_$setNonEnumerableReadOnly_1359( iter, 'next', next1a );
		} else {
			i = src.length;
			_$setNonEnumerableReadOnly_1359( iter, 'next', next1b );
		}
	} else if ( opts.dir === 1 ) {
		i = -1;
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2a );
	} else {
		i = src.length;
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2b );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1a() {
		i = (i+1) % src.length;
		count += 1;
		if ( FLG || count > opts.iter || src.length === 0 ) {
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, count, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1b() {
		i -= 1;
		if ( i < 0 ) {
			i += src.length;
		}
		count += 1;
		if ( FLG || count > opts.iter || src.length === 0 ) {
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, count, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2a() {
		i = (i+1) % src.length;
		count += 1;
		if ( FLG || count > opts.iter || src.length === 0 ) {
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2b() {
		i -= 1;
		if ( i < 0 ) {
			i += src.length;
		}
		count += 1;
		if ( FLG || count > opts.iter || src.length === 0 ) {
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return circarray2iterator( src, opts, fcn, thisArg );
		}
		return circarray2iterator( src, opts );
	}
}


// EXPORTS //

var _$circarray2iterator_19 = circarray2iterator;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which repeatedly iterates over the elements of an array-like object.
*
* @module @stdlib/array/to-circular-iterator
*
* @example
* var circarray2iterator = require( '@stdlib/array/to-circular-iterator' );
*
* var iter = circarray2iterator( [ 1, 2, 3, 4 ] );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$circarray2iterator_19 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_18 = _$circarray2iterator_19;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates over each element in an array-like object.
*
* @param {ArrayLikeObject} src - input value
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = array2iterator( [ 1, 2, 3, 4 ] );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function array2iterator( src ) {
	var thisArg;
	var iter;
	var FLG;
	var fcn;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	if ( arguments.length > 1 ) {
		fcn = arguments[ 1 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 2 ];
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		i += 1;
		if ( FLG || i >= src.length ) {
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		i += 1;
		if ( FLG || i >= src.length ) {
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return array2iterator( src, fcn, thisArg );
		}
		return array2iterator( src );
	}
}


// EXPORTS //

var _$array2iterator_23 = array2iterator;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from an array-like object.
*
* @module @stdlib/array/to-iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = array2iterator( [ 1, 2, 3, 4 ] );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$array2iterator_23 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_22 = _$array2iterator_23;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates from right to left over each element in an array-like object.
*
* ## Notes
*
* -   For dynamic array resizing, the only behavior made intentionally consistent with iterating from left to right is when elements are pushed onto the beginning (end) of an array. In other words, iterating from left to right combined with `[].push()` is consistent with iterating from right to left combined with `[].unshift()`.
*
* @param {ArrayLikeObject} src - input value
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = array2iteratorRight( [ 1, 2, 3, 4 ] );
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/
function array2iteratorRight( src ) {
	var thisArg;
	var iter;
	var FLG;
	var fcn;
	var len;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	if ( arguments.length > 1 ) {
		fcn = arguments[ 1 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 2 ];
	}
	len = src.length;
	i = len;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		i += src.length - len - 1; // accounts for a dynamic array
		len = src.length;
		if ( FLG || i < 0 ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		i += src.length - len - 1; // accounts for a dynamic array
		len = src.length;
		if ( FLG || i < 0 ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return array2iteratorRight( src, fcn, thisArg );
		}
		return array2iteratorRight( src );
	}
}


// EXPORTS //

var _$array2iteratorRight_21 = array2iteratorRight;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from an array-like object, iterating from right to left.
*
* @module @stdlib/array/to-iterator-right
*
* @example
* var array2iteratorRight = require( '@stdlib/array/to-iterator-right' );
*
* var iter = array2iteratorRight( [ 1, 2, 3, 4 ] );
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/

// MODULES //

/* removed: var _$array2iteratorRight_21 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_20 = _$array2iteratorRight_21;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates over each element in a sparse array-like object.
*
* @param {ArrayLikeObject} src - input value
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = sparsearray2iterator( [ 1, , 3, 4 ] );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*/
function sparsearray2iterator( src ) {
	var thisArg;
	var iter;
	var FLG;
	var fcn;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	if ( arguments.length > 1 ) {
		fcn = arguments[ 1 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 2 ];
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		var len;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		len = src.length;
		i += 1;
		while ( i < len && src[ i ] === void 0 ) {
			i += 1;
		}
		if ( i >= len ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		var len;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		len = src.length;
		i += 1;
		while ( i < len && src[ i ] === void 0 ) {
			i += 1;
		}
		if ( i >= len ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return sparsearray2iterator( src, fcn, thisArg );
		}
		return sparsearray2iterator( src );
	}
}


// EXPORTS //

var _$sparsearray2iterator_31 = sparsearray2iterator;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from a sparse array-like value.
*
* @module @stdlib/array/to-sparse-iterator
*
* @example
* var sparsearray2iterator = require( '@stdlib/array/to-sparse-iterator' );
*
* var iter = sparsearray2iterator( [ 1, , 3, 4 ] );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*/

// MODULES //

/* removed: var _$sparsearray2iterator_31 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_30 = _$sparsearray2iterator_31;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates from right to left over each element in a sparse array-like object.
*
* ## Notes
*
* -   For dynamic array resizing, the only behavior made intentionally consistent with iterating from left to right is when elements are pushed onto the beginning (end) of an array. In other words, iterating from left to right combined with `[].push()` is consistent with iterating from right to left combined with `[].unshift()`.
*
* @param {ArrayLikeObject} src - input value
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = sparsearray2iteratorRight( [ 1, , 3, 4 ] );
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 1
*/
function sparsearray2iteratorRight( src ) {
	var thisArg;
	var iter;
	var FLG;
	var fcn;
	var len;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	if ( arguments.length > 1 ) {
		fcn = arguments[ 1 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 2 ];
	}
	len = src.length;
	i = len;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		if ( FLG ) {
			return {
				'done': true
			};
		}
		i += src.length - len - 1; // accounts for a dynamic array
		len = src.length;
		while ( i >= 0 && src[ i ] === void 0 ) {
			i -= 1;
		}
		if ( i < 0 ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		if ( FLG ) {
			return {
				'done': true
			};
		}
		i += src.length - len - 1; // accounts for a dynamic array
		len = src.length;
		while ( i >= 0 && src[ i ] === void 0 ) {
			i -= 1;
		}
		if ( i < 0 ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return sparsearray2iteratorRight( src, fcn, thisArg );
		}
		return sparsearray2iteratorRight( src );
	}
}


// EXPORTS //

var _$sparsearray2iteratorRight_29 = sparsearray2iteratorRight;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from a sparse array-like value, iterating from right to left.
*
* @module @stdlib/array/to-sparse-iterator-right
*
* @example
* var sparsearray2iteratorRight = require( '@stdlib/array/to-sparse-iterator-right' );
*
* var iter = sparsearray2iteratorRight( [ 1, , 3, 4 ] );
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 1
*/

// MODULES //

/* removed: var _$sparsearray2iteratorRight_29 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_28 = _$sparsearray2iteratorRight_29;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
var __isNonNegativeInteger_33 = _$isNonNegativeInteger_154.isPrimitive;
var __isInteger_33 = _$isInteger_140.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates over elements in an array-like object according to specified stride parameters.
*
* @param {NonNegativeInteger} N - number of values to iterate
* @param {ArrayLikeObject} src - input value
* @param {integer} stride - stride length
* @param {NonNegativeInteger} offset - starting index
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be a nonnegative integer
* @throws {TypeError} second argument must be an array-like object
* @throws {TypeError} third argument must be an integer
* @throws {TypeError} fourth argument must be a nonnegative integer
* @throws {TypeError} fifth argument must be a function
* @returns {Iterator} iterator
*
* @example
* var values = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
*
* var N = 4;
* var stride = -2;
* var offset = 6;
*
* var iter = stridedarray2iterator( N, values, stride, offset );
*
* var v = iter.next().value;
* // returns 7
*
* v = iter.next().value;
* // returns 5
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function stridedarray2iterator( N, src, stride, offset ) {
	var thisArg;
	var iter;
	var FLG;
	var fcn;
	var idx;
	var i;
	if ( !__isNonNegativeInteger_33( N ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + N + '`.' );
	}
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. Second argument must be an array-like object. Value: `' + src + '`.' );
	}
	if ( !__isInteger_33( stride ) ) {
		throw new TypeError( 'invalid argument. Third argument must be an integer. Value: `' + stride + '`.' );
	}
	if ( !__isNonNegativeInteger_33( offset ) ) {
		throw new TypeError( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `' + offset + '`.' );
	}
	if ( arguments.length > 4 ) {
		fcn = arguments[ 4 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Fifth argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 5 ];
	}
	idx = offset;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		var v;
		i += 1;
		if ( FLG || i >= N ) {
			return {
				'done': true
			};
		}
		v = fcn.call( thisArg, src[ idx ], idx, i, src );
		idx += stride;
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		var v;
		i += 1;
		if ( FLG || i >= N ) {
			return {
				'done': true
			};
		}
		v = src[ idx ];
		idx += stride;
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return stridedarray2iterator( N, src, stride, offset, fcn, thisArg ); // eslint-disable-line max-len
		}
		return stridedarray2iterator( N, src, stride, offset );
	}
}


// EXPORTS //

var _$stridedarray2iterator_33 = stridedarray2iterator;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from a strided array-like value.
*
* @module @stdlib/array/to-strided-iterator
*
* @example
* var stridedarray2iterator = require( '@stdlib/array/to-strided-iterator' );
*
* var values = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
*
* var N = 4;
* var stride = -2;
* var offset = 6;
*
* var iter = stridedarray2iterator( N, values, stride, offset );
*
* var v = iter.next().value;
* // returns 7
*
* v = iter.next().value;
* // returns 5
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$stridedarray2iterator_33 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_32 = _$stridedarray2iterator_33;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
var __isInteger_37 = _$isInteger_140.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates over each element in an array-like object view.
*
* @param {ArrayLikeObject} src - input value
* @param {integer} [begin=0] - starting index (inclusive)
* @param {integer} [end=src.length] - ending index (non-inclusive)
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be either an integer (starting index) or a function
* @throws {TypeError} third argument must be either an integer (ending index) or a function
* @throws {TypeError} fourth argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/
function arrayview2iterator( src ) {
	var thisArg;
	var begin;
	var nargs;
	var iter;
	var FLG;
	var fcn;
	var end;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	nargs = arguments.length;
	if ( nargs === 1 ) {
		begin = 0;
		end = src.length;
	} else if ( nargs === 2 ) {
		if ( _$isFunction_132( arguments[ 1 ] ) ) {
			begin = 0;
			fcn = arguments[ 1 ];
		} else {
			begin = arguments[ 1 ];
		}
		end = src.length;
	} else if ( nargs === 3 ) {
		if ( _$isFunction_132( arguments[ 1 ] ) ) {
			begin = 0;
			end = src.length;
			fcn = arguments[ 1 ];
			thisArg = arguments[ 2 ];
		} else if ( _$isFunction_132( arguments[ 2 ] ) ) {
			begin = arguments[ 1 ];
			end = src.length;
			fcn = arguments[ 2 ];
		} else {
			begin = arguments[ 1 ];
			end = arguments[ 2 ];
		}
	} else { // nargs >= 4
		begin = arguments[ 1 ];
		end = arguments[ 2 ];
		fcn = arguments[ 3 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Fourth argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 4 ];
	}
	if ( !__isInteger_37( begin ) ) {
		throw new TypeError( 'invalid argument. Second argument must be either an integer (starting index) or a callback function. Value: `' + begin + '`.' );
	}
	if ( !__isInteger_37( end ) ) {
		throw new TypeError( 'invalid argument. Third argument must be either an integer (ending index) or a callback function. Value: `' + end + '`.' );
	}
	if ( end < 0 ) {
		end = src.length + end;
		if ( end < 0 ) {
			end = 0;
		}
	} else if ( end > src.length ) {
		end = src.length;
	}
	if ( begin < 0 ) {
		begin = src.length + begin;
		if ( begin < 0 ) {
			begin = 0;
		}
	}
	i = begin - 1;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', finish );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		i += 1;
		if ( FLG || i >= end ) {
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, i-begin, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		i += 1;
		if ( FLG || i >= end ) {
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function finish( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return arrayview2iterator( src, begin, end, fcn, thisArg );
		}
		return arrayview2iterator( src, begin, end );
	}
}


// EXPORTS //

var _$arrayview2iterator_37 = arrayview2iterator;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from an array-like object view.
*
* @module @stdlib/array/to-view-iterator
*
* @example
* var arrayview2iterator = require( '@stdlib/array/to-view-iterator' );
*
* var iter = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$arrayview2iterator_37 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_36 = _$arrayview2iterator_37;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
var __isInteger_35 = _$isInteger_140.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates from right to left over each element in an array-like object view.
*
* @param {ArrayLikeObject} src - input value
* @param {integer} [begin=0] - starting **view** index (inclusive)
* @param {integer} [end=src.length] - ending **view** index (non-inclusive)
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be either an integer (starting index) or a function
* @throws {TypeError} third argument must be either an integer (ending index) or a function
* @throws {TypeError} fourth argument must be a function
* @returns {Iterator} iterator
*
* @example
* var iter = arrayview2iteratorRight( [ 1, 2, 3, 4 ], 1, 3 );
*
* var v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/
function arrayview2iteratorRight( src ) {
	var thisArg;
	var begin;
	var nargs;
	var iter;
	var FLG;
	var fcn;
	var end;
	var i;
	if ( !_$isArrayLikeObject_104( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + src + '`.' );
	}
	nargs = arguments.length;
	if ( nargs === 1 ) {
		begin = 0;
		end = src.length;
	} else if ( nargs === 2 ) {
		if ( _$isFunction_132( arguments[ 1 ] ) ) {
			begin = 0;
			fcn = arguments[ 1 ];
		} else {
			begin = arguments[ 1 ];
		}
		end = src.length;
	} else if ( nargs === 3 ) {
		if ( _$isFunction_132( arguments[ 1 ] ) ) {
			begin = 0;
			end = src.length;
			fcn = arguments[ 1 ];
			thisArg = arguments[ 2 ];
		} else if ( _$isFunction_132( arguments[ 2 ] ) ) {
			begin = arguments[ 1 ];
			end = src.length;
			fcn = arguments[ 2 ];
		} else {
			begin = arguments[ 1 ];
			end = arguments[ 2 ];
		}
	} else { // nargs >= 4
		begin = arguments[ 1 ];
		end = arguments[ 2 ];
		fcn = arguments[ 3 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Fourth argument must be a function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 4 ];
	}
	if ( !__isInteger_35( begin ) ) {
		throw new TypeError( 'invalid argument. Second argument must be either an integer (starting vie windex) or a callback function. Value: `' + begin + '`.' );
	}
	if ( !__isInteger_35( end ) ) {
		throw new TypeError( 'invalid argument. Third argument must be either an integer (ending view index) or a callback function. Value: `' + end + '`.' );
	}
	if ( end < 0 ) {
		end = src.length + end;
		if ( end < 0 ) {
			end = 0;
		}
	} else if ( end > src.length ) {
		end = src.length;
	}
	if ( begin < 0 ) {
		begin = src.length + begin;
		if ( begin < 0 ) {
			begin = 0;
		}
	}
	i = end;

	// Create an iterator protocol-compliant object:
	iter = {};
	if ( fcn ) {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next1 );
	} else {
		_$setNonEnumerableReadOnly_1359( iter, 'next', next2 );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'return', finish );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		i -= 1;
		if ( FLG || i < begin ) {
			return {
				'done': true
			};
		}
		return {
			'value': fcn.call( thisArg, src[ i ], i, end-i-1, src ),
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		i -= 1;
		if ( FLG || i < begin ) {
			return {
				'done': true
			};
		}
		return {
			'value': src[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function finish( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		if ( fcn ) {
			return arrayview2iteratorRight( src, begin, end, fcn, thisArg );
		}
		return arrayview2iteratorRight( src, begin, end );
	}
}


// EXPORTS //

var _$arrayview2iteratorRight_35 = arrayview2iteratorRight;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator from an array-like object view, iterating from right to left.
*
* @module @stdlib/array/to-view-iterator-right
*
* @example
* var arrayview2iteratorRight = require( '@stdlib/array/to-view-iterator-right' );
*
* var iter = arrayview2iteratorRight( [ 1, 2, 3, 4 ], 1, 3 );
*
* var v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$arrayview2iteratorRight_35 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_34 = _$arrayview2iteratorRight_35;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isNonNegativeInteger_256 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Advances an iterator.
*
* @param {Iterator} iterator - input iterator
* @param {NonNegativeInteger} [n=1e308] - number of iterations
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a nonnegative integer
* @returns {Iterator} input iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var it2 = iterAdvance( it1, 4 );
*
* var v = it2.next().value;
* // returns 1
*
* var bool = it2.next().done;
* // returns true
*/
function iterAdvance( iterator, n ) {
	var N;
	var v;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !__isNonNegativeInteger_256( n ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + n + '`.' );
		}
		N = n;
	} else {
		N = 1e308;
	}
	i = 0;
	while ( i < N ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		i += 1;
	}
	return iterator;
}


// EXPORTS //

var _$iterAdvance_256 = iterAdvance;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Advance an iterator.
*
* @module @stdlib/iter/advance
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterAdvance = require( '@stdlib/iter/advance' );
*
* var it1 = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var it2 = iterAdvance( it1, 4 );
*
* var v = it2.next().value;
* // returns 1
*
* var bool = it2.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterAdvance_256 = require( './main.js' ); */;


// EXPORTS //

var _$iterAdvance_255 = _$iterAdvance_256;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;


// MAIN //

/**
* Tests whether at least one iterated value is truthy.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {boolean} boolean indicating whether at least one iterated value is truthy
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var bool = iterAny( it );
* // returns true
*/
function iterAny( iterator ) {
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	while ( true ) {
		v = iterator.next();
		if ( v.value ) {
			return true;
		}
		if ( v.done ) {
			break;
		}
	}
	return false;
}


// EXPORTS //

var _$iterAny_260 = iterAny;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether at least one iterated value is truthy.
*
* @module @stdlib/iter/any
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterAny = require( '@stdlib/iter/any' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var bool = iterAny( it );
* // returns true
*/

// MODULES //

/* removed: var _$iterAny_260 = require( './main.js' ); */;


// EXPORTS //

var _$iterAny_259 = _$iterAny_260;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Tests whether at least one iterated value passes a test implemented by a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a function
* @returns {boolean} boolean indicating whether at least one iterated value passes a test implemented by a predicate function
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( v ) {
*     return ( v === 1 );
* }
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var bool = iterAnyBy( it, predicate );
* // returns true
*/
function iterAnyBy( iterator, predicate, thisArg ) {
	var v;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + predicate + '`.' );
	}
	i = -1;
	while ( true ) {
		i += 1;
		v = iterator.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				return predicate.call( thisArg, v.value, i );
			}
			break;
		}
		if ( predicate.call( thisArg, v.value, i ) ) {
			return true;
		}
	}
	return false;
}


// EXPORTS //

var _$iterAnyBy_258 = iterAnyBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether at least one iterated value passes a test implemented by a predicate function.
*
* @module @stdlib/iter/any-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterAnyBy = require( '@stdlib/iter/any-by' );
*
* function predicate( v ) {
*     return ( v === 1 );
* }
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var bool = iterAnyBy( it );
* // returns true
*/

// MODULES //

/* removed: var _$iterAnyBy_258 = require( './main.js' ); */;


// EXPORTS //

var _$iterAnyBy_257 = _$iterAnyBy_258;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iterates over the values of two or more iterators.
*
* @param {Iterator} iter0 - first input iterator
* @param {...Iterator} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 1, 2 ] );
* var it2 = array2iterator( [ 3, 4 ] );
*
* var iter = iterConcat( it1, it2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/
function iterConcat() {
	var iterators;
	var iterator;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	for ( i = 0; i < niter; i++ ) {
		if ( !_$isIterator_145( arguments[ i ] ) ) {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
		iterators.push( arguments[ i ] );
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) {
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	iterator = iterators[ 0 ];
	FLG = false;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		// Note: if provided non-empty iterators, this loop executes at most twice...
		while ( true ) {
			v = iterator.next();
			if ( v.done ) {
				i += 1;
				if ( i === niter ) {
					FLG = true;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						return {
							'value': v.value,
							'done': true
						};
					}
					return {
						'done': true
					};
				}
				iterator = iterators[ i ];
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					break;
				}
			} else {
				break;
			}
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
		}
		return iterConcat.apply( null, args );
	}
}


// EXPORTS //

var _$iterConcat_262 = iterConcat;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iterates over the values of two or more iterators.
*
* @module @stdlib/iter/concat
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterConcat = require( '@stdlib/iter/concat' );
*
* var it1 = array2iterator( [ 1, 2 ] );
* var it2 = array2iterator( [ 3, 4 ] );
*
* var iter = iterConcat( it1, it2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterConcat_262 = require( './main.js' ); */;


// EXPORTS //

var _$iterConcat_261 = _$iterConcat_262;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_264 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which always returns the same value.
*
* @param {*} value - value to return
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterConstant( 3.14 );
*
* var v = iter.next().value;
* // returns 3.14
*
* v = iter.next().value;
* // returns 3.14
*
* v = iter.next().value;
* // returns 3.14
*
* // ...
*/
function iterConstant( value ) {
	var options;
	var opts;
	var iter;
	var FLG;
	var i;

	opts = {
		'iter': 1e308
	};
	if ( arguments.length > 1 ) {
		options = arguments[ 1 ];
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'iter' ) ) {
			opts.iter = options.iter;
			if ( !__isNonNegativeInteger_264( options.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
			}
		}
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value, // Note: can be different than the iterator constant
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterConstant( value, opts );
	}
}


// EXPORTS //

var _$iterConstant_264 = iterConstant;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which always returns the same value.
*
* @module @stdlib/iter/constant
*
* @example
* var iterConstant = require( '@stdlib/iter/constant' );
*
* var iter = iterConstant( 3.14 );
*
* var v = iter.next().value;
* // returns 3.14
*
* v = iter.next().value;
* // returns 3.14
*
* v = iter.next().value;
* // returns 3.14
*
* // ...
*/

// MODULES //

/* removed: var _$iterConstant_264 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_263 = _$iterConstant_264;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the number of iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterCounter( randu() );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function iterCounter( iterator ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				i += 1;
				out.value = i;
			}
			out.done = true;
			return out;
		}
		i += 1;
		return {
			'value': i,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterCounter( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$iterCounter_266 = iterCounter;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the number of iterated values.
*
* @module @stdlib/iter/counter
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterCounter = require( '@stdlib/iter/counter' );
*
* var iter = iterCounter( randu() );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterCounter_266 = require( './main.js' ); */;


// EXPORTS //

var _$iterCounter_265 = _$iterCounter_266;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum length of a typed array.
*
* @module @stdlib/constants/array/max-typed-array-length
*
* @example
* var MAX_TYPED_ARRAY_LENGTH = require( '@stdlib/constants/array/max-typed-array-length' );
* // returns 9007199254740991
*/

// MAIN //

/**
* Maximum length of a typed array.
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
*/
var MAX_TYPED_ARRAY_LENGTH = 9007199254740991;


// EXPORTS //

var _$MAX_TYPED_ARRAY_LENGTH_217 = MAX_TYPED_ARRAY_LENGTH;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$MAX_TYPED_ARRAY_LENGTH_217 = require( '@stdlib/constants/array/max-typed-array-length' ); */;


// MAIN //

/**
* Tests if a value is a collection.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is a collection
*
* @example
* var bool = isCollection( [] );
* // returns true
*
* @example
* var bool = isCollection( {} );
* // returns false
*/
function isCollection( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		typeof value.length === 'number' &&
		_$isInteger_368( value.length ) &&
		value.length >= 0 &&
		value.length <= _$MAX_TYPED_ARRAY_LENGTH_217
	);
}


// EXPORTS //

var _$isCollection_117 = isCollection;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a collection.
*
* @module @stdlib/assert/is-collection
*
* @example
* var isCollection = require( '@stdlib/assert/is-collection' );
*
* var bool = isCollection( [] );
* // returns true
*
* bool = isCollection( {} );
* // returns false
*/

// MODULES //

/* removed: var _$isCollection_117 = require( './main.js' ); */;


// EXPORTS //

var _$isCollection_116 = _$isCollection_117;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string primitive
*
* @example
* var bool = isString( 'beep' );
* // returns true
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns false
*/
function isString( value ) {
	return ( typeof value === 'string' );
}


// EXPORTS //

var _$isString_189 = isString;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// eslint-disable-next-line stdlib/no-redeclare
var valueOf = String.prototype.valueOf; // non-generic


// EXPORTS //

var _$valueOf_191 = valueOf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$valueOf_191 = require( './valueof.js' ); */; // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to extract a string value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a string can be extracted
*/
function __test_190( value ) {
	try {
		_$valueOf_191.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

var _$test_190 = __test_190;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasToStringTagSupport_84 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$test_190 = require( './try2valueof.js' ); */;


// VARIABLES //

var __FLG_188 = _$hasToStringTagSupport_84();


// MAIN //

/**
* Tests if a value is a string object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string object
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* @example
* var bool = isString( 'beep' );
* // returns false
*/
function __isString_188( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof String ) {
			return true;
		}
		if ( __FLG_188 ) {
			return _$test_190( value );
		}
		return ( _$nativeClass_1403( value ) === '[object String]' );
	}
	return false;
}


// EXPORTS //

var _$isString_188 = __isString_188;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isString_189 = require( './primitive.js' ); */;
/* removed: var _$isString_188 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a string
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* @example
* var bool = isString( 'beep' );
* // returns true
*/
function __isString_187( value ) {
	return ( _$isString_189( value ) || _$isString_188( value ) );
}


// EXPORTS //

var _$isString_187 = __isString_187;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a string.
*
* @module @stdlib/assert/is-string
*
* @example
* var isString = require( '@stdlib/assert/is-string' );
*
* var bool = isString( 'beep' );
* // returns true
*
* bool = isString( new String( 'beep' ) );
* // returns true
*
* bool = isString( 5 );
* // returns false
*
* @example
* var isString = require( '@stdlib/assert/is-string' ).isObject;
*
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* bool = isString( 'beep' );
* // returns false
*
* @example
* var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
*
* var bool = isString( 'beep' );
* // returns true
*
* bool = isString( new String( 'beep' ) );
* // returns false
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isString_187 = require( './main.js' ); */;
/* removed: var _$isString_189 = require( './primitive.js' ); */;
/* removed: var _$isString_188 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isString_187, 'isPrimitive', _$isString_189 );
_$setNonEnumerableReadOnly_1359( _$isString_187, 'isObject', _$isString_188 );


// EXPORTS //

var _$isString_186 = _$isString_187;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

var _$isnan_371 = isnan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isnan_371 = require( './main.js' ); */;


// EXPORTS //

var _$isnan_370 = _$isnan_371;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_153 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Tests if a value is a `NaN` number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `NaN` number primitive
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns false
*/
function __isnan_153( value ) {
	return (
		__isNumber_153( value ) &&
		_$isnan_370( value )
	);
}


// EXPORTS //

var _$isnan_153 = __isnan_153;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_152 = _$isNumber_162.isObject;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Tests if a value is a number object having a value of `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*/
function __isnan_152( value ) {
	return (
		__isNumber_152( value ) &&
		_$isnan_370( value.valueOf() )
	);
}


// EXPORTS //

var _$isnan_152 = __isnan_152;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_153 = require( './primitive.js' ); */;
/* removed: var _$isnan_152 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( null );
* // returns false
*/
function __isnan_151( value ) {
	return ( _$isnan_153( value ) || _$isnan_152( value ) );
}


// EXPORTS //

var _$isnan_151 = __isnan_151;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is `NaN`.
*
* @module @stdlib/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isnan_151 = require( './main.js' ); */;
/* removed: var _$isnan_153 = require( './primitive.js' ); */;
/* removed: var _$isnan_152 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isnan_151, 'isPrimitive', _$isnan_153 );
_$setNonEnumerableReadOnly_1359( _$isnan_151, 'isObject', _$isnan_152 );


// EXPORTS //

var _$isnan_150 = _$isnan_151;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isCollection_116 = require( '@stdlib/assert/is-collection' ); */;
var __isInteger_50 = _$isInteger_140.isPrimitive;
var __isString_50 = _$isString_186.isPrimitive;
var __isnan_50 = _$isnan_150.isPrimitive;


// MAIN //

/**
* Tests if an array-like value contains a search value.
*
* @param {(Collection|string)} val - input value
* @param {*} searchValue - search value
* @param {integer} [position=0] - position at which to start searching for `searchValue`
* @throws {TypeError} first argument must be array-like
* @throws {Error} must provide a search value
* @throws {TypeError} second argument must be a primitive string primitive when the first argument is a string
* @throws {TypeError} third argument must be an integer
* @returns {boolean} boolean indicating whether one value contains another
*
* @example
* var bool = contains( 'last man standing', 'stand' );
* // returns true
*
* @example
* var bool = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
*
* @example
* var bool = contains( 'presidential election', 'president' );
* // returns true
*
* @example
* var bool = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
*
* @example
* var bool = contains( 'javaScript', 'js' );
* // returns false
*
* @example
* var bool = contains( [ 1, 2, 3, {} ], {} );
* // returns false
*
* @example
* var bool = contains( 'Hidden Treasures', '' );
* // returns true
*/
function contains( val, searchValue, position ) {
	var len;
	var pos;
	var i;
	if ( !_$isCollection_116( val ) && !__isString_50( val ) ) {
		throw new TypeError( 'invalid argument. First argument must be array-like. Value: `' + val + '`.' );
	}
	if ( arguments.length < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide a search value.' );
	}
	if ( arguments.length > 2 ) {
		if ( !__isInteger_50( position ) ) {
			throw new TypeError( 'invalid argument. Third argument must be an integer. Value: `' + position + '`.' );
		}
		pos = position;
		if ( pos < 0 ) {
			pos = 0;
		}
	} else {
		pos = 0;
	}
	if ( __isString_50( val ) ) {
		if ( !__isString_50( searchValue ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a string primitive. Value: `' + searchValue + '`.' );
		}
		return val.indexOf( searchValue, pos ) !== -1;
	}
	len = val.length;
	if ( __isnan_50( searchValue ) ) {
		for ( i = pos; i < len; i++ ) {
			if ( __isnan_50( val[ i ] ) ) {
				return true;
			}
		}
		return false;
	}
	for ( i = pos; i < len; i++ ) {
		if ( val[ i ] === searchValue ) {
			return true;
		}
	}
	return false;
}


// EXPORTS //

var _$contains_50 = contains;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if an array-like value contains another value.
*
* @module @stdlib/assert/contains
*
* @example
* var contains = require( '@stdlib/assert/contains' );
*
* var bool = contains( 'Hello World', 'World' );
* // returns true
*
* bool = contains( 'Hello World', 'world' );
* // returns false
*
* bool = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
*
* bool = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
*/

// MODULES //

/* removed: var _$contains_50 = require( './contains.js' ); */;


// EXPORTS //

var _$contains_51 = _$contains_50;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/
var ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$ceil_462 = ceil;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ceil_462 = require( './ceil.js' ); */;


// EXPORTS //

var _$ceil_463 = _$ceil_462;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$round_610 = round;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$round_610 = require( './round.js' ); */;


// EXPORTS //

var _$round_609 = _$round_610;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var getDay = Date.prototype.getDay; // non-generic


// EXPORTS //

var _$getDay_118 = getDay;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getDay_118 = require( './getday.js' ); */;


// MAIN //

/**
* Attempts to call a `Date` method.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if able to call a `Date` method
*/
function __test_121( value ) {
	try {
		_$getDay_118.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

var _$test_121 = __test_121;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasToStringTagSupport_84 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$test_121 = require( './try2getday.js' ); */;


// VARIABLES //

var __FLG_120 = _$hasToStringTagSupport_84();


// MAIN //

/**
* Tests if a value is a `Date` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `Date` object
*
* @example
* var bool = isDateObject( new Date() );
* // returns true
*
* @example
* var bool = isDateObject( '2017-01-01' );
* // returns false
*/
function isDateObject( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof Date ) {
			return true;
		}
		if ( __FLG_120 ) {
			return _$test_121( value );
		}
		return ( _$nativeClass_1403( value ) === '[object Date]' );
	}
	return false;
}


// EXPORTS //

var _$isDateObject_120 = isDateObject;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a `Date` object.
*
* @module @stdlib/assert/is-date-object
*
* @example
* var isDateObject = require( '@stdlib/assert/is-date-object' );
*
* var bool = isDateObject( new Date() );
* // returns true
*
* bool = isDateObject( '2017-01-01' );
* // returns false
*/

// MODULES //

/* removed: var _$isDateObject_120 = require( './main.js' ); */;


// EXPORTS //

var _$isDateObject_119 = _$isDateObject_120;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isString_267 = _$isString_186.isPrimitive;
var __isNonNegativeInteger_267 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isDateObject_119 = require( '@stdlib/assert/is-date-object' ); */;


// MAIN //

/**
* Converts a value to a JavaScript timestamp.
*
* @private
* @param {*} value - value to convert
* @returns {(NonNegativeInteger|Error)} either a JavaScript timestamp or an error object
*/
function convert( value ) {
	if ( __isString_267( value ) ) {
		value = Date.parse( value );
		if ( value !== value ) {
			return new TypeError( 'invalid argument. Unable to parse date string. Value: `' + value + '`.' );
		}
		return value;
	}
	if ( __isNonNegativeInteger_267( value ) ) {
		return value;
	}
	if ( _$isDateObject_119( value ) ) {
		return value.getTime();
	}
	return new TypeError( 'invalid argument. Must provide either a Date object, a JavaScript timestamp (i.e., a nonnegative integer), or a date string. Value: `' + value + '`.' );
}


// EXPORTS //

var _$convert_267 = convert;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNonNegativeInteger_269 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$contains_51 = require( '@stdlib/assert/contains' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_463 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$round_609 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$convert_267 = require( './convert.js' ); */;


// VARIABLES //

var DEFAULT_LENGTH = 100;
var DEFAULT_ROUNDING_MODE = 'floor';
var ROUNDING_MODES = [
	'floor',
	'ceil',
	'round'
];
var ROUNDING_FCNS = {
	'floor': _$floor_523,
	'ceil': _$ceil_463,
	'round': _$round_609
};


// MAIN //

/**
* Returns an iterator which returns evenly spaced dates over a specified interval.
*
* @param {(NonNegativeInteger|string|Date)} start - starting date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)
* @param {(NonNegativeInteger|string|Date)} stop - stopping date as either a `Date` object, JavaScript timestamp, or a date string (inclusive)
* @param {NonNegativeInteger} [N=100] - number of values
* @param {Options} [options] - function options
* @param {string} [options.round='floor'] - specifies how sub-millisecond times should be rounded: 'floor', 'ceil', or 'round'
* @throws {TypeError} a numeric `start` argument must be a nonnegative integer
* @throws {TypeError} a numeric `stop` argument must be a nonnegative integer
* @throws {TypeError} unable to parse date string
* @throws {TypeError} `N` argument must be a nonnegative integer
* @throws {TypeError} `options` argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var MILLISECONDS_IN_DAY = require( '@stdlib/constants/time/milliseconds-in-day' );
*
* var start = new Date();
* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );
*
* var v = iter.next().value;
* // returns <Date>
*
* v = iter.next().value;
* // returns <Date>
*
* v = iter.next().value;
* // returns <Date>
*
* // ...
*/
function iterDatespace( start, stop, N, options ) {
	var step;
	var iter;
	var opts;
	var rfcn;
	var FLG;
	var t1;
	var t2;
	var n;
	var d;
	var i;

	t1 = _$convert_267( start );
	if ( t1 instanceof Error ) {
		throw t1;
	}
	t2 = _$convert_267( stop );
	if ( t2 instanceof Error ) {
		throw t2;
	}
	opts = {
		'round': DEFAULT_ROUNDING_MODE
	};
	if ( arguments.length === 3 ) {
		if ( __isNonNegativeInteger_269( N ) ) {
			n = N;
		} else if ( _$isPlainObject_172( N ) ) {
			n = DEFAULT_LENGTH;
			if ( _$hasOwnProp_78( N, 'round' ) ) {
				if ( !_$contains_51( ROUNDING_MODES, N.round ) ) {
					throw new TypeError( 'invalid option. Unrecognized rounding mode. Option: `' + N.round + '`.' );
				}
				opts.round = N.round;
			}
		} else {
			throw new TypeError( 'invalid argument. Third argument must be either a nonnegative integer or an options object. Value: `' + N + '`.' );
		}
	} else if ( arguments.length > 3 ) {
		if ( !__isNonNegativeInteger_269( N ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );
		}
		n = N;
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Fourth argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'round' ) ) {
			if ( !_$contains_51( ROUNDING_MODES, options.round ) ) {
				throw new TypeError( 'invalid option. Unrecognized rounding mode. Option: `' + options.round + '`.' );
			}
			opts.round = options.round;
		}
	} else {
		n = DEFAULT_LENGTH;
	}
	rfcn = ROUNDING_FCNS[ opts.round ];
	d = n - 1;
	step = (t2-t1) / d;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= n ) {
			return {
				'done': true
			};
		}
		if ( i === 0 ) {
			return {
				'value': new Date( t1 ),
				'done': false
			};
		}
		if ( i === d ) {
			return {
				'value': new Date( t2 ),
				'done': false
			};
		}
		return {
			'value': new Date( rfcn( t1+(i*step) ) ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterDatespace( start, stop, n, opts );
	}
}


// EXPORTS //

var _$iterDatespace_269 = iterDatespace;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns evenly spaced dates over a specified interval.
*
* @module @stdlib/iter/datespace
*
* @example
* var MILLISECONDS_IN_DAY = require( '@stdlib/constants/time/milliseconds-in-day' );
* var iterDatespace = require( '@stdlib/iter/datespace' );
*
* var start = new Date();
* var iter = iterDatespace( start, new Date( start.getTime()+MILLISECONDS_IN_DAY ) );
*
* var v = iter.next().value;
* // returns <Date>
*
* v = iter.next().value;
* // returns <Date>
*
* v = iter.next().value;
* // returns <Date>
*
* // ...
*/

// MODULES //

/* removed: var _$iterDatespace_269 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_268 = _$iterDatespace_269;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_177 = _$isInteger_140.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/
function isPositiveInteger( value ) {
	return (
		__isInteger_177( value ) &&
		value > 0.0
	);
}


// EXPORTS //

var _$isPositiveInteger_177 = isPositiveInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_176 = _$isInteger_140.isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/
function __isPositiveInteger_176( value ) {
	return (
		__isInteger_176( value ) &&
		value.valueOf() > 0.0
	);
}


// EXPORTS //

var _$isPositiveInteger_176 = __isPositiveInteger_176;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_177 = require( './primitive.js' ); */;
/* removed: var _$isPositiveInteger_176 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/
function __isPositiveInteger_175( value ) {
	return ( _$isPositiveInteger_177( value ) || _$isPositiveInteger_176( value ) );
}


// EXPORTS //

var _$isPositiveInteger_175 = __isPositiveInteger_175;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isPositiveInteger_175 = require( './main.js' ); */;
/* removed: var _$isPositiveInteger_177 = require( './primitive.js' ); */;
/* removed: var _$isPositiveInteger_176 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isPositiveInteger_175, 'isPrimitive', _$isPositiveInteger_177 );
_$setNonEnumerableReadOnly_1359( _$isPositiveInteger_175, 'isObject', _$isPositiveInteger_176 );


// EXPORTS //

var _$isPositiveInteger_174 = _$isPositiveInteger_175;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isPositiveInteger_273 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which removes consecutive duplicated values.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} [limit=1] - number of allowed consecutive duplicates
* @throws {TypeError} must provide an iterator protocol-compliant object
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = iterDedupe( array2iterator( [ 1, 1, 2, 3, 3 ] ) );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/
function iterDedupe( iterator, limit ) {
	var count;
	var iter;
	var prev;
	var FLG;
	var N;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !__isPositiveInteger_273( limit ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + limit + '`.' );
		}
		N = limit;
	} else {
		N = 1;
	}
	prev = NaN; // Note: we leverage the fact that `NaN` is not equal to anything, including itself, to handle initial condition
	count = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) && v.value !== prev ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		if ( v.value === prev ) {
			count += 1;
			if ( count > N ) {
				// Find the next "unique" value...
				while ( v.value === prev ) {
					v = iterator.next();
					if ( v.done ) {
						FLG = true;
						out = {};
						if ( _$hasOwnProp_78( v, 'value' ) && v.value !== prev ) {
							out.value = v.value;
						}
						out.done = true;
						return out;
					}
				}
				prev = v.value;
				count = 1;
			}
		} else {
			prev = v.value;
			count = 1;
		}
		return {
			'value': prev,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterDedupe( iterator[ _$IteratorSymbol_1345 ](), N );
	}
}


// EXPORTS //

var _$iterDedupe_273 = iterDedupe;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which removes consecutive duplicated values.
*
* @module @stdlib/iter/dedupe
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterDedupe = require( '@stdlib/iter/dedupe' );
*
* var iter = iterDedupe( array2iterator( [ 1, 1, 2, 3, 3 ] ) );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterDedupe_273 = require( './main.js' ); */;


// EXPORTS //

var _$iterDedupe_272 = _$iterDedupe_273;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isPositiveInteger_271 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which removes consecutive values that resolve to the same value according to a provided function.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} [limit=1] - number of allowed consecutive duplicates
* @param {Function} clbk - function which indicates whether an iterated value is a "duplicate"
* @throws {TypeError} must provide an iterator protocol-compliant object
* @throws {TypeError} `limit` argument must be a positive integer
* @throws {TypeError} last argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function fcn( v ) {
*     return v;
* }
*
* var iter = iterDedupeBy( array2iterator( [ 1, 1, 2, 3, 3 ] ), fcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/
function iterDedupeBy( iterator, limit, clbk ) { // eslint-disable-line no-unused-vars
	var count;
	var sprev; // previous source iterated value
	var dprev; // previous downstream iterated value
	var iter;
	var acc;
	var FLG;
	var fcn;
	var N;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	fcn = arguments[ arguments.length-1 ];
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Last argument must be a function. Value: `' + fcn + '`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !__isPositiveInteger_271( limit ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + limit + '`.' );
		}
		N = limit;
	} else {
		N = 1;
	}
	acc = NaN; // Note: we leverage the fact that `NaN` is not equal to anything, including itself, to handle initial condition
	count = 0;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		i += 1;
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) && fcn( v.value, sprev, dprev, i, acc ) !== acc ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		out = fcn( v.value, sprev, dprev, i, acc );
		if ( out === acc ) {
			sprev = v.value;
			count += 1;
			if ( count > N ) {
				// Find the next "unique" value...
				while ( out === acc ) {
					v = iterator.next();
					i += 1;
					if ( v.done ) {
						FLG = true;
						out = {};
						if ( _$hasOwnProp_78( v, 'value' ) && fcn( v.value, sprev, dprev, i, acc ) !== acc ) {
							out.value = v.value;
						}
						out.done = true;
						return out;
					}
					out = fcn( v.value, sprev, dprev, i, acc );
					sprev = v.value;
				}
				acc = out;
				count = 1;
			}
			dprev = sprev;
		} else {
			sprev = v.value;
			dprev = sprev;
			acc = out;
			count = 1;
		}
		return {
			'value': dprev,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterDedupeBy( iterator[ _$IteratorSymbol_1345 ](), N, fcn );
	}
}


// EXPORTS //

var _$iterDedupeBy_271 = iterDedupeBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which removes consecutive values that resolve to the same value according to a provided function.
*
* @module @stdlib/iter/dedupe-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterDedupeBy = require( '@stdlib/iter/dedupe-by' );
*
* function fcn( v ) {
*     return v;
* }
*
* var iter = iterDedupeBy( array2iterator( [ 1, 1, 2, 3, 3 ] ), fcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterDedupeBy_271 = require( './main.js' ); */;


// EXPORTS //

var _$iterDedupeBy_270 = _$iterDedupeBy_271;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an empty iterator.
*
* @returns {Iterator} iterator
*
* @example
* var iter = iterEmpty();
*
* var bool = iter.next().done;
* // returns true
*/
function iterEmpty() {
	var iter;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		return {
			'done': true
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterEmpty();
	}
}


// EXPORTS //

var _$iterEmpty_275 = iterEmpty;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an empty iterator.
*
* @module @stdlib/iter/empty
*
* @example
* var iterEmpty = require( '@stdlib/iter/empty' );
*
* var iter = iterEmpty();
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterEmpty_275 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_274 = _$iterEmpty_275;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Tests whether all iterated values are truthy.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {boolean} boolean indicating whether all iterated values are truthy
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 1, 1, 1, 1, 0 ] );
*
* var bool = iterEvery( it );
* // returns false
*/
function iterEvery( iterator ) {
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	while ( true ) {
		v = iterator.next();
		if ( v.value ) {
			if ( v.done ) {
				break;
			}
		} else if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				return false;
			}
			break;
		} else {
			return false;
		}
	}
	return true;
}


// EXPORTS //

var _$iterEvery_279 = iterEvery;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether all iterated values are truthy.
*
* @module @stdlib/iter/every
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterEvery = require( '@stdlib/iter/every' );
*
* var it = array2iterator( [ 1, 1, 1, 1, 0 ] );
*
* var bool = iterEvery( it );
* // returns false
*/

// MODULES //

/* removed: var _$iterEvery_279 = require( './main.js' ); */;


// EXPORTS //

var _$iterEvery_278 = _$iterEvery_279;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Tests whether every iterated value passes a test implemented by a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a function
* @returns {boolean} boolean indicating whether every iterated value passes a test implemented by a predicate function
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( v ) {
*     return ( v > 0 );
* }
*
* var it = array2iterator( [ 1, 1, 1, 1, 1 ] );
*
* var bool = iterEveryBy( it, predicate );
* // returns true
*/
function iterEveryBy( iterator, predicate, thisArg ) {
	var v;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + predicate + '`.' );
	}
	i = -1;
	while ( true ) {
		i += 1;
		v = iterator.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				return Boolean( predicate.call( thisArg, v.value, i ) );
			}
			break;
		}
		if ( !predicate.call( thisArg, v.value, i ) ) {
			return false;
		}
	}
	return true;
}


// EXPORTS //

var _$iterEveryBy_277 = iterEveryBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether every iterated value passes a test implemented by a predicate function.
*
* @module @stdlib/iter/every-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterEveryBy = require( '@stdlib/iter/every-by' );
*
* function predicate( v ) {
*     return ( v > 0 );
* }
*
* var it = array2iterator( [ 1, 1, 1, 1, 1 ] );
*
* var bool = iterEveryBy( it, predicate );
* // returns true
*/

// MODULES //

/* removed: var _$iterEveryBy_277 = require( './main.js' ); */;


// EXPORTS //

var _$iterEveryBy_276 = _$iterEveryBy_277;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNonNegativeInteger_281 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// VARIABLES //

var BEGIN = 0;
var END = 1e308;


// MAIN //

/**
* Returns an iterator which replaces all values from a provided iterator from a start index to an end index with a static value.
*
* @param {Iterator} iterator - input iterator
* @param {*} value - static value
* @param {NonNegativeInteger} [begin=0] - start iteration index (inclusive)
* @param {NonNegativeInteger} [end=1e308] - end iteration index (non-inclusive)
* @throws {Error} must provide both an iterator and a static value
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} third argument must be a nonnegative integer
* @throws {TypeError} fourth argument must be a nonnegative integer
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterFill( randu(), 3.14, 0, 2 );
*
* var r = iter.next().value;
* // returns 3.14
*
* r = iter.next().value;
* // returns 3.14
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterFill( iterator, value, begin, end ) {
	var iter;
	var FLG;
	var N;
	var M;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !__isNonNegativeInteger_281( begin ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + begin + '`.' );
		}
		N = begin;
		if ( arguments.length > 3 ) {
			if ( !__isNonNegativeInteger_281( end ) ) {
				throw new TypeError( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `' + end + '`.' );
			}
			M = end;
		} else {
			M = END;
		}
	} else if ( arguments.length < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide both an iterator and a static value.' );
	} else {
		N = BEGIN;
		M = END;
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', finish );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	i = -1;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		i += 1;
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = ( i >= N && i < M ) ? value : v.value;
			}
			out.done = true;
			return out;
		}
		return {
			'value': ( i >= N && i < M ) ? value : v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function finish( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterFill( iterator[ _$IteratorSymbol_1345 ](), value, N, M );
	}
}


// EXPORTS //

var _$iterFill_281 = iterFill;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which replaces all values from a provided iterator from a start index to an end index with a static value.
*
* @module @stdlib/iter/fill
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterFill = require( '@stdlib/iter/fill' );
*
* var iter = iterFill( randu(), 3.14, 0, 2 );
*
* var r = iter.next().value;
* // returns 3.14
*
* r = iter.next().value;
* // returns 3.14
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterFill_281 = require( './main.js' ); */;


// EXPORTS //

var _$iterFill_280 = _$iterFill_281;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which filters a provided iterator's values according to a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( v ) {
*     return ( v > 2 );
* }
*
* var src = array2iterator( [ 1, 3, 2, 4 ] );
* var iter = iterFilter( src, predicate );
*
* var v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/
function iterFilter( iterator, predicate, thisArg ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + predicate + '`.' );
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			i += 1;
			if ( v.done ) {
				FLG = true;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) && predicate.call( thisArg, v.value, i ) ) {
					out.value = v.value;
				}
				out.done = true;
				return out;
			}
			if ( predicate.call( thisArg, v.value, i ) ) {
				return {
					'value': v.value,
					'done': false
				};
			}
		}
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterFilter( iterator[ _$IteratorSymbol_1345 ](), predicate, thisArg );
	}
}


// EXPORTS //

var _$iterFilter_285 = iterFilter;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which filters a provided iterator's values according to a predicate function.
*
* @module @stdlib/iter/filter
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterFilter = require( '@stdlib/iter/filter' );
*
* function predicate( v ) {
*     return ( v > 2 );
* }
*
* var src = array2iterator( [ 1, 3, 2, 4 ] );
* var iter = iterFilter( src, predicate );
*
* var v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterFilter_285 = require( './main.js' ); */;


// EXPORTS //

var _$iterFilter_284 = _$iterFilter_285;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which both filters and maps a provided iterator's values.
*
* ## Notes
*
* -   If a callback function returns `undefined`, the returned iterator invokes the callback for the next iterated value; otherwise, the iterator returns the callback's return value.
*
* @param {Iterator} iterator - input iterator
* @param {Function} fcn - callback which both filters and maps
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function fcn( v ) {
*     if ( v > 2 ) {
*         return v * 10;
*     }
* }
*
* var src = array2iterator( [ 1, 3, 2, 4 ] );
* var iter = iterFilterMap( src, fcn );
*
* var v = iter.next().value;
* // returns 30
*
* v = iter.next().value;
* // returns 40
*
* var bool = iter.next().done;
* // returns true
*/
function iterFilterMap( iterator, fcn, thisArg ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			i += 1;
			if ( v.done ) {
				FLG = true;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					v = fcn.call( thisArg, v.value, i );
					if ( v !== void 0 ) {
						out.value = v;
					}
				}
				out.done = true;
				return out;
			}
			v = fcn.call( thisArg, v.value, i );
			if ( v !== void 0 ) {
				return {
					'value': v,
					'done': false
				};
			}
		}
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterFilterMap( iterator[ _$IteratorSymbol_1345 ](), fcn, thisArg );
	}
}


// EXPORTS //

var _$iterFilterMap_283 = iterFilterMap;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which both filters and maps a provided iterator's values.
*
* @module @stdlib/iter/filter-map
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterFilterMap = require( '@stdlib/iter/filter-map' );
*
* function fcn( v ) {
*     if ( v > 2 ) {
*         return v * 10;
*     }
* }
*
* var src = array2iterator( [ 1, 3, 2, 4 ] );
* var iter = iterFilterMap( src, fcn );
*
* var v = iter.next().value;
* // returns 30
*
* v = iter.next().value;
* // returns 40
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterFilterMap_283 = require( './main.js' ); */;


// EXPORTS //

var _$iterFilterMap_282 = _$iterFilterMap_283;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Returns the first iterated value.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {*} first iterated value
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 1, 0, 0, 0, 0 ] );
*
* var v = iterFirst( it );
* // returns 1
*/
function iterFirst( iterator ) {
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	v = iterator.next();
	if ( v.done && !_$hasOwnProp_78( v, 'value' ) ) {
		return;
	}
	return v.value;
}


// EXPORTS //

var _$iterFirst_287 = iterFirst;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the first iterated value.
*
* @module @stdlib/iter/first
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterFirst = require( '@stdlib/iter/first' );
*
* var it = array2iterator( [ 1, 0, 0, 0, 0 ] );
*
* var v = iterFirst( it );
* // returns 1
*/

// MODULES //

/* removed: var _$iterFirst_287 = require( './main.js' ); */;


// EXPORTS //

var _$iterFirst_286 = _$iterFirst_287;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var objectKeys = require( '@stdlib/utils/keys' );
*
* var obj = {};
*
* setNonEnumerableProperty( obj, 'foo', 'bar' );
*
* var v = obj.foo;
* // returns 'bar'
*
* var keys = objectKeys( obj );
* // returns []
*/
function setNonEnumerableProperty( obj, prop, value ) {
	_$defineProperty_1364( obj, prop, {
		'configurable': true,
		'enumerable': false,
		'writable': true,
		'value': value
	});
}


// EXPORTS //

var _$setNonEnumerableProperty_1356 = setNonEnumerableProperty;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable property.
*
* @module @stdlib/utils/define-nonenumerable-property
*
* @example
* var objectKeys = require( '@stdlib/utils/keys' );
* var setNonEnumerableProperty = require( '@stdlib/utils/define-nonenumerable-property' );
*
* var obj = {};
*
* setNonEnumerableProperty( obj, 'foo', 'bar' );
*
* var v = obj.foo;
* // returns 'bar'
*
* var keys = objectKeys( obj );
* // returns []
*/

// MODULES //

/* removed: var _$setNonEnumerableProperty_1356 = require( './main.js' ); */;


// EXPORTS //

var _$setNonEnumerableProperty_1355 = _$setNonEnumerableProperty_1356;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns an array of an object's own enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.keys()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own enumerable property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/
function keys( value ) {
	return Object.keys( Object( value ) );
}


// EXPORTS //

var _$keys_1384 = keys;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$keys_1384 = require( './builtin.js' ); */;


// FUNCTIONS //

/**
* Tests the built-in `Object.keys()` implementation when provided `arguments`.
*
* @private
* @returns {boolean} boolean indicating whether the built-in implementation returns the expected number of keys
*/
function __test_1387() {
	return ( _$keys_1384( arguments ) || '' ).length !== 2;
}


// MAIN //

/**
* Tests whether the built-in `Object.keys()` implementation supports providing `arguments` as an input value.
*
* ## Notes
*
* -   Safari 5.0 does **not** support `arguments` as an input value.
*
* @private
* @returns {boolean} boolean indicating whether a built-in implementation supports `arguments`
*/
function __check_1387() {
	return __test_1387( 1, 2 );
}


// EXPORTS //

var _$check_1387 = __check_1387;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var bool = ( typeof Object.keys !== 'undefined' );


// EXPORTS //

var _$bool_1389 = bool;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// MAIN //

/**
* Tests whether a value is an `arguments` object.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `arguments` object
*
* @example
* function foo() {
*     return arguments;
* }
*
* var bool = isArguments( foo() );
* // returns true
*
* @example
* var bool = isArguments( [] );
* // returns false
*/
function isArguments( value ) {
	return ( _$nativeClass_1403( value ) === '[object Arguments]' );
}


// EXPORTS //

var _$isArguments_102 = isArguments;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArguments_102 = require( './main.js' ); */;


// VARIABLES //

var __bool_100;


// FUNCTIONS //

/**
* Detects whether an environment returns the expected internal class of the `arguments` object.
*
* @private
* @returns {boolean} boolean indicating whether an environment behaves as expected
*
* @example
* var bool = detect();
* // returns <boolean>
*/
function detect() {
	return _$isArguments_102( arguments );
}


// MAIN //

__bool_100 = detect();


// EXPORTS //

var _$bool_100 = __bool_100;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if an object's own property is enumerable.
*
* @private
* @name isEnumerableProperty
* @type {Function}
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object property is enumerable
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );
* // returns false
*/
var isEnumerableProperty = Object.prototype.propertyIsEnumerable;


// EXPORTS //

var _$isEnumerableProperty_125 = isEnumerableProperty;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isEnumerableProperty_125 = require( './native.js' ); */;


// VARIABLES //

var __bool_122;


// FUNCTIONS //

/**
* Detects whether an environment has a bug where String indices are not detected as "enumerable" properties. Observed in Node v0.10.
*
* @private
* @returns {boolean} boolean indicating whether an environment has the bug
*/
function __detect_122() {
	return !_$isEnumerableProperty_125.call( 'beep', '0' );
}


// MAIN //

__bool_122 = __detect_122();


// EXPORTS //

var _$bool_122 = __bool_122;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isString_186 = require( '@stdlib/assert/is-string' ); */;
var __isnan_124 = _$isnan_150.isPrimitive;
var __isInteger_124 = _$isInteger_140.isPrimitive;
/* removed: var _$isEnumerableProperty_125 = require( './native.js' ); */;
/* removed: var _$bool_122 = require( './has_string_enumerability_bug.js' ); */;


// MAIN //

/**
* Tests if an object's own property is enumerable.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object property is enumerable
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );
* // returns false
*/
function __isEnumerableProperty_124( value, property ) {
	var bool;
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	bool = _$isEnumerableProperty_125.call( value, property );
	if ( !bool && _$bool_122 && _$isString_186( value ) ) {
		// Note: we only check for indices, as properties attached to a `String` object are properly detected as enumerable above.
		property = +property;
		return (
			!__isnan_124( property ) &&
			__isInteger_124( property ) &&
			property >= 0 &&
			property < value.length
		);
	}
	return bool;
}


// EXPORTS //

var _$isEnumerableProperty_124 = __isEnumerableProperty_124;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object's own property is enumerable.
*
* @module @stdlib/assert/is-enumerable-property
*
* @example
* var isEnumerableProperty = require( '@stdlib/assert/is-enumerable-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'boop' );
* // returns true
*
* bool = isEnumerableProperty( beep, 'hasOwnProperty' );
* // returns false
*/

// MODULES //

/* removed: var _$isEnumerableProperty_124 = require( './main.js' ); */;


// EXPORTS //

var _$isEnumerableProperty_123 = _$isEnumerableProperty_124;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/math/uint32-max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

var _$UINT32_MAX_253 = UINT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isEnumerableProperty_123 = require( '@stdlib/assert/is-enumerable-property' ); */;
/* removed: var _$isArray_106 = require( '@stdlib/assert/is-array' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$UINT32_MAX_253 = require( '@stdlib/constants/math/uint32-max' ); */;


// MAIN //

/**
* Tests whether a value is an `arguments` object.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `arguments` object
*
* @example
* function foo() {
*     return arguments;
* }
*
* var bool = isArguments( foo() );
* // returns true
*
* @example
* var bool = isArguments( [] );
* // returns false
*/
function __isArguments_103( value ) {
	return (
		value !== null &&
		typeof value === 'object' &&
		!_$isArray_106( value ) &&
		typeof value.length === 'number' &&
		_$isInteger_368( value.length ) &&
		value.length >= 0 &&
		value.length <= _$UINT32_MAX_253 &&
		_$hasOwnProp_78( value, 'callee' ) &&
		!_$isEnumerableProperty_123( value, 'callee' )
	);
}


// EXPORTS //

var _$isArguments_103 = __isArguments_103;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an `arguments` object.
*
* @module @stdlib/assert/is-arguments
*
* @example
* var isArguments = require( '@stdlib/assert/is-arguments' );
*
* function foo() {
*     return arguments;
* }
*
* var bool = isArguments( foo() );
* // returns true
*
* bool = isArguments( [] );
* // returns false
*/

// MODULES //

/* removed: var _$bool_100 = require( './detect.js' ); */;
/* removed: var _$isArguments_102 = require( './main.js' ); */;
/* removed: var _$isArguments_103 = require( './polyfill.js' ); */;


// MAIN //

var __isArguments_101;
if ( _$bool_100 ) {
	__isArguments_101 = _$isArguments_102;
} else {
	__isArguments_101 = _$isArguments_103;
}


// EXPORTS //

var _$isArguments_101 = __isArguments_101;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArguments_101 = require( '@stdlib/assert/is-arguments' ); */;
/* removed: var _$keys_1384 = require( './builtin.js' ); */;


// VARIABLES //

var slice = Array.prototype.slice;


// MAIN //

/**
* Returns an array of an object's own enumerable property names.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own enumerable property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/
function __keys_1385( value ) {
	if ( _$isArguments_101( value ) ) {
		return _$keys_1384( slice.call( value ) );
	}
	return _$keys_1384( value );
}


// EXPORTS //

var _$keys_1385 = __keys_1385;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* No operation.
*
* @example
* noop();
* // ...does nothing.
*/
function noop() {
	// Empty function...
}


// EXPORTS //

var _$noop_1409 = noop;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* No operation.
*
* @module @stdlib/utils/noop
*
* @example
* var noop = require( '@stdlib/utils/noop' );
*
* noop();
* // ...does nothing.
*/

// MODULES //

/* removed: var _$noop_1409 = require( './noop.js' ); */;


// EXPORTS //

var _$noop_1408 = _$noop_1409;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isEnumerableProperty_123 = require( '@stdlib/assert/is-enumerable-property' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;


// MAIN //

// Note: certain environments treat an object's prototype as enumerable, which, as a matter of convention, it shouldn't be...
var __bool_1390 = _$isEnumerableProperty_123( _$noop_1408, 'prototype' );


// EXPORTS //

var _$bool_1390 = __bool_1390;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isEnumerableProperty_123 = require( '@stdlib/assert/is-enumerable-property' ); */;


// VARIABLES //

var __obj_1391 = {
	'toString': null
};


// MAIN //

// Note: certain environments don't allow enumeration of overwritten properties which are considered non-enumerable...
var __bool_1391 = !_$isEnumerableProperty_123( __obj_1391, 'toString' );


// EXPORTS //

var _$bool_1391 = __bool_1391;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$isCollection_116 = require( '@stdlib/assert/is-collection' ); */;
var __isString_1383 = _$isString_186.isPrimitive;
var __isInteger_1383 = _$isInteger_140.isPrimitive;


// MAIN //

/**
* Returns the first index at which a given element can be found.
*
* @param {ArrayLike} arr - array-like object
* @param {*} searchElement - element to find
* @param {integer} [fromIndex] - starting index (if negative, the start index is determined relative to last element)
* @throws {TypeError} must provide an array-like object
* @throws {TypeError} `fromIndex` must be an integer
* @returns {integer} index or -1
*
* @example
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 3 );
* // returns 1
*
* @example
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 5 );
* // returns -1
*
* @example
* // Using a `fromIndex`:
* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* var idx = indexOf( arr, 2, 3 );
* // returns 5
*
* @example
* // `fromIndex` which exceeds `array` length:
* var arr = [ 1, 2, 3, 4, 2, 5 ];
* var idx = indexOf( arr, 2, 10 );
* // returns -1
*
* @example
* // Negative `fromIndex`:
* var arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];
* var idx = indexOf( arr, 2, -4 );
* // returns 5
*
* idx = indexOf( arr, 2, -1 );
* // returns 7
*
* @example
* // Negative `fromIndex` exceeding input `array` length:
* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* var idx = indexOf( arr, 2, -10 );
* // returns 1
*
* @example
* // Array-like objects:
* var str = 'bebop';
* var idx = indexOf( str, 'o' );
* // returns 3
*/
function indexOf( arr, searchElement, fromIndex ) {
	var len;
	var i;
	if ( !_$isCollection_116( arr ) && !__isString_1383( arr ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + arr + '`.' );
	}
	len = arr.length;
	if ( len === 0 ) {
		return -1;
	}
	if ( arguments.length === 3 ) {
		if ( !__isInteger_1383( fromIndex ) ) {
			throw new TypeError( 'invalid argument. `fromIndex` must be an integer. Value: `' + fromIndex + '`.' );
		}
		if ( fromIndex >= 0 ) {
			if ( fromIndex >= len ) {
				return -1;
			}
			i = fromIndex;
		} else {
			i = len + fromIndex;
			if ( i < 0 ) {
				i = 0;
			}
		}
	} else {
		i = 0;
	}
	// Check for `NaN`...
	if ( _$isnan_150( searchElement ) ) {
		for ( ; i < len; i++ ) {
			if ( _$isnan_150( arr[i] ) ) {
				return i;
			}
		}
	} else {
		for ( ; i < len; i++ ) {
			if ( arr[ i ] === searchElement ) {
				return i;
			}
		}
	}
	return -1;
}


// EXPORTS //

var _$indexOf_1383 = indexOf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the first index at which a given element can be found.
*
* @module @stdlib/utils/index-of
*
* @example
* var indexOf = require( '@stdlib/utils/index-of' );
*
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 3 );
* // returns 1
*
* arr = [ 4, 3, 2, 1 ];
* idx = indexOf( arr, 5 );
* // returns -1
*
* // Using a `fromIndex`:
* arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* idx = indexOf( arr, 2, 3 );
* // returns 5
*
* // `fromIndex` which exceeds `array` length:
* arr = [ 1, 2, 3, 4, 2, 5 ];
* idx = indexOf( arr, 2, 10 );
* // returns -1
*
* // Negative `fromIndex`:
* arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];
* idx = indexOf( arr, 2, -4 );
* // returns 5
*
* idx = indexOf( arr, 2, -1 );
* // returns 7
*
* // Negative `fromIndex` exceeding input `array` length:
* arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* idx = indexOf( arr, 2, -10 );
* // returns 1
*
* // Array-like objects:
* var str = 'bebop';
* idx = indexOf( str, 'o' );
* // returns 3
*/

// MODULES //

/* removed: var _$indexOf_1383 = require( './index_of.js' ); */;


// EXPORTS //

var _$indexOf_1382 = _$indexOf_1383;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests whether a value equals the prototype of its constructor.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor
*/
function isConstructorPrototype( value ) {
	return ( value.constructor && value.constructor.prototype === value );
}


// EXPORTS //

var _$isConstructorPrototype_1394 = isConstructorPrototype;

var _$excluded_keys_1386=[
	"console",
	"external",
	"frame",
	"frameElement",
	"frames",
	"innerHeight",
	"innerWidth",
	"outerHeight",
	"outerWidth",
	"pageXOffset",
	"pageYOffset",
	"parent",
	"scrollLeft",
	"scrollTop",
	"scrollX",
	"scrollY",
	"self",
	"webkitIndexedDB",
	"webkitStorageInfo",
	"window"
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var w = ( typeof window === 'undefined' ) ? void 0 : window;


// EXPORTS //

var _$w_1399 = w;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$indexOf_1382 = require( '@stdlib/utils/index-of' ); */;
/* removed: var _$main_1424 = require( '@stdlib/utils/type-of' ); */;
/* removed: var _$isConstructorPrototype_1394 = require( './is_constructor_prototype.js' ); */;
/* removed: var _$excluded_keys_1386 = require( './excluded_keys.json' ); */;
/* removed: var _$w_1399 = require( './window.js' ); */;


// VARIABLES //

var __bool_1388;


// FUNCTIONS //

/**
* Determines whether an environment throws when comparing to the prototype of a value's constructor (e.g., [IE9][1]).
*
* [1]: https://stackoverflow.com/questions/7688070/why-is-comparing-the-constructor-property-of-two-windows-unreliable
*
* @private
* @returns {boolean} boolean indicating whether an environment is buggy
*/
function __check_1388() {
	var k;
	if ( _$main_1424( _$w_1399 ) === 'undefined' ) {
		return false;
	}
	for ( k in _$w_1399 ) { // eslint-disable-line guard-for-in
		try {
			if (
				_$indexOf_1382( _$excluded_keys_1386, k ) === -1 &&
				_$hasOwnProp_78( _$w_1399, k ) &&
				_$w_1399[ k ] !== null &&
				_$main_1424( _$w_1399[ k ] ) === 'object'
			) {
				_$isConstructorPrototype_1394( _$w_1399[ k ] );
			}
		} catch ( err ) { // eslint-disable-line no-unused-vars
			return true;
		}
	}
	return false;
}


// MAIN //

__bool_1388 = __check_1388();


// EXPORTS //

var _$bool_1388 = __bool_1388;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __bool_1392 = ( typeof window !== 'undefined' );


// EXPORTS //

var _$bool_1392 = __bool_1392;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$bool_1388 = require( './has_automation_equality_bug.js' ); */;
/* removed: var _$isConstructorPrototype_1394 = require( './is_constructor_prototype.js' ); */;
/* removed: var _$bool_1392 = require( './has_window.js' ); */;


// MAIN //

/**
* Wraps the test for constructor prototype equality to accommodate buggy environments (e.g., environments which throw when testing equality).
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor
*/
function wrapper( value ) {
	if ( _$bool_1392 === false && !_$bool_1388 ) {
		return _$isConstructorPrototype_1394( value );
	}
	try {
		return _$isConstructorPrototype_1394( value );
	} catch ( error ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

var _$wrapper_1395 = wrapper;

var _$non_enumerable_1397=[
	"toString",
	"toLocaleString",
	"valueOf",
	"hasOwnProperty",
	"isPrototypeOf",
	"propertyIsEnumerable",
	"constructor"
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isObjectLike_168 = require( '@stdlib/assert/is-object-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isArguments_101 = require( '@stdlib/assert/is-arguments' ); */;
/* removed: var _$bool_1390 = require( './has_enumerable_prototype_bug.js' ); */;
/* removed: var _$bool_1391 = require( './has_non_enumerable_properties_bug.js' ); */;
/* removed: var _$wrapper_1395 = require( './is_constructor_prototype_wrapper.js' ); */;
/* removed: var _$non_enumerable_1397 = require( './non_enumerable.json' ); */;


// MAIN //

/**
* Returns an array of an object's own enumerable property names.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own enumerable property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/
function __keys_1398( value ) {
	var skipConstructor;
	var skipPrototype;
	var isFcn;
	var out;
	var k;
	var p;
	var i;

	out = [];
	if ( _$isArguments_101( value ) ) {
		// Account for environments which treat `arguments` differently...
		for ( i = 0; i < value.length; i++ ) {
			out.push( i.toString() );
		}
		// Note: yes, we are precluding the `arguments` array-like object from having other enumerable properties; however, this should (1) be very rare and (2) not be encouraged (e.g., doing something like `arguments.a = 'b'`; in certain engines directly manipulating the `arguments` value results in automatic de-optimization).
		return out;
	}
	if ( typeof value === 'string' ) {
		// Account for environments which do not treat string character indices as "own" properties...
		if ( value.length > 0 && !_$hasOwnProp_78( value, '0' ) ) {
			for ( i = 0; i < value.length; i++ ) {
				out.push( i.toString() );
			}
		}
	} else {
		isFcn = ( typeof value === 'function' );
		if ( isFcn === false && !_$isObjectLike_168( value ) ) {
			return out;
		}
		skipPrototype = ( _$bool_1390 && isFcn );
	}
	for ( k in value ) {
		if ( !( skipPrototype && k === 'prototype' ) && _$hasOwnProp_78( value, k ) ) {
			out.push( String( k ) );
		}
	}
	if ( _$bool_1391 ) {
		skipConstructor = _$wrapper_1395( value );
		for ( i = 0; i < _$non_enumerable_1397.length; i++ ) {
			p = _$non_enumerable_1397[ i ];
			if ( !( skipConstructor && p === 'constructor' ) && _$hasOwnProp_78( value, p ) ) {
				out.push( String( p ) );
			}
		}
	}
	return out;
}


// EXPORTS //

var _$keys_1398 = __keys_1398;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$check_1387 = require( './has_arguments_bug.js' ); */;
/* removed: var _$bool_1389 = require( './has_builtin.js' ); */;
/* removed: var _$keys_1384 = require( './builtin.js' ); */;
/* removed: var _$keys_1385 = require( './builtin_wrapper.js' ); */;
/* removed: var _$keys_1398 = require( './polyfill.js' ); */;


// MAIN //

/**
* Returns an array of an object's own enumerable property names.
*
* @name keys
* @type {Function}
* @param {*} value - input object
* @returns {Array} a list of own enumerable property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/
var __keys_1396;
if ( _$bool_1389 ) {
	if ( _$check_1387() ) {
		__keys_1396 = _$keys_1385;
	} else {
		__keys_1396 = _$keys_1384;
	}
} else {
	__keys_1396 = _$keys_1398;
}


// EXPORTS //

var _$keys_1396 = __keys_1396;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an array of an object's own enumerable property names.
*
* @module @stdlib/utils/keys
*
* @example
* var keys = require( '@stdlib/utils/keys' );
*
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

// MODULES //

/* removed: var _$keys_1396 = require( './main.js' ); */;


// EXPORTS //

var _$keys_1393 = _$keys_1396;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this, no-restricted-syntax */

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableProperty_1355 = require( '@stdlib/utils/define-nonenumerable-property' ); */;
/* removed: var _$isObject_170 = require( '@stdlib/assert/is-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$keys_1393 = require( '@stdlib/utils/keys' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns a constructor for creating a fluent interface for chaining together iterator methods.
*
* ## Notes
*
* -   We assume that each provided iterator function has the following function signature:
*
*     ```text
*     function iterFcn( iterator[, ...args] ) {...}
*     ```
*
*     where `iterator` is an input iterator and `args` are additional iterator function arguments (if any).
*
*
* @param {Object} methods - an object mapping method names to iterator functions
* @throws {TypeError} must provide an object
* @throws {TypeError} object property values must be functions
* @returns {Function} constructor
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterHead = require( '@stdlib/iter/head' );
* var iterSome = require( '@stdlib/iter/some' );
*
* // Create a "fluent" interface:
* var FluentIterator = iterFlow({
*     'head': iterHead,
*     'some': iterSome
* });
*
* // Create a source iterator:
* var arr = array2iterator( [ 0, 0, 1, 1, 1, 0, 0, 1, 0, 1 ] );
*
* // Create a new iterator:
* var it = new FluentIterator( arr );
*
* var bool = it.head( 5 ).some( 3 );
* // returns true
*
* // Create another source iterator:
* arr = array2iterator( [ 0, 0, 1, 0, 1, 0, 0, 1, 0, 1 ] );
*
* // Create a new iterator:
* it = new FluentIterator( arr );
*
* bool = it.head( 5 ).some( 3 );
* // returns false
*/
function iterFlow( methods ) {
	var keys;
	var k;
	var f;
	var i;
	if ( !_$isObject_170( methods ) ) {
		throw new TypeError( 'invalid argument. Must provide an object. Value: `' + methods + '`.' );
	}
	/**
	* Fluent interface iterator constructor.
	*
	* @private
	* @constructor
	* @param {Iterator} iterator - source iterator
	* @throws {TypeError} must provide an iterator
	* @returns {FluentIterator} a "fluent" iterator
	*/
	function FluentIterator( iterator ) {
		if ( !( this instanceof FluentIterator ) ) {
			return new FluentIterator( iterator );
		}
		if ( !_$isIterator_145( iterator ) ) {
			throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
		}
		_$setNonEnumerableReadOnly_1359( this, '_source', iterator );
		_$setNonEnumerableProperty_1355( this, '_done', false );
		return this;
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @throws {TypeError} `this` must be a fluent interface iterator
	* @returns {Object} iterator protocol-compliant object
	*/
	_$setNonEnumerableReadOnly_1359( FluentIterator.prototype, 'next', function next() {
		if ( !(this instanceof FluentIterator) ) {
			throw new TypeError( 'invalid invocation. `this` is not a fluent interface iterator.' );
		}
		if ( this._done ) {
			return {
				'done': true
			};
		}
		return this._source.next();
	});

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @throws {TypeError} `this` must be a fluent interface iterator
	* @returns {Object} iterator protocol-compliant object
	*/
	_$setNonEnumerableReadOnly_1359( FluentIterator.prototype, 'return', function finish( value ) {
		if ( !(this instanceof FluentIterator) ) {
			throw new TypeError( 'invalid invocation. `this` is not a fluent interface iterator.' );
		}
		this._done = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	});

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		/**
		* Returns the current iterator.
		*
		* ## Notes
		*
		* -   This method allows the iterator to be iterable and thus able to be consumed, e.g., in `for..of` loops.
		*
		* @private
		* @returns {Iterator} iterator
		*/
		_$setNonEnumerableReadOnly_1359( FluentIterator.prototype, _$IteratorSymbol_1345, function factory() { // eslint-disable-line max-len
			return this;
		});
	}

	/**
	* Wraps an iterator function as a fluent interface method.
	*
	* @private
	* @param {Function} iterFcn - iterator function
	* @returns {Function} method wrapper
	*/
	function createMethod( iterFcn ) {
		return method;

		/**
		* Iterator function wrapper.
		*
		* @private
		* @param {...*} [args] - method arguments
		* @throws {TypeError} `this` must be a fluent interface iterator
		* @returns {Iterator} iterator
		*/
		function method() {
			var args;
			var out;
			var i;

			if ( !(this instanceof FluentIterator) ) {
				throw new TypeError( 'invalid invocation. `this` is not a fluent interface iterator.' );
			}
			args = [ this._source ];
			for ( i = 0; i < arguments.length; i++ ) {
				args.push( arguments[ i ] );
			}
			out = iterFcn.apply( null, args );

			// If the iterator function returns an iterator, in order to support subsequent chaining, we need to create a new fluent interface instance...
			if ( _$isIterator_145( out ) ) {
				return new FluentIterator( out );
			}
			return out;
		}
	}

	// Bind the provided iterator functions to the constructor prototype...
	keys = _$keys_1393( methods );
	for ( i = 0; i < keys.length; i++ ) {
		k = keys[ i ];
		f = methods[ k ];
		if ( !_$isFunction_132( f ) ) {
			throw new TypeError( 'invalid argument. Object property values must be functions. Key: `' + k + '`. Value: `' + f + '`.' );
		}
		_$setNonEnumerableReadOnly_1359( FluentIterator.prototype, k, createMethod( f ) ); // eslint-disable-line max-len
	}

	return FluentIterator;
}


// EXPORTS //

var _$iterFlow_289 = iterFlow;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a fluent interface for chaining together iterator methods.
*
* @module @stdlib/iter/flow
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterHead = require( '@stdlib/iter/head' );
* var iterSome = require( '@stdlib/iter/some' );
* var iterFlow = require( '@stdlib/iter/flow' );
*
* // Create a "fluent" interface:
* var FluentIterator = iterFlow({
*     'head': iterHead,
*     'some': iterSome
* });
*
* // Create a source iterator:
* var arr = array2iterator( [ 0, 0, 1, 1, 1, 0, 0, 1, 0, 1 ] );
*
* // Create a new iterator:
* var it = new FluentIterator( arr );
*
* var bool = it.head( 5 ).some( 3 );
* // returns true
*
* // Create another source iterator:
* arr = array2iterator( [ 0, 0, 1, 0, 1, 0, 0, 1, 0, 1 ] );
*
* // Create a new iterator:
* it = new FluentIterator( arr );
*
* bool = it.head( 5 ).some( 3 );
* // returns false
*/

// MODULES //

/* removed: var _$iterFlow_289 = require( './main.js' ); */;


// EXPORTS //

var _$iterFlow_288 = _$iterFlow_289;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which invokes a function for each iterated value before returning the iterated value.
*
* @param {Iterator} iterator - input iterator
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* function assert( v ) {
*     if ( isnan( v ) ) {
*         throw new Error( 'should not be NaN' );
*     }
* }
*
* var iter = iterForEach( randu(), assert );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterForEach( iterator, fcn, thisArg ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		i += 1;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				v = v.value;
				fcn.call( thisArg, v, i );
				out.value = v;
			}
			out.done = true;
			return out;
		}
		v = v.value;
		fcn.call( thisArg, v, i );
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterForEach( iterator[ _$IteratorSymbol_1345 ](), fcn, thisArg );
	}
}


// EXPORTS //

var _$iterForEach_291 = iterForEach;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which invokes a function for each iterated value before returning the iterated value.
*
* @module @stdlib/iter/for-each
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
* var iterForEach = require( '@stdlib/iter/for-each' );
*
* function assert( v ) {
*     if ( isnan( v ) ) {
*         throw new Error( 'should not be NaN' );
*     }
* }
*
* var iter = iterForEach( randu(), assert );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterForEach_291 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_290 = _$iterForEach_291;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isPositiveInteger_293 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which returns the first `n` values of a provided iterator.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} n - number of values
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterHead( randu(), 10 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterHead( iterator, n ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_293( n ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + n + '`.' );
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		i += 1;
		if ( FLG || i > n ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterHead( iterator[ _$IteratorSymbol_1345 ](), n );
	}
}


// EXPORTS //

var _$iterHead_293 = iterHead;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns the first `n` values of a provided iterator.
*
* @module @stdlib/iter/head
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterHead = require( '@stdlib/iter/head' );
*
* var iter = iterHead( randu(), 10 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterHead_293 = require( './main.js' ); */;


// EXPORTS //

var _$iterHead_292 = _$iterHead_293;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNumber_295 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$ceil_463 = require( '@stdlib/math/base/special/ceil' ); */;


// VARIABLES //

var DEFAULT_INCREMENT = 1;


// MAIN //

/**
* Returns an iterator which returns evenly spaced numbers according to a specified increment.
*
* @param {number} start - starting value (inclusive)
* @param {number} stop - stopping value (exclusive)
* @param {number} [increment=1] - increment
* @throws {TypeError} first argument must be a number
* @throws {TypeError} second argument must be a number
* @throws {TypeError} third argument must be a number
* @returns {Iterator} iterator
*
* @example
* var iter = iterIncrspace( 0, 100, 2 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/
function iterIncrspace( start, stop, increment ) {
	var iter;
	var incr;
	var FLG;
	var N;
	var i;

	if ( !__isNumber_295( start ) || _$isnan_370( start ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );
	}
	if ( !__isNumber_295( stop ) || _$isnan_370( stop ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !__isNumber_295( increment ) || _$isnan_370( increment ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a number. Value: `' + increment + '`.' );
		}
		incr = increment;
	} else {
		incr = DEFAULT_INCREMENT;
	}
	N = _$ceil_463( (stop-start)/incr );
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= N ) {
			return {
				'done': true
			};
		}
		return {
			'value': start + (i*incr),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterIncrspace( start, stop, incr );
	}
}


// EXPORTS //

var _$iterIncrspace_295 = iterIncrspace;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns evenly spaced numbers according to a specified increment.
*
* @module @stdlib/iter/incrspace
*
* @example
* var iterIncrspace = require( '@stdlib/iter/incrspace' );
*
* var iter = iterIncrspace( 0, 100, 2 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/

// MODULES //

/* removed: var _$iterIncrspace_295 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_294 = _$iterIncrspace_295;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable read-only accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - accessor
*
* @example
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnlyAccessor( obj, prop, getter ) { // eslint-disable-line id-length
	_$defineProperty_1364( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'get': getter
	});
}


// EXPORTS //

var _$setNonEnumerableReadOnlyAccessor_1358 = setNonEnumerableReadOnlyAccessor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-only-accessor
*
* @example
* var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );
*
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnlyAccessor_1358 = require( './main.js' ); */; // eslint-disable-line id-length


// EXPORTS //

var _$setNonEnumerableReadOnlyAccessor_1357 = _$setNonEnumerableReadOnlyAccessor_1358;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* List node constructor.
*
* @private
* @constructor
* @param {*} value - node value
* @returns {Node} Node instance
*
* @example
* var node = new Node( 'foo' );
* // returns <Node>
*/
function Node( value ) { // eslint-disable-line stdlib/no-redeclare
	// Why a getter? Because some of the list APIs will return the list "node", not the value. In which case, the node API is no longer private and we have to guard against users mucking about (deleting, updating, etc) with property values (in particular, the `next` property).
	_$defineProperty_1364( this, 'next', {
		'configurable': false,
		'enumerable': true,
		'get': function get() { // eslint-disable-line no-restricted-syntax
			return this._next;
		}
	});
	this.value = value;

	_$defineProperty_1364( this, '_next', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});

	// NOTE: strictly speaking, we should not be keeping back-references in a singly-linked list; however, doing so allows us to more efficiently add, remove, and insert list values.
	_$defineProperty_1364( this, '_prev', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});

	return this;
}


// EXPORTS //

var _$Node_1402 = Node;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$Node_1402 = require( './node.js' ); */; // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Linked list constructor.
*
* @constructor
* @returns {LinkedList} linked list instance
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Remove the last value:
* var v = list.pop();
* // returns 'bar'
*
* // Add a new value to the list:
* list.push( 'beep' );
*
* // Remove the first value:
* v = list.shift();
* // returns 'foo'
*/
function LinkedList() {
	if ( !(this instanceof LinkedList) ) {
		return new LinkedList();
	}
	this._length = 0;
	this._first = null;
	this._last = null;
	return this;
}

/**
* Clears the list.
*
* @name clear
* @memberof LinkedList.prototype
* @type {Function}
* @returns {LinkedList} list instance
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Peek at the first value:
* var v = list.first().value;
* // returns 'foo'
*
* // Examine the list length:
* var len = list.length;
* // returns 2
*
* // Clear all list items:
* list.clear();
*
* // Peek at the first value:
* v = list.first();
* // returns undefined
*
* // Examine the list length:
* len = list.length;
* // returns 0
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'clear', function clear() {
	this._length = 0;
	this._first = null;
	this._last = null;
	return this;
});

/**
* Returns the first list node.
*
* @name first
* @memberof LinkedList.prototype
* @type {Function}
* @returns {(Node|void)} list node
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Peek at the first value:
* var v = list.first().value;
* // returns 'foo'
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'first', function first() {
	if ( this._length ) {
		return this._first;
	}
});

/**
* Inserts a value into the list **after** a provided list node.
*
* @name insert
* @memberof LinkedList.prototype
* @type {Function}
* @param {Node} node - node after which to insert the value
* @param {*} value - value to insert
* @throws {Error} must provide a node belonging to the list
* @returns {LinkedList} list instance
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' ).push( 'beep' );
*
* // Determine the list length:
* var len = list.length;
* // returns 3
*
* // Get the second node:
* var node = list.first().next;
*
* // Insert a value after the second node:
* list.insert( node, 'boop' );
*
* // Determine the list length:
* len = list.length;
* // returns 4
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'insert', function insert( node, value ) {
	/* eslint-disable no-underscore-dangle */
	var n;

	// Case: last node (equivalent to `push()`)
	if ( node === this._last ) {
		return this.push( value );
	}
	// Unfortunately, we need to check whether we have been provided a node belonging to our list by walking the list. If we don't, we could erroneously increment the list length. This means our runtime goes from the theoretical O(1) to O(N).
	n = this._first;
	while ( n !== this._last && n !== node ) {
		n = n._next;
	}
	// Check if we iterated through the entire list:
	if ( n === this._last ) {
		throw new Error( 'invalid argument. The list does not contain the provided list node.' );
	}
	// Create a new list node:
	n = new _$Node_1402( value );

	// Update pointers:
	node._next._prev = n;
	n._next = node._next;

	node._next = n;
	n._prev = node;

	// Increment the list length:
	this._length += 1;

	return this;

	/* eslint-enable no-underscore-dangle */
});

/**
* Returns an iterator for iterating over a list.
*
* ## Notes
*
* -   In order to prevent confusion arising from list mutation during iteration, a returned iterator **always** iterates over a list "snapshot", which is defined as the list of elements at the time of this method's invocation.
*
* @name iterator
* @memberof LinkedList.prototype
* @type {Function}
* @returns {Iterator} iterator
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Create an iterator:
* var it = list.iterator();
*
* // Iterate over the list...
* var v = it.next().value;
* // returns 'foo'
*
* v = it.next().value;
* // returns 'bar'
*
* var bool = it.next().done;
* // returns true
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'iterator', function iterator() {
	var values;
	var iter;
	var self;
	var FLG;
	var i;

	self = this;

	// Initialize the iteration index:
	i = -1;

	// Create a copy of list values (necessary in order to "snapshot" the list; otherwise, values could come and go between calls to `next`):
	values = this.toArray();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= values.length ) {
			return {
				'done': true
			};
		}
		return {
			'value': values[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return self.iterator();
	}
});

/**
* Returns the last node.
*
* @name last
* @memberof LinkedList.prototype
* @type {Function}
* @returns {(Node|void)} list node
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Peek at the last value:
* var v = list.last().value;
* // returns 'bar'
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'last', function last() {
	if ( this._length ) {
		return this._last;
	}
});

/**
* List length.
*
* @name length
* @memberof LinkedList.prototype
* @type {NonNegativeInteger}
*
* @example
* var list = new LinkedList();
*
* // Examine the initial list length:
* var len = list.length;
* // returns 0
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Retrieve the current list length:
* len = list.length;
* // returns 2
*/
_$setNonEnumerableReadOnlyAccessor_1357( LinkedList.prototype, 'length', function get() {
	return this._length;
});

/**
* Removes a value from the end of the list.
*
* @name pop
* @memberof LinkedList.prototype
* @type {Function}
* @returns {(*|void)} removed value
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Remove the last value:
* var v = list.pop();
* // returns 'bar'
*
* // Add a new value to the list:
* list.push( 'beep' );
*
* // Remove the last value:
* v = list.pop();
* // returns 'beep'
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'pop', function pop() {
	/* eslint-disable no-underscore-dangle */
	var value;
	if ( this._length ) {
		// Retrieve the last value:
		value = this._last.value;

		// Check whether we have a new "tail" or whether we have emptied the list...
		if ( this._last._prev ) {
			this._last = this._last._prev;
			this._last._next = null;
		} else {
			// List is empty:
			this._first = null;
			this._last = null;
		}
		// Decrement the list length:
		this._length -= 1;
	}
	return value;

	/* eslint-enable no-underscore-dangle */
});

/**
* Adds a value to the end of the list.
*
* @name push
* @memberof LinkedList.prototype
* @type {Function}
* @returns {LinkedList} list instance
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Remove the last value:
* var v = list.pop();
* // returns 'bar'
*
* // Add a new value to the list:
* list.push( 'beep' );
*
* // Remove the last value:
* v = list.pop();
* // returns 'beep'
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'push', function push( value ) {
	var node;

	// Create a new list node:
	node = new _$Node_1402( value );

	// Check whether the list is currently empty...
	if ( this._length === 0 ) {
		// This is the only list node, making it both the first and last node:
		this._first = node;
		this._last = node;
	} else {
		// Link the new node to the previous last node:
		node._prev = this._last; // eslint-disable-line no-underscore-dangle

		// Link the previous last node to the new node:
		this._last._next = node; // eslint-disable-line no-underscore-dangle

		// Update the pointer for the last node:
		this._last = node;
	}
	// Increment the list length:
	this._length += 1;

	return this;
});

/**
* Removes a list node from the list.
*
* @name remove
* @memberof LinkedList.prototype
* @type {Function}
* @param {Node} node - node to remove
* @throws {Error} must provide a node belonging to the list
* @returns {(*|void)} removed value
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' ).push( 'beep' );
*
* // Determine the list length:
* var len = list.length;
* // returns 3
*
* // Get the second node:
* var node = list.first().next;
*
* // Remove the second node:
* var v = list.remove( node );
* // returns 'bar'
*
* // Determine the list length:
* len = list.length;
* // returns 2
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'remove', function remove( node ) {
	/* eslint-disable no-underscore-dangle */
	var value;
	var n;

	// Case: first node (equivalent to `shift()`)
	if ( node === this._first ) {
		return this.shift();
	}
	// Case: last node (equivalent to `pop()`)
	if ( node === this._last ) {
		return this.pop();
	}
	// Retrieve the node value:
	value = node.value;

	// Unfortunately, we need to check whether we have been provided a node belonging to our list by walking the list. If we don't, we could erroneously decrement the list length. This means our runtime goes from the theoretical O(1) to O(N).
	n = this._first;
	while ( n !== this._last && n !== node ) {
		n = n._next;
	}
	// Check if we iterated through the entire list:
	if ( n === this._last ) {
		throw new Error( 'invalid argument. The list does not contain the provided list node.' );
	}
	// Update pointers:
	node._prev._next = node._next;
	node._next._prev = node._prev;

	// Decrement the list length:
	this._length -= 1;

	return value;

	/* eslint-enable no-underscore-dangle */
});

/**
* Removes a value from the beginning of the list.
*
* @name shift
* @memberof LinkedList.prototype
* @type {Function}
* @returns {(*|void)} removed value
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Remove the first value:
* var v = list.shift();
* // returns 'foo'
*
* // Add a new value to the list:
* list.push( 'beep' );
*
* // Remove the first value:
* v = list.shift();
* // returns 'bar'
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'shift', function shift() {
	/* eslint-disable no-underscore-dangle */
	var value;
	if ( this._length ) {
		// Retrieve the first value:
		value = this._first.value;

		// Check whether we have a new "head" or whether we have emptied the list...
		if ( this._first._next ) {
			this._first = this._first._next;
			this._first._prev = null;
		} else {
			// List is empty:
			this._first = null;
			this._last = null;
		}
		// Decrement the list length:
		this._length -= 1;
	}
	return value;

	/* eslint-enable no-underscore-dangle */
});

/**
* Returns an array of list values.
*
* @name toArray
* @memberof LinkedList.prototype
* @type {Function}
* @returns {Array} list values
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Get an array of list values:
* var vals = list.toArray();
* // returns [ 'foo', 'bar' ]
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'toArray', function toArray() {
	var node;
	var out;
	var i;

	out = [];
	node = this._first;
	for ( i = 0; i < this._length; i++ ) {
		out.push( node.value );
		node = node.next;
	}
	return out;
});

/**
* Serializes a list as JSON.
*
* ## Notes
*
* -   `JSON.stringify()` implicitly calls this method when stringifying a `LinkedList` instance.
*
* @name toJSON
* @memberof LinkedList.prototype
* @type {Function}
* @returns {Object} serialized list
*
* @example
* var list = new LinkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Serialize to JSON:
* var o = list.toJSON();
* // returns { 'type': 'linked-list', 'data': [ 'foo', 'bar' ] }
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'toJSON', function toJSON() {
	var out = {};
	out.type = 'linked-list';
	out.data = this.toArray();
	return out;
});

/**
* Adds a value to the beginning of the list.
*
* @name unshift
* @memberof LinkedList.prototype
* @type {Function}
* @returns {LinkedList} list instance
*
* @example
* var list = new LinkedList();
*
* // Add values to the beginning of the list:
* list.unshift( 'foo' ).unshift( 'bar' );
*
* // Remove the last value:
* var v = list.pop();
* // returns 'foo'
*
* // Add a new value to the beginning of the list:
* list.unshift( 'beep' );
*
* // Remove the last value:
* v = list.pop();
* // returns 'bar'
*/
_$setNonEnumerableReadOnly_1359( LinkedList.prototype, 'unshift', function unshift( value ) {
	var node;

	// Create a new list node:
	node = new _$Node_1402( value );

	// Check whether the list is currently empty...
	if ( this._length === 0 ) {
		// This is the only list node, making it both the first and last node:
		this._first = node;
		this._last = node;
	} else {
		// Link the new node to the previous first node:
		node._next = this._first; // eslint-disable-line no-underscore-dangle

		// Link the previous first node to the new node:
		this._first._prev = node; // eslint-disable-line no-underscore-dangle

		// Update the pointer for the first node:
		this._first = node;
	}
	// Increment the list length:
	this._length += 1;

	return this;
});


// EXPORTS //

var _$LinkedList_1401 = LinkedList;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Linked list.
*
* @module @stdlib/utils/linked-list
*
* @example
* var linkedList = require( '@stdlib/utils/linked-list' );
*
* var list = linkedList();
*
* // Add values to the list:
* list.push( 'foo' ).push( 'bar' );
*
* // Remove the last value:
* var v = list.pop();
* // returns 'bar'
*
* // Add a new value to the list:
* list.push( 'beep' );
*
* // Remove the first list value:
* v = list.shift();
* // returns 'foo'
*/

// MODULES //

/* removed: var _$LinkedList_1401 = require( './main.js' ); */;


// EXPORTS //

var _$linkedList_1400 = _$LinkedList_1401;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$linkedList_1400 = require( '@stdlib/utils/linked-list' ); */;


// FUNCTIONS //

/**
* Finds a node in a linked list hash based on a provided value.
*
* @private
* @param {LinkedList} hash - linked list hash
* @param {*} v - value to find
* @returns {(Node|null)} hash node or null
*/
function getNode( hash, v ) {
	var node = hash.first();
	while ( node ) {
		// Each node value should be a two-element array: [ value, count ]
		if ( node.value[ 0 ] === v ) {
			return node;
		}
		node = node.next;
	}
	return null;
}

/**
* Cleans a hash by removing nodes having counts below a provided threshold.
*
* @private
* @param {LinkedList} hash - input hash
* @param {PositiveInteger} threshold - count threshold
* @returns {LinkedList} input hash
*/
function clean( hash, threshold ) {
	var node = hash.first();
	while ( node ) {
		if ( node.value[ 1 ] < threshold ) {
			hash.remove( node );
		}
		node = node.next;
	}
	return hash;
}

/**
* Finds the intersection of two or more iterators.
*
* @private
* @param {Array<Iterator>} iterators - list of iterators
* @returns {LinkedList} a linked list containing the intersection
*/
function intersection( iterators ) {
	var hash;
	var it;
	var v;
	var n;
	var j;

	// Create a new linked list for storing the intersection:
	hash = new _$linkedList_1400();

	// Find the intersection by first finding the unique values in the first iterator...
	it = iterators[ 0 ];
	while ( true ) {
		v = it.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				// Determine if we have seen this value before...
				n = getNode( hash, v.value );
				if ( n === null ) {
					// First time we have seen this value, so add to our unique value hash:
					hash.push( [ v.value, 1 ] );
				}
			}
			break;
		}
		// Determine if we have seen this value before...
		n = getNode( hash, v.value );
		if ( n === null ) {
			// First time we have seen this value, so add to our unique value hash:
			hash.push( [ v.value, 1 ] );
		}
	}
	// Check whether we found any unique values:
	if ( hash.length === 0 ) {
		return hash;
	}
	// Now that we have found an initial set of unique values, we need to consume each subsequent iterator, updating the count indicating how many iterators have contained an iterated value and removing any values from our initial set which were not present in *all* iterators...
	for ( j = 1; j < iterators.length; j++ ) {
		it = iterators[ j ];
		while ( true ) {
			v = it.next();
			if ( v.done ) {
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					n = getNode( hash, v.value );
					if ( n && n.value[ 1 ] === j ) {
						// Only increment a value's counter the first time we see the value per iterator...
						n.value[ 1 ] += 1;
					}
				}
				break;
			}
			n = getNode( hash, v.value );
			if ( n && n.value[ 1 ] === j ) {
				// Only increment a value's counter the first time we see the value per iterator...
				n.value[ 1 ] += 1;
			}
		}
		// Upon consuming an iterator, we need to remove any hash values whose count is less than the number of iterators seen thus far:
		clean( hash, j+1 );

		// Check whether we still have any unique values:
		if ( hash.length === 0 ) {
			return hash;
		}
		// Move on to the next iterator...
	}
	return hash;
}


// MAIN //

/**
* Returns an iterator which returns the intersection of two or more iterators.
*
* @param {Iterator} iter0 - first input iterator
* @param {...Iterator} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );
* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );
*
* var iter = iterIntersection( it1, it2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/
function iterIntersection() {
	var iterators;
	var iterator;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	for ( i = 0; i < niter; i++ ) {
		if ( !_$isIterator_145( arguments[ i ] ) ) {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
		iterators.push( arguments[ i ] );
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) {
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = false;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* ## Notes
	*
	* -   The first time `next` is called, we must consume all source values in order to find the intersection (i.e., we "lazily" find the intersection, thus resulting in an upfront cost which is amortized over subsequent `next` calls).
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var hash;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		// Check if this is the first time `next` has been called...
		if ( iterator === void 0 ) {
			hash = intersection( iterators );
			if ( hash.length === 0 ) {
				FLG = true;
				return {
					'done': true
				};
			}
			iterator = hash.iterator();
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			return v;
		}
		return {
			'value': v.value[ 0 ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
		}
		return iterIntersection.apply( null, args );
	}
}


// EXPORTS //

var _$iterIntersection_299 = iterIntersection;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns the intersection of two or more iterators.
*
* @module @stdlib/iter/intersection
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterIntersection = require( '@stdlib/iter/intersection' );
*
* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );
* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );
*
* var iter = iterIntersection( it1, it2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterIntersection_299 = require( './main.js' ); */;


// EXPORTS //

var _$iterIntersection_298 = _$iterIntersection_299;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$linkedList_1400 = require( '@stdlib/utils/linked-list' ); */;


// FUNCTIONS //

/**
* Finds a node in a linked list hash based on a provided hash.
*
* @private
* @param {LinkedList} hash - linked list hash
* @param {*} v - hash to find
* @returns {(Node|null)} hash node or null
*/
function __getNode_297( hash, v ) {
	var node = hash.first();
	while ( node ) {
		// Each node value should be a three-element array: [ hash, value, count ]
		if ( node.value[ 0 ] === v ) {
			return node;
		}
		node = node.next;
	}
	return null;
}

/**
* Cleans a hash by removing nodes having counts below a provided threshold.
*
* @private
* @param {LinkedList} hash - input hash
* @param {PositiveInteger} threshold - count threshold
* @returns {LinkedList} input hash
*/
function __clean_297( hash, threshold ) {
	var node = hash.first();
	while ( node ) {
		if ( node.value[ 2 ] < threshold ) {
			hash.remove( node );
		}
		node = node.next;
	}
	return hash;
}

/**
* Finds the intersection of two or more iterators according to a hash function.
*
* @private
* @param {Array<Iterator>} iterators - list of iterators
* @param {Function} hashFcn - hash function
* @param {*} thisArg - execution context
* @returns {LinkedList} a linked list containing the intersection
*/
function __intersection_297( iterators, hashFcn, thisArg ) {
	var hash;
	var it;
	var hv;
	var v;
	var n;
	var j;

	// Create a new linked list for storing the intersection:
	hash = new _$linkedList_1400();

	// Find the intersection by first finding the unique values in the first iterator...
	it = iterators[ 0 ];
	while ( true ) {
		v = it.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				hv = hashFcn.call( thisArg, v.value );

				// Determine if we have seen this hash before...
				n = __getNode_297( hash, hv );
				if ( n === null ) {
					// First time we have seen this hash, so add to our set of hashes:
					hash.push( [ hv, v.value, 1 ] );
				}
			}
			break;
		}
		hv = hashFcn.call( thisArg, v.value );

		// Determine if we have seen this hash before...
		n = __getNode_297( hash, hv );
		if ( n === null ) {
			// First time we have seen this hash, so add to our set of hashes:
			hash.push( [ hv, v.value, 1 ] );
		}
	}
	// Check whether we found any unique hashes:
	if ( hash.length === 0 ) {
		return hash;
	}
	// Now that we have found an initial set of unique hashes, we need to consume each subsequent iterator, updating the count indicating how many iterators have contained an iterated value mapping to a given hash and removing any hashes from our initial set which were not found in *all* iterators...
	for ( j = 1; j < iterators.length; j++ ) {
		it = iterators[ j ];
		while ( true ) {
			v = it.next();
			if ( v.done ) {
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					hv = hashFcn.call( thisArg, v.value );
					n = __getNode_297( hash, hv );
					if ( n && n.value[ 2 ] === j ) {
						// Only increment a hash's counter the first time we see the hash per iterator...
						n.value[ 2 ] += 1;
					}
				}
				break;
			}
			hv = hashFcn.call( thisArg, v.value );
			n = __getNode_297( hash, hv );
			if ( n && n.value[ 2 ] === j ) {
				// Only increment a hash's counter the first time we see the hash per iterator...
				n.value[ 2 ] += 1;
			}
		}
		// Upon consuming an iterator, we need to remove any hashes whose count is less than the number of iterators seen thus far:
		__clean_297( hash, j+1 );

		// Check whether we still have any unique hashes:
		if ( hash.length === 0 ) {
			return hash;
		}
		// Move on to the next iterator...
	}
	return hash;
}


// MAIN //

/**
* Returns an iterator which returns the intersection of two or more iterators according to a hash function.
*
* @param {Iterator} iter0 - first input iterator
* @param {...Iterator} iterator - subsequent iterators
* @param {Function} hashFcn - hash function
* @param {*} [thisArg] - execution context
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @throws {TypeError} must provide a hash function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function hashFcn( v ) {
*     return v.toString();
* }
*
* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );
* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );
*
* var iter = iterIntersectionByHash( it1, it2, hashFcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/
function iterIntersectionByHash() {
	var iterators;
	var iterator;
	var hashFcn;
	var thisArg;
	var niter;
	var iter;
	var FLG;
	var i;

	iterators = [];
	for ( i = 0; i < arguments.length; i++ ) {
		if ( _$isIterator_145( arguments[ i ] ) ) {
			iterators.push( arguments[ i ] );
		} else {
			break;
		}
	}
	niter = iterators.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	if ( niter === arguments.length ) {
		throw new Error( 'insufficient input arguments. Must provide a hash function.' );
	}
	if ( arguments.length > niter+2 ) {
		// Addresses the case: fcn( it, it, null, it, it, hashFcn )
		throw new TypeError( 'invalid argument. Iterator arguments must be iterator protocol-compliant objects.' );
	}
	hashFcn = arguments[ i ];
	if ( !_$isFunction_132( hashFcn ) ) {
		throw new TypeError( 'invalid argument. Hash function argument must be a function. Value: `' + hashFcn + '`.' );
	}
	thisArg = arguments[ i+1 ];

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) {
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = false;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* ## Notes
	*
	* -   The first time `next` is called, we must consume all source values in order to find the intersection (i.e., we "lazily" find the intersection, thus resulting in an upfront cost which is amortized over subsequent `next` calls).
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var hash;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		// Check if this is the first time `next` has been called...
		if ( iterator === void 0 ) {
			hash = __intersection_297( iterators, hashFcn, thisArg );
			if ( hash.length === 0 ) {
				FLG = true;
				return {
					'done': true
				};
			}
			iterator = hash.iterator();
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			return v;
		}
		return {
			'value': v.value[ 1 ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
		}
		args.push( hashFcn );
		args.push( thisArg );
		return iterIntersectionByHash.apply( null, args );
	}
}


// EXPORTS //

var _$iterIntersectionByHash_297 = iterIntersectionByHash;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns the intersection of two or more iterators according to a hash function.
*
* @module @stdlib/iter/intersection-by-hash
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterIntersectionByHash = require( '@stdlib/iter/intersection-by-hash' );
*
* function hashFcn( v ) {
*     return v.toString();
* }
*
* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );
* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );
*
* var iter = iterIntersectionByHash( it1, it2, hashFcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterIntersectionByHash_297 = require( './main.js' ); */;


// EXPORTS //

var _$iterIntersectionByHash_296 = _$iterIntersectionByHash_297;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Consumes an iterator and returns the last iterated value.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {*} last iterated value
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var v = iterLast( it );
* // returns 1
*/
function iterLast( iterator ) {
	var last;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				return v.value;
			}
			break;
		}
		last = v.value;
	}
	return last;
}


// EXPORTS //

var _$iterLast_301 = iterLast;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Consume an iterator and return the last iterated value.
*
* @module @stdlib/iter/last
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterLast = require( '@stdlib/iter/last' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var v = iterLast( it );
* // returns 1
*/

// MODULES //

/* removed: var _$iterLast_301 = require( './main.js' ); */;


// EXPORTS //

var _$iterLast_300 = _$iterLast_301;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Consumes an iterator and returns the number of iterated values (i.e., the iterator length).
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {NonNegativeInteger} iterator length
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var v = iterLength( it );
* // returns 5
*/
function iterLength( iterator ) {
	var count;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	count = 0;
	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				count += 1;
				return count;
			}
			break;
		}
		count += 1;
	}
	return count;
}


// EXPORTS //

var _$iterLength_303 = iterLength;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Consume an iterator and return the number of iterated values (i.e., the iterator length).
*
* @module @stdlib/iter/length
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterLength = require( '@stdlib/iter/length' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var len = iterLength( it );
* // returns 5
*/

// MODULES //

/* removed: var _$iterLength_303 = require( './main.js' ); */;


// EXPORTS //

var _$iterLength_302 = _$iterLength_303;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNumber_305 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __isNonNegativeInteger_305 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which returns evenly spaced numbers over a specified interval.
*
* @param {number} start - starting value (inclusive)
* @param {number} stop - stopping value (inclusive)
* @param {NonNegativeInteger} [N=100] - number of values
* @throws {TypeError} first argument must be a number
* @throws {TypeError} second argument must be a number
* @throws {TypeError} third argument must be a nonnegative integer
* @returns {Iterator} iterator
*
* @example
* var iter = iterLinspace( 0, 99, 100 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/
function iterLinspace( start, stop, N ) {
	var delta;
	var step;
	var iter;
	var FLG;
	var n;
	var d;
	var i;

	if ( !__isNumber_305( start ) || _$isnan_370( start ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );
	}
	if ( !__isNumber_305( stop ) || _$isnan_370( stop ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !__isNonNegativeInteger_305( N ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );
		}
		n = N;
	} else {
		n = 100;
	}
	delta = stop - start;
	d = n - 1;
	step = delta / d;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* ## Notes
	*
	* -   Provides specialized support for denormalized numbers by switching the order of multiplication and division operations (see <https://github.com/numpy/numpy/issues/5437>).
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var v;
		i += 1;
		if ( FLG || i >= n ) {
			return {
				'done': true
			};
		}
		if ( i === 0 ) {
			return {
				'value': start,
				'done': false
			};
		}
		if ( i === d ) {
			return {
				'value': stop,
				'done': false
			};
		}
		// Provide support for when the `step` has underflowed (e.g., when wanting to create linearly spaced denormalized numbers)...
		if ( step === 0.0 ) {
			v = ((i/d)*delta) + start;
		} else {
			v = (i*step) + start;
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterLinspace( start, stop, n );
	}
}


// EXPORTS //

var _$iterLinspace_305 = iterLinspace;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns evenly spaced numbers over a specified interval.
*
* @module @stdlib/iter/linspace
*
* @example
* var iterLinspace = require( '@stdlib/iter/linspace' );
*
* var iter = iterLinspace( 0, 99, 100 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/

// MODULES //

/* removed: var _$iterLinspace_305 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_304 = _$iterLinspace_305;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_181 = _$isNumber_162.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*/
function isPositiveNumber( value ) {
	return (
		__isNumber_181( value ) &&
		value > 0.0
	);
}


// EXPORTS //

var _$isPositiveNumber_181 = isPositiveNumber;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_180 = _$isNumber_162.isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/
function __isPositiveNumber_180( value ) {
	return (
		__isNumber_180( value ) &&
		value.valueOf() > 0.0
	);
}


// EXPORTS //

var _$isPositiveNumber_180 = __isPositiveNumber_180;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveNumber_181 = require( './primitive.js' ); */;
/* removed: var _$isPositiveNumber_180 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a positive number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive number
*
* @example
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveNumber( 3.14 );
* // returns true
*
* @example
* var bool = isPositiveNumber( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( null );
* // returns false
*/
function __isPositiveNumber_179( value ) {
	return ( _$isPositiveNumber_181( value ) || _$isPositiveNumber_180( value ) );
}


// EXPORTS //

var _$isPositiveNumber_179 = __isPositiveNumber_179;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a positive number.
*
* @module @stdlib/assert/is-positive-number
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' );
*
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveNumber( 3.14 );
* // returns true
*
* bool = isPositiveNumber( -5.0 );
* // returns false
*
* bool = isPositiveNumber( null );
* // returns false
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
*
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isObject;
*
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isPositiveNumber_179 = require( './main.js' ); */;
/* removed: var _$isPositiveNumber_181 = require( './primitive.js' ); */;
/* removed: var _$isPositiveNumber_180 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isPositiveNumber_179, 'isPrimitive', _$isPositiveNumber_181 );
_$setNonEnumerableReadOnly_1359( _$isPositiveNumber_179, 'isObject', _$isPositiveNumber_180 );


// EXPORTS //

var _$isPositiveNumber_178 = _$isPositiveNumber_179;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Tests if a finite numeric value is an even number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an even number
*
* @example
* var bool = isEven( 5.0 );
* // returns false
*
* @example
* var bool = isEven( -2.0 );
* // returns true
*
* @example
* var bool = isEven( 0.0 );
* // returns true
*
* @example
* var bool = isEven( NaN );
* // returns false
*/
function isEven( x ) {
	return _$isInteger_368( x/2.0 );
}


// EXPORTS //

var _$isEven_365 = isEven;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite numeric value is an even number.
*
* @module @stdlib/math/base/assert/is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/is-even' );
*
* var bool = isEven( 5.0 );
* // returns false
*
* bool = isEven( -2.0 );
* // returns true
*
* bool = isEven( 0.0 );
* // returns true
*
* bool = isEven( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isEven_365 = require( './is_even.js' ); */;


// EXPORTS //

var _$isEven_364 = _$isEven_365;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isEven_364 = require( '@stdlib/math/base/assert/is-even' ); */;


// MAIN //

/**
* Tests if a finite numeric value is an odd number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an odd number
*
* @example
* var bool = isOdd( 5.0 );
* // returns true
*
* @example
* var bool = isOdd( -2.0 );
* // returns false
*
* @example
* var bool = isOdd( 0.0 );
* // returns false
*
* @example
* var bool = isOdd( NaN );
* // returns false
*/
function isOdd( x ) {
	// Check sign to prevent overflow...
	if ( x > 0.0 ) {
		return _$isEven_364( x-1.0 );
	}
	return _$isEven_364( x+1.0 );
}


// EXPORTS //

var _$isOdd_379 = isOdd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite numeric value is an odd number.
*
* @module @stdlib/math/base/assert/is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( -2.0 );
* // returns false
*
* bool = isOdd( 0.0 );
* // returns false
*
* bool = isOdd( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isOdd_379 = require( './is_odd.js' ); */;


// EXPORTS //

var _$isOdd_378 = _$isOdd_379;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === _$FLOAT64_PINF_238 || x === _$FLOAT64_NINF_235);
}


// EXPORTS //

var _$isInfinite_367 = isInfinite;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isInfinite_367 = require( './is_infinite.js' ); */;


// EXPORTS //

var _$isInfinite_366 = _$isInfinite_367;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the principal square root.
*
* @type {Function}
* @param {number} x - input value
* @returns {number} principal square root
*
* @example
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/
var sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$sqrt_626 = sqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the principal square root.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sqrt_626 = require( './main.js' ); */;


// EXPORTS //

var _$sqrt_625 = _$sqrt_626;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
}


// EXPORTS //

var _$abs_389 = abs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$abs_389 = require( './abs.js' ); */;


// EXPORTS //

var _$abs_390 = _$abs_389;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

var _$isUint32Array_199 = isUint32Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint32Array_199 = require( './main.js' ); */;


// EXPORTS //

var _$isUint32Array_198 = _$isUint32Array_199;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_91 = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_91 = __main_91;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$UINT32_MAX_253 = require( '@stdlib/constants/math/uint32-max' ); */;
/* removed: var _$main_91 = require( './uint32array.js' ); */;


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_91 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT32_MAX_253+1, _$UINT32_MAX_253+2 ];
		arr = new _$main_91( arr );
		bool = (
			_$isUint32Array_198( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === _$UINT32_MAX_253-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint32ArraySupport_90 = hasUint32ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint32ArraySupport_90 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint32ArraySupport_89 = _$hasUint32ArraySupport_90;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_43 = ctor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_42() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_42 = __polyfill_42;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

/* removed: var _$hasUint32ArraySupport_89 = require( '@stdlib/assert/has-uint32array-support' ); */;
/* removed: var _$ctor_43 = require( './uint32array.js' ); */;
/* removed: var _$polyfill_42 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_41;
if ( _$hasUint32ArraySupport_89() ) {
	__ctor_41 = _$ctor_43;
} else {
	__ctor_41 = _$polyfill_42;
}


// EXPORTS //

var _$ctor_41 = __ctor_41;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

var _$isFloat64Array_131 = isFloat64Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isFloat64Array_131 = require( './main.js' ); */;


// EXPORTS //

var _$isFloat64Array_130 = _$isFloat64Array_131;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_58 = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_58 = __main_58;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFloat64Array_130 = require( '@stdlib/assert/is-float64array' ); */;
/* removed: var _$main_58 = require( './float64array.js' ); */;


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_58 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_58( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			_$isFloat64Array_130( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasFloat64ArraySupport_60 = hasFloat64ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasFloat64ArraySupport_60 = require( './main.js' ); */;


// EXPORTS //

var _$hasFloat64ArraySupport_59 = _$hasFloat64ArraySupport_60;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_4 = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_4 = __ctor_4;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_6() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_6 = __polyfill_6;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

/* removed: var _$hasFloat64ArraySupport_59 = require( '@stdlib/assert/has-float64array-support' ); */;
/* removed: var _$ctor_4 = require( './float64array.js' ); */;
/* removed: var _$polyfill_6 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_5;
if ( _$hasFloat64ArraySupport_59() ) {
	__ctor_5 = _$ctor_4;
} else {
	__ctor_5 = _$polyfill_6;
}


// EXPORTS //

var _$ctor_5 = __ctor_5;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

var _$isUint8Array_201 = isUint8Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint8Array_201 = require( './main.js' ); */;


// EXPORTS //

var _$isUint8Array_200 = _$isUint8Array_201;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/math/uint8-max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

var _$UINT8_MAX_254 = UINT8_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_94 = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_94 = __main_94;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint8Array_200 = require( '@stdlib/assert/is-uint8array' ); */;
/* removed: var _$UINT8_MAX_254 = require( '@stdlib/constants/math/uint8-max' ); */;
/* removed: var _$main_94 = require( './uint8array.js' ); */;


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_94 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT8_MAX_254+1, _$UINT8_MAX_254+2 ];
		arr = new _$main_94( arr );
		bool = (
			_$isUint8Array_200( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === _$UINT8_MAX_254-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint8ArraySupport_93 = hasUint8ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint8ArraySupport_93 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint8ArraySupport_92 = _$hasUint8ArraySupport_93;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_46 = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_46 = __ctor_46;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_45() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_45 = __polyfill_45;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

/* removed: var _$hasUint8ArraySupport_92 = require( '@stdlib/assert/has-uint8array-support' ); */;
/* removed: var _$ctor_46 = require( './uint8array.js' ); */;
/* removed: var _$polyfill_45 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_44;
if ( _$hasUint8ArraySupport_92() ) {
	__ctor_44 = _$ctor_46;
} else {
	__ctor_44 = _$polyfill_45;
}


// EXPORTS //

var _$ctor_44 = __ctor_44;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

var _$isUint16Array_197 = isUint16Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint16Array_197 = require( './main.js' ); */;


// EXPORTS //

var _$isUint16Array_196 = _$isUint16Array_197;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/math/uint16-max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

var _$UINT16_MAX_252 = UINT16_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_88 = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_88 = __main_88;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint16Array_196 = require( '@stdlib/assert/is-uint16array' ); */;
/* removed: var _$UINT16_MAX_252 = require( '@stdlib/constants/math/uint16-max' ); */;
/* removed: var _$main_88 = require( './uint16array.js' ); */;


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_88 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT16_MAX_252+1, _$UINT16_MAX_252+2 ];
		arr = new _$main_88( arr );
		bool = (
			_$isUint16Array_196( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === _$UINT16_MAX_252-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint16ArraySupport_87 = hasUint16ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint16ArraySupport_87 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint16ArraySupport_86 = _$hasUint16ArraySupport_87;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_40 = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_40 = __ctor_40;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_39() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_39 = __polyfill_39;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

/* removed: var _$hasUint16ArraySupport_86 = require( '@stdlib/assert/has-uint16array-support' ); */;
/* removed: var _$ctor_40 = require( './uint16array.js' ); */;
/* removed: var _$polyfill_39 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_38;
if ( _$hasUint16ArraySupport_86() ) {
	__ctor_38 = _$ctor_40;
} else {
	__ctor_38 = _$polyfill_39;
}


// EXPORTS //

var _$ctor_38 = __ctor_38;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_44 = require( '@stdlib/array/uint8' ); */;
/* removed: var _$ctor_38 = require( '@stdlib/array/uint16' ); */;


// MAIN //

var ctors = {
	'uint16': _$ctor_38,
	'uint8': _$ctor_44
};


// EXPORTS //

var _$ctors_147 = ctors;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctors_147 = require( './ctors.js' ); */;


// VARIABLES //

var __bool_149;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new _$ctors_147[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new _$ctors_147[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

__bool_149 = isLittleEndian();


// EXPORTS //

var _$bool_149 = __bool_149;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

/* removed: var _$bool_149 = require( './main.js' ); */;


// EXPORTS //

var _$IS_LITTLE_ENDIAN_148 = _$bool_149;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_148 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var indices;
var HIGH;
var LOW;

if ( _$IS_LITTLE_ENDIAN_148 === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

var _$indices_825 = indices;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_148 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __indices_845;
var __HIGH_845;
var __LOW_845;

if ( _$IS_LITTLE_ENDIAN_148 === true ) {
	__HIGH_845 = 1; // second index
	__LOW_845 = 0; // first index
} else {
	__HIGH_845 = 0; // first index
	__LOW_845 = 1; // second index
}
__indices_845 = {
	'HIGH': __HIGH_845,
	'LOW': __LOW_845
};


// EXPORTS //

var _$indices_845 = __indices_845;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$indices_845 = require( './indices.js' ); */;


// VARIABLES //

var FLOAT64_VIEW = new _$ctor_5( 1 );
var UINT32_VIEW = new _$ctor_41( FLOAT64_VIEW.buffer );

var __HIGH_847 = _$indices_845.HIGH;
var __LOW_847 = _$indices_845.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ 0 ] = UINT32_VIEW[ __HIGH_847 ];
	out[ 1 ] = UINT32_VIEW[ __LOW_847 ];
	return out;
}


// EXPORTS //

var _$toWords_847 = toWords;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_847 = require( './to_words.js' ); */;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function __toWords_846( out, x ) {
	if ( arguments.length === 1 ) {
		return _$toWords_847( [ 0, 0 ], out );
	}
	return _$toWords_847( out, x );
}


// EXPORTS //

var _$toWords_846 = __toWords_846;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

/* removed: var _$toWords_846 = require( './main.js' ); */;


// EXPORTS //

var _$toWords_844 = _$toWords_846;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_148 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __LOW_831;
if ( _$IS_LITTLE_ENDIAN_148 === true ) {
	__LOW_831 = 0; // first index
} else {
	__LOW_831 = 1; // second index
}


// EXPORTS //

var _$LOW_831 = __LOW_831;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_148 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __LOW_840;
if ( _$IS_LITTLE_ENDIAN_148 === true ) {
	__LOW_840 = 0; // first index
} else {
	__LOW_840 = 1; // second index
}


// EXPORTS //

var _$LOW_840 = __LOW_840;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$LOW_840 = require( './low.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_841 = new _$ctor_5( 1 );
var __UINT32_VIEW_841 = new _$ctor_41( __FLOAT64_VIEW_841.buffer );


// MAIN //

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/
function setLowWord( x, low ) {
	__FLOAT64_VIEW_841[ 0 ] = x;
	__UINT32_VIEW_841[ _$LOW_840 ] = ( low >>> 0 ); // identity bit shift to ensure integer
	return __FLOAT64_VIEW_841[ 0 ];
}


// EXPORTS //

var _$setLowWord_841 = setLowWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-low-word
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

// MODULES //

/* removed: var _$setLowWord_841 = require( './main.js' ); */;


// EXPORTS //

var _$setLowWord_839 = _$setLowWord_841;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Converts an unsigned 32-bit integer to a signed 32-bit integer.
*
* @param {uinteger32} x - unsigned 32-bit integer
* @returns {integer32} signed 32-bit integer
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/
function uint32ToInt32( x ) {
	// NOTE: we could also use typed-arrays to achieve the same end.
	return x|0; // asm type annotation
}


// EXPORTS //

var _$uint32ToInt32_849 = uint32ToInt32;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert an unsigned 32-bit integer to a signed 32-bit integer.
*
* @module @stdlib/number/uint32/base/to-int32
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
*
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

// MODULES //

/* removed: var _$uint32ToInt32_849 = require( './main.js' ); */;


// EXPORTS //

var _$uint32ToInt32_848 = _$uint32ToInt32_849;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_148 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __HIGH_827;
if ( _$IS_LITTLE_ENDIAN_148 === true ) {
	__HIGH_827 = 1; // second index
} else {
	__HIGH_827 = 0; // first index
}


// EXPORTS //

var _$HIGH_827 = __HIGH_827;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$HIGH_827 = require( './high.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_829 = new _$ctor_5( 1 );
var __UINT32_VIEW_829 = new _$ctor_41( __FLOAT64_VIEW_829.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	__FLOAT64_VIEW_829[ 0 ] = x;
	return __UINT32_VIEW_829[ _$HIGH_827 ];
}


// EXPORTS //

var _$getHighWord_829 = getHighWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

/* removed: var _$getHighWord_829 = require( './main.js' ); */;


// EXPORTS //

var _$getHighWord_828 = _$getHighWord_829;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$indices_825 = require( './indices.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_826 = new _$ctor_5( 1 );
var __UINT32_VIEW_826 = new _$ctor_41( __FLOAT64_VIEW_826.buffer );

var __HIGH_826 = _$indices_825.HIGH;
var __LOW_826 = _$indices_825.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	__UINT32_VIEW_826[ __HIGH_826 ] = high;
	__UINT32_VIEW_826[ __LOW_826 ] = low;
	return __FLOAT64_VIEW_826[ 0 ];
}


// EXPORTS //

var _$fromWords_826 = fromWords;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$fromWords_826 = require( './main.js' ); */;


// EXPORTS //

var _$fromWords_824 = _$fromWords_826;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_844 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$fromWords_824 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	_$toWords_844( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = _$getHighWord_828( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return _$fromWords_824( hx, WORDS[ 1 ] );
}


// EXPORTS //

var _$copysign_466 = copysign;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$copysign_466 = require( './copysign.js' ); */;


// EXPORTS //

var _$copysign_467 = _$copysign_466;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isOdd_378 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$copysign_467 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the exponential function when \\(|x| = 0\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = pow( -0.0, -9 );
* // returns -Infinity
*
* @example
* var v = pow( 0.0, -9 );
* // returns Infinity
*
* @example
* var v = pow( -0.0, 9 );
* // returns 0.0
*
* @example
* var v = pow( 0.0, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 0.0, Infinity );
* // returns 0.0
*/
function pow( x, y ) {
	if ( y === _$FLOAT64_NINF_235 ) {
		return _$FLOAT64_PINF_238;
	}
	if ( y === _$FLOAT64_PINF_238 ) {
		return 0.0;
	}
	if ( y > 0.0 ) {
		if ( _$isOdd_378( y ) ) {
			return x; // handles +-0
		}
		return 0.0;
	}
	// y < 0.0
	if ( _$isOdd_378( y ) ) {
		return _$copysign_467( _$FLOAT64_PINF_238, x ); // handles +-0
	}
	return _$FLOAT64_PINF_238;
}


// EXPORTS //

var _$pow_587 = pow;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

var HUGE = 1.0e300;
var TINY = 1.0e-300;


// MAIN //

/**
* Evaluates the exponential function when \\(|y| > 2^64\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} overflow or underflow result
*
* @example
* var v = pow( 9.0, 3.6893488147419103e19 );
* // returns Infinity
*
* @example
* var v = pow( -3.14, -3.6893488147419103e19 );
* // returns 0.0
*/
function __pow_588( x, y ) {
	var ahx;
	var hx;

	hx = _$getHighWord_828( x );
	ahx = (hx & ABS_MASK);

	if ( ahx <= HIGH_MAX_NEAR_UNITY ) {
		if ( y < 0 ) {
			// signal overflow...
			return HUGE * HUGE;
		}
		// signal underflow...
		return TINY * TINY;
	}
	// `x` has a biased exponent greater than or equal to `0`...

	if ( y > 0 ) {
		// signal overflow...
		return HUGE * HUGE;
	}
	// signal underflow...
	return TINY * TINY;
}


// EXPORTS //

var _$pow_588 = __pow_588;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the exponential function when \\( y = \pm \infty\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( -1.0, Infinity );
* // returns NaN
*
* @example
* var v = pow( -1.0, -Infinity  );
* // returns NaN
*
* @example
* var v = pow( 1.0, Infinity );
* // returns 1.0
*
* @example
* var v = pow( 1.0, -Infinity  );
* // returns 1.0
*
* @example
* var v = pow( 0.5, Infinity );
* // returns 0.0
*
* @example
* var v = pow( 0.5, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 1.5, -Infinity  );
* // returns 0.0
*
* @example
* var v = pow( 1.5, Infinity );
* // returns Infinity
*/
function __pow_589( x, y ) {
	if ( x === -1.0 ) {
		// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.
		return (x-x)/(x-x); // signal NaN
	}
	if ( x === 1.0 ) {
		return 1.0;
	}
	// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)
	if ( (_$abs_390(x) < 1.0) === (y === _$FLOAT64_PINF_238) ) {
		return 0.0;
	}
	// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)
	return _$FLOAT64_PINF_238;
}


// EXPORTS //

var _$pow_589 = __pow_589;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_148 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __HIGH_836;
if ( _$IS_LITTLE_ENDIAN_148 === true ) {
	__HIGH_836 = 1; // second index
} else {
	__HIGH_836 = 0; // first index
}


// EXPORTS //

var _$HIGH_836 = __HIGH_836;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$HIGH_836 = require( './high.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_838 = new _$ctor_5( 1 );
var __UINT32_VIEW_838 = new _$ctor_41( __FLOAT64_VIEW_838.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	__FLOAT64_VIEW_838[ 0 ] = x;
	__UINT32_VIEW_838[ _$HIGH_836 ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return __FLOAT64_VIEW_838[ 0 ];
}


// EXPORTS //

var _$setHighWord_838 = setHighWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

/* removed: var _$setHighWord_838 = require( './main.js' ); */;


// EXPORTS //

var _$setHighWord_837 = _$setHighWord_838;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/math/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_EXPONENT_BIAS_221 = FLOAT64_EXPONENT_BIAS;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.5999999999999946;
	}
	return 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_582 = evalpoly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_582 = require( './polyval_l.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation

// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023
var HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation

// 0x00080000 = 524288 => 0 00000000000 10000000000000000000
var HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation

// TODO: consider making an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

var TWO53 = 9007199254740992.0;	// 0x43400000, 0x00000000

// 2/(3*LN2)
var CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD

// (float)CP
var CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000

// Low: CP_HI
var CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5

var BP = [
	1.0,
	1.5
];
var DP_HI = [
	0.0,
	5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000
];
var DP_LO = [
	0.0,
	1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006
];


// MAIN //

/**
* Computes \\(\operatorname{log2}(ax)\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @param {number} ahx - high word of `ax`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]
* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
*/
function log2ax( out, ax, ahx ) {
	var tmp;
	var ss; // `hs + ls`
	var s2; // `ss` squared
	var hs;
	var ls;
	var ht;
	var lt;
	var bp; // `BP` constant
	var dp; // `DP` constant
	var hp;
	var lp;
	var hz;
	var lz;
	var t1;
	var t2;
	var t;
	var r;
	var u;
	var v;
	var n;
	var j;
	var k;

	n = 0|0; // asm type annotation

	// Check if `x` is subnormal...
	if ( ahx < HIGH_MIN_NORMAL_EXP ) {
		ax *= TWO53;
		n -= 53|0; // asm type annotation
		ahx = _$getHighWord_828( ax );
	}
	// Extract the unbiased exponent of `x`:
	n += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - _$FLOAT64_EXPONENT_BIAS_221)|0; // asm type annotation

	// Isolate the significand bits of `x`:
	j = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation

	// Normalize `ahx` by setting the (biased) exponent to `1023`:
	ahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation

	// Determine the interval of `|x|` by comparing significand bits...

	// |x| < sqrt(3/2)
	if ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110
		k = 0;
	}
	// |x| < sqrt(3)
	else if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010
		k = 1;
	}
	// |x| >= sqrt(3)
	else {
		k = 0;
		n += 1|0; // asm type annotation
		ahx -= HIGH_MIN_NORMAL_EXP;
	}
	// Load the normalized high word into `|x|`:
	ax = _$setHighWord_837( ax, ahx );

	// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:
	bp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5
	u = ax - bp; // (x-1) || (x-1.5)
	v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)
	ss = u * v;
	hs = _$setLowWord_839( ss, 0 ); // set all low word (less significant significand) bits to 0s

	// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):
	tmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
	tmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`
	ht = _$setHighWord_837( 0.0, tmp );
	lt = ax - (ht - bp);
	ls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );

	// Compute `log(ax)`...

	s2 = ss * ss;
	r = s2 * s2 * _$evalpoly_582( s2 );
	r += ls * (hs + ss);
	s2 = hs * hs;
	ht = 3.0 + s2 + r;
	ht = _$setLowWord_839( ht, 0 );
	lt = r - ((ht-3.0) - s2);

	// u+v = ss*(1+...):
	u = hs * ht;
	v = ( ls*ht ) + ( lt*ss );

	// 2/(3LN2) * (ss+...):
	hp = u + v;
	hp = _$setLowWord_839( hp, 0 );
	lp = v - (hp - u);
	hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)
	lz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];

	// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz
	dp = DP_HI[ k ];
	t = n;
	t1 = ((hz+lz) + dp) + t; // log2(ax)
	t1 = _$setLowWord_839( t1, 0 );
	t2 = lz - (((t1-t) - dp) - hz);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

var _$log2ax_580 = log2ax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_584( x ) {
	if ( x === 0.0 ) {
		return 0.5;
	}
	return 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));
}


// EXPORTS //

var _$evalpoly_584 = __evalpoly_584;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$evalpoly_584 = require( './polyval_w.js' ); */;


// VARIABLES //

// 1/LN2
var INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE

// High (24 bits): 1/LN2
var INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000

// Low: 1/LN2
var INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44


// MAIN //

/**
* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]
* // returns [ -1265.7236328125, -0.0008163940840404393 ]
*/
function logx( out, ax ) {
	var t2;
	var t1;
	var t;
	var w;
	var u;
	var v;

	t = ax - 1.0; // `t` has `20` trailing zeros
	w = t * t * _$evalpoly_584( t );
	u = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits
	v = ( t*INV_LN2_LO ) - ( w*INV_LN2 );
	t1 = u + v;
	t1 = _$setLowWord_839( t1, 0 );
	t2 = v - (t1 - u);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

var _$logx_581 = logx;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE2_EXPONENT_230 = FLOAT64_MAX_BASE2_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_229 = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_234 = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/math/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

var _$FLOAT64_SMALLEST_NORMAL_239 = FLOAT64_SMALLEST_NORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_SMALLEST_NORMAL_239 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( _$isnan_370( x ) || _$isInfinite_366( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && _$abs_390( x ) < _$FLOAT64_SMALLEST_NORMAL_239 ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

var _$normalize_835 = normalize;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$normalize_835 = require( './normalize.js' ); */;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function __normalize_834( out, x ) {
	if ( arguments.length === 1 ) {
		return _$normalize_835( [ 0.0, 0 ], out );
	}
	return _$normalize_835( out, x );
}


// EXPORTS //

var _$normalize_834 = __normalize_834;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$normalize_834 = require( './main.js' ); */;


// EXPORTS //

var _$normalize_833 = _$normalize_834;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_225 = FLOAT64_HIGH_WORD_EXPONENT_MASK;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_225 = require( '@stdlib/constants/math/float64-high-word-exponent-mask' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = _$getHighWord_828( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & _$FLOAT64_HIGH_WORD_EXPONENT_MASK_225 ) >>> 20;

	// Remove the bias and return:
	return (high - _$FLOAT64_EXPONENT_BIAS_221)|0; // asm type annotation
}


// EXPORTS //

var _$exponent_823 = exponent;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

/* removed: var _$exponent_823 = require( './main.js' ); */;


// EXPORTS //

var _$exponent_822 = _$exponent_823;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_230 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_229 = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_234 = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$copysign_467 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$normalize_833 = require( '@stdlib/number/float64/base/normalize' ); */;
/* removed: var _$exponent_822 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$toWords_844 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$fromWords_824 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var __WORDS_560 = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		frac === 0.0 || // handles +-0
		_$isnan_370( frac ) ||
		_$isInfinite_366( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	_$normalize_833( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += _$exponent_822( frac );

	// Check for underflow/overflow...
	if ( exp < _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_234 ) {
		return _$copysign_467( 0.0, frac );
	}
	if ( exp > _$FLOAT64_MAX_BASE2_EXPONENT_230 ) {
		if ( frac < 0.0 ) {
			return _$FLOAT64_NINF_235;
		}
		return _$FLOAT64_PINF_238;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_229 ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	_$toWords_844( __WORDS_560, frac );
	high = __WORDS_560[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+_$FLOAT64_EXPONENT_BIAS_221) << 20);

	// Create a new floating-point number:
	return m * _$fromWords_824( high, __WORDS_560[ 1 ] );
}


// EXPORTS //

var _$ldexp_560 = ldexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$ldexp_560 = require( './ldexp.js' ); */;


// EXPORTS //

var _$ldexp_559 = _$ldexp_560;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of `2`.
*
* @module @stdlib/constants/math/float64-ln-two
* @type {number}
*
* @example
* var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
* // returns 0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `2`.
*
* ```tex
* \ln 2
* ```
*
* @constant
* @type {number}
* @default 0.6931471805599453
*/
var LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len


// EXPORTS //

var _$LN2_227 = LN2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_513( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_513 = __evalpoly_513;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_583( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_583 = __evalpoly_583;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$uint32ToInt32_848 = require( '@stdlib/number/uint32/base/to-int32' ); */;
/* removed: var _$ldexp_559 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$LN2_227 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_583 = require( './polyval_p.js' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_586 = 0x7fffffff|0; // asm type annotation

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_586 = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_586 = 0x00100000|0; // asm type annotation

// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation

// TODO: consider making into an external constant
var __HIGH_NUM_SIGNIFICAND_BITS_586 = 20|0; // asm type annotation

// High: LN2
var LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000

// Low: LN2
var LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39


// MAIN //

/**
* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
*
* @private
* @param {number} j - high word of `hp + lp`
* @param {number} hp - first power summand
* @param {number} lp - second power summand
* @returns {number} function value
*
* @example
* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
* // returns ~0.79
*/
function pow2( j, hp, lp ) {
	var tmp;
	var t1;
	var t;
	var r;
	var u;
	var v;
	var w;
	var z;
	var n;
	var i;
	var k;

	i = (j & __ABS_MASK_586)|0; // asm type annotation
	k = ((i>>__HIGH_NUM_SIGNIFICAND_BITS_586) - _$FLOAT64_EXPONENT_BIAS_221)|0; // asm type annotation
	n = 0;

	// `|z| > 0.5`, set `n = z+0.5`
	if ( i > HIGH_BIASED_EXP_NEG_1 ) {
		n = (j + (__HIGH_MIN_NORMAL_EXP_586>>(k+1)))>>>0; // asm type annotation
		k = (((n & __ABS_MASK_586)>>__HIGH_NUM_SIGNIFICAND_BITS_586) - _$FLOAT64_EXPONENT_BIAS_221)|0; // new k for n
		tmp = ((n & ~(__HIGH_SIGNIFICAND_MASK_586 >> k)))>>>0; // asm type annotation
		t = _$setHighWord_837( 0.0, tmp );
		n = (((n & __HIGH_SIGNIFICAND_MASK_586)|__HIGH_MIN_NORMAL_EXP_586) >> (__HIGH_NUM_SIGNIFICAND_BITS_586-k))>>>0; // eslint-disable-line max-len
		if ( j < 0 ) {
			n = -n;
		}
		hp -= t;
	}
	t = lp + hp;
	t = _$setLowWord_839( t, 0 );
	u = t * LN2_HI;
	v = ( (lp - (t-hp))*_$LN2_227 ) + ( t*LN2_LO );
	z = u + v;
	w = v - (z - u);
	t = z * z;
	t1 = z - ( t*_$evalpoly_583( t ) );
	r = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );
	z = 1.0 - (r - z);
	j = _$getHighWord_828( z );
	j = _$uint32ToInt32_848( j );
	j += (n << __HIGH_NUM_SIGNIFICAND_BITS_586)>>>0; // asm type annotation

	// Check for subnormal output...
	if ( (j>>__HIGH_NUM_SIGNIFICAND_BITS_586) <= 0 ) {
		z = _$ldexp_559( z, n );
	} else {
		z = _$setHighWord_837( z, j );
	}
	return z;
}


// EXPORTS //

var _$pow2_586 = pow2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isOdd_378 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$toWords_844 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$uint32ToInt32_848 = require( '@stdlib/number/uint32/base/to-int32' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$pow_587 = require( './x_is_zero.js' ); */;
/* removed: var _$pow_588 = require( './y_is_huge.js' ); */;
/* removed: var _$pow_589 = require( './y_is_infinite.js' ); */;
/* removed: var _$log2ax_580 = require( './log2ax.js' ); */;
/* removed: var _$logx_581 = require( './logx.js' ); */;
/* removed: var _$pow2_586 = require( './pow2.js' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_585 = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var __HIGH_MAX_NEAR_UNITY_585 = 0x3fefffff|0; // asm type annotation

// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31
var HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation

// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64
var HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation

// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024
var HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_585 = 0x3ff00000|0; // asm type annotation

// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000
var HIGH_1075 = 0x4090cc00|0; // asm type annotation

// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000
var HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation

var HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation

var __HUGE_585 = 1.0e300;
var __TINY_585 = 1.0e-300;

// -(1024-log2(ovfl+.5ulp))
var OVT = 8.0085662595372944372e-17;

// High/low words workspace:
var __WORDS_585 = [ 0|0, 0|0 ]; // WARNING: not thread safe

// Log workspace:
var LOG_WORKSPACE = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the exponential function.
*
* ## Method
*
* 1.  Let \\(x = 2^n (1+f)\\).
*
* 2.  Compute \\(\operatorname{log2}(x)\\) as
*
*     ```tex
*     \operatorname{log2}(x) = w_1 + w_2
*     ```
*
*     where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
*
* 3.  Compute
*
*     ```tex
*     y \cdot \operatorname{log2}(x) = n + y^\prime
*     ```
*
*     by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
*
* 4.  Return
*
*     ```tex
*     x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
* 1^y &= 1 & \\
* x^0 &= 1 & \\
* x^1 &= x & \\
* (\pm 0)^\infty &= +0 & \\
* (\pm 0)^{-\infty} &= +\infty & \\
* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
* x^{\infty} &= +\infty & |x| > 1 \\
* x^{\infty} &= +0 & |x| < 1 \\
* x^{-\infty} &= +0 & |x| > 1 \\
* x^{-\infty} &= +\infty & |x| < 1 \\
* (-\infty)^y &= (-0)^y & \\
* \infty^y &= +0 & y < 0 \\
* \infty^y &= +\infty & y > 0 \\
* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
* \end{align*}
* ```
*
* ## Notes
*
* -   \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) **always** returns the correct integer, provided the value is representable.
* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
*
*
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* @example
* var v = pow( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var v = pow( 100.0, 0.0 );
* // returns 1.0
*
* @example
* var v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* @example
* var v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* @example
* var v = pow( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = pow( 5.0, NaN );
* // returns NaN
*
* @example
* var v = pow( NaN, NaN );
* // returns NaN
*/
function __pow_585( x, y ) {
	var ahx; // absolute value high word `x`
	var ahy; // absolute value high word `y`
	var ax;  // absolute value `x`
	var hx;  // high word `x`
	var lx;  // low word `x`
	var hy;  // high word `y`
	var ly;  // low word `y`
	var sx;  // sign `x`
	var sy;  // sign `y`
	var y1;
	var hp;
	var lp;
	var t;
	var z;   // y prime
	var j;
	var i;
	if ( _$isnan_370( x ) || _$isnan_370( y ) ) {
		return NaN;
	}
	// Split `y` into high and low words:
	_$toWords_844( __WORDS_585, y );
	hy = __WORDS_585[ 0 ];
	ly = __WORDS_585[ 1 ];

	// Special cases `y`...
	if ( ly === 0 ) {
		if ( y === 0.0 ) {
			return 1.0;
		}
		if ( y === 1.0 ) {
			return x;
		}
		if ( y === -1.0 ) {
			return 1.0 / x;
		}
		if ( y === 0.5 ) {
			return _$sqrt_625( x );
		}
		if ( y === -0.5 ) {
			return 1.0 / _$sqrt_625( x );
		}
		if ( y === 2.0 ) {
			return x * x;
		}
		if ( y === 3.0 ) {
			return x * x * x;
		}
		if ( y === 4.0 ) {
			x *= x;
			return x * x;
		}
		if ( _$isInfinite_366( y ) ) {
			return _$pow_589( x, y );
		}
	}
	// Split `x` into high and low words:
	_$toWords_844( __WORDS_585, x );
	hx = __WORDS_585[ 0 ];
	lx = __WORDS_585[ 1 ];

	// Special cases `x`...
	if ( lx === 0 ) {
		if ( hx === 0 ) {
			return _$pow_587( x, y );
		}
		if ( x === 1.0 ) {
			return 1.0;
		}
		if (
			x === -1.0 &&
			_$isOdd_378( y )
		) {
			return -1.0;
		}
		if ( _$isInfinite_366( x ) ) {
			if ( x === _$FLOAT64_NINF_235 ) {
				// `pow( 1/x, -y )`
				return __pow_585( -0.0, -y );
			}
			if ( y < 0.0 ) {
				return 0.0;
			}
			return _$FLOAT64_PINF_238;
		}
	}
	if (
		x < 0.0 &&
		_$isInteger_368( y ) === false
	) {
		// Signal NaN...
		return (x-x)/(x-x);
	}
	ax = _$abs_390( x );

	// Remove the sign bits (i.e., get absolute values):
	ahx = (hx & __ABS_MASK_585)|0; // asm type annotation
	ahy = (hy & __ABS_MASK_585)|0; // asm type annotation

	// Extract the sign bits:
	sx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation
	sy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation

	// Determine the sign of the result...
	if ( sx && _$isOdd_378( y ) ) {
		sx = -1.0;
	} else {
		sx = 1.0;
	}
	// Case 1: `|y|` is huge...

	// |y| > 2^31
	if ( ahy > HIGH_BIASED_EXP_31 ) {
		// `|y| > 2^64`, then must over- or underflow...
		if ( ahy > HIGH_BIASED_EXP_64 ) {
			return _$pow_588( x, y );
		}
		// Over- or underflow if `x` is not close to unity...

		if ( ahx < __HIGH_MAX_NEAR_UNITY_585 ) {
			// y < 0
			if ( sy === 1 ) {
				// Signal overflow...
				return sx * __HUGE_585 * __HUGE_585;
			}
			// Signal underflow...
			return sx * __TINY_585 * __TINY_585;
		}
		if ( ahx > __HIGH_BIASED_EXP_0_585 ) {
			// y > 0
			if ( sy === 0 ) {
				// Signal overflow...
				return sx * __HUGE_585 * __HUGE_585;
			}
			// Signal underflow...
			return sx * __TINY_585 * __TINY_585;
		}
		// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.
		t = _$logx_581( LOG_WORKSPACE, ax );
	}
	// Case 2: `|y|` is not huge...
	else {
		t = _$log2ax_580( LOG_WORKSPACE, ax, ahx );
	}
	// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...
	y1 = _$setLowWord_839( y, 0 );
	lp = ( (y-y1)*t[0] ) + ( y*t[1] );
	hp = y1 * t[0];
	z = lp + hp;

	// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.
	_$toWords_844( __WORDS_585, z );
	j = _$uint32ToInt32_848( __WORDS_585[0] );
	i = _$uint32ToInt32_848( __WORDS_585[1] );

	// z >= 1024
	if ( j >= HIGH_BIASED_EXP_10 ) {
		// z > 1024
		if ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {
			// Signal overflow...
			return sx * __HUGE_585 * __HUGE_585;
		}
		if ( (lp+OVT) > (z-hp) ) {
			// Signal overflow...
			return sx * __HUGE_585 * __HUGE_585;
		}
	}
	// z <= -1075
	else if ( (j&__ABS_MASK_585) >= HIGH_1075 ) {
		// z < -1075
		if ( ((j-HIGH_NEG_1075)|i) !== 0 ) {
			// signal underflow...
			return sx * __TINY_585 * __TINY_585;
		}
		if ( lp <= (z-hp) ) {
			// signal underflow...
			return sx * __TINY_585 * __TINY_585;
		}
	}
	// Compute `2^(hp+lp)`...
	z = _$pow2_586( j, hp, lp );

	return sx * z;
}


// EXPORTS //

var _$pow_585 = __pow_585;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the exponential function.
*
* @module @stdlib/math/base/special/pow
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* v = pow( 4.0, 0.5 );
* // returns 2.0
*
* v = pow( 100.0, 0.0 );
* // returns 1.0
*
* v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* v = pow( NaN, 3.0 );
* // returns NaN
*
* v = pow( 5.0, NaN );
* // returns NaN
*
* v = pow( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$pow_585 = require( './pow.js' ); */;


// EXPORTS //

var _$pow_579 = _$pow_585;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNumber_307 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __isNonNegativeInteger_307 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositiveNumber_307 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;


// VARIABLES //

var DEFAULT_BASE = 10;
var DEFAULT_LEN = 100;


// MAIN //

/**
* Returns an iterator which returns evenly spaced numbers on a log scale.
*
* @param {number} start - exponent of starting value (inclusive)
* @param {number} stop - exponent of stopping value (inclusive)
* @param {NonNegativeInteger} [N=100] - number of values
* @param {Options} [options] - function options
* @param {PositiveNumber} [options.base=10] - base of log space
* @throws {TypeError} first argument must be a number
* @throws {TypeError} second argument must be a number
* @throws {TypeError} `N` argument must be a nonnegative integer
* @throws {TypeError} `options` argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterLogspace( 0, 3, 4 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 10
*
* v = iter.next().value;
* // returns 100
*
* // ...
*/
function iterLogspace( start, stop, N, options ) {
	var step;
	var iter;
	var FLG;
	var b;
	var n;
	var d;
	var i;

	if ( !__isNumber_307( start ) || _$isnan_370( start ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );
	}
	if ( !__isNumber_307( stop ) || _$isnan_370( stop ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );
	}
	if ( arguments.length === 3 ) {
		if ( __isNonNegativeInteger_307( N ) ) {
			n = N;
			b = DEFAULT_BASE;
		} else if ( _$isPlainObject_172( N ) ) {
			n = DEFAULT_LEN;
			if ( _$hasOwnProp_78( N, 'base' ) ) {
				if ( !__isPositiveNumber_307( N.base ) ) {
					throw new TypeError( 'invalid option. `base` option must be a positive number. Option: `' + N.base + '`.' );
				}
				b = N.base;
			} else {
				b = DEFAULT_BASE;
			}
		} else {
			throw new TypeError( 'invalid argument. Third argument must be either a nonnegative integer or an object. Value: `' + N + '`.' );
		}
	} else if ( arguments.length >= 4 ) {
		if ( !__isNonNegativeInteger_307( N ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );
		}
		n = N;
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Fourth argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'base' ) ) {
			if ( !__isPositiveNumber_307( options.base ) ) {
				throw new TypeError( 'invalid option. `base` option must be a positive number. Option: `' + options.base + '`.' );
			}
			b = options.base;
		} else {
			b = DEFAULT_BASE;
		}
	} else {
		n = DEFAULT_LEN;
		b = DEFAULT_BASE;
	}
	d = n - 1;
	step = (stop-start) / d;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= n ) {
			return {
				'done': true
			};
		}
		if ( i === 0 ) {
			return {
				'value': _$pow_579( b, start ),
				'done': false
			};
		}
		if ( i === d ) {
			return {
				'value': _$pow_579( b, stop ),
				'done': false
			};
		}
		return {
			'value': _$pow_579( b, (i*step)+start ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterLogspace( start, stop, n, {
			'base': b
		});
	}
}


// EXPORTS //

var _$iterLogspace_307 = iterLogspace;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns evenly spaced numbers on a log scale.
*
* @module @stdlib/iter/logspace
*
* @example
* var iterLogspace = require( '@stdlib/iter/logspace' );
*
* var iter = iterLogspace( 0, 3, 4 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 10
*
* v = iter.next().value;
* // returns 100
*
* // ...
*/

// MODULES //

/* removed: var _$iterLogspace_307 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_306 = _$iterLogspace_307;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which invokes a function for each iterated value.
*
* @param {Iterator} iterator - input iterator
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* function transform( v ) {
*     return v * 10.0;
* }
*
* var iter = iterMap( randu(), transform );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterMap( iterator, fcn, thisArg ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		i += 1;
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = fcn.call( thisArg, v.value, i );
			}
			out.done = true;
			return out;
		}
		return {
			'value': fcn.call( thisArg, v.value, i ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterMap( iterator[ _$IteratorSymbol_1345 ](), fcn, thisArg );
	}
}


// EXPORTS //

var _$iterMap_309 = iterMap;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which invokes a function for each iterated value.
*
* @module @stdlib/iter/map
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterMap = require( '@stdlib/iter/map' );
*
* function transform( v ) {
*     return v * 10.0;
* }
*
* var iter = iterMap( randu(), transform );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterMap_309 = require( './main.js' ); */;


// EXPORTS //

var _$iterMap_308 = _$iterMap_309;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which transforms iterated values from two or more iterators by applying the iterated values as arguments to a provided function.
*
* @param {Iterator} iter0 - first input iterator
* @param {...Iterator} iterator - subsequent iterators
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @throws {TypeError} callback argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function transform( x, y ) {
*     return x + y;
* }
*
* var it1 = array2iterator( [ 1.0, 2.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterMapN( it1, it2, transform );
*
* var v = iter.next().value;
* // returns 4.0
*
* v = iter.next().value;
* // returns 6.0
*
* var bool = iter.next().done;
* // returns true
*/
function iterMapN() {
	var iterators;
	var thisArg;
	var niter;
	var clbk;
	var iter;
	var FLG;
	var idx;
	var i;

	niter = arguments.length;
	if ( !_$isFunction_132( arguments[ niter-1 ] ) ) {
		niter -= 1;
		thisArg = arguments[ niter ];
	}
	niter -= 1;
	clbk = arguments[ niter ];
	if ( !_$isFunction_132( clbk ) ) {
		throw new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + clbk + '`.' );
	}
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	for ( i = 0; i < niter; i++ ) {
		if ( !_$isIterator_145( arguments[ i ] ) ) {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
		iterators.push( arguments[ i ] );
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) {
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	idx = -1;
	FLG = 0;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var args;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		args = [];
		idx += 1;
		FLG = 0;
		for ( i = 0; i < niter; i++ ) {
			v = iterators[ i ].next();
			if ( v.done ) {
				FLG += 1;
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					args.push( v.value );
					continue;
				}
				return {
					'done': true
				};
			}
			args.push( v.value );
		}
		args.push( idx );
		return {
			'value': clbk.apply( thisArg, args ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
		}
		args.push( clbk );
		args.push( thisArg );
		return iterMapN.apply( null, args );
	}
}


// EXPORTS //

var _$iterMapN_311 = iterMapN;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which transforms iterated values from two or more iterators by applying the iterated values as arguments to a provided function.
*
* @module @stdlib/iter/mapn
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterMapN = require( '@stdlib/iter/mapn' );
*
* function transform( x, y ) {
*     return x + y;
* }
*
* var it1 = array2iterator( [ 1.0, 2.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterMapN( it1, it2, transform );
*
* var v = iter.next().value;
* // returns 4.0
*
* v = iter.next().value;
* // returns 6.0
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterMapN_311 = require( './main.js' ); */;


// EXPORTS //

var _$iterMapN_310 = _$iterMapN_311;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;


// MAIN //

/**
* Tests whether all iterated values are falsy.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {boolean} boolean indicating whether all iterated values are falsy
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var bool = iterNone( it );
* // returns false
*/
function iterNone( iterator ) {
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	while ( true ) {
		v = iterator.next();
		if ( v.value ) {
			return false;
		}
		if ( v.done ) {
			break;
		}
	}
	return true;
}


// EXPORTS //

var _$iterNone_315 = iterNone;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether all iterated values are falsy.
*
* @module @stdlib/iter/none
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterNone = require( '@stdlib/iter/none' );
*
* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );
*
* var bool = iterNone( it );
* // returns false
*/

// MODULES //

/* removed: var _$iterNone_315 = require( './main.js' ); */;


// EXPORTS //

var _$iterNone_314 = _$iterNone_315;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Tests whether every iterated value fails a test implemented by a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a function
* @returns {boolean} boolean indicating whether every iterated value fails a test implemented by a predicate function
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( v ) {
*     return ( v <= 0 );
* }
*
* var it = array2iterator( [ 1, 1, 1, 1, 1 ] );
*
* var bool = iterNoneBy( it, predicate );
* // returns true
*/
function iterNoneBy( iterator, predicate, thisArg ) {
	var v;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + predicate + '`.' );
	}
	i = -1;
	while ( true ) {
		i += 1;
		v = iterator.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				return !predicate.call( thisArg, v.value, i );
			}
			break;
		}
		if ( predicate.call( thisArg, v.value, i ) ) {
			return false;
		}
	}
	return true;
}


// EXPORTS //

var _$iterNoneBy_313 = iterNoneBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether every iterated value fails a test implemented by a predicate function.
*
* @module @stdlib/iter/none-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterNoneBy = require( '@stdlib/iter/none-by' );
*
* function predicate( v ) {
*     return ( v <= 0 );
* }
*
* var it = array2iterator( [ 1, 1, 1, 1, 1 ] );
*
* var bool = iterNoneBy( it, predicate );
* // returns true
*/

// MODULES //

/* removed: var _$iterNoneBy_313 = require( './main.js' ); */;


// EXPORTS //

var _$iterNoneBy_312 = _$iterNoneBy_313;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_317 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Returns the nth iterated value.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} n - iteration number
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {*} nth iterated value
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 0, 0, 1, 0, 0 ] );
*
* var v = iterNth( it, 3 );
* // returns 1
*/
function iterNth( iterator, n ) {
	var i;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( !__isPositiveInteger_317( n ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + n + '`.' );
	}
	i = 0;
	while ( true ) {
		i += 1;
		v = iterator.next();
		if ( v.done ) {
			if ( i === n && _$hasOwnProp_78( v, 'value' ) ) {
				return v.value;
			}
			return;
		}
		if ( i === n ) {
			return v.value;
		}
	}
}


// EXPORTS //

var _$iterNth_317 = iterNth;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the nth iterated value.
*
* @module @stdlib/iter/nth
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterNth = require( '@stdlib/iter/nth' );
*
* var it = array2iterator( [ 0, 0, 1, 0, 0 ] );
*
* var v = iterNth( it, 3 );
* // returns 1
*/

// MODULES //

/* removed: var _$iterNth_317 = require( './main.js' ); */;


// EXPORTS //

var _$iterNth_316 = _$iterNth_317;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;


// MAIN //

/**
* Returns an iterator pipeline.
*
* @param {(Function|FunctionArray)} iterFcn0 - iterator function or an array of iterator functions
* @param {...Function} [iterFcn] - iterator function(s)
* @throws {TypeError} must provide functions
* @throws {Error} must provide at least one iterator function
* @returns {Function} iterator pipeline
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSomeBy = require( '@stdlib/iter/some-by' );
* var iterHead = require( '@stdlib/iter/head' );
* var iterThunk = require( '@stdlib/iter/pipeline-thunk' );
*
* function threshold( r ) {
*     return ( r > 0.95 );
* }
*
* var it1 = iterThunk( iterHead, 100 );
* var it2 = iterThunk( iterSomeBy, 5, threshold );
*
* var p = iterPipeline( it1, it2 );
*
* var bool = p( randu() );
* // returns <boolean>
*/
function iterPipeline() {
	var nFuncs;
	var f;
	var i;

	nFuncs = arguments.length;
	if ( nFuncs === 1 && _$isArrayLikeObject_104( arguments[ 0 ] ) ) {
		f = arguments[ 0 ].slice();
		nFuncs = f.length;
	} else {
		f = [];
		for ( i = 0; i < nFuncs; i++ ) {
			f.push( arguments[ i ] );
		}
	}
	if ( nFuncs === 0 ) {
		throw new Error( 'insufficient input arguments. Must provide at least one iterator function.' );
	}
	for ( i = 0; i < nFuncs; i++ ) {
		if ( !_$isFunction_132( f[ i ] ) ) {
			throw new TypeError( 'invalid argument. Must provide functions. Value: `'+f[ i ]+'`.' );
		}
	}
	return pipeline;

	/**
	* Pipeline function.
	*
	* @private
	* @param {Iterator} iterator - source iterator
	* @throws {TypeError} must provide an iterator
	* @throws {TypeError} each iterator function, except the last iterator function, within an iterator pipeline must return an iterator
	* @returns {(Iterator|*)} an iterator or pipeline result
	*/
	function pipeline( iterator ) {
		var iter;
		if ( !_$isIterator_145( iterator ) ) {
			throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`' );
		}
		iter = iterator;
		for ( i = 0; i < nFuncs-1; i++ ) {
			iter = f[ i ]( iter );
			if ( !_$isIterator_145( iter ) ) {
				throw new TypeError( 'invalid argument. Each iterator function, except the last iterator function, within an iterator pipeline must return an iterator. Value: `' + iter + '`.' );
			}
		}
		return f[ nFuncs-1 ]( iter );
	}
}


// EXPORTS //

var _$iterPipeline_321 = iterPipeline;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator pipeline.
*
* @module @stdlib/iter/pipeline
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSomeBy = require( '@stdlib/iter/some-by' );
* var iterHead = require( '@stdlib/iter/head' );
* var iterThunk = require( '@stdlib/iter/pipeline-thunk' );
* var iterPipeline = require( '@stdlib/iter/pipeline' );
*
* function threshold( r ) {
*     return ( r > 0.95 );
* }
*
* var it1 = iterThunk( iterHead, 100 );
* var it2 = iterThunk( iterSomeBy, 5, threshold );
*
* var p = iterPipeline( it1, it2 );
*
* var bool = p( randu() );
* // returns <boolean>
*/

// MODULES //

/* removed: var _$iterPipeline_321 = require( './main.js' ); */;


// EXPORTS //

var _$iterPipeline_320 = _$iterPipeline_321;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;


// MAIN //

/**
* Returns an iterator "thunk".
*
* @param {Function} iterFcn - iterator function
* @param {...*} [args] - function arguments
* @throws {TypeError} first argument must be a function
* @returns {Function} iterator "thunk"
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterSome = require( '@stdlib/iter/some' );
*
* var it = array2iterator( [ 0, 0, 1, 1, 1 ] );
*
* var thunk = iterThunk( iterSome, 3 );
*
* var bool = thunk( it );
* // returns true
*/
function iterThunk( iterFcn ) {
	var pargs;
	var nargs;
	var i;
	if ( !_$isFunction_132( iterFcn ) ) {
		throw new TypeError( 'invalid argument. First argument must be a function. Value: `' + iterFcn + '`.' );
	}
	nargs = arguments.length;
	pargs = [];
	for ( i = 1; i < nargs; i++ ) {
		pargs.push( arguments[ i ] );
	}
	return thunk;

	/**
	* Invokes an iterator function with a provided iterator and previously provided iterator function arguments.
	*
	* @private
	* @param {Iterator} iter - input iterator
	* @throws {TypeError} must provide an iterator
	* @returns {*} iterator function result
	*/
	function thunk( iter ) {
		var args;
		var i;
		if ( !_$isIterator_145( iter ) ) {
			throw new TypeError( 'invalid argument. Must provide an an iterator. Value: `'+iter+'`.' );
		}
		args = [ iter ];
		for ( i = 0; i < nargs; i++ ) {
			args.push( pargs[ i ] );
		}
		return iterFcn.apply( null, args );
	}
}


// EXPORTS //

var _$iterThunk_319 = iterThunk;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an iterator "thunk".
*
* @module @stdlib/iter/pipeline-thunk
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterSome = require( '@stdlib/iter/some' );
* var iterThunk = require( '@stdlib/iter/pipeline-thunk' );
*
* var it = array2iterator( [ 0, 0, 1, 1, 1 ] );
*
* var thunk = iterThunk( iterSome, 3 );
*
* var bool = thunk( it );
* // returns true
*/

// MODULES //

/* removed: var _$iterThunk_319 = require( './main.js' ); */;


// EXPORTS //

var _$iterThunk_318 = _$iterThunk_319;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;


// MAIN //

/**
* Returns an iterator which skips the last value of a provided iterator.
*
* @param {Iterator} iterator - input iterator
* @param {Function} [clbk] - callback to invoke with the skipped value
* @param {*} [thisArg] - callback execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = iterPop( array2iterator( [ 1, 2 ] ) );
*
* var v = iter.next().value;
* // returns 1
*
* var bool = iter.next().done;
* // returns true
*/
function iterPop( iterator, clbk, thisArg ) {
	var last;
	var iter;
	var FLG;
	var cb;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isFunction_132( clbk ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + clbk + '`.' );
		}
		cb = clbk;
	} else {
		cb = _$noop_1408;
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( i === 0 ) {
			i += 1;
			if ( v.done ) {
				FLG = true;
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					cb.call( thisArg, v.value );
				}
				return {
					'done': true
				};
			}
			last = v.value;
			return next();
		}
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				cb.call( thisArg, v.value );
				out.value = last;
				out.done = false;
			} else {
				cb.call( thisArg, last );
				out.done = true;
			}
			return out;
		}
		out = {
			'value': last,
			'done': false
		};
		last = v.value;
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterPop( iterator[ _$IteratorSymbol_1345 ](), cb, thisArg );
	}
}


// EXPORTS //

var _$iterPop_323 = iterPop;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which skips the last value of a provided iterator.
*
* @module @stdlib/iter/pop
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterPop = require( '@stdlib/iter/pop' );
*
* var iter = iterPop( array2iterator( [ 1, 2 ] ) );
*
* var v = iter.next().value;
* // returns 1
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterPop_323 = require( './main.js' ); */;


// EXPORTS //

var _$iterPop_322 = _$iterPop_323;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which appends additional values to the end of a provided iterator.
*
* @param {Iterator} iterator - input iterator
* @param {*} items - values to append
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = iterPush( array2iterator( [ 1, 2 ] ), 3, 4 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/
function iterPush( iterator ) {
	var items;
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	items = [];
	for ( i = 1; i < arguments.length; i++ ) {
		items.push( arguments[ i ] );
	}
	FLG = 0;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var v;
		if ( FLG === 2 ) {
			return {
				'done': true
			};
		}
		if ( FLG === 1 ) {
			i += 1;
			if ( i >= items.length ) {
				FLG = 2;
				return {
					'done': true
				};
			}
			return {
				'value': items[ i ],
				'done': false
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = 1;
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				return {
					'value': v.value,
					'done': false
				};
			}
			i += 1;
			if ( i >= items.length ) {
				FLG = 2;
				return {
					'done': true
				};
			}
			return {
				'value': items[ i ],
				'done': false
			};
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 2;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [ iterator[ _$IteratorSymbol_1345 ]() ];
		for ( i = 0; i < items.length; i++ ) {
			args.push( items[ i ] );
		}
		return iterPush.apply( null, args );
	}
}


// EXPORTS //

var _$iterPush_325 = iterPush;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which appends additional values to the end of a provided iterator.
*
* @module @stdlib/iter/push
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterPush = require( '@stdlib/iter/push' );
*
* var iter = iterPush( array2iterator( [ 1, 2 ] ), 3, 4 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterPush_325 = require( './main.js' ); */;


// EXPORTS //

var _$iterPush_324 = _$iterPush_325;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which rejects a provided iterator's values according to a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( v ) {
*     return ( v > 2 );
* }
*
* var src = array2iterator( [ 1, 3, 2, 4 ] );
* var iter = iterReject( src, predicate );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/
function iterReject( iterator, predicate, thisArg ) {
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + predicate + '`.' );
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			i += 1;
			if ( v.done ) {
				FLG = true;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) && !predicate.call( thisArg, v.value, i ) ) {
					out.value = v.value;
				}
				out.done = true;
				return out;
			}
			if ( !predicate.call( thisArg, v.value, i ) ) {
				return {
					'value': v.value,
					'done': false
				};
			}
		}
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterReject( iterator[ _$IteratorSymbol_1345 ](), predicate, thisArg );
	}
}


// EXPORTS //

var _$iterReject_327 = iterReject;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rejects a provided iterator's values according to a predicate function.
*
* @module @stdlib/iter/reject
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterReject = require( '@stdlib/iter/reject' );
*
* function predicate( v ) {
*     return ( v > 2 );
* }
*
* var src = array2iterator( [ 1, 3, 2, 4 ] );
* var iter = iterReject( src, predicate );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterReject_327 = require( './main.js' ); */;


// EXPORTS //

var _$iterReject_326 = _$iterReject_327;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_331 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which replicates each iterated value a specified number of times.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} n - number of times to replicate
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var src = array2iterator( [ 1, 2, 3, 4 ] );
* var iter = iterReplicate( src, 2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/
function iterReplicate( iterator, n ) {
	var value;
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_331( n ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + n + '`.' );
	}
	i = n - 1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG === 2 ) {
			return {
				'done': true
			};
		}
		i += 1;
		if ( i === n ) {
			if ( FLG === 1 ) {
				// If we are here, we have finished the last of the replicates...
				FLG = 2;
				return {
					'done': true
				};
			}
			v = iterator.next();
			if ( v.done ) {
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					// We still need to replicate one more value...
					value = v.value; // cached value
					out.value = value;
					out.done = false;
					FLG = 1;
					i = 0; // reset the counter
				} else {
					out.done = true;
					FLG = 2;
				}
				return out;
			}
			i = 0; // reset the counter
			value = v.value; // cached value
		}
		return {
			'value': value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 2;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterReplicate( iterator[ _$IteratorSymbol_1345 ](), n );
	}
}


// EXPORTS //

var _$iterReplicate_331 = iterReplicate;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which replicates each iterated value a specified number of times.
*
* @module @stdlib/iter/replicate
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterReplicate = require( '@stdlib/iter/replicate' );
*
* var src = array2iterator( [ 1, 2, 3, 4 ] );
* var iter = iterReplicate( src, 2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/

// MODULES //

/* removed: var _$iterReplicate_331 = require( './main.js' ); */;


// EXPORTS //

var _$iterReplicate_330 = _$iterReplicate_331;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isInteger_329 = _$isInteger_140.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which replicates each iterated value according to a provided function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} fcn - function which specifies how many times to replicate an iterated value
* @param {*} [thisArg] - callback function execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function fcn( v, i ) {
*     return i + 1;
* }
*
* var src = array2iterator( [ 1, 2, 3, 4 ] );
* var iter = iterReplicateBy( src, fcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 3
*/
function iterReplicateBy( iterator, fcn, thisArg ) {
	var value;
	var iter;
	var FLG;
	var t;
	var n;
	var i;
	var j;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
	}
	t = -1; // total iteration index
	i = -1; // replicate counter
	j = -1; // source iteration index
	n = 0;  // number of replicates

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @throws {TypeError} callback function must return an integer
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG === 2 ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			t += 1;
			i += 1;
			if ( i >= n ) {
				if ( FLG === 1 ) {
					// If we are here, we have finished the last of the replicates...
					FLG = 2;
					return {
						'done': true
					};
				}
				v = iterator.next();
				if ( v.done ) {
					out = {};
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						// We *may* still need to replicate one more value...
						value = v.value; // cached value
						j += 1;
						n = fcn.call( thisArg, value, j, t ); // number of replicates
						if ( !__isInteger_329( n ) ) {
							throw new TypeError( 'invalid return value. Callback function must return an integer. Value: `' + n + '`.' );
						}
						if ( n > 0 ) {
							out.value = value;
							out.done = false;
							FLG = 1;
							i = 0; // reset the counter
						} else {
							out.done = true;
							FLG = 2;
						}
					} else {
						out.done = true;
						FLG = 2;
					}
					return out;
				}
				value = v.value; // cached value
				j += 1;
				n = fcn.call( thisArg, value, j, t );
				if ( !__isInteger_329( n ) ) {
					throw new TypeError( 'invalid return value. Callback function must return an integer. Value: `' + n + '`.' );
				}
				i = 0; // reset the counter
				if ( n > 0 ) {
					// Return the newly cached value...
					break;
				}
			} else {
				// Return the cached value...
				break;
			}
		}
		return {
			'value': value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 2;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterReplicateBy( iterator[ _$IteratorSymbol_1345 ](), fcn, thisArg );
	}
}


// EXPORTS //

var _$iterReplicateBy_329 = iterReplicateBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which replicates each iterated value according to a provided function.
*
* @module @stdlib/iter/replicate-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterReplicateBy = require( '@stdlib/iter/replicate-by' );
*
* function fcn( v, i ) {
*     return i + 1;
* }
*
* var src = array2iterator( [ 1, 2, 3, 4 ] );
* var iter = iterReplicateBy( src, fcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterReplicateBy_329 = require( './main.js' ); */;


// EXPORTS //

var _$iterReplicateBy_328 = _$iterReplicateBy_329;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;


// MAIN //

/**
* Returns an iterator which skips the first value of a provided iterator.
*
* @param {Iterator} iterator - input iterator
* @param {Function} [clbk] - callback to invoke with the skipped value
* @param {*} [thisArg] - callback execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = iterShift( array2iterator( [ 1, 2 ] ) );
*
* var v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/
function iterShift( iterator, clbk, thisArg ) {
	var iter;
	var FLG;
	var cb;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isFunction_132( clbk ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + clbk + '`.' );
		}
		cb = clbk;
	} else {
		cb = _$noop_1408;
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( i === 0 ) {
			i += 1;
			if ( v.done ) {
				FLG = true;
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					cb.call( thisArg, v.value );
				}
				return {
					'done': true
				};
			}
			cb.call( thisArg, v.value );
			return next();
		}
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterShift( iterator[ _$IteratorSymbol_1345 ](), cb, thisArg );
	}
}


// EXPORTS //

var _$iterShift_333 = iterShift;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which skips the first value of a provided iterator.
*
* @module @stdlib/iter/shift
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterShift = require( '@stdlib/iter/shift' );
*
* var iter = iterShift( array2iterator( [ 1, 2 ] ) );
*
* var v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterShift_333 = require( './main.js' ); */;


// EXPORTS //

var _$iterShift_332 = _$iterShift_333;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNonNegativeInteger_335 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// VARIABLES //

var __BEGIN_335 = 0;
var __END_335 = 1e308;


// MAIN //

/**
* Returns an iterator which returns a subsequence of iterated values from a provided iterator.
*
* @param {Iterator} iterator - input iterator
* @param {NonNegativeInteger} [begin=0] - start iteration index (inclusive)
* @param {NonNegativeInteger} [end=1e308] - end iteration index (non-inclusive)
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {TypeError} third argument must be a nonnegative integer
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterSlice( randu(), 10, 20 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterSlice( iterator, begin, end ) {
	var iter;
	var FLG;
	var N;
	var M;
	var n;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !__isNonNegativeInteger_335( begin ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + begin + '`.' );
		}
		N = begin;
		if ( arguments.length > 2 ) {
			if ( !__isNonNegativeInteger_335( end ) ) {
				throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + end + '`.' );
			}
			M = end;
		} else {
			M = __END_335;
		}
	} else {
		N = __BEGIN_335;
		M = __END_335;
	}
	n = M - N;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', finish );

	// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;

		i += 1;
		if ( n > 0 && i < N ) {
			// Lazily consume the first `N` values from the provided iterator...
			for ( i = 0; i < N; i++ ) {
				FLG = iterator.next().done;
			}
		}
		n -= 1;
		if ( FLG || n < 0 ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function finish( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterSlice( iterator[ _$IteratorSymbol_1345 ](), N, M );
	}
}


// EXPORTS //

var _$iterSlice_335 = iterSlice;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns a subsequence of iterated values from a provided iterator.
*
* @module @stdlib/iter/slice
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSlice = require( '@stdlib/iter/slice' );
*
* var iter = iterSlice( randu(), 10, 20 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterSlice_335 = require( './main.js' ); */;


// EXPORTS //

var _$iterSlice_334 = _$iterSlice_335;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_339 = _$isPositiveInteger_174.isPrimitive;


// MAIN //

/**
* Tests whether at least `n` iterated values are truthy.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} n - minimum number of truthy elements
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {boolean} boolean indicating whether at least `n` iterated values are truthy
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it = array2iterator( [ 0, 0, 1, 1, 1 ] );
*
* var bool = iterSome( it, 3 );
* // returns true
*/
function iterSome( iterator, n ) {
	var count;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( !__isPositiveInteger_339( n ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `'+n+'`.' );
	}
	count = 0;
	while ( true ) {
		v = iterator.next();
		if ( v.value ) {
			count += 1;
			if ( count === n ) {
				return true;
			}
		}
		if ( v.done ) {
			break;
		}
	}
	return false;
}


// EXPORTS //

var _$iterSome_339 = iterSome;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether at least `n` iterated values are truthy.
*
* @module @stdlib/iter/some
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterSome = require( '@stdlib/iter/some' );
*
* var it = array2iterator( [ 0, 0, 1, 1, 1 ] );
*
* var bool = iterSome( it, 3 );
* // returns true
*/

// MODULES //

/* removed: var _$iterSome_339 = require( './main.js' ); */;


// EXPORTS //

var _$iterSome_338 = _$iterSome_339;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositiveInteger_337 = _$isPositiveInteger_174.isPrimitive;


// MAIN //

/**
* Tests whether at least `n` iterated values pass a test implemented by a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} n - number of successful values
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @throws {TypeError} third argument must be a function
* @returns {boolean} boolean indicating whether at least `n` iterated values pass a test implemented by a predicate function
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( v ) {
*     return ( v > 0 );
* }
*
* var it = array2iterator( [ 1, 1, 0, 0, 1 ] );
*
* var bool = iterSomeBy( it, 3, predicate );
* // returns true
*/
function iterSomeBy( iterator, n, predicate, thisArg ) {
	var count;
	var v;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( !__isPositiveInteger_337( n ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + n + '`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Third argument must be a function. Value: `' + predicate + '`.' );
	}
	count = 0;
	i = -1;
	while ( true ) {
		i += 1;
		v = iterator.next();
		if ( v.done ) {
			if ( _$hasOwnProp_78( v, 'value' ) && predicate.call( thisArg, v.value, i ) ) {
				count += 1;
				return ( count === n );
			}
			break;
		}
		if ( predicate.call( thisArg, v.value, i ) ) {
			count += 1;
			if ( count === n ) {
				return true;
			}
		}
	}
	return false;
}


// EXPORTS //

var _$iterSomeBy_337 = iterSomeBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether at least `n` iterated values pass a test implemented by a predicate function.
*
* @module @stdlib/iter/some-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterSomeBy = require( '@stdlib/iter/some-by' );
*
* function predicate( v ) {
*     return ( v > 0 );
* }
*
* var it = array2iterator( [ 1, 1, 0, 0, 1 ] );
*
* var bool = iterSomeBy( it, 3, predicate );
* // returns true
*/

// MODULES //

/* removed: var _$iterSomeBy_337 = require( './main.js' ); */;


// EXPORTS //

var _$iterSomeBy_336 = _$iterSomeBy_337;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNumber_341 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __isNonNegativeInteger_341 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// VARIABLES //

var __DEFAULT_LENGTH_341 = 1e308;


// MAIN //

/**
* Returns an iterator which returns a sequence of numbers according to a specified increment.
*
* @param {number} start - starting value (inclusive)
* @param {number} increment - increment
* @param {number} [N=1e308] - number of values
* @throws {TypeError} first argument must be a number
* @throws {TypeError} second argument must be a number
* @throws {TypeError} third argument must be a nonnegative integer
* @returns {Iterator} iterator
*
* @example
* var iter = iterStep( 0, 2, 10 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/
function iterStep( start, increment, N ) {
	var iter;
	var FLG;
	var n;
	var i;

	if ( !__isNumber_341( start ) || _$isnan_370( start ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );
	}
	if ( !__isNumber_341( increment ) || _$isnan_370( increment ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number. Value: `' + increment + '`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !__isNonNegativeInteger_341( N ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + N + '`.' );
		}
		n = N;
	} else {
		n = __DEFAULT_LENGTH_341;
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= n ) {
			return {
				'done': true
			};
		}
		return {
			'value': start + (i*increment),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterStep( start, increment, n );
	}
}


// EXPORTS //

var _$iterStep_341 = iterStep;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns a sequence of numbers according to a specified increment.
*
* @module @stdlib/iter/step
*
* @example
* var iterStep = require( '@stdlib/iter/step' );
*
* var iter = iterStep( 0, 2, 10 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/

// MODULES //

/* removed: var _$iterStep_341 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_340 = _$iterStep_341;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNonNegativeInteger_345 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isPositiveInteger_174 = require( '@stdlib/assert/is-positive-integer' ); */;
var __isBoolean_345 = _$isBoolean_108.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// VARIABLES //

var DEFAULT_OFFSET = 0;
var DEFAULT_EAGER = false;


// MAIN //

/**
* Returns an iterator which steps by a specified amount.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} stride - stride
* @param {NonNegativeInteger} [offset=0] - offset
* @param {boolean} [eager=false] - boolean indicating whether to eagerly advance the input iterator when provided a non-zero offset
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a positive integer
* @throws {TypeError} third argument must be a nonnegative integer
* @throws {TypeError} fourth argument must be a boolean
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );
*
* var iter = iterStrided( arr, 2, 1 );
*
* var r = iter.next().value;
* // returns 1
*
* r = iter.next().value;
* // returns 3
*
* r = iter.next().value;
* // returns 5
*
* // ...
*/
function iterStrided( iterator, stride, offset, eager ) {
	var iter;
	var bool;
	var FLG;
	var idx;
	var o;
	var v;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isPositiveInteger_174( stride ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + stride + '`.' );
	}
	if ( arguments.length === 3 ) {
		if ( !__isNonNegativeInteger_345( offset ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );
		}
		idx = offset;
		bool = DEFAULT_EAGER;
	} else if ( arguments.length > 3 ) {
		if ( !__isNonNegativeInteger_345( offset ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );
		}
		idx = offset;
		if ( !__isBoolean_345( eager ) ) {
			throw new TypeError( 'invalid argument. Fourth argument must be a boolean. Value: `' + eager + '`.' );
		}
		bool = eager;
	} else {
		idx = DEFAULT_OFFSET;
		bool = DEFAULT_EAGER;
	}
	if ( bool ) {
		for ( i = 0; i < idx; i++ ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				break;
			}
		}
		// NOTE: if we've successfully advanced the input iterator, `i` is currently equal to `idx` (i.e., the offset)
		i -= 1;
	} else {
		i = -1;
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		o = idx;
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		i += 1;
		while ( i < idx ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				return {
					'done': true
				};
			}
			i += 1;
		}
		idx += stride;
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterStrided( iterator[ _$IteratorSymbol_1345 ](), stride, o, bool );
	}
}


// EXPORTS //

var _$iterStrided_345 = iterStrided;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which steps by a specified amount.
*
* @module @stdlib/iter/strided
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterStrided = require( '@stdlib/iter/strided' );
*
* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );
*
* var iter = iterStrided( arr, 2, 1 );
*
* var r = iter.next().value;
* // returns 1
*
* r = iter.next().value;
* // returns 3
*
* r = iter.next().value;
* // returns 5
*
* // ...
*/

// MODULES //

/* removed: var _$iterStrided_345 = require( './main.js' ); */;


// EXPORTS //

var _$iterStrided_344 = _$iterStrided_345;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNonNegativeInteger_343 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositiveInteger_343 = _$isPositiveInteger_174.isPrimitive;
var __isBoolean_343 = _$isBoolean_108.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// VARIABLES //

var __DEFAULT_OFFSET_343 = 0;
var __DEFAULT_EAGER_343 = false;


// MAIN //

/**
* Returns an iterator which steps according to a provided callback function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} fcn - stride function
* @param {NonNegativeInteger} [offset=0] - offset
* @param {boolean} [eager=false] - boolean indicating whether to eagerly advance the input iterator when provided a non-zero offset
* @param {*} [thisArg] - stride function execution context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @throws {TypeError} third argument must be a nonnegative integer
* @throws {TypeError} fourth argument must be a boolean
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );
*
* function stride( v, i ) {
*     return (i % 10)+1;
* }
*
* var iter = iterStridedBy( arr, stride );
*
* var r = iter.next().value;
* // returns 0
*
* r = iter.next().value;
* // returns 1
*
* r = iter.next().value;
* // returns 3
*
* // ...
*/
function iterStridedBy( iterator, fcn, offset, eager, thisArg ) {
	var stride;
	var iter;
	var bool;
	var FLG;
	var idx;
	var ctx;
	var o;
	var v;
	var i;
	var s;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
	}
	if ( arguments.length === 3 ) {
		if ( __isNonNegativeInteger_343( offset ) ) {
			idx = offset;
		} else {
			idx = __DEFAULT_OFFSET_343;
			ctx = offset;
		}
		bool = __DEFAULT_EAGER_343;
	} else if ( arguments.length === 4 ) {
		if ( !__isNonNegativeInteger_343( offset ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );
		}
		idx = offset;
		if ( __isBoolean_343( eager ) ) {
			bool = eager;
		} else {
			bool = __DEFAULT_EAGER_343;
			ctx = eager;
		}
	} else if ( arguments.length > 4 ) {
		if ( !__isNonNegativeInteger_343( offset ) ) {
			throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `' + offset + '`.' );
		}
		idx = offset;
		if ( !__isBoolean_343( eager ) ) {
			throw new TypeError( 'invalid argument. Fourth argument must be a boolean. Value: `' + eager + '`.' );
		}
		bool = eager;
		ctx = thisArg;
	} else {
		idx = __DEFAULT_OFFSET_343;
		bool = __DEFAULT_EAGER_343;
	}
	if ( bool ) {
		for ( i = 0; i < idx; i++ ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				break;
			}
		}
		// NOTE: if we've successfully advanced the input iterator, `i` is currently equal to `idx` (i.e., the offset)
		i -= 1;
	} else {
		i = -1;
	}
	s = -1;
	stride = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		o = idx;
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @throws {TypeError} callback function must return a positive integer
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		i += 1;
		while ( i < idx ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				return {
					'done': true
				};
			}
			i += 1;
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = v.value;
			}
			out.done = true;
			return out;
		}
		s += 1;
		stride = fcn.call( ctx, v.value, i, s, stride );
		if ( !__isPositiveInteger_343( stride ) ) {
			throw new TypeError( 'invalid return value. Callback function must return a positive integer. Value: `' + stride + '`.' );
		}
		idx += stride;
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterStridedBy( iterator[ _$IteratorSymbol_1345 ](), fcn, o, bool, ctx );
	}
}


// EXPORTS //

var _$iterStridedBy_343 = iterStridedBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which steps according to a provided callback function.
*
* @module @stdlib/iter/strided-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterStridedBy = require( '@stdlib/iter/strided-by' );
*
* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );
*
* function stride( v, i ) {
*     return (i % 10)+1;
* }
*
* var iter = iterStridedBy( arr, stride );
*
* var r = iter.next().value;
* // returns 0
*
* r = iter.next().value;
* // returns 1
*
* r = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterStridedBy_343 = require( './main.js' ); */;


// EXPORTS //

var _$iterStridedBy_342 = _$iterStridedBy_343;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isInteger_349 = _$isInteger_140.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Fills an array-like object view with values returned from an iterator.
*
* @param {Iterator} iterator - source iterator
* @param {ArrayLikeObject} out - output array
* @param {integer} [begin=0] - starting index (inclusive)
* @param {integer} [end=out.length] - ending index (non-inclusive)
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be an array-like object
* @throws {TypeError} third argument must be an integer (starting index) or a callback function
* @throws {TypeError} fourth argument must be an integer (ending index) or a callback function
* @throws {TypeError} fifth argument must be a function
* @returns {ArrayLikeObject} output array
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var iter = randu({
*     'iter': 10
* });
*
* var arr = iterator2arrayview( iter, new Float64Array( 20 ), 5 );
* // returns <Float64Array>
*/
function iterator2arrayview( iterator, out ) {
	var thisArg;
	var nargs;
	var begin;
	var end;
	var fcn;
	var i;
	var v;

	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isArrayLikeObject_104( out ) ) {
		throw new TypeError( 'invalid argument. Second argument must be an array-like object. Value: `' + out + '`.' );
	}
	nargs = arguments.length;
	if ( nargs === 2 ) {
		begin = 0;
		end = out.length;
	} else if ( nargs === 3 ) {
		if ( _$isFunction_132( arguments[ 2 ] ) ) {
			begin = 0;
			fcn = arguments[ 2 ];
		} else {
			begin = arguments[ 2 ];
		}
		end = out.length;
	} else if ( nargs === 4 ) {
		if ( _$isFunction_132( arguments[ 2 ] ) ) {
			begin = 0;
			end = out.length;
			fcn = arguments[ 2 ];
			thisArg = arguments[ 3 ];
		} else if ( _$isFunction_132( arguments[ 3 ] ) ) {
			begin = arguments[ 2 ];
			end = out.length;
			fcn = arguments[ 3 ];
		} else {
			begin = arguments[ 2 ];
			end = arguments[ 3 ];
		}
	} else if ( nargs === 5 ) {
		begin = arguments[ 2 ];
		if ( _$isFunction_132( arguments[ 3 ] ) ) {
			end = out.length;
			fcn = arguments[ 3 ];
			thisArg = arguments[ 4 ];
		} else {
			end = arguments[ 3 ];
			fcn = arguments[ 4 ];
			if ( !_$isFunction_132( fcn ) ) {
				throw new TypeError( 'invalid argument. Fifth argument must be a callback function. Value: `' + fcn + '`.' );
			}
		}
	} else { // nargs > 5
		begin = arguments[ 2 ];
		end = arguments[ 3 ];
		fcn = arguments[ 4 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Fifth argument must be a callback function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 5 ];
	}
	if ( !__isInteger_349( begin ) ) {
		throw new TypeError( 'invalid argument. Third argument must be either an integer (starting index) or a callback function. Value: `' + begin + '`.' );
	}
	if ( !__isInteger_349( end ) ) {
		throw new TypeError( 'invalid argument. Fourth argument must be either an integer (ending index) or a callback function. Value: `' + end + '`.' );
	}
	if ( end < 0 ) {
		end = out.length + end;
		if ( end < 0 ) {
			end = 0;
		}
	} else if ( end > out.length ) {
		end = out.length;
	}
	if ( begin < 0 ) {
		begin = out.length + begin;
		if ( begin < 0 ) {
			begin = 0;
		}
	}
	i = begin - 1;
	if ( fcn ) {
		while ( i < end-1 ) {
			i += 1;
			v = iterator.next();
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out[ i ] = fcn.call( thisArg, v.value, i, i-begin );
			}
			if ( v.done ) {
				break;
			}
		}
		return out;
	}
	while ( i < end-1 ) {
		i += 1;
		v = iterator.next();
		if ( _$hasOwnProp_78( v, 'value' ) ) {
			out[ i ] = v.value;
		}
		if ( v.done ) {
			break;
		}
	}
	return out;
}


// EXPORTS //

var _$iterator2arrayview_349 = iterator2arrayview;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fill an array-like object view with values returned from an iterator.
*
* @module @stdlib/iter/to-array-view
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var Float64Array = require( '@stdlib/array/float64' );
* var iterator2arrayview = require( '@stdlib/iter/to-array-view' );
*
* var iter = randu({
*     'iter': 10
* });
*
* var arr = iterator2arrayview( iter, new Float64Array( 20 ), 5 );
* // returns <Float64Array>
*/

// MODULES //

/* removed: var _$iterator2arrayview_349 = require( './main.js' ); */;


// EXPORTS //

var _$main_348 = _$iterator2arrayview_349;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isArrayLikeObject_104 = require( '@stdlib/assert/is-array-like-object' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isInteger_347 = _$isInteger_140.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Fills an array-like object view from right to left with values returned from an iterator.
*
* @param {Iterator} iterator - source iterator
* @param {ArrayLikeObject} out - output array
* @param {integer} [begin=0] - starting index (inclusive)
* @param {integer} [end=out.length] - ending index (non-inclusive)
* @param {Function} [mapFcn] - function to invoke for each iterated value
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be an array-like object
* @throws {TypeError} third argument must be an integer (starting index) or a callback function
* @throws {TypeError} fourth argument must be an integer (ending index) or a callback function
* @throws {TypeError} fifth argument must be a function
* @returns {ArrayLikeObject} output array
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var iter = randu({
*     'iter': 10
* });
*
* var arr = iterator2arrayviewRight( iter, new Float64Array( 20 ), 5 );
* // returns <Float64Array>
*/
function iterator2arrayviewRight( iterator, out ) {
	var thisArg;
	var nargs;
	var begin;
	var end;
	var fcn;
	var i;
	var v;

	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isArrayLikeObject_104( out ) ) {
		throw new TypeError( 'invalid argument. Second argument must be an array-like object. Value: `' + out + '`.' );
	}
	nargs = arguments.length;
	if ( nargs === 2 ) {
		begin = 0;
		end = out.length;
	} else if ( nargs === 3 ) {
		if ( _$isFunction_132( arguments[ 2 ] ) ) {
			begin = 0;
			fcn = arguments[ 2 ];
		} else {
			begin = arguments[ 2 ];
		}
		end = out.length;
	} else if ( nargs === 4 ) {
		if ( _$isFunction_132( arguments[ 2 ] ) ) {
			begin = 0;
			end = out.length;
			fcn = arguments[ 2 ];
			thisArg = arguments[ 3 ];
		} else if ( _$isFunction_132( arguments[ 3 ] ) ) {
			begin = arguments[ 2 ];
			end = out.length;
			fcn = arguments[ 3 ];
		} else {
			begin = arguments[ 2 ];
			end = arguments[ 3 ];
		}
	} else if ( nargs === 5 ) {
		begin = arguments[ 2 ];
		if ( _$isFunction_132( arguments[ 3 ] ) ) {
			end = out.length;
			fcn = arguments[ 3 ];
			thisArg = arguments[ 4 ];
		} else {
			end = arguments[ 3 ];
			fcn = arguments[ 4 ];
			if ( !_$isFunction_132( fcn ) ) {
				throw new TypeError( 'invalid argument. Fifth argument must be a callback function. Value: `' + fcn + '`.' );
			}
		}
	} else { // nargs > 5
		begin = arguments[ 2 ];
		end = arguments[ 3 ];
		fcn = arguments[ 4 ];
		if ( !_$isFunction_132( fcn ) ) {
			throw new TypeError( 'invalid argument. Fifth argument must be a callback function. Value: `' + fcn + '`.' );
		}
		thisArg = arguments[ 5 ];
	}
	if ( !__isInteger_347( begin ) ) {
		throw new TypeError( 'invalid argument. Third argument must be either an integer (starting index) or a callback function. Value: `' + begin + '`.' );
	}
	if ( !__isInteger_347( end ) ) {
		throw new TypeError( 'invalid argument. Fourth argument must be either an integer (ending index) or a callback function. Value: `' + end + '`.' );
	}
	if ( end < 0 ) {
		end = out.length + end;
		if ( end < 0 ) {
			end = 0;
		}
	} else if ( end > out.length ) {
		end = out.length;
	}
	if ( begin < 0 ) {
		begin = out.length + begin;
		if ( begin < 0 ) {
			begin = 0;
		}
	}
	i = end;
	if ( fcn ) {
		while ( i > begin ) {
			i -= 1;
			v = iterator.next();
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out[ i ] = fcn.call( thisArg, v.value, i, end-i-1 );
			}
			if ( v.done ) {
				break;
			}
		}
		return out;
	}
	while ( i > begin ) {
		i -= 1;
		v = iterator.next();
		if ( _$hasOwnProp_78( v, 'value' ) ) {
			out[ i ] = v.value;
		}
		if ( v.done ) {
			break;
		}
	}
	return out;
}


// EXPORTS //

var _$iterator2arrayviewRight_347 = iterator2arrayviewRight;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fill an array-like object view from right to left with values returned from an iterator.
*
* @module @stdlib/iter/to-array-view-right
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var Float64Array = require( '@stdlib/array/float64' );
* var iterator2arrayviewRight = require( '@stdlib/iter/to-array-view-right' );
*
* var iter = randu({
*     'iter': 10
* });
*
* var arr = iterator2arrayviewRight( iter, new Float64Array( 20 ), 5 );
* // returns <Float64Array>
*/

// MODULES //

/* removed: var _$iterator2arrayviewRight_347 = require( './main.js' ); */;


// EXPORTS //

var _$main_346 = _$iterator2arrayviewRight_347;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// FUNCTIONS //

/**
* Tests whether an array contains a provided value.
*
* @private
* @param {Array} arr - input array
* @param {*} v - test value
* @returns {boolean} boolean indicating whether an array contains a provided value
*
* @example
* var bool = contains( [ 1, 2, 3 ], 1 );
* // returns true
*
* bool = contains( [ 1, 2, 3 ], 4 );
* // returns false
*/
function __contains_351( arr, v ) {
	var len;
	var i;

	len = arr.length;
	for ( i = 0; i < len; i++ ) {
		if ( arr[ i ] === v ) {
			return true;
		}
	}
	return false;
}


// MAIN //

/**
* Returns an iterator which returns the union of two or more iterators.
*
* @param {Iterator} iter0 - first input iterator
* @param {...Iterator} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );
* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );
*
* var iter = iterUnion( it1, it2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 5
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/
function iterUnion() {
	var iterators;
	var iterator;
	var niter;
	var iter;
	var hash;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	for ( i = 0; i < niter; i++ ) {
		if ( !_$isIterator_145( arguments[ i ] ) ) {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
		iterators.push( arguments[ i ] );
	}
	hash = [];

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) {
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	iterator = iterators[ 0 ];
	FLG = false;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			if ( v.done ) {
				i += 1;
				if ( i === niter ) {
					FLG = true;
					if ( _$hasOwnProp_78( v, 'value' ) && __contains_351( hash, v.value ) === false ) {
						return {
							'value': v.value,
							'done': true
						};
					}
					return {
						'done': true
					};
				}
				iterator = iterators[ i ];
				if ( _$hasOwnProp_78( v, 'value' ) && __contains_351( hash, v.value ) === false ) {
					v = v.value;
					hash.push( v );
					break;
				}
			} else {
				v = v.value;
				if ( __contains_351( hash, v ) === false ) {
					hash.push( v );
					break;
				}
			}
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
		}
		return iterUnion.apply( null, args );
	}
}


// EXPORTS //

var _$iterUnion_351 = iterUnion;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns the union of two or more iterators.
*
* @module @stdlib/iter/union
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterUnion = require( '@stdlib/iter/union' );
*
* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );
* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );
*
* var iter = iterUnion( it1, it2 );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 5
*
* v = iter.next().value;
* // returns 3
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterUnion_351 = require( './main.js' ); */;


// EXPORTS //

var _$iterUnion_350 = _$iterUnion_351;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// FUNCTIONS //

/**
* Tests whether an array contains a provided value.
*
* @private
* @param {Array} arr - input array
* @param {*} v - test value
* @returns {boolean} boolean indicating whether an array contains a provided value
*
* @example
* var bool = contains( [ 1, 2, 3 ], 1 );
* // returns true
*
* bool = contains( [ 1, 2, 3 ], 4 );
* // returns false
*/
function __contains_357( arr, v ) {
	var len;
	var i;

	len = arr.length;
	for ( i = 0; i < len; i++ ) {
		if ( arr[ i ] === v ) {
			return true;
		}
	}
	return false;
}


// MAIN //

/**
* Returns an iterator which returns unique values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = iterUnique( array2iterator( [ 1, 2, 1, 2, 4 ] ) );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/
function iterUnique( iterator ) {
	var iter;
	var hash;
	var FLG;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	hash = [];

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) && __contains_357( hash, v.value ) === false ) {
					out.value = v.value;
				}
				out.done = true;
				return out;
			}
			v = v.value;
			if ( __contains_357( hash, v ) === false ) {
				hash.push( v );
				break;
			}
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterUnique( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$iterUnique_357 = iterUnique;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns unique values.
*
* @module @stdlib/iter/unique
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterUnique = require( '@stdlib/iter/unique' );
*
* var iter = iterUnique( array2iterator( [ 1, 2, 1, 2, 4 ] ) );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterUnique_357 = require( './main.js' ); */;


// EXPORTS //

var _$iterUnique_356 = _$iterUnique_357;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// FUNCTIONS //

/**
* Tests if a value is unique according to a predicate function when compared to a list of values.
*
* @private
* @param {Array} arr - input array
* @param {*} v - test value
* @param {Function} predicate - predicate function
* @param {*} thisArg - evaluation context
* @returns {boolean} boolean indicating whether a value is "unique"
*
* @example
* function predicate( a, b ) {
*     return ( a !== b );
* }
*
* var bool = isUnique( [ 1, 2, 3 ], 1, predicate, null );
* // returns false
*
* bool = isUnique( [ 1, 2, 3 ], 4, predicate, null );
* // returns true
*/
function isUnique( arr, v, predicate, thisArg ) {
	var len;
	var i;

	len = arr.length;
	for ( i = 0; i < len; i++ ) {
		if ( !predicate.call( thisArg, arr[ i ], v ) ) {
			return false;
		}
	}
	return true;
}


// MAIN //

/**
* Returns an iterator which returns unique values according to a predicate function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} predicate - predicate function
* @param {*} [thisArg] - evaluation context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function predicate( a, b ) {
*     return ( a !== b );
* }
*
* var iter = iterUniqueBy( array2iterator( [ 1, 2, 1, 2, 4 ] ), predicate );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/
function iterUniqueBy( iterator, predicate, thisArg ) {
	var iter;
	var hash;
	var FLG;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( predicate ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + predicate + '`.' );
	}
	hash = [];

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) && isUnique( hash, v.value, predicate, thisArg ) ) {
					out.value = v.value;
				}
				out.done = true;
				return out;
			}
			v = v.value;
			if ( isUnique( hash, v, predicate, thisArg ) ) {
				hash.push( v );
				break;
			}
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterUniqueBy( iterator[ _$IteratorSymbol_1345 ](), predicate, thisArg );
	}
}


// EXPORTS //

var _$iterUniqueBy_355 = iterUniqueBy;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns unique values according to a predicate function.
*
* @module @stdlib/iter/unique-by
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterUniqueBy = require( '@stdlib/iter/unique-by' );
*
* function predicate( a, b ) {
*     return ( a !== b );
* }
*
* var iter = iterUniqueBy( array2iterator( [ 1, 2, 1, 2, 4 ] ), predicate );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterUniqueBy_355 = require( './main.js' ); */;


// EXPORTS //

var _$iterUniqueBy_354 = _$iterUniqueBy_355;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// FUNCTIONS //

/**
* Tests whether an array contains a provided value.
*
* @private
* @param {Array} arr - input array
* @param {*} v - test value
* @returns {boolean} boolean indicating whether an array contains a provided value
*
* @example
* var bool = contains( [ 1, 2, 3 ], 1 );
* // returns true
*
* bool = contains( [ 1, 2, 3 ], 4 );
* // returns false
*/
function __contains_353( arr, v ) {
	var len;
	var i;

	len = arr.length;
	for ( i = 0; i < len; i++ ) {
		if ( arr[ i ] === v ) {
			return true;
		}
	}
	return false;
}


// MAIN //

/**
* Returns an iterator which returns unique values according to a hash function.
*
* @param {Iterator} iterator - input iterator
* @param {Function} hashFcn - hash function
* @param {*} [thisArg] - evaluation context
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function hashFcn( v ) {
*     return v.toString();
* }
*
* var iter = iterUniqueByHash( array2iterator( [ 1, 2, 1, 2, 4 ] ), hashFcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/
function iterUniqueByHash( iterator, hashFcn, thisArg ) {
	var iter;
	var hash;
	var FLG;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( hashFcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + hashFcn + '`.' );
	}
	hash = [];

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var hv;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		while ( true ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = true;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					hv = hashFcn.call( thisArg, v.value );
					if ( __contains_353( hash, hv ) === false ) {
						out.value = v.value;
					}
				}
				out.done = true;
				return out;
			}
			hv = hashFcn.call( thisArg, v.value );
			if ( __contains_353( hash, hv ) === false ) {
				hash.push( hv );
				break;
			}
		}
		return {
			'value': v.value,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterUniqueByHash( iterator[ _$IteratorSymbol_1345 ](), hashFcn, thisArg ); // eslint-disable-line max-len
	}
}


// EXPORTS //

var _$iterUniqueByHash_353 = iterUniqueByHash;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns unique values according to a hash function.
*
* @module @stdlib/iter/unique-by-hash
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterUniqueByHash = require( '@stdlib/iter/unique-by-hash' );
*
* function hashFcn( v ) {
*     return v.toString();
* }
*
* var iter = iterUniqueByHash( array2iterator( [ 1, 2, 1, 2, 4 ] ), hashFcn );
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterUniqueByHash_353 = require( './main.js' ); */;


// EXPORTS //

var _$iterUniqueByHash_352 = _$iterUniqueByHash_353;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isNumber_359 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns an iterator which returns numbers incremented by `1`.
*
* @param {number} start - starting value (inclusive)
* @param {number} [stop=+infinity] - stopping value
* @throws {TypeError} first argument must be a number
* @throws {TypeError} second argument must be a number
* @returns {Iterator} iterator
*
* @example
* var iter = iterUnitspace( 0, 99 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/
function iterUnitspace( start, stop ) {
	var STOP;
	var iter;
	var curr;
	var FLG;
	if ( !__isNumber_359( start ) || _$isnan_370( start ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number. Value: `' + start + '`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !__isNumber_359( stop ) || _$isnan_370( stop ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a number. Value: `' + stop + '`.' );
		}
		STOP = stop;
	} else {
		STOP = _$FLOAT64_PINF_238;
	}
	curr = start - 1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		if ( FLG ) {
			return {
				'done': true
			};
		}
		curr += 1;
		if ( curr > STOP ) {
			FLG = true;
			return {
				'done': true
			};
		}
		return {
			'value': curr,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterUnitspace( start, STOP );
	}
}


// EXPORTS //

var _$iterUnitspace_359 = iterUnitspace;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which returns numbers incremented by `1`.
*
* @module @stdlib/iter/unitspace
*
* @example
* var iterUnitspace = require( '@stdlib/iter/unitspace' );
*
* var iter = iterUnitspace( 0, 99 );
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/

// MODULES //

/* removed: var _$iterUnitspace_359 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_358 = _$iterUnitspace_359;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which prepends values to the beginning of a provided iterator.
*
* @param {Iterator} iterator - input iterator
* @param {*} items - values to prepend
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var iter = iterUnshift( array2iterator( [ 1, 2 ] ), 3, 4 );
*
* var v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/
function iterUnshift( iterator ) {
	var items;
	var iter;
	var FLG;
	var i;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	items = [];
	for ( i = 1; i < arguments.length; i++ ) {
		items.push( arguments[ i ] );
	}
	FLG = 0;
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG === 2 ) {
			return {
				'done': true
			};
		}
		if ( FLG === 1 ) {
			v = iterator.next();
			if ( v.done ) {
				FLG = 2;
				out = {};
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					out.value = v.value;
				}
				out.done = true;
				return out;
			}
			return {
				'value': v.value,
				'done': false
			};
		}
		i += 1;
		if ( i >= items.length ) {
			FLG = 1;
			return next();
		}
		return {
			'value': items[ i ],
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 2;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [ iterator[ _$IteratorSymbol_1345 ]() ];
		for ( i = 0; i < items.length; i++ ) {
			args.push( items[ i ] );
		}
		return iterUnshift.apply( null, args );
	}
}


// EXPORTS //

var _$iterUnshift_361 = iterUnshift;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which prepends values to the beginning of a provided iterator.
*
* @module @stdlib/iter/unshift
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterUnshift = require( '@stdlib/iter/unshift' );
*
* var iter = iterUnshift( array2iterator( [ 1, 2 ] ), 3, 4 );
*
* var v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterUnshift_361 = require( './main.js' ); */;


// EXPORTS //

var _$iterUnshift_360 = _$iterUnshift_361;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
* // returns 9007199254740991
*/


// MAIN //

/**
* Maximum safe double-precision floating-point integer.
*
* ## Notes
*
* The integer has the value
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;


// EXPORTS //

var _$FLOAT64_MAX_SAFE_INTEGER_231 = FLOAT64_MAX_SAFE_INTEGER;

var _$wheel_primes_386={"11": true,"13": true,"17": true,"19": true,"23": true,"29": true,"31": true,"37": true,"41": true,"43": true,"47": true,"53": true,"59": true,"61": true,"67": true,"71": true,"73": true,"79": true,"83": true,"89": true,"97": true,"101": true,"103": true,"107": true,"109": true,"113": true,"127": true,"131": true,"137": true,"139": true,"149": true,"151": true,"157": true,"163": true,"167": true,"173": true,"179": true,"181": true,"191": true,"193": true,"197": true,"199": true,"211": true}

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$wheel_primes_386 = require( './wheel_primes.json' ); */;


// MAIN //

/**
* Returns a boolean indicating whether a number is a prime.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether a value is a prime number
*
* @example
* var bool = isPrime( 5.0 );
* // returns true
*
* @example
* var bool = isPrime( 4.0 );
* // returns false
*/
function isPrime( x ) {
	var N;
	var i;

	// Check whether the number is an integer...
	if ( _$floor_523( x ) !== x ) {
		return false;
	}
	// Check whether the number is positive...
	if ( x <= 3 ) {
		return (x > 1); // primes: 2, 3
	}
	// Check whether the number is even...
	if ( x > _$FLOAT64_MAX_SAFE_INTEGER_231 || x%2 === 0 ) {
		return false;
	}
	// Check for small primes...
	if ( x < 9 ) {
		return true; // primes: 5, 7
	}
	// Check whether the number is evenly divisible by `3`...
	if ( x%3 === 0 ) {
		return false;
	}
	// Check whether the number is evenly divisible by `5`...
	if ( x%5 === 0 ) {
		return false;
	}
	// Check whether the number is evenly divisible by `7`...
	if ( x%7 === 0 ) {
		return false;
	}
	// Check whether the number is a prime number in the wheel...
	if ( _$wheel_primes_386[ x ] ) {
		return true;
	}
	// Use trial division (with wheel factorization; see https://en.wikipedia.org/wiki/Wheel_factorization) to detect composite numbers, leveraging the fact that all primes greater than `210` are of the form `210k±1`...
	N = _$floor_523( _$sqrt_625( x ) );
	for ( i = 11; i <= N; i += 210 ) {
		if (
			x%i === 0 ||       // 11
			x%(i+2) === 0 ||   // 13
			x%(i+6) === 0 ||   // 17
			x%(i+8) === 0 ||   // 19
			x%(i+12) === 0 ||  // 23
			x%(i+18) === 0 ||  // 29
			x%(i+20) === 0 ||  // 31
			x%(i+26) === 0 ||  // 37
			x%(i+30) === 0 ||  // 41
			x%(i+32) === 0 ||  // 43
			x%(i+36) === 0 ||  // 47
			x%(i+42) === 0 ||  // 53
			x%(i+48) === 0 ||  // 59
			x%(i+50) === 0 ||  // 61
			x%(i+56) === 0 ||  // 67
			x%(i+60) === 0 ||  // 71
			x%(i+62) === 0 ||  // 73
			x%(i+68) === 0 ||  // 79
			x%(i+72) === 0 ||  // 83
			x%(i+78) === 0 ||  // 89
			x%(i+86) === 0 ||  // 97
			x%(i+90) === 0 ||  // 101
			x%(i+92) === 0 ||  // 103
			x%(i+96) === 0 ||  // 107
			x%(i+98) === 0 ||  // 109
			x%(i+102) === 0 || // 113
			x%(i+110) === 0 || // 121 (relatively prime)
			x%(i+116) === 0 || // 127
			x%(i+120) === 0 || // 131
			x%(i+126) === 0 || // 137
			x%(i+128) === 0 || // 139
			x%(i+132) === 0 || // 143 (relatively prime)
			x%(i+138) === 0 || // 149
			x%(i+140) === 0 || // 151
			x%(i+146) === 0 || // 157
			x%(i+152) === 0 || // 163
			x%(i+156) === 0 || // 167
			x%(i+158) === 0 || // 169 (relatively prime)
			x%(i+162) === 0 || // 173
			x%(i+168) === 0 || // 179
			x%(i+170) === 0 || // 181
			x%(i+176) === 0 || // 187 (relatively prime)
			x%(i+180) === 0 || // 191
			x%(i+182) === 0 || // 193
			x%(i+186) === 0 || // 197
			x%(i+188) === 0 || // 199
			x%(i+198) === 0 || // 209 (relatively prime)
			x%(i+200) === 0    // 211
		) {
			return false;
		}
	}
	return true;
}


// EXPORTS //

var _$isPrime_385 = isPrime;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a number is prime.
*
* @module @stdlib/math/base/assert/is-prime
*
* @example
* var isPrime = require( '@stdlib/math/base/assert/is-prime' );
*
* var bool = isPrime( 11.0 );
* // returns true
*
* bool = isPrime( 3.14 );
* // returns false
*/

// MODULES //

/* removed: var _$isPrime_385 = require( './main.js' ); */;


// EXPORTS //

var _$isPrime_384 = _$isPrime_385;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPrime_384 = require( '@stdlib/math/base/assert/is-prime' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a boolean indicating whether a number is a composite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether a value is a composite number
*
* @example
* var bool = isComposite( 4.0 );
* // returns true
*
* @example
* var bool = isComposite( 5.0 );
* // returns false
*/
function isComposite( x ) {
	return _$isInteger_368( x ) && ( x > 1 ) && x !== _$FLOAT64_PINF_238 && _$isPrime_384( x ) === false;
}


// EXPORTS //

var _$isComposite_363 = isComposite;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a number is composite.
*
* @module @stdlib/math/base/assert/is-composite
*
* @example
* var isComposite = require( '@stdlib/math/base/assert/is-composite' );
*
* var bool = isComposite( 10.0 );
* // returns true
*
* bool = isComposite( 11.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isComposite_363 = require( './main.js' ); */;


// EXPORTS //

var _$isComposite_362 = _$isComposite_363;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_635 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_635( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_635 = validate;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$isComposite_362 = require( '@stdlib/math/base/assert/is-composite' ); */;
/* removed: var _$validate_635 = require( './validate.js' ); */;


// VARIABLES //

var MAX_ITER = 1e308;


// MAIN //

/**
* Returns an iterator which generates a sequence of composite numbers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterCompositesSeq();
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 6
*
* v = iter.next().value;
* // returns 8
*
* // ...
*/
function iterCompositesSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var n;
	var i;

	opts = {
		'iter': MAX_ITER
	};
	if ( arguments.length ) {
		err = _$validate_635( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;
	n = 3;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		n += 1;
		while ( _$isComposite_362( n ) === false ) {
			n += 1;
		}
		return {
			'value': n,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterCompositesSeq( opts );
	}
}


// EXPORTS //

var _$iterCompositesSeq_634 = iterCompositesSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of composite numbers.
*
* @module @stdlib/math/iter/sequences/composites
*
* @example
* var iterCompositesSeq = require( '@stdlib/math/iter/sequences/composites' );
*
* var iter = iterCompositesSeq();
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 6
*
* v = iter.next().value;
* // returns 8
*
* // ...
*/

// MODULES //

/* removed: var _$iterCompositesSeq_634 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_633 = _$iterCompositesSeq_634;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_638 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_638( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_638( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_638 = __validate_638;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_638 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_637 = 208063; // floor(cbrt(FLOAT64_MAX_SAFE_INTEGER))


// MAIN //

/**
* Returns an iterator which generates a sequence of cubes.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=208063] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterCubesSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 8
*
* // ...
*/
function iterCubesSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_637
	};
	if ( arguments.length ) {
		err = _$validate_638( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': i * i * i,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterCubesSeq( opts );
	}
}


// EXPORTS //

var _$iterCubesSeq_637 = iterCubesSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of cubes.
*
* @module @stdlib/math/iter/sequences/cubes
*
* @example
* var iterCubesSeq = require( '@stdlib/math/iter/sequences/cubes' );
*
* var iter = iterCubesSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 8
*
* // ...
*/

// MODULES //

/* removed: var _$iterCubesSeq_637 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_636 = _$iterCubesSeq_637;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_641 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_641( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_641( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_641 = __validate_641;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_641 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates an interleaved sequence of even integers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199254740992] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterEvenIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns -2
*
* // ...
*/
function iterEvenIntegersSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var sgn;
	var i;
	var j;

	opts = {
		'iter': _$FLOAT64_MAX_SAFE_INTEGER_231
	};
	if ( arguments.length ) {
		err = _$validate_641( opts, options );
		if ( err ) {
			throw err;
		}
	}
	sgn = -1;
	i = 0;
	j = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i === 1 ) {
			return {
				'value': 0,
				'done': false
			};
		}
		// Increment every other iteration...
		if ( sgn < 0 ) {
			j += 2;
		}
		sgn *= -1;
		return {
			'value': sgn * j,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterEvenIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterEvenIntegersSeq_640 = iterEvenIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates an interleaved sequence of even integers.
*
* @module @stdlib/math/iter/sequences/even-integers
*
* @example
* var iterEvenIntegersSeq = require( '@stdlib/math/iter/sequences/even-integers' );
*
* var iter = iterEvenIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns -2
*
* // ...
*/

// MODULES //

/* removed: var _$iterEvenIntegersSeq_640 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_639 = _$iterEvenIntegersSeq_640;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/
function isNegativeZero( x ) {
	return (x === 0.0 && 1.0/x === _$FLOAT64_NINF_235);
}


// EXPORTS //

var _$isNegativeZero_375 = isNegativeZero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNegativeZero_375 = require( './main.js' ); */;


// EXPORTS //

var _$isNegativeZero_374 = _$isNegativeZero_375;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_551( x ) {
	if ( x === 0.0 ) {
		return 0.0416666666666666;
	}
	return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_551 = __evalpoly_551;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_552( x ) {
	if ( x === 0.0 ) {
		return -2.7557314351390663e-7;
	}
	return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_552 = __evalpoly_552;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_551 = require( './polyval_c13.js' ); */;
/* removed: var _$evalpoly_552 = require( './polyval_c46.js' ); */;


// MAIN //

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * _$evalpoly_551( z );
	r += w * w * _$evalpoly_552( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
}


// EXPORTS //

var _$kernelCos_550 = kernelCos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$kernelCos_550 = require( './kernel_cos.js' ); */;


// EXPORTS //

var _$kernelCos_549 = _$kernelCos_550;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
}


// EXPORTS //

var _$kernelSin_554 = kernelSin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$kernelSin_554 = require( './kernel_sin.js' ); */;


// EXPORTS //

var _$kernelSin_553 = _$kernelSin_554;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$LOW_831 = require( './low.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_832 = new _$ctor_5( 1 );
var __UINT32_VIEW_832 = new _$ctor_41( __FLOAT64_VIEW_832.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	__FLOAT64_VIEW_832[ 0 ] = x;
	return __UINT32_VIEW_832[ _$LOW_831 ];
}


// EXPORTS //

var _$getLowWord_832 = getLowWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

/* removed: var _$getLowWord_832 = require( './main.js' ); */;


// EXPORTS //

var _$getLowWord_830 = _$getLowWord_832;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ldexp_559 = require( '@stdlib/math/base/special/ldexp' ); */;


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
}

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = _$ldexp_559( z, q0 );
	z -= 8.0 * _$floor_523( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= _$ldexp_559( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = _$ldexp_559( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = _$ldexp_559( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

var _$kernelRempio2_595 = kernelRempio2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$round_609 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = _$round_609( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = _$getHighWord_828( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = _$getHighWord_828( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

var _$rempio2Medium_597 = rempio2Medium;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$getLowWord_830 = require( '@stdlib/number/float64/base/get-low-word' ); */;
/* removed: var _$fromWords_824 = require( '@stdlib/number/float64/base/from-words' ); */;
/* removed: var _$kernelRempio2_595 = require( './kernel_rempio2.js' ); */;
/* removed: var _$rempio2Medium_597 = require( './rempio2_medium.js' ); */;


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var __TWO24_596 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var __PIO2_1_596 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var __PIO2_1T_596 = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * __PIO2_1T_596;
var THREE_PIO2_1T = 3.0 * __PIO2_1T_596;
var FOUR_PIO2_1T = 4.0 * __PIO2_1T_596;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_596 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_596 = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = new Array( 3 ); // WARNING: not thread safe
var TY = new Array( 2 ); // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = _$getHighWord_828( x );
	ix = (hx & __ABS_MASK_596)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return _$rempio2Medium_597( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - __PIO2_1_596;
				y[ 0 ] = z - __PIO2_1T_596;
				y[ 1 ] = (z - y[0]) - __PIO2_1T_596;
				return 1;
			}
			z = x + __PIO2_1_596;
			y[ 0 ] = z + __PIO2_1T_596;
			y[ 1 ] = (z - y[0]) + __PIO2_1T_596;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*__PIO2_1_596 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*__PIO2_1_596 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return _$rempio2Medium_597( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*__PIO2_1_596 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*__PIO2_1_596 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return _$rempio2Medium_597( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*__PIO2_1_596 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*__PIO2_1_596 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return _$rempio2Medium_597( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_596 ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = _$getLowWord_830( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = _$fromWords_824( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * __TWO24_596;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = _$kernelRempio2_595( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

var _$rempio2_596 = rempio2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

/* removed: var _$rempio2_596 = require( './rempio2.js' ); */;


// EXPORTS //

var _$rempio2_594 = _$rempio2_596;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelCos_549 = require( '@stdlib/math/base/special/kernel-cos' ); */;
/* removed: var _$kernelSin_553 = require( '@stdlib/math/base/special/kernel-sin' ); */;
/* removed: var _$rempio2_594 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_616 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_616 = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var __PIO4_HIGH_WORD_616 = 0x3fe921fb|0; // asm type annotation

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the sine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |   S    |   C    |    T   |
*     | 1 |   C    |  -S    |  -1/T  |
*     | 2 |  -S    |  -C    |    T   |
*     | 3 |  -C    |   S    |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;

	ix = _$getHighWord_828( x );
	ix &= __ABS_MASK_616;

	// Case: |x| ~< π/4
	if ( ix <= __PIO4_HIGH_WORD_616 ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return _$kernelSin_553( x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_616 ) {
		return NaN;
	}
	// Argument reduction...
	n = _$rempio2_594( x, Y );
	switch ( n & 3 ) {
	case 0:
		return _$kernelSin_553( Y[ 0 ], Y[ 1 ] );
	case 1:
		return _$kernelCos_549( Y[ 0 ], Y[ 1 ] );
	case 2:
		return -_$kernelSin_553( Y[ 0 ], Y[ 1 ] );
	default:
		return -_$kernelCos_549( Y[ 0 ], Y[ 1 ] );
	}
}


// EXPORTS //

var _$sin_616 = sin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sin_616 = require( './sin.js' ); */;


// EXPORTS //

var _$sin_615 = _$sin_616;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* // returns 3.141592653589793
*/


// MAIN //

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


// EXPORTS //

var _$PI_237 = PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two-pi
* @type {number}
*
* @example
* var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
* // returns 2.5066282746310007
*/


// MAIN //

/**
* Square root of the mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 2.5066282746310007
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;


// EXPORTS //

var _$SQRT_TWO_PI_243 = SQRT_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_463 = require( '@stdlib/math/base/special/ceil' ); */;


// MAIN //

/**
* Rounds a numeric value toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc( -4.2 );
* // returns -4.0
*
* @example
* var v = trunc( 9.99999 );
* // returns 9.0
*
* @example
* var v = trunc( 0.0 );
* // returns 0.0
*
* @example
* var v = trunc( -0.0 );
* // returns -0.0
*
* @example
* var v = trunc( NaN );
* // returns NaN
*
* @example
* var v = trunc( Infinity );
* // returns Infinity
*
* @example
* var v = trunc( -Infinity );
* // returns -Infinity
*/
function trunc( x ) {
	if ( x < 0.0 ) {
		return _$ceil_463( x );
	}
	return _$floor_523( x );
}


// EXPORTS //

var _$trunc_630 = trunc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward zero.
*
* @module @stdlib/math/base/special/trunc
*
* @example
* var trunc = require( '@stdlib/math/base/special/trunc' );
*
* var v = trunc( -4.2 );
* // returns -4.0
*
* v = trunc( 9.99999 );
* // returns 9.0
*
* v = trunc( 0.0 );
* // returns 0.0
*
* v = trunc( -0.0 );
* // returns -0.0
*
* v = trunc( NaN );
* // returns NaN
*
* v = trunc( Infinity );
* // returns Infinity
*
* v = trunc( -Infinity );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$trunc_630 = require( './trunc.js' ); */;


// EXPORTS //

var _$trunc_629 = _$trunc_630;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ldexp_559 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$evalpoly_513 = require( './polyval_p.js' ); */;


// MAIN //

/**
* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
*
* @private
* @param {number} hi - upper bound
* @param {number} lo - lower bound
* @param {integer} k - power of 2
* @returns {number} function value
*/
function expmulti( hi, lo, k ) {
	var r;
	var t;
	var c;
	var y;

	r = hi - lo;
	t = r * r;
	c = r - ( t*_$evalpoly_513( t ) );
	y = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);

	return _$ldexp_559( y, k );
}


// EXPORTS //

var _$expmulti_511 = expmulti;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$trunc_629 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$expmulti_511 = require( './expmulti.js' ); */;


// VARIABLES //

var __LN2_HI_510 = 6.93147180369123816490e-01;
var __LN2_LO_510 = 1.90821492927058770002e-10;
var LOG2_E = 1.44269504088896338700e+00;
var OVERFLOW = 7.09782712893383973096e+02;
var UNDERFLOW = -7.45133219101941108420e+02;
var NEARZERO = 1.0 / (1 << 28); // 2^-28;
var NEG_NEARZERO = -NEARZERO;


// MAIN //

/**
* Evaluates the natural exponential function.
*
* ## Method
*
* 1.  We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
*
*     ```tex
*     \begin{align*}
*     x &= k \cdot \ln(2) + r \\
*     |r| &\leq 0.5 \cdot \ln(2)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
*
*     <!-- </note> -->
*
* 2.  We approximate of \\( e^{r} \\) by a special rational function on the interval \\(\[0,0.34658]\\):
*
*     ```tex
*     \begin{align*}
*     R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
*     &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
*
*     ```tex
*     R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
*     ```
*
*     where \\( z = r^2 \\) and
*
*     ```tex
*     \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
*
*     <!-- </note> -->
*
*     The computation of \\( e^{r} \\) thus becomes
*
*     ```tex
*     \begin{align*}
*     e^{r} &= 1 + \frac{2r}{R-r} \\
*           &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
*     \end{align*}
*     ```
*
*     where
*
*     ```tex
*     R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
*     ```
*
* 3.  We scale back to obtain \\( e^{x} \\). From step 1, we have
*
*     ```tex
*     e^{x} = 2^k e^{r}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* e^\infty &= \infty \\
* e^{-\infty} &= 0 \\
* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
* \end{align*}
* ```
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   For an IEEE double,
*
*     -   if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
*     -   if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
*
* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 4.0 );
* // returns ~54.5982
*
* @example
* var v = exp( -9.0 );
* // returns ~1.234e-4
*
* @example
* var v = exp( 0.0 );
* // returns 1.0
*
* @example
* var v = exp( NaN );
* // returns NaN
*/
function exp( x ) {
	var hi;
	var lo;
	var k;

	if ( _$isnan_370( x ) || x === _$FLOAT64_PINF_238 ) {
		return x;
	}
	if ( x === _$FLOAT64_NINF_235 ) {
		return 0.0;
	}
	if ( x > OVERFLOW ) {
		return _$FLOAT64_PINF_238;
	}
	if ( x < UNDERFLOW ) {
		return 0.0;
	}
	if (
		x > NEG_NEARZERO &&
		x < NEARZERO
	) {
		return 1.0 + x;
	}
	// Reduce and compute `r = hi - lo` for extra precision.
	if ( x < 0.0 ) {
		k = _$trunc_629( (LOG2_E*x) - 0.5 );
	} else {
		k = _$trunc_629( (LOG2_E*x) + 0.5 );
	}
	hi = x - (k*__LN2_HI_510);
	lo = k * __LN2_LO_510;

	return _$expmulti_511( hi, lo, k );
}


// EXPORTS //

var _$exp_510 = exp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural exponential function.
*
* @module @stdlib/math/base/special/exp
*
* @example
* var exp = require( '@stdlib/math/base/special/exp' );
*
* var v = exp( 4.0 );
* // returns ~54.5982
*
* v = exp( -9.0 );
* // returns ~1.234e-4
*
* v = exp( 0.0 );
* // returns 1.0
*
* v = exp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$exp_510 = require( './exp.js' ); */;


// EXPORTS //

var _$exp_512 = _$exp_510;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_531( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333334822;
	}
	return 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_531 = __evalpoly_531;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$SQRT_TWO_PI_243 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$evalpoly_531 = require( './polyval_s.js' ); */;


// VARIABLES //

var MAX_STIRLING = 143.01608;


// MAIN //

/**
* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamma( x ) {
	var w;
	var y;
	var v;

	w = 1.0 / x;
	w = 1.0 + ( w * _$evalpoly_531( w ) );
	y = _$exp_512( x );

	// Check `x` to avoid `pow()` overflow...
	if ( x > MAX_STIRLING ) {
		v = _$pow_579( x, ( 0.5*x ) - 0.25 );
		y = v * (v/y);
	} else {
		y = _$pow_579( x, x-0.5 ) / y;
	}
	return _$SQRT_TWO_PI_243 * y * w;
}


// EXPORTS //

var _$gamma_534 = gamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The Euler-Mascheroni constant.
*
* @module @stdlib/constants/math/float64-eulergamma
* @type {number}
*
* @example
* var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
* // returns 0.5772156649015329
*/


// MAIN //

/**
* The Euler-Mascheroni constant.
*
* @constant
* @type {number}
* @default 0.5772156649015329
* @see [OEIS]{@link http://oeis.org/A001620}
* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
*/
var GAMMA = 0.577215664901532860606512090082402431042;


// EXPORTS //

var _$GAMMA_220 = GAMMA;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$GAMMA_220 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Evaluates the gamma function using a small-value approximation.
*
* @private
* @param {number} x - input value
* @param {number} z - scale factor
* @returns {number} function value
*/
function __gamma_533( x, z ) {
	return z / ( (1.0+( _$GAMMA_220*x )) * x );
}


// EXPORTS //

var _$gamma_533 = __gamma_533;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len
		s2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_532 = evalrational;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isNegativeZero_374 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$sin_615 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$gamma_534 = require( './stirling_approximation.js' ); */;
/* removed: var _$gamma_533 = require( './small_approximation.js' ); */;
/* removed: var _$evalrational_532 = require( './rational_pq.js' ); */;


// MAIN //

/**
* Evaluates the gamma function.
*
* ## Method
*
* 1.  Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
* 2.  Large negative arguments are made positive using a reflection formula.
* 3.  Large arguments are handled by Stirling's formula.
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain    | # trials | peak    | rms     |
*     |:----------:|:---------:|:--------:|:-------:|:-------:|
*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
*
* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gamma( 4.0 );
* // returns 6.0
*
* @example
* var v = gamma( -1.5 );
* // returns ~2.363
*
* @example
* var v = gamma( -0.5 );
* // returns ~-3.545
*
* @example
* var v = gamma( 0.5 );
* // returns ~1.772
*
* @example
* var v = gamma( 0.0 );
* // returns Infinity
*
* @example
* var v = gamma( -0.0 );
* // returns -Infinity
*
* @example
* var v = gamma( NaN );
* // returns NaN
*/
function __gamma_529( x ) {
	var sign;
	var q;
	var p;
	var z;
	if (
		(_$isInteger_368( x ) && x < 0) ||
		x === _$FLOAT64_NINF_235 ||
		_$isnan_370( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( _$isNegativeZero_374( x ) ) {
			return _$FLOAT64_NINF_235;
		}
		return _$FLOAT64_PINF_238;
	}
	if ( x > 171.61447887182298 ) {
		return _$FLOAT64_PINF_238;
	}
	if ( x < -170.5674972726612 ) {
		return 0.0;
	}
	q = _$abs_390( x );
	if ( q > 33.0 ) {
		if ( x >= 0.0 ) {
			return _$gamma_534( x );
		}
		p = _$floor_523( q );

		// Check whether `x` is even...
		if ( (p&1) === 0 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		z = q - p;
		if ( z > 0.5 ) {
			p += 1.0;
			z = q - p;
		}
		z = q * _$sin_615( _$PI_237 * z );
		return sign * _$PI_237 / ( _$abs_390(z)*_$gamma_534(q) );
	}
	// Reduce `x`...
	z = 1.0;
	while ( x >= 3.0 ) {
		x -= 1.0;
		z *= x;
	}
	while ( x < 0.0 ) {
		if ( x > -1.0e-9 ) {
			return _$gamma_533( x, z );
		}
		z /= x;
		x += 1.0;
	}
	while ( x < 2.0 ) {
		if ( x < 1.0e-9 ) {
			return _$gamma_533( x, z );
		}
		z /= x;
		x += 1.0;
	}
	if ( x === 2.0 ) {
		return z;
	}
	x -= 2.0;
	return z * _$evalrational_532( x );
}


// EXPORTS //

var _$gamma_529 = __gamma_529;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the gamma function.
*
* @module @stdlib/math/base/special/gamma
*
* @example
* var gamma = require( '@stdlib/math/base/special/gamma' );
*
* var v = gamma( 4.0 );
* // returns 6.0
*
* v = gamma( -1.5 );
* // returns ~2.363
*
* v = gamma( -0.5 );
* // returns ~-3.545
*
* v = gamma( 0.5 );
* // returns ~1.772
*
* v = gamma( 0.0 );
* // returns Infinity
*
* v = gamma( -0.0 );
* // returns -Infinity
*
* v = gamma( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gamma_529 = require( './gamma.js' ); */;


// EXPORTS //

var _$gamma_530 = _$gamma_529;

var _$factorials_518=[
	1,
	1,
	2,
	6,
	24,
	120,
	720,
	5040,
	40320,
	362880.0,
	3628800.0,
	39916800.0,
	479001600.0,
	6227020800.0,
	87178291200.0,
	1307674368000.0,
	20922789888000.0,
	355687428096000.0,
	6402373705728000.0,
	121645100408832000.0,
	0.243290200817664e19,
	0.5109094217170944e20,
	0.112400072777760768e22,
	0.2585201673888497664e23,
	0.62044840173323943936e24,
	0.15511210043330985984e26,
	0.403291461126605635584e27,
	0.10888869450418352160768e29,
	0.304888344611713860501504e30,
	0.8841761993739701954543616e31,
	0.26525285981219105863630848e33,
	0.822283865417792281772556288e34,
	0.26313083693369353016721801216e36,
	0.868331761881188649551819440128e37,
	0.29523279903960414084761860964352e39,
	0.103331479663861449296666513375232e41,
	0.3719933267899012174679994481508352e42,
	0.137637530912263450463159795815809024e44,
	0.5230226174666011117600072241000742912e45,
	0.203978820811974433586402817399028973568e47,
	0.815915283247897734345611269596115894272e48,
	0.3345252661316380710817006205344075166515e50,
	0.1405006117752879898543142606244511569936e52,
	0.6041526306337383563735513206851399750726e53,
	0.265827157478844876804362581101461589032e55,
	0.1196222208654801945619631614956577150644e57,
	0.5502622159812088949850305428800254892962e58,
	0.2586232415111681806429643551536119799692e60,
	0.1241391559253607267086228904737337503852e62,
	0.6082818640342675608722521633212953768876e63,
	0.3041409320171337804361260816606476884438e65,
	0.1551118753287382280224243016469303211063e67,
	0.8065817517094387857166063685640376697529e68,
	0.427488328406002556429801375338939964969e70,
	0.2308436973392413804720927426830275810833e72,
	0.1269640335365827592596510084756651695958e74,
	0.7109985878048634518540456474637249497365e75,
	0.4052691950487721675568060190543232213498e77,
	0.2350561331282878571829474910515074683829e79,
	0.1386831185456898357379390197203894063459e81,
	0.8320987112741390144276341183223364380754e82,
	0.507580213877224798800856812176625227226e84,
	0.3146997326038793752565312235495076408801e86,
	0.1982608315404440064116146708361898137545e88,
	0.1268869321858841641034333893351614808029e90,
	0.8247650592082470666723170306785496252186e91,
	0.5443449390774430640037292402478427526443e93,
	0.3647111091818868528824985909660546442717e95,
	0.2480035542436830599600990418569171581047e97,
	0.1711224524281413113724683388812728390923e99,
	0.1197857166996989179607278372168909873646e101,
	0.8504785885678623175211676442399260102886e102,
	0.6123445837688608686152407038527467274078e104,
	0.4470115461512684340891257138125051110077e106,
	0.3307885441519386412259530282212537821457e108,
	0.2480914081139539809194647711659403366093e110,
	0.188549470166605025498793226086114655823e112,
	0.1451830920282858696340707840863082849837e114,
	0.1132428117820629783145752115873204622873e116,
	0.8946182130782975286851441715398316520698e117,
	0.7156945704626380229481153372318653216558e119,
	0.5797126020747367985879734231578109105412e121,
	0.4753643337012841748421382069894049466438e123,
	0.3945523969720658651189747118012061057144e125,
	0.3314240134565353266999387579130131288001e127,
	0.2817104114380550276949479442260611594801e129,
	0.2422709538367273238176552320344125971528e131,
	0.210775729837952771721360051869938959523e133,
	0.1854826422573984391147968456455462843802e135,
	0.1650795516090846108121691926245361930984e137,
	0.1485715964481761497309522733620825737886e139,
	0.1352001527678402962551665687594951421476e141,
	0.1243841405464130725547532432587355307758e143,
	0.1156772507081641574759205162306240436215e145,
	0.1087366156656743080273652852567866010042e147,
	0.103299784882390592625997020993947270954e149,
	0.9916779348709496892095714015418938011582e150,
	0.9619275968248211985332842594956369871234e152,
	0.942689044888324774562618574305724247381e154,
	0.9332621544394415268169923885626670049072e156,
	0.9332621544394415268169923885626670049072e158,
	0.9425947759838359420851623124482936749562e160,
	0.9614466715035126609268655586972595484554e162,
	0.990290071648618040754671525458177334909e164,
	0.1029901674514562762384858386476504428305e167,
	0.1081396758240290900504101305800329649721e169,
	0.1146280563734708354534347384148349428704e171,
	0.1226520203196137939351751701038733888713e173,
	0.132464181945182897449989183712183259981e175,
	0.1443859583202493582204882102462797533793e177,
	0.1588245541522742940425370312709077287172e179,
	0.1762952551090244663872161047107075788761e181,
	0.1974506857221074023536820372759924883413e183,
	0.2231192748659813646596607021218715118256e185,
	0.2543559733472187557120132004189335234812e187,
	0.2925093693493015690688151804817735520034e189,
	0.339310868445189820119825609358857320324e191,
	0.396993716080872089540195962949863064779e193,
	0.4684525849754290656574312362808384164393e195,
	0.5574585761207605881323431711741977155627e197,
	0.6689502913449127057588118054090372586753e199,
	0.8094298525273443739681622845449350829971e201,
	0.9875044200833601362411579871448208012564e203,
	0.1214630436702532967576624324188129585545e206,
	0.1506141741511140879795014161993280686076e208,
	0.1882677176888926099743767702491600857595e210,
	0.237217324288004688567714730513941708057e212,
	0.3012660018457659544809977077527059692324e214,
	0.3856204823625804217356770659234636406175e216,
	0.4974504222477287440390234150412680963966e218,
	0.6466855489220473672507304395536485253155e220,
	0.8471580690878820510984568758152795681634e222,
	0.1118248651196004307449963076076169029976e225,
	0.1487270706090685728908450891181304809868e227,
	0.1992942746161518876737324194182948445223e229,
	0.269047270731805048359538766214698040105e231,
	0.3659042881952548657689727220519893345429e233,
	0.5012888748274991661034926292112253883237e235,
	0.6917786472619488492228198283114910358867e237,
	0.9615723196941089004197195613529725398826e239,
	0.1346201247571752460587607385894161555836e242,
	0.1898143759076170969428526414110767793728e244,
	0.2695364137888162776588507508037290267094e246,
	0.3854370717180072770521565736493325081944e248,
	0.5550293832739304789551054660550388118e250,
	0.80479260574719919448490292577980627711e252,
	0.1174997204390910823947958271638517164581e255,
	0.1727245890454638911203498659308620231933e257,
	0.2556323917872865588581178015776757943262e259,
	0.380892263763056972698595524350736933546e261,
	0.571338395644585459047893286526105400319e263,
	0.8627209774233240431623188626544191544816e265,
	0.1311335885683452545606724671234717114812e268,
	0.2006343905095682394778288746989117185662e270,
	0.308976961384735088795856467036324046592e272,
	0.4789142901463393876335775239063022722176e274,
	0.7471062926282894447083809372938315446595e276,
	0.1172956879426414428192158071551315525115e279,
	0.1853271869493734796543609753051078529682e281,
	0.2946702272495038326504339507351214862195e283,
	0.4714723635992061322406943211761943779512e285,
	0.7590705053947218729075178570936729485014e287,
	0.1229694218739449434110178928491750176572e290,
	0.2004401576545302577599591653441552787813e292,
	0.3287218585534296227263330311644146572013e294,
	0.5423910666131588774984495014212841843822e296,
	0.9003691705778437366474261723593317460744e298,
	0.1503616514864999040201201707840084015944e301,
	0.2526075744973198387538018869171341146786e303,
	0.4269068009004705274939251888899566538069e305,
	0.7257415615307998967396728211129263114717e307
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$gamma_530 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$factorials_518 = require( './factorials.json' ); */;


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Evaluates the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} factorial
*
* @example
* var v = factorial( 3.0 );
* // returns 6.0
*
* @example
* var v = factorial( -1.5 );
* // returns ~-3.545
*
* @example
* var v = factorial( -0.5 );
* // returns ~1.772
*
* @example
* var v = factorial( 0.5 );
* // returns ~0.886
*
* @example
* var v = factorial( -10.0 );
* // returns NaN
*
* @example
* var v = factorial( 171.0 );
* // returns Infinity
*
* @example
* var v = factorial( NaN );
* // returns NaN
*/
function factorial( x ) {
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( _$isInteger_368( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_FACTORIAL ) {
			return _$factorials_518[ x ];
		}
		return _$FLOAT64_PINF_238;
	}
	return _$gamma_530( x + 1.0 );
}


// EXPORTS //

var _$factorial_517 = factorial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the factorial function.
*
* @module @stdlib/math/base/special/factorial
*
* @example
* var factorial = require( '@stdlib/math/base/special/factorial' );
*
* var v = factorial( 3.0 );
* // returns 6.0
*
* v = factorial( -1.5 );
* // returns ~-3.545
*
* v = factorial( -0.5 );
* // returns ~1.772
*
* v = factorial( 0.5 );
* // returns ~0.886
*
* v = factorial( -10.0 );
* // returns NaN
*
* v = factorial( 171.0 );
* // returns Infinity
*
* v = factorial( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$factorial_517 = require( './factorial.js' ); */;


// EXPORTS //

var _$factorial_519 = _$factorial_517;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_644 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_644( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_644( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_644 = __validate_644;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$factorial_519 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$validate_644 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_643 = 1e308;


// MAIN //

/**
* Returns an iterator which generates a sequence of factorials.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterFactorialsSeq();
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/
function iterFactorialsSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_643
	};
	if ( arguments.length ) {
		err = _$validate_644( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': _$factorial_519( i ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterFactorialsSeq( opts );
	}
}


// EXPORTS //

var _$iterFactorialsSeq_643 = iterFactorialsSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of factorials.
*
* @module @stdlib/math/iter/sequences/factorials
*
* @example
* var iterFactorialsSeq = require( '@stdlib/math/iter/sequences/factorials' );
*
* var iter = iterFactorialsSeq();
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/

// MODULES //

/* removed: var _$iterFactorialsSeq_643 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_642 = _$iterFactorialsSeq_643;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_647 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_647( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_647( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
		if ( options.iter > 79 ) {
			return new RangeError( 'invalid option. `iter` option must be less than or equal to `79`. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_647 = __validate_647;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_647 = require( './validate.js' ); */;


// VARIABLES //

var F0 = 0;
var F1 = 1;


// MAIN //

/**
* Returns an iterator which generates a Fibonacci sequence.
*
* ## Notes
*
* -   The returned iterator can only generate the first `79` Fibonacci numbers, as larger Fibonacci numbers cannot be safely represented in double-precision floating-point format.
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=79] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} `iter` option must be less than or equal to `79`
* @returns {Iterator} iterator
*
* @example
* var iter = iterFibonacciSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 1
*
* // ...
*/
function iterFibonacciSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var f1;
	var f2;
	var f;
	var i;

	opts = {
		'iter': 79
	};
	if ( arguments.length ) {
		err = _$validate_647( opts, options );
		if ( err ) {
			throw err;
		}
	}
	f1 = F0;
	f2 = F1;
	f = 0;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i === 1 ) {
			f = F0;
		} else if ( i === 2 ) {
			f = F1;
		} else {
			f = f1 + f2;
			f1 = f2;
			f2 = f;
		}
		return {
			'value': f,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterFibonacciSeq( opts );
	}
}


// EXPORTS //

var _$iterFibonacciSeq_646 = iterFibonacciSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Fibonacci sequence.
*
* @module @stdlib/math/iter/sequences/fibonacci
*
* @example
* var iterFibonacciSeq = require( '@stdlib/math/iter/sequences/fibonacci' );
*
* var iter = iterFibonacciSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 1
*
* // ...
*/

// MODULES //

/* removed: var _$iterFibonacciSeq_646 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_645 = _$iterFibonacciSeq_646;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_650 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_650( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_650( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_650 = __validate_650;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_650 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_649 = _$FLOAT64_MAX_SAFE_INTEGER_231 * 2;


// MAIN //

/**
* Returns an iterator which generates an interleaved integer sequence.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=18014398509481984] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns -1
*
* // ...
*/
function iterIntegersSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var sgn;
	var i;
	var j;

	opts = {
		'iter': __MAX_ITER_649
	};
	if ( arguments.length ) {
		err = _$validate_650( opts, options );
		if ( err ) {
			throw err;
		}
	}
	sgn = -1;
	i = 0;
	j = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i === 1 ) {
			return {
				'value': 0,
				'done': false
			};
		}
		// Increment every other iteration...
		if ( sgn < 0 ) {
			j += 1;
		}
		sgn *= -1;
		return {
			'value': sgn * j,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterIntegersSeq_649 = iterIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates an interleaved integer sequence.
*
* @module @stdlib/math/iter/sequences/integers
*
* @example
* var iterIntegersSeq = require( '@stdlib/math/iter/sequences/integers' );
*
* var iter = iterIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns -1
*
* // ...
*/

// MODULES //

/* removed: var _$iterIntegersSeq_649 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_648 = _$iterIntegersSeq_649;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_653 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_653( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_653( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
		if ( options.iter > 77 ) {
			return new RangeError( 'invalid option. `iter` option must be less than or equal to `77`. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_653 = __validate_653;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_653 = require( './validate.js' ); */;


// VARIABLES //

var L0 = 2;
var L1 = 1;


// MAIN //

/**
* Returns an iterator which generates a Lucas sequence.
*
* ## Notes
*
* -   The returned iterator can only generate the first `77` Lucas numbers, as larger Lucas numbers cannot be safely represented in double-precision floating-point format.
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=77] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} `iter` option must be less than or equal to `77`
* @returns {Iterator} iterator
*
* @example
* var iter = iterLucasSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function iterLucasSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var l1;
	var l2;
	var l;
	var i;

	opts = {
		'iter': 77
	};
	if ( arguments.length ) {
		err = _$validate_653( opts, options );
		if ( err ) {
			throw err;
		}
	}
	l1 = L0;
	l2 = L1;
	l = 0;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i === 1 ) {
			l = L0;
		} else if ( i === 2 ) {
			l = L1;
		} else {
			l = l1 + l2;
			l1 = l2;
			l2 = l;
		}
		return {
			'value': l,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterLucasSeq( opts );
	}
}


// EXPORTS //

var _$iterLucasSeq_652 = iterLucasSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Lucas sequence.
*
* @module @stdlib/math/iter/sequences/lucas
*
* @example
* var iterLucasSeq = require( '@stdlib/math/iter/sequences/lucas' );
*
* var iter = iterLucasSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterLucasSeq_652 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_651 = _$iterLucasSeq_652;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_656 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_656( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_656( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
		if ( options.iter > 79 ) {
			return new RangeError( 'invalid option. `iter` option must be less than or equal to `79`. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_656 = __validate_656;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_656 = require( './validate.js' ); */;


// VARIABLES //

var __F0_655 = 0;
var __F1_655 = 1;


// MAIN //

/**
* Returns an iterator which generates a negaFibonacci sequence.
*
* ## Notes
*
* -   The returned iterator can only generate the first `79` negaFibonacci numbers, as larger negaFibonacci numbers cannot be safely represented in double-precision floating-point format.
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=79] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} `iter` option must be less than or equal to `79`
* @returns {Iterator} iterator
*
* @example
* var iter = iterNegaFibonacciSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns -1
*
* // ...
*/
function iterNegaFibonacciSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var f1;
	var f2;
	var f;
	var i;

	opts = {
		'iter': 79
	};
	if ( arguments.length ) {
		err = _$validate_656( opts, options );
		if ( err ) {
			throw err;
		}
	}
	f1 = __F0_655;
	f2 = __F1_655;
	f = 0;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i === 1 ) {
			f = __F0_655;
		} else if ( i === 2 ) {
			f = __F1_655;
		} else {
			f = f1 - f2;
			f1 = f2;
			f2 = f;
		}
		return {
			'value': f,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNegaFibonacciSeq( opts );
	}
}


// EXPORTS //

var _$iterNegaFibonacciSeq_655 = iterNegaFibonacciSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a negaFibonacci sequence.
*
* @module @stdlib/math/iter/sequences/negafibonacci
*
* @example
* var iterNegaFibonacciSeq = require( '@stdlib/math/iter/sequences/negafibonacci' );
*
* var iter = iterNegaFibonacciSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns -1
*
* // ...
*/

// MODULES //

/* removed: var _$iterNegaFibonacciSeq_655 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_654 = _$iterNegaFibonacciSeq_655;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_659 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_659( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_659( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
		if ( options.iter > 77 ) {
			return new RangeError( 'invalid option. `iter` option must be less than or equal to `77`. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_659 = __validate_659;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_659 = require( './validate.js' ); */;


// VARIABLES //

var __L0_658 = 2;
var __L1_658 = -1;


// MAIN //

/**
* Returns an iterator which generates a negaLucas sequence.
*
* ## Notes
*
* -   The returned iterator can only generate the first `77` negaLucas numbers, as larger negaLucas numbers cannot be safely represented in double-precision floating-point format.
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=77] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} `iter` option must be less than or equal to `77`
* @returns {Iterator} iterator
*
* @example
* var iter = iterNegaLucasSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function iterNegaLucasSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var l1;
	var l2;
	var l;
	var i;

	opts = {
		'iter': 77
	};
	if ( arguments.length ) {
		err = _$validate_659( opts, options );
		if ( err ) {
			throw err;
		}
	}
	l1 = __L0_658;
	l2 = __L1_658;
	l = 0;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i === 1 ) {
			l = __L0_658;
		} else if ( i === 2 ) {
			l = __L1_658;
		} else {
			l = l1 - l2;
			l1 = l2;
			l2 = l;
		}
		return {
			'value': l,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNegaLucasSeq( opts );
	}
}


// EXPORTS //

var _$iterNegaLucasSeq_658 = iterNegaLucasSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a negaLucas sequence.
*
* @module @stdlib/math/iter/sequences/negalucas
*
* @example
* var iterNegaLucasSeq = require( '@stdlib/math/iter/sequences/negalucas' );
*
* var iter = iterNegaLucasSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterNegaLucasSeq_658 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_657 = _$iterNegaLucasSeq_658;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_662 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_662( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_662( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_662 = __validate_662;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_662 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a negative integer sequence.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199254740991] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterNegativeIntegersSeq();
*
* var v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns -2
*
* v = iter.next().value;
* // returns -3
*
* // ...
*/
function iterNegativeIntegersSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': _$FLOAT64_MAX_SAFE_INTEGER_231
	};
	if ( arguments.length ) {
		err = _$validate_662( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': -i,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNegativeIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterNegativeIntegersSeq_661 = iterNegativeIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a negative integer sequence.
*
* @module @stdlib/math/iter/sequences/negative-integers
*
* @example
* var iterNegativeIntegersSeq = require( '@stdlib/math/iter/sequences/negative-integers' );
*
* var iter = iterNegativeIntegersSeq();
*
* var v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns -2
*
* v = iter.next().value;
* // returns -3
*
* // ...
*/

// MODULES //

/* removed: var _$iterNegativeIntegersSeq_661 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_660 = _$iterNegativeIntegersSeq_661;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_563( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_563 = __evalpoly_563;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_564( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_564 = __evalpoly_564;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_563 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_564 = require( './polyval_q.js' ); */;


// VARIABLES //

var __LN2_HI_562 = 6.93147180369123816490e-01; // 3FE62E42 FEE00000
var __LN2_LO_562 = 1.90821492927058770002e-10; // 3DEA39EF 35793C76
var TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000
var ONE_THIRD = 0.33333333333333333;

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_562 = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_562 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_562 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns -Infinity
*
* @example
* var v = ln( Infinity );
* // returns Infinity
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/
function ln( x ) {
	var hfsq;
	var hx;
	var t2;
	var t1;
	var k;
	var R;
	var f;
	var i;
	var j;
	var s;
	var w;
	var z;

	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_235;
	}
	if ( _$isnan_370( x ) || x < 0.0 ) {
		return NaN;
	}
	hx = _$getHighWord_828( x );
	k = 0|0; // asm type annotation
	if ( hx < __HIGH_MIN_NORMAL_EXP_562 ) {
		// Case: 0 < x < 2**-1022
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up `x`:
		x *= TWO54;
		hx = _$getHighWord_828( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( ( hx>>20 ) - _$FLOAT64_EXPONENT_BIAS_221 )|0; // asm type annotation
	hx &= __HIGH_SIGNIFICAND_MASK_562;
	i = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = _$setHighWord_837( x, hx|(i^__HIGH_BIASED_EXP_0_562) );
	k += ( i>>20 )|0; // asm type annotation
	f = x - 1.0;
	if ( (__HIGH_SIGNIFICAND_MASK_562&(2+hx)) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			if ( k === 0 ) {
				return 0.0;
			}
			return (k * __LN2_HI_562) + (k * __LN2_LO_562);
		}
		R = f * f * ( 0.5 - (ONE_THIRD*f) );
		if ( k === 0 ) {
			return f - R;
		}
		return (k * __LN2_HI_562) - ( (R-(k*__LN2_LO_562)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * _$evalpoly_563( w );
	t2 = z * _$evalpoly_564( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		if ( k === 0 ) {
			return f - ( hfsq - (s * (hfsq+R)) );
		}
		return (k * __LN2_HI_562) - ( hfsq - ((s*(hfsq+R))+(k*__LN2_LO_562)) - f );
	}
	if ( k === 0 ) {
		return f - (s*(f-R));
	}
	return (k * __LN2_HI_562) - ( ( (s*(f-R)) - (k*__LN2_LO_562) ) - f );
}


// EXPORTS //

var _$ln_562 = ln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns -Infinity
*
* v = ln( Infinity );
* // returns Infinity
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$ln_562 = require( './ln.js' ); */;


// EXPORTS //

var _$ln_561 = _$ln_562;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Golden ratio.
*
* @module @stdlib/constants/math/float64-phi
* @type {number}
*
* @example
* var PHI = require( '@stdlib/constants/math/float64-phi' );
* // returns 1.618033988749895
*/


// MAIN //

/**
* Golden ratio.
*
* @constant
* @type {number}
* @default 1.618033988749895
* @see [OEIS]{@link http://oeis.org/A001622}
* @see [Wikipedia]{@link http://en.wikipedia.org/wiki/Golden_ratio}
*/
var PHI = 1.61803398874989484820458683436563811772030917980576286213544862;


// EXPORTS //

var _$PHI_236 = PHI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$PHI_236 = require( '@stdlib/constants/math/float64-phi' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

var SQRT_5 = 2.23606797749979;
var LN_PHI = _$ln_561( _$PHI_236 );


// MAIN //

/**
* Computes the nth non-Fibonacci number.
*
* ## References
*
* -   Gould, H.W. 1965. "Non-Fibonacci Numbers." _Fibonacci Quarterly_, no. 3: 177–83. <http://www.fq.math.ca/Scanned/3-3/gould.pdf>.
* -   Farhi, Bakir. 2011. "An explicit formula generating the non-Fibonacci numbers." _arXiv_ abs/1105.1127 \[Math.NT\] (May): 1–5. <https://arxiv.org/abs/1105.1127>.
*
*
* @param {NonNegativeInteger} n - the non-Fibonacci number to compute
* @returns {NonNegativeInteger} non-Fibonacci number
*
* @example
* var v = nonfibonacci( 1 );
* // returns 4
*
* @example
* var v = nonfibonacci( 2 );
* // returns 6
*
* @example
* var v = nonfibonacci( 3 );
* // returns 7
*
* @example
* var v = nonfibonacci( NaN );
* // returns NaN
*
* @example
* var v = nonfibonacci( 3.14 );
* // returns NaN
*
* @example
* var v = nonfibonacci( -1 );
* // returns NaN
*/
function nonfibonacci( n ) {
	var a;
	var b;
	if (
		_$isnan_370( n ) ||
		_$isInteger_368( n ) === false ||
		n < 1 ||
		n === _$FLOAT64_PINF_238
	) {
		return NaN;
	}
	n += 1;
	a = _$ln_561( n * SQRT_5 ) / LN_PHI;
	b = _$ln_561( (SQRT_5 * (n+a)) - 5.0 + (3.0/n) ) / LN_PHI;
	return _$floor_523( n + b - 2.0 );
}


// EXPORTS //

var _$nonfibonacci_578 = nonfibonacci;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth non-Fibonacci number.
*
* @module @stdlib/math/base/special/nonfibonacci
*
* @example
* var nonfibonacci = require( '@stdlib/math/base/special/nonfibonacci' );
*
* var v = nonfibonacci( 1 );
* // returns 4
*
* v = nonfibonacci( 2 );
* // returns 6
*
* v = nonfibonacci( 3 );
* // returns 7
*/

// MODULES //

/* removed: var _$nonfibonacci_578 = require( './main.js' ); */;


// EXPORTS //

var _$nonfibonacci_577 = _$nonfibonacci_578;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_665 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_665( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_665( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_665 = __validate_665;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$nonfibonacci_577 = require( '@stdlib/math/base/special/nonfibonacci' ); */;
/* removed: var _$validate_665 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a non-Fibonacci integer sequence.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterNonFibonacciSeq();
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 6
*
* v = iter.next().value;
* // returns 7
*
* // ...
*/
function iterNonFibonacciSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_665( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': _$nonfibonacci_577( i ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNonFibonacciSeq( opts );
	}
}


// EXPORTS //

var _$iterNonFibonacciSeq_664 = iterNonFibonacciSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a non-Fibonacci integer sequence.
*
* @module @stdlib/math/iter/sequences/nonfibonacci
*
* @example
* var iterNonFibonacciSeq = require( '@stdlib/math/iter/sequences/nonfibonacci' );
*
* var iter = iterNonFibonacciSeq();
*
* var v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 6
*
* v = iter.next().value;
* // returns 7
*
* // ...
*/

// MODULES //

/* removed: var _$iterNonFibonacciSeq_664 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_663 = _$iterNonFibonacciSeq_664;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_668 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_668( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_668( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_668 = __validate_668;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_668 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_667 = ((_$FLOAT64_MAX_SAFE_INTEGER_231+1) / 2) + 1;


// MAIN //

/**
* Returns an iterator which generates a sequence of nonnegative even integers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=4503599627370497] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterNonNegativeEvenIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/
function iterNonNegativeEvenIntegersSeq( options ) { // eslint-disable-line id-length
	var opts;
	var iter;
	var FLG;
	var err;
	var i;
	var j;

	opts = {
		'iter': __MAX_ITER_667
	};
	if ( arguments.length ) {
		err = _$validate_668( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;
	j = -2;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		j += 2;
		return {
			'value': j,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNonNegativeEvenIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterNonNegativeEvenIntegersSeq_667 = iterNonNegativeEvenIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of nonnegative even integers.
*
* @module @stdlib/math/iter/sequences/nonnegative-even-integers
*
* @example
* var iterNonNegativeEvenIntegersSeq = require( '@stdlib/math/iter/sequences/nonnegative-even-integers' );
*
* var iter = iterNonNegativeEvenIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/

// MODULES //

/* removed: var _$iterNonNegativeEvenIntegersSeq_667 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_666 = _$iterNonNegativeEvenIntegersSeq_667;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_671 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_671( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_671( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_671 = __validate_671;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_671 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_670 = _$FLOAT64_MAX_SAFE_INTEGER_231 + 1;


// MAIN //

/**
* Returns an iterator which generates a nonnegative integer sequence.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199254740992] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterNonNegativeIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/
function iterNonNegativeIntegersSeq( options ) { // eslint-disable-line id-length
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_670
	};
	if ( arguments.length ) {
		err = _$validate_671( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': i,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNonNegativeIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterNonNegativeIntegersSeq_670 = iterNonNegativeIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a nonnegative integer sequence.
*
* @module @stdlib/math/iter/sequences/nonnegative-integers
*
* @example
* var iterNonNegativeIntegersSeq = require( '@stdlib/math/iter/sequences/nonnegative-integers' );
*
* var iter = iterNonNegativeIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* // ...
*/

// MODULES //

/* removed: var _$iterNonNegativeIntegersSeq_670 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_669 = _$iterNonNegativeIntegersSeq_670;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_674 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_674( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_674( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_674 = __validate_674;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_674 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_673 = _$FLOAT64_MAX_SAFE_INTEGER_231 + 1;


// MAIN //

/**
* Returns an iterator which generates a nonpositive integer sequence.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199254740992] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterNonPositiveIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns -2
*
* // ...
*/
function iterNonPositiveIntegersSeq( options ) { // eslint-disable-line id-length
	var opts;
	var iter;
	var FLG;
	var err;
	var i;
	var j;

	opts = {
		'iter': __MAX_ITER_673
	};
	if ( arguments.length ) {
		err = _$validate_674( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;
	j = 1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		j -= 1;
		return {
			'value': j,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNonPositiveIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterNonPositiveIntegersSeq_673 = iterNonPositiveIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a nonpositive integer sequence.
*
* @module @stdlib/math/iter/sequences/nonpositive-integers
*
* @example
* var iterNonPositiveIntegersSeq = require( '@stdlib/math/iter/sequences/nonpositive-integers' );
*
* var iter = iterNonPositiveIntegersSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns -2
*
* // ...
*/

// MODULES //

/* removed: var _$iterNonPositiveIntegersSeq_673 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_672 = _$iterNonPositiveIntegersSeq_673;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_677 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_677( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_677( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_677 = __validate_677;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$validate_677 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_676 = 9007199349647256; // FLOAT64_MAX_SAFE_INTEGER + floor(sqrt(FLOAT64_MAX_SAFE_INTEGER))


// MAIN //

/**
* Returns an iterator which generates a sequence of nonsquares.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199349647256] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterNonSquaresSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 5
*
* // ...
*/
function iterNonSquaresSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_676
	};
	if ( arguments.length ) {
		err = _$validate_677( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': i + _$floor_523( 0.5+_$sqrt_625(i) ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterNonSquaresSeq( opts );
	}
}


// EXPORTS //

var _$iterNonSquaresSeq_676 = iterNonSquaresSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of nonsquares.
*
* @module @stdlib/math/iter/sequences/nonsquares
*
* @example
* var iterNonSquaresSeq = require( '@stdlib/math/iter/sequences/nonsquares' );
*
* var iter = iterNonSquaresSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 5
*
* // ...
*/

// MODULES //

/* removed: var _$iterNonSquaresSeq_676 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_675 = _$iterNonSquaresSeq_676;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_680 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_680( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_680( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_680 = __validate_680;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_680 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates an interleaved sequence of odd integers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199254740992] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterOddIntegersSeq();
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function iterOddIntegersSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var sgn;
	var i;
	var j;

	opts = {
		'iter': _$FLOAT64_MAX_SAFE_INTEGER_231
	};
	if ( arguments.length ) {
		err = _$validate_680( opts, options );
		if ( err ) {
			throw err;
		}
	}
	sgn = -1;
	i = 0;
	j = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		// Increment every other iteration...
		if ( sgn < 0 ) {
			j += 2;
		}
		sgn *= -1;
		return {
			'value': sgn * j,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterOddIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterOddIntegersSeq_679 = iterOddIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates an interleaved sequence of odd integers.
*
* @module @stdlib/math/iter/sequences/odd-integers
*
* @example
* var iterOddIntegersSeq = require( '@stdlib/math/iter/sequences/odd-integers' );
*
* var iter = iterOddIntegersSeq();
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns -1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterOddIntegersSeq_679 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_678 = _$iterOddIntegersSeq_679;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_683 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_683( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_683( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_683 = __validate_683;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_683 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_682 = (_$FLOAT64_MAX_SAFE_INTEGER_231+1) / 2;


// MAIN //

/**
* Returns an iterator which generates a sequence of positive even integers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=4503599627370496] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterPositiveEvenIntegersSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 6
*
* // ...
*/
function iterPositiveEvenIntegersSeq( options ) { // eslint-disable-line id-length
	var opts;
	var iter;
	var FLG;
	var err;
	var i;
	var j;

	opts = {
		'iter': __MAX_ITER_682
	};
	if ( arguments.length ) {
		err = _$validate_683( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;
	j = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		j += 2;
		return {
			'value': j,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterPositiveEvenIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterPositiveEvenIntegersSeq_682 = iterPositiveEvenIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of positive even integers.
*
* @module @stdlib/math/iter/sequences/positive-even-integers
*
* @example
* var iterPositiveEvenIntegersSeq = require( '@stdlib/math/iter/sequences/positive-even-integers' );
*
* var iter = iterPositiveEvenIntegersSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 4
*
* v = iter.next().value;
* // returns 6
*
* // ...
*/

// MODULES //

/* removed: var _$iterPositiveEvenIntegersSeq_682 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_681 = _$iterPositiveEvenIntegersSeq_682;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_686 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_686( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_686( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_686 = __validate_686;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$validate_686 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a positive integer sequence.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=9007199254740991] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterPositiveIntegersSeq();
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function iterPositiveIntegersSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': _$FLOAT64_MAX_SAFE_INTEGER_231
	};
	if ( arguments.length ) {
		err = _$validate_686( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': i,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterPositiveIntegersSeq( opts );
	}
}


// EXPORTS //

var _$iterPositiveIntegersSeq_685 = iterPositiveIntegersSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a positive integer sequence.
*
* @module @stdlib/math/iter/sequences/positive-integers
*
* @example
* var iterPositiveIntegersSeq = require( '@stdlib/math/iter/sequences/positive-integers' );
*
* var iter = iterPositiveIntegersSeq();
*
* var v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterPositiveIntegersSeq_685 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_684 = _$iterPositiveIntegersSeq_685;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_689 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_689( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_689( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_689 = __validate_689;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$isPrime_384 = require( '@stdlib/math/base/assert/is-prime' ); */;
/* removed: var _$validate_689 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_688 = 245181918813464; // floor(FLOAT64_MAX_SAFE_INTEGER/ln(FLOAT64_MAX_SAFE_INTEGER)) => see https://en.wikipedia.org/wiki/Prime_number_theorem


// MAIN //

/**
* Returns an iterator which generates a sequence of prime numbers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=245181918813464] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterPrimesSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 5
*
* // ...
*/
function iterPrimesSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var n;
	var i;

	opts = {
		'iter': __MAX_ITER_688
	};
	if ( arguments.length ) {
		err = _$validate_689( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = 0;
	n = 1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		if ( i < 2 ) {
			return {
				'value': 2,
				'done': false
			};
		}
		n += 2;
		while ( _$isPrime_384( n ) === false ) {
			n += 2;
		}
		return {
			'value': n,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterPrimesSeq( opts );
	}
}


// EXPORTS //

var _$iterPrimesSeq_688 = iterPrimesSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of prime numbers.
*
* @module @stdlib/math/iter/sequences/primes
*
* @example
* var iterPrimesSeq = require( '@stdlib/math/iter/sequences/primes' );
*
* var iter = iterPrimesSeq();
*
* var v = iter.next().value;
* // returns 2
*
* v = iter.next().value;
* // returns 3
*
* v = iter.next().value;
* // returns 5
*
* // ...
*/

// MODULES //

/* removed: var _$iterPrimesSeq_688 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_687 = _$iterPrimesSeq_688;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_692 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_692( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_692( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_692 = __validate_692;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_692 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_691 = 11585; // sqrt(floor(sqrt(FLOAT64_MAX_SAFE_INTEGER*2)))


// MAIN //

/**
* Returns an iterator which generates a sequence of squared triangular numbers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=11585] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterSquaredTriangularSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 9
*
* // ...
*/
function iterSquaredTriangularSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_691
	};
	if ( arguments.length ) {
		err = _$validate_692( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var x;
		i += 1;
		if ( FLG || i >= opts.iter ) {
			return {
				'done': true
			};
		}
		x = (i/2.0)*(i+1);
		return {
			'value': x*x,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterSquaredTriangularSeq( opts );
	}
}


// EXPORTS //

var _$iterSquaredTriangularSeq_691 = iterSquaredTriangularSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of squared triangular numbers.
*
* @module @stdlib/math/iter/sequences/squared-triangular
*
* @example
* var iterSquaredTriangularSeq = require( '@stdlib/math/iter/sequences/squared-triangular' );
*
* var iter = iterSquaredTriangularSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 9
*
* // ...
*/

// MODULES //

/* removed: var _$iterSquaredTriangularSeq_691 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_690 = _$iterSquaredTriangularSeq_691;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_695 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_695( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_695( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_695 = __validate_695;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_695 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_694 = 94906265; // floor(sqrt(FLOAT64_MAX_SAFE_INTEGER))


// MAIN //

/**
* Returns an iterator which generates a sequence of squares.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=94906265] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterSquaresSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/
function iterSquaresSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_694
	};
	if ( arguments.length ) {
		err = _$validate_695( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': i * i,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterSquaresSeq( opts );
	}
}


// EXPORTS //

var _$iterSquaresSeq_694 = iterSquaresSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of squares.
*
* @module @stdlib/math/iter/sequences/squares
*
* @example
* var iterSquaresSeq = require( '@stdlib/math/iter/sequences/squares' );
*
* var iter = iterSquaresSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 4
*
* // ...
*/

// MODULES //

/* removed: var _$iterSquaresSeq_694 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_693 = _$iterSquaresSeq_694;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNonNegativeInteger_698 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 50
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_698( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_698( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_698 = __validate_698;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_698 = require( './validate.js' ); */;


// VARIABLES //

var __MAX_ITER_697 = 134217727; // floor(sqrt(FLOAT64_MAX_SAFE_INTEGER*2))


// MAIN //

/**
* Returns an iterator which generates a sequence of triangular numbers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
*
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.iter=134217727] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterTriangularSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/
function iterTriangularSeq( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var i;

	opts = {
		'iter': __MAX_ITER_697
	};
	if ( arguments.length ) {
		err = _$validate_698( opts, options );
		if ( err ) {
			throw err;
		}
	}
	i = -1;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i >= opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': (i/2.0)*(i+1),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterTriangularSeq( opts );
	}
}


// EXPORTS //

var _$iterTriangularSeq_697 = iterTriangularSeq;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sequence of triangular numbers.
*
* @module @stdlib/math/iter/sequences/triangular
*
* @example
* var iterTriangularSeq = require( '@stdlib/math/iter/sequences/triangular' );
*
* var iter = iterTriangularSeq();
*
* var v = iter.next().value;
* // returns 0
*
* v = iter.next().value;
* // returns 1
*
* v = iter.next().value;
* // returns 3
*
* // ...
*/

// MODULES //

/* removed: var _$iterTriangularSeq_697 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_696 = _$iterTriangularSeq_697;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'invalid': NaN
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_813( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'invalid' ) ) {
		opts.invalid = options.invalid;
	}
	return null;
}


// EXPORTS //

var _$validate_813 = __validate_813;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isNumber_812 = _$isNumber_162.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_813 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which invokes a unary function accepting a single numeric argument for each iterated value.
*
* ## Notes
*
* -   When invoked, the input function is provided one argument:
*
*     -   `value`: iterated value
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @param {Function} fcn - function to invoke
* @param {Options} [options] - options
* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var iter = iterMap( randu(), sin );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterMap_812( iterator, fcn, options ) {
	var opts;
	var iter;
	var err;
	var FLG;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `' + iterator + '`.' );
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a function. Value: `' + fcn + '`.' );
	}
	opts = {
		'invalid': NaN
	};
	if ( arguments.length > 2 ) {
		err = _$validate_813( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			FLG = true;
			out = {};
			if ( _$hasOwnProp_78( v, 'value' ) ) {
				out.value = ( __isNumber_812( v.value ) ) ? fcn( v.value ) : opts.invalid; // eslint-disable-line max-len
			}
			out.done = true;
			return out;
		}
		return {
			'value': ( __isNumber_812( v.value ) ) ? fcn( v.value ) : opts.invalid,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterMap_812( iterator[ _$IteratorSymbol_1345 ](), fcn, opts );
	}
}


// EXPORTS //

var _$iterMap_812 = __iterMap_812;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which invokes a unary function accepting a single numeric argument for each iterated value.
*
* @module @stdlib/math/iter/tools/map
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var sin = require( '@stdlib/math/base/special/sin' );
* var iterMap = require( '@stdlib/math/iter/tools/map' );
*
* var iter = iterMap( randu(), sin );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterMap_812 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_811 = _$iterMap_812;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the absolute value.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterAbs( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAbs( iterator ) {
	return _$iterator_811( iterator, _$abs_390 );
}


// EXPORTS //

var _$iterAbs_700 = iterAbs;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the absolute value.
*
* @module @stdlib/math/iter/special/abs
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterAbs = require( '@stdlib/math/iter/special/abs' );
*
* var iter = iterAbs( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAbs_700 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_699 = _$iterAbs_700;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the squared absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} squared absolute value
*
* @example
* var v = abs2( -1.0 );
* // returns 1.0
*
* @example
* var v = abs2( 2.0 );
* // returns 4.0
*
* @example
* var v = abs2( 0.0 );
* // returns 0.0
*
* @example
* var v = abs2( -0.0 );
* // returns 0.0
*
* @example
* var v = abs2( NaN );
* // returns NaN
*/
function abs2( x ) {
	return x * x;
}


// EXPORTS //

var _$abs2_391 = abs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the squared absolute value.
*
* @module @stdlib/math/base/special/abs2
*
* @example
* var abs2 = require( '@stdlib/math/base/special/abs2' );
*
* var v = abs2( -1.0 );
* // returns 1.0
*
* v = abs2( 2.0 );
* // returns 4.0
*
* v = abs2( 0.0 );
* // returns 0.0
*
* v = abs2( -0.0 );
* // returns 0.0
*
* v = abs2( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$abs2_391 = require( './abs2.js' ); */;


// EXPORTS //

var _$abs2_392 = _$abs2_391;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$abs2_392 = require( '@stdlib/math/base/special/abs2' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the squared absolute value.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterAbs2( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAbs2( iterator ) {
	return _$iterator_811( iterator, _$abs2_392 );
}


// EXPORTS //

var _$iterAbs2_702 = iterAbs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the squared absolute value.
*
* @module @stdlib/math/iter/special/abs2
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterAbs2 = require( '@stdlib/math/iter/special/abs2' );
*
* var iter = iterAbs2( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAbs2_702 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_701 = _$iterAbs2_702;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One fourth times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-fourth-pi
* @type {number}
*
* @example
* var FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );
* // returns 7.85398163397448309616e-1
*/


// MAIN //

/**
* One fourth times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 7.85398163397448309616e-1
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var FOURTH_PI = 7.85398163397448309616e-1;


// EXPORTS //

var _$FOURTH_PI_222 = FOURTH_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_409( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666713;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len
		s2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_409 = __evalrational_409;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_410( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.08333333333333809;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len
		s2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_410 = __evalrational_410;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FOURTH_PI_222 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;
/* removed: var _$evalrational_409 = require( './rational_pq.js' ); */;
/* removed: var _$evalrational_410 = require( './rational_rs.js' ); */;


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS


// MAIN //

/**
* Computes the arcsine of a number.
*
* ## Method
*
* -   A rational function of the form
*
*     ```tex
*     x + x^3 \frac{P(x^2)}{Q(x^2)}
*     ```
*
*     is used for \\(\|x\|\\) in the interval \\(\[0, 0.5\]\\). If \\(\|x\| > 0.5\\), it is transformed by the identity
*
*     ```tex
*     \operatorname{asin}(x) = \frac{\pi}{2} - 2 \operatorname{asin}( \sqrt{ (1-x)/2 } )
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:-------|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |
*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |
*
* @param {number} x - input value
* @returns {number} arcsine (in radians)
*
* @example
* var v = asin( 0.0 );
* // returns ~0.0
*
* @example
* var v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* @example
* var v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* @example
* var v = asin( NaN );
* // returns NaN
*/
function asin( x ) {
	var sgn;
	var zz;
	var a;
	var p;
	var z;

	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		a = x;
	} else {
		sgn = true;
		a = -x;
	}
	if ( a > 1.0 ) {
		return NaN;
	}
	if ( a > 0.625 ) {
		// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
		zz = 1.0 - a;
		p = zz * _$evalrational_410( zz );
		zz = _$sqrt_625( zz + zz );
		z = _$FOURTH_PI_222 - zz;
		zz = ( zz*p ) - MOREBITS;
		z -= zz;
		z += _$FOURTH_PI_222;
	} else {
		if ( a < 1.0e-8 ) {
			return x;
		}
		zz = a * a;
		z = zz * _$evalrational_409( zz );
		z = ( a*z ) + a;
	}
	return ( sgn ) ? -z : z;
}


// EXPORTS //

var _$asin_407 = asin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arcsine of a number.
*
* @module @stdlib/math/base/special/asin
*
* @example
* var asin = require( '@stdlib/math/base/special/asin' );
*
* var v = asin( 0.0 );
* // returns 0.0
*
* v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* v = asin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$asin_407 = require( './asin.js' ); */;


// EXPORTS //

var _$asin_408 = _$asin_407;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_408 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FOURTH_PI_222 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;


// VARIABLES //

var __MOREBITS_393 = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.


// MAIN //

/**
* Computes the arccosine of a number.
*
* ## Method
*
* -   Analytically,
*
*     ```tex
*     \operatorname{acos}(x) = \frac{\pi}{2} - \operatorname{asin}(x)
*     ```
*
*     However, if \\(\|x\|\\) is near \\(1\\), there is cancellation error in subtracting \\(\opertorname{asin}(x)\\) from \\(\pi/2\\). Hence, if \\(x < -0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = \pi - 2.0 \cdot \operatorname{asin}(\sqrt{(1+x)/2})
*     ```
*
*     or, if \\(x > +0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = 2.0 \cdot \operatorname{asin}( \sqrt{(1-x)/2} )}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:------:|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 50000    | 3.3e-17 | 8.2e-18 |
*     | IEEE       | -1, 1  | 10^6     | 2.2e-16 | 6.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acos( 1.0 );
* // returns 0.0
*
* @example
* var v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* @example
* var v = acos( NaN );
* // returns NaN
*/
function acos( x ) {
	var z;
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x > 0.5 ) {
		return 2.0 * _$asin_408( _$sqrt_625( 0.5 - (0.5*x) ) );
	}
	z = _$FOURTH_PI_222 - _$asin_408( x );
	z += __MOREBITS_393;
	z += _$FOURTH_PI_222;
	return z;
}


// EXPORTS //

var _$acos_393 = acos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arccosine of a number.
*
* @module @stdlib/math/base/special/acos
*
* @example
* var acos = require( '@stdlib/math/base/special/acos' );
*
* var v = acos( 1.0 );
* // returns 0.0
*
* v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* v = acos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acos_393 = require( './acos.js' ); */;


// EXPORTS //

var _$acos_394 = _$acos_393;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$acos_394 = require( '@stdlib/math/base/special/acos' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the arccosine.
*
* ## Notes
*
* -   The domain of arccosine is restricted to `[-1,1]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAcos( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAcos( iterator ) {
	return _$iterator_811( iterator, _$acos_394 );
}


// EXPORTS //

var _$iterAcos_704 = iterAcos;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the arccosine.
*
* @module @stdlib/math/iter/special/acos
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAcos = require( '@stdlib/math/iter/special/acos' );
*
* var iter = iterAcos( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAcos_704 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_703 = _$iterAcos_704;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_572( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_572 = __evalpoly_572;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_572 = require( './polyval_lp.js' ); */;


// VARIABLES //

// High and low words of ln(2):
var __LN2_HI_571 = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000
var __LN2_LO_571 = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76

// sqrt(2)-1:
var SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34

// sqrt(2)/2-1:
var SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866

// 2**-29:
var SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000

// 2**-54:
var __TINY_571 = 5.551115123125783e-17;

// Max integer (unsafe) => 2**53:
var __TWO53_571 = 9007199254740992;

// 2/3:
var TWO_THIRDS = 6.666666666666666666e-01;


// MAIN //

/**
* Evaluates the natural logarithm of \\(1+x\\).
*
* ## Method
*
* 1.  Argument Reduction: find \\(k\\) and \\(f\\) such that
*
*     ```tex
*     1+x = 2^k (1+f)
*     ```
*
*     where
*
*     ```tex
*     \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
*     ```
*
*     <!-- <note> -->
*
*     If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
*
*     ```tex
*     u = \operatorname{round}(1+x)
*     ```
*
*     and
*
*     ```tex
*     c = (1+x) - u
*     ```
*
*     then
*
*     ```tex
*     \ln (1+x) - \ln u \approx \frac{c}{u}
*     ```
*
*     We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
*
*     <!-- </note> -->
*
* 2.  Approximation of \\(\operatorname{log1p}(f)\\). Let
*
*     ```tex
*     s = \frac{f}{2+f}
*     ```
*
*     based on
*
*     ```tex
*     \begin{align*}
*     \ln 1+f &= \ln (1+s) - \ln (1-s) \\
*             &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
*             &= 2s + sR \\
*     \end{align*}
*     ```
*
*     We use a special Reme algorithm on \\(\[0,0.1716\]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
*
*     ```tex
*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
*     ```
*
*     and
*
*     ```tex
*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
*
*     <!-- </note> -->
*
*     Note that
*
*     ```tex
*     \begin{align*}
*     2s &= f - sf \\
*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
*     \end{align*}
*     ```
*
*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
*
*     ```tex
*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
*     ```
*
* 3.  Finally,
*
*     ```tex
*     \begin{align*}
*     \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
*     &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
*     \end{align*}
*     ```
*
*     Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
*
*     ```tex
*     \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
*     ```
*
*     where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
*
*
* ## Special Cases
*
* -   \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
* -   \\(\operatorname{log1p}(+\infty) = +\infty\\)
* -   \\(\operatorname{log1p}(-1) = -\infty\\) with signal
* -   \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
*
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
*
* -   Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
*
*     ```javascript
*     var u = 1.0 + x;
*     if ( u === 1.0 ) {
*         return x;
*     } else {
*         return ln(u) * (x/(u-1.0));
*     }
*     ```
*
*     See HP-15C Advanced Functions Handbook, p.193.
*
*
* @param {number} x - input value
* @returns {number} the natural logarithm of `1+x`
*
* @example
* var v = log1p( 4.0 );
* // returns ~1.609
*
* @example
* var v = log1p( -1.0 );
* // returns -Infinity
*
* @example
* var v = log1p( 0.0 );
* // returns 0.0
*
* @example
* var v = log1p( -0.0 );
* // returns -0.0
*
* @example
* var v = log1p( -2.0 );
* // returns NaN
*
* @example
* var v = log1p( NaN );
* // returns NaN
*/
function log1p( x ) {
	var hfsq;
	var hu;
	var y;
	var f;
	var c;
	var s;
	var z;
	var R;
	var u;
	var k;

	if ( x < -1.0 || _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_235;
	}
	if ( x === _$FLOAT64_PINF_238 ) {
		return x;
	}
	if ( x === 0.0 ) {
		return x; // handle +-0 (IEEE 754-2008 spec)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		y = -x;
	} else {
		y = x;
	}
	// Argument reduction...
	k = 1;

	// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...
	if ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422
		if ( y < SMALL ) { // if |x| < 2**-29
			if ( y < __TINY_571 ) { // if |x| < 2**-54
				return x;
			}
			// Use a simple two-term Taylor series...
			return x - ( x*x*0.5 );
		}
		// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...
		if ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929
			// -0.2929 < x < 0.41422
			k = 0;
			f = x; // exact
			hu = 1;
		}
	}
	// Address case where `f` cannot be represented exactly...
	if ( k !== 0 ) {
		if ( y < __TWO53_571 ) {
			u = 1.0 + x;
			hu = _$getHighWord_828( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - _$FLOAT64_EXPONENT_BIAS_221;

			// Correction term...
			if ( k > 0 ) { // positive unbiased exponent
				c = 1.0 - (u-x);
			} else { // nonpositive unbiased exponent
				c = x - (u-1.0);
			}
			c /= u;
		} else {
			u = x;
			hu = _$getHighWord_828( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - _$FLOAT64_EXPONENT_BIAS_221;

			// Correction term is zero:
			c = 0;
		}
		// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:
		hu &= 0x000fffff; // max value => 1048575

		// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110
		if ( hu < 434334 ) {
			// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000
			u = _$setHighWord_837( u, hu|0x3ff00000 );
		} else {
			k += 1;

			// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000
			u = _$setHighWord_837( u, hu|0x3fe00000 );

			// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576
			hu = (1048576-hu)>>2;
		}
		f = u - 1.0;
	}
	// Approximation of log1p(f)...
	hfsq = 0.5 * f * f;
	if ( hu === 0 ) { // if |f| < 2**-20
		if ( f === 0.0 ) {
			c += k * __LN2_LO_571;
			return ( k * __LN2_HI_571 ) + c;
		}
		R = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division
		return ( k*__LN2_HI_571 ) - ( (R - ( (k*__LN2_LO_571) + c)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;

	R = z * _$evalpoly_572( z );

	if ( k === 0 ) {
		return f - ( hfsq - ( s*(hfsq+R) ) );
	}
	return ( k*__LN2_HI_571 ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*__LN2_LO_571) + c))) - f );
}


// EXPORTS //

var _$log1p_571 = log1p;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of \\(1+x\\).
*
* @module @stdlib/math/base/special/log1p
*
* @example
* var log1p = require( '@stdlib/math/base/special/log1p' );
*
* var v = log1p( 4.0 );
* // returns ~1.609
*
* v = log1p( -1.0 );
* // returns -Infinity
*
* v = log1p( 0.0 );
* // returns 0.0
*
* v = log1p( -0.0 );
* // returns -0.0
*
* v = log1p( -2.0 );
* // returns NaN
*
* v = log1p( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$log1p_571 = require( './log1p.js' ); */;


// EXPORTS //

var _$log1p_570 = _$log1p_571;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_acosh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_570 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$LN2_227 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

var __HUGE_395 = 1 << 28; // 2**28


// MAIN //

/**
* Computes the hyperbolic arccosine of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{acosh}(x) = \log \left[ x + \sqrt{ x^2 - 1 } \right]
* ```
*
* we have
*
* ```tex
* \operatorname{acosh}(x) = \begin{cases}
* \log(x) + \tfrac{\ln}{2} & \text{ if x is large } \\
* \log \left( 2x-\tfrac{1}{\sqrt{x^2-1}+x} \right) & \text{ if } x > 2 \\
* \operatorname{log1p}\left( x - 1 + \sqrt{ 2 \cdot (x-1) + (x-1)^2 } \right) & \text{ otherwise }
* \end{cases}
* ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{acosh}(x) &= \mathrm{NaN}\ \text{ if } x < 1 \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arccosine (in radians)
*
* @example
* var v = acosh( 1.0 );
* // returns 0.0
*
* @example
* var v = acosh( 2.0 );
* // returns ~1.317
*
* @example
* var v = acosh( NaN );
* // returns NaN
*/
function acosh( x ) {
	var t;
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x < 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x >= __HUGE_395 ) {
		return _$ln_561( x ) + _$LN2_227;
	}
	if ( x > 2.0 ) {
		return _$ln_561( (2.0*x) - ( 1.0 / ( x + _$sqrt_625( (x*x) - 1.0 ) ) ) );
	}
	// Case: 2 >= x > 1
	t = x - 1.0;
	return _$log1p_570( t + _$sqrt_625( (2.0*t) + (t*t) ) );
}


// EXPORTS //

var _$acosh_395 = acosh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arccosine of a number.
*
* @module @stdlib/math/base/special/acosh
*
* @example
* var acosh = require( '@stdlib/math/base/special/acosh' );
*
* var v = acosh( 1.0 );
* // returns 0.0
*
* v = acosh( 2.0 );
* // returns ~1.317
*
* v = acosh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acosh_395 = require( './acosh.js' ); */;


// EXPORTS //

var _$acosh_396 = _$acosh_395;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$acosh_396 = require( '@stdlib/math/base/special/acosh' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the hyperbolic arccosine.
*
* ## Notes
*
* -   The domain of hyperbolic arccosine is restricted to `[1,+infinity)`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAcosh( uniform( 1.0, 10.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAcosh( iterator ) {
	return _$iterator_811( iterator, _$acosh_396 );
}


// EXPORTS //

var _$iterAcosh_706 = iterAcosh;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the hyperbolic arccosine.
*
* @module @stdlib/math/iter/special/acosh
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAcosh = require( '@stdlib/math/iter/special/acosh' );
*
* var iter = iterAcosh( uniform( 1.0, 10.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAcosh_706 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_705 = _$iterAcosh_706;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_atanh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_570 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// VARIABLES //

var NEAR_ZERO = 1.0 / (1 << 28); // 2**-28


// MAIN //

/**
* Computes the hyperbolic arctangent of a number.
*
* ## Method
*
* 1.  Reduce \\( x \\) to positive by \\( \operatorname{atanh}(-x) = -\operatorname{atanh}(x) \\)
*
* 2.  For \\( x \ge 0.5 \\), we calculate
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \log\left( 1 + \tfrac{2x}{1-x} \right) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2 \tfrac{x}{1-x} \right)
*     ```
*
*     For \\( x < 0.5 \\), we have
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2x + \tfrac{2x^2}{1-x} \right)
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atanh}(\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atanh}(1.0) &= \infty \\
* \operatorname{atanh}(-1.0) &= -\infty \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arctangent (in radians)
*
* @example
* var v = atanh( 0.0 );
* // returns 0.0
*
* @example
* var v = atanh( 0.9 );
* // returns ~1.472
*
* @example
* var v = atanh( 1.0 );
* // returns Infinity
*
* @example
* var v = atanh( -1.0 );
* // returns -Infinity
*
* @example
* var v = atanh( NaN );
* // returns NaN
*/
function atanh( x ) {
	var sgn;
	var t;
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return _$FLOAT64_PINF_238;
	}
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_235;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Case: |x| < 2**-28
	if ( x < NEAR_ZERO ) {
		return ( sgn ) ? -x : x;
	}
	if ( x < 0.5 ) {
		t = x + x;
		t = 0.5 * _$log1p_570( t + ( t*x/(1-x) ) );
	} else {
		t = 0.5 * _$log1p_570( (x+x) / (1-x) );
	}
	return ( sgn ) ? -t : t;
}


// EXPORTS //

var _$atanh_419 = atanh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arctangent of a number.
*
* @module @stdlib/math/base/special/atanh
*
* @example
* var atanh = require( '@stdlib/math/base/special/atanh' );
*
* var v = atanh( 0.0 );
* // returns 0.0
*
* v = atanh( 0.9 );
* // returns ~1.472
*
* v = atanh( 1.0 );
* // returns Infinity
*
* v = atanh( -1.0 );
* // returns -Infinity
*
* v = atanh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$atanh_419 = require( './atanh.js' ); */;


// EXPORTS //

var _$atanh_420 = _$atanh_419;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$atanh_420 = require( '@stdlib/math/base/special/atanh' ); */;


// MAIN //

/**
* Computes the inverse hyperbolic cotangent of a number.
*
* @param {number} x - input value
* @returns {number} inverse hyperbolic cotangent (in radians)
*
* @example
* var v = acoth( 2.0 );
* // returns ~0.5493
*
* @example
* var v = acoth( 0.0 );
* // returns NaN
*
* @example
* var v = acoth( 0.5 );
* // returns NaN
*
* @example
* var v = acoth( 1.0 );
* // returns Infinity
*
* @example
* var v = acoth( NaN );
* // returns NaN
*/
function acoth( x ) {
	return _$atanh_420( 1.0/x );
}


// EXPORTS //

var _$acoth_398 = acoth;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arccosine of a number.
*
* @module @stdlib/math/base/special/acoth
*
* @example
* var acoth = require( '@stdlib/math/base/special/acoth' );
*
* var v = acoth( 2.0 );
* // returns ~0.5493
*
* v = acoth( 0.0 );
* // returns NaN
*
* v = acoth( 0.5 );
* // returns NaN
*
* v = acoth( 1.0 );
* // returns Infinity
*
* v = acoth( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acoth_398 = require( './main.js' ); */;


// EXPORTS //

var _$acoth_397 = _$acoth_398;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$acoth_397 = require( '@stdlib/math/base/special/acoth' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse hyperbolic cotangent.
*
* ## Notes
*
* -   The domain of inverse hyperbolic cotangent is restricted to `(-inf,-1]` and `[1,inf)`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAcoth( uniform( 1.0, 10.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAcoth( iterator ) {
	return _$iterator_811( iterator, _$acoth_397 );
}


// EXPORTS //

var _$iterAcoth_708 = iterAcoth;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse hyperbolic cotangent.
*
* @module @stdlib/math/iter/special/acoth
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAcoth = require( '@stdlib/math/iter/special/acoth' );
*
* var iter = iterAcoth( uniform( 1.0, 10.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAcoth_708 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_707 = _$iterAcoth_708;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$asin_408 = require( '@stdlib/math/base/special/asin' ); */;


// MAIN //

/**
* Computes the inverse coversed cosine.
*
* @param {number} x - input value
* @returns {number} inverse coversed cosine
*
* @example
* var v = acovercos( 0.0 );
* // returns ~1.5708
*
* @example
* var v = acovercos( -3.141592653589793/2.0 );
* // returns ~-0.6075
*
* @example
* var v = acovercos( -3.141592653589793/6.0 );
* // returns ~0.4966
*
* @example
* var v = acovercos( NaN );
* // returns NaN
*/
function acovercos( x ) {
	return _$asin_408( 1.0 + x );
}


// EXPORTS //

var _$acovercos_399 = acovercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse coversed cosine.
*
* @module @stdlib/math/base/special/acovercos
*
* @example
* var acovercos = require( '@stdlib/math/base/special/acovercos' );
*
* var v = acovercos( 0.0 );
* // returns ~1.5708
*
* v = acovercos( -3.141592653589793/2.0 );
* // returns ~-0.6075
*
* v = acovercos( -3.141592653589793/6.0 );
* // returns ~0.4966
*
* v = acovercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acovercos_399 = require( './acovercos.js' ); */;


// EXPORTS //

var _$acovercos_400 = _$acovercos_399;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$acovercos_400 = require( '@stdlib/math/base/special/acovercos' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse coversed cosine.
*
* ## Notes
*
* -   The domain of inverse coversed cosine is restricted to `[-2,0]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAcovercos( uniform( -2.0, 0.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAcovercos( iterator ) {
	return _$iterator_811( iterator, _$acovercos_400 );
}


// EXPORTS //

var _$iterAcovercos_710 = iterAcovercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse coversed cosine.
*
* @module @stdlib/math/iter/special/acovercos
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAcovercos = require( '@stdlib/math/iter/special/acovercos' );
*
* var iter = iterAcovercos( uniform( -2.0, 0.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAcovercos_710 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_709 = _$iterAcovercos_710;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$asin_408 = require( '@stdlib/math/base/special/asin' ); */;


// MAIN //

/**
* Computes the inverse coversed sine.
*
* @param {number} x - input value
* @returns {number} inverse coversed sine
*
* @example
* var v = acoversin( 0.0 );
* // returns ~1.5708
*
* @example
* var v = acoversin( 3.141592653589793/2.0 );
* // returns ~-0.6075
*
* @example
* var v = acoversin( 3.141592653589793/6.0 );
* // returns ~0.4966
*
* @example
* var v = acoversin( NaN );
* // returns NaN
*/
function acoversin( x ) {
	return _$asin_408( 1.0 - x );
}


// EXPORTS //

var _$acoversin_401 = acoversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse coversed sine.
*
* @module @stdlib/math/base/special/acoversin
*
* @example
* var acoversin = require( '@stdlib/math/base/special/acoversin' );
*
* var v = acoversin( 0.0 );
* // returns ~1.5708
*
* v = acoversin( 3.141592653589793/2.0 );
* // returns ~-0.6075
*
* v = acoversin( 3.141592653589793/6.0 );
* // returns ~0.4966
*
* v = acoversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acoversin_401 = require( './acoversin.js' ); */;


// EXPORTS //

var _$acoversin_402 = _$acoversin_401;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$acoversin_402 = require( '@stdlib/math/base/special/acoversin' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse coversed sine.
*
* ## Notes
*
* -   The domain of inverse coversed sine is restricted to `[0,2]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAcoversin( uniform( 0.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAcoversin( iterator ) {
	return _$iterator_811( iterator, _$acoversin_402 );
}


// EXPORTS //

var _$iterAcoversin_712 = iterAcoversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse coversed sine.
*
* @module @stdlib/math/iter/special/acoversin
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAcoversin = require( '@stdlib/math/iter/special/acoversin' );
*
* var iter = iterAcoversin( uniform( 0.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAcoversin_712 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_711 = _$iterAcoversin_712;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isNumber_714 = _$isNumber_162.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which performs element-wise addition of two or more iterators.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {...(Iterator|number)} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 1.0, 2.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterAdd( it1, it2 );
*
* var v = iter.next().value;
* // returns 4.0
*
* v = iter.next().value;
* // returns 6.0
*
* var bool = iter.next().done;
* // returns true
*/
function iterAdd() {
	var iterators;
	var types;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_714( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var s;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		s = 0.0;
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							s += v.value;
						} else {
							s = NaN;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					s += v.value;
				} else {
					s = NaN;
				}
			} else {
				s += iterators[ i ];
			}
		}
		return {
			'value': s,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		return iterAdd.apply( null, args );
	}
}


// EXPORTS //

var _$iterAdd_714 = iterAdd;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which performs element-wise addition of two or more iterators.
*
* @module @stdlib/math/iter/special/add
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterAdd = require( '@stdlib/math/iter/special/add' );
*
* var it1 = array2iterator( [ 1.0, 2.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterAdd( it1, it2 );
*
* var v = iter.next().value;
* // returns 4.0
*
* v = iter.next().value;
* // returns 6.0
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterAdd_714 = require( './main.js' ); */;


// EXPORTS //

var _$iterAdd_713 = _$iterAdd_714;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$acos_394 = require( '@stdlib/math/base/special/acos' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Computes the inverse half-value versed cosine.
*
* @param {number} x - input value
* @returns {number} inverse half-value versed cosine
*
* @example
* var v = ahavercos( 0.0 );
* // returns ~3.1416
*
* @example
* var v = ahavercos( 1.0 );
* // returns 0.0
*
* @example
* var v = ahavercos( 0.5 );
* // returns ~1.5708
*
* @example
* var v = ahavercos( NaN );
* // returns NaN
*/
function ahavercos( x ) {
	return 2.0 * _$acos_394( _$sqrt_625( x ) );
}


// EXPORTS //

var _$ahavercos_403 = ahavercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse half-value versed cosine.
*
* @module @stdlib/math/base/special/ahavercos
*
* @example
* var ahavercos = require( '@stdlib/math/base/special/ahavercos' );
*
* var v = ahavercos( 0.0 );
* // returns ~3.1416
*
* v = ahavercos( 1.0 );
* // returns 0.0
*
* v = ahavercos( 0.5 );
* // returns ~1.5707
*
* v = ahavercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ahavercos_403 = require( './ahavercos.js' ); */;


// EXPORTS //

var _$ahavercos_404 = _$ahavercos_403;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$ahavercos_404 = require( '@stdlib/math/base/special/ahavercos' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse half-value versed cosine.
*
* ## Notes
*
* -   The domain of inverse half-value versed cosine is restricted to `[0,1]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAhavercos( uniform( 0.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAhavercos( iterator ) {
	return _$iterator_811( iterator, _$ahavercos_404 );
}


// EXPORTS //

var _$iterAhavercos_716 = iterAhavercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse half-value versed cosine.
*
* @module @stdlib/math/iter/special/ahavercos
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAhavercos = require( '@stdlib/math/iter/special/ahavercos' );
*
* var iter = iterAhavercos( uniform( 0.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAhavercos_716 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_715 = _$iterAhavercos_716;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$asin_408 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Computes the inverse half-value versed sine.
*
* @param {number} x - input value
* @returns {number} inverse half-value versed sine
*
* @example
* var v = ahaversin( 0.0 );
* // returns 0.0
*
* @example
* var v = ahaversin( 1.0 );
* // returns ~3.1416
*
* @example
* var v = ahaversin( 0.5 );
* // returns ~1.5708
*
* @example
* var v = ahaversin( NaN );
* // returns NaN
*/
function ahaversin( x ) {
	return 2.0 * _$asin_408( _$sqrt_625( x ) );
}


// EXPORTS //

var _$ahaversin_405 = ahaversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse half-value versed sine.
*
* @module @stdlib/math/base/special/ahaversin
*
* @example
* var ahaversin = require( '@stdlib/math/base/special/ahaversin' );
*
* var v = ahaversin( 0.0 );
* // returns 0.0
*
* v = ahaversin( 1.0 );
* // returns ~3.1416
*
* v = ahaversin( 0.5 );
* // returns ~1.5708
*
* v = ahaversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ahaversin_405 = require( './ahaversin.js' ); */;


// EXPORTS //

var _$ahaversin_406 = _$ahaversin_405;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$ahaversin_406 = require( '@stdlib/math/base/special/ahaversin' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse half-value versed sine.
*
* ## Notes
*
* -   The domain of inverse half-value versed sine is restricted to `[0,1]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAhaversin( uniform( 0.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAhaversin( iterator ) {
	return _$iterator_811( iterator, _$ahaversin_406 );
}


// EXPORTS //

var _$iterAhaversin_718 = iterAhaversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse half-value versed sine.
*
* @module @stdlib/math/iter/special/ahaversin
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAhaversin = require( '@stdlib/math/iter/special/ahaversin' );
*
* var iter = iterAhaversin( uniform( 0.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAhaversin_718 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_717 = _$iterAhaversin_718;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$asin_408 = require( '@stdlib/math/base/special/asin' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the arcsine.
*
* ## Notes
*
* -   The domain of arcsine is restricted to `[-1,1]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAsin( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAsin( iterator ) {
	return _$iterator_811( iterator, _$asin_408 );
}


// EXPORTS //

var _$iterAsin_720 = iterAsin;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the arcsine.
*
* @module @stdlib/math/iter/special/asin
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAsin = require( '@stdlib/math/iter/special/asin' );
*
* var iter = iterAsin( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAsin_720 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_719 = _$iterAsin_720;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_asinh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_570 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$LN2_227 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

var __NEAR_ZERO_411 = 1.0 / (1 << 28); // 2**-28
var __HUGE_411 = 1 << 28; // 2**28


// MAIN //

/**
* Computes the hyperbolic arcsine of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{asinh}(x) = \operatorname{sgn}(x) \cdot \log \left( |x| + \sqrt{x^2 + 1} \right)
* ```
*
* we have
*
* ```tex
* \operatorname{asinh}(x) = \begin{cases}
* x  & \text{ if }  1+x^2 =1, \\
* \operatorname{sgn}(x) \cdot \left( \log(x) + \tfrac{\ln}{2} \right) & \text{ if large } |x| \\
* \operatorname{sgn}(x) \cdot \log\left( 2 |x| + 1 / ( |x|+ \sqrt{x^2+1} ) \right) & \text{ if } |x| > 2 \\
* \operatorname{sgn}(x) \cdot \operatorname{log1p}\left( |x| + \tfrac{x^2}{1 + \sqrt{1+x^2}} \right) & \text{otherwise}
* \end{cases}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arcsine (in radians)
*
* @example
* var v = asinh( 0.0 );
* // returns 0.0
*
* @example
* var v = asinh( 2.0 );
* // returns ~1.444
*
* @example
* var v = asinh( -2.0 );
* // returns ~-1.444
*
* @example
* var v = asinh( NaN );
* // returns NaN
*/
function asinh( x ) {
	var sgn;
	var xx;
	var t;
	if ( _$isnan_370( x ) || _$isInfinite_366( x ) ) {
		return x;
	}
	if ( x < 0.0 ) {
		x = -x;
		sgn = true;
	}
	// Case: |x| < 2**-28
	if ( x < __NEAR_ZERO_411 ) {
		t = x;
	}
	// Case: |x| > 2**28
	else if ( x > __HUGE_411 ) {
		t = _$ln_561( x ) + _$LN2_227;
	}
	// Case: 2**28 > |x| > 2.0
	else if ( x > 2.0 ) {
		t = _$ln_561( (2.0*x) + ( 1.0 / (_$sqrt_625( (x*x) + 1.0 ) + x) ) );
	}
	// Case: 2.0 > |x| > 2**-28
	else {
		xx = x * x;
		t = _$log1p_570( x + ( xx/(1.0 + _$sqrt_625(1.0 + xx)) ) );
	}
	return ( sgn ) ? -t : t;
}


// EXPORTS //

var _$asinh_411 = asinh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arcsine of a number.
*
* @module @stdlib/math/base/special/asinh
*
* @example
* var asinh = require( '@stdlib/math/base/special/asinh' );
*
* var v = asinh( 0.0 );
* // returns 0.0
*
* v = asinh( 2.0 );
* // returns ~1.444
*
* v = asinh( -2.0 );
* // returns ~-1.444
*
* v = asinh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$asinh_411 = require( './asinh.js' ); */;


// EXPORTS //

var _$asinh_412 = _$asinh_411;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$asinh_412 = require( '@stdlib/math/base/special/asinh' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the hyperbolic arcsine.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAsinh( uniform( -2.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAsinh( iterator ) {
	return _$iterator_811( iterator, _$asinh_412 );
}


// EXPORTS //

var _$iterAsinh_722 = iterAsinh;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the hyperbolic arcsine.
*
* @module @stdlib/math/iter/special/asinh
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAsinh = require( '@stdlib/math/iter/special/asinh' );
*
* var iter = iterAsinh( uniform( -2.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAsinh_722 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_721 = _$iterAsinh_722;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
* // returns 1.5707963267948966
*/


// MAIN //

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var HALF_PI = 1.5707963267948966;


// EXPORTS //

var _$HALF_PI_224 = HALF_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_415( x ) {
	if ( x === 0.0 ) {
		return -64.85021904942025;
	}
	return -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_415 = __evalpoly_415;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_416( x ) {
	if ( x === 0.0 ) {
		return 194.5506571482614;
	}
	return 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_416 = __evalpoly_416;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$HALF_PI_224 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$FOURTH_PI_222 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_415 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_416 = require( './polyval_q.js' ); */;


// VARIABLES //

var __MOREBITS_413 = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.
var T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )


// MAIN //

/**
* Computes the arctangent of a number.
*
* ## Method
*
* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form
*
*     ```tex
*     x + x^3 \frac{P(x)}{Q(x)}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain  | # trials | peak    | rms     |
*     |:-----------|:--------|:---------|:--------|:--------|
*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |
*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |
*
* @param {number} x - input value
* @returns {number} arctangent (in radians)
*
* @example
* var v = atan( 0.0 );
* // returns ~0.0
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( -PI/4.0 );
* // returns ~-0.666
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( PI/4.0 );
* // returns ~0.666
*
* @example
* var v = atan( NaN );
* // returns NaN
*/
function atan( x ) {
	var flg;
	var sgn;
	var y;
	var z;
	if ( _$isnan_370( x ) || x === 0.0 ) {
		return x;
	}
	if ( x === _$FLOAT64_PINF_238 ) {
		return _$HALF_PI_224;
	}
	if ( x === _$FLOAT64_NINF_235 ) {
		return -_$HALF_PI_224;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Range reduction:
	flg = 0;
	if ( x > T3P8 ) {
		y = _$HALF_PI_224;
		flg = 1;
		x = -( 1.0/x );
	}
	else if ( x <= 0.66 ) {
		y = 0.0;
	}
	else {
		y = _$FOURTH_PI_222;
		flg = 2;
		x = (x-1.0) / (x+1.0);
	}
	z = x * x;
	z = z*_$evalpoly_415( z ) / _$evalpoly_416( z );
	z = ( x*z ) + x;
	if ( flg === 2 ) {
		z += 0.5 * __MOREBITS_413;
	}
	else if ( flg === 1 ) {
		z += __MOREBITS_413;
	}
	y += z;
	return ( sgn ) ? -y : y;
}


// EXPORTS //

var _$atan_413 = atan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arctangent of a number.
*
* @module @stdlib/math/base/special/atan
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var atan = require( '@stdlib/math/base/special/atan' );
*
* var v = atan( 0.0 );
* // returns ~0.0
*
* v = atan( -PI/4.0 );
* // returns ~-1.0
*
* v = atan( PI/4.0 );
* // returns ~1.0
*
* v = atan( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$atan_413 = require( './atan.js' ); */;


// EXPORTS //

var _$atan_414 = _$atan_413;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$atan_414 = require( '@stdlib/math/base/special/atan' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the arctangent.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAtan( uniform( -2.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAtan( iterator ) {
	return _$iterator_811( iterator, _$atan_414 );
}


// EXPORTS //

var _$iterAtan_724 = iterAtan;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the arctangent.
*
* @module @stdlib/math/iter/special/atan
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAtan = require( '@stdlib/math/iter/special/atan' );
*
* var iter = iterAtan( uniform( -2.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAtan_724 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_723 = _$iterAtan_724;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'invalid': NaN
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_816( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'invalid' ) ) {
		opts.invalid = options.invalid;
	}
	return null;
}


// EXPORTS //

var _$validate_816 = __validate_816;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isNumber_815 = _$isNumber_162.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_816 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which invokes a binary function accepting numeric arguments for each iterated value.
*
* ## Notes
*
* -   When invoked, the input function is provided two arguments:
*
*     -   `x`: iterated value from first input iterator
*     -   `y`: iterated value from second input iterator
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
*
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
*
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
*
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {Iterator} iter1 - second input iterator
* @param {Function} fcn - function to invoke
* @param {Options} [options] - options
* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be an iterator protocol-compliant object
* @throws {TypeError} third argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var iter = iterMap2( randu(), randu(), copysign );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterMap2( iter0, iter1, fcn, options ) {
	var iterators;
	var values;
	var types;
	var niter;
	var iter;
	var opts;
	var FLG;
	var err;
	var i;

	niter = 2;
	values = [ 0.0, 0.0 ];

	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_815( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Third argument must be a function. Value: `' + fcn + '`.' );
	}
	opts = {
		'invalid': NaN
	};
	if ( arguments.length > 3 ) {
		err = _$validate_816( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var err;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		err = 0;
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							values[ i ] = v.value;
						} else {
							err = 1;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					values[ i ] = v.value;
				} else {
					err = 1;
				}
			} else {
				values[ i ] = iterators[ i ];
			}
		}
		if ( err ) {
			return {
				'value': opts.invalid,
				'done': false
			};
		}
		return {
			'value': fcn( values[ 0 ], values[ 1 ] ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		args.push( fcn, opts );
		return iterMap2.apply( null, args );
	}
}


// EXPORTS //

var _$iterMap2_815 = iterMap2;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which invokes a binary function accepting numeric arguments for each iterated value.
*
* @module @stdlib/math/iter/tools/map2
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var copysign = require( '@stdlib/math/base/special/copysign' );
* var iterMap2 = require( '@stdlib/math/iter/tools/map2' );
*
* var iter = iterMap2( randu(), randu(), copysign );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterMap2_815 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_814 = _$iterMap2_815;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// MAIN //

/**
* Returns a boolean indicating if the sign bit is on (true) or off (false).
*
* @param {number} x - input value
* @returns {boolean} boolean indicating if sign bit is on or off
*
* @example
* var bool = signbit( 4.0 );
* // returns false
*
* @example
* var bool = signbit( -9.14e-307 );
* // returns true
*
* @example
* var bool = signbit( 0.0 );
* // returns false
*
* @example
* var bool = signbit( -0.0 );
* // returns true
*/
function signbit( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:
	var high = _$getHighWord_828( x );

	// Shift off all bits which are not the sign bit and check if the sign bit is on:
	return ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary
}


// EXPORTS //

var _$signbit_843 = signbit;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if the sign bit is on (true) or off (false).
*
* @module @stdlib/number/float64/base/signbit
*
* @example
* var signbit = require( '@stdlib/number/float64/base/signbit' );
*
* var bool = signbit( 4.0 );
* // returns false
*
* bool = signbit( -9.14e-307 );
* // returns true
*
* bool = signbit( 0.0 );
* // returns false
*
* bool = signbit( -0.0 );
* // returns true
*/

// MODULES //

/* removed: var _$signbit_843 = require( './main.js' ); */;


// EXPORTS //

var _$signbit_842 = _$signbit_843;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (c) 2009 The Go Authors. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*
*    * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
*    * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$copysign_467 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$signbit_842 = require( '@stdlib/number/float64/base/signbit' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan_414 = require( '@stdlib/math/base/special/atan' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atan2}(y,\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atan2}(\mathrm{NaN},x) &= \mathrm{NaN}\\
* \operatorname{atan2}( +0,x \ge 0 ) &= +0 \\
* \operatorname{atan2}( -0, x \ge 0 ) &= -0 \\
* \operatorname{atan2}( +0,x \le -0 ) &= +\Pi \\
* \operatorname{atan2}( -0, x \le -0 ) &= -\Pi \\
* \operatorname{atan2}(+\infty, +\infty) &= +\tfrac{\Pi}{4} \\
* \operatorname{atan2}(-\infty, +\infty) &= -\tfrac{\Pi}{4} \\
* \operatorname{atan2}(+\infty, -\infty) &= +\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(-\infty, -\infty) &= -\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(y, +\infty) &= 0.0 \\
* \operatorname{atan2}(y>0, -\infty) &= +\Pi \\
* \operatorname{atan2}(y<0, -\infty) &= -\Pi \\
* \operatorname{atan2}(+\infty, x ) &= +\tfrac{\Pi}{2} \\
* \operatorname{atan2}(-\infty, x ) &= -\tfrac{\Pi}{2} \\
* \end{align*}
* ```
*
* @param {number} y - `x` coordinate
* @param {number} x - `y` coordinate
* @returns {number} angle (in radians)
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* @example
* var v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* @example
* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* @example
* var v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* @example
* var v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* @example
* var v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var v = atan2( 3.0, NaN );
* // returns NaN
*
* @example
* var v = atan2( NaN, 2.0 );
* // returns NaN
*/
function atan2( y, x ) {
	var q;
	if ( _$isnan_370( x ) || _$isnan_370( y ) ) {
		return NaN;
	}
	if ( _$isInfinite_366( x ) ) {
		if ( x === _$FLOAT64_PINF_238 ) {
			if ( _$isInfinite_366( y ) ) {
				return _$copysign_467( _$PI_237 / 4.0, y );
			}
			return _$copysign_467( 0.0, y );
		}
		// Case: x is -Infinity
		if ( _$isInfinite_366( y ) ) {
			return _$copysign_467( 3.0*_$PI_237/4.0, y );
		}
		return _$copysign_467( _$PI_237, y );
	}
	if ( _$isInfinite_366( y ) ) {
		return _$copysign_467( _$PI_237 / 2.0, y );
	}
	if ( y === 0.0 ) {
		if ( x >= 0.0 && !_$signbit_842( x ) ) {
			return _$copysign_467( 0.0, y );
		}
		return _$copysign_467( _$PI_237, y );
	}
	if ( x === 0.0 ) {
		return _$copysign_467( _$PI_237 / 2.0, y );
	}
	q = _$atan_414( y / x );
	if ( x < 0.0 ) {
		if ( q <= 0.0 ) {
			return q + _$PI_237;
		}
		return q - _$PI_237;
	}
	return q;
}


// EXPORTS //

var _$atan2_418 = atan2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.
*
* @module @stdlib/math/base/special/atan2
*
* @example
* var atan2 = require( '@stdlib/math/base/special/atan2' );
*
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* v = atan2( 3.0, NaN );
* // returns NaN
*
* v = atan2( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$atan2_418 = require( './main.js' ); */;


// EXPORTS //

var _$atan2_417 = _$atan2_418;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_814 = require( '@stdlib/math/iter/tools/map2' ); */;
/* removed: var _$atan2_417 = require( '@stdlib/math/base/special/atan2' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {(Iterator|number)} y - input iterator
* @param {(Iterator|number)} x - input iterator
* @throws {TypeError} first argument must be either an iterator protocol-compliant object or a number
* @throws {TypeError} second argument must be either an iterator protocol-compliant object or a number
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var x = uniform( -2.0, 2.0 );
* var y = uniform( -2.0, 2.0 );
*
* var iter = iterAtan2( y, x );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAtan2( y, x ) {
	return _$iterator_814( y, x, _$atan2_417 );
}


// EXPORTS //

var _$iterAtan2_726 = iterAtan2;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.
*
* @module @stdlib/math/iter/special/atan2
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAtan2 = require( '@stdlib/math/iter/special/atan2' );
*
* var x = uniform( -2.0, 2.0 );
* var y = uniform( -2.0, 2.0 );
*
* var iter = iterAtan2( y, x );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAtan2_726 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_725 = _$iterAtan2_726;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$atanh_420 = require( '@stdlib/math/base/special/atanh' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the hyperbolic arctangent.
*
* ## Notes
*
* -   The domain of hyperbolic arctangent is restricted to `[-1,1]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAtanh( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAtanh( iterator ) {
	return _$iterator_811( iterator, _$atanh_420 );
}


// EXPORTS //

var _$iterAtanh_728 = iterAtanh;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the hyperbolic arctangent.
*
* @module @stdlib/math/iter/special/atanh
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAtanh = require( '@stdlib/math/iter/special/atanh' );
*
* var iter = iterAtanh( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAtanh_728 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_727 = _$iterAtanh_728;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$acos_394 = require( '@stdlib/math/base/special/acos' ); */;


// MAIN //

/**
* Computes the inverse versed cosine.
*
* @param {number} x - input value
* @returns {number} inverse versed cosine
*
* @example
* var v = avercos( 0.0 );
* // returns 0.0
*
* @example
* var v = avercos( -3.141592653589793/2.0 );
* // returns ~2.1783
*
* @example
* var v = avercos( -3.141592653589793/6.0 );
* // returns ~1.0742
*
* @example
* var v = avercos( NaN );
* // returns NaN
*/
function avercos( x ) {
	return _$acos_394( 1.0 + x );
}


// EXPORTS //

var _$avercos_421 = avercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse versed cosine.
*
* @module @stdlib/math/base/special/avercos
*
* @example
* var avercos = require( '@stdlib/math/base/special/avercos' );
*
* var v = avercos( 0.0 );
* // returns 0.0
*
* v = avercos( -3.141592653589793/2.0 );
* // returns ~2.1783
*
* v = avercos( -3.141592653589793/6.0 );
* // returns ~1.0742
*
* v = avercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$avercos_421 = require( './avercos.js' ); */;


// EXPORTS //

var _$avercos_422 = _$avercos_421;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$avercos_422 = require( '@stdlib/math/base/special/avercos' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse versed cosine.
*
* ## Notes
*
* -   The domain of inverse versed cosine is restricted to `[-2,0]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAvercos( uniform( -2.0, 0.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAvercos( iterator ) {
	return _$iterator_811( iterator, _$avercos_422 );
}


// EXPORTS //

var _$iterAvercos_730 = iterAvercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse versed cosine.
*
* @module @stdlib/math/iter/special/avercos
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAvercos = require( '@stdlib/math/iter/special/avercos' );
*
* var iter = iterAvercos( uniform( -2.0, 0.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAvercos_730 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_729 = _$iterAvercos_730;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$acos_394 = require( '@stdlib/math/base/special/acos' ); */;


// MAIN //

/**
* Computes the inverse versed sine.
*
* @param {number} x - input value
* @returns {number} inverse versed sine
*
* @example
* var v = aversin( 0.0 );
* // returns 0.0
*
* @example
* var v = aversin( 3.141592653589793/2.0 );
* // returns ~2.1783
*
* @example
* var v = aversin( 3.141592653589793/6.0 );
* // returns ~1.0742
*
* @example
* var v = aversin( NaN );
* // returns NaN
*/
function aversin( x ) {
	return _$acos_394( 1.0 - x );
}


// EXPORTS //

var _$aversin_423 = aversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse versed sine.
*
* @module @stdlib/math/base/special/aversin
*
* @example
* var aversin = require( '@stdlib/math/base/special/aversin' );
*
* var v = aversin( 0.0 );
* // returns 0.0
*
* v = aversin( 3.141592653589793/2.0 );
* // returns ~2.1783
*
* v = aversin( 3.141592653589793/6.0 );
* // returns ~1.0742
*
* v = aversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$aversin_423 = require( './aversin.js' ); */;


// EXPORTS //

var _$aversin_424 = _$aversin_423;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$aversin_424 = require( '@stdlib/math/base/special/aversin' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the inverse versed sine.
*
* ## Notes
*
* -   The domain of inverse versed sine is restricted to `[0,2]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterAversin( uniform( 0.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterAversin( iterator ) {
	return _$iterator_811( iterator, _$aversin_424 );
}


// EXPORTS //

var _$iterAversin_732 = iterAversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the inverse versed sine.
*
* @module @stdlib/math/iter/special/aversin
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterAversin = require( '@stdlib/math/iter/special/aversin' );
*
* var iter = iterAversin( uniform( 0.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterAversin_732 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_731 = _$iterAversin_732;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var __S1_620 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var __S2_620 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var __S3_620 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var __S4_620 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var __S5_620 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var __S6_620 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C

var C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C
var C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177
var C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590
var C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD
var C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4
var C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4


// MAIN //

/**
* Computes the sine and cosine on \\( \approx \[-\pi/4, \pi/4\] \\) (except for \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value (in radians, assumed to be bounded by `~π/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {(Array|TypedArray|Object)} sine and cosine
*/
function kernelSincos( out, x, y ) {
	var hz;
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = __S2_620 + (z * (__S3_620 + (z*__S4_620))) + (z * w * (__S5_620 + (z*__S6_620)));
	v = z * x;
	if ( y === 0.0 ) {
		out[ 0 ] = x + (v * (__S1_620 + (z*r)));
	} else {
		out[ 0 ] = x - (((z*((0.5*y) - (v*r))) - y) - (v*__S1_620));
	}
	r = z * (C1 + (z * (C2 + (z*C3))));
	r += w * w * (C4 + (z * (C5 + (z*C6))));
	hz = 0.5 * z;
	w = 1.0 - hz;
	out[ 1 ] = w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );

	return out;
}


// EXPORTS //

var _$kernelSincos_620 = kernelSincos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$rempio2_594 = require( '@stdlib/math/base/special/rempio2' ); */;
/* removed: var _$kernelSincos_620 = require( './kernel_sincos.js' ); */;


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_622 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_622 = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var __PIO4_HIGH_WORD_622 = 0x3fe921fb|0; // asm type annotation

// The smaller of the two cutoffs for the sine and cosine kernels: 2^-27 = 0x3e400000 => 00111110010000000000000000000000
var __SMALL_HIGH_WORD_622 = 0x3e400000|0; // asm type annotation

// Array for storing remainder elements:
var __Y_622 = [ 0.0, 0.0 ];


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\) and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value (in radians)
* @returns {(Array|TypedArray|Object)} sine and cosine
*
* @example
* var v = sincos( [ 0.0, 0.0 ], 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], 3.141592653589793/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], -3.141592653589793/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function sincos( out, x ) {
	var ix;
	var n;

	ix = _$getHighWord_828( x );

	// Case: |x| ~< π/4
	ix &= __ABS_MASK_622;
	if ( ix <= __PIO4_HIGH_WORD_622 ) {
		// Case: |x| ~< 2^-26
		if ( ix < __SMALL_HIGH_WORD_622 ) {
			if ( (x|0) === 0 ) {
				out[ 0 ] = x;
				out[ 1 ] = 0.0;
			}
		}
		return _$kernelSincos_620( out, x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_622 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	// Argument reduction...
	n = _$rempio2_594( x, __Y_622 );

	// Compute the sine and cosine together:
	_$kernelSincos_620( out, __Y_622[ 0 ], __Y_622[ 1 ] );

	switch ( n & 3 ) {
	case 1:
		ix = out[ 1 ];
		out[ 1 ] = -out[ 0 ];
		out[ 0 ] = ix;
		return out;
	case 2:
		out[ 0 ] *= -1;
		out[ 1 ] *= -1;
		return out;
	case 3:
		// Passing
		ix = -out[ 1 ];
		out[ 1 ] = out[ 0 ];
		out[ 0 ] = ix;
		return out;
	default:
		return out;
	}
}


// EXPORTS //

var _$sincos_622 = sincos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sincos_622 = require( './sincos.js' ); */;


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number.
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value (in radians)
* @returns {(Array|TypedArray|Object)} sine and cosine
*
* @example
* var v = sincos( 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* @example
* var v = sincos( 3.141592653589793/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* @example
* var v = sincos( -3.141592653589793/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* @example
* var v = sincos( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var v = sincos( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~1.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function __sincos_621( out, x ) {
	if ( arguments.length === 1 ) {
		return _$sincos_622( [ 0.0, 0.0 ], out );
	}
	return _$sincos_622( out, x );
}


// EXPORTS //

var _$sincos_621 = __sincos_621;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Simultaneously compute the sine and cosine of a number.
*
* @module @stdlib/math/base/special/sincos
*
* @example
* var sincos = require( '@stdlib/math/base/special/sincos' );
*
* var v = sincos( 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* v = sincos( 3.141592653589793/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* v = sincos( -3.141592653589793/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* v = sincos( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var sincos = require( '@stdlib/math/base/special/sincos' );
*
* var out = new Float64Array( 2 );
*
* var v = sincos( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~1.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$sincos_621 = require( './main.js' ); */;


// EXPORTS //

var _$sincos_619 = _$sincos_621;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_427( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.17291506903064494;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -412986685009.9087 + (x * (27282507878.60594 + (x * (-621407004.2354012 + (x * (6630299.79048338 + (x * (-36629.81465510709 + (x * (103.44222815443189 + (x * -0.12117036164593528))))))))))); // eslint-disable-line max-len
		s2 = 2388378799633.229 + (x * (26328198300.85965 + (x * (139850973.72263435 + (x * (456126.9622421994 + (x * (936.1402239233771 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.12117036164593528 + (x * (103.44222815443189 + (x * (-36629.81465510709 + (x * (6630299.79048338 + (x * (-621407004.2354012 + (x * (27282507878.60594 + (x * -412986685009.9087))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (1.0 + (x * (936.1402239233771 + (x * (456126.9622421994 + (x * (139850973.72263435 + (x * (26328198300.85965 + (x * 2388378799633.229))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_427 = __evalrational_427;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_428( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.005119512965174424;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1831.9397969392085 + (x * (-12254.07816137899 + (x * (-7287.970246446462 + (x * (10341.910641583727 + (x * (11725.046279757104 + (x * (4417.670702532509 + (x * (743.2119668062425 + (x * 48.5917033559165))))))))))))); // eslint-disable-line max-len
		s2 = -357834.78026152303 + (x * (245991.0226258631 + (x * (-84055.06259116957 + (x * (18680.99000835919 + (x * (-2945.876654550934 + (x * (333.07310774649073 + (x * (-25.258076240801554 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 48.5917033559165 + (x * (743.2119668062425 + (x * (4417.670702532509 + (x * (11725.046279757104 + (x * (10341.910641583727 + (x * (-7287.970246446462 + (x * (-12254.07816137899 + (x * -1831.9397969392085))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-25.258076240801554 + (x * (333.07310774649073 + (x * (-2945.876654550934 + (x * (18680.99000835919 + (x * (-84055.06259116957 + (x * (245991.0226258631 + (x * -357834.78026152303))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_428 = __evalrational_428;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_429( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len
		s2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_429 = __evalrational_429;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_430( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.015625;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len
		s2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_430 = __evalrational_430;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j0.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$sincos_619 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalrational_427 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_428 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_429 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_430 = require( './rational_psqs.js' ); */;


// VARIABLES //

var ONE_DIV_SQRT_PI = 0.5641895835477563;
var x1 = 2.4048255576957727686e+00;
var x2 = 5.5200781102863106496e+00;
var x11 = 6.160e+02;
var x12 = -1.42444230422723137837e-03;
var x21 = 1.4130e+03;
var x22 = 5.46860286310649596604e-04;

// `sincos` workspace:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the first kind of order zero.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = j0( 0.0 );
* // returns 1.0
*
* v = j0( 1.0 );
* // returns ~0.765
*
* v = j0( Infinity );
* // returns 0.0
*
* v = j0( -Infinity );
* // returns 0.0
*
* v = j0( NaN );
* // returns NaN
*/
function j0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var f;

	if ( x < 0 ) {
		x = -x;
	}
	if ( x === _$FLOAT64_PINF_238 ) {
		return 0.0;
	}
	if ( x === 0 ) {
		return 1.0;
	}
	if ( x <= 4.0 ) {
		y = x * x;
		r = _$evalrational_427( y );
		f = ( x+x1 ) * ( (x - (x11/256.0)) - x12 );
		return f * r;
	}
	if ( x <= 8.0 ) {
		y = 1.0 - ( ( x*x )/64.0 );
		r = _$evalrational_428( y );
		f = ( x+x2 ) * ( (x - (x21/256.0)) - x22 );
		return f * r;
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = _$evalrational_429( y2 );
	rs = _$evalrational_430( y2 );
	f = ONE_DIV_SQRT_PI / _$sqrt_625(x);

	/*
	* What follows is really just:
	*
	* ```
	* var z = x - pi/4;
	* return f * (rc * cos(z) - y * rs * sin(z));
	* ```
	*
	* But using the addition formulae for sin and cos, plus the special values for sin/cos of `π/4`.
	*/
	_$sincos_619( sc, x );
	return f * ( ( rc * (sc[1]+sc[0]) ) - ( (y*rs) * (sc[0]-sc[1]) ) );
}


// EXPORTS //

var _$j0_426 = j0;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the first kind of order zero.
*
* @module @stdlib/math/base/special/besselj0
*
* @example
* var j0 = require( '@stdlib/math/base/special/besselj0' );
*
* var v = j0( 0.0 );
* // returns 1.0
*
* v = j0( 1.0 );
* // returns ~0.765
*
* v = j0( Infinity );
* // returns 0.0
*
* v = j0( -Infinity );
* // returns 0.0
*
* v = j0( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$j0_426 = require( './j0.js' ); */;


// EXPORTS //

var _$j0_425 = _$j0_426;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$j0_425 = require( '@stdlib/math/base/special/besselj0' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the Bessel function of the first kind of order zero.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterBesselj0( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBesselj0( iterator ) {
	return _$iterator_811( iterator, _$j0_425 );
}


// EXPORTS //

var _$iterBesselj0_734 = iterBesselj0;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the Bessel function of the first kind of order zero.
*
* @module @stdlib/math/iter/special/besselj0
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterBesselj0 = require( '@stdlib/math/iter/special/besselj0' );
*
* var iter = iterBesselj0( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBesselj0_734 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_733 = _$iterBesselj0_734;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-sqrt-pi
* @type {number}
*
* @example
* var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
* // returns 1.7724538509055160
*/


// MAIN //

/**
* Square root of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.7724538509055160
* @see [OEIS]{@link https://oeis.org/A002161}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;


// EXPORTS //

var _$SQRT_PI_241 = SQRT_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_433( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.03405537391318949;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -142585098013.66644 + (x * (6678104126.14924 + (x * (-115486967.64841276 + (x * (980629.0409895825 + (x * (-4461.579298277507 + (x * (10.650724020080236 + (x * -0.010767857011487301))))))))))); // eslint-disable-line max-len
		s2 = 4186860446082.0176 + (x * (42091902282.58013 + (x * (202283751.40097034 + (x * (591176.1449417479 + (x * (1074.227223951738 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.010767857011487301 + (x * (10.650724020080236 + (x * (-4461.579298277507 + (x * (980629.0409895825 + (x * (-115486967.64841276 + (x * (6678104126.14924 + (x * -142585098013.66644))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (1.0 + (x * (1074.227223951738 + (x * (591176.1449417479 + (x * (202283751.40097034 + (x * (42091902282.58013 + (x * 4186860446082.0176))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_433 = __evalrational_433;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_434( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.010158790774176108;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -17527881995806512.0 + (x * (1660853173129901.8 + (x * (-36658018905416.664 + (x * (355806656709.1062 + (x * (-1811393126.9860668 + (x * (5079326.614801118 + (x * (-7502.334222078161 + (x * 4.6179191852758255))))))))))))); // eslint-disable-line max-len
		s2 = 1725390588844768000.0 + (x * (17128800897135812.0 + (x * (84899346165481.42 + (x * (276227772862.44086 + (x * (648725028.9959639 + (x * (1126712.5065029138 + (x * (1388.6978985861358 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 4.6179191852758255 + (x * (-7502.334222078161 + (x * (5079326.614801118 + (x * (-1811393126.9860668 + (x * (355806656709.1062 + (x * (-36658018905416.664 + (x * (1660853173129901.8 + (x * -17527881995806512.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1388.6978985861358 + (x * (1126712.5065029138 + (x * (648725028.9959639 + (x * (276227772862.44086 + (x * (84899346165481.42 + (x * (17128800897135812.0 + (x * 1725390588844768000.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_434 = __evalrational_434;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_435( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_435 = __evalrational_435;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_436( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.046875;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_436 = __evalrational_436;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j1.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$sincos_619 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$SQRT_PI_241 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$evalrational_433 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_434 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_435 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_436 = require( './rational_psqs.js' ); */;


// VARIABLES //

var __x1_432 = 3.8317059702075123156e+00;
var __x2_432 = 7.0155866698156187535e+00;
var __x11_432 = 9.810e+02;
var __x12_432 = -3.2527979248768438556e-04;
var __x21_432 = 1.7960e+03;
var __x22_432 = -3.8330184381246462950e-05;

// `sincos` workspace:
var __sc_432 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the first kind of order one.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = j1( 0.0 );
* // returns 0.0
*
* v = j1( 1.0 );
* // returns ~0.440
*
* v = j1( Infinity );
* // returns 0.0
*
* v = j1( -Infinity );
* // returns 0.0
*
* v = j1( NaN );
* // returns NaN
*/
function j1( x ) {
	var value;
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var f;
	var w;

	w = _$abs_390( x );
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( w === _$FLOAT64_PINF_238 ) {
		return 0.0;
	}
	if ( w <= 4.0 ) {
		y = x * x;
		r = _$evalrational_433( y );
		f = w * ( w+__x1_432 ) * ( ( w - (__x11_432/256.0) ) - __x12_432 );
		value = f * r;
	} else if ( w <= 8.0 ) {
		y = x * x;
		r = _$evalrational_434( y );
		f = w * ( w+__x2_432 ) * ( ( w - (__x21_432/256.0) ) - __x22_432 );
		value = f * r;
	} else {
		y = 8.0 / w;
		y2 = y * y;
		rc = _$evalrational_435( y2 );
		rs = _$evalrational_436( y2 );
		f = 1.0 / ( _$sqrt_625( w ) * _$SQRT_PI_241 );

		/*
		* What follows is really just:
		*
		* ```
		* z = w - 0.75 * pi;
		* value = f * ( rc * cos( z ) - y * rs * sin( z ) );
		* ```
		*
		* but using the sin/cos addition rules plus constants for the values of sin/cos of `3π/4` which then cancel out with corresponding terms in "f".
		*/
		_$sincos_619( __sc_432, w );
		value = f * ( ( rc * (__sc_432[0]-__sc_432[1]) ) + ( (y*rs) * (__sc_432[0]+__sc_432[1]) ) );
	}
	if ( x < 0.0 ) {
		value *= -1.0;
	}
	return value;
}


// EXPORTS //

var _$j1_432 = j1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the first kind of order one.
*
* @module @stdlib/math/base/special/besselj1
*
* @example
* var j1 = require( '@stdlib/math/base/special/besselj1' );
*
* var v = j1( 0.0 );
* // returns 0.0
*
* v = j1( 1.0 );
* // returns ~0.440
*
* v = j1( Infinity );
* // returns 0.0
*
* v = j1( -Infinity );
* // returns 0.0
*
* v = j1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$j1_432 = require( './j1.js' ); */;


// EXPORTS //

var _$j1_431 = _$j1_432;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$j1_431 = require( '@stdlib/math/base/special/besselj1' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the Bessel function of the first kind of order one.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterBesselj1( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBesselj1( iterator ) {
	return _$iterator_811( iterator, _$j1_431 );
}


// EXPORTS //

var _$iterBesselj1_736 = iterBesselj1;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the Bessel function of the first kind of order one.
*
* @module @stdlib/math/iter/special/besselj1
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterBesselj1 = require( '@stdlib/math/iter/special/besselj1' );
*
* var iter = iterBesselj1( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBesselj1_736 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_735 = _$iterBesselj1_736;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_438( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.18214429522164177;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 107235387820.03177 + (x * (-8371625545.12605 + (x * (204222743.5737662 + (x * (-2128754.84744018 + (x * (10102.532948020907 + (x * -18.402381979244993))))))))); // eslint-disable-line max-len
		s2 = 588738657389.9703 + (x * (8161718777.729036 + (x * (55662956.624278255 + (x * (238893.93209447255 + (x * (664.7598668924019 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -18.402381979244993 + (x * (10102.532948020907 + (x * (-2128754.84744018 + (x * (204222743.5737662 + (x * (-8371625545.12605 + (x * 107235387820.03177))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (664.7598668924019 + (x * (238893.93209447255 + (x * (55662956.624278255 + (x * (8161718777.729036 + (x * 588738657389.9703))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_438 = __evalrational_438;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_439( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.051200622130023854;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -22213976967566.19 + (x * (-551074352067.2264 + (x * (43600098638.60306 + (x * (-695904393.9461962 + (x * (4690528.861167863 + (x * (-14566.865832663636 + (x * 17.427031242901595))))))))))); // eslint-disable-line max-len
		s2 = 433861465807072.6 + (x * (5426682441941.234 + (x * (34015103849.97124 + (x * (139602027.7098683 + (x * (406699.82352539554 + (x * (830.3085761207029 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 17.427031242901595 + (x * (-14566.865832663636 + (x * (4690528.861167863 + (x * (-695904393.9461962 + (x * (43600098638.60306 + (x * (-551074352067.2264 + (x * -22213976967566.19))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (830.3085761207029 + (x * (406699.82352539554 + (x * (139602027.7098683 + (x * (34015103849.97124 + (x * (5426682441941.234 + (x * 433861465807072.6))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_439 = __evalrational_439;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_440( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.023356489432789604;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8072872690515021.0 + (x * (670166418691732.4 + (x * (-128299123640.88687 + (x * (-193630512667.72083 + (x * (2195882717.0518103 + (x * (-10085539.923498211 + (x * (21363.5341693139 + (x * -17.439661319197498))))))))))))); // eslint-disable-line max-len
		s2 = 345637246288464600.0 + (x * (3927242556964031.0 + (x * (22598377924042.9 + (x * (86926121104.20982 + (x * (247272194.75672302 + (x * (539247.3920976806 + (x * (879.0336216812844 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -17.439661319197498 + (x * (21363.5341693139 + (x * (-10085539.923498211 + (x * (2195882717.0518103 + (x * (-193630512667.72083 + (x * (-128299123640.88687 + (x * (670166418691732.4 + (x * -8072872690515021.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (879.0336216812844 + (x * (539247.3920976806 + (x * (247272194.75672302 + (x * (86926121104.20982 + (x * (22598377924042.9 + (x * (3927242556964031.0 + (x * 345637246288464600.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_440 = __evalrational_440;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_441( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len
		s2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_441 = __evalrational_441;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_442( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.015625;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len
		s2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_442 = __evalrational_442;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y0.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$SQRT_PI_241 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sincos_619 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$j0_425 = require( '@stdlib/math/base/special/besselj0' ); */;
/* removed: var _$evalrational_438 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_439 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_440 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_441 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_442 = require( './rational_psqs.js' ); */;


// VARIABLES //

var __ONE_DIV_SQRT_PI_443 = 1.0 / _$SQRT_PI_241;
var TWO_DIV_PI = 2.0 / _$PI_237;

var __x1_443 = 8.9357696627916752158e-01;
var __x2_443 = 3.9576784193148578684e+00;
var x3 = 7.0860510603017726976e+00;
var __x11_443 = 2.280e+02;
var __x12_443 = 2.9519662791675215849e-03;
var __x21_443 = 1.0130e+03;
var __x22_443 = 6.4716931485786837568e-04;
var x31 = 1.8140e+03;
var x32 = 1.1356030177269762362e-04;

// `sincos` workspace:
var __sc_443 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the second kind of order zero.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( Infinity );
* // returns 0.0
*
* v = y0( -Infinity );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/
function y0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_235;
	}
	if ( x === _$FLOAT64_PINF_238 ) {
		return 0.0;
	}
	if ( x <= 3.0 ) {
		y = x * x;
		z = ( _$ln_561( x/__x1_443 ) * _$j0_425( x ) ) * TWO_DIV_PI;
		r = _$evalrational_438( y );
		f = ( x+__x1_443 ) * ( ( x - (__x11_443/256.0) ) - __x12_443 );
		return z + ( f*r );
	}
	if ( x <= 5.5 ) {
		y = x * x;
		z = ( _$ln_561( x/__x2_443 ) * _$j0_425( x ) ) * TWO_DIV_PI;
		r = _$evalrational_439( y );
		f = ( x+__x2_443 ) * ( (x - (__x21_443/256.0)) - __x22_443 );
		return z + ( f*r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( _$ln_561( x/x3 ) * _$j0_425( x ) ) * TWO_DIV_PI;
		r = _$evalrational_440( y );
		f = ( x+x3 ) * ( (x - (x31/256.0)) - x32 );
		return z + ( f*r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = _$evalrational_441( y2 );
	rs = _$evalrational_442( y2 );
	f = __ONE_DIV_SQRT_PI_443 / _$sqrt_625( x );

	/*
	* The following code is really just:
	*
	* ```
	* z = x - 0.25 * pi;
	* value = f * ( rc * sin( z ) + y * rs * cos( z ) );
	* ```
	*
	* But using the sin/cos addition formulae and constant values for sin/cos of `π/4` which then cancel part of the "f" term as they're all `1/sqrt(2)`:
	*/
	_$sincos_619( __sc_443, x );
	return f * ( ( rc * (__sc_443[0]-__sc_443[1]) ) + ( (y*rs) * (__sc_443[1]+__sc_443[0]) ) );
}


// EXPORTS //

var _$y0_443 = y0;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the second kind of order zero.
*
* @module @stdlib/math/base/special/bessely0
*
* @example
* var y0 = require( '@stdlib/math/base/special/bessely0' );
*
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( Infinity );
* // returns 0.0
*
* v = y0( -Infinity );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$y0_443 = require( './y0.js' ); */;


// EXPORTS //

var _$y0_437 = _$y0_443;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$y0_437 = require( '@stdlib/math/base/special/bessely0' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the Bessel function of the second kind of order zero.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterBessely0( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBessely0( iterator ) {
	return _$iterator_811( iterator, _$y0_437 );
}


// EXPORTS //

var _$iterBessely0_738 = iterBessely0;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the Bessel function of the second kind of order zero.
*
* @module @stdlib/math/iter/special/bessely0
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterBessely0 = require( '@stdlib/math/iter/special/bessely0' );
*
* var iter = iterBessely0( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBessely0_738 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_737 = _$iterBessely0_738;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_445( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.13187550549740895;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 40535726612579.55 + (x * (5470861171652.543 + (x * (-375959744978.196 + (x * (7214454821.450256 + (x * (-59157479.9974084 + (x * (221579.5322228026 + (x * -317.1442466004613))))))))))); // eslint-disable-line max-len
		s2 = 307378739210792.9 + (x * (4127228620040.646 + (x * (27800352738.690586 + (x * (122504351.22182964 + (x * (381364.70753052575 + (x * (820.7990816839387 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -317.1442466004613 + (x * (221579.5322228026 + (x * (-59157479.9974084 + (x * (7214454821.450256 + (x * (-375959744978.196 + (x * (5470861171652.543 + (x * 40535726612579.55))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (820.7990816839387 + (x * (381364.70753052575 + (x * (122504351.22182964 + (x * (27800352738.690586 + (x * (4127228620040.646 + (x * 307378739210792.9))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_445 = __evalrational_445;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_446( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.021593919914419626;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 11514276357909012000.0 + (x * (-5680809457472421000.0 + (x * (-23638408497043136.0 + (x * (4068627528980474.5 + (x * (-59530713129741.984 + (x * (374536739624.3849 + (x * (-1195796191.2070618 + (x * (1915380.6858264203 + (x * -1233.7180442012952))))))))))))))); // eslint-disable-line max-len
		s2 = 533218443133161800000.0 + (x * (5696819882285718000.0 + (x * (30837179548112880.0 + (x * (111870100658569.7 + (x * (302217668529.60406 + (x * (635503180.8708892 + (x * (1045374.8201934079 + (x * (1285.516484932161 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -1233.7180442012952 + (x * (1915380.6858264203 + (x * (-1195796191.2070618 + (x * (374536739624.3849 + (x * (-59530713129741.984 + (x * (4068627528980474.5 + (x * (-23638408497043136.0 + (x * (-5680809457472421000.0 + (x * 11514276357909012000.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1285.516484932161 + (x * (1045374.8201934079 + (x * (635503180.8708892 + (x * (302217668529.60406 + (x * (111870100658569.7 + (x * (30837179548112880.0 + (x * (5696819882285718000.0 + (x * 533218443133161800000.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_446 = __evalrational_446;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_447( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_447 = __evalrational_447;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_448( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.046875;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_448 = __evalrational_448;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y1.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$SQRT_PI_241 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sincos_619 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$j1_431 = require( '@stdlib/math/base/special/besselj1' ); */;
/* removed: var _$evalrational_445 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_446 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_447 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_448 = require( './rational_psqs.js' ); */;


// VARIABLES //

var __ONE_DIV_SQRT_PI_449 = 1.0 / _$SQRT_PI_241;
var __TWO_DIV_PI_449 = 2.0 / _$PI_237;

var __x1_449 = 2.1971413260310170351e+00;
var __x2_449 = 5.4296810407941351328e+00;
var __x11_449 = 5.620e+02;
var __x12_449 = 1.8288260310170351490e-03;
var __x21_449 = 1.3900e+03;
var __x22_449 = -6.4592058648672279948e-06;

// `sincos` workspace:
var __sc_449 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the second kind of order one.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = y1( 0.0 );
* // returns -Infinity
*
* v = y1( 1.0 );
* // returns ~-0.781
*
* v = y1( -1.0 );
* // returns NaN
*
* v = y1( Infinity );
* // returns 0.0
*
* v = y1( -Infinity );
* // returns NaN
*
* v = y1( NaN );
* // returns NaN
*/
function y1( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_235;
	}
	if ( x === _$FLOAT64_PINF_238 ) {
		return 0.0;
	}
	if ( x <= 4.0 ) {
		y = x * x;
		z = ( _$ln_561( x/__x1_449 ) * _$j1_431( x ) ) * __TWO_DIV_PI_449;
		r = _$evalrational_445( y );
		f = ( ( x+__x1_449 ) * ( (x - (__x11_449/256.0)) - __x12_449 ) ) / x;
		return z + ( f*r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( _$ln_561( x/__x2_449 ) * _$j1_431( x ) ) * __TWO_DIV_PI_449;
		r = _$evalrational_446( y );
		f = ( ( x+__x2_449 ) * ( (x - (__x21_449/256.0)) - __x22_449 ) ) / x;
		return z + ( f*r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = _$evalrational_447( y2 );
	rs = _$evalrational_448( y2 );
	f = __ONE_DIV_SQRT_PI_449 / _$sqrt_625( x );

	/*
	* This code is really just:
	*
	* ```
	* z = x - 0.75 * PI;
	* return f * (rc * sin(z) + y * rs * cos(z));
	* ```
	*
	* But using the sin/cos addition rules, plus constants for sin/cos of `3π/4` which then cancel out with corresponding terms in "f".
	*/
	_$sincos_619( __sc_449, x );
	return f * ( ( ( (y*rs) * (__sc_449[0]-__sc_449[1]) ) - ( rc * (__sc_449[0]+__sc_449[1]) ) ) );
}


// EXPORTS //

var _$y1_449 = y1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the second kind of order one.
*
* @module @stdlib/math/base/special/bessely1
*
* @example
* var y1 = require( '@stdlib/math/base/special/bessely1' );
*
* var v = y1( 0.0 );
* // returns -Infinity
*
* v = y1( 1.0 );
* // returns ~-0.781
*
* v = y1( -1.0 );
* // returns NaN
*
* v = y1( Infinity );
* // returns 0.0
*
* v = y1( -Infinity );
* // returns NaN
*
* v = y1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$y1_449 = require( './y1.js' ); */;


// EXPORTS //

var _$y1_444 = _$y1_449;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$y1_444 = require( '@stdlib/math/base/special/bessely1' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the Bessel function of the second kind of order one.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterBessely1( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBessely1( iterator ) {
	return _$iterator_811( iterator, _$y1_444 );
}


// EXPORTS //

var _$iterBessely1_740 = iterBessely1;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the Bessel function of the second kind of order one.
*
* @module @stdlib/math/iter/special/bessely1
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterBessely1 = require( '@stdlib/math/iter/special/bessely1' );
*
* var iter = iterBessely1( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBessely1_740 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_739 = _$iterBessely1_740;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Euler's number.
*
* @module @stdlib/constants/math/float64-e
* @type {number}
*
* @example
* var E = require( '@stdlib/constants/math/float64-e' );
* // returns 2.718281828459045
*/


// MAIN //

/**
* Euler's number.
*
* @constant
* @type {number}
* @default 2.718281828459045
* @see [OEIS]{@link https://oeis.org/A001113}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
*/
var E = 2.718281828459045235360287471352662497757247093699959574966;


// EXPORTS //

var _$E_218 = E;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

var _$FLOAT64_EPSILON_219 = FLOAT64_EPSILON;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_452( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_452 = __evalrational_452;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_570 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$E_218 = require( '@stdlib/constants/math/float64-e' ); */;
/* removed: var _$FLOAT64_EPSILON_219 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$evalrational_452 = require( './lanczos_sum_expg_scaled.js' ); */; // Lanczos approximation scaled by exp(G)


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;


// MAIN //

/**
* Evaluate the beta function.
*
* @param {NonNegativeNumber} a - input value
* @param {NonNegativeNumber} b - input value
* @returns {number} evaluated beta function
*
* @example
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* @example
* var v = beta( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = beta( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* @example
* var v = beta( 4.0, 1.0 );
* // returns 0.25
*
* @example
* var v = beta( NaN, 2.0 );
* // returns NaN
*/
function beta( a, b ) {
	var ambh;
	var agh;
	var bgh;
	var cgh;
	var res;
	var tmp;
	var c;

	if ( _$isnan_370( a ) || _$isnan_370( b ) ) {
		return NaN;
	}
	if ( a < 0.0 || b < 0.0 ) {
		return NaN;
	}
	if ( b === 1.0 ) {
		return 1.0 / a;
	}
	if ( a === 1.0 ) {
		return 1.0 / b;
	}
	c = a + b;
	if ( c < _$FLOAT64_EPSILON_219 ) {
		res = c / a;
		res /= b;
		return res;
	}

	// Special cases:
	if ( c === a && b < _$FLOAT64_EPSILON_219 ) {
		return 1.0 / b;
	}
	if ( c === b && a < _$FLOAT64_EPSILON_219 ) {
		return 1.0 / a;
	}

	if ( a < b ) {
		// Swap `a` and `b`:
		tmp = b;
		b = a;
		a = tmp;
	}

	// Lanczos calculation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	res = _$evalrational_452( a ) * ( _$evalrational_452( b )/_$evalrational_452( c ) ); // eslint-disable-line max-len
	ambh = a - 0.5 - b;
	if ( ( _$abs_390( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {
		// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:
		res *= _$exp_512( ambh * _$log1p_570( -b/cgh ) );
	} else {
		res *= _$pow_579( agh/cgh, ambh );
	}
	if ( cgh > 1.0e10 ) {
		// This avoids possible overflow, but appears to be marginally less accurate:
		res *= _$pow_579( (agh/cgh)*(bgh/cgh), b );
	} else {
		res *= _$pow_579( (agh*bgh)/(cgh*cgh), b );
	}
	res *= _$sqrt_625( _$E_218/bgh);
	return res;
}


// EXPORTS //

var _$beta_450 = beta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the beta function.
*
* @module @stdlib/math/base/special/beta
*
* @example
* var beta = require( '@stdlib/math/base/special/beta' );
*
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* v = beta( 1.0, 1.0 );
* // returns 1.0
*
* v = beta( -1.0, 2.0 );
* // returns NaN
*
* v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* v = beta( 4.0, 1.0 );
* // returns 0.25
*
* v = beta( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$beta_450 = require( './beta.js' ); */;


// EXPORTS //

var _$beta_451 = _$beta_450;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_814 = require( '@stdlib/math/iter/tools/map2' ); */;
/* removed: var _$beta_451 = require( '@stdlib/math/base/special/beta' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the beta function.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {(Iterator|number)} x - input iterator
* @param {(Iterator|number)} y - input iterator
* @throws {TypeError} first argument must be either an iterator protocol-compliant object or a number
* @throws {TypeError} second argument must be either an iterator protocol-compliant object or a number
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var x = uniform( 0.0, 2.0 );
* var y = uniform( 0.0, 2.0 );
*
* var iter = iterBeta( x, y );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBeta( x, y ) {
	return _$iterator_814( x, y, _$beta_451 );
}


// EXPORTS //

var _$iterBeta_742 = iterBeta;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the beta function.
*
* @module @stdlib/math/iter/special/beta
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterBeta = require( '@stdlib/math/iter/special/beta' );
*
* var x = uniform( 0.0, 2.0 );
* var y = uniform( 0.0, 2.0 );
*
* var iter = iterBeta( x, y );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBeta_742 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_741 = _$iterBeta_742;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelCos_549 = require( '@stdlib/math/base/special/kernel-cos' ); */;
/* removed: var _$kernelSin_553 = require( '@stdlib/math/base/special/kernel-sin' ); */;
/* removed: var _$rempio2_594 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Scratch array for storing temporary values:
var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;

	ix = _$getHighWord_828( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< pi/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: x < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return 1.0;
		}
		return _$kernelCos_549( x, 0.0 );
	}
	// Case: cos(Inf or NaN) is NaN */
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = _$rempio2_594( x, buffer );
	switch ( n & 3 ) {
	case 0:
		return _$kernelCos_549( buffer[ 0 ], buffer[ 1 ] );
	case 1:
		return -_$kernelSin_553( buffer[ 0 ], buffer[ 1 ] );
	case 2:
		return -_$kernelCos_549( buffer[ 0 ], buffer[ 1 ] );
	default:
		return _$kernelSin_553( buffer[ 0 ], buffer[ 1 ] );
	}
}


// EXPORTS //

var _$cos_468 = cos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

// MODULES //

/* removed: var _$cos_468 = require( './cos.js' ); */;


// EXPORTS //

var _$cos_469 = _$cos_468;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Notes:
*	=> sin(-x) = -sin(x)
*	=> sin(+n) = +0, where `n` is a positive integer
*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
*	=> cos(-x) = cos(x)
*/


// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$cos_469 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_615 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$copysign_467 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the value of `sin(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = sinpi( 0.0 );
* // returns 0.0
*
* @example
* var y = sinpi( 0.5 );
* // returns 1.0
*
* @example
* var y = sinpi( 0.9 );
* // returns ~0.309
*
* @example
* var y = sinpi( NaN );
* // returns NaN
*/
function sinpi( x ) {
	var ar;
	var r;
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_366( x ) ) {
		return NaN;
	}
	// Argument reduction (reduce to [0,2))...
	r = x % 2.0; // sign preserving
	ar = _$abs_390( r );

	// If `x` is an integer, the mod is an integer...
	if ( ar === 0.0 || ar === 1.0 ) {
		return _$copysign_467( 0.0, r );
	}
	if ( ar < 0.25 ) {
		return _$sin_615( _$PI_237*r );
	}
	// In each of the following, we further reduce to [-π/4,π/4)...
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		return _$copysign_467( _$cos_469( _$PI_237*ar ), r );
	}
	if ( ar < 1.25 ) {
		r = _$copysign_467( 1.0, r ) - r;
		return _$sin_615( _$PI_237*r );
	}
	if ( ar < 1.75 ) {
		ar -= 1.5;
		return -_$copysign_467( _$cos_469( _$PI_237*ar ), r );
	}
	r -= _$copysign_467( 2.0, r );
	return _$sin_615( _$PI_237*r );
}


// EXPORTS //

var _$sinpi_624 = sinpi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the value of `sin(πx)`.
*
* @module @stdlib/math/base/special/sinpi
*
* @example
* var sinpi = require( '@stdlib/math/base/special/sinpi' );
*
* var y = sinpi( 0.0 );
* // returns 0.0
*
* y = sinpi( 0.5 );
* // returns 1.0
*
* y = sinpi( 0.9 );
* // returns ~0.309
*
* y = sinpi( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinpi_624 = require( './sinpi.js' ); */;


// EXPORTS //

var _$sinpi_623 = _$sinpi_624;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_537( x ) {
	if ( x === 0.0 ) {
		return 0.06735230105312927;
	}
	return 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_537 = __evalpoly_537;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_538( x ) {
	if ( x === 0.0 ) {
		return 0.020580808432516733;
	}
	return 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_538 = __evalpoly_538;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_539( x ) {
	if ( x === 0.0 ) {
		return 1.3920053346762105;
	}
	return 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_539 = __evalpoly_539;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_540( x ) {
	if ( x === 0.0 ) {
		return 0.21498241596060885;
	}
	return 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_540 = __evalpoly_540;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_541( x ) {
	if ( x === 0.0 ) {
		return -0.032788541075985965;
	}
	return -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_541 = __evalpoly_541;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_542( x ) {
	if ( x === 0.0 ) {
		return 0.01797067508118204;
	}
	return 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_542 = __evalpoly_542;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_543( x ) {
	if ( x === 0.0 ) {
		return -0.010314224129834144;
	}
	return -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_543 = __evalpoly_543;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_544( x ) {
	if ( x === 0.0 ) {
		return 0.6328270640250934;
	}
	return 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_544 = __evalpoly_544;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_545( x ) {
	if ( x === 0.0 ) {
		return 2.4559779371304113;
	}
	return 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_545 = __evalpoly_545;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_546( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333297;
	}
	return 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_546 = __evalpoly_546;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$trunc_629 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalpoly_537 = require( './polyval_a1.js' ); */;
/* removed: var _$evalpoly_538 = require( './polyval_a2.js' ); */;
/* removed: var _$evalpoly_539 = require( './polyval_r.js' ); */;
/* removed: var _$evalpoly_540 = require( './polyval_s.js' ); */;
/* removed: var _$evalpoly_541 = require( './polyval_t1.js' ); */;
/* removed: var _$evalpoly_542 = require( './polyval_t2.js' ); */;
/* removed: var _$evalpoly_543 = require( './polyval_t3.js' ); */;
/* removed: var _$evalpoly_544 = require( './polyval_u.js' ); */;
/* removed: var _$evalpoly_545 = require( './polyval_v.js' ); */;
/* removed: var _$evalpoly_546 = require( './polyval_w.js' ); */;


// VARIABLES //

var A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8
var A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD
var RC = 1.0;
var SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2
var T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509
var T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B
var UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var VC = 1.0;
var WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69
var YMIN = 1.461632144968362245;
var TWO52 = 4503599627370496; // 2**52
var TWO58 = 288230376151711744; // 2**58
var __TINY_535 = 8.470329472543003e-22;
var TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F
var TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42
var TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function.
*
* ## Method
*
* 1.  Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in \[0,8]\\), we may reduce \\(x\\) to a number in \\(\[1.5,2.5]\\) by
*
*     ```tex
*     \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
*     ```
*
*     For example,
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
*     &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
*     &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
*     \end{align*}
*     ```
*
* 2.  Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\(\[\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\(\[1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
*
*     ```tex
*     \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
*     ```
*
*     where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
*
* 3.  Compute a rational approximation in the primary interval \\(\[2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
*
*     ```tex
*     \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
*     ```
*
*     with accuracy
*
*     ```tex
*     \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
*     ```
*
*     The algorithms are based on the observation
*
*     ```tex
*     \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
*     ```
*
*     where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
*
* 4.  For \\(x \geq 8\\),
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
*     ```
*
*     which can be expressed
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
*     ```
*
*     Let \\(z = \frac{1}{x}\\). We can then use the approximation
*
*     ```tex
*     f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
*     ```
*
*     by
*
*     ```tex
*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
*     ```
*
*     where
*
*     ```tex
*     |w - f(z)| < 2^{-58.74}
*     ```
*
* 5.  For negative \\(x\\), since
*
*     ```tex
*     -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
*     ```
*
*     where \\(\Gamma\\) is the gamma function, we have
*
*     ```tex
*     \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
*     ```
*
*     Since \\(\Gamma(-x)\\) is positive,
*
*     ```tex
*     \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     for \\(x < 0\\). Hence, for \\(x < 0\\),
*
*     ```tex
*     \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     and
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
*     &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
*
*     <!-- </note> -->
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
* \operatorname{lgamma}(1) &= 0 & \\
* \operatorname{lgamma}(2) &= 0 & \\
* \operatorname{lgamma}(0) &= \infty & \\
* \operatorname{lgamma}(\infty) &= \infty & \\
* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammaln( 1.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 2.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 4.0 );
* // returns ~1.792
*
* @example
* var v = gammaln( -0.5 );
* // returns ~1.266
*
* @example
* var v = gammaln( 0.5 );
* // returns ~0.572
*
* @example
* var v = gammaln( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaln( NaN );
* // returns NaN
*/
function gammaln( x ) {
	var isNegative;
	var nadj;
	var flg;
	var p3;
	var p2;
	var p1;
	var p;
	var q;
	var t;
	var w;
	var y;
	var z;
	var r;

	// Special cases: NaN, +-infinity
	if ( _$isnan_370( x ) || _$isInfinite_366( x ) ) {
		return x;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_238;
	}
	if ( x < 0.0 ) {
		isNegative = true;
		x = -x;
	} else {
		isNegative = false;
	}
	// If |x| < 2**-70, return -ln(|x|)
	if ( x < __TINY_535 ) {
		return -_$ln_561( x );
	}
	if ( isNegative ) {
		// If |x| >= 2**52, must be -integer
		if ( x >= TWO52 ) {
			return _$FLOAT64_PINF_238;
		}
		t = _$sinpi_623( x );
		if ( t === 0.0 ) {
			return _$FLOAT64_PINF_238;
		}
		nadj = _$ln_561( _$PI_237 / _$abs_390( t*x ) );
	}
	// If x equals 1 or 2, return 0
	if ( x === 1.0 || x === 2.0 ) {
		return 0.0;
	}
	// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)
	if ( x < 2.0 ) {
		if ( x <= 0.9 ) {
			r = -_$ln_561( x );

			// 0.7316 <= x <=  0.9
			if ( x >= ( YMIN - 1.0 + 0.27 ) ) {
				y = 1.0 - x;
				flg = 0;
			}
			// 0.2316 <= x < 0.7316
			else if ( x >= (YMIN - 1.0 - 0.27) ) {
				y = x - (TC - 1.0);
				flg = 1;
			}
			// 0 < x < 0.2316
			else {
				y = x;
				flg = 2;
			}
		} else {
			r = 0.0;

			// 1.7316 <= x < 2
			if ( x >= (YMIN + 0.27) ) {
				y = 2.0 - x;
				flg = 0;
			}
			// 1.2316 <= x < 1.7316
			else if ( x >= (YMIN - 0.27) ) {
				y = x - TC;
				flg = 1;
			}
			// 0.9 < x < 1.2316
			else {
				y = x - 1.0;
				flg = 2;
			}
		}
		switch ( flg ) { // eslint-disable-line default-case
		case 0:
			z = y * y;
			p1 = A1C + (z*_$evalpoly_537( z ));
			p2 = z * (A2C + (z*_$evalpoly_538( z )));
			p = (y*p1) + p2;
			r += ( p - (0.5*y) );
			break;
		case 1:
			z = y * y;
			w = z * y;
			p1 = T1C + (w*_$evalpoly_541( w ));
			p2 = T2C + (w*_$evalpoly_542( w ));
			p3 = T3C + (w*_$evalpoly_543( w ));
			p = (z*p1) - (TT - (w*(p2+(y*p3))));
			r += ( TF + p );
			break;
		case 2:
			p1 = y * (UC + (y*_$evalpoly_544( y )));
			p2 = VC + (y*_$evalpoly_545( y ));
			r += (-0.5*y) + (p1/p2);
			break;
		}
	}
	// 2 <= x < 8
	else if ( x < 8.0 ) {
		flg = _$trunc_629( x );
		y = x - flg;
		p = y * (SC + (y*_$evalpoly_540( y )));
		q = RC + (y*_$evalpoly_539( y ));
		r = (0.5*y) + (p/q);
		z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)
		switch ( flg ) { // eslint-disable-line default-case
		case 7:
			z *= y + 6.0;

			/* falls through */
		case 6:
			z *= y + 5.0;

			/* falls through */
		case 5:
			z *= y + 4.0;

			/* falls through */
		case 4:
			z *= y + 3.0;

			/* falls through */
		case 3:
			z *= y + 2.0;
			r += _$ln_561( z );
		}
	}
	// 8 <= x < 2**58
	else if ( x < TWO58 ) {
		t = _$ln_561( x );
		z = 1.0 / x;
		y = z * z;
		w = WC + (z*_$evalpoly_546( y ));
		r = ((x-0.5)*(t-1.0)) + w;
	}
	// 2**58 <= x <= Inf
	else {
		r = x * ( _$ln_561(x)-1.0 );
	}
	if ( isNegative ) {
		r = nadj - r;
	}
	return r;
}


// EXPORTS //

var _$gammaln_535 = gammaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the gamma function.
*
* @module @stdlib/math/base/special/gammaln
*
* @example
* var gammaln = require( '@stdlib/math/base/special/gammaln' );
*
* var v = gammaln( 1.0 );
* // returns 0.0
*
* v = gammaln( 2.0 );
* // returns 0.0
*
* v = gammaln( 4.0 );
* // returns ~1.792
*
* v = gammaln( -0.5 );
* // returns ~1.266
*
* v = gammaln( 0.5 );
* // returns ~0.572
*
* v = gammaln( 0.0 );
* // returns Infinity
*
* v = gammaln( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaln_535 = require( './gammaln.js' ); */;


// EXPORTS //

var _$gammaln_536 = _$gammaln_535;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/
function isPositiveZero( x ) {
	return (x === 0.0 && 1.0/x === _$FLOAT64_PINF_238);
}


// EXPORTS //

var _$isPositiveZero_383 = isPositiveZero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isPositiveZero_383 = require( './main.js' ); */;


// EXPORTS //

var _$isPositiveZero_382 = _$isPositiveZero_383;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveZero_382 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/
function max( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( _$isnan_370( x ) || _$isnan_370( y ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_PINF_238 || y === _$FLOAT64_PINF_238 ) {
			return _$FLOAT64_PINF_238;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isPositiveZero_382( x ) ) {
				return x;
			}
			return y;
		}
		if ( x > y ) {
			return x;
		}
		return y;
	}
	m = _$FLOAT64_NINF_235;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_370( v ) || v === _$FLOAT64_PINF_238 ) {
			return v;
		}
		if ( v > m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			_$isPositiveZero_382( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

var _$max_574 = max;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$max_574 = require( './max.js' ); */;


// EXPORTS //

var _$max_573 = _$max_574;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeZero_374 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/
function min( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( _$isnan_370( x ) || _$isnan_370( y ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_235 || y === _$FLOAT64_NINF_235 ) {
			return _$FLOAT64_NINF_235;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isNegativeZero_374( x ) ) {
				return x;
			}
			return y;
		}
		if ( x < y ) {
			return x;
		}
		return y;
	}
	m = _$FLOAT64_PINF_238;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_370( v ) || v === _$FLOAT64_NINF_235 ) {
			return v;
		}
		if ( v < m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			_$isNegativeZero_374( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

var _$min_576 = min;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

// MODULES //

/* removed: var _$min_576 = require( './min.js' ); */;


// EXPORTS //

var _$min_575 = _$min_576;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the square root of `2π`.
*
* @module @stdlib/constants/math/float64-ln-sqrt-two-pi
* @type {number}
*
* @example
* var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
* // returns 0.9189385332046728
*/


// MAIN //

/**
* Natural logarithm of the square root of `2π`.
*
* ```tex
* \ln \sqrt{2\pi}
* ```
*
* @constant
* @type {number}
* @default 0.9189385332046728
*/
var LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len


// EXPORTS //

var _$LN_SQRT_TWO_PI_226 = LN_SQRT_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// VARIABLES //

var ALGMCS = [
	+0.1276642195630062933333333333333e-30,
	-0.3401102254316748799999999999999e-29,
	+0.1025680058010470912000000000000e-27,
	-0.3547598158101070547199999999999e-26,
	+0.1429227355942498147573333333333e-24,
	-0.6831888753985766870111999999999e-23,
	+0.3962837061046434803679306666666e-21,
	-0.2868042435334643284144622399999e-19,
	+0.2683181998482698748957538846666e-17,
	-0.3399615005417721944303330599666e-15,
	+0.6221098041892605227126015543416e-13,
	-0.1809129475572494194263306266719e-10,
	+0.9810825646924729426157171547487e-8,
	-0.1384948176067563840732986059135e-4,
	+0.1666389480451863247205729650822e+0
];
var LEN = ALGMCS.length;


// MAIN //

/**
* Evaluate the n-term Chebyshev series at `x`.
*
* ## References
*
* -   Broucke, Roger. 1973. "Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series." _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).
* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.
*
* @private
* @param {number} x - value at which the series is to be evaluated
* @returns {number} series value
*/
function dcseval( x ) {
	var twox;
	var b2;
	var b1;
	var b0;
	var i;

	if ( x < -1.1 || x > 1.1 ) {
		return NaN;
	}
	b1 = 0.0;
	b0 = 0.0;
	twox = 2.0 * x;
	for ( i = 0; i < LEN; i++ ) {
		b2 = b1;
		b1 = b0;
		b0 = (twox*b1) - b2 + ALGMCS[ i ];
	}
	return ( b0-b2 ) * 0.5;
}


// EXPORTS //

var _$dcseval_454 = dcseval;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$dcseval_454 = require( './dceval.js' ); */;


// VARIABLES //

var XBIG = 94906265.62425156;
var XMAX = 3.745194030963158e306;


// MAIN //

/**
* Compute the log gamma correction factor for `x >= 10`.
*
* ```tex
* \log(\gamma(x)) = \log(\sqrt{2*\Pi}) + (x-0.5) \cdot \log(x) - x \operatorname{R9LGMC}(x).
* ```
*
* @private
* @param {number} x - input value
* @returns {number} correction value
*/
function gammaCorrection( x ) {
	if ( x < 10.0 ) {
		return NaN;
	}
	// Check for underflow...
	if ( x >= XMAX ) {
		return 0.0;
	}
	if ( x < XBIG ) {
		return _$dcseval_454( (2.0*_$pow_579( 10.0/x, 2.0 )) - 1.0 ) / x;
	}
	return 1.0 / (x * 12.0);
}


// EXPORTS //

var _$gammaCorrection_455 = gammaCorrection;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_536 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$log1p_570 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$gamma_530 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$max_573 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_575 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_SQRT_TWO_PI_226 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$gammaCorrection_455 = require( './gamma_correction.js' ); */;


// MAIN //

/**
* Evaluate the natural logarithm of the beta function.
*
* @param {NonNegativeNumber} a - first input value
* @param {NonNegativeNumber} b - second input value
* @returns {number} natural logarithm of beta function
*
* @example
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* @example
* var v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = betaln( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* @example
* var v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* @example
* var v = betaln( NaN, 2.0 );
* // returns NaN
*/
function betaln( a, b ) {
	var corr;
	var p;
	var q;

	p = _$min_575( a, b );
	q = _$max_573( a, b );

	if ( p < 0.0 ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return _$FLOAT64_PINF_238;
	}
	if ( q === _$FLOAT64_PINF_238 ) {
		return _$FLOAT64_NINF_235;
	}
	// Case: p and q are big
	if ( p >= 10.0 ) {
		corr = _$gammaCorrection_455( p ) + _$gammaCorrection_455( q ) - _$gammaCorrection_455( p+q );
		return ( -0.5*_$ln_561( q ) ) + _$LN_SQRT_TWO_PI_226 + corr + ( (p-0.5) * _$ln_561( p/(p+q) ) ) + ( q*_$log1p_570( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p is small, but q is big
	if ( q >= 10.0 ) {
		corr = _$gammaCorrection_455( q ) - _$gammaCorrection_455( p+q );
		return _$gammaln_536( p ) + corr + p - (p*_$ln_561( p+q )) + ( (q-0.5)*_$log1p_570( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p and q are small
	return _$ln_561( _$gamma_530( p ) * ( _$gamma_530( q ) / _$gamma_530( p+q ) ) );
}


// EXPORTS //

var _$betaln_453 = betaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the beta function.
*
* @module @stdlib/math/base/special/betaln
*
* @example
* var betaln = require( '@stdlib/math/base/special/betaln' );
*
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* v = betaln( -1.0, 2.0 );
* // returns NaN
*
* v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* v = betaln( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$betaln_453 = require( './betaln.js' ); */;


// EXPORTS //

var _$betaln_456 = _$betaln_453;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_814 = require( '@stdlib/math/iter/tools/map2' ); */;
/* removed: var _$betaln_456 = require( '@stdlib/math/base/special/betaln' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the natural logarithm of the beta function.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {(Iterator|number)} x - input iterator
* @param {(Iterator|number)} y - input iterator
* @throws {TypeError} first argument must be either an iterator protocol-compliant object or a number
* @throws {TypeError} second argument must be either an iterator protocol-compliant object or a number
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var x = uniform( 0.0, 2.0 );
* var y = uniform( 0.0, 2.0 );
*
* var iter = iterBetaln( x, y );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBetaln( x, y ) {
	return _$iterator_814( x, y, _$betaln_456 );
}


// EXPORTS //

var _$iterBetaln_744 = iterBetaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the natural logarithm of the beta function.
*
* @module @stdlib/math/iter/special/betaln
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterBetaln = require( '@stdlib/math/iter/special/betaln' );
*
* var x = uniform( 0.0, 2.0 );
* var y = uniform( 0.0, 2.0 );
*
* var iter = iterBetaln( x, y );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBetaln_744 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_743 = _$iterBetaln_744;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Notes:
*	=> cos(-x) = cos(x)
*	=> sin(-x) = -sin(x)
*	=> cos(π/2) = 0
*	=> cos(0) = 1
*	=> cos(π) = -1
*/


// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$cos_469 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_615 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;


// VARIABLES //

_$FLOAT64_MAX_SAFE_INTEGER_231 += 1;


// MAIN //

/**
* Computes the value of `cos(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = cospi( 0.0 );
* // returns 1.0
*
* @example
* var y = cospi( 0.5 );
* // returns 0.0
*
* @example
* var y = cospi( 0.1 );
* // returns ~0.951
*
* @example
* var y = cospi( NaN );
* // returns NaN
*/
function cospi( x ) {
	var ax;
	var ix;
	var rx;
	var y;
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_366( x ) ) {
		return NaN;
	}
	ax = _$abs_390( x );
	if ( ax > _$FLOAT64_MAX_SAFE_INTEGER_231 ) {
		// Always even integer...
		return 1.0;
	}
	// Argument reduction (reduce to [0,1))...
	ix = _$floor_523( ax );
	rx = ax - ix;
	if ( rx === 0.5 ) {
		return 0.0;
	}
	if ( rx < 0.25 ) {
		y = _$cos_469( _$PI_237*rx );
	}
	else if ( rx < 0.75 ) {
		rx = 0.5 - rx;
		y = _$sin_615( _$PI_237*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed
	}
	else {
		rx = 1.0 - rx;
		y = -_$cos_469( _$PI_237*rx );
	}
	// If the integer of `x` is odd, we need to flip the sign...
	return ( ix%2 === 1 ) ? -y : y;
}


// EXPORTS //

var _$cospi_470 = cospi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute cos(πx).
*
* @module @stdlib/math/base/special/cospi
*
* @example
* var cospi = require( '@stdlib/math/base/special/cospi' );
*
* var y = cospi( 0.0 );
* // returns 1.0
*
* y = cospi( 0.5 );
* // returns 0.0
*
* y = cospi( 0.1 );
* // returns ~0.951
*
* y = cospi( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$cospi_470 = require( './cospi.js' ); */;


// EXPORTS //

var _$cospi_471 = _$cospi_470;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cospi_471 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PHI_236 = require( '@stdlib/constants/math/float64-phi' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// VARIABLES //

var __SQRT_5_458 = 2.23606797749979;


// MAIN //

/**
* Evaluates Binet's formula extended to real numbers.
*
* ## Notes
*
* -   [Non integer Fibonacci numbers][1]
* -   [Interpolated Fibonacci numbers - real or complex][2]
*
* [1]: https://math.stackexchange.com/questions/798190/non-integer-fibonacci-numbers
* [2]: https://math.stackexchange.com/questions/589841/interpolated-fibonacci-numbers-real-or-complex
*
* @param {number} x - input value
* @returns {number} real-valued result
*
* @example
* var y = binet( 0.0 );
* // returns 0.0
*
* @example
* var y = binet( 1.0 );
* // returns 1.0
*
* @example
* var y = binet( 2.0 );
* // returns 1.0
*
* @example
* var y = binet( 3.0 );
* // returns 2.0
*
* @example
* var y = binet( 4.0 );
* // returns 3.0
*
* @example
* var y = binet( 5.0 );
* // returns ~5.0
*
* @example
* var y = binet( 6.0 );
* // returns ~8.0
*
* @example
* var y = binet( NaN );
* // returns NaN
*
* @example
* var y = binet( 3.14 );
* // returns ~2.12
*
* @example
* var y = binet( -1.0 );
* // returns 1.0
*/
function binet( x ) {
	var a;
	var b;
	if (
		_$isnan_370( x ) ||
		x === _$FLOAT64_PINF_238 ||
		x === _$FLOAT64_NINF_235
	) {
		return NaN;
	}
	a = _$pow_579( _$PHI_236, x );
	b = _$cospi_471( x ) / a;
	return ( a - b ) / __SQRT_5_458;
}


// EXPORTS //

var _$binet_458 = binet;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate Binet's formula extended to real numbers.
*
* @module @stdlib/math/base/special/binet
*
* @example
* var binet = require( '@stdlib/math/base/special/binet' );
*
* var y = binet( 0.0 );
* // returns 0.0
*
* y = binet( 1.0 );
* // returns 1.0
*
* y = binet( 2.0 );
* // returns 1.0
*
* y = binet( 3.0 );
* // returns 2.0
*
* y = binet( 4.0 );
* // returns 3.0
*
* y = binet( 5.0 );
* // returns ~5.0
*
* y = binet( 6.0 );
* // returns ~8.0
*/

// MODULES //

/* removed: var _$binet_458 = require( './main.js' ); */;


// EXPORTS //

var _$binet_457 = _$binet_458;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$binet_457 = require( '@stdlib/math/base/special/binet' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates Binet's formula extended to real numbers.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterBinet( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBinet( iterator ) {
	return _$iterator_811( iterator, _$binet_457 );
}


// EXPORTS //

var _$iterBinet_746 = iterBinet;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates Binet's formula extended to real numbers.
*
* @module @stdlib/math/iter/special/binet
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterBinet = require( '@stdlib/math/iter/special/binet' );
*
* var iter = iterBinet( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBinet_746 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_745 = _$iterBinet_746;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_461( x ) {
	if ( x === 0.0 ) {
		return 1.87595182427177;
	}
	return 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_461 = __evalpoly_461;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_SMALLEST_NORMAL_239 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$fromWords_824 = require( '@stdlib/number/float64/base/from-words' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$evalpoly_461 = require( './polyval_p.js' ); */;


// VARIABLES //

// 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000
var __SIGN_MASK_459 = 0x80000000|0; // asm type annotation

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_459 = 0x7fffffff|0; // asm type annotation

// 2**54
var TWO_54 = 18014398509481984;

// 0x00000001 = 1 => 0 00000000000 00000000000000000001
var ONE = 0x00000001|0; // asm type annotation

// B1 = (1023-1023/3-0.03306235651)*2**20
var B1 = 715094163|0; // asm type annotation

// B2 = (1023-1023/3-54/3-0.03306235651)*2**20
var B2 = 696219795|0; // asm type annotation


// MAIN //

/**
* Computes the cube root.
*
* ## Method
*
* 1.  Rough cube root to \\( 5 \\) bits:
*
*     ```tex
*     \sqrt\[3\]{2^e (1+m)} \approx 2^(e/3) \biggl(1 + \frac{(e \mathrm{mod}\ 3) + m}{3}\biggr)
*     ```
*
*     where \\( e \\) is a nonnegative integer, \\( m \\) is real and in \\( \[0, 1) \\), and \\( / \\) and \\( \mathrm{mod} \\) are integer division and modulus with rounding toward \\( -\infty \\).
*
*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\( 1 \\) in \\( 16 \\).
*
*     Adding a bias of \\( -0.03306235651 \\) to the \\( (e \mathrm{mod} 3+ m )/ 3 \\) term reduces the error to about \\( 1 \\) in \\( 32 \\).
*
*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\( 1023 \\) for doubles) and later add it back.
*
*     We do the subtraction virtually to keep \\( e \geq 0 \\) so that ordinary integer division rounds toward \\( -\infty \\); this is also efficient.
*
* 2.  New cube root to \\( 23 \\) bits:
*
*     ```tex
*     \sqrt[3]{x} = t \cdot \sqrt\[3\]{x/t^3} \approx t \mathrm{P}(t^3/x)
*     ```
*
*     where \\( \mathrm{P}(r) \\) is a polynomial of degree \\( 4 \\) that approximates \\( 1 / \sqrt\[3\]{r} \\) to within \\( 2^{-23.5} \\) when \\( |r - 1| < 1/10 \\).
*
*     The rough approximation has produced \\( t \\) such than \\( |t/sqrt\[3\]{x} - 1| \lesssim 1/32 \\), and cubing this gives us bounds for \\( r = t^3/x \\).
*
* 3.  Round \\( t \\) away from \\( 0 \\) to \\( 23 \\) bits (sloppily except for ensuring that the result is larger in magnitude than \\( \sqrt\[3\]{x} \\) but not much more than \\( 2 \\) 23-bit ulps larger).
*
*     With rounding toward zero, the error bound would be \\( \approx 5/6 \\) instead of \\( \approx 4/6 \\).
*
*     With a maximum error of \\( 2 \\) 23-bit ulps in the rounded \\( t \\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\( 0.667 \\); the error in the rounded \\( t \\) can be up to about \\( 3 \\) 23-bit ulps before the final error is larger than \\( 0.667 \\) ulps.
*
* 4.  Perform one step of a Newton iteration to get \\( 53 \\) bits with an error of \\( < 0.667 \\) ulps.
*
*
* @param {number} x - input value
* @returns {number} cube root
*
* @example
* var v = cbrt( 64.0 );
* // returns 4.0
*
* @example
* var v = cbrt( 27.0 );
* // returns 3.0
*
* @example
* var v = cbrt( 0.0 );
* // returns 0.0
*
* @example
* var v = cbrt( -9.0 );
* // returns ~-2.08
*
* @example
* var v = cbrt( NaN );
* // returns NaN
*/
function cbrt( x ) {
	var high;
	var sgn;
	var hx;
	var r;
	var s;
	var t;
	var w;
	if (
		_$isnan_370( x ) ||
		_$isInfinite_366( x ) ||
		x === 0.0 // handles `+-0`
	) {
		return x;
	}
	hx = _$getHighWord_828( x );
	sgn = hx & __SIGN_MASK_459;
	hx &= __ABS_MASK_459;
	t = 0.0;

	// Rough cbrt...
	if ( x < _$FLOAT64_SMALLEST_NORMAL_239 ) {
		t = TWO_54;
		t *= x;
		high = _$getHighWord_828( t );
		high = ( (high&__ABS_MASK_459)/3 ) + B2;
		t = _$fromWords_824( sgn|high, 0 );
	} else {
		high = (hx/3) + B1;
		t = _$setHighWord_837( t, sgn|high );
	}
	// New cbrt...
	r = (t*t) * (t/x);
	t *= _$evalpoly_461( r );

	// Round `t` away from `0` to `23` bits...
	high = _$getHighWord_828( t );
	t = _$fromWords_824( high+ONE, 0 );

	// Newton iteration...
	s = t * t; // `t*t` is exact
	r = x / s; // error `<= 0.5` ulps; `|r| < |t|`
	w = t + t; // `t+t` is exact
	r = (r - t) / (w + r); // `r-t` is exact; `w+r ~= 3*t`
	t += t * r; // error `<= 0.5 + 0.5/3 + eps`

	return t;
}


// EXPORTS //

var _$cbrt_459 = cbrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cube root of a number.
*
* @module @stdlib/math/base/special/cbrt
*
* @example
* var cbrt = require( '@stdlib/math/base/special/cbrt' );
*
* var v = cbrt( 64.0 );
* // returns 4.0
*
* v = cbrt( 27.0 );
* // returns 3.0
*
* v = cbrt( 0.0 );
* // returns 0.0
*
* v = cbrt( -0.0 );
* // returns -0.0
*
* v = cbrt( -9.0 );
* // returns ~-2.08
*
* v = cbrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$cbrt_459 = require( './cbrt.js' ); */;


// EXPORTS //

var _$cbrt_460 = _$cbrt_459;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$cbrt_460 = require( '@stdlib/math/base/special/cbrt' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the cube root.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterCbrt( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterCbrt( iterator ) {
	return _$iterator_811( iterator, _$cbrt_460 );
}


// EXPORTS //

var _$iterCbrt_748 = iterCbrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the cube root.
*
* @module @stdlib/math/iter/special/cbrt
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterCbrt = require( '@stdlib/math/iter/special/cbrt' );
*
* var iter = iterCbrt( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterCbrt_748 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_747 = _$iterCbrt_748;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$ceil_463 = require( '@stdlib/math/base/special/ceil' ); */;


// MAIN //

/**
* Returns an iterator which rounds each iterated value toward positive infinity.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterCeil( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterCeil( iterator ) {
	return _$iterator_811( iterator, _$ceil_463 );
}


// EXPORTS //

var _$iterCeil_750 = iterCeil;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rounds each iterated value toward positive infinity.
*
* @module @stdlib/math/iter/special/ceil
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterCeil = require( '@stdlib/math/iter/special/ceil' );
*
* var iter = iterCeil( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterCeil_750 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_749 = _$iterCeil_750;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_568( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_568 = __evalpoly_568;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_569( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_569 = __evalpoly_569;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$evalpoly_568 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_569 = require( './polyval_q.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_566 = 0x000fffff|0; // asm type annotation

// 1/3
var __ONE_THIRD_566 = 0.33333333333333333;


// MAIN //

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function klog( x ) {
	var hfsq;
	var t1;
	var t2;
	var hx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	hx = _$getHighWord_828( x );
	f = x - 1.0;
	if ( ( __HIGH_SIGNIFICAND_MASK_566 & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( (__ONE_THIRD_566*f) - 0.5 );
	}
	s = f / ( 2.0 + f );
	z = s * s;
	hx &= __HIGH_SIGNIFICAND_MASK_566;
	i = (hx - 0x6147a)|0; // asm type annotation
	w = z * z;
	j = (0x6b851 - hx)|0; // asm type annotation
	t1 = w * _$evalpoly_568( w );
	t2 = z * _$evalpoly_569( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return ( s * (hfsq+R) ) - hfsq;
	}
	return s * (R-f);
}


// EXPORTS //

var _$klog_566 = klog;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log10.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$klog_566 = require( './klog.js' ); */;


// VARIABLES //

var __TWO54_567 = 1.80143985094819840000e+16;     // 0x43500000, 0x00000000
var IVLN10HI = 4.34294481878168880939e-01;  // 0x3fdbcb7b, 0x15200000
var IVLN10LO = 2.50829467116452752298e-11;  // 0x3dbb9438, 0xca9aadd5
var LOG10_2HI = 3.01029995663611771306e-01; // 0x3FD34413, 0x509F6000
var LOG10_2LO = 3.69423907715893078616e-13; // 0x3D59FEF3, 0x11F12B36

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_567 = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var __HIGH_MAX_NORMAL_EXP_567 = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_567 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_567 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the common logarithm (base ten).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log10( 4.0 );
* // returns ~0.602
*
* @example
* var v = log10( 8.0 );
* // returns ~0.903
*
* @example
* var v = log10( 0.0 );
* // returns -Infinity
*
* @example
* var v = log10( Infinity );
* // returns Infinity
*
* @example
* var v = log10( NaN );
* // returns NaN
*
* @example
* var v = log10( -4.0 );
* // returns NaN
*/
function log10( x ) {
	var hi;
	var hx;
	var lo;
	var f;
	var i;
	var k;
	var y;
	var z;

	if ( _$isnan_370( x ) || x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_235;
	}
	hx = _$getHighWord_828( x );
	k = 0|0; // asm type annotation

	// Case: 0 < x < 2**-1022
	if ( hx < __HIGH_MIN_NORMAL_EXP_567 ) {
		// Subnormal number, scale up `x`...
		k -= 54|0; // asm type annotation
		x *= __TWO54_567;
		hx = _$getHighWord_828( x );
	}
	if ( hx >= __HIGH_MAX_NORMAL_EXP_567 ) {
		return x + x;
	}
	k += ((hx>>20) - _$FLOAT64_EXPONENT_BIAS_221)|0; // asm type annotation
	hx &= __HIGH_SIGNIFICAND_MASK_567;
	i = ( (hx+0x95f64)&0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = _$setHighWord_837( x, hx|(i^__HIGH_BIASED_EXP_0_567) );
	k += (i>>20)|0; // asm type annotation
	y = k;
	f = _$klog_566( x );
	x -= 1;
	hi = _$setLowWord_839( x, 0.0 );
	lo = x - hi;
	z = (y*LOG10_2LO) + ( (x+f)*IVLN10LO );
	z += ( (lo+f)*IVLN10HI ) + ( hi*IVLN10HI );
	return z + ( y*LOG10_2HI );
}


// EXPORTS //

var _$log10_567 = log10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the common logarithm (base ten).
*
* @module @stdlib/math/base/special/log10
*
* @example
* var log10 = require( '@stdlib/math/base/special/log10' );
*
* var v = log10( 100.0 );
* // returns ~0.602
*
* v = log10( 8.0 );
* // returns ~0.903
*
* v = log10( 0.0 );
* // returns -Infinity
*
* v = log10( Infinity );
* // returns Infinity
*
* v = log10( NaN );
* // returns NaN
*
* v = log10( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$log10_567 = require( './log10.js' ); */;


// EXPORTS //

var _$log10_565 = _$log10_567;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-max-base10-exponent' );
* // returns 308
*/


// MAIN //

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default 308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE10_EXPONENT_228 = FLOAT64_MAX_BASE10_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
* // returns -324
*/


// MAIN //

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default -324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_233 = FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_463 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log10_565 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_228 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_233 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil10( 3.141592653589793 );
* // returns 10.0
*
* @example
* var v = ceil10( 9.0 );
* // returns 10.0
*
* @example
* var v = ceil10( -0.314 );
* // returns -0.1
*/
function ceil10( x ) {
	var sign;
	var p;
	if (
		_$isnan_370( x ) ||
		_$isInfinite_366( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = _$log10_565( x );

	// Determine a power of 10 which rounds the input value toward positive infinity:
	if ( sign === -1.0 ) {
		p = _$floor_523( p );
	} else {
		p = _$ceil_463( p );
	}
	// Handle underflow:
	if ( p <= _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_233 ) {
		return sign * 0.0; // sign-preserving
	}
	// Handle overflow:
	if ( p > _$FLOAT64_MAX_BASE10_EXPONENT_228 ) {
		return _$FLOAT64_PINF_238;
	}
	return sign * _$pow_579( 10.0, p );
}


// EXPORTS //

var _$ceil10_464 = ceil10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of `10` toward positive infinity.
*
* @module @stdlib/math/base/special/ceil10
*
* @example
* var ceil10 = require( '@stdlib/math/base/special/ceil10' );
*
* var v = ceil10( 3.141592653589793 );
* // returns 10.0
*
* v = ceil10( 9.0 );
* // returns 10.0
*
* v = ceil10( -0.314 );
* // returns -0.1
*/

// MODULES //

/* removed: var _$ceil10_464 = require( './ceil10.js' ); */;


// EXPORTS //

var _$ceil10_465 = _$ceil10_464;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$ceil10_465 = require( '@stdlib/math/base/special/ceil10' ); */;


// MAIN //

/**
* Returns an iterator which rounds each iterated value to the nearest power of 10 toward positive infinity.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterCeil10( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterCeil10( iterator ) {
	return _$iterator_811( iterator, _$ceil10_465 );
}


// EXPORTS //

var _$iterCeil10_752 = iterCeil10;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rounds each iterated value to the nearest power of 10 toward positive infinity.
*
* @module @stdlib/math/iter/special/ceil10
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterCeil10 = require( '@stdlib/math/iter/special/ceil10' );
*
* var iter = iterCeil10( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterCeil10_752 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_751 = _$iterCeil10_752;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$cos_469 = require( '@stdlib/math/base/special/cos' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the cosine.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterCos( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterCos( iterator ) {
	return _$iterator_811( iterator, _$cos_469 );
}


// EXPORTS //

var _$iterCos_754 = iterCos;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the cosine.
*
* @module @stdlib/math/iter/special/cos
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterCos = require( '@stdlib/math/iter/special/cos' );
*
* var iter = iterCos( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterCos_754 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_753 = _$iterCos_754;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$cospi_471 = require( '@stdlib/math/base/special/cospi' ); */;


// MAIN //

/**
* Returns an iterator which computes the cosine of each iterated value times π.
*
* ## Notes
*
* -   Computes `cos(πx)` more accurately than `cos(pi*x)`, especially for large `x`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterCospi( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterCospi( iterator ) {
	return _$iterator_811( iterator, _$cospi_471 );
}


// EXPORTS //

var _$iterCospi_756 = iterCospi;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which computes the cosine of each iterated value times π.
*
* @module @stdlib/math/iter/special/cospi
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterCospi = require( '@stdlib/math/iter/special/cospi' );
*
* var iter = iterCospi( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterCospi_756 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_755 = _$iterCospi_756;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the Dirac delta function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = diracDelta( 0.0 );
* // returns Infinity
*
* @example
* var v = diracDelta( 3.14 );
* // returns 0.0
*
* @example
* var v = diracDelta( NaN );
* // returns NaN
*/
function diracDelta( x ) {
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_238;
	}
	return 0.0;
}


// EXPORTS //

var _$diracDelta_472 = diracDelta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Dirac delta function.
*
* @module @stdlib/math/base/special/dirac-delta
*
* @example
* var diracDelta = require( '@stdlib/math/base/special/dirac-delta' );
*
* var v = diracDelta( 0.0 );
* // returns Infinity
*
* v = diracDelta( 3.14 );
* // returns 0.0
*
* v = diracDelta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$diracDelta_472 = require( './dirac_delta.js' ); */;


// EXPORTS //

var _$diracDelta_473 = _$diracDelta_472;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$diracDelta_473 = require( '@stdlib/math/base/special/dirac-delta' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the Dirac delta function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterDiracDelta( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterDiracDelta( iterator ) {
	return _$iterator_811( iterator, _$diracDelta_473 );
}


// EXPORTS //

var _$iterDiracDelta_758 = iterDiracDelta;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the Dirac delta function.
*
* @module @stdlib/math/iter/special/dirac-delta
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterDiracDelta = require( '@stdlib/math/iter/special/dirac-delta' );
*
* var iter = iterDiracDelta( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterDiracDelta_758 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_757 = _$iterDiracDelta_758;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the natural logarithm of 2.
*
* @module @stdlib/constants/math/float64-half-ln-two
* @type {number}
*
* @example
* var HALF_LN2 = require( '@stdlib/constants/math/float64-half-ln-two' );
* // returns 3.46573590279972654709e-01
*/

// MAIN //

/**
* One half times the natural logarithm of 2.
*
* ```tex
* \frac{\ln 2}{2}
* ```
*
* @constant
* @type {number}
* @default 3.46573590279972654709e-01
*/
var HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF


// EXPORTS //

var _$HALF_LN2_223 = HALF_LN2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_516( x ) {
	if ( x === 0.0 ) {
		return -0.03333333333333313;
	}
	return -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_516 = __evalpoly_516;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_837 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_221 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$HALF_LN2_223 = require( '@stdlib/constants/math/float64-half-ln-two' ); */;
/* removed: var _$evalpoly_516 = require( './polyval_q.js' ); */;


// VARIABLES //

var OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF

// High and low words of ln(2):
var __LN2_HI_514 = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000
var __LN2_LO_514 = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76

// 1 / ln(2):
var LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE

// ln(2) * 56:
var LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1

// ln(2) * 1.5:
var LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73


// MAIN //

/**
* Computes `exp(x) - 1`.
*
* ## Method
*
* 1.  Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
*
*     ```tex
*     x = k \cdot \ln(2) + r
*     ```
*
*     where
*
*     ```tex
*     |r| \leq \frac{\ln(2)}{2} \approx 0.34658
*     ```
*
*     <!-- <note> -->
*
*     A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
*
*     <!-- </note> -->
*
* 2.  To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\(\[0,0.34658]\\). Since
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     ```
*
*     we define \\(\operatorname{R1}(r^2)\\) by
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
*     ```
*
*     That is,
*
*     ```tex
*     \begin{align*}
*     \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
*     &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
*     &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
*
*     ```tex
*     \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
*     ```
*
*     where
*
*     ```tex
*     \begin{align*}
*     \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
*     \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
*     \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
*     \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
*     \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
*     \end{align*}
*     ```
*
*     where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
*
*     ```tex
*     \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
*     ```
*
*     \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
*
*     ```tex
*     \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
*     ```
*
*     To compensate for the error in the argument reduction, we use
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
*     &\approx \operatorname{expm1}(r) + c + rc
*     \end{align*}
*     ```
*
*     Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
*     &= r - \mathrm{E}
*     \end{align*}
*     ```
*
* 3.  To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
*
*     ```tex
*     \operatorname{expm1}(x) = \begin{cases}
*     2^k  (\operatorname{expm1}(r) + 1) - 1 \\
*     2^k (\operatorname{expm1}(r) + (1-2^{-k}))
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{expm1}(\infty) &= \infty \\
* \operatorname{expm1}(-\infty) &= -1 \\
* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
*
* -   To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
*
* -   To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
*
*     -   if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
*
*     -   if \\(k = 0\\), return \\(r-\mathrm{E}\\)
*
*     -   if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
*
*     -   if \\(k = 1\\),
*
*         -   if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
*         -   else return \\(1+2(r-\mathrm{E})\\)
*
*     -   if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
*
*     -   if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
*
*     -   else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)
*
* -   For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
*
* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1( 0.2 );
* // returns ~0.221
*
* @example
* var v = expm1( -9.0 );
* // returns ~-0.9999
*
* @example
* var v = expm1( 0.0 );
* // returns 0.0
*
* @example
* var v = expm1( NaN );
* // returns NaN
*/
function expm1( x ) {
	var halfX;
	var sign;
	var hi;
	var lo;
	var hx;
	var r1;
	var y;
	var z;
	var c;
	var t;
	var e;
	var k;

	if ( x === _$FLOAT64_PINF_238 || _$isnan_370( x ) ) {
		return x;
	}
	if ( x === _$FLOAT64_NINF_235 ) {
		return -1.0;
	}
	if ( x === 0.0 ) {
		return x; // handles +-0 (IEEE 754-2008)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		sign = true;
		y = -x;
	} else {
		sign = false;
		y = x;
	}
	// Filter out huge and non-finite arguments...
	if ( y >= LN2x56 ) { // if |x| >= 56*ln(2)
		if ( sign ) { // if x <= -56*ln(2)
			return -1.0;
		}
		if ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...
			return _$FLOAT64_PINF_238;
		}
	}
	// Extract the more significant bits from |x|:
	hx = _$getHighWord_828( y )|0; // asm type annotation

	// Argument reduction...
	if ( y > _$HALF_LN2_223 ) { // if |x| > 0.5*ln(2)
		if ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)
			if ( sign ) {
				hi = x + __LN2_HI_514;
				lo = -__LN2_LO_514;
				k = -1;
			} else {
				hi = x - __LN2_HI_514;
				lo = __LN2_LO_514;
				k = 1;
			}
		} else {
			if ( sign ) {
				k = (LN2_INV*x) - 0.5;
			} else {
				k = (LN2_INV*x) + 0.5;
			}
			k |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)
			t = k;
			hi = x - (t*__LN2_HI_514); // t*ln2_hi is exact here
			lo = t * __LN2_LO_514;
		}
		x = hi - lo;
		c = (hi-x) - lo;
	}
	// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54
	else if ( hx < 1016070144 ) {
		return x;
	}
	else {
		k = 0;
	}
	// x is now in primary range...
	halfX = 0.5 * x;
	z = x * halfX;

	r1 = 1.0 + ( z * _$evalpoly_516( z ) );

	t = 3.0 - (r1*halfX);
	e = z * ( (r1-t) / (6.0 - (x*t)) );
	if ( k === 0 ) {
		return x - ( (x*e) - z );	// c is 0
	}
	e = ( x * (e-c) ) - c;
	e -= z;
	if ( k === -1 ) {
		return ( 0.5*(x-e) )- 0.5;
	}
	if ( k === 1 ) {
		if ( x < -0.25 ) {
			return -2.0 * ( e - (x+0.5) );
		}
		return 1 + ( 2.0 * (x-e) );
	}
	if ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1
		y = 1.0 - (e-x);

		// Add k to y's exponent:
		hi = (_$getHighWord_828( y ) + (k<<20))|0; // asm type annotation
		y = _$setHighWord_837( y, hi );

		return y - 1.0;
	}
	t = 1.0;
	if ( k < 20 ) {
		// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000
		hi = (1072693248 - (0x200000>>k))|0; // asm type annotation
		t = _$setHighWord_837( t, hi ); // t=1-2^-k
		y = t - (e-x);
	} else {
		hi = ( (_$FLOAT64_EXPONENT_BIAS_221-k)<<20 )|0; // asm type annotation
		t = _$setHighWord_837( t, hi ); // t=2^-k
		y = x - (e+t);
		y += 1.0;
	}
	// Add k to y's exponent:
	hi = (_$getHighWord_828( y ) + (k<<20))|0; // asm type annotation
	return _$setHighWord_837( y, hi );
}


// EXPORTS //

var _$expm1_514 = expm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `exp(x) - 1`.
*
* @module @stdlib/math/base/special/expm1
*
* @example
* var expm1 = require( '@stdlib/math/base/special/expm1' );
*
* var v = expm1( 0.2 );
* // returns ~0.221
*
* v = expm1( -9.0 );
* // returns ~-0.999
*
* v = expm1( 0.0 );
* // returns 0.0
*
* v = expm1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$expm1_514 = require( './expm1.js' ); */;


// EXPORTS //

var _$expm1_515 = _$expm1_514;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$expm1_515 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$trunc_629 = require( '@stdlib/math/base/special/trunc' ); */;


// MAIN //

/**
* Evaluates `bˣ - 1`.
*
* @param {number} b - base
* @param {number} x - exponent
* @returns {number} function value
*
* @example
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* @example
* var y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* @example
* var y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* @example
* var y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* @example
* var y = powm1( NaN, 3.0 );
* // returns NaN
*
* @example
* var y = powm1( 5.0, NaN );
* // returns NaN
*/
function powm1( b, x ) {
	var y;
	if (
		_$isnan_370( b ) ||
		_$isnan_370( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0
		return 0.0;
	}
	if ( b === 0.0 ) {
		// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1
		return -1.0;
	}
	if ( b < 0.0 && x%2.0 === 0 ) {
		// If `x` is even, recognize that `(-b)**x == (b)**x`...
		b = -b;
	}
	if ( b > 0.0 ) {
		if (
			_$abs_390( x*(b-1.0) ) < 0.5 ||
			_$abs_390( x ) < 0.2
		) {
			// No good/quick approximation for ln(b)*x, so we have to evaluate...
			y = _$ln_561( b ) * x;
			if ( y < 0.5 ) {
				return _$expm1_515( y );
			}
		}
	} else if ( _$trunc_629( x ) !== x ) {
		// Exponentiation would yield a complex result...
		return NaN;
	}
	return _$pow_579( b, x ) - 1.0;
}


// EXPORTS //

var _$powm1_591 = powm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate `bˣ - 1`.
*
* @module @stdlib/math/base/special/powm1
*
* @example
* var powm1 = require( '@stdlib/math/base/special/powm1' );
*
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* y = powm1( NaN, 3.0 );
* // returns NaN
*
* y = powm1( 5.0, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$powm1_591 = require( './powm1.js' ); */;


// EXPORTS //

var _$powm1_590 = _$powm1_591;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-two-pi
* @type {number}
*
* @example
* var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
* // returns 6.283185307179586
*/


// MAIN //

/**
* The mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 6.283185307179586
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len


// EXPORTS //

var _$TWO_PI_245 = TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/constants/math/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/


// MAIN //

/**
* Square root of double-precision floating-point epsilon.
*
* ```tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;


// EXPORTS //

var _$FLOAT64_SQRT_EPSILON_240 = FLOAT64_SQRT_EPSILON;

var _$odd_positive_integers_601=[
	1.202056903159594285399738161511449990764986292340498881792,
	1.036927755143369926331365486457034168057080919501912811974,
	1.008349277381922826839797549849796759599863560565238706417,
	1.002008392826082214417852769232412060485605851394888756548,
	1.000494188604119464558702282526469936468606435758208617119,
	1.000122713347578489146751836526357395714275105895509845136,
	1.000030588236307020493551728510645062587627948706858177506,
	1.000007637197637899762273600293563029213088249090262679095,
	1.000001908212716553938925656957795101353258571144838630235,
	1.000000476932986787806463116719604373045966446694784937600,
	1.000000119219925965311073067788718882326387254997784519858,
	1.000000029803503514652280186063705069366011844730919543312,
	1.000000007450711789835429491981004170604119454719031882565,
	1.000000001862659723513049006403909945416948061665330469200,
	1.000000000465662906503378407298923325122007106269185336947,
	1.000000000116415501727005197759297383545630951652247172763,
	1.000000000029103850444970996869294252278840464106981987433,
	1.000000000007275959835057481014520869012338059264850925555,
	1.000000000001818989650307065947584832100730085030589309618,
	1.000000000000454747378304215402679911202948857033904529911,
	1.000000000000113686840768022784934910483802590643743590284,
	1.000000000000028421709768893018554550737049426620743688265,
	1.000000000000007105427395210852712877354479956800022742043,
	1.000000000000001776356843579120327473349014400279570155508,
	1.000000000000000444089210314381336419777094026812133645960,
	1.000000000000000111022302514106613372054456992138270248322,
	1.000000000000000027755575621361241725816324538540697689849,
	1.000000000000000006938893904544153697446085326249809274836,
	1.000000000000000001734723476047576572048972969937595907478,
	1.000000000000000000433680869002065048749702356590624136125,
	1.000000000000000000108420217249424140630127111654613825894,
	1.000000000000000000027105054312234688319546213119497764319,
	1.000000000000000000006776263578045189097995298741556686206,
	1.000000000000000000001694065894509799165406492747124861940,
	1.000000000000000000000423516473627283334786227048335793441,
	1.000000000000000000000105879118406802338522650015392383985,
	1.000000000000000000000026469779601698529611341166842038716,
	1.000000000000000000000006617444900424404067355245332308220,
	1.000000000000000000000001654361225106075646229923677181049,
	1.000000000000000000000000413590306276516092600938245550814,
	1.000000000000000000000000103397576569128709932840955917459,
	1.000000000000000000000000025849394142282142681277617708450,
	1.000000000000000000000000006462348535570531803438002161122,
	1.000000000000000000000000001615587133892632521206011405705,
	1.000000000000000000000000000403896783473158082562226281299,
	1.000000000000000000000000000100974195868289515336192507001,
	1.000000000000000000000000000025243548967072378244674341938,
	1.000000000000000000000000000006310887241768094495682609394,
	1.000000000000000000000000000001577721810442023616644432783,
	1.000000000000000000000000000000394430452610505903352639355,
	1.000000000000000000000000000000098607613152626475748329968,
	1.000000000000000000000000000000024651903288156618927101395,
	1.000000000000000000000000000000006162975822039154730666338,
	1.000000000000000000000000000000001540743955509788682543361,
	1.000000000000000000000000000000000385185988877447170622149,
	1.000000000000000000000000000000000096296497219361792654016
]

var _$even_nonnegative_integers_599=[
	-0.5,
	1.644934066848226436472415166646025189218949901206798437735,
	1.082323233711138191516003696541167902774750951918726907682,
	1.017343061984449139714517929790920527901817490032853561842,
	1.004077356197944339378685238508652465258960790649850020329,
	1.000994575127818085337145958900319017006019531564477517257,
	1.000246086553308048298637998047739670960416088458003404533,
	1.000061248135058704829258545105135333747481696169154549482,
	1.000015282259408651871732571487636722023237388990471531153,
	1.000003817293264999839856461644621939730454697218953331143,
	1.000000953962033872796113152038683449345943794187410595750,
	1.000000238450502727732990003648186752994935041821779658269,
	1.000000059608189051259479612440207935801227503918837302795,
	1.000000014901554828365041234658506630698628864788167885910,
	1.000000003725334024788457054819204018402423232893059295811,
	1.000000000931327432419668182871764735021219813567955136816,
	1.000000000232831183367650549200145597594049502482982284530,
	1.000000000058207720879027008892436859891063054173122604617,
	1.000000000014551921891041984235929632245318420983808894124,
	1.000000000003637979547378651190237236355873273512646028384,
	1.000000000000909494784026388928253311838694908753860000990,
	1.000000000000227373684582465251522682157797869121382982198,
	1.000000000000056843419876275856092771829675240685530571588,
	1.000000000000014210854828031606769834307141739537678698605,
	1.000000000000003552713691337113673298469534059342992145655,
	1.000000000000000888178421093081590309609138639138632560887,
	1.000000000000000222044605079804198399932009420465396423665,
	1.000000000000000055511151248454812437237365905094302816723
]

var _$bernoulli_598=[1.00000000000000000000000000000000000000000,
0.166666666666666666666666666666666666666667,
-0.0333333333333333333333333333333333333333333,
0.0238095238095238095238095238095238095238095,
-0.0333333333333333333333333333333333333333333,
0.0757575757575757575757575757575757575757576,
-0.253113553113553113553113553113553113553114,
1.16666666666666666666666666666666666666667,
-7.09215686274509803921568627450980392156863,
54.9711779448621553884711779448621553884712,
-529.124242424242424242424242424242424242424,
6192.12318840579710144927536231884057971014,
-86580.2531135531135531135531135531135531136,
1.42551716666666666666666666666666666666667e6,
-2.72982310678160919540229885057471264367816e7,
6.01580873900642368384303868174835916771401e8,
-1.51163157670921568627450980392156862745098e10,
4.29614643061166666666666666666666666666667e11,
-1.37116552050883327721590879485616327721591e13,
4.88332318973593166666666666666666666666667e14,
-1.92965793419400681486326681448632668144863e16,
8.41693047573682615000553709856035437430786e17,
-4.03380718540594554130768115942028985507246e19,
2.11507486380819916056014539007092198581560e21,
-1.20866265222965259346027311937082525317819e23,
7.50086674607696436685572007575757575757576e24,
-5.03877810148106891413789303052201257861635e26,
3.65287764848181233351104308429711779448622e28,
-2.84987693024508822262691464329106781609195e30,
2.38654274996836276446459819192192149717514e32,
-2.13999492572253336658107447651910973926742e34,
2.05009757234780975699217330956723102516667e36,
-2.09380059113463784090951852900279701847092e38,
2.27526964884635155596492603527692645814700e40,
-2.62577102862395760473030497361582020814490e42,
3.21250821027180325182047923042649852435219e44,
-4.15982781667947109139170744952623589366896e46,
5.69206954820352800238834562191210586444805e48,
-8.21836294197845756922906534686173330145509e50,
1.25029043271669930167323398297028955241772e53,
-2.00155832332483702749253291988132987687242e55,
3.36749829153643742333966769033387530162196e57,
-5.94709705031354477186604968440515408405791e59,
1.10119103236279775595641307904376916046305e62,
-2.13552595452535011886583850190410656789733e64,
4.33288969866411924196166130593792062184514e66,
-9.18855282416693282262005552155018971389604e68,
2.03468967763290744934550279902200200659751e71,
-4.70038339580357310785752555350060606545967e73,
1.13180434454842492706751862577339342678904e76,
-2.83822495706937069592641563364817647382847e78,
7.40642489796788506297508271409209841768797e80,
-2.00964548027566044834656196727153631868673e83,
5.66571700508059414457193460305193569614195e85,
-1.65845111541362169158237133743199123014950e88,
5.03688599504923774192894219151801548124424e90,
-1.58614682376581863693634015729664387827410e93,
5.17567436175456269840732406825071225612408e95,
-1.74889218402171173396900258776181591451415e98,
6.11605199949521852558245252642641677807677e100,
-2.21227769127078349422883234567129324455732e103,
8.27227767987709698542210624599845957312047e105,
-3.19589251114157095835916343691808148735263e108,
1.27500822233877929823100243029266798669572e111,
-5.25009230867741338994028246245651754469199e113,
2.23018178942416252098692981988387281437383e116,
-9.76845219309552044386335133989802393011669e118,
4.40983619784529542722726228748131691918758e121,
-2.05085708864640888397293377275830154864566e124,
9.82144332797912771075729696020975210414919e126,
-4.84126007982088805087891967099634127611305e129,
2.45530888014809826097834674040886903996737e132,
-1.28069268040847475487825132786017857218118e135,
6.86761671046685811921018885984644004360924e137,
-3.78464685819691046949789954163795568144895e140,
2.14261012506652915508713231351482720966602e143,
-1.24567271371836950070196429616376072194583e146,
7.43457875510001525436796683940520613117807e148,
-4.55357953046417048940633332233212748767721e151,
2.86121128168588683453638472510172325229190e154,
-1.84377235520338697276882026536287854875414e157,
1.21811545362210466995013165065995213558174e160,
-8.24821871853141215484818457296893447301419e162,
5.72258779378329433296516498142978615918685e165,
-4.06685305250591047267679693831158655602196e168,
2.95960920646420500628752695815851870426379e171,
-2.20495225651894575090311752273445984836379e174,
1.68125970728895998058311525151360665754464e177,
-1.31167362135569576486452806355817153004431e180,
1.04678940094780380821832853929823089643829e183,
-8.54328935788337077185982546299082774593270e185,
7.12878213224865423522884066771438224721245e188,
-6.08029314555358993000847118686477458461988e191,
5.29967764248499239300942910043247266228490e194,
-4.71942591687458626443646229013379911103761e197,
4.29284137914029810894168296541074669045521e200,
-3.98767449682322074434477655542938795106651e203,
3.78197804193588827138944181161393327898220e206,
-3.66142336836811912436858082151197348755196e209,
3.61760902723728623488554609298914089477541e212,
-3.64707726451913543621383088655499449048682e215,
3.75087554364544090983452410104814189306842e218,
-3.93458672964390282694891288533713429355657e221,
4.20882111481900820046571171111494898242731e224,
-4.59022962206179186559802940573325591059371e227,
5.10317257726295759279198185106496768539760e230,
-5.78227623036569554015377271242917142512200e233,
6.67624821678358810322637794412809363451080e236,
-7.85353076444504163225916259639312444428230e239,
9.41068940670587255245443288258762485293948e242,
-1.14849338734651839938498599206805592548354e246,
1.42729587428487856771416320087122499897180e249,
-1.80595595869093090142285728117654560926719e252,
2.32615353076608052161297985184708876161736e255,
-3.04957517154995947681942819261542593785327e258,
4.06858060764339734424012124124937318633684e261,
-5.52310313219743616252320044093186392324280e264,
7.62772793964343924869949690204961215533859e267,
-1.07155711196978863132793524001065396932667e271,
1.53102008959691884453440916153355334355847e274,
-2.22448916821798346676602348865048510824835e277,
3.28626791906901391668189736436895275365183e280,
-4.93559289559603449020711938191575963496999e283,
7.53495712008325067212266049779283956727824e286,
-1.16914851545841777278088924731655041783900e290,
1.84352614678389394126646201597702232396492e293,
-2.95368261729680829728014917350525183485207e296,
4.80793212775015697668878704043264072227967e299,
-7.95021250458852528538243631671158693036798e302,
1.33527841873546338750122832017820518292039e306]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_602( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.2433929443359375;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len
		s2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_602 = __evalrational_602;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_603( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5772156649015329;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len
		s2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_603 = __evalrational_603;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_604( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.053725830002359504;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len
		s2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_604 = __evalrational_604;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_605( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -2.497101906022594;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len
		s2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_605 = __evalrational_605;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_606( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -4.785580284951356;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len
		s2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_606 = __evalrational_606;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_607( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -10.39489505733089;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len
		s2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_607 = __evalrational_607;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_530 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$gammaln_536 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$TWO_PI_245 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$FLOAT64_SQRT_EPSILON_240 = require( '@stdlib/constants/math/float64-sqrt-eps' ); */;
/* removed: var _$LN_SQRT_TWO_PI_226 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$odd_positive_integers_601 = require( './odd_positive_integers.json' ); */;
/* removed: var _$even_nonnegative_integers_599 = require( './even_nonnegative_integers.json' ); */;
/* removed: var _$bernoulli_598 = require( './bernoulli.json' ); */;
/* removed: var _$evalrational_602 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_603 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_604 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_605 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_606 = require( './rational_p5q5.js' ); */;
/* removed: var _$evalrational_607 = require( './rational_p6q6.js' ); */;


// VARIABLES //

var MAX_BERNOULLI_2N = 129;
var __MAX_FACTORIAL_608 = 170; // TODO: consider making external constant
var MAX_LN = 709; // TODO: consider making external constant
var Y1 = 1.2433929443359375;
var Y3 = 0.6986598968505859375;


// MAIN //

/**
* Evaluates the Riemann zeta function.
*
* ## Method
*
* 1.  First, we use the reflection formula
*
*     ```tex
*     \zeta(1-s) = 2 \sin\biggl(\frac{\pi(1-s)}{2}\biggr)(2\pi^{-s})\Gamma(s)\zeta(s)
*     ```
*
*     to make \\(s\\) positive.
*
* 2.  For \\(s \in (0,1)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = \frac{C + \operatorname{R}(1-s) - s}{1-s}
*     ```
*
*     with rational approximation \\(\operatorname{R}(1-z)\\) and constant \\(C\\).
*
* 3.  For \\(s \in (1,4)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = C + \operatorname{R}(s-n) + \frac{1}{s-1}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\), constant \\(C\\), and integer \\(n\\).
*
* 4.  For \\(s > 4\\), we use the approximation
*
*     ```tex
*     \zeta(s) = 1 + e^{\operatorname{R}(z-n)}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\) and integer \\(n\\).
*
* 5.  For negative odd integers, we use the closed form
*
*     ```tex
*     \zeta(-n) = \frac{(-1)^n}{n+1} B_{n+1}
*     ```
*
*     where \\(B_{n+1}\\) is a Bernoulli number.
*
* 6.  For negative even integers, we use the closed form
*
*     ```tex
*     \zeta(-2n) = 0
*     ```
*
* 7.  For nonnegative even integers, we could use the closed form
*
*     ```tex
*     \zeta(2n) = \frac{(-1)^{n-1}2^{2n-1}\pi^{2n}}{(2n)!} B_{2n}
*     ```
*
*     where \\(B_{2n}\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).
*
* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.
*
*
* ## Notes
*
* -   \\(\[\approx 1.5\mbox{e-}8, 1)\\)
*
*     -   max deviation: \\(2.020\mbox{e-}18\\)
*     -   expected error: \\(-2.020\mbox{e-}18\\)
*     -   max error found (double): \\(3.994987\mbox{e-}17\\)
*
* -   \\(\[1,2\]\\)
*
*     -   max deviation: \\(9.007\mbox{e-}20\\)
*     -   expected error: \\(9.007\mbox{e-}20\\)
*
* -   \\((2,4\]\\)
*
*     -   max deviation: \\(5.946\mbox{e-}22\\)
*     -   expected error: \\(-5.946\mbox{e-}22\\)
*
* -   \\((4,7\]\\)
*
*     -   max deviation: \\(2.955\mbox{e-}17\\)
*     -   expected error: \\(2.955\mbox{e-}17\\)
*     -   max error found (double): \\(2.009135\mbox{e-}16\\)
*
* -   \\((7,15)\\)
*
*     -   max deviation: \\(7.117\mbox{e-}16\\)
*     -   expected error: \\(7.117\mbox{e-}16\\)
*     -   max error found (double): \\(9.387771\mbox{e-}16\\)
*
* -   \\(\[15,36)\\)
*
*     -   max error (in interpolated form): \\(1.668\mbox{e-}17\\)
*     -   max error found (long double): \\(1.669714\mbox{e-}17\\)
*
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = zeta( 1.1 );
* // returns ~10.584
*
* @example
* var v = zeta( -4.0 );
* // returns 0.0
*
* @example
* var v = zeta( 70.0 );
* // returns 1.0
*
* @example
* var v = zeta( 0.5 );
* // returns ~-1.46
*
* @example
* var v = zeta( 1.0 ); // pole
* // returns NaN
*
* @example
* var v = zeta( NaN );
* // returns NaN
*/
function zeta( s ) {
	var tmp;
	var sc;
	var as;
	var is;
	var r;
	var n;

	// Check for `NaN`:
	if ( _$isnan_370( s ) ) {
		return NaN;
	}
	// Check for a pole:
	if ( s === 1.0 ) {
		return NaN;
	}
	// Check for large value:
	if ( s >= 56.0 ) {
		return 1.0;
	}
	// Check for a closed form (integers):
	if ( _$isInteger_368( s ) ) {
		// Cast `s` to a 32-bit signed integer:
		is = s|0; // asm type annotation

		// Check that `s` does not exceed MAX_INT32:
		if ( is === s ) {
			if ( is < 0 ) {
				as = (-is)|0; // asm type annotation

				// Check if even negative integer:
				if ( (as&1) === 0 ) {
					return 0.0;
				}
				n = ( (as+1) / 2 )|0; // asm type annotation

				// Check if less than max Bernoulli number:
				if ( n <= MAX_BERNOULLI_2N ) {
					return -_$bernoulli_598[ n ] / (as+1.0);
				}
				// fall through...
			}
			// Check if even nonnegative integer:
			else if ( (is&1) === 0 ) {
				return _$even_nonnegative_integers_599[ is/2 ];
			}
			// Must be a odd positive integer:
			else {
				return _$odd_positive_integers_601[ (is-3)/2 ];
			}
		}
		// fall through...
	}
	if ( _$abs_390(s) < _$FLOAT64_SQRT_EPSILON_240 ) {
		return -0.5 - (_$LN_SQRT_TWO_PI_226 * s);
	}
	sc = 1.0 - s;
	if ( s < 0.0 ) {
		// Check if even negative integer:
		if ( _$floor_523(s/2.0) === s/2.0 ) {
			return 0.0;
		}
		// Swap `s` and `sc`:
		tmp = s;
		s = sc;
		sc = tmp;

		// Determine if computation will overflow:
		if ( s > __MAX_FACTORIAL_608 ) {
			tmp = _$sinpi_623( 0.5*sc ) * 2.0 * zeta( s );
			r = _$gammaln_536( s );
			r -= s * _$ln_561( _$TWO_PI_245 );
			if ( r > MAX_LN ) {
				return ( tmp < 0.0 ) ? _$FLOAT64_NINF_235 : _$FLOAT64_PINF_238;
			}
			return tmp * _$exp_512( r );
		}
		return _$sinpi_623( 0.5*sc ) * 2.0 * _$pow_579( _$TWO_PI_245, -s ) * _$gamma_530( s ) * zeta( s ); // eslint-disable-line max-len
	}
	if ( s < 1.0 ) {
		tmp = _$evalrational_602( sc );
		tmp -= Y1;
		tmp += sc;
		tmp /= sc;
		return tmp;
	}
	if ( s <= 2.0 ) {
		sc = -sc;
		tmp = 1.0 / sc;
		return tmp + _$evalrational_603( sc );
	}
	if ( s <= 4.0 ) {
		tmp = Y3 + ( 1.0 / (-sc) );
		return tmp + _$evalrational_604( s-2.0 );
	}
	if ( s <= 7.0 ) {
		tmp = _$evalrational_605( s-4.0 );
		return 1.0 + _$exp_512( tmp );
	}
	if ( s < 15.0 ) {
		tmp = _$evalrational_606( s-7.0 );
		return 1.0 + _$exp_512( tmp );
	}
	if ( s < 36.0 ) {
		tmp = _$evalrational_607( s-15.0 );
		return 1.0 + _$exp_512( tmp );
	}
	// s < 56
	return 1.0 + _$pow_579( 2.0, -s );
}


// EXPORTS //

var _$zeta_608 = zeta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Riemann zeta function.
*
* @module @stdlib/math/base/special/riemann-zeta
*
* @example
* var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
*
* var v = zeta( 1.1 );
* // returns ~10.584
*
* v = zeta( -4.0 );
* // returns 0.0
*
* v = zeta( 70.0 );
* // returns 1.0
*
* v = zeta( 0.5 );
* // returns ~-1.46
*
* v = zeta( 1.0 ); // pole
* // returns NaN
*
* v = zeta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$zeta_608 = require( './zeta.js' ); */;


// EXPORTS //

var _$zeta_600 = _$zeta_608;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$powm1_590 = require( '@stdlib/math/base/special/powm1' ); */;
/* removed: var _$zeta_600 = require( '@stdlib/math/base/special/riemann-zeta' ); */;
/* removed: var _$LN2_227 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Evaluates the Dirichlet eta function.
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = eta( 0.0 );
* // returns 0.5
*
* @example
* var v = eta( -1.0 );
* // returns 0.25
*
* @example
* var v = eta( 1.0 ); // => ln(2)
* // returns ~0.6931
*
* @example
* var v = eta( 3.14 );
* // returns ~0.9096
*
* @example
* var v = eta( NaN );
* // returns NaN
*/
function eta( s ) {
	if ( _$isnan_370( s ) ) {
		return NaN;
	}
	if ( s === 1.0 ) {
		// Alternating harmonic series...
		return _$LN2_227;
	}
	return -_$powm1_590( 2.0, 1.0-s ) * _$zeta_600( s );
}


// EXPORTS //

var _$eta_474 = eta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Dirichlet eta function.
*
* @module @stdlib/math/base/special/dirichlet-eta
*
* @example
* var eta = require( '@stdlib/math/base/special/dirichlet-eta' );
*
* var v = eta( 0.0 );
* // returns 0.5
*
* v = eta( -1.0 );
* // returns 0.25
*
* v = eta( 1.0 ); // => ln(2)
* // returns ~0.6931
*
* v = eta( 3.14 );
* // returns ~0.9096
*
* v = eta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$eta_474 = require( './eta.js' ); */;


// EXPORTS //

var _$eta_475 = _$eta_474;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$eta_475 = require( '@stdlib/math/base/special/dirichlet-eta' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the Dirichlet eta function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterEta( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterEta( iterator ) {
	return _$iterator_811( iterator, _$eta_475 );
}


// EXPORTS //

var _$iterEta_760 = iterEta;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the Dirichlet eta function.
*
* @module @stdlib/math/iter/special/dirichlet-eta
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterEta = require( '@stdlib/math/iter/special/dirichlet-eta' );
*
* var iter = iterEta( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterEta_760 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_759 = _$iterEta_760;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isNumber_762 = _$isNumber_162.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which performs element-wise division of two or more iterators.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {...(Iterator|number)} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 3.0, 2.0 ] );
* var it2 = array2iterator( [ 1.0, 4.0 ] );
*
* var iter = iterDivide( it1, it2 );
*
* var v = iter.next().value;
* // returns 3.0
*
* v = iter.next().value;
* // returns 0.5
*
* var bool = iter.next().done;
* // returns true
*/
function iterDivide() {
	var iterators;
	var types;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_762( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var s;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		if ( types[ 0 ] ) {
			v = iterators[ 0 ].next();
			if ( v.done ) {
				FLG += 1;
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					if ( typeof v.value === 'number' ) {
						s = v.value;
					} else {
						s = NaN;
					}
				} else {
					return {
						'done': true
					};
				}
			} else if ( typeof v.value === 'number' ) {
				s = v.value;
			} else {
				s = NaN;
			}
		} else {
			s = iterators[ 0 ];
		}
		for ( i = 1; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							s /= v.value;
						} else {
							s = NaN;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					s /= v.value;
				} else {
					s = NaN;
				}
			} else {
				s /= iterators[ i ];
			}
		}
		return {
			'value': s,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		return iterDivide.apply( null, args );
	}
}


// EXPORTS //

var _$iterDivide_762 = iterDivide;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which performs element-wise division of two or more iterators.
*
* @module @stdlib/math/iter/special/divide
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterDivide = require( '@stdlib/math/iter/special/divide' );
*
* var it1 = array2iterator( [ 3.0, 2.0 ] );
* var it2 = array2iterator( [ 1.0, 4.0 ] );
*
* var iter = iterDivide( it1, it2 );
*
* var v = iter.next().value;
* // returns 3.0
*
* v = iter.next().value;
* // returns 0.5
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterDivide_762 = require( './main.js' ); */;


// EXPORTS //

var _$iterDivide_761 = _$iterDivide_762;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_479( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_479 = __evalpoly_479;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_481( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_481 = __evalpoly_481;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_478( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_478 = __evalpoly_478;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_480( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_480 = __evalpoly_480;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_482( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_482 = __evalpoly_482;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_484( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_484 = __evalpoly_484;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_483( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_483 = __evalpoly_483;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_485( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_485 = __evalpoly_485;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_479 = require( './polyval_pp.js' ); */;
/* removed: var _$evalpoly_481 = require( './polyval_qq.js' ); */;
/* removed: var _$evalpoly_478 = require( './polyval_pa.js' ); */;
/* removed: var _$evalpoly_480 = require( './polyval_qa.js' ); */;
/* removed: var _$evalpoly_482 = require( './polyval_ra.js' ); */;
/* removed: var _$evalpoly_484 = require( './polyval_sa.js' ); */;
/* removed: var _$evalpoly_483 = require( './polyval_rb.js' ); */;
/* removed: var _$evalpoly_485 = require( './polyval_sb.js' ); */;


// VARIABLES //

var __TINY_476 = 1.0e-300;
var VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000

// 2**-28 = 1/(1<<28) = 1/268435456
var __SMALL_476 = 3.725290298461914e-9;

var ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69
var EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69

var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var QQC = 1.0;

var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var QAC = 1.0;

var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var SAC = 1.0;

var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var SBC = 1.0;


// MAIN //

/**
* Evaluates the error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erf( 2.0 );
* // returns ~0.9953
*
* @example
* var y = erf( -1.0 );
* // returns ~-0.8427
*
* @example
* var y = erf( -0.0 );
* // returns -0.0
*
* @example
* var y = erf( NaN );
* // returns NaN
*/
function erf( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === _$FLOAT64_PINF_238 ) {
		return 1.0;
	}
	// Special case: -infinity
	if ( x === _$FLOAT64_NINF_235 ) {
		return -1.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < __SMALL_476 ) {
			if ( ax < VERY_TINY ) {
				// Avoid underflow:
				return 0.125 * ( (8.0*x) + (EFX8*x) );
			}
			return x + (EFX*x);
		}
		z = x * x;
		r = PPC + ( z*_$evalpoly_479( z ) );
		s = QQC + ( z*_$evalpoly_481( z ) );
		y = r / s;
		return x + (x*y);
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*_$evalpoly_478( s ) );
		q = QAC + ( s*_$evalpoly_480( s ) );
		if ( sign ) {
			return -ERX - (p/q);
		}
		return ERX + (p/q);
	}
	// +inf > |x| >= 6
	if ( ax >= 6.0 ) {
		if ( sign ) {
			return __TINY_476 - 1.0; // raise inexact
		}
		return 1.0 - __TINY_476; // raise inexact
	}
	s = 1.0 / (ax*ax);

	// |x| < 1/0.35 ~ 2.857143
	if ( ax < 2.857142857142857 ) {
		r = RAC + ( s*_$evalpoly_482( s ) );
		s = SAC + ( s*_$evalpoly_484( s ) );
	}
	// |x| >= 1/0.35 ~ 2.857143
	else {
		r = RBC + ( s*_$evalpoly_483( s ) );
		s = SBC + ( s*_$evalpoly_485( s ) );
	}
	z = _$setLowWord_839( ax, 0 ); // pseudo-single (20-bit) precision x
	r = _$exp_512( -(z*z) - 0.5625 ) * _$exp_512( ( (z-ax) * (z+ax) ) + (r/s) );
	if ( sign ) {
		return (r/ax) - 1.0;
	}
	return 1.0 - (r/ax);
}


// EXPORTS //

var _$erf_476 = erf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the error function.
*
* @module @stdlib/math/base/special/erf
*
* @example
* var erf = require( '@stdlib/math/base/special/erf' );
*
* var y = erf( 2.0 );
* // returns ~0.9953
*
* y = erf( -1.0 );
* // returns ~-0.8427
*
* y = erf( -0.0 );
* // returns -0.0
*
* y = erf( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erf_476 = require( './erf.js' ); */;


// EXPORTS //

var _$erf_477 = _$erf_476;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$erf_477 = require( '@stdlib/math/base/special/erf' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the error function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterErf( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterErf( iterator ) {
	return _$iterator_811( iterator, _$erf_477 );
}


// EXPORTS //

var _$iterErf_764 = iterErf;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the error function.
*
* @module @stdlib/math/iter/special/erf
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterErf = require( '@stdlib/math/iter/special/erf' );
*
* var iter = iterErf( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterErf_764 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_763 = _$iterErf_764;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_489( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_489 = __evalpoly_489;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_491( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_491 = __evalpoly_491;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_488( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_488 = __evalpoly_488;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_490( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_490 = __evalpoly_490;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_492( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_492 = __evalpoly_492;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_494( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_494 = __evalpoly_494;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_493( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_493 = __evalpoly_493;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_495( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_495 = __evalpoly_495;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_489 = require( './polyval_pp.js' ); */;
/* removed: var _$evalpoly_491 = require( './polyval_qq.js' ); */;
/* removed: var _$evalpoly_488 = require( './polyval_pa.js' ); */;
/* removed: var _$evalpoly_490 = require( './polyval_qa.js' ); */;
/* removed: var _$evalpoly_492 = require( './polyval_ra.js' ); */;
/* removed: var _$evalpoly_494 = require( './polyval_sa.js' ); */;
/* removed: var _$evalpoly_493 = require( './polyval_rb.js' ); */;
/* removed: var _$evalpoly_495 = require( './polyval_sb.js' ); */;


// VARIABLES //

var __TINY_486 = 1.0e-300;

// 2**-56 = 1/(2**56) = 1/72057594037927940
var __SMALL_486 = 1.3877787807814457e-17;

var __ERX_486 = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var __PPC_486 = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var __QQC_486 = 1.0;

var __PAC_486 = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var __QAC_486 = 1.0;

var __RAC_486 = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var __SAC_486 = 1.0;

var __RBC_486 = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var __SBC_486 = 1.0;


// MAIN //

/**
* Evaluates the complementary error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* @example
* var y = erfc( -1.0 );
* // returns ~1.8427
*
* @example
* var y = erfc( 0.0 );
* // returns 1.0
*
* @example
* var y = erfc( Infinity );
* // returns 0.0
*
* @example
* var y = erfc( -Infinity );
* // returns 2.0
*
* @example
* var y = erfc( NaN );
* // returns NaN
*/
function erfc( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === _$FLOAT64_PINF_238 ) {
		return 0.0;
	}
	// Special case: -infinity
	if ( x === _$FLOAT64_NINF_235 ) {
		return 2.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < __SMALL_486 ) {
			return 1.0 - x; // raise inexact
		}
		z = x * x;
		r = __PPC_486 + ( z*_$evalpoly_489( z ) );
		s = __QQC_486 + ( z*_$evalpoly_491( z ) );
		y = r / s;

		// x < 1/4
		if ( x < 0.25 ) {
			return 1.0 - ( x + (x*y) );
		}
		r = x * y;
		r += x - 0.5;
		return 0.5 - r;
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = __PAC_486 + ( s*_$evalpoly_488( s ) );
		q = __QAC_486 + ( s*_$evalpoly_490( s ) );
		if ( sign ) {
			return 1.0 + __ERX_486 + (p/q);
		}
		return 1.0 - __ERX_486 - (p/q);
	}
	// |x| < 28
	if ( ax < 28.0 ) {
		s = 1.0 / (ax*ax);

		// |x| < 1/0.35 ~ 2.857143
		if ( ax < 2.857142857142857 ) {
			r = __RAC_486 + ( s*_$evalpoly_492( s ) );
			s = __SAC_486 + ( s*_$evalpoly_494( s ) );
		}
		// |x| >= 1/0.35 ~ 2.857143
		else {
			// x < -6
			if ( x < -6.0 ) {
				return 2.0 - __TINY_486; // raise inexact
			}
			r = __RBC_486 + ( s*_$evalpoly_493( s ) );
			s = __SBC_486 + ( s*_$evalpoly_495( s ) );
		}
		z = _$setLowWord_839( ax, 0 ); // pseudo-single (20-bit) precision x
		r = _$exp_512( -(z*z) - 0.5625 ) * _$exp_512( ((z-ax)*(z+ax)) + (r/s) );
		if ( sign ) {
			return 2.0 - (r/ax);
		}
		return r/ax;
	}
	if ( sign ) {
		return 2.0 - __TINY_486; // raise inexact; ~2
	}
	return __TINY_486 * __TINY_486; // raise inexact; ~0
}


// EXPORTS //

var _$erfc_486 = erfc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the complementary error function.
*
* @module @stdlib/math/base/special/erfc
*
* @example
* var erfc = require( '@stdlib/math/base/special/erfc' );
*
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* y = erfc( -1.0 );
* // returns ~1.8427
*
* y = erfc( 0.0 );
* // returns 1.0
*
* y = erfc( Infinity );
* // returns 0.0
*
* y = erfc( -Infinity );
* // returns 2.0
*
* y = erfc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfc_486 = require( './erfc.js' ); */;


// EXPORTS //

var _$erfc_487 = _$erfc_486;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$erfc_487 = require( '@stdlib/math/base/special/erfc' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the complementary error function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterErfc( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterErfc( iterator ) {
	return _$iterator_811( iterator, _$erfc_487 );
}


// EXPORTS //

var _$iterErfc_766 = iterErfc;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the complementary error function.
*
* @module @stdlib/math/iter/special/erfc
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterErfc = require( '@stdlib/math/iter/special/erfc' );
*
* var iter = iterErfc( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterErfc_766 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_765 = _$iterErfc_766;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_498( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_498 = __evalrational_498;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_499( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_499 = __evalrational_499;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_500( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_500 = __evalrational_500;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_501( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_501 = __evalrational_501;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_502( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_502 = __evalrational_502;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalrational_498 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_499 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_500 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_501 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_502 = require( './rational_p5q5.js' ); */;


// VARIABLES //

var __Y1_496 = 8.91314744949340820313e-2;
var Y2 = 2.249481201171875;
var __Y3_496 = 8.07220458984375e-1;
var Y4 = 9.3995571136474609375e-1;
var Y5 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse complementary error function.
*
* Note that
*
* ```tex
* \operatorname{erfc^{-1}}(1-z) = \operatorname{erf^{-1}}(z)
* ```
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfcinv( 0.8 );
* // returns ~0.1791
*
* @example
* var y = erfcinv( 0.0 );
* // returns Infinity
*
* @example
* var y = erfcinv( 2.0 );
* // returns -Infinity
*
* @example
* var y = erfcinv( NaN );
* // returns NaN
*/
function erfcinv( x ) {
	var sign;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_238;
	}
	// Special case: 2
	if ( x === 2.0 ) {
		return _$FLOAT64_NINF_235;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x > 2.0 || x < 0.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.
	if ( x > 1.0 ) {
		sign = -1.0;
		q = 2.0 - x;
	} else {
		sign = 1.0;
		q = x;
	}
	x = 1.0 - q;

	// x = 1-q <= 0.5
	if ( x <= 0.5 ) {
		g = x * ( x + 10.0 );
		r = _$evalrational_498( x );
		return sign * ( (g*__Y1_496) + (g*r) );
	}
	// q >= 0.25
	if ( q >= 0.25 ) {
		g = _$sqrt_625( -2.0 * _$ln_561(q) );
		q -= 0.25;
		r = _$evalrational_499( q );
		return sign * ( g / (Y2+r) );
	}
	q = _$sqrt_625( -_$ln_561( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = _$evalrational_500( qs );
		return sign * ( (__Y3_496*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = _$evalrational_501( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = _$evalrational_502( qs );
	return sign * ( (Y5*q) + (r*q) );
}


// EXPORTS //

var _$erfcinv_496 = erfcinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse complementary error function.
*
* @module @stdlib/math/base/special/erfcinv
*
* @example
* var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
*
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* y = erfcinv( 0.0 );
* // returns Infinity
*
* y = erfcinv( 2.0 );
* // returns -Infinity
*
* y = erfcinv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfcinv_496 = require( './erfcinv.js' ); */;


// EXPORTS //

var _$erfcinv_497 = _$erfcinv_496;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$erfcinv_497 = require( '@stdlib/math/base/special/erfcinv' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the inverse complementary error function.
*
* ## Notes
*
* -   The domain of inverse complementary error function is restricted to `[0,2]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterErfcinv( uniform( 0.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterErfcinv( iterator ) {
	return _$iterator_811( iterator, _$erfcinv_497 );
}


// EXPORTS //

var _$iterErfcinv_768 = iterErfcinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the inverse complementary error function.
*
* @module @stdlib/math/iter/special/erfcinv
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterErfcinv = require( '@stdlib/math/iter/special/erfcinv' );
*
* var iter = iterErfcinv( uniform( 0.0, 2.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterErfcinv_768 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_767 = _$iterErfcinv_768;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_505( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_505 = __evalrational_505;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_506( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_506 = __evalrational_506;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_507( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_507 = __evalrational_507;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_508( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_508 = __evalrational_508;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_509( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_509 = __evalrational_509;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalrational_505 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_506 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_507 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_508 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_509 = require( './rational_p5q5.js' ); */;


// VARIABLES //

var __Y1_503 = 8.91314744949340820313e-2;
var __Y2_503 = 2.249481201171875;
var __Y3_503 = 8.07220458984375e-1;
var __Y4_503 = 9.3995571136474609375e-1;
var __Y5_503 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse error function.
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfinv( 0.8 );
* // returns ~0.9062
*
* @example
* var y = erfinv( 0.0 );
* // returns 0.0
*
* @example
* var y = erfinv( -0.0 );
* // returns -0.0
*
* @example
* var y = erfinv( -1.0 );
* // returns -Infinity
*
* @example
* var y = erfinv( 1.0 );
* // returns Infinity
*
* @example
* var y = erfinv( NaN );
* // returns NaN
*/
function erfinv( x ) {
	var sign;
	var ax;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return _$FLOAT64_PINF_238;
	}
	// Special case: -1
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_235;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	// Special case: |x| > 1 (range error)
	if ( x > 1.0 || x < -1.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.
	if ( x < 0.0 ) {
		sign = -1.0;
		ax = -x;
	} else {
		sign = 1.0;
		ax = x;
	}
	q = 1.0 - ax;

	// |x| <= 0.5
	if ( ax <= 0.5 ) {
		g = ax * ( ax + 10.0 );
		r = _$evalrational_505( ax );
		return sign * ( (g*__Y1_503) + (g*r) );
	}
	// 1-|x| >= 0.25
	if ( q >= 0.25 ) {
		g = _$sqrt_625( -2.0 * _$ln_561(q) );
		q -= 0.25;
		r = _$evalrational_506( q );
		return sign * ( g / (__Y2_503+r) );
	}
	q = _$sqrt_625( -_$ln_561( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = _$evalrational_507( qs );
		return sign * ( (__Y3_503*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = _$evalrational_508( qs );
		return sign * ( (__Y4_503*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = _$evalrational_509( qs );
	return sign * ( (__Y5_503*q) + (r*q) );
}


// EXPORTS //

var _$erfinv_503 = erfinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse error function.
*
* @module @stdlib/math/base/special/erfinv
*
* @example
* var erfinv = require( '@stdlib/math/base/special/erfinv' );
*
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* y = erfinv( 0.8 );
* // returns ~0.9062
*
* y = erfinv( 0.0 );
* // returns 0.0
*
* y = erfinv( -0.0 );
* // returns -0.0
*
* y = erfinv( -1.0 );
* // returns -Infinity
*
* y = erfinv( 1.0 );
* // returns Infinity
*
* y = erfinv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfinv_503 = require( './erfinv.js' ); */;


// EXPORTS //

var _$erfinv_504 = _$erfinv_503;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$erfinv_504 = require( '@stdlib/math/base/special/erfinv' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the inverse error function.
*
* ## Notes
*
* -   The domain of inverse error function is restricted to `[-1,1]`. If an iterated value is outside of the domain, the returned iterator returns `NaN`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterErfinv( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterErfinv( iterator ) {
	return _$iterator_811( iterator, _$erfinv_504 );
}


// EXPORTS //

var _$iterErfinv_770 = iterErfinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the inverse error function.
*
* @module @stdlib/math/iter/special/erfinv
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var iterErfinv = require( '@stdlib/math/iter/special/erfinv' );
*
* var iter = iterErfinv( uniform( -1.0, 1.0 ) );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterErfinv_770 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_769 = _$iterErfinv_770;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the natural exponential function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterExp( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterExp( iterator ) {
	return _$iterator_811( iterator, _$exp_512 );
}


// EXPORTS //

var _$iterExp_772 = iterExp;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the natural exponential function.
*
* @module @stdlib/math/iter/special/exp
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterExp = require( '@stdlib/math/iter/special/exp' );
*
* var iter = iterExp( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterExp_772 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_771 = _$iterExp_772;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$factorial_519 = require( '@stdlib/math/base/special/factorial' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the factorial function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterFactorial( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterFactorial( iterator ) {
	return _$iterator_811( iterator, _$factorial_519 );
}


// EXPORTS //

var _$iterFactorial_774 = iterFactorial;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the factorial function.
*
* @module @stdlib/math/iter/special/factorial
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterFactorial = require( '@stdlib/math/iter/special/factorial' );
*
* var iter = iterFactorial( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterFactorial_774 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_773 = _$iterFactorial_774;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a negative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a negative integer
*
* @example
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* @example
* var bool = isNegativeInteger( 0.0 );
* // returns false
*
* @example
* var bool = isNegativeInteger( 10.0 );
* // returns false
*/
function isNegativeInteger( x ) {
	return (_$floor_523(x) === x && x < 0.0);
}


// EXPORTS //

var _$isNegativeInteger_373 = isNegativeInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a negative integer.
*
* @module @stdlib/math/base/assert/is-negative-integer
*
* @example
* var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
*
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* bool = isNegativeInteger( 0.0 );
* // returns false
*
* bool = isNegativeInteger( 10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNegativeInteger_373 = require( './is_negative_integer.js' ); */;


// EXPORTS //

var _$isNegativeInteger_372 = _$isNegativeInteger_373;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeInteger_372 = require( '@stdlib/math/base/assert/is-negative-integer' ); */;
/* removed: var _$gammaln_536 = require( '@stdlib/math/base/special/gammaln' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} natural logarithm of factorial of `x`
*
* @example
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* @example
* var v = factorialln( 2.4 );
* // returns ~1.092
*
* @example
* var v = factorialln( -1.0 );
* // returns NaN
*
* @example
* var v = factorialln( -1.5 );
* // returns ~1.266
*
* @example
* var v = factorialln( NaN );
* // returns NaN
*/
function factorialln( x ) {
	if ( _$isNegativeInteger_372( x ) ) {
		return NaN;
	}
	return _$gammaln_536( x + 1.0 );
}


// EXPORTS //

var _$factorialln_520 = factorialln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the factorial function.
*
* @module @stdlib/math/base/special/factorialln
*
* @example
* var factorialln = require( '@stdlib/math/base/special/factorialln' );
*
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* v = factorialln( 2.4 );
* // returns ~1.092
*
* v = factorialln( -1.0 );
* // returns NaN
*
* v = factorialln( -1.5 );
* // returns ~1.266
*
* v = factorialln( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$factorialln_520 = require( './factorialln.js' ); */;


// EXPORTS //

var _$factorialln_521 = _$factorialln_520;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$factorialln_521 = require( '@stdlib/math/base/special/factorialln' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the natural logarithm of the factorial function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterFactorialln( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterFactorialln( iterator ) {
	return _$iterator_811( iterator, _$factorialln_521 );
}


// EXPORTS //

var _$iterFactorialln_776 = iterFactorialln;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the natural logarithm of the factorial function.
*
* @module @stdlib/math/iter/special/factorialln
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterFactorialln = require( '@stdlib/math/iter/special/factorialln' );
*
* var iter = iterFactorialln( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterFactorialln_776 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_775 = _$iterFactorialln_776;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns an iterator which rounds each iterated value toward negative infinity.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterFloor( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterFloor( iterator ) {
	return _$iterator_811( iterator, _$floor_523 );
}


// EXPORTS //

var _$iterFloor_778 = iterFloor;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rounds each iterated value toward negative infinity.
*
* @module @stdlib/math/iter/special/floor
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterFloor = require( '@stdlib/math/iter/special/floor' );
*
* var iter = iterFloor( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterFloor_778 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_777 = _$iterFloor_778;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_463 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log10_565 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_228 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_233 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor10( 3.141592653589793 );
* // returns 1.0
*
* @example
* var v = floor10( 9.0 );
* // returns 1.0
*
* @example
* var v = floor10( -0.314 );
* // returns -1.0
*/
function floor10( x ) {
	var sign;
	var p;
	if (
		_$isnan_370( x ) ||
		_$isInfinite_366( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = _$log10_565( x );

	// Determine a power of 10 which rounds the input value toward negative infinity:
	if ( sign === 1.0 ) {
		p = _$floor_523( p );
	} else {
		p = _$ceil_463( p );
	}
	// Handle underflow:
	if ( p <= _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_233 ) {
		return sign * 0.0; // sign-preserving
	}
	// Handle overflow:
	if ( p > _$FLOAT64_MAX_BASE10_EXPONENT_228 ) {
		return _$FLOAT64_NINF_235;
	}
	return sign * _$pow_579( 10.0, p );
}


// EXPORTS //

var _$floor10_524 = floor10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of `10` toward negative infinity.
*
* @module @stdlib/math/base/special/floor10
*
* @example
* var floor10 = require( '@stdlib/math/base/special/floor10' );
*
* var v = floor10( 3.141592653589793 );
* // returns 1.0
*
* v = floor10( 9.0 );
* // returns 1.0
*
* v = floor10( -0.314 );
* // returns -1.0
*/

// MODULES //

/* removed: var _$floor10_524 = require( './floor10.js' ); */;


// EXPORTS //

var _$floor10_525 = _$floor10_524;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$floor10_525 = require( '@stdlib/math/base/special/floor10' ); */;


// MAIN //

/**
* Returns an iterator which rounds each iterated value to the nearest power of 10 toward negative infinity.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterFloor10( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterFloor10( iterator ) {
	return _$iterator_811( iterator, _$floor10_525 );
}


// EXPORTS //

var _$iterFloor10_780 = iterFloor10;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rounds each iterated value to the nearest power of 10 toward negative infinity.
*
* @module @stdlib/math/iter/special/floor10
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterFloor10 = require( '@stdlib/math/iter/special/floor10' );
*
* var iter = iterFloor10( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterFloor10_780 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_779 = _$iterFloor10_780;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$gamma_530 = require( '@stdlib/math/base/special/gamma' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the gamma function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterGamma( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterGamma( iterator ) {
	return _$iterator_811( iterator, _$gamma_530 );
}


// EXPORTS //

var _$iterGamma_782 = iterGamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the gamma function.
*
* @module @stdlib/math/iter/special/gamma
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterGamma = require( '@stdlib/math/iter/special/gamma' );
*
* var iter = iterGamma( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterGamma_782 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_781 = _$iterGamma_782;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$gammaln_536 = require( '@stdlib/math/base/special/gammaln' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the natural logarithm of the gamma function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterGammaln( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterGammaln( iterator ) {
	return _$iterator_811( iterator, _$gammaln_536 );
}


// EXPORTS //

var _$iterGammaln_784 = iterGammaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the natural logarithm of the gamma function.
*
* @module @stdlib/math/iter/special/gammaln
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterGammaln = require( '@stdlib/math/iter/special/gammaln' );
*
* var iter = iterGammaln( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterGammaln_784 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_783 = _$iterGammaln_784;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the multiplicative inverse of `x`.
*
* @param {number} x - input value
* @returns {number} multiplicative inverse
*
* @example
* var v = inv( -1.0 );
* // returns -1.0
*
* @example
* var v = inv( 2.0 );
* // returns 0.5
*
* @example
* var v = inv( 0.0 );
* // returns Infinity
*
* @example
* var v = inv( -0.0 );
* // returns -Infinity
*
* @example
* var v = inv( NaN );
* // returns NaN
*/
function inv( x ) {
	return 1.0 / x;
}


// EXPORTS //

var _$inv_548 = inv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the multiplicative inverse.
*
* @module @stdlib/math/base/special/inv
*
* @example
* var inv = require( '@stdlib/math/base/special/inv' );
*
* var v = inv( -1.0 );
* // returns -1.0
*
* v = inv( 2.0 );
* // returns 0.5
*
* v = inv( 0.0 );
* // returns Infinity
*
* v = inv( -0.0 );
* // returns -Infinity
*
* v = inv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$inv_548 = require( './inv.js' ); */;


// EXPORTS //

var _$inv_547 = _$inv_548;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$inv_547 = require( '@stdlib/math/base/special/inv' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the multiplicative inverse.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterInv( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterInv( iterator ) {
	return _$iterator_811( iterator, _$inv_547 );
}


// EXPORTS //

var _$iterInv_786 = iterInv;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the multiplicative inverse.
*
* @module @stdlib/math/iter/special/inv
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterInv = require( '@stdlib/math/iter/special/inv' );
*
* var iter = iterInv( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterInv_786 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_785 = _$iterInv_786;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the natural logarithm.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterLn( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterLn( iterator ) {
	return _$iterator_811( iterator, _$ln_561 );
}


// EXPORTS //

var _$iterLn_788 = iterLn;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the natural logarithm.
*
* @module @stdlib/math/iter/special/ln
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterLn = require( '@stdlib/math/iter/special/ln' );
*
* var iter = iterLn( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterLn_788 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_787 = _$iterLn_788;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isNumber_790 = _$isNumber_162.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which performs an element-wise modulo operation of two or more iterators.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {...(Iterator|number)} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 3.0, 2.0 ] );
* var it2 = array2iterator( [ 1.0, 4.0 ] );
*
* var iter = iterMod( it1, it2 );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 2.0
*
* var bool = iter.next().done;
* // returns true
*/
function iterMod() {
	var iterators;
	var types;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_790( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var r;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		if ( types[ 0 ] ) {
			v = iterators[ 0 ].next();
			if ( v.done ) {
				FLG += 1;
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					if ( typeof v.value === 'number' ) {
						r = v.value;
					} else {
						r = NaN;
					}
				} else {
					return {
						'done': true
					};
				}
			} else if ( typeof v.value === 'number' ) {
				r = v.value;
			} else {
				r = NaN;
			}
		} else {
			r = iterators[ 0 ];
		}
		for ( i = 1; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							r %= v.value;
						} else {
							r = NaN;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					r %= v.value;
				} else {
					r = NaN;
				}
			} else {
				r %= iterators[ i ];
			}
		}
		return {
			'value': r,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		return iterMod.apply( null, args );
	}
}


// EXPORTS //

var _$iterMod_790 = iterMod;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which performs an element-wise modulo operation of two or more iterators.
*
* @module @stdlib/math/iter/special/mod
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterMod = require( '@stdlib/math/iter/special/mod' );
*
* var it1 = array2iterator( [ 3.0, 2.0 ] );
* var it2 = array2iterator( [ 1.0, 4.0 ] );
*
* var iter = iterMod( it1, it2 );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 2.0
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterMod_790 = require( './main.js' ); */;


// EXPORTS //

var _$iterMod_789 = _$iterMod_790;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isNumber_792 = _$isNumber_162.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which performs element-wise multiplication of two or more iterators.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {...(Iterator|number)} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 1.0, 2.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterMultiply( it1, it2 );
*
* var v = iter.next().value;
* // returns 3.0
*
* v = iter.next().value;
* // returns 8.0
*
* var bool = iter.next().done;
* // returns true
*/
function iterMultiply() {
	var iterators;
	var types;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_792( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var s;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		s = 1.0;
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							s *= v.value;
						} else {
							s = NaN;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					s *= v.value;
				} else {
					s = NaN;
				}
			} else {
				s *= iterators[ i ];
			}
		}
		return {
			'value': s,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		return iterMultiply.apply( null, args );
	}
}


// EXPORTS //

var _$iterMultiply_792 = iterMultiply;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which performs element-wise multiplication of two or more iterators.
*
* @module @stdlib/math/iter/special/multiply
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterMultiply = require( '@stdlib/math/iter/special/multiply' );
*
* var it1 = array2iterator( [ 1.0, 2.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterMultiply( it1, it2 );
*
* var v = iter.next().value;
* // returns 3.0
*
* v = iter.next().value;
* // returns 8.0
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterMultiply_792 = require( './main.js' ); */;


// EXPORTS //

var _$iterMultiply_791 = _$iterMultiply_792;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the ramp function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = ramp( 3.14 );
* // returns 3.14
*
* @example
* var v = ramp( -3.14 );
* // returns 0.0
*
* @example
* var v = ramp( NaN );
* // returns NaN
*/
function ramp( x ) {
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		return x;
	}
	return 0.0; // handles `-0`
}


// EXPORTS //

var _$ramp_593 = ramp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the ramp function.
*
* @module @stdlib/math/base/special/ramp
*
* @example
* var ramp = require( '@stdlib/math/base/special/ramp' );
*
* var v = ramp( 3.14 );
* // returns 3.14
*
* v = ramp( -3.14 );
* // returns 0.0
*
* v = ramp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ramp_593 = require( './ramp.js' ); */;


// EXPORTS //

var _$ramp_592 = _$ramp_593;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$ramp_592 = require( '@stdlib/math/base/special/ramp' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the ramp function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterRamp( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterRamp( iterator ) {
	return _$iterator_811( iterator, _$ramp_592 );
}


// EXPORTS //

var _$iterRamp_794 = iterRamp;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the ramp function.
*
* @module @stdlib/math/iter/special/ramp
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterRamp = require( '@stdlib/math/iter/special/ramp' );
*
* var iter = iterRamp( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterRamp_794 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_793 = _$iterRamp_794;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$round_609 = require( '@stdlib/math/base/special/round' ); */;


// MAIN //

/**
* Returns an iterator which rounds each iterated value to the nearest integer.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterRound( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterRound( iterator ) {
	return _$iterator_811( iterator, _$round_609 );
}


// EXPORTS //

var _$iterRound_796 = iterRound;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rounds each iterated value to the nearest integer.
*
* @module @stdlib/math/iter/special/round
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterRound = require( '@stdlib/math/iter/special/round' );
*
* var iter = iterRound( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterRound_796 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_795 = _$iterRound_796;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Compute the reciprocal square root.
*
* @param {number} x - input value
* @returns {number} reciprocal square root
*
* @example
* var v = rsqrt( 4.0 );
* // returns 0.5
*
* @example
* var v = rsqrt( 100.0 );
* // returns 0.1
*
* @example
* var v = rsqrt( 0.0 );
* // returns Infinity
*
* @example
* var v = rsqrt( Infinity );
* // returns 0.0
*
* @example
* var v = rsqrt( -4.0 );
* // returns NaN
*
* @example
* var v = rsqrt( NaN );
* // returns NaN
*/
function rsqrt( x ) {
	return 1.0 / _$sqrt_625( x );
}


// EXPORTS //

var _$rsqrt_612 = rsqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the reciprocal square root.
*
* @module @stdlib/math/base/special/rsqrt
*
* @example
* var rsqrt = require( '@stdlib/math/base/special/rsqrt' );
*
* var v = rsqrt( 4.0 );
* // returns 0.5
*
* v = rsqrt( 100.0 );
* // returns 0.1
*
* v = rsqrt( 0.0 );
* // returns 0.0
*
* v = rsqrt( Infinity );
* // returns 0.0
*
* v = rsqrt( -4.0 );
* // returns NaN
*
* v = rsqrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$rsqrt_612 = require( './main.js' ); */;


// EXPORTS //

var _$rsqrt_611 = _$rsqrt_612;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$rsqrt_611 = require( '@stdlib/math/base/special/rsqrt' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the reciprocal (inverse) square root.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterRsqrt( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterRsqrt( iterator ) {
	return _$iterator_811( iterator, _$rsqrt_611 );
}


// EXPORTS //

var _$iterRsqrt_798 = iterRsqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the reciprocal (inverse) square root.
*
* @module @stdlib/math/iter/special/rsqrt
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterRsqrt = require( '@stdlib/math/iter/special/rsqrt' );
*
* var iter = iterRsqrt( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterRsqrt_798 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_797 = _$iterRsqrt_798;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the signum function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var sign = signum( -5.0 );
* // returns -1.0
*
* @example
* var sign = signum( 5.0 );
* // returns 1.0
*
* @example
* var sign = signum( -0.0 );
* // returns -0.0
*
* @example
* var sign = signum( 0.0 );
* // returns 0.0
*
* @example
* var sign = signum( NaN );
* // returns NaN
*/
function signum( x ) {
	if ( x === 0.0 || _$isnan_370( x ) ) {
		return x; // addresses both +-0
	}
	return ( x < 0.0 ) ? -1.0 : 1.0;
}


// EXPORTS //

var _$signum_614 = signum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the signum function.
*
* @module @stdlib/math/base/special/signum
*
* @example
* var signum = require( '@stdlib/math/base/special/signum' );
*
* var sign = signum( -5.0 );
* // returns -1.0
*
* sign = signum( 5.0 );
* // returns 1.0
*
* sign = signum( -0.0 );
* // returns -0.0
*
* sign = signum( 0.0 );
* // returns 0.0
*
* sign = signum( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$signum_614 = require( './signum.js' ); */;


// EXPORTS //

var _$signum_613 = _$signum_614;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$signum_613 = require( '@stdlib/math/base/special/signum' ); */;


// MAIN //

/**
* Returns an iterator which iteratively evaluates the signum function.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterSignum( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterSignum( iterator ) {
	return _$iterator_811( iterator, _$signum_613 );
}


// EXPORTS //

var _$iterSignum_800 = iterSignum;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively evaluates the signum function.
*
* @module @stdlib/math/iter/special/signum
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSignum = require( '@stdlib/math/iter/special/signum' );
*
* var iter = iterSignum( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterSignum_800 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_799 = _$iterSignum_800;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$sin_615 = require( '@stdlib/math/base/special/sin' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the sine.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterSin( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterSin( iterator ) {
	return _$iterator_811( iterator, _$sin_615 );
}


// EXPORTS //

var _$iterSin_802 = iterSin;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the sine.
*
* @module @stdlib/math/iter/special/sin
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSin = require( '@stdlib/math/iter/special/sin' );
*
* var iter = iterSin( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterSin_802 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_801 = _$iterSin_802;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;


// MAIN //

/**
* Returns an iterator which computes the sine of each iterated value times π.
*
* ## Notes
*
* -   Computes `sin(πx)` more accurately than `sin(pi*x)`, especially for large `x`.
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterSinpi( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterSinpi( iterator ) {
	return _$iterator_811( iterator, _$sinpi_623 );
}


// EXPORTS //

var _$iterSinpi_804 = iterSinpi;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which computes the sine of each iterated value times π.
*
* @module @stdlib/math/iter/special/sinpi
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSinpi = require( '@stdlib/math/iter/special/sinpi' );
*
* var iter = iterSinpi( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterSinpi_804 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_803 = _$iterSinpi_804;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes the principal square root.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterSqrt( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterSqrt( iterator ) {
	return _$iterator_811( iterator, _$sqrt_625 );
}


// EXPORTS //

var _$iterSqrt_806 = iterSqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes the principal square root.
*
* @module @stdlib/math/iter/special/sqrt
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterSqrt = require( '@stdlib/math/iter/special/sqrt' );
*
* var iter = iterSqrt( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterSqrt_806 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_805 = _$iterSqrt_806;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isNumber_808 = _$isNumber_162.isPrimitive;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator which performs element-wise subtraction of two or more iterators.
*
* ## Notes
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {...(Iterator|number)} iterator - subsequent iterators
* @throws {Error} must provide two or more iterators
* @throws {TypeError} must provide iterator protocol-compliant objects
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var it1 = array2iterator( [ 1.0, 5.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterSubtract( it1, it2 );
*
* var v = iter.next().value;
* // returns -2.0
*
* v = iter.next().value;
* // returns 1.0
*
* var bool = iter.next().done;
* // returns true
*/
function iterSubtract() {
	var iterators;
	var types;
	var niter;
	var iter;
	var FLG;
	var i;

	niter = arguments.length;
	if ( niter < 2 ) {
		throw new Error( 'insufficient input arguments. Must provide two or more iterators.' );
	}
	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_808( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	i = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var s;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		if ( types[ 0 ] ) {
			v = iterators[ 0 ].next();
			if ( v.done ) {
				FLG += 1;
				if ( _$hasOwnProp_78( v, 'value' ) ) {
					if ( typeof v.value === 'number' ) {
						s = v.value;
					} else {
						s = NaN;
					}
				} else {
					return {
						'done': true
					};
				}
			} else if ( typeof v.value === 'number' ) {
				s = v.value;
			} else {
				s = NaN;
			}
		} else {
			s = iterators[ 0 ];
		}
		for ( i = 1; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							s -= v.value;
						} else {
							s = NaN;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					s -= v.value;
				} else {
					s = NaN;
				}
			} else {
				s -= iterators[ i ];
			}
		}
		return {
			'value': s,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		return iterSubtract.apply( null, args );
	}
}


// EXPORTS //

var _$iterSubtract_808 = iterSubtract;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which performs element-wise subtraction of two or more iterators.
*
* @module @stdlib/math/iter/special/subtract
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
* var iterSubtract = require( '@stdlib/math/iter/special/subtract' );
*
* var it1 = array2iterator( [ 1.0, 5.0 ] );
* var it2 = array2iterator( [ 3.0, 4.0 ] );
*
* var iter = iterSubtract( it1, it2 );
*
* var v = iter.next().value;
* // returns -2.0
*
* v = iter.next().value;
* // returns 1.0
*
* var bool = iter.next().done;
* // returns true
*/

// MODULES //

/* removed: var _$iterSubtract_808 = require( './main.js' ); */;


// EXPORTS //

var _$iterSubtract_807 = _$iterSubtract_808;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$iterator_811 = require( '@stdlib/math/iter/tools/map' ); */;
/* removed: var _$trunc_629 = require( '@stdlib/math/base/special/trunc' ); */;


// MAIN //

/**
* Returns an iterator which rounds each iterated value toward zero.
*
* ## Notes
*
* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator protocol-compliant object
* @returns {Iterator} iterator
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
*
* var iter = iterTrunc( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterTrunc( iterator ) {
	return _$iterator_811( iterator, _$trunc_629 );
}


// EXPORTS //

var _$iterTrunc_810 = iterTrunc;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which rounds each iterated value toward zero.
*
* @module @stdlib/math/iter/special/trunc
*
* @example
* var randu = require( '@stdlib/random/iter/randu' );
* var iterTrunc = require( '@stdlib/math/iter/special/trunc' );
*
* var iter = iterTrunc( randu() );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterTrunc_810 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_809 = _$iterTrunc_810;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'invalid': NaN
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_819( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'invalid' ) ) {
		opts.invalid = options.invalid;
	}
	return null;
}


// EXPORTS //

var _$validate_819 = __validate_819;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isNumber_818 = _$isNumber_162.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_819 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which invokes a ternary function accepting numeric arguments for each iterated value.
*
* ## Notes
*
* -   When invoked, the input function is provided three arguments:
*
*     -   `x`: iterated value from first input iterator
*     -   `y`: iterated value from second input iterator
*     -   `z`: iterated value from third input iterator
*
* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.
*
* -   If an iterated value is non-numeric (including `NaN`), the function returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.
*
* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.
*
* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.
*
* @param {Iterator} iter0 - first input iterator
* @param {Iterator} iter1 - second input iterator
* @param {Iterator} iter2 - third input iterator
* @param {Function} fcn - function to invoke
* @param {Options} [options] - options
* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value
* @throws {TypeError} first argument must be an iterator protocol-compliant object
* @throws {TypeError} second argument must be an iterator protocol-compliant object
* @throws {TypeError} third argument must be an iterator protocol-compliant object
* @throws {TypeError} fourth argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var clamp = require( '@stdlib/math/base/special/clamp' );
*
* var x = uniform( 0.0, 10.0 );
* var min = uniform( 0.0, 1.0 );
* var max = uniform( 9.0, 10.0 );
*
* var iter = iterMap3( x, min, max, clamp );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterMap3( iter0, iter1, iter2, fcn, options ) {
	var iterators;
	var values;
	var types;
	var niter;
	var iter;
	var opts;
	var FLG;
	var err;
	var i;

	niter = 3;
	values = [ 0.0, 0.0, 0.0 ];

	iterators = [];
	types = [];
	for ( i = 0; i < niter; i++ ) {
		iterators.push( arguments[ i ] );
		if ( _$isIterator_145( arguments[ i ] ) ) {
			types.push( 1 );
		} else if ( __isNumber_818( arguments[ i ] ) ) {
			types.push( 0 );
		} else {
			throw new TypeError( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `' + i + '`. Value: `' + arguments[ i ] + '`.' );
		}
	}
	if ( !_$isFunction_132( fcn ) ) {
		throw new TypeError( 'invalid argument. Third argument must be a function. Value: `' + fcn + '`.' );
	}
	opts = {
		'invalid': NaN
	};
	if ( arguments.length > 4 ) {
		err = _$validate_819( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] && !_$isFunction_132( iterators[ i ][ _$IteratorSymbol_1345 ] ) ) { // eslint-disable-line max-len
				FLG = true;
				break;
			}
		}
		if ( !FLG ) {
			_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
		}
	}
	FLG = 0;
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var err;
		var v;
		var i;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		FLG = 0;
		err = 0;
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				v = iterators[ i ].next();
				if ( v.done ) {
					FLG += 1;
					if ( _$hasOwnProp_78( v, 'value' ) ) {
						if ( typeof v.value === 'number' ) {
							values[ i ] = v.value;
						} else {
							err = 1;
						}
						continue;
					}
					return {
						'done': true
					};
				}
				if ( typeof v.value === 'number' ) {
					values[ i ] = v.value;
				} else {
					err = 1;
				}
			} else {
				values[ i ] = iterators[ i ];
			}
		}
		if ( err ) {
			return {
				'value': opts.invalid,
				'done': false
			};
		}
		return {
			'value': fcn( values[ 0 ], values[ 1 ], values[ 2 ] ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = 1;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		var args;
		var i;

		args = [];
		for ( i = 0; i < niter; i++ ) {
			if ( types[ i ] ) {
				args.push( iterators[ i ][ _$IteratorSymbol_1345 ]() );
			} else {
				args.push( iterators[ i ] );
			}
		}
		args.push( fcn, opts );
		return iterMap3.apply( null, args );
	}
}


// EXPORTS //

var _$iterMap3_818 = iterMap3;

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which invokes a ternary function accepting numeric arguments for each iterated value.
*
* @module @stdlib/math/iter/tools/map3
*
* @example
* var uniform = require( '@stdlib/random/iter/uniform' );
* var clamp = require( '@stdlib/math/base/special/clamp' );
* var iterMap3 = require( '@stdlib/math/iter/tools/map3' );
*
* var x = uniform( 0.0, 10.0 );
* var min = uniform( 0.0, 1.0 );
* var max = uniform( 9.0, 10.0 );
*
* var iter = iterMap3( x, min, max, clamp );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterMap3_818 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_817 = _$iterMap3_818;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable read-write accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - get accessor
* @param {Function} setter - set accessor
*
* @example
* function getter() {
*     return name + ' foo';
* }
*
* function setter( v ) {
*     name = v;
* }
*
* var name = 'bar';
* var obj = {};
*
* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
*
* var v = obj.foo;
* // returns 'bar foo'
*
* obj.foo = 'beep';
*
* v = obj.foo;
* // returns 'beep foo'
*/
function setNonEnumerableReadWriteAccessor( obj, prop, getter, setter ) { // eslint-disable-line id-length
	_$defineProperty_1364( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'get': getter,
		'set': setter
	});
}


// EXPORTS //

var _$setNonEnumerableReadWriteAccessor_1362 = setNonEnumerableReadWriteAccessor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-write accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-write-accessor
*
* @example
* var setNonEnumerableReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );
*
* function getter() {
*     return name + ' foo';
* }
*
* function setter( v ) {
*     name = v;
* }
*
* var name = 'bar';
* var obj = {};
*
* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
*
* var v = obj.foo;
* // returns 'bar foo'
*
* obj.foo = 'beep';
*
* v = obj.foo;
* // returns 'beep foo'
*/

// MODULES //

/* removed: var _$setNonEnumerableReadWriteAccessor_1362 = require( './main.js' ); */;


// EXPORTS //

var _$setNonEnumerableReadWriteAccessor_1361 = _$setNonEnumerableReadWriteAccessor_1362;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Creates a function which always returns the same value.
*
* @param {*} [value] - value to always return
* @returns {Function} constant function
*
* @example
* var fcn = wrap( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/
function wrap( value ) {
	return constantFunction;

	/**
	* Constant function.
	*
	* @private
	* @returns {*} constant value
	*/
	function constantFunction() {
		return value;
	}
}


// EXPORTS //

var _$wrap_1347 = wrap;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a constant function.
*
* @module @stdlib/utils/constant-function
*
* @example
* var constantFunction = require( '@stdlib/utils/constant-function' );
*
* var fcn = constantFunction( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

// MODULES //

/* removed: var _$wrap_1347 = require( './constant_function.js' ); */;


// EXPORTS //

var _$constantFunction_1348 = _$wrap_1347;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getPrototype_1372 = require( '@stdlib/utils/get-prototype-of' ); */;
/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// MAIN //

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/
function isError( value ) {
	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...
	if ( value instanceof Error ) {
		return true;
	}
	// Walk the prototype tree until we find an object having the desired native class...
	while ( value ) {
		if ( _$nativeClass_1403( value ) === '[object Error]' ) {
			return true;
		}
		value = _$getPrototype_1372( value );
	}
	return false;
}


// EXPORTS //

var _$isError_127 = isError;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

// MODULES //

/* removed: var _$isError_127 = require( './main.js' ); */;


// EXPORTS //

var _$isError_126 = _$isError_127;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Regular expression to parse a regular expression string.
*
* @module @stdlib/regexp/regexp
* @type {RegExp}
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var bool = RE_REGEXP.test( '/^beep$/' );
* // returns true
*
* bool = RE_REGEXP.test( '' );
* // returns false
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var parts = RE_REGEXP.exec( '/^.*$/ig' );
* // returns [ '/^.*$/ig', '^.*$', 'ig', 'index': 0, 'input': '/^.*$/ig' ]
*/


// MAIN //

/**
* Matches parts of a regular expression string.
*
* Regular expression: `/^\/((?:\\\/|[^\/])+)\/([imgy]*)$/`
*
* -   `/^\/`
*     -   match a string that begins with a `/`
*
* -   `()`
*     -   capture
*
* -   `(?:)+`
*     -   capture, but do not remember, a group of characters which occur one or more times
*
* -   `\\\/`
*     -   match the literal `\/`
*
* -   `|`
*     -   OR
*
* -   `[^\/]`
*     -   anything which is not the literal `\/`
*
* -   `\/`
*     -   match the literal `/`
*
* -   `([imgy]*)`
*     -   capture any characters matching `imgy` occurring zero or more times
*
* -   `$/`
*     -   string end
*
*
* @constant
* @type {RegExp}
* @default /^\/((?:\\\/|[^\/])+)\/([imgy]*)$/
*/
var RE_REGEXP = /^\/((?:\\\/|[^\/])+)\/([imgy]*)$/; // eslint-disable-line no-useless-escape


// EXPORTS //

var _$RE_REGEXP_1134 = RE_REGEXP;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isString_1418 = _$isString_186.isPrimitive;
/* removed: var _$RE_REGEXP_1134 = require( '@stdlib/regexp/regexp' ); */;


// MAIN //

/**
* Parses a regular expression string and returns a new regular expression.
*
* @param {string} str - regular expression string
* @throws {TypeError} must provide a regular expression string
* @returns {(RegExp|null)} regular expression or null
*
* @example
* var re = reFromString( '/beep/' );
* // returns /beep/
*/
function reFromString( str ) {
	if ( !__isString_1418( str ) ) {
		throw new TypeError( 'invalid argument. Must provide a regular expression string. Value: `' + str + '`.' );
	}
	// Capture the regular expression pattern and any flags:
	str = _$RE_REGEXP_1134.exec( str );

	// Create a new regular expression:
	return ( str ) ? new RegExp( str[1], str[2] ) : null;
}


// EXPORTS //

var _$reFromString_1418 = reFromString;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a regular expression from a regular expression string.
*
* @module @stdlib/utils/regexp-from-string
*
* @example
* var reFromString = require( '@stdlib/utils/regexp-from-string' );
*
* var re = reFromString( '/beep/' );
* // returns /beep/
*/

// MODULES //

/* removed: var _$reFromString_1418 = require( './from_string.js' ); */;


// EXPORTS //

var _$reFromString_1419 = _$reFromString_1418;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __bool_1415 = ( typeof Object.getOwnPropertyNames !== 'undefined' );


// EXPORTS //

var _$bool_1415 = __bool_1415;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var propertyNames = Object.getOwnPropertyNames;


// MAIN //

/**
* Returns an array of an object's own enumerable and non-enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var keys = getOwnPropertyNames( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/
function getOwnPropertyNames( value ) {
	return propertyNames( Object( value ) );
}


// EXPORTS //

var _$getOwnPropertyNames_1414 = getOwnPropertyNames;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$keys_1393 = require( '@stdlib/utils/keys' ); */;


// MAIN //

/**
* Returns an array of an object's own enumerable and non-enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
* -   In environments lacking support for `Object.getOwnPropertyNames()`, property descriptors are unavailable, and thus all properties can be safely assumed to be enumerable. Hence, we can defer to calling `Object.keys`, which retrieves all own enumerable property names.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var keys = getOwnPropertyNames( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/
function __getOwnPropertyNames_1417( value ) {
	return _$keys_1393( Object( value ) );
}


// EXPORTS //

var _$getOwnPropertyNames_1417 = __getOwnPropertyNames_1417;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an array of an object's own enumerable and non-enumerable property names.
*
* @module @stdlib/utils/property-names
*
* @example
* var getOwnPropertyNames = require( '@stdlib/utils/property-names' );
*
* var keys = getOwnPropertyNames({
*   'foo': 'bar',
*   'beep': 'boop'
* });
* // e.g., returns [ 'foo', 'beep' ]
*/

// MODULES //

/* removed: var _$bool_1415 = require( './has_builtin.js' ); */;
/* removed: var _$getOwnPropertyNames_1414 = require( './builtin.js' ); */;
/* removed: var _$getOwnPropertyNames_1417 = require( './polyfill.js' ); */;


// MAIN //

var __main_1416;
if ( _$bool_1415 ) {
	__main_1416 = _$getOwnPropertyNames_1414;
} else {
	__main_1416 = _$getOwnPropertyNames_1417;
}


// EXPORTS //

var _$main_1416 = __main_1416;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __bool_1411 = ( typeof Object.getOwnPropertyDescriptor !== 'undefined' );


// EXPORTS //

var _$bool_1411 = __bool_1411;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var propertyDescriptor = Object.getOwnPropertyDescriptor;


// MAIN //

/**
* Returns a property descriptor for an object's own property.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have a provided property, rather than `undefined`.
*
* @private
* @param {*} value - input object
* @param {(string|symbol)} property - property
* @returns {(Object|null)} property descriptor or null
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var desc = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':3.14}
*/
function getOwnPropertyDescriptor( value, property ) {
	var desc;
	if ( value === null || value === void 0 ) {
		return null;
	}
	desc = propertyDescriptor( value, property );
	return ( desc === void 0 ) ? null : desc;
}


// EXPORTS //

var _$getOwnPropertyDescriptor_1410 = getOwnPropertyDescriptor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;


// MAIN //

/**
* Returns a property descriptor for an object's own property.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have a provided property, rather than `undefined`.
* -   In environments lacking `Object.getOwnPropertyDescriptor()` support, property descriptors do not exist. In non-supporting environment, if an object has a provided property, this function returns a descriptor object equivalent to that returned in a supporting environment; otherwise, the function returns `null`.
*
* @private
* @param {*} value - input object
* @param {(string|symbol)} property - property
* @returns {(Object|null)} property descriptor or null
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var desc = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':3.14}
*/
function __getOwnPropertyDescriptor_1413( value, property ) {
	if ( _$hasOwnProp_78( value, property ) ) {
		return {
			'configurable': true,
			'enumerable': true,
			'writable': true,
			'value': value[ property ]
		};
	}
	return null;
}


// EXPORTS //

var _$getOwnPropertyDescriptor_1413 = __getOwnPropertyDescriptor_1413;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a property descriptor for an object's own property.
*
* @module @stdlib/utils/property-descriptor
*
* @example
* var getOwnPropertyDescriptor = require( '@stdlib/utils/property-descriptor' );
*
* var obj = {
*   'foo': 'bar',
*   'beep': 'boop'
* };
*
* var keys = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':'bar'}
*/

// MODULES //

/* removed: var _$bool_1411 = require( './has_builtin.js' ); */;
/* removed: var _$getOwnPropertyDescriptor_1410 = require( './builtin.js' ); */;
/* removed: var _$getOwnPropertyDescriptor_1413 = require( './polyfill.js' ); */;


// MAIN //

var __main_1412;
if ( _$bool_1411 ) {
	__main_1412 = _$getOwnPropertyDescriptor_1410;
} else {
	__main_1412 = _$getOwnPropertyDescriptor_1413;
}


// EXPORTS //

var _$main_1412 = __main_1412;

var _$base64Js_1427 = {};
'use strict'

_$base64Js_1427.byteLength = byteLength
_$base64Js_1427.toByteArray = toByteArray
_$base64Js_1427.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

var _$ieee754_1429 = {};
_$ieee754_1429.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

_$ieee754_1429.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

var _$main_75 = {};
(function (Buffer){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Buffer === 'function' ) ? Buffer : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

_$main_75 = main;

}).call(this,_$buffer_1428({}).Buffer)
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isBuffer_114 = require( '@stdlib/assert/is-buffer' ); */;
/* removed: var _$main_75 = require( './buffer.js' ); */;


// MAIN //

/**
* Tests for native `Buffer` support.
*
* @returns {boolean} boolean indicating if an environment has `Buffer` support
*
* @example
* var bool = hasNodeBufferSupport();
* // returns <boolean>
*/
function hasNodeBufferSupport() {
	var bool;
	var b;

	if ( typeof _$main_75 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		if ( typeof _$main_75.from === 'function' ) {
			b = _$main_75.from( [ 1, 2, 3, 4 ] );
		} else {
			b = new _$main_75( [ 1, 2, 3, 4 ] ); // Note: this is deprecated behavior starting in Node v6 (see https://nodejs.org/api/buffer.html#buffer_new_buffer_array)
		}
		bool = (
			_$isBuffer_114( b ) &&
			b[ 0 ] === 1 &&
			b[ 1 ] === 2 &&
			b[ 2 ] === 3 &&
			b[ 3 ] === 4
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasNodeBufferSupport_77 = hasNodeBufferSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Buffer` support.
*
* @module @stdlib/assert/has-node-buffer-support
*
* @example
* var hasNodeBufferSupport = require( '@stdlib/assert/has-node-buffer-support' );
*
* var bool = hasNodeBufferSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasNodeBufferSupport_77 = require( './main.js' ); */;


// EXPORTS //

var _$hasNodeBufferSupport_76 = _$hasNodeBufferSupport_77;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_209 = _$buffer_1428({}).Buffer; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_209 = __ctor_209;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write (browser) polyfill

// MAIN //

/**
* Buffer constructor.
*
* @throws {Error} not implemented
*/
function __polyfill_211() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_211 = __polyfill_211;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Buffer constructor.
*
* @module @stdlib/buffer/ctor
*
* @example
* var ctor = require( '@stdlib/buffer/ctor' );
*
* var b = new ctor( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*/

// MODULES //

/* removed: var _$hasNodeBufferSupport_76 = require( '@stdlib/assert/has-node-buffer-support' ); */;
/* removed: var _$ctor_209 = require( './buffer.js' ); */;
/* removed: var _$polyfill_211 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_210;
if ( _$hasNodeBufferSupport_76() ) {
	__ctor_210 = _$ctor_209;
} else {
	__ctor_210 = _$polyfill_211;
}


// EXPORTS //

var _$ctor_210 = __ctor_210;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$ctor_210 = require( '@stdlib/buffer/ctor' ); */;


// MAIN //

var __bool_212 = _$isFunction_132( _$ctor_210.from );


// EXPORTS //

var _$bool_212 = __bool_212;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isBuffer_114 = require( '@stdlib/assert/is-buffer' ); */;
/* removed: var _$ctor_210 = require( '@stdlib/buffer/ctor' ); */;


// MAIN //

/**
* Copies buffer data to a new `Buffer` instance.
*
* @param {Buffer} buffer - buffer from which to copy
* @throws {TypeError} must provide a `Buffer` instance
* @returns {Buffer} new `Buffer` instance
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = fromBuffer( b1 );
* // returns <Buffer>
*/
function fromBuffer( buffer ) {
	if ( !_$isBuffer_114( buffer ) ) {
		throw new TypeError( 'invalid argument. Must provide a Buffer. Value: `' + buffer + '`' );
	}
	return _$ctor_210.from( buffer );
}


// EXPORTS //

var _$fromBuffer_214 = fromBuffer;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isBuffer_114 = require( '@stdlib/assert/is-buffer' ); */;
/* removed: var _$ctor_210 = require( '@stdlib/buffer/ctor' ); */;


// MAIN //

/**
* Copies buffer data to a new `Buffer` instance.
*
* @param {Buffer} buffer - buffer from which to copy
* @throws {TypeError} must provide a `Buffer` instance
* @returns {Buffer} new `Buffer` instance
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = fromBuffer( b1 );
* // returns <Buffer>
*/
function __fromBuffer_215( buffer ) {
	if ( !_$isBuffer_114( buffer ) ) {
		throw new TypeError( 'invalid argument. Must provide a Buffer. Value: `' + buffer + '`' );
	}
	return new _$ctor_210( buffer ); // eslint-disable-line no-buffer-constructor
}


// EXPORTS //

var _$fromBuffer_215 = __fromBuffer_215;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Copy buffer data to a new `Buffer` instance.
*
* @module @stdlib/buffer/from-buffer
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
* var copyBuffer = require( '@stdlib/buffer/from-buffer' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = copyBuffer( b1 );
* // returns <Buffer>
*/

// MODULES //

/* removed: var _$bool_212 = require( './has_from.js' ); */;
/* removed: var _$fromBuffer_214 = require( './main.js' ); */;
/* removed: var _$fromBuffer_215 = require( './polyfill.js' ); */;


// MAIN //

var copyBuffer;
if ( _$bool_212 ) {
	copyBuffer = _$fromBuffer_214;
} else {
	copyBuffer = _$fromBuffer_215;
}


// EXPORTS //

var _$copyBuffer_213 = copyBuffer;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasInt8Array = ( typeof Int8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is an Int8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int8Array
*
* @example
* var bool = isInt8Array( new Int8Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt8Array( [] );
* // returns false
*/
function isInt8Array( value ) {
	return (
		( hasInt8Array && value instanceof Int8Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Int8Array]'
	);
}


// EXPORTS //

var _$isInt8Array_139 = isInt8Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an Int8Array.
*
* @module @stdlib/assert/is-int8array
*
* @example
* var isInt8Array = require( '@stdlib/assert/is-int8array' );
*
* var bool = isInt8Array( new Int8Array( 10 ) );
* // returns true
*
* bool = isInt8Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isInt8Array_139 = require( './main.js' ); */;


// EXPORTS //

var _$isInt8Array_138 = _$isInt8Array_139;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum signed 8-bit integer.
*
* @module @stdlib/constants/math/int8-max
* @type {integer32}
*
* @example
* var INT8_MAX = require( '@stdlib/constants/math/int8-max' );
* // returns 127
*/


// MAIN //

/**
* Maximum signed 8-bit integer.
*
* ## Notes
*
* The number is given by
*
* ```tex
* 2^{7} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111
* ```
*
* @constant
* @type {integer32}
* @default 127
*/
var INT8_MAX = 127|0; // asm type annotation


// EXPORTS //

var _$INT8_MAX_250 = INT8_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Minimum signed 8-bit integer.
*
* @module @stdlib/constants/math/int8-min
* @type {integer32}
*
* @example
* var INT8_MIN = require( '@stdlib/constants/math/int8-min' );
* // returns -128
*/


// MAIN //

/**
* Minimum signed 8-bit integer.
*
* ## Notes
*
* The number is given by
*
* ```tex
* -(2^{7})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 10000000
* ```
*
* @constant
* @type {integer32}
* @default -128
*/
var INT8_MIN = -128|0; // asm type annotation


// EXPORTS //

var _$INT8_MIN_251 = INT8_MIN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_71 = ( typeof Int8Array === 'function' ) ? Int8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_71 = __main_71;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInt8Array_138 = require( '@stdlib/assert/is-int8array' ); */;
/* removed: var _$INT8_MAX_250 = require( '@stdlib/constants/math/int8-max' ); */;
/* removed: var _$INT8_MIN_251 = require( '@stdlib/constants/math/int8-min' ); */;
/* removed: var _$main_71 = require( './int8array.js' ); */;


// MAIN //

/**
* Tests for native `Int8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int8Array` support
*
* @example
* var bool = hasInt8ArraySupport();
* // returns <boolean>
*/
function hasInt8ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_71 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_71( [ 1, 3.14, -3.14, _$INT8_MAX_250+1 ] );
		bool = (
			_$isInt8Array_138( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&     // truncation
			arr[ 2 ] === -3 &&    // truncation
			arr[ 3 ] === _$INT8_MIN_251 // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasInt8ArraySupport_72 = hasInt8ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Int8Array` support.
*
* @module @stdlib/assert/has-int8array-support
*
* @example
* var hasInt8ArraySupport = require( '@stdlib/assert/has-int8array-support' );
*
* var bool = hasInt8ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasInt8ArraySupport_72 = require( './main.js' ); */;


// EXPORTS //

var _$hasInt8ArraySupport_70 = _$hasInt8ArraySupport_72;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_16 = ( typeof Int8Array === 'function' ) ? Int8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_16 = __ctor_16;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of twos-complement 8-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_17() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_17 = __polyfill_17;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 8-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int8
*
* @example
* var ctor = require( '@stdlib/array/int8' );
*
* var arr = new ctor( 10 );
* // returns <Int8Array>
*/

// MODULES //

/* removed: var _$hasInt8ArraySupport_70 = require( '@stdlib/assert/has-int8array-support' ); */;
/* removed: var _$ctor_16 = require( './int8array.js' ); */;
/* removed: var _$polyfill_17 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_15;
if ( _$hasInt8ArraySupport_70() ) {
	__ctor_15 = _$ctor_16;
} else {
	__ctor_15 = _$polyfill_17;
}


// EXPORTS //

var _$ctor_15 = __ctor_15;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint8ClampedArray = ( typeof Uint8ClampedArray === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8ClampedArray.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8ClampedArray
*
* @example
* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
* // returns true
*
* @example
* var bool = isUint8ClampedArray( [] );
* // returns false
*/
function isUint8ClampedArray( value ) {
	return (
		( hasUint8ClampedArray && value instanceof Uint8ClampedArray ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Uint8ClampedArray]'
	);
}


// EXPORTS //

var _$isUint8ClampedArray_203 = isUint8ClampedArray;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8ClampedArray.
*
* @module @stdlib/assert/is-uint8clampedarray
*
* @example
* var isUint8ClampedArray = require( '@stdlib/assert/is-uint8clampedarray' );
*
* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
* // returns true
*
* bool = isUint8ClampedArray( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint8ClampedArray_203 = require( './main.js' ); */;


// EXPORTS //

var _$isUint8ClampedArray_202 = _$isUint8ClampedArray_203;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_97 = ( typeof Uint8ClampedArray === 'function' ) ? Uint8ClampedArray : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_97 = __main_97;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint8ClampedArray_202 = require( '@stdlib/assert/is-uint8clampedarray' ); */;
/* removed: var _$main_97 = require( './uint8clampedarray.js' ); */;


// MAIN //

/**
* Tests for native `Uint8ClampedArray` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8ClampedArray` support
*
* @example
* var bool = hasUint8ClampedArraySupport();
* // returns <boolean>
*/
function hasUint8ClampedArraySupport() { // eslint-disable-line id-length
	var bool;
	var arr;

	if ( typeof _$main_97 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_97( [ -1, 0, 1, 3.14, 4.99, 255, 256 ] );
		bool = (
			_$isUint8ClampedArray_202( arr ) &&
			arr[ 0 ] === 0 &&   // clamped
			arr[ 1 ] === 0 &&
			arr[ 2 ] === 1 &&
			arr[ 3 ] === 3 &&   // round to nearest
			arr[ 4 ] === 5 &&   // round to nearest
			arr[ 5 ] === 255 &&
			arr[ 6 ] === 255    // clamped
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint8ClampedArraySupport_96 = hasUint8ClampedArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8ClampedArray` support.
*
* @module @stdlib/assert/has-uint8clampedarray-support
*
* @example
* var hasUint8ClampedArraySupport = require( '@stdlib/assert/has-uint8clampedarray-support' );
*
* var bool = hasUint8ClampedArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint8ClampedArraySupport_96 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint8ClampedArraySupport_95 = _$hasUint8ClampedArraySupport_96;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_49 = ( typeof Uint8ClampedArray === 'function' ) ? Uint8ClampedArray : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_49 = __ctor_49;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
*
* @throws {Error} not implemented
*/
function __polyfill_48() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_48 = __polyfill_48;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
*
* @module @stdlib/array/uint8c
*
* @example
* var ctor = require( '@stdlib/array/uint8c' );
*
* var arr = new ctor( 10 );
* // returns <Uint8ClampedArray>
*/

// MODULES //

/* removed: var _$hasUint8ClampedArraySupport_95 = require( '@stdlib/assert/has-uint8clampedarray-support' ); */; // eslint-disable-line id-length
/* removed: var _$ctor_49 = require( './uint8clampedarray.js' ); */;
/* removed: var _$polyfill_48 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_47;
if ( _$hasUint8ClampedArraySupport_95() ) {
	__ctor_47 = _$ctor_49;
} else {
	__ctor_47 = _$polyfill_48;
}


// EXPORTS //

var _$ctor_47 = __ctor_47;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasInt16Array = ( typeof Int16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is an Int16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int16Array
*
* @example
* var bool = isInt16Array( new Int16Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt16Array( [] );
* // returns false
*/
function isInt16Array( value ) {
	return (
		( hasInt16Array && value instanceof Int16Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Int16Array]'
	);
}


// EXPORTS //

var _$isInt16Array_135 = isInt16Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an Int16Array.
*
* @module @stdlib/assert/is-int16array
*
* @example
* var isInt16Array = require( '@stdlib/assert/is-int16array' );
*
* var bool = isInt16Array( new Int16Array( 10 ) );
* // returns true
*
* bool = isInt16Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isInt16Array_135 = require( './main.js' ); */;


// EXPORTS //

var _$isInt16Array_134 = _$isInt16Array_135;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum signed 16-bit integer.
*
* @module @stdlib/constants/math/int16-max
* @type {integer32}
*
* @example
* var INT16_MAX = require( '@stdlib/constants/math/int16-max' );
* // returns 32767
*/


// MAIN //

/**
* Maximum signed 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{15} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 32767
*/
var INT16_MAX = 32767|0; // asm type annotation


// EXPORTS //

var _$INT16_MAX_246 = INT16_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Minimum signed 16-bit integer.
*
* @module @stdlib/constants/math/int16-min
* @type {integer32}
*
* @example
* var INT16_MIN = require( '@stdlib/constants/math/int16-min' );
* // returns -32768
*/


// MAIN //

/**
* Minimum signed 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{15})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 1000000000000000
* ```
*
* @constant
* @type {integer32}
* @default -32768
*/
var INT16_MIN = -32768|0; // asm type annotation


// EXPORTS //

var _$INT16_MIN_247 = INT16_MIN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_65 = ( typeof Int16Array === 'function' ) ? Int16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_65 = __main_65;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInt16Array_134 = require( '@stdlib/assert/is-int16array' ); */;
/* removed: var _$INT16_MAX_246 = require( '@stdlib/constants/math/int16-max' ); */;
/* removed: var _$INT16_MIN_247 = require( '@stdlib/constants/math/int16-min' ); */;
/* removed: var _$main_65 = require( './int16array.js' ); */;


// MAIN //

/**
* Tests for native `Int16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int16Array` support
*
* @example
* var bool = hasInt16ArraySupport();
* // returns <boolean>
*/
function hasInt16ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_65 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_65( [ 1, 3.14, -3.14, _$INT16_MAX_246+1 ] );
		bool = (
			_$isInt16Array_134( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&      // truncation
			arr[ 2 ] === -3 &&     // truncation
			arr[ 3 ] === _$INT16_MIN_247 // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasInt16ArraySupport_66 = hasInt16ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Int16Array` support.
*
* @module @stdlib/assert/has-int16array-support
*
* @example
* var hasInt16ArraySupport = require( '@stdlib/assert/has-int16array-support' );
*
* var bool = hasInt16ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasInt16ArraySupport_66 = require( './main.js' ); */;


// EXPORTS //

var _$hasInt16ArraySupport_64 = _$hasInt16ArraySupport_66;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_10 = ( typeof Int16Array === 'function' ) ? Int16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_10 = __ctor_10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of twos-complement 16-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_11() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_11 = __polyfill_11;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 16-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int16
*
* @example
* var ctor = require( '@stdlib/array/int16' );
*
* var arr = new ctor( 10 );
* // returns <Int16Array>
*/

// MODULES //

/* removed: var _$hasInt16ArraySupport_64 = require( '@stdlib/assert/has-int16array-support' ); */;
/* removed: var _$ctor_10 = require( './int16array.js' ); */;
/* removed: var _$polyfill_11 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_9;
if ( _$hasInt16ArraySupport_64() ) {
	__ctor_9 = _$ctor_10;
} else {
	__ctor_9 = _$polyfill_11;
}


// EXPORTS //

var _$ctor_9 = __ctor_9;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasInt32Array = ( typeof Int32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is an Int32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int32Array
*
* @example
* var bool = isInt32Array( new Int32Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt32Array( [] );
* // returns false
*/
function isInt32Array( value ) {
	return (
		( hasInt32Array && value instanceof Int32Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Int32Array]'
	);
}


// EXPORTS //

var _$isInt32Array_137 = isInt32Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an Int32Array.
*
* @module @stdlib/assert/is-int32array
*
* @example
* var isInt32Array = require( '@stdlib/assert/is-int32array' );
*
* var bool = isInt32Array( new Int32Array( 10 ) );
* // returns true
*
* bool = isInt32Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isInt32Array_137 = require( './main.js' ); */;


// EXPORTS //

var _$isInt32Array_136 = _$isInt32Array_137;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
* // returns 2147483647
*/


// MAIN //

/**
* Maximum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/
var INT32_MAX = 2147483647|0; // asm type annotation


// EXPORTS //

var _$INT32_MAX_248 = INT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Minimum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-min
* @type {integer32}
*
* @example
* var INT32_MIN = require( '@stdlib/constants/math/int32-min' );
* // returns -2147483648
*/


// MAIN //

/**
* Minimum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{31})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 10000000000000000000000000000000
* ```
*
* @constant
* @type {integer32}
* @default -2147483648
*/
var INT32_MIN = -2147483648|0; // asm type annotation


// EXPORTS //

var _$INT32_MIN_249 = INT32_MIN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_68 = ( typeof Int32Array === 'function' ) ? Int32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_68 = __main_68;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInt32Array_136 = require( '@stdlib/assert/is-int32array' ); */;
/* removed: var _$INT32_MAX_248 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$INT32_MIN_249 = require( '@stdlib/constants/math/int32-min' ); */;
/* removed: var _$main_68 = require( './int32array.js' ); */;


// MAIN //

/**
* Tests for native `Int32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int32Array` support
*
* @example
* var bool = hasInt32ArraySupport();
* // returns <boolean>
*/
function hasInt32ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_68 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_68( [ 1, 3.14, -3.14, _$INT32_MAX_248+1 ] );
		bool = (
			_$isInt32Array_136( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&      // truncation
			arr[ 2 ] === -3 &&     // truncation
			arr[ 3 ] === _$INT32_MIN_249 // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasInt32ArraySupport_69 = hasInt32ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Int32Array` support.
*
* @module @stdlib/assert/has-int32array-support
*
* @example
* var hasInt32ArraySupport = require( '@stdlib/assert/has-int32array-support' );
*
* var bool = hasInt32ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasInt32ArraySupport_69 = require( './main.js' ); */;


// EXPORTS //

var _$hasInt32ArraySupport_67 = _$hasInt32ArraySupport_69;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_13 = ( typeof Int32Array === 'function' ) ? Int32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_13 = __ctor_13;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of twos-complement 32-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_14() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_14 = __polyfill_14;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 32-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int32
*
* @example
* var ctor = require( '@stdlib/array/int32' );
*
* var arr = new ctor( 10 );
* // returns <Int32Array>
*/

// MODULES //

/* removed: var _$hasInt32ArraySupport_67 = require( '@stdlib/assert/has-int32array-support' ); */;
/* removed: var _$ctor_13 = require( './int32array.js' ); */;
/* removed: var _$polyfill_14 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_12;
if ( _$hasInt32ArraySupport_67() ) {
	__ctor_12 = _$ctor_13;
} else {
	__ctor_12 = _$polyfill_14;
}


// EXPORTS //

var _$ctor_12 = __ctor_12;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1403 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasFloat32Array = ( typeof Float32Array === 'function' );// eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float32Array
*
* @example
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat32Array( [] );
* // returns false
*/
function isFloat32Array( value ) {
	return (
		( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1403( value ) === '[object Float32Array]'
	);
}


// EXPORTS //

var _$isFloat32Array_129 = isFloat32Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float32Array.
*
* @module @stdlib/assert/is-float32array
*
* @example
* var isFloat32Array = require( '@stdlib/assert/is-float32array' );
*
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* bool = isFloat32Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isFloat32Array_129 = require( './main.js' ); */;


// EXPORTS //

var _$isFloat32Array_128 = _$isFloat32Array_129;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_55 = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_55 = __main_55;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFloat32Array_128 = require( '@stdlib/assert/is-float32array' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$main_55 = require( './float32array.js' ); */;


// MAIN //

/**
* Tests for native `Float32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float32Array` support
*
* @example
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/
function hasFloat32ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_55 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_55( [ 1.0, 3.14, -3.14, 5.0e40 ] );
		bool = (
			_$isFloat32Array_128( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.140000104904175 &&
			arr[ 2 ] === -3.140000104904175 &&
			arr[ 3 ] === _$FLOAT64_PINF_238
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasFloat32ArraySupport_57 = hasFloat32ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float32Array` support.
*
* @module @stdlib/assert/has-float32array-support
*
* @example
* var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
*
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasFloat32ArraySupport_57 = require( './main.js' ); */;


// EXPORTS //

var _$hasFloat32ArraySupport_56 = _$hasFloat32ArraySupport_57;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_1 = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_1 = __ctor_1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_3() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_3 = __polyfill_3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float32
*
* @example
* var ctor = require( '@stdlib/array/float32' );
*
* var arr = new ctor( 10 );
* // returns <Float32Array>
*/

// MODULES //

/* removed: var _$hasFloat32ArraySupport_56 = require( '@stdlib/assert/has-float32array-support' ); */;
/* removed: var _$ctor_1 = require( './float32array.js' ); */;
/* removed: var _$polyfill_3 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_2;
if ( _$hasFloat32ArraySupport_56() ) {
	__ctor_2 = _$ctor_1;
} else {
	__ctor_2 = _$polyfill_3;
}


// EXPORTS //

var _$ctor_2 = __ctor_2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_15 = require( '@stdlib/array/int8' ); */;
/* removed: var _$ctor_44 = require( '@stdlib/array/uint8' ); */;
/* removed: var _$ctor_47 = require( '@stdlib/array/uint8c' ); */;
/* removed: var _$ctor_9 = require( '@stdlib/array/int16' ); */;
/* removed: var _$ctor_38 = require( '@stdlib/array/uint16' ); */;
/* removed: var _$ctor_12 = require( '@stdlib/array/int32' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;


// VARIABLES //

var hash;


// FUNCTIONS //

/**
* Copies an `Int8Array`.
*
* @private
* @param {Int8Array} arr - array to copy
* @returns {Int8Array} new array
*/
function int8array( arr ) {
	return new _$ctor_15( arr );
}

/**
* Copies a `Uint8Array`.
*
* @private
* @param {Uint8Array} arr - array to copy
* @returns {Uint8Array} new array
*/
function uint8array( arr ) {
	return new _$ctor_44( arr );
}

/**
* Copies a `Uint8ClampedArray`.
*
* @private
* @param {Uint8ClampedArray} arr - array to copy
* @returns {Uint8ClampedArray} new array
*/
function uint8clampedarray( arr ) {
	return new _$ctor_47( arr );
}

/**
* Copies an `Int16Array`.
*
* @private
* @param {Int16Array} arr - array to copy
* @returns {Int16Array} new array
*/
function int16array( arr ) {
	return new _$ctor_9( arr );
}

/**
* Copies a `Uint16Array`.
*
* @private
* @param {Uint16Array} arr - array to copy
* @returns {Uint16Array} new array
*/
function uint16array( arr ) {
	return new _$ctor_38( arr );
}

/**
* Copies an `Int32Array`.
*
* @private
* @param {Int32Array} arr - array to copy
* @returns {Int32Array} new array
*/
function int32array( arr ) {
	return new _$ctor_12( arr );
}

/**
* Copies a `Uint32Array`.
*
* @private
* @param {Uint32Array} arr - array to copy
* @returns {Uint32Array} new array
*/
function uint32array( arr ) {
	return new _$ctor_41( arr );
}

/**
* Copies a `Float32Array`.
*
* @private
* @param {Float32Array} arr - array to copy
* @returns {Float32Array} new array
*/
function float32array( arr ) {
	return new _$ctor_2( arr );
}

/**
* Copies a `Float64Array`.
*
* @private
* @param {Float64Array} arr - array to copy
* @returns {Float64Array} new array
*/
function float64array( arr ) {
	return new _$ctor_5( arr );
}

/**
* Returns a hash of functions for copying typed arrays.
*
* @private
* @returns {Object} function hash
*/
function typedarrays() {
	var out = {
		'int8array': int8array,
		'uint8array': uint8array,
		'uint8clampedarray': uint8clampedarray,
		'int16array': int16array,
		'uint16array': uint16array,
		'int32array': int32array,
		'uint32array': uint32array,
		'float32array': float32array,
		'float64array': float64array
	};
	return out;
}


// MAIN //

hash = typedarrays();


// EXPORTS //

var _$hash_1354 = hash;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isArray_106 = require( '@stdlib/assert/is-array' ); */;
/* removed: var _$isBuffer_114 = require( '@stdlib/assert/is-buffer' ); */;
/* removed: var _$isError_126 = require( '@stdlib/assert/is-error' ); */;
/* removed: var _$main_1424 = require( '@stdlib/utils/type-of' ); */;
/* removed: var _$reFromString_1419 = require( '@stdlib/utils/regexp-from-string' ); */;
/* removed: var _$indexOf_1382 = require( '@stdlib/utils/index-of' ); */;
/* removed: var _$keys_1393 = require( '@stdlib/utils/keys' ); */;
/* removed: var _$main_1416 = require( '@stdlib/utils/property-names' ); */;
/* removed: var _$main_1412 = require( '@stdlib/utils/property-descriptor' ); */;
/* removed: var _$getPrototype_1372 = require( '@stdlib/utils/get-prototype-of' ); */;
/* removed: var _$defineProperty_1364 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$copyBuffer_213 = require( '@stdlib/buffer/from-buffer' ); */;
/* removed: var _$hash_1354 = require( './typed_arrays.js' ); */;


// FUNCTIONS //

/**
* Clones a class instance.
*
* ## Notes
*
* -   This should **only** be used for simple cases. Any instances with privileged access to variables (e.g., within closures) cannot be cloned. This approach should be considered **fragile**.
* -   The function is greedy, disregarding the notion of a `level`. Instead, the function deep copies all properties, as we assume the concept of `level` applies only to the class instance reference but not to its internal state. This prevents, in theory, two instances from sharing state.
*
*
* @private
* @param {Object} val - class instance
* @returns {Object} new instance
*/
function cloneInstance( val ) {
	var cache;
	var names;
	var name;
	var refs;
	var desc;
	var tmp;
	var ref;
	var i;

	cache = [];
	refs = [];

	ref = Object.create( _$getPrototype_1372( val ) );
	cache.push( val );
	refs.push( ref );

	names = _$main_1416( val );
	for ( i = 0; i < names.length; i++ ) {
		name = names[ i ];
		desc = _$main_1412( val, name );
		if ( _$hasOwnProp_78( desc, 'value' ) ) {
			tmp = ( _$isArray_106( val[name] ) ) ? [] : {};
			desc.value = deepCopy( val[name], tmp, cache, refs, -1 );
		}
		_$defineProperty_1364( ref, name, desc );
	}
	if ( !Object.isExtensible( val ) ) {
		Object.preventExtensions( ref );
	}
	if ( Object.isSealed( val ) ) {
		Object.seal( ref );
	}
	if ( Object.isFrozen( val ) ) {
		Object.freeze( ref );
	}
	return ref;
}

/**
* Copies an error object.
*
* @private
* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error - error to copy
* @returns {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error copy
*
* @example
* var err1 = new TypeError( 'beep' );
*
* var err2 = copyError( err1 );
* // returns <TypeError>
*/
function copyError( error ) {
	var cache = [];
	var refs = [];
	var keys;
	var desc;
	var tmp;
	var key;
	var err;
	var i;

	// Create a new error...
	err = new error.constructor( error.message );

	cache.push( error );
	refs.push( err );

	// If a `stack` property is present, copy it over...
	if ( error.stack ) {
		err.stack = error.stack;
	}
	// Node.js specific (system errors)...
	if ( error.code ) {
		err.code = error.code;
	}
	if ( error.errno ) {
		err.errno = error.errno;
	}
	if ( error.syscall ) {
		err.syscall = error.syscall;
	}
	// Any enumerable properties...
	keys = _$keys_1393( error );
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		desc = _$main_1412( error, key );
		if ( _$hasOwnProp_78( desc, 'value' ) ) {
			tmp = ( _$isArray_106( error[ key ] ) ) ? [] : {};
			desc.value = deepCopy( error[ key ], tmp, cache, refs, -1 );
		}
		_$defineProperty_1364( err, key, desc );
	}
	return err;
}


// MAIN //

/**
* Recursively performs a deep copy of an input object.
*
* @private
* @param {*} val - value to copy
* @param {(Array|Object)} copy - copy
* @param {Array} cache - an array of visited objects
* @param {Array} refs - an array of object references
* @param {NonNegativeInteger} level - copy depth
* @returns {*} deep copy
*/
function deepCopy( val, copy, cache, refs, level ) {
	var parent;
	var keys;
	var name;
	var desc;
	var ctor;
	var key;
	var ref;
	var x;
	var i;
	var j;

	level -= 1;

	// Primitives and functions...
	if (
		typeof val !== 'object' ||
		val === null
	) {
		return val;
	}
	if ( _$isBuffer_114( val ) ) {
		return _$copyBuffer_213( val );
	}
	if ( _$isError_126( val ) ) {
		return copyError( val );
	}
	// Objects...
	name = _$main_1424( val );

	if ( name === 'date' ) {
		return new Date( +val );
	}
	if ( name === 'regexp' ) {
		return _$reFromString_1419( val.toString() );
	}
	if ( name === 'set' ) {
		return new Set( val );
	}
	if ( name === 'map' ) {
		return new Map( val );
	}
	if (
		name === 'string' ||
		name === 'boolean' ||
		name === 'number'
	) {
		// If provided an `Object`, return an equivalent primitive!
		return val.valueOf();
	}
	ctor = _$hash_1354[ name ];
	if ( ctor ) {
		return ctor( val );
	}
	// Class instances...
	if (
		name !== 'array' &&
		name !== 'object'
	) {
		// Cloning requires ES5 or higher...
		if ( typeof Object.freeze === 'function' ) {
			return cloneInstance( val );
		}
		return {};
	}
	// Arrays and plain objects...
	keys = _$keys_1393( val );
	if ( level > 0 ) {
		parent = name;
		for ( j = 0; j < keys.length; j++ ) {
			key = keys[ j ];
			x = val[ key ];

			// Primitive, Buffer, special class instance...
			name = _$main_1424( x );
			if (
				typeof x !== 'object' ||
				x === null ||
				(
					name !== 'array' &&
					name !== 'object'
				) ||
				_$isBuffer_114( x )
			) {
				if ( parent === 'object' ) {
					desc = _$main_1412( val, key );
					if ( _$hasOwnProp_78( desc, 'value' ) ) {
						desc.value = deepCopy( x );
					}
					_$defineProperty_1364( copy, key, desc );
				} else {
					copy[ key ] = deepCopy( x );
				}
				continue;
			}
			// Circular reference...
			i = _$indexOf_1382( cache, x );
			if ( i !== -1 ) {
				copy[ key ] = refs[ i ];
				continue;
			}
			// Plain array or object...
			ref = ( _$isArray_106( x ) ) ? new Array( x.length ) : {};
			cache.push( x );
			refs.push( ref );
			if ( parent === 'array' ) {
				copy[ key ] = deepCopy( x, ref, cache, refs, level );
			} else {
				desc = _$main_1412( val, key );
				if ( _$hasOwnProp_78( desc, 'value' ) ) {
					desc.value = deepCopy( x, ref, cache, refs, level );
				}
				_$defineProperty_1364( copy, key, desc );
			}
		}
	} else if ( name === 'array' ) {
		for ( j = 0; j < keys.length; j++ ) {
			key = keys[ j ];
			copy[ key ] = val[ key ];
		}
	} else {
		for ( j = 0; j < keys.length; j++ ) {
			key = keys[ j ];
			desc = _$main_1412( val, key );
			_$defineProperty_1364( copy, key, desc );
		}
	}
	if ( !Object.isExtensible( val ) ) {
		Object.preventExtensions( copy );
	}
	if ( Object.isSealed( val ) ) {
		Object.seal( copy );
	}
	if ( Object.isFrozen( val ) ) {
		Object.freeze( copy );
	}
	return copy;
}


// EXPORTS //

var _$deepCopy_1352 = deepCopy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArray_106 = require( '@stdlib/assert/is-array' ); */;
var __isNonNegativeInteger_1351 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$deepCopy_1352 = require( './deep_copy.js' ); */;


// MAIN //

/**
* Copies or deep clones a value to an arbitrary depth.
*
* @param {*} value - value to copy
* @param {NonNegativeInteger} [level=+infinity] - copy depth
* @throws {TypeError} `level` must be a nonnegative integer
* @returns {*} value copy
*
* @example
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/
function copy( value, level ) {
	var out;
	if ( arguments.length > 1 ) {
		if ( !__isNonNegativeInteger_1351( level ) ) {
			throw new TypeError( 'invalid argument. `level` must be a nonnegative integer. Value: `' + level + '`.' );
		}
		if ( level === 0 ) {
			return value;
		}
	} else {
		level = _$FLOAT64_PINF_238;
	}
	out = ( _$isArray_106( value ) ) ? new Array( value.length ) : {};
	return _$deepCopy_1352( value, out, [value], [out], level );
}


// EXPORTS //

var _$copy_1351 = copy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Copy or deep clone a value to an arbitrary depth.
*
* @module @stdlib/utils/copy
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ {'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/

// MODULES //

/* removed: var _$copy_1351 = require( './copy.js' ); */;


// EXPORTS //

var _$copy_1353 = _$copy_1351;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
* // returns 1.7976931348623157e+308
*/


// MAIN //

/**
* Maximum double-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX = 1.7976931348623157e+308;


// EXPORTS //

var _$FLOAT64_MAX_232 = FLOAT64_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111
var LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation


// MAIN //

/**
* Performs C-like multiplication of two unsigned 32-bit integers.
*
* ## Method
*
* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words
*
*     ```tex
*     a = w_h*2^{16} + w_l
*     ```
*
*     where \\( w_h \\) is the most significant 16 bits and \\( w_l \\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\( 2^{32}-1 \\)
*
*     ```binarystring
*     11111111111111111111111111111111
*     ```
*
*     The 16-bit high word is then
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     and the 16-bit low word
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     If we cast the high word to 32-bit precision and multiply by \\( 2^{16} \\) (equivalent to a 16-bit left shift), then the bit sequence is
*
*     ```binarystring
*     11111111111111110000000000000000
*     ```
*
*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is
*
*     ```binarystring
*     00000000000000001111111111111111
*     ```
*
*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\( 2^{32}-1 \\).
*
* -   Accordingly, the multiplication of two 32-bit integers can be expressed
*
*     ```tex
*     \begin{align*}
*     a \cdot b &= ( a_h \cdot 2^{16} + a_l) \cdot ( b_h \cdot 2^{16} + b_l) \\
*           &= a_l \cdot b_l + a_h \cdot b_l \cdot 2^{16} + a_l \cdot b_h \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32} \\
*           &= a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32}
*     \end{align*}
*     ```
*
* -   We note that multiplying (dividing) an integer by \\( 2^n \\) is equivalent to performing a left (right) shift of \\( n \\) bits.
*
* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\( 2^{32} \\). Stated another way, we only care about the low word of a 64-bit result.
*
* -   Accordingly, the last term, being evenly divisible by \\( 2^{32} \\), drops from the equation leaving the remaining two terms as the remainder.
*
*     ```tex
*     a \cdot b = a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) << 16
*     ```
*
* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to "overflow". However, we can disregard (`>>>0`) overflow bits due modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.
*
*
* @param {uinteger32} a - integer
* @param {uinteger32} b - integer
* @returns {uinteger32} product
*
* @example
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/
function uimul( a, b ) {
	var lbits;
	var mbits;
	var ha;
	var hb;
	var la;
	var lb;

	a >>>= 0; // asm type annotation
	b >>>= 0; // asm type annotation

	// Isolate the most significant 16-bits:
	ha = ( a>>>16 )>>>0; // asm type annotation
	hb = ( b>>>16 )>>>0; // asm type annotation

	// Isolate the least significant 16-bits:
	la = ( a&LOW_WORD_MASK )>>>0; // asm type annotation
	lb = ( b&LOW_WORD_MASK )>>>0; // asm type annotation

	// Compute partial sums:
	lbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible
	mbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow

	// The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):
	return ( lbits + mbits )>>>0; // asm type annotation
}


// EXPORTS //

var _$uimul_632 = uimul;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Perform C-like multiplication of two unsigned 32-bit integers.
*
* @module @stdlib/math/base/special/uimul
*
* @example
* var uimul = require( '@stdlib/math/base/special/uimul' );
*
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/

// MODULES //

/* removed: var _$uimul_632 = require( './main.js' ); */;


// EXPORTS //

var _$uimul_631 = _$uimul_632;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var M = 8;


// MAIN //

/**
* Copies values from `x` into `y`.
*
* @param {PositiveInteger} N - number of values to copy
* @param {NumericArray} x - input array
* @param {integer} strideX - `x` stride length
* @param {NumericArray} y - destination array
* @param {integer} strideY - `y` stride length
* @returns {NumericArray} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, y, 1 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/
function gcopy( N, x, strideX, y, strideY ) {
	var ix;
	var iy;
	var m;
	var i;
	if ( N <= 0 ) {
		return y;
	}
	// Use unrolled loops if both strides are equal to `1`...
	if ( strideX === 1 && strideY === 1 ) {
		m = N % M;

		// If we have a remainder, run a clean-up loop...
		if ( m > 0 ) {
			for ( i = 0; i < m; i++ ) {
				y[ i ] = x[ i ];
			}
		}
		if ( N < M ) {
			return y;
		}
		for ( i = m; i < N; i += M ) {
			y[ i ] = x[ i ];
			y[ i+1 ] = x[ i+1 ];
			y[ i+2 ] = x[ i+2 ];
			y[ i+3 ] = x[ i+3 ];
			y[ i+4 ] = x[ i+4 ];
			y[ i+5 ] = x[ i+5 ];
			y[ i+6 ] = x[ i+6 ];
			y[ i+7 ] = x[ i+7 ];
		}
		return y;
	}
	if ( strideX < 0 ) {
		ix = (1-N) * strideX;
	} else {
		ix = 0;
	}
	if ( strideY < 0 ) {
		iy = (1-N) * strideY;
	} else {
		iy = 0;
	}
	for ( i = 0; i < N; i++ ) {
		y[ iy ] = x[ ix ];
		ix += strideX;
		iy += strideY;
	}
	return y;
}


// EXPORTS //

var _$gcopy_207 = gcopy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var __M_208 = 8;


// MAIN //

/**
* Copies values from `x` into `y`.
*
* @param {PositiveInteger} N - number of values to copy
* @param {NumericArray} x - input array
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting `x` index
* @param {NumericArray} y - destination array
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - starting `y` index
* @returns {NumericArray} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/
function __gcopy_208( N, x, strideX, offsetX, y, strideY, offsetY ) {
	var ix;
	var iy;
	var m;
	var i;
	if ( N <= 0 ) {
		return y;
	}
	ix = offsetX;
	iy = offsetY;

	// Use unrolled loops if both strides are equal to `1`...
	if ( strideX === 1 && strideY === 1 ) {
		m = N % __M_208;

		// If we have a remainder, run a clean-up loop...
		if ( m > 0 ) {
			for ( i = 0; i < m; i++ ) {
				y[ iy ] = x[ ix ];
				ix += strideX;
				iy += strideY;
			}
		}
		if ( N < __M_208 ) {
			return y;
		}
		for ( i = m; i < N; i += __M_208 ) {
			y[ iy ] = x[ ix ];
			y[ iy+1 ] = x[ ix+1 ];
			y[ iy+2 ] = x[ ix+2 ];
			y[ iy+3 ] = x[ ix+3 ];
			y[ iy+4 ] = x[ ix+4 ];
			y[ iy+5 ] = x[ ix+5 ];
			y[ iy+6 ] = x[ ix+6 ];
			y[ iy+7 ] = x[ ix+7 ];
			ix += __M_208;
			iy += __M_208;
		}
		return y;
	}
	for ( i = 0; i < N; i++ ) {
		y[ iy ] = x[ ix ];
		ix += strideX;
		iy += strideY;
	}
	return y;
}


// EXPORTS //

var _$gcopy_208 = __gcopy_208;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* BLAS level 1 routine to copy values from `x` into `y`.
*
* @module @stdlib/blas/base/gcopy
*
* @example
* var gcopy = require( '@stdlib/blas/base/gcopy' );
*
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, y, 1 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*
* @example
* var gcopy = require( '@stdlib/blas/base/gcopy' );
*
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$gcopy_207 = require( './main.js' ); */;
/* removed: var _$gcopy_208 = require( './ndarray.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$gcopy_207, 'ndarray', _$gcopy_208 );


// EXPORTS //

var _$gcopy_206 = _$gcopy_207;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Dummy function.
*
* @private
*/
function foo() {
	// No-op...
}


// EXPORTS //

var _$foo_61 = foo;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$foo_61 = require( './foo.js' ); */;


// MAIN //

/**
* Tests for native function `name` support.
*
* @returns {boolean} boolean indicating if an environment has function `name` support
*
* @example
* var bool = hasFunctionNameSupport();
* // returns <boolean>
*/
function hasFunctionNameSupport() {
	return ( _$foo_61.name === 'foo' );
}


// EXPORTS //

var _$hasFunctionNameSupport_63 = hasFunctionNameSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native function `name` support.
*
* @module @stdlib/assert/has-function-name-support
*
* @example
* var hasFunctionNameSupport = require( '@stdlib/assert/has-function-name-support' );
*
* var bool = hasFunctionNameSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasFunctionNameSupport_63 = require( './main.js' ); */;


// EXPORTS //

var _$hasFunctionNameSupport_62 = _$hasFunctionNameSupport_63;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasFunctionNameSupport_62 = require( '@stdlib/assert/has-function-name-support' ); */;
/* removed: var _$RE_FUNCTION_NAME_1133 = require( '@stdlib/regexp/function-name' ); */;


// VARIABLES //

var isFunctionNameSupported = _$hasFunctionNameSupport_62();


// MAIN //

/**
* Returns the name of a function.
*
* @param {Function} fcn - input function
* @throws {TypeError} must provide a function
* @returns {string} function name
*
* @example
* var v = functionName( Math.sqrt );
* // returns 'sqrt'
*
* @example
* var v = functionName( function foo(){} );
* // returns 'foo'
*
* @example
* var v = functionName( function(){} );
* // returns '' || 'anonymous'
*
* @example
* var v = functionName( String );
* // returns 'String'
*/
function functionName( fcn ) {
	// TODO: add support for generator functions?
	if ( _$isFunction_132( fcn ) === false ) {
		throw new TypeError( 'invalid argument. Must provide a function. Value: `' + fcn + '`.' );
	}
	if ( isFunctionNameSupported ) {
		return fcn.name;
	}
	return _$RE_FUNCTION_NAME_1133.exec( fcn.toString() )[ 1 ];
}


// EXPORTS //

var _$functionName_1368 = functionName;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the name of a function.
*
* @module @stdlib/utils/function-name
*
* @example
* var functionName = require( '@stdlib/utils/function-name' );
*
* var v = functionName( String );
* // returns 'String'
*
* v = functionName( function foo(){} );
* // returns 'foo'
*
* v = functionName( function(){} );
* // returns '' || 'anonymous'
*/

// MODULES //

/* removed: var _$functionName_1368 = require( './function_name.js' ); */;


// EXPORTS //

var _$functionName_1369 = _$functionName_1368;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_15 = require( '@stdlib/array/int8' ); */;
/* removed: var _$ctor_44 = require( '@stdlib/array/uint8' ); */;
/* removed: var _$ctor_47 = require( '@stdlib/array/uint8c' ); */;
/* removed: var _$ctor_9 = require( '@stdlib/array/int16' ); */;
/* removed: var _$ctor_38 = require( '@stdlib/array/uint16' ); */;
/* removed: var _$ctor_12 = require( '@stdlib/array/int32' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;


// MAIN //

var CTORS = [
	_$ctor_5,
	_$ctor_2,
	_$ctor_12,
	_$ctor_41,
	_$ctor_9,
	_$ctor_38,
	_$ctor_15,
	_$ctor_44,
	_$ctor_47
];


// EXPORTS //

var _$CTORS_192 = CTORS;

var _$names_195=[
	"Int8Array",
	"Uint8Array",
	"Uint8ClampedArray",
	"Int16Array",
	"Uint16Array",
	"Int32Array",
	"Uint32Array",
	"Float32Array",
	"Float64Array"
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constructorName_1349 = require( '@stdlib/utils/constructor-name' ); */;
/* removed: var _$functionName_1369 = require( '@stdlib/utils/function-name' ); */;
/* removed: var _$getPrototype_1372 = require( '@stdlib/utils/get-prototype-of' ); */;
/* removed: var _$hasFloat64ArraySupport_59 = require( '@stdlib/assert/has-float64array-support' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;
/* removed: var _$CTORS_192 = require( './ctors.js' ); */;
/* removed: var _$names_195 = require( './names.json' ); */;


// VARIABLES //

// Abstract `TypedArray` class:
var TypedArray = ( _$hasFloat64ArraySupport_59() ) ? _$getPrototype_1372( _$ctor_5 ) : Dummy; // eslint-disable-line max-len

// Ensure abstract typed array class has expected name:
TypedArray = ( _$functionName_1369( TypedArray ) === 'TypedArray' ) ? TypedArray : Dummy;


// FUNCTIONS //

/**
* Dummy constructor.
*
* @private
*/
function Dummy() {} // eslint-disable-line no-empty-function


// MAIN //

/**
* Tests if a value is a typed array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a typed array
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
*
* var bool = isTypedArray( new Int8Array( 10 ) );
* // returns true
*/
function isTypedArray( value ) {
	var v;
	var i;

	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for the abstract class...
	if ( value instanceof TypedArray ) {
		return true;
	}
	// Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...
	for ( i = 0; i < _$CTORS_192.length; i++ ) {
		if ( value instanceof _$CTORS_192[ i ] ) {
			return true;
		}
	}
	// Walk the prototype tree until we find an object having a desired class...
	while ( value ) {
		v = _$constructorName_1349( value );
		for ( i = 0; i < _$names_195.length; i++ ) {
			if ( _$names_195[ i ] === v ) {
				return true;
			}
		}
		value = _$getPrototype_1372( value );
	}

	return false;
}


// EXPORTS //

var _$isTypedArray_194 = isTypedArray;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a typed array.
*
* @module @stdlib/assert/is-typed-array
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
* var isTypedArray = require( '@stdlib/assert/is-typed-array' );
*
* var bool = isTypedArray( new Int8Array( 10 ) );
* // returns true
*/

// MODULES //

/* removed: var _$isTypedArray_194 = require( './main.js' ); */;


// EXPORTS //

var _$isTypedArray_193 = _$isTypedArray_194;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests whether a value has in its prototype chain a specified constructor as a prototype property.
*
* @param {*} value - value to test
* @param {Function} constructor - constructor to test against
* @throws {TypeError} constructor must be callable
* @returns {boolean} boolean indicating whether a value is an instance of a provided constructor
*
* @example
* var bool = instanceOf( [], Array );
* // returns true
*
* @example
* var bool = instanceOf( {}, Object ); // exception
* // returns true
*
* @example
* var bool = instanceOf( 'beep', String );
* // returns false
*
* @example
* var bool = instanceOf( null, Object );
* // returns false
*
* @example
* var bool = instanceOf( 5, Object );
* // returns false
*/
function instanceOf( value, constructor ) {
	// TODO: replace with `isCallable` check
	if ( typeof constructor !== 'function' ) {
		throw new TypeError( 'invalid argument. `constructor` argument must be callable. Value: `'+constructor+'`.' );
	}
	return ( value instanceof constructor );
}


// EXPORTS //

var _$instanceOf_99 = instanceOf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether a value has in its prototype chain a specified constructor as a prototype property.
*
* @module @stdlib/assert/instance-of
*
* @example
* var instanceOf = require( '@stdlib/assert/instance-of' );
*
* var bool = instanceOf( [], Array );
* // returns true
*
* bool = instanceOf( {}, Object ); // exception
* // returns true
*
* bool = instanceOf( 'beep', String );
* // returns false
*
* bool = instanceOf( null, Object );
* // returns false
*
* bool = instanceOf( 5, Object );
* // returns false
*/

// MODULES //

/* removed: var _$instanceOf_99 = require( './main.js' ); */;


// EXPORTS //

var _$instanceOf_98 = _$instanceOf_99;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_15 = require( '@stdlib/array/int8' ); */;
/* removed: var _$ctor_44 = require( '@stdlib/array/uint8' ); */;
/* removed: var _$ctor_47 = require( '@stdlib/array/uint8c' ); */;
/* removed: var _$ctor_9 = require( '@stdlib/array/int16' ); */;
/* removed: var _$ctor_38 = require( '@stdlib/array/uint16' ); */;
/* removed: var _$ctor_12 = require( '@stdlib/array/int32' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float32' ); */;
/* removed: var _$ctor_5 = require( '@stdlib/array/float64' ); */;


// MAIN //

var __CTORS_24 = [
	[ _$ctor_5, 'Float64Array' ],
	[ _$ctor_2, 'Float32Array' ],
	[ _$ctor_12, 'Int32Array' ],
	[ _$ctor_41, 'Uint32Array' ],
	[ _$ctor_9, 'Int16Array' ],
	[ _$ctor_38, 'Uint16Array' ],
	[ _$ctor_15, 'Int8Array' ],
	[ _$ctor_44, 'Uint8Array' ],
	[ _$ctor_47, 'Uint8ClampedArray' ]
];


// EXPORTS //

var _$CTORS_24 = __CTORS_24;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$instanceOf_98 = require( '@stdlib/assert/instance-of' ); */;
/* removed: var _$constructorName_1349 = require( '@stdlib/utils/constructor-name' ); */;
/* removed: var _$getPrototype_1372 = require( '@stdlib/utils/get-prototype-of' ); */;
/* removed: var _$CTORS_24 = require( './ctors.js' ); */;


// MAIN //

/**
* Returns the typed array type.
*
* @private
* @param {TypedArray} arr - typed array
* @returns {(string|void)} typed array type
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var arr = new Float64Array( 5 );
* var str = typeName( arr );
* // returns 'Float64Array'
*/
function typeName( arr ) {
	var v;
	var i;

	// Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...
	for ( i = 0; i < _$CTORS_24.length; i++ ) {
		if ( _$instanceOf_98( arr, _$CTORS_24[ i ][ 0 ] ) ) {
			return _$CTORS_24[ i ][ 1 ];
		}
	}
	// Walk the prototype tree until we find an object having a desired native class...
	while ( arr ) {
		v = _$constructorName_1349( arr );
		for ( i = 0; i < _$CTORS_24.length; i++ ) {
			if ( v === _$CTORS_24[ i ][ 1 ] ) {
				return _$CTORS_24[ i ][ 1 ];
			}
		}
		arr = _$getPrototype_1372( arr );
	}
}


// EXPORTS //

var _$typeName_27 = typeName;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isTypedArray_193 = require( '@stdlib/assert/is-typed-array' ); */;
/* removed: var _$typeName_27 = require( './type.js' ); */;


// MAIN //

/**
* Returns a JSON representation of a typed array.
*
* ## Notes
*
* -   We build a JSON object representing a typed array similar to how Node.js `Buffer` objects are represented. See [Buffer][1].
*
* [1]: https://nodejs.org/api/buffer.html#buffer_buf_tojson
*
* @param {TypedArray} arr - typed array to serialize
* @throws {TypeError} first argument must be a typed array
* @returns {Object} JSON representation
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var arr = new Float64Array( [ 5.0, 3.0 ] );
* var json = toJSON( arr );
* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
*/
function toJSON( arr ) {
	var out;
	var i;
	if ( !_$isTypedArray_193( arr ) ) {
		throw new TypeError( 'invalid argument. Must provide a typed array. Value: `' + arr + '`.' );
	}
	out = {};
	out.type = _$typeName_27( arr );
	out.data = [];
	for ( i = 0; i < arr.length; i++ ) {
		out.data.push( arr[ i ] );
	}
	return out;
}


// EXPORTS //

var _$toJSON_26 = toJSON;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a JSON representation of a typed array.
*
* @module @stdlib/array/to-json
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var toJSON = require( '@stdlib/array/to-json' );
*
* var arr = new Float64Array( [ 5.0, 3.0 ] );
* var json = toJSON( arr );
* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
*/

// MODULES //

/* removed: var _$toJSON_26 = require( './to_json.js' ); */;


// EXPORTS //

var _$toJSON_25 = _$toJSON_26;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$UINT32_MAX_253 = require( '@stdlib/constants/math/uint32-max' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// VARIABLES //

var MAX = _$UINT32_MAX_253 - 1;


// MAIN //

/**
* Returns a pseudorandom integer on the interval \\([1, 2^{32}-1)\\).
*
* @private
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = randuint32();
* // returns <number>
*/
function randuint32() {
	var v = _$floor_523( 1.0 + (MAX*Math.random()) ); // eslint-disable-line stdlib/no-builtin-math
	return v >>> 0; // asm type annotation
}


// EXPORTS //

var _$randuint32_993 = randuint32;

/* eslint-disable max-lines, max-len */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code and copyright notice are from the [source implementation]{@link http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
*   1. Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*
*   2. Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*
*   3. The names of its contributors may not be used to endorse or promote
*      products derived from this software without specific prior written
*      permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isCollection_116 = require( '@stdlib/assert/is-collection' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
var __isBoolean_990 = _$isBoolean_108.isPrimitive;
var __isPositiveInteger_990 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$UINT32_MAX_253 = require( '@stdlib/constants/math/uint32-max' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$max_573 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$uimul_631 = require( '@stdlib/math/base/special/uimul' ); */;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$randuint32_993 = require( './rand_uint32.js' ); */;


// VARIABLES //

// Define the size of the state array (see refs):
var N = 624;

// Define a (magic) constant used for indexing into the state array:
var __M_990 = 397;

// Define the maximum seed: 11111111111111111111111111111111
var MAX_SEED = _$UINT32_MAX_253 >>> 0; // asm type annotation

// For seed arrays, define an initial state (magic) constant: 19650218 => 00000001001010111101011010101010
var SEED_ARRAY_INIT_STATE = 19650218 >>> 0; // asm type annotation

// Define a mask for the most significant `w-r` bits, where `w` is the word size (32 bits) and `r` is the separation point of one word (see refs): 2147483648 => 0x80000000 => 10000000000000000000000000000000
var UPPER_MASK = 0x80000000 >>> 0; // asm type annotation

// Define a mask for the least significant `r` bits (see refs): 2147483647 => 0x7fffffff => 01111111111111111111111111111111
var LOWER_MASK = 0x7fffffff >>> 0; // asm type annotation

// Define a multiplier (see Knuth TAOCP Vol2. 3rd Ed. P.106): 1812433253 => 01101100000001111000100101100101
var KNUTH_MULTIPLIER = 1812433253 >>> 0; // asm type annotation

// Define a (magic) multiplier: 1664525 => 00000000000110010110011000001101
var MAGIC_MULTIPLIER_1 = 1664525 >>> 0; // asm type annotation

// Define a (magic) multiplier: 1566083941 => 01011101010110001000101101100101
var MAGIC_MULTIPLIER_2 = 1566083941 >>> 0; // asm type annotation

// Define a tempering coefficient: 2636928640 => 0x9d2c5680 => 10011101001011000101011010000000
var TEMPERING_COEFFICIENT_1 = 0x9d2c5680 >>> 0; // asm type annotation

// Define a tempering coefficient: 4022730752 => 0xefc60000 => 11101111110001100000000000000000
var TEMPERING_COEFFICIENT_2 = 0xefc60000 >>> 0; // asm type annotation

// Define a constant vector `a` (see refs): 2567483615 => 0x9908b0df => 10011001000010001011000011011111
var MATRIX_A = 0x9908b0df >>> 0; // asm type annotation

// MAG01[x] = x * MATRIX_A; for x = {0,1}
var MAG01 = [ 0x0 >>> 0, MATRIX_A >>> 0 ]; // asm type annotation

// Define a normalization constant when generating double-precision floating-point numbers: 2^53 => 9007199254740992
var FLOAT64_NORMALIZATION_CONSTANT = 1.0 / ( _$FLOAT64_MAX_SAFE_INTEGER_231+1.0 ); // eslint-disable-line id-length

// 2^26: 67108864
var TWO_26 = 67108864 >>> 0; // asm type annotation

// 2^32: 2147483648 => 0x80000000 => 10000000000000000000000000000000
var TWO_32 = 0x80000000 >>> 0; // asm type annotation

// 1 (as a 32-bit unsigned integer): 1 => 0x1 => 00000000000000000000000000000001
var __ONE_990 = 0x1 >>> 0; // asm type annotation

// Define the maximum normalized pseudorandom double-precision floating-point number: ( (((2^32-1)>>>5)*2^26)+( (2^32-1)>>>6) ) / 2^53
var MAX_NORMALIZED = _$FLOAT64_MAX_SAFE_INTEGER_231 * FLOAT64_NORMALIZATION_CONSTANT;

// Define the state array schema version:
var STATE_ARRAY_VERSION = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!

// Define the number of sections in the state array:
var NUM_STATE_SECTIONS = 3; // state, other, seed

// Define the index offset of the "state" section in the state array:
var STATE_SECTION_OFFSET = 2; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |

// Define the index offset of the "other" section in the state array:
var OTHER_SECTION_OFFSET = N + 3; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |

// Define the index offset of the seed section in the state array:
var SEED_SECTION_OFFSET = N + 5; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |

// Define the length of the "fixed" length portion of the state array:
var STATE_FIXED_LENGTH = N + 6; // 1 (version) + 1 (num_sections) + 1 (state_length) + N (state) + 1 (other_length) + 1 (state_index) + 1 (seed_length)


// FUNCTIONS //

/**
* Verifies state array integrity.
*
* @private
* @param {Uint32Array} state - state array
* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
* @returns {(Error|null)} an error or `null`
*/
function verifyState( state, FLG ) {
	var s1;
	if ( FLG ) {
		s1 = 'option';
	} else {
		s1 = 'argument';
	}
	// The state array must have a minimum length...
	if ( state.length < STATE_FIXED_LENGTH+1 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has insufficient length.' );
	}
	// The first element of the state array must equal the supported state array schema version...
	if ( state[ 0 ] !== STATE_ARRAY_VERSION ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible schema version. Expected: '+STATE_ARRAY_VERSION+'. Actual: '+state[ 0 ]+'.' );
	}
	// The second element of the state array must contain the number of sections...
	if ( state[ 1 ] !== NUM_STATE_SECTIONS ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible number of sections. Expected: '+NUM_STATE_SECTIONS+'. Actual: '+state[ 1 ]+'.' );
	}
	// The length of the "state" section must equal `N`...
	if ( state[ STATE_SECTION_OFFSET ] !== N ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible state length. Expected: '+N+'. Actual: '+state[ STATE_SECTION_OFFSET ]+'.' );
	}
	// The length of the "other" section must equal `1`...
	if ( state[ OTHER_SECTION_OFFSET ] !== 1 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible section length. Expected: '+(1).toString()+'. Actual: '+state[ OTHER_SECTION_OFFSET ]+'.' );
	}
	// The length of the "seed" section much match the empirical length...
	if ( state[ SEED_SECTION_OFFSET ] !== state.length-STATE_FIXED_LENGTH ) {
		return new RangeError( 'invalid '+s1+'. `state` array length is incompatible with seed section length. Expected: '+(state.length-STATE_FIXED_LENGTH)+'. Actual: '+state[ SEED_SECTION_OFFSET ]+'.' );
	}
	return null;
}

/**
* Returns an initial PRNG state.
*
* @private
* @param {Uint32Array} state - state array
* @param {PositiveInteger} N - state size
* @param {uinteger32} s - seed
* @returns {Uint32Array} state array
*/
function createState( state, N, s ) {
	var i;

	// Set the first element of the state array to the provided seed:
	state[ 0 ] = s >>> 0; // equivalent to `s & 0xffffffffUL` in original C implementation

	// Initialize the remaining state array elements:
	for ( i = 1; i < N; i++ ) {
		/*
		* In the original C implementation (see `init_genrand()`),
		*
		* ```c
		* mt[i] = (KNUTH_MULTIPLIER * (mt[i-1] ^ (mt[i-1] >> 30)) + i)
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/
		s = state[ i-1 ]>>>0; // asm type annotation
		s = ( s^(s>>>30) )>>>0; // asm type annotation
		state[ i ] = ( _$uimul_631( s, KNUTH_MULTIPLIER ) + i )>>>0; // asm type annotation
	}
	return state;
}

/**
* Initializes a PRNG state array according to a seed array.
*
* @private
* @param {Uint32Array} state - state array
* @param {NonNegativeInteger} N - state array length
* @param {ArrayLikeObject} seed - seed array
* @param {NonNegativeInteger} M - seed array length
* @returns {Uint32Array} state array
*/
function initState( state, N, seed, M ) {
	var s;
	var i;
	var j;
	var k;

	i = 1;
	j = 0;
	for ( k = _$max_573( N, M ); k > 0; k-- ) {
		/*
		* In the original C implementation (see `init_by_array()`),
		*
		* ```c
		* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1664525UL)) + seed[j] + j;
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/
		s = state[ i-1 ]>>>0; // asm type annotation
		s = ( s^(s>>>30) )>>>0; // asm type annotation
		s = ( _$uimul_631( s, MAGIC_MULTIPLIER_1 ) )>>>0; // asm type annotation
		state[ i ] = ( ((state[i]>>>0)^s) + seed[j] + j )>>>0; /* non-linear */ // asm type annotation

		i += 1;
		j += 1;
		if ( i >= N ) {
			state[ 0 ] = state[ N-1 ];
			i = 1;
		}
		if ( j >= M ) {
			j = 0;
		}
	}
	for ( k = N-1; k > 0; k-- ) {
		/*
		* In the original C implementation (see `init_by_array()`),
		*
		* ```c
		* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1566083941UL)) - i;
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/
		s = state[ i-1 ]>>>0; // asm type annotation
		s = ( s^(s>>>30) )>>>0; // asm type annotation
		s = ( _$uimul_631( s, MAGIC_MULTIPLIER_2 ) )>>>0; // asm type annotation
		state[ i ] = ( ((state[i]>>>0)^s) - i )>>>0; /* non-linear */ // asm type annotation

		i += 1;
		if ( i >= N ) {
			state[ 0 ] = state[ N-1 ];
			i = 1;
		}
	}
	// Ensure a non-zero initial state array:
	state[ 0 ] = TWO_32; // MSB (most significant bit) is 1

	return state;
}

/**
* Updates a PRNG's internal state by generating the next `N` words.
*
* @private
* @param {Uint32Array} state - state array
* @returns {Uint32Array} state array
*/
function twist( state ) {
	var w;
	var i;
	var j;
	var k;

	k = N - __M_990;
	for ( i = 0; i < k; i++ ) {
		w = ( state[i]&UPPER_MASK ) | ( state[i+1]&LOWER_MASK );
		state[ i ] = state[ i+__M_990 ] ^ ( w>>>1 ) ^ MAG01[ w&__ONE_990 ];
	}
	j = N - 1;
	for ( ; i < j; i++ ) {
		w = ( state[i]&UPPER_MASK ) | ( state[i+1]&LOWER_MASK );
		state[ i ] = state[ i-k ] ^ ( w>>>1 ) ^ MAG01[ w&__ONE_990 ];
	}
	w = ( state[j]&UPPER_MASK ) | ( state[0]&LOWER_MASK );
	state[ j ] = state[ __M_990-1 ] ^ ( w>>>1 ) ^ MAG01[ w&__ONE_990 ];
	return state;
}


// MAIN //

/**
* Returns a 32-bit Mersenne Twister pseudorandom number generator.
*
* ## Notes
*
* -   In contrast to the original C implementation, array seeds of length `1` are considered integer seeds. This ensures that the seed `[ 1234 ]` generates the same output as the seed `1234`. In the original C implementation, the two seeds would yield different output, which is **not** obvious from a user perspective.
*
* @param {Options} [options] - options
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integers less than or equal to the maximum unsigned 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than or equal to the maximum unsigned 32-bit integer
* @throws {TypeError} state must be a `Uint32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} Mersenne Twister PRNG
*
* @example
* var mt19937 = factory();
*
* var v = mt19937();
* // returns <number>
*
* @example
* // Return a seeded Mersenne Twister PRNG:
* var mt19937 = factory({
*     'seed': 1234
* });
*
* var v = mt19937();
* // returns 822569775
*/
function factory( options ) {
	var STATE;
	var state;
	var opts;
	var seed;
	var slen;
	var err;

	opts = {};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_990( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'state' ) ) {
			state = options.state;
			opts.state = true;
			if ( !_$isUint32Array_198( state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + state + '`.' );
			}
			err = verifyState( state, true );
			if ( err ) {
				throw err;
			}
			if ( opts.copy === false ) {
				STATE = state;
			} else {
				STATE = new _$ctor_41( state.length );
				_$gcopy_206( state.length, state, 1, STATE, 1 );
			}
			// Create a state "view":
			state = new _$ctor_41( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );

			// Create a seed "view":
			seed = new _$ctor_41( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), state[ SEED_SECTION_OFFSET ] );
		}
		// If provided a PRNG state, we ignore the `seed` option...
		if ( seed === void 0 ) {
			if ( _$hasOwnProp_78( options, 'seed' ) ) {
				seed = options.seed;
				opts.seed = true;
				if ( __isPositiveInteger_990( seed ) ) {
					if ( seed > MAX_SEED ) {
						throw new RangeError( 'invalid option. `seed` option must be a positive integer less than or equal to the maximum unsigned 32-bit integer. Option: `' + seed + '`.' );
					}
					seed >>>= 0; // asm type annotation
				} else if ( _$isCollection_116( seed ) === false || seed.length < 1 ) {
					throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + seed + '`.' );
				} else if ( seed.length === 1 ) {
					seed = seed[ 0 ];
					if ( !__isPositiveInteger_990( seed ) ) {
						throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + seed + '`.' );
					}
					if ( seed > MAX_SEED ) {
						throw new RangeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + seed + '`.' );
					}
					seed >>>= 0; // asm type annotation
				} else {
					slen = seed.length;
					STATE = new _$ctor_41( STATE_FIXED_LENGTH+slen );

					// Initialize sections:
					STATE[ 0 ] = STATE_ARRAY_VERSION;
					STATE[ 1 ] = NUM_STATE_SECTIONS;
					STATE[ STATE_SECTION_OFFSET ] = N;
					STATE[ OTHER_SECTION_OFFSET ] = 1;
					STATE[ OTHER_SECTION_OFFSET+1 ] = N; // state index
					STATE[ SEED_SECTION_OFFSET ] = slen;

					// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:
					_$gcopy_206.ndarray( slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET+1 );

					// Create a state "view":
					state = new _$ctor_41( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );

					// Create a seed "view":
					seed = new _$ctor_41( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), slen );

					// Initialize the internal PRNG state:
					state = createState( state, N, SEED_ARRAY_INIT_STATE );
					state = initState( state, N, seed, slen );
				}
			} else {
				seed = _$randuint32_993() >>> 0; // asm type annotation
			}
		}
	} else {
		seed = _$randuint32_993() >>> 0; // asm type annotation
	}
	if ( state === void 0 ) {
		STATE = new _$ctor_41( STATE_FIXED_LENGTH+1 );

		// Initialize sections:
		STATE[ 0 ] = STATE_ARRAY_VERSION;
		STATE[ 1 ] = NUM_STATE_SECTIONS;
		STATE[ STATE_SECTION_OFFSET ] = N;
		STATE[ OTHER_SECTION_OFFSET ] = 1;
		STATE[ OTHER_SECTION_OFFSET+1 ] = N; // state index
		STATE[ SEED_SECTION_OFFSET ] = 1;
		STATE[ SEED_SECTION_OFFSET+1 ] = seed;

		// Create a state "view":
		state = new _$ctor_41( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );

		// Create a seed "view":
		seed = new _$ctor_41( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );

		// Initialize the internal PRNG state:
		state = createState( state, N, seed );
	}
	// Note: property order matters in order to maintain consistency of PRNG "shape" (hidden classes).
	_$setNonEnumerableReadOnly_1359( mt19937, 'NAME', 'mt19937' );
	_$setNonEnumerableReadOnlyAccessor_1357( mt19937, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( mt19937, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( mt19937, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( mt19937, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( mt19937, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( mt19937, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( mt19937, 'MIN', 1 );
	_$setNonEnumerableReadOnly_1359( mt19937, 'MAX', _$UINT32_MAX_253 );
	_$setNonEnumerableReadOnly_1359( mt19937, 'normalized', normalized );

	_$setNonEnumerableReadOnly_1359( normalized, 'NAME', mt19937.NAME );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( normalized, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( normalized, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( normalized, 'MIN', 0.0 );
	_$setNonEnumerableReadOnly_1359( normalized, 'MAX', MAX_NORMALIZED );

	return mt19937;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		var len = STATE[ SEED_SECTION_OFFSET ];
		return _$gcopy_206( len, seed, 1, new _$ctor_41( len ), 1 );
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return STATE[ SEED_SECTION_OFFSET ];
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return STATE.length;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return STATE.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `3` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  internal PRNG state
	*     2.  auxiliary state information
	*     3.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		var len = STATE.length;
		return _$gcopy_206( len, STATE, 1, new _$ctor_41( len ), 1 );
	}

	/**
	* Sets the PRNG state.
	*
	* ## Notes
	*
	* -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
	* -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		var err;
		if ( !_$isUint32Array_198( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		err = verifyState( s, false );
		if ( err ) {
			throw err;
		}
		if ( opts.copy === false ) {
			if ( opts.state && s.length === STATE.length ) {
				_$gcopy_206( s.length, s, 1, STATE, 1 ); // update current shared state
			} else {
				STATE = s; // point to new shared state
				opts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation
			}
		} else {
			// Check if we can reuse allocated memory...
			if ( s.length !== STATE.length ) {
				STATE = new _$ctor_41( s.length ); // reallocate
			}
			_$gcopy_206( s.length, s, 1, STATE, 1 );
		}
		// Create a new state "view":
		state = new _$ctor_41( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );

		// Create a new seed "view":
		seed = new _$ctor_41( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), STATE[ SEED_SECTION_OFFSET ] );
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = mt19937.NAME;
		out.state = _$toJSON_25( STATE );
		out.params = [];
		return out;
	}

	/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{32}-1) \\).
	*
	* @private
	* @returns {uinteger32} pseudorandom integer
	*
	* @example
	* var r = mt19937();
	* // returns <number>
	*/
	function mt19937() {
		var r;
		var i;

		// Retrieve the current state index:
		i = STATE[ OTHER_SECTION_OFFSET+1 ];

		// Determine whether we need to update the PRNG state:
		if ( i >= N ) {
			state = twist( state );
			i = 0;
		}
		// Get the next word of "raw"/untempered state:
		r = state[ i ];

		// Update the state index:
		STATE[ OTHER_SECTION_OFFSET+1 ] = i + 1;

		// Tempering transform to compensate for the reduced dimensionality of equidistribution:
		r ^= r >>> 11;
		r ^= ( r << 7 ) & TEMPERING_COEFFICIENT_1;
		r ^= ( r << 15 ) & TEMPERING_COEFFICIENT_2;
		r ^= r >>> 18;

		return r >>> 0;
	}

	/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* ## Notes
	*
	* -   The original C implementation credits Isaku Wada for this algorithm (2002/01/09).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = normalized();
	* // returns <number>
	*/
	function normalized() {
		var x = mt19937() >>> 5;
		var y = mt19937() >>> 6;
		return ( (x*TWO_26)+y ) * FLOAT64_NORMALIZATION_CONSTANT;
	}
}


// EXPORTS //

var _$factory_990 = factory;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_990 = require( './factory.js' ); */;
/* removed: var _$randuint32_993 = require( './rand_uint32.js' ); */;


// MAIN //

/**
* Generates a pseudorandom integer on the interval \\( [1,2^{32}-1) \\).
*
* ## Method
*
* -   When generating normalized double-precision floating-point numbers, we first generate two pseudorandom integers \\( x \\) and \\( y \\) on the interval \\( [1,2^{32}-1) \\) for a combined \\( 64 \\) random bits.
*
* -   We would like \\( 53 \\) random bits to generate a 53-bit precision integer and, thus, want to discard \\( 11 \\) of the generated bits.
*
* -   We do so by discarding \\( 5 \\) bits from \\( x \\) and \\( 6 \\) bits from \\( y \\).
*
* -   Accordingly, \\( x \\) contains \\( 27 \\) random bits, which are subsequently shifted left \\( 26 \\) bits (multiplied by \\( 2^{26} \\), and \\( y \\) contains \\( 26 \\) random bits to fill in the lower \\( 26 \\) bits. When summed, they combine to comprise \\( 53 \\) random bits of a double-precision floating-point integer.
*
* -   As an example, suppose, for the sake of argument, the 32-bit PRNG generates the maximum unsigned 32-bit integer \\( 2^{32}-1 \\) twice in a row. Then,
*
*     ```javascript
*     x = 4294967295 >>> 5; // 00000111111111111111111111111111
*     y = 4294967295 >>> 6; // 00000011111111111111111111111111
*     ```
*
*     Multiplying \\( x \\) by \\( 2^{26} \\) returns \\( 9007199187632128 \\), which, in binary, is
*
*     ```binarystring
*     0 10000110011 11111111111111111111 11111100000000000000000000000000
*     ```
*
*     Adding \\( y \\) yields \\( 9007199254740991 \\) (the maximum "safe" double-precision floating-point integer value), which, in binary, is
*
*     ```binarystring
*     0 10000110011 11111111111111111111 11111111111111111111111111111111
*     ```
*
* -   Similarly, suppose the 32-bit PRNG generates the following values
*
*     ```javascript
*     x = 1 >>> 5;  // 0 => 00000000000000000000000000000000
*     y = 64 >>> 6; // 1 => 00000000000000000000000000000001
*     ```
*
*     Multiplying \\( x \\) by \\( 2^{26} \\) returns \\( 0 \\), which, in binary, is
*
*     ```binarystring
*     0 00000000000 00000000000000000000 00000000000000000000000000000000
*     ```
*
*     Adding \\( y \\) yields \\( 1 \\), which, in binary, is
*
*     ```binarystring
*     0 01111111111 00000000000000000000 00000000000000000000000000000000
*     ```
*
* -   As different combinations of \\( x \\) and \\( y \\) are generated, different combinations of double-precision floating-point exponent and significand bits will be toggled, thus generating pseudorandom double-precision floating-point numbers.
*
*
* ## References
*
* -   Matsumoto, Makoto, and Takuji Nishimura. 1998. "Mersenne Twister: A 623-dimensionally Equidistributed Uniform Pseudo-random Number Generator." _ACM Transactions on Modeling and Computer Simulation_ 8 (1). New York, NY, USA: ACM: 3–30. doi:[10.1145/272991.272995][@matsumoto:1998a].
* -   Harase, Shin. 2017. "Conversion of Mersenne Twister to double-precision floating-point numbers." _ArXiv_ abs/1708.06018 (September). <https://arxiv.org/abs/1708.06018>.
*
* [@matsumoto:1998a]: https://doi.org/10.1145/272991.272995
*
*
* @function mt19937
* @type {PRNG}
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = mt19937();
* // returns <number>
*/
var mt19937 = _$factory_990({
	'seed': _$randuint32_993()
});


// EXPORTS //

var _$mt19937_992 = mt19937;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* A 32-bit Mersenne Twister pseudorandom number generator.
*
* @module @stdlib/random/base/mt19937
*
* @example
* var mt19937 = require( '@stdlib/random/base/mt19937' );
*
* var v = mt19937();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/mt19937' ).factory;
*
* var mt19937 = factory({
*     'seed': 1234
* });
*
* var v = mt19937();
* // returns 822569775
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mt19937_992 = require( './main.js' ); */;
/* removed: var _$factory_990 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$mt19937_992, 'factory', _$factory_990 );


// EXPORTS //

var _$mt19937_991 = _$mt19937_992;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_854 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates values provided for minimum and maximum support.
*
* @private
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_854( a, b ) {
	if ( !__isNumber_854( a ) || _$isnan_150( a ) ) {
		return new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isNumber_854( b ) || _$isnan_150( b ) ) {
		return new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a >= b ) {
		return new RangeError( 'invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `['+a+','+b+']`.');
	}
	return null;
}


// EXPORTS //

var _$validate_854 = __validate_854;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_615 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$HALF_PI_224 = require( '@stdlib/constants/math/float64-half-pi' ); */;


// MAIN //

/**
* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} pseudorandom number
*/
function arcsine( rand, a, b ) {
	return a + ( _$pow_579( _$sin_615( _$HALF_PI_224*rand() ), 2.0 ) * ( b-a ) );
}


// EXPORTS //

var _$arcsine_850 = arcsine;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var randu = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_854 = require( './validate.js' ); */;
/* removed: var _$arcsine_850 = require( './arcsine.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating arcsine distributed random numbers.
*
* @param {number} [a] - minimum support
* @param {number} [b] - maximum support
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var arcsine = factory( 0.0, 1.0 );
*
* var v = arcsine();
* // returns <number>
*
* @example
* var arcsine = factory( -3.0, -1.0, {
*     'seed': 297
* });
* var v = arcsine();
* // returns <number>
*/
function __factory_851() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = randu( opts );
		}
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = _$validate_854( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = randu( opts );
			}
		} else {
			rand = randu();
		}
	}
	if ( a === void 0 ) {
		prng = arcsine2;
	} else {
		prng = arcsine1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'arcsine' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( a === void 0 ) {
			out.params = [];
		} else {
			out.params = [ a, b ];
		}
		return out;
	}

	/**
	* Returns a arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = arcsine1();
	* // returns <number>
	*/
	function arcsine1() {
		return _$arcsine_850( rand, a, b );
	}

	/**
	* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {number} a - minimum support
	* @param {number} b - maximum support
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = arcsine2( 0.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = arcsine2( 1.0, 0.0 );
	* // returns NaN
	*/
	function arcsine2( a, b ) {
		if (
			_$isnan_370( a ) ||
			_$isnan_370( b ) ||
			a >= b
		) {
			return NaN;
		}
		return _$arcsine_850( rand, a, b );
	}
}


// EXPORTS //

var _$factory_851 = __factory_851;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_851 = require( './factory.js' ); */;


// MAIN //

/**
* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.
*
* @name arcsine
* @type {PRNG}
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} pseudorandom number
*
* @example
* var v = arcsine( 0.0, 1.0 );
* // returns <number>
*/
var __arcsine_853 = _$factory_851();


// EXPORTS //

var _$arcsine_853 = __arcsine_853;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution pseudorandom numbers.
*
* @module @stdlib/random/base/arcsine
*
* @example
* var arcsine = require( '@stdlib/random/base/arcsine' );
*
* var v = arcsine( 0.0, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/arcsine' ).factory;
*
* var arcsine = factory( -5.0, 5.0, {
*     'seed': 297
* });
*
* var v = arcsine();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$arcsine_853 = require( './main.js' ); */;
/* removed: var _$factory_851 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$arcsine_853, 'factory', _$factory_851 );


// EXPORTS //

var _$arcsine_852 = _$arcsine_853;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1052 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1052 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rarcsine = _$arcsine_852.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1052( a, b, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1052( a ) || _$isnan_370( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isNumber_1052( b ) || _$isnan_370( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a >= b ) {
		throw new RangeError( 'invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `['+a+','+b+']`.');
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1052( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rarcsine( a, b, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rarcsine( a, b );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1052( a, b, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1052 = __iterator_1052;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from an arcsine distribution.
*
* @module @stdlib/random/iter/arcsine
*
* @example
* var iterator = require( '@stdlib/random/iter/arcsine' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1052 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1051 = _$iterator_1052;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_185 = _$isNumber_162.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a probability
*
* @example
* var bool = isProbability( 0.66 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.66 ) );
* // returns false
*/
function isProbability( value ) {
	return (
		__isNumber_185( value ) &&
		value >= 0.0 &&
		value <= 1.0
	);
}


// EXPORTS //

var _$isProbability_185 = isProbability;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_184 = _$isNumber_162.isObject;


// MAIN //

/**
* Tests if a value is a number object having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value which is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns false
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*/
function __isProbability_184( value ) {
	return (
		__isNumber_184( value ) &&
		value.valueOf() >= 0.0 &&
		value.valueOf() <= 1.0
	);
}


// EXPORTS //

var _$isProbability_184 = __isProbability_184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isProbability_185 = require( './primitive.js' ); */;
/* removed: var _$isProbability_184 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( -5.0 );
* // returns false
*
* @example
* var bool = isProbability( null );
* // returns false
*/
function __isProbability_183( value ) {
	return ( _$isProbability_185( value ) || _$isProbability_184( value ) );
}


// EXPORTS //

var _$isProbability_183 = __isProbability_183;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a probability.
*
* @module @stdlib/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( -5.0 );
* // returns false
*
* bool = isProbability( null );
* // returns false
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
*
* var bool = isProbability( 0.3 );
* // returns true
*
* bool = isProbability( new Number( 0.3 ) );
* // returns false
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' ).isObject;
*
* var bool = isProbability( 0.77 );
* // returns false
*
* bool = isProbability( new Number( 0.77 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isProbability_183 = require( './main.js' ); */;
/* removed: var _$isProbability_185 = require( './primitive.js' ); */;
/* removed: var _$isProbability_184 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isProbability_183, 'isPrimitive', _$isProbability_185 );
_$setNonEnumerableReadOnly_1359( _$isProbability_183, 'isObject', _$isProbability_184 );


// EXPORTS //

var _$isProbability_182 = _$isProbability_183;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isProbability_855 = _$isProbability_182.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_855 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Bernoulli distributed random numbers.
*
* @param {Probability} [p] - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `p` must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var bernoulli = factory( 0.5 );
* var v = bernoulli();
* // returns <number>
*
* @example
* var bernoulli = factory( 0.8, {
*     'seed': 297
* });
* var v = bernoulli();
* // returns <number>
*
* @example
* var bernoulli = factory();
* var v = bernoulli( 0.5 );
* // returns <number>
*/
function __factory_855() {
	var opts;
	var rand;
	var prng;
	var p;

	if ( arguments.length === 0 ) {
		rand = __randu_855();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_855( opts );
		}
	} else {
		p = arguments[ 0 ];
		if ( !__isProbability_855( p ) ) {
			throw new TypeError( 'invalid argument. First argument must be a probability. Value: `' + p + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_855( opts );
			}
		} else {
			rand = __randu_855();
		}
	}
	if ( p === void 0 ) {
		prng = bernoulli2;
	} else {
		prng = bernoulli1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'bernoulli' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( p === void 0 ) {
			out.params = [];
		} else {
			out.params = [ p ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Bernoulli distribution with bound parameter `p`.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = bernoulli1();
	* // returns <number>
	*/
	function bernoulli1() {
		return ( rand() <= p ) ? 1 : 0;
	}

	/**
	* Returns a pseudorandom number drawn from a Bernoulli distribution with parameter `p`.
	*
	* @private
	* @param {Probability} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = bernoulli2( 0.5 );
	* // returns <number>
	*/
	function bernoulli2( p ) {
		if (
			_$isnan_370( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		return ( rand() <= p ) ? 1 : 0;
	}
}


// EXPORTS //

var _$factory_855 = __factory_855;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_855 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom random number drawn from a Bernoulli distribution with parameter `p`.
*
* @name bernoulli
* @type {PRNG}
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var v = bernoulli( 0.5 );
* // returns <number>
*
* @example
* var v = bernoulli( 3.14 );
* // returns NaN
*
* @example
* var v = bernoulli( -1.0 );
* // returns NaN
*
* @example
* var v = bernoulli( NaN );
* // returns NaN
*/
var bernoulli = _$factory_855();


// EXPORTS //

var _$bernoulli_857 = bernoulli;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distributed pseudorandom numbers.
*
* @module @stdlib/random/base/bernoulli
*
* @example
* var bernoulli = require( '@stdlib/random/base/bernoulli' );
*
* var v = bernoulli( 0.5 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/bernoulli' ).factory;
*
* var bernoulli = factory( 0.3, {
*     'seed': 297
* });
*
* var v = bernoulli();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/bernoulli' ).factory;
*
* var bernoulli = factory({
*     'seed': 297
* });
*
* var v = bernoulli( 0.5 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$bernoulli_857 = require( './main.js' ); */;
/* removed: var _$factory_855 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$bernoulli_857, 'factory', _$factory_855 );


// EXPORTS //

var _$bernoulli_856 = _$bernoulli_857;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isProbability_1054 = _$isProbability_182.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1054 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rbern = _$bernoulli_856.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1054( p, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isProbability_1054( p ) ) {
		throw new TypeError( 'invalid argument. First argument must be a probability. Value: `'+p+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1054( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rbern( p, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rbern( p );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1054( p, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1054 = __iterator_1054;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Bernoulli distribution.
*
* @module @stdlib/random/iter/bernoulli
*
* @example
* var iterator = require( '@stdlib/random/iter/bernoulli' );
*
* var iter = iterator( 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1054 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1053 = _$iterator_1054;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

// (R*phi(R) + Pr(X>=R))*sqrt(2\pi)
var V = 9.91256303526217e-3;


// MAIN //

/**
* Returns an array containing coordinates such that each rectangle has the same area.
*
* @private
* @param {PositiveInteger} N - number of rectangles
* @param {number} rTail - start of right tail
* @returns {NumberArray} coordinate array
*
* @example
* var X = coordsArray( 128, 3.44 );
* // returns <Array>
*/
function coordsArray( N, rTail ) {
	var X;
	var f;
	var i;

	X = new Array( N+1 );
	f = _$exp_512( -0.5 * rTail * rTail );
	X[ 0 ] = V / f; // [0] is bottom block: V / f(R)
	X[ 1 ] = rTail;
	X[ N ] = 0.0;
	for ( i = 2; i < N; i++ ) {
		X[ i ] = _$sqrt_625( -2.0 * _$ln_561( (V / X[i-1]) + f ) );
		f = _$exp_512( -0.5 * X[ i ] * X[ i ] );
	}
	return X;
}


// EXPORTS //

var _$coordsArray_945 = coordsArray;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns an array containing the ratio of each pair of consecutive elements in order: `X[ i+1 ] / X[ i ]`.
*
* @private
* @param {NumberArray} X - input array
* @returns {NumberArray} ratio array
*
* @example
* var R = ratioArray( [ 1.0, 2.0, 5.0 ] );
* // returns [ 2.0, 2.5 ]
*/
function ratioArray( X ) {
	var R;
	var i;

	R = [];
	for ( i = 0; i < X.length-1; i++ ) {
		R.push( X[ i+1 ] / X[ i ] );
	}
	return R;
}


// EXPORTS //

var _$ratioArray_950 = ratioArray;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Transforms the tail of the normal distribution to the unit interval and then uses rejection technique to generate standard normal variable.
*
* ## References
*
* -   Marsaglia, George. 1964. "Generating a Variable from the Tail of the Normal Distribution." _Technometrics_ 6 (1): 101–2. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} rTail - start value of the right tail
* @param {boolean} isNegative - boolean indicating which side to evaluate
* @returns {number} standard normal variable
*/
function sampleTail( rand, rTail, isNegative ) {
	var x;
	var y;
	do {
		x = _$ln_561( rand() ) / rTail;
		y = _$ln_561( rand() );
	} while ( -2.0*y < x*x );
	return ( isNegative ) ? x-rTail : rTail-x;
}


// EXPORTS //

var _$sampleTail_951 = sampleTail;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$coordsArray_945 = require( './coords_array.js' ); */;
/* removed: var _$ratioArray_950 = require( './ratio_array.js' ); */;
/* removed: var _$sampleTail_951 = require( './sample_tail.js' ); */;


// VARIABLES //

// Number of blocks:
var NUM_BLOCKS = 128;

// Start of right tail (R):
var START_RIGHT_TAIL = 3.442619855899;

// `X` holds coordinates, such that each rectangle has same area:
var X = _$coordsArray_945( NUM_BLOCKS, START_RIGHT_TAIL );

// `R` holds `X[ i+1 ] / X[ i ]`:
var R = _$ratioArray_950( X );

// 127 => 0x7F => 00000000000000000000000001111111
var LAST_7_BITS_MASK = 127|0; // asm type annotation


// MAIN //

/**
* Returns a pseudorandom number generator which implements the improved Ziggurat algorithm for generating normally distributed pseudorandom numbers.
*
* @private
* @param {PRNG} randu - PRNG for generating uniformly distributed numbers
* @param {PRNG} randi - PRNG for generating uniformly distributed integers
* @returns {number} pseudorandom number
*/
function __wrap_947( randu, randi ) {
	return randn;

	/**
	* Generates a normally distributed pseudorandom number.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = randn();
	* // returns <number>
	*/
	function randn() {
		var f0;
		var f1;
		var x2;
		var x;
		var u;
		var i;
		var j;
		while ( true ) {
			u = ( 2.0*randu() ) - 1.0;
			i = randi() & LAST_7_BITS_MASK;

			// First try the rectangular boxes...
			if ( _$abs_390( u ) < R[ i ] ) {
				return u * X[ i ];
			}
			// If bottom box, sample from the tail...
			if ( i === 0 ) {
				return _$sampleTail_951( randu, START_RIGHT_TAIL, u < 0.0 );
			}
			// Is this a sample from the wedges?
			x = u * X[ i ];
			x2 = x * x;
			j = i + 1;
			f0 = _$exp_512( -0.5 * ( (X[ i ]*X[ i ]) - x2 ) );
			f1 = _$exp_512( -0.5 * ( (X[ j ]*X[ j ]) - x2 ) );
			if ( f1 + (randu()*(f0-f1)) < 1.0 ) {
				return x;
			}
		}
	}
}


// EXPORTS //

var _$wrap_947 = __wrap_947;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_946 = _$isBoolean_108.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
var __mt19937_946 = _$mt19937_991.factory;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$UINT32_MAX_253 = require( '@stdlib/constants/math/uint32-max' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$wrap_947 = require( './improved_ziggurat.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator which implements the improved Ziggurat method to generate normally distributed pseudorandom numbers.
*
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var r = randn();
* // returns <number>
*
* @example
* // Return a seeded PRNG:
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/
function __factory_946( options ) {
	var randu;
	var randi;
	var randn;
	var opts;

	opts = {
		'copy': true
	};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_946( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'prng' ) ) {
			if ( !_$isFunction_132( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			randu = options.prng;
		}
		// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.
		else if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( !_$isUint32Array_198( options.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );
			}
		}
		// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.
		else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( options.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );
			}
		}
	}
	if ( opts.state === void 0 ) {
		if ( randu === void 0 ) {
			randi = __mt19937_946( opts );
			randu = randi.normalized;
		} else {
			randi = __mt19937_946({
				'seed': _$floor_523( 1.0 + ( _$UINT32_MAX_253*randu() ) ), // allows seeding via an externally seeded PRNG
				'copy': opts.copy
			});
			opts.seed = null;
		}
	} else {
		randi = __mt19937_946( opts );
		randu = randi.normalized;
	}
	randn = _$wrap_947( randu, randi );

	_$setNonEnumerableReadOnly_1359( randn, 'NAME', 'improved-ziggurat' );
	if ( opts.seed === null ) {
		_$setNonEnumerableReadOnly_1359( randn, 'seed', null );
		_$setNonEnumerableReadOnly_1359( randn, 'seedLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'seedLength', getSeedLength );
	}
	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( options && options.prng ) {
		_$setNonEnumerableReadWriteAccessor_1361( randn, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( randn, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( randn, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( randn, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadWriteAccessor_1361( randn, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( randn, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( randn, 'PRNG', randu );

	return randn;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return randi.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return randi.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return randi.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return randi.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return randi.state;
	}

	/**
	* Sets the PRNG state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		randi.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = randn.NAME;
		out.state = _$toJSON_25( randi.state );
		out.params = [];
		return out;
	}
}


// EXPORTS //

var _$factory_946 = __factory_946;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_946 = require( './factory.js' ); */;


// MAIN //

/**
* Generates a standard normally distributed random number.
*
* ## Method
*
* The basic Ziggurat method works as follows:
*
*
*     ```tex
*     x_{C-1}(r) \left[ f(0) - f\left( x_{C-1}(r) \right) \right] - V(r) = 0
*     ```
*
*     where
*
*     ```tex
*     V(r) = r \; f(r) + \int_r^\infty \; f(x) \; dx
*     ```
*
*     and \\( r \\) denotes the right-most \\( x_1 \\).
*
* -   We then use the following rejection algorithm:
*
*     -   Draw a box \\( B_i \\) at random with probability \\( \tfrac{1}{C} \\).
*     -   Draw a random number from the box as \\( z = U_0 x_i \\) for \\( i > 0 \\) and \\( z = U_0 V / f(x_1) \\).
*     -   If \\( z < x_{i+1} \\), accept \\( z \\).
*     -   If \\( i = 0 \\), accept a \\( v \\) by transforming the tail of the normal distribution to the unit interval and then use rejection technique by Marsaglia, G. (1964) to generate a standard normal variable. Otherwise, if \\( i > 0 \\) and \\( U_1 \left[ f(x_i) - f(x_{i+1})\right] < f(z) - f(x_{i+1}) \\) accept \\( z \\).
*     -   Go back to the first step.
*
* -   The improved version by Doornik (2005) changes step four in order to correct a deficiency of the original Ziggurat algorithm. The updated version requires the generation of two random numbers, a uniform variable drawn from \\( U(-1,1) \\) and the last seven bits of a random integer.
*
* ## References
*
* -   Doornik, Jurgen A. 2005. "An Improved Ziggurat Method to Generate Normal Random Samples." <https://www.doornik.com/research/ziggurat.pdf>.
* -   Marsaglia, George, and Wai Wan Tsang. 2000. "The Ziggurat Method for Generating Random Variables." _Journal of Statistical Software_ 5 (1): 1–7. doi:[10.18637/jss.v005.i08](http://dx.doi.org/10.18637/jss.v005.i08).
* -   Marsaglia, George. 1964. "Generating a Variable from the Tail of the Normal Distribution." _Technometrics_ 6 (1): 101–2. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).
*
*
* @name randn
* @type {PRNG}
* @returns {number} pseudorandom number
*
* @example
* var r = randn();
* // returns <number>
*/
var randn = _$factory_946();


// EXPORTS //

var _$randn_949 = randn;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normally distributed pseudorandom numbers using the improved Ziggurat method.
*
* @module @stdlib/random/base/improved-ziggurat
*
* @example
* var randn = require( '@stdlib/random/base/improved-ziggurat' );
*
* var r = randn();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/improved-ziggurat' ).factory;
*
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$randn_949 = require( './main.js' ); */;
/* removed: var _$factory_946 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$randn_949, 'factory', _$factory_946 );


// EXPORTS //

var _$randn_948 = _$randn_949;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPositive = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_865( alpha, beta ) {
	if ( !isPositive( alpha ) ) {
		return new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );
	}
	if ( !isPositive( beta ) ) {
		return new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_865 = __validate_865;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Handles case where `alpha` and `beta` are equal and greater than `1.5`.
*
* @private
* @param {PRNG} randu - PRNG for uniformly distributed numbers
* @param {PRNG} randn - PRNG for normally distributed numbers
* @param {PositiveNumber} alpha - first shape parameter
* @returns {Probability} pseudorandom number
*/
function sample( randu, randn, alpha ) {
	var flg;
	var s4;
	var A;
	var s;
	var t;
	var u;
	var x;
	var y;

	A = alpha - 1.0;
	t = _$pow_579( A+A, 0.5 );

	flg = true;
	while ( flg === true ) {
		s = randn();
		x = 0.5 * ( 1.0+(s/t) );
		if ( x >= 0.0 && x <= 1.0 ) {
			u = randu();
			s4 = _$pow_579( s, 4.0 );
			y = (8.0*alpha) - 12.0;
			y = 1.0 - (s4 / y);
			if ( u <= y ) {
				flg = false;
			} else {
				y += 0.5 * _$pow_579( s4/((8.0*alpha)-8.0), 2.0 );
				if ( u < y ) {
					y = A * _$ln_561( 4.0*x*(1.0-x) );
					y += s*s / 2.0;
					if ( y >= _$ln_561( u ) ) {
						flg = false;
					}
				}
			}
		}
	}
	return x;
}


// EXPORTS //

var _$sample_862 = sample;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Handles case where both `alpha` and `beta` are greater than `1.0`.
*
* @private
* @param {PRNG} randu - PRNG for uniformly distributed numbers
* @param {PRNG} randn - PRNG for normally distributed numbers
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} pseudorandom number
*/
function __sample_863( randu, randn, alpha, beta ) {
	var sigma;
	var flg;
	var mu;
	var A;
	var B;
	var C;
	var L;
	var s;
	var u;
	var x;
	var y;

	A = alpha - 1.0;
	B = beta - 1.0;
	C = A + B;
	L = C * _$ln_561( C );
	mu = A / C;
	sigma = 0.5 / _$pow_579( C, 0.5 );

	flg = true;
	while ( flg === true ) {
		s = randn();
		x = mu + (s*sigma);
		if ( x >= 0.0 && x <= 1.0 ) {
			u = randu();
			y = A * _$ln_561( x/A );
			y += B * _$ln_561((1.0-x) / B);
			y += L + (0.5*s*s);
			if ( y >= _$ln_561( u ) ) {
				flg = false;
			}
		}
	}
	return x;
}


// EXPORTS //

var _$sample_863 = __sample_863;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Handles general case.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} pseudorandom number
*/
function __sample_864( rand, alpha, beta ) {
	var lx;
	var ly;
	var xy;
	var u;
	var v;
	var x;
	var y;
	while ( true ) {
		u = rand();
		v = rand();
		x = _$pow_579( u, 1.0/alpha );
		y = _$pow_579( v, 1.0/beta );
		xy = x + y;
		if ( xy <= 1.0 ) {
			if ( xy > 0.0 ) {
				return x / ( xy );
			}
			lx = _$ln_561( u ) / alpha;
			ly = _$ln_561( v ) / beta;
			if ( lx > ly ) {
				ly -= lx;
				lx = 0.0;
			} else {
				lx -= ly;
				ly = 0.0;
			}
			return _$exp_512( lx - _$ln_561( _$exp_512(lx) + _$exp_512(ly) ) );
		}
	}
}


// EXPORTS //

var _$sample_864 = __sample_864;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sample_862 = require( './sample1.js' ); */;
/* removed: var _$sample_863 = require( './sample2.js' ); */;
/* removed: var _$sample_864 = require( './sample3.js' ); */;


// MAIN //

/**
* Returns a random number drawn from a beta distribution.
*
* @private
* @param {PRNG} randu - pseudorandom number generator for uniformly distributed numbers
* @param {PRNG} randn - pseudorandom number generator for normally distributed numbers
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} pseudorandom number
*/
function __sample_858( randu, randn, alpha, beta ) {
	if ( alpha === beta && alpha > 1.5 ) {
		return _$sample_862( randu, randn, alpha );
	}
	if ( alpha > 1.0 && beta > 1.0 ) {
		return _$sample_863( randu, randn, alpha, beta );
	}
	return _$sample_864( randu, alpha, beta );
}


// EXPORTS //

var _$sample_858 = __sample_858;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_859 = _$isBoolean_108.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randn_859 = _$randn_948.factory;
var __randu_859 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_865 = require( './validate.js' ); */;
/* removed: var _$sample_858 = require( './beta.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating beta distributed random numbers.
*
* @param {PositiveNumber} [alpha] - first shape parameter
* @param {PositiveNumber} [beta] - second shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var beta = factory( 2.0, 1.0 );
* var v = beta();
* // returns <number>
*
* @example
* var beta = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = beta();
* // returns <number>
*/
function __factory_859() {
	var STATE;
	var rnorm;
	var alpha;
	var beta;
	var opts;
	var rand;
	var prng;
	var FLG;
	var err;

	FLG = true;
	if ( arguments.length === 0 ) {
		opts = {
			'copy': false
		};
		rand = __randu_859( opts );
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_859( opts.copy ) ) {
			throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
			}
			opts = _$copy_1353( opts, 1 );
			if ( opts.copy === false ) {
				FLG = false;
			} else if ( opts.state ) {
				opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
			}
			opts.copy = false;
			rand = __randu_859( opts );
		}
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = _$validate_865( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_859( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
					throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
				}
				opts = _$copy_1353( opts, 1 );
				if ( opts.copy === false ) {
					FLG = false;
				} else if ( opts.state ) {
					opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
				}
				opts.copy = false;
				rand = __randu_859( opts );
			}
		} else {
			opts = {
				'copy': false
			};
			rand = __randu_859( opts );
		}
	}
	if ( opts && opts.prng ) {
		rnorm = __randn_859({
			'prng': opts.prng
		});
	} else {
		if ( opts.state ) {
			STATE = opts.state;
		} else {
			STATE = rand.state;
			rand.state = STATE; // updates the underlying PRNG to point to a shared state
		}
		rnorm = __randn_859({
			'state': STATE,
			'copy': false
		});
	}
	if ( alpha === void 0 ) {
		prng = beta2;
	} else {
		prng = beta1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'beta' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		if ( !_$isUint32Array_198( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		if ( FLG ) {
			s = _$gcopy_206( s.length, s, 1, new _$ctor_41( s.length ), 1 );
		}
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( alpha === void 0 ) {
			out.params = [];
		} else {
			out.params = [ alpha, beta ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a beta distribution with bound parameter values.
	*
	* @private
	* @returns {Probability} pseudorandom number
	*
	* @example
	* var v = beta1();
	* // returns <number>
	*/
	function beta1() {
		return _$sample_858( rand, rnorm, alpha, beta );
	}

	/**
	* Returns a random number drawn from a beta distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - first shape parameter
	* @param {PositiveNumber} beta - second shape parameter
	* @returns {Probability} pseudorandom number
	*
	* @example
	* var v = beta2( 2.0, 3.0 );
	* // returns <number>
	*/
	function beta2( alpha, beta ) {
		if (
			_$isnan_370( alpha ) ||
			_$isnan_370( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		return _$sample_858( rand, rnorm, alpha, beta );
	}
}


// EXPORTS //

var _$factory_859 = __factory_859;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_859 = require( './factory.js' ); */;


// MAIN //

/**
* Generates a beta distributed random number.
*
* ## References
*
* -   Ahrens, J.H., and U. Dieter. 1974. "Computer methods for sampling from gamma, beta, poisson and bionomial distributions." _Computing_ 12 (3): 223–46. doi:[10.1007/BF02293108](http://dx.doi.org/10.1007/BF02293108).
* -   Jöhnk, M.D. 1964. "Erzeugung von Betaverteilten Und Gammaverteilten Zufallszahlen." _Metrika_ 8: 5–15. <http://eudml.org/doc/175224>.
*
* @name beta
* @type {PRNG}
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} pseudorandom number
*
* @example
* var r = beta( 2.0, 5.0 );
* // returns <number>
*
* @example
* var r = beta( -2.0, 5.0 );
* // returns NaN
*/
var __beta_861 = _$factory_859();


// EXPORTS //

var _$beta_861 = __beta_861;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distributed pseudorandom numbers.
*
* @module @stdlib/random/base/beta
*
* @example
* var beta = require( '@stdlib/random/base/beta' );
*
* var v = beta( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/beta' ).factory;
*
* var beta = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = beta();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$beta_861 = require( './main.js' ); */;
/* removed: var _$factory_859 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$beta_861, 'factory', _$factory_859 );


// EXPORTS //

var _$beta_860 = _$beta_861;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1056 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1056 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rbeta = _$beta_860.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1056( alpha, beta, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1056( alpha ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_1056( beta ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1056( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rbeta( alpha, beta, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rbeta( alpha, beta );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1056( alpha, beta, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1056 = __iterator_1056;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a beta distribution.
*
* @module @stdlib/random/iter/beta
*
* @example
* var iterator = require( '@stdlib/random/iter/beta' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1056 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1055 = _$iterator_1056;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_929 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_929( alpha, beta ) {
	if ( !__isPositive_929( alpha ) ) {
		return new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );
	}
	if ( !__isPositive_929( beta ) ) {
		return new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_929 = __validate_929;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a gamma distribution.
*
* @private
* @param {PRNG} randu - PRNG for uniformly distributed numbers
* @param {PRNG} randn - PRNG for standard normally distributed numbers
* @param {PositiveNumber} beta - rate parameter
* @param {PositiveNumber} d - `alpha + 2/3` or `alpha - 1/3`
* @param {PositiveNumber} c - `1.0 / sqrt( 9.0*d )`
* @returns {PositiveNumber} pseudorandom number
*/
function __gamma_926( randu, randn, beta, d, c ) {
	var flg;
	var x2;
	var v0;
	var v1;
	var x;
	var u;
	var v;

	flg = true;
	while ( flg ) {
		do {
			x = randn();
			v = 1.0 + (c*x);
		} while ( v <= 0.0 );
		v *= v * v;
		x2 = x * x;
		v0 = 1.0 - (0.331*x2*x2);
		v1 = (0.5*x2) + (d*( 1.0-v+_$ln_561(v) ));
		u = randu();
		if ( u < v0 || _$ln_561( u ) < v1 ) {
			flg = false;
		}
	}
	return (1.0/beta) * d * v;
}


// EXPORTS //

var _$gamma_926 = __gamma_926;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
var __isBoolean_925 = _$isBoolean_108.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randn_925 = _$randn_948.factory;
var __randu_925 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$validate_929 = require( './validate.js' ); */;
/* removed: var _$gamma_926 = require( './gamma.js' ); */;


// VARIABLES //

var __ONE_THIRD_925 = 1.0 / 3.0;


// MAIN //

/**
* Returns a pseudorandom number generator for generating gamma distributed random numbers.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var gamma = factory( 2.0, 1.0 );
* var v = gamma();
* // returns <number>
*
* @example
* var gamma = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = gamma();
* // returns <number>
*/
function __factory_925() {
	var STATE;
	var alpha;
	var rnorm;
	var beta;
	var opts;
	var rand;
	var prng;
	var FLG;
	var err;
	var c;
	var d;

	FLG = true;
	if ( arguments.length === 0 ) {
		opts = {
			'copy': false
		};
		rand = __randu_925( opts );
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_925( opts.copy ) ) {
			throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
			}
			opts = _$copy_1353( opts, 1 );
			if ( opts.copy === false ) {
				FLG = false;
			} else if ( opts.state ) {
				opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
			}
			opts.copy = false;
			rand = __randu_925( opts );
		}
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = _$validate_929( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_925( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
					throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
				}
				opts = _$copy_1353( opts, 1 );
				if ( opts.copy === false ) {
					FLG = false;
				} else if ( opts.state ) {
					opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
				}
				opts.copy = false;
				rand = __randu_925( opts );
			}
		} else {
			opts = {
				'copy': false
			};
			rand = __randu_925( opts );
		}
	}
	if ( opts && opts.prng ) {
		rnorm = __randn_925({
			'prng': opts.prng
		});
	} else {
		if ( opts.state ) {
			STATE = opts.state;
		} else {
			STATE = rand.state;
			rand.state = STATE; // updates the underlying PRNG to point to a shared state
		}
		rnorm = __randn_925({
			'state': STATE,
			'copy': false
		});
	}
	if ( alpha === void 0 ) {
		prng = gamma2;
	} else {
		if ( alpha >= 1.0 ) {
			prng = gamma1a;
			d = alpha - __ONE_THIRD_925;
		} else {
			prng = gamma1b;
			d = alpha + 1.0 - __ONE_THIRD_925;
		}
		c = 1.0 / _$sqrt_625( 9.0*d );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'gamma' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		if ( !_$isUint32Array_198( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		if ( FLG ) {
			s = _$gcopy_206( s.length, s, 1, new _$ctor_41( s.length ), 1 );
		}
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( alpha === void 0 ) {
			out.params = [];
		} else {
			out.params = [ alpha, beta ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha >= 1`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma1a();
	* // returns <number>
	*/
	function gamma1a() {
		return _$gamma_926( rand, rnorm, beta, d, c );
	}

	/**
	* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha < 1`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma1b();
	* // returns <number>
	*/
	function gamma1b() {
		return _$gamma_926( rand, rnorm, beta, d, c ) * _$pow_579( rand(), 1.0/alpha );
	}

	/**
	* Returns a pseudorandom number drawn from a gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - rate parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma2( 2.0, 4.0 );
	* // returns <number>
	*
	* @example
	* var v = gamma2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = gamma2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = gamma2( NaN, NaN );
	* // returns NaN
	*/
	function gamma2( alpha, beta ) {
		var c;
		var d;
		if (
			_$isnan_370( alpha ) ||
			_$isnan_370( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		if ( alpha < 1.0 ) {
			d = alpha + 1.0 - __ONE_THIRD_925;
			c = 1.0 / _$sqrt_625( 9.0*d );
			return _$gamma_926( rand, rnorm, beta, d, c ) * _$pow_579( rand(), 1.0/alpha );
		}
		d = alpha - __ONE_THIRD_925;
		c = 1.0 / _$sqrt_625( 9.0*d );
		return _$gamma_926( rand, rnorm, beta, d, c );
	}
}


// EXPORTS //

var _$factory_925 = __factory_925;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_925 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a gamma distribution.
*
* ## References
*
* -   Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating Gamma Variables." _ACM Transactions on Mathematical Software_ 26 (3). New York, NY, USA: ACM: 363–72. doi:[10.1145/358407.358414](http://dx.doi.org/10.1145/358407.358414).
*
*
* @name gamma
* @type {PRNG}
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} pseudorandom number
*
* @example
* var v = gamma( 2.0, 4.0 );
* // returns <number>
*
* @example
* var v = gamma( -2.0, 4.0 );
* // returns NaN
*/
var __gamma_928 = _$factory_925();


// EXPORTS //

var _$gamma_928 = __gamma_928;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distributed pseudorandom numbers.
*
* @module @stdlib/random/base/gamma
*
* @example
* var gamma = require( '@stdlib/random/base/gamma' );
*
* var v = gamma( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/gamma' ).factory;
*
* var gamma = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = gamma();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$gamma_928 = require( './main.js' ); */;
/* removed: var _$factory_925 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$gamma_928, 'factory', _$factory_925 );


// EXPORTS //

var _$gamma_927 = _$gamma_928;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_870 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_870( alpha, beta ) {
	if ( !__isPositive_870( alpha ) ) {
		return new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );
	}
	if ( !__isPositive_870( beta ) ) {
		return new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_870 = __validate_870;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a random number drawn from a beta prime distribution.
*
* @private
* @param {PRNG} rgamma - pseudorandom number generator for gamma distributed numbers
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} pseudorandom number
*/
function __sample_866( rgamma, alpha, beta ) {
	return rgamma( alpha, 1.0 ) / rgamma( beta, 1.0 );
}


// EXPORTS //

var _$sample_866 = __sample_866;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var gammaFactory = _$gamma_927.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_870 = require( './validate.js' ); */;
/* removed: var _$sample_866 = require( './betaprime.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating beta prime distributed random numbers.
*
* @param {PositiveNumber} [alpha] - first shape parameter
* @param {PositiveNumber} [beta] - second shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var betaprime = factory( 2.0, 1.0 );
* var v = betaprime();
* // returns <number>
*
* @example
* var betaprime = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = betaprime();
* // returns <number>
*/
function __factory_867() {
	var rgamma;
	var alpha;
	var beta;
	var opts;
	var rand;
	var prng;
	var err;

	if ( arguments.length === 0 ) {
		rgamma = gammaFactory();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rgamma = gammaFactory( opts );
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = _$validate_870( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rgamma = gammaFactory( opts );
		} else {
			rgamma = gammaFactory();
		}
	}
	if ( alpha === void 0 ) {
		prng = betaprime2;
	} else {
		prng = betaprime1;
	}
	rand = rgamma.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'betaprime' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( alpha === void 0 ) {
			out.params = [];
		} else {
			out.params = [ alpha, beta ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a beta prime distribution with bound parameter values.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = betaprime1();
	* // returns <number>
	*/
	function betaprime1() {
		return _$sample_866( rgamma, alpha, beta );
	}

	/**
	* Returns a random number drawn from a beta prime distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - first shape parameter
	* @param {PositiveNumber} beta - second shape parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = betaprime2( 2.0, 3.0 );
	* // returns <number>
	*/
	function betaprime2( alpha, beta ) {
		if (
			_$isnan_370( alpha ) ||
			_$isnan_370( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		return _$sample_866( rgamma, alpha, beta );
	}
}


// EXPORTS //

var _$factory_867 = __factory_867;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_867 = require( './factory.js' ); */;


// MAIN //

/**
* Generates a beta prime distributed random number.
*
* @name betaprime
* @type {PRNG}
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} pseudorandom number
*
* @example
* var r = betaprime( 2.0, 5.0 );
* // returns <number>
*
* @example
* var r = betaprime( -2.0, 5.0 );
* // returns NaN
*/
var betaprime = _$factory_867();


// EXPORTS //

var _$betaprime_869 = betaprime;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distributed pseudorandom numbers.
*
* @module @stdlib/random/base/betaprime
*
* @example
* var betaprime = require( '@stdlib/random/base/betaprime' );
*
* var v = betaprime( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/betaprime' ).factory;
*
* var betaprime = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = betaprime();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$betaprime_869 = require( './main.js' ); */;
/* removed: var _$factory_867 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$betaprime_869, 'factory', _$factory_867 );


// EXPORTS //

var _$betaprime_868 = _$betaprime_869;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1058 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1058 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rbetaprime = _$betaprime_868.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta  - second shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1058( alpha, beta, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1058( alpha ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_1058( beta ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1058( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rbetaprime( alpha, beta, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rbetaprime( alpha, beta );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1058( alpha, beta, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1058 = __iterator_1058;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a beta prime distribution.
*
* @module @stdlib/random/iter/betaprime
*
* @example
* var iterator = require( '@stdlib/random/iter/betaprime' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1058 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1057 = _$iterator_1058;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a positive integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a positive integer
*
* @example
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -10.0 );
* // returns false
*/
function __isPositiveInteger_381( x ) {
	return (_$floor_523(x) === x && x > 0);
}


// EXPORTS //

var _$isPositiveInteger_381 = __isPositiveInteger_381;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a positive integer.
*
* @module @stdlib/math/base/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* bool = isPositiveInteger( 0.0 );
* // returns false
*
* bool = isPositiveInteger( -10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isPositiveInteger_381 = require( './is_positive_integer.js' ); */;


// EXPORTS //

var _$isPositiveInteger_380 = _$isPositiveInteger_381;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a numeric value is a probability.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( NaN );
* // returns false
*/
function __isProbability_388( x ) {
	return ( x >= 0.0 && x <= 1.0 );
}


// EXPORTS //

var _$isProbability_388 = __isProbability_388;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is a probability.
*
* @module @stdlib/math/base/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/math/base/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isProbability_388 = require( './is_probability.js' ); */;


// EXPORTS //

var _$isProbability_387 = _$isProbability_388;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_878 = _$isPositiveInteger_174.isPrimitive;
var __isProbability_878 = _$isProbability_182.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 10, 0.5 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_878( n, p ) {
	if ( !__isPositiveInteger_878( n ) ) {
		return new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + p + '`.' );
	}
	if ( !__isProbability_878( p ) ) {
		return new TypeError( 'invalid argument. Second argument must be a probability. Value: `' + p + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_878 = __validate_878;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Generates a binomially distributed pseudorandom number by computing the sum of Bernoulli random variables.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*/
function __sample_876( rand, n, p ) {
	var sum = 0;
	var i;
	for ( i = 0; i < n; i++ ) {
		if ( rand() <= p ) {
			sum += 1;
		}
	}
	return sum;
}


// EXPORTS //

var _$sample_876 = __sample_876;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;


// VARIABLES //

var ONE_12 = 1.0 / 12.0;
var ONE_360 = 1.0 / 360.0;
var ONE_1260 = 1.0 / 1260.0;


// MAIN //

/**
* Returns a correction for Stirling's approximation.
*
* @private
* @param {NonNegativeInteger} k - input argument
* @returns {number} correction term
*
* @example
* var c = correction( 0 );
* // returns 0.08106146679532726
*/
function __correction_872( k ) {
	var v;
	switch ( k ) {
	case 0:
		return 0.08106146679532726;
	case 1:
		return 0.04134069595540929;
	case 2:
		return 0.02767792568499834;
	case 3:
		return 0.02079067210376509;
	case 4:
		return 0.01664469118982119;
	case 5:
		return 0.01387612882307075;
	case 6:
		return 0.01189670994589177;
	case 7:
		return 0.01041126526197209;
	case 8:
		return 0.009255462182712733;
	case 9:
		return 0.008330563433362871;
	default:
		k += 1;
		v = _$pow_579( k, 2 );
		return (ONE_12 - ((ONE_360 - (ONE_1260/v)) / v)) / k;
	}
}


// EXPORTS //

var _$correction_872 = __correction_872;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$signum_613 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$correction_872 = require( './correction.js' ); */;


// VARIABLES //

var ONE_SIXTH = 1.0 / 6.0;


// MAIN //

/**
* Generates a binomially distributed pseudorandom number.
*
* ## References
*
* -   Hörmann, Wolfgang. 1993. "The generation of binomial random variates." _Journal of Statistical Computation and Simulation_ 46 (1-2): 101–10. doi:[10.1080/00949659308811496][@hormann:1993a].
*
* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*/
function __sample_877( rand, n, p ) {
	var alpha;
	var urvr;
	var snpq;
	var npq;
	var rho;
	var tmp;
	var nm;
	var nr;
	var us;
	var km;
	var nk;
	var vr;
	var a;
	var b;
	var c;
	var f;
	var h;
	var i;
	var k;
	var m;
	var q;
	var r;
	var t;
	var u;
	var v;
	var x;

	m = _$floor_523( (n + 1) * p );
	nm = n - m + 1;

	q = 1.0 - p;

	r = p / q;
	nr = (n + 1) * r;

	npq = n * p * q;
	snpq = _$sqrt_625( npq );

	b = 1.15 + (2.53 * snpq);
	a = -0.0873 + (0.0248*b) + (0.01*p);
	c = (n*p) + 0.5;

	alpha = (2.83 + (5.1/b)) * snpq;

	vr = 0.92 - (4.2/b);
	urvr = 0.86 * vr;

	h = (m + 0.5) * _$ln_561( (m+1) / (r*nm) );
	h += _$correction_872( m ) + _$correction_872( n-m );

	while ( true ) {
		v = rand();
		if ( v <= urvr ) {
			u = (v/vr) - 0.43;
			r = (u * ( (2.0*a / (0.5 - _$abs_390(u))) + b )) + c;
			return _$floor_523( r );
		}
		if ( v >= vr ) {
			u = rand() - 0.5;
		} else {
			u = (v/vr) - 0.93;
			u = (_$signum_613( u ) * 0.5) - u;
			v = vr * rand();
		}
		us = 0.5 - _$abs_390(u);
		k = _$floor_523( (u * ( (2.0*a/us) + b )) + c );
		if ( k < 0 || k > n ) {
			// Try again...
			continue;
		}
		v = v * alpha / ( (a/(us*us)) + b );
		km = _$abs_390( k - m );
		if ( km > 15 ) {
			v = _$ln_561( v );
			rho = km / npq;
			tmp = ( (km/3) + 0.625 ) * km;
			tmp += ONE_SIXTH;
			tmp /= npq;
			rho *= tmp + 0.5;
			t = -(km * km) / (2.0 * npq);
			if ( v < t - rho ) {
				return k;
			}
			if ( v <= t + rho ) {
				nk = n - k + 1;
				x = h + ( (n+1)*_$ln_561( nm/nk ) );
				x += (k+0.5) * _$ln_561( nk*r/(k+1) );
				x += -(_$correction_872( k ) + _$correction_872( n-k ));
				if ( v <= x ) {
					return k;
				}
			}
		} else {
			f = 1.0;
			if ( m < k ) {
				for ( i = m; i <= k; i++ ) {
					f *= (nr/i) - r;
				}
			} else if ( m > k ) {
				for ( i = k; i <= m; i++ ) {
					v *= (nr/i) - r;
				}
			}
			if ( v <= f ) {
				return k;
			}
		}
	}
}


// EXPORTS //

var _$sample_877 = __sample_877;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sample_876 = require( './sample1.js' ); */;
/* removed: var _$sample_877 = require( './sample2.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a binomial distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - probability of success
* @returns {NonNegativeInteger} pseudorandom number
*/
function __sample_871( rand, n, p ) {
	if ( p > 0.5 ) {
		return n - __sample_871( rand, n, 1.0-p );
	}
	if ( n*p < 10.0 ) {
		return _$sample_876( rand, n, p );
	}
	return _$sample_877( rand, n, p );
}


// EXPORTS //

var _$sample_871 = __sample_871;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPositiveInteger_380 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isProbability_387 = require( '@stdlib/math/base/assert/is-probability' ); */;
var __randu_873 = _$mt19937_991.factory;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_878 = require( './validate.js' ); */;
/* removed: var _$sample_871 = require( './binomial.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating binomially distributed random numbers.
*
* @param {PositiveInteger} [n] - number of trials
* @param {Probability} [p] - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var binomial = factory( 17, 0.5 );
* var v = binomial();
* // returns <number>
*
* @example
* var binomial = factory( 8, 0.8, {
*     'seed': 297
* });
* var v = binomial();
* // returns <number>
*
* @example
* var binomial = factory();
* var v = binomial( 20, 0.5 );
* // returns <number>
*/
function __factory_873() {
	var opts;
	var rand;
	var prng;
	var err;
	var n;
	var p;

	if ( arguments.length === 0 ) {
		rand = __randu_873();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_873( opts );
		}
	} else {
		n = arguments[ 0 ];
		p = arguments[ 1 ];
		err = _$validate_878( n, p );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_873( opts );
			}
		} else {
			rand = __randu_873();
		}
	}
	if ( n === void 0 ) {
		prng = binomial2;
	}
	else {
		prng = binomial1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'binomial' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( n === void 0 ) {
			out.params = [];
		} else {
			out.params = [ n, p ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a binomial distribution with bound parameter values.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var r = binomial1();
	* // returns <number>
	*/
	function binomial1() {
		return _$sample_871( rand, n, p );
	}

	/**
	* Returns a random number drawn from a binomial distribution.
	*
	* @private
	* @param {PositiveInteger} n - number of trials
	* @param {Probability} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var r = binomial2( 20, 0.8 );
	* // returns <number>
	*/
	function binomial2( n, p ) {
		if (
			_$isnan_370( n ) ||
			_$isnan_370( p ) ||
			!_$isPositiveInteger_380( n ) ||
			!_$isProbability_387( p )
		) {
			return NaN;
		}
		return _$sample_871( rand, n, p );
	}
}


// EXPORTS //

var _$factory_873 = __factory_873;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_873 = require( './factory.js' ); */;


// MAIN //

/**
* Generates a binomially distributed random number.
*
* ## Method
*
* -   For \\(np < 10\\), the function generates Bernoulli random variates and returns their sum.
* -   For \\(np \geq 10\\), the function uses the [BTRD algorithm][@hormann:1993a].
*
* ## References
*
* -   Hörmann, Wolfgang. 1993. "The generation of binomial random variates." _Journal of Statistical Computation and Simulation_ 46 (1-2): 101–10. doi:[10.1080/00949659308811496][@hormann:1993a].
*
* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496
*
* @name binomial
* @type {PRNG}
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a probability
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var r = binomial( 20, 0.8 );
* // returns <number>
*/
var binomial = _$factory_873();


// EXPORTS //

var _$binomial_875 = binomial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distributed pseudorandom numbers.
*
* @module @stdlib/random/base/binomial
*
* @example
* var binomial = require( '@stdlib/random/base/binomial' );
*
* var v = binomial( 20, 0.4 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/binomial' ).factory;
*
* var binomial = factory( 90, 0.8, {
*     'seed': 297
* });
*
* var v = binomial();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$binomial_875 = require( './main.js' ); */;
/* removed: var _$factory_873 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$binomial_875, 'factory', _$factory_873 );


// EXPORTS //

var _$binomial_874 = _$binomial_875;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isProbability_1060 = _$isProbability_182.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isPositiveInteger_1060 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1060 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rbinom = _$binomial_874.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a binomial distribution.
*
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive integer
* @throws {TypeError} second argument must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 8, 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1060( n, p, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveInteger_1060( n ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive integer. Value: `'+n+'`.' );
	}
	if ( !__isProbability_1060( p ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a probability. Value: `'+p+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1060( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rbinom( n, p, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rbinom( n, p );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1060( n, p, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1060 = __iterator_1060;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a binomial distribution.
*
* @module @stdlib/random/iter/binomial
*
* @example
* var iterator = require( '@stdlib/random/iter/binomial' );
*
* var iter = iterator( 10, 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1060 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1059 = _$iterator_1060;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sin_615 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$cos_469 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$TWO_PI_245 = require( '@stdlib/constants/math/float64-two-pi' ); */;


// MAIN //

/**
* Returns a function for generating standard normally distributed pseudorandom numbers using the Box-Muller algorithm.
*
* @private
* @param {PRNG} rand - PRNG which returns standard uniformly distributed numbers
* @returns {PRNG} PRNG
*/
function __wrap_884( rand ) {
	var flg;
	var r;

	// Flag indicating whether to generate new normal random variates or return a cached normal random variate:
	flg = true;

	return randn;

	/**
	* Generates a standard normally distributed pseudorandom number.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = randn();
	* // returns <number>
	*/
	function randn() {
		var u1;
		var u2;
		var a;
		var b;
		if ( flg ) {
			// Note: if `u1` is `0`, the natural log blows up, so we keep trying until we get a non-zero rand. Rarely should we need more than one iteration.
			do {
				u1 = rand();
				u2 = rand();
			} while (
				u1 === 0.0
			);
			a = _$sqrt_625( -2.0 * _$ln_561(u1) );
			b = _$TWO_PI_245 * u2;
			r = a * _$cos_469( b ); // cache for next call
			flg = false;
			return a * _$sin_615( b );
		}
		flg = true;
		return r;
	}
}


// EXPORTS //

var _$wrap_884 = __wrap_884;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$cos_469 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var COS_PI = _$cos_469( _$PI_237 ); // -1


// MAIN //

/**
* Returns the minimum possible normally distributed pseudorandom number.
*
* @private
* @param {number} min - minimum possible uniformly distributed pseudorandom number
* @returns {number} minimum possible number
*/
function getMin( min ) {
	var a = _$sqrt_625( -2.0 * _$ln_561( min ) );
	return a * COS_PI;
}


// EXPORTS //

var _$getMin_883 = getMin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$cos_469 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$TWO_PI_245 = require( '@stdlib/constants/math/float64-two-pi' ); */;


// MAIN //

/**
* Returns the maximum possible normally distributed pseudorandom number.
*
* @private
* @param {number} min - minimum possible uniformly distributed pseudorandom number
* @returns {number} maximum possible number
*/
function getMax( min ) {
	var a = _$sqrt_625( -2.0 * _$ln_561( min ) );
	var b = _$TWO_PI_245 * min;
	return a * _$cos_469( b );
}


// EXPORTS //

var _$getMax_882 = getMax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isBoolean_879 = _$isBoolean_108.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
var __mt19937_879 = _$mt19937_991.factory;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$wrap_884 = require( './randn.js' ); */;
/* removed: var _$getMin_883 = require( './min.js' ); */;
/* removed: var _$getMax_882 = require( './max.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator which implements the Box-Muller transform to generate standard normally distributed pseudorandom numbers.
*
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var r = randn();
* // returns <number>
*
* @example
* // Return a seeded PRNG:
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/
function __factory_879( options ) {
	var randu;
	var randn;
	var rand;
	var opts;

	opts = {
		'copy': true
	};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_879( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'prng' ) ) {
			if ( !_$isFunction_132( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			randu = options.prng;
		}
		// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.
		else if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( !_$isUint32Array_198( options.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );
			}
		}
		// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.
		else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( options.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );
			}
		}
	}
	if ( opts.state === void 0 ) {
		if ( randu === void 0 ) {
			rand = __mt19937_879( opts );
			randu = rand.normalized;
		} else {
			opts.seed = null;
		}
	} else {
		rand = __mt19937_879( opts );
		randu = rand.normalized;
	}
	randn = _$wrap_884( randu );

	_$setNonEnumerableReadOnly_1359( randn, 'NAME', 'box-muller' );
	if ( opts.seed === null ) {
		_$setNonEnumerableReadOnly_1359( randn, 'seed', null );
		_$setNonEnumerableReadOnly_1359( randn, 'seedLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'seedLength', getSeedLength );
	}
	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( options && options.prng ) {
		_$setNonEnumerableReadWriteAccessor_1361( randn, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( randn, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( randn, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( randn, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadWriteAccessor_1361( randn, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( randn, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( randn, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( randn, 'PRNG', randu );

	if ( _$hasOwnProp_78( randu, 'MIN' ) ) {
		_$setNonEnumerableReadOnly_1359( randn, 'MIN', _$getMin_883( randu.MIN ) );
		_$setNonEnumerableReadOnly_1359( randn, 'MAX', _$getMax_882( randu.MIN ) );
	} else {
		_$setNonEnumerableReadOnly_1359( randn, 'MIN', null );
		_$setNonEnumerableReadOnly_1359( randn, 'MAX', null );
	}

	return randn;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = randn.NAME;
		out.state = _$toJSON_25( rand.state );
		out.params = [];
		return out;
	}
}


// EXPORTS //

var _$factory_879 = __factory_879;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_879 = require( './factory.js' ); */;


// MAIN //

/**
* Generates a standard normally distributed random number.
*
* ## Method
*
* -   Given two independent uniformly distributed random variables \\( U_1 \\) and \\( U_2 \\) in the interval \\( [0,1) \\), let
*
*     ``` tex
*     \begin{align*}
*     Z_1 &= R \cos(\theta) = \sqrt{-2 \ln(U_1)} \cos(2\pi U_2) \\
*     Z_2 &= R \sin(\theta) = \sqrt{-2 \ln(U_1)} \sin(2\pi U_2)
*     \end{align*}
*     ```
*
*     where \\( Z_1 \\) and \\( Z_2 \\) are independent random variables with a standard normal distribution.
*
* -   As two uniform random variates are mapped to two standard normal random variates, one of the random variates is cached and returned upon the following invocation.
*
*
* ## Notes
*
* -   The minimum and maximum pseudorandom numbers which can be generated are dependent on the number of bits an underlying uniform pseudorandom number generator (PRNG) uses. For instance, if a PRNG uses \\( 32 \\) bits, the smallest non-zero number that can be generated is \\( 2^{-32}). When \\( U_1 \\) equals this value and \\( U_2 \\) equals \\( 0 \\),
*
*     ``` tex
*     r = \sqrt{-2\ln(2^{-32})} \cos(2\pi) \approx 6.66
*     ```
*
*     which means that the algorithm cannot produce random variates more than \\( 6.66 \\) standard deviations from the mean.
*
*     <!-- <note> -->
*
*     This corresponds to a \\( 2.74 \times 10^{-11} \\) loss due to tail truncation.
*
*     <!-- </note> -->
*
*
* ## References
*
* -   Box, G. E. P., and Mervin E. Muller. 1958. "A Note on the Generation of Random Normal Deviates." _The Annals of Mathematical Statistics_ 29 (2). The Institute of Mathematical Statistics: 610–11. doi:[10.1214/aoms/1177706645](http://dx.doi.org/10.1214/aoms/1177706645).
* -   Bell, James R. 1968. "Algorithm 334: Normal Random Deviates." _Communications of the ACM_ 11 (7). New York, NY, USA: ACM: 498. doi:[10.1145/363397.363547](http://dx.doi.org/10.1145/363397.363547).
* -   Knop, R. 1969. "Remark on Algorithm 334 \[G5]: Normal Random Deviates." _Communications of the ACM_ 12 (5). New York, NY, USA: ACM: 281. doi:[10.1145/362946.362996](http://dx.doi.org/10.1145/362946.362996).
* -   Marsaglia, G., and T. A. Bray. 1964. "A Convenient Method for Generating Normal Variables." _SIAM Review_ 6 (3). Society for Industrial; Applied Mathematics: 260–64. doi:[10.1137/1006063](http://dx.doi.org/10.1137/1006063).
* -   Thomas, David B., Wayne Luk, Philip H.W. Leong, and John D. Villasenor. 2007. "Gaussian Random Number Generators." _ACM Computing Surveys_ 39 (4). New York, NY, USA: ACM. doi:[10.1145/1287620.1287622](http://dx.doi.org/10.1145/1287620.1287622).
*
*
* @name randn
* @type {PRNG}
* @returns {number} pseudorandom number
*
* @example
* var r = randn();
* // returns <number>
*/
var __randn_881 = _$factory_879();


// EXPORTS //

var _$randn_881 = __randn_881;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normally distributed pseudorandom numbers using the Box-Muller transform.
*
* @module @stdlib/random/base/box-muller
*
* @example
* var randn = require( '@stdlib/random/base/box-muller' );
*
* var r = randn();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/box-muller' ).factory;
*
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$randn_881 = require( './main.js' ); */;
/* removed: var _$factory_879 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$randn_881, 'factory', _$factory_879 );


// EXPORTS //

var _$randn_880 = _$randn_881;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1062 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rnorm = _$randn_880.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.
*
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1062( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;

	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1062( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rnorm( opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rnorm();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1062( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1062 = __iterator_1062;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.
*
* @module @stdlib/random/iter/box-muller
*
* @example
* var iterator = require( '@stdlib/random/iter/box-muller' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1062 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1061 = _$iterator_1062;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_889 = _$isNumber_162.isPrimitive;
var __isPositive_889 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.5 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_889( x0, gamma ) {
	if ( !__isNumber_889( x0 ) || _$isnan_150( x0 ) ) {
		return new TypeError( 'invalid argument. `x0` must be a number primitive and not `NaN`. Value: `' + x0 + '`.' );
	}
	if ( !__isPositive_889( gamma ) ) {
		return new TypeError( 'invalid argument. `gamma` must be a positive number. Value: `' + gamma + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_889 = __validate_889;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_558( x ) {
	if ( x === 0.0 ) {
		return 0.13333333333320124;
	}
	return 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_558 = __evalpoly_558;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_557( x ) {
	if ( x === 0.0 ) {
		return 0.05396825397622605;
	}
	return 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_557 = __evalpoly_557;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setLowWord_839 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$evalpoly_558 = require( './polyval_t_odd.js' ); */;
/* removed: var _$evalpoly_557 = require( './polyval_t_even.js' ); */;


// VARIABLES //

var __PIO4_556 = 7.85398163397448278999e-01;
var PIO4LO = 3.06161699786838301793e-17;
var T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563

// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111
var __HIGH_WORD_ABS_MASK_556 = 0x7fffffff|0; // asm type annotation


// MAIN //

/**
* Computes the tangent on \\( \approx\[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive \\( x \\).
*
* -   Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\( -0 \\). Callers may do the optimization \\( \tan(x) \approx x \\) for tiny \\( x \\).
*
* -   \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( \[0, 0.67434] \\)
*
*     ```tex
*     \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*     ```
*     where
*
*     ```tex
*     \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*     ```
*
* -   Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*     ```tex
*     r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*     ```
*
*     then
*
*     ```tex
*     \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*     ```
*
* -   For \\( x \\) in \\( \[0.67434, \pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*     ```tex
*     \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*     = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)
* @param {number} y - tail of `x`
* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned
* @returns {number} tangent
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* @example
* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* @example
* var out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*
* @example
* var out = kernelTan( NaN, 0.0, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( 3.0, NaN, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( NaN, NaN, 1 );
* // returns NaN
*/
function kernelTan( x, y, k ) {
	var hx;
	var ix;
	var a;
	var r;
	var s;
	var t;
	var v;
	var w;
	var z;

	hx = _$getHighWord_828( x );

	// High word of |x|:
	ix = (hx & __HIGH_WORD_ABS_MASK_556)|0; // asm type annotation

	// Case: |x| >= 0.6744
	if ( ix >= 0x3FE59428 ) {
		if ( x < 0 ) {
			x = -x;
			y = -y;
		}
		z = __PIO4_556 - x;
		w = PIO4LO - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;

	// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...
	r = _$evalpoly_558( w );
	v = z * _$evalpoly_557( w );
	s = z * x;
	r = y + (z * ((s * (r + v)) + y));
	r += T0 * s;
	w = x + r;
	if ( ix >= 0x3FE59428 ) {
		v = k;
		return ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len
	}
	if ( k === 1 ) {
		return w;
	}
	// Compute -1/(x+r) accurately...
	z = w;
	_$setLowWord_839( z, 0 );
	v = r - (z - x); // z + v = r + x
	a = -1.0 / w; // a = -1/w
	t = a;
	_$setLowWord_839( t, 0 );
	s = 1.0 + (t * z);
	return t + (a * (s + (t * v)));
}


// EXPORTS //

var _$kernelTan_556 = kernelTan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the tangent of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-tan
*
* @example
* var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
*
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*/

// MODULES //

/* removed: var _$kernelTan_556 = require( './kernel_tan.js' ); */;


// EXPORTS //

var _$kernelTan_555 = _$kernelTan_556;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_828 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelTan_555 = require( '@stdlib/math/base/special/kernel-tan' ); */;
/* removed: var _$rempio2_594 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Scratch buffer:
var __buffer_628 = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var __HIGH_WORD_ABS_MASK_628 = 0x7fffffff|0; // asm type annotation

// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011
var __HIGH_WORD_PIO4_628 = 0x3fe921fb|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var __HIGH_WORD_EXPONENT_MASK_628 = 0x7ff00000|0; // asm type annotation

// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000
var __HIGH_WORD_TWO_NEG_27_628 = 0x3e400000|0; // asm type annotation


// MAIN //

/**
* Evaluates the tangent of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} tangent
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/
function tan( x ) {
	var ix;
	var n;

	ix = _$getHighWord_828( x );
	ix &= __HIGH_WORD_ABS_MASK_628;

	// Case: |x| ~< π/4
	if ( ix <= __HIGH_WORD_PIO4_628 ) {
		// Case: |x| < 2**-27
		if ( ix < __HIGH_WORD_TWO_NEG_27_628 ) {
			return x;
		}
		return _$kernelTan_555( x, 0.0, 1 );
	}
	// Case: tan(Inf or NaN) is NaN
	if ( ix >= __HIGH_WORD_EXPONENT_MASK_628 ) {
		return NaN;
	}
	// Argument reduction needed...
	n = _$rempio2_594( x, __buffer_628 );
	return _$kernelTan_555( __buffer_628[ 0 ], __buffer_628[ 1 ], 1-((n&1)<<1) );
}


// EXPORTS //

var _$tan_628 = tan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var tan = require( '@stdlib/math/base/special/tan' );
*
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$tan_628 = require( './tan.js' ); */;


// EXPORTS //

var _$tan_627 = _$tan_628;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$tan_627 = require( '@stdlib/math/base/special/tan' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Cauchy distribution.
*
* @private
* @param {PRNG} randn - PRNG for normally distributed numbers
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} pseudorandom number
*/
function cauchy( randn, x0, gamma ) {
	return x0 + ( gamma*_$tan_627( _$PI_237*( randn()-0.5 ) ) );
}


// EXPORTS //

var _$cauchy_885 = cauchy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __randn_886 = _$randn_948.factory;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_889 = require( './validate.js' ); */;
/* removed: var _$cauchy_885 = require( './cauchy.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a Cauchy distribution.
*
* @param {number} [x0] - location parameter
* @param {PositiveNumber} [gamma] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `x0` must be a number
* @throws {TypeError} `gamma` argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var cauchy = factory( 0.0, 1.0 );
* var v = cauchy();
* // returns <number>
*
* @example
* var cauchy = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = cauchy();
* // returns <number>
*/
function __factory_886() {
	var gamma;
	var rnorm;
	var opts;
	var rand;
	var prng;
	var err;
	var x0;

	if ( arguments.length === 0 ) {
		rnorm = __randn_886();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rnorm = __randn_886({
				'prng': opts.prng
			});
		} else {
			rnorm = __randn_886( opts );
		}
	} else {
		x0 = arguments[ 0 ];
		gamma = arguments[ 1 ];
		err = _$validate_889( x0, gamma );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rnorm = __randn_886({
					'prng': opts.prng
				});
			} else {
				rnorm = __randn_886( opts );
			}
		} else {
			rnorm = __randn_886();
		}
	}
	if ( x0 === void 0 ) {
		prng = cauchy2;
	} else {
		prng = cauchy1;
	}
	rand = rnorm.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'cauchy' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( x0 === void 0 ) {
			out.params = [];
		} else {
			out.params = [ x0, gamma ];
		}
		return out;
	}

	/**
	* Returns pseudorandom number drawn from a Cauchy distribution with bound parameters `x0` and `gamma`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = cauchy1();
	* // returns <number>
	*/
	function cauchy1() {
		return _$cauchy_885( rnorm, x0, gamma );
	}

	/**
	* Returns pseudorandom number drawn from a Cauchy distribution.
	*
	* @private
	* @param {number} x0 - location parameter
	* @param {PositiveNumber} gamma - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = cauchy2( 0.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var r = cauchy2( 1.0, -1.5 );
	* // returns NaN
	*/
	function cauchy2( x0, gamma ) {
		if (
			_$isnan_370( x0 ) ||
			_$isnan_370( gamma ) ||
			gamma <= 0.0
		) {
			return NaN;
		}
		return _$cauchy_885( rnorm, x0, gamma );
	}
}


// EXPORTS //

var _$factory_886 = __factory_886;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_886 = require( './factory.js' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a Cauchy distribution.
*
* @name cauchy
* @type {PRNG}
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = cauchy( 0.0, 2.0 );
* // returns <number>
*
* @example
* var v = cauchy( 0.0, -1.0 );
* // returns NaN
*/
var __cauchy_888 = _$factory_886();


// EXPORTS //

var _$cauchy_888 = __cauchy_888;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution pseudorandom numbers.
*
* @module @stdlib/random/base/cauchy
*
* @example
* var cauchy = require( '@stdlib/random/base/cauchy' );
*
* var v = cauchy( 0.5, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/cauchy' ).factory;
*
* var cauchy = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = cauchy();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cauchy_888 = require( './main.js' ); */;
/* removed: var _$factory_886 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$cauchy_888, 'factory', _$factory_886 );


// EXPORTS //

var _$cauchy_887 = _$cauchy_888;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1064 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1064 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1064 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rcauchy = _$cauchy_887.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `x0` must be a number
* @throws {TypeError} `gamma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1064( x0, gamma, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1064( x0 ) || _$isnan_370( x0 ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+x0+'`.' );
	}
	if ( !__isPositive_1064( gamma ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+gamma+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1064( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rcauchy( x0, gamma, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rcauchy( x0, gamma );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1064( x0, gamma, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1064 = __iterator_1064;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Cauchy distribution.
*
* @module @stdlib/random/iter/cauchy
*
* @example
* var iterator = require( '@stdlib/random/iter/cauchy' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1064 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1063 = _$iterator_1064;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
var __isPositive_893 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __gamma_893 = _$gamma_927.factory;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating chi-square distributed random numbers.
*
* @param {PositiveNumber} [k] - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var chisquare = factory( 2 );
* var v = chisquare();
* // returns <number>
*
* @example
* var chisquare = factory( 2, {
*     'seed': 297
* });
* var v = chisquare();
* // returns <number>
*/
function __factory_893() {
	var rgamma;
	var rand;
	var opts;
	var prng;
	var k;
	if ( arguments.length === 0 ) {
		rgamma = __gamma_893();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rgamma = __gamma_893({
				'prng': opts.prng
			});
		} else {
			rgamma = __gamma_893( opts );
		}
	} else {
		k = arguments[ 0 ];
		if ( !__isPositive_893( k ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + k + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rgamma = __gamma_893( k/2.0, 0.5, {
					'prng': opts.prng
				});
			} else {
				rgamma = __gamma_893( k/2.0, 0.5, opts );
			}
		} else {
			rgamma = __gamma_893( k/2.0, 0.5 );
		}
	}
	if ( k === void 0 ) {
		prng = chisquare2;
	} else {
		prng = chisquare1;
	}
	rand = rgamma.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'chisquare' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( k === void 0 ) {
			out.params = [];
		} else {
			out.params = [ k ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a chi-square distribution with bound `k`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare1();
	* // returns <number>
	*/
	function chisquare1() {
		return rgamma();
	}

	/**
	* Returns a random number drawn from a chi-square distribution with degrees of freedom `k`.
	*
	* @private
	* @param {PositiveNumber} k - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare2( 2 );
	* // returns <number>
	*/
	function chisquare2( k ) {
		if (
			_$isnan_370( k ) ||
			k <= 0
		) {
			return NaN;
		}
		return rgamma( k/2.0, 0.5 );
	}
}


// EXPORTS //

var _$factory_893 = __factory_893;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_893 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a chi-square distribution with degrees of freedom `k`.
*
* @function chisquare
* @type {PRNG}
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} pseudorandom number
*
* @example
* var v = chisquare( 2 );
* // returns <number>
*
* @example
* var v = chisquare( 0 );
* // returns NaN
*
* @example
* var v = chisquare( NaN );
* // returns NaN
*/
var chisquare = _$factory_893();


// EXPORTS //

var _$chisquare_895 = chisquare;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-square distributed pseudorandom numbers.
*
* @module @stdlib/random/base/chisquare
*
* @example
* var chisquare = require( '@stdlib/random/base/chisquare' );
*
* var v = chisquare( 6 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/chisquare' ).factory;
*
* var chisquare = factory( 3, {
*     'seed': 297
* });
*
* var v = chisquare();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$chisquare_895 = require( './main.js' ); */;
/* removed: var _$factory_893 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$chisquare_895, 'factory', _$factory_893 );


// EXPORTS //

var _$chisquare_894 = _$chisquare_895;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
var __isPositive_890 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __chisquare_890 = _$chisquare_894.factory;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating chi distributed random numbers.
*
* @param {PositiveNumber} [k] - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var chi = factory( 2 );
* var v = chi();
* // returns <number>
*
* @example
* var chi = factory( 2, {
*     'seed': 297
* });
* var v = chi();
* // returns <number>
*/
function __factory_890() {
	var rchisq;
	var rand;
	var opts;
	var prng;
	var k;
	if ( arguments.length === 0 ) {
		rchisq = __chisquare_890();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rchisq = __chisquare_890({
				'prng': opts.prng
			});
		} else {
			rchisq = __chisquare_890( opts );
		}
	} else {
		k = arguments[ 0 ];
		if ( !__isPositive_890( k ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + k + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rchisq = __chisquare_890( k, {
					'prng': opts.prng
				});
			} else {
				rchisq = __chisquare_890( k, opts );
			}
		} else {
			rchisq = __chisquare_890( k );
		}
	}
	if ( k === void 0 ) {
		prng = chi2;
	} else {
		prng = chi1;
	}
	rand = rchisq.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'chi' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( k === void 0 ) {
			out.params = [];
		} else {
			out.params = [ k ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a chi distribution with bound `k`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chi1();
	* // returns <number>
	*/
	function chi1() {
		return _$sqrt_625( rchisq() );
	}

	/**
	* Returns a random number drawn from a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {PositiveNumber} k - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chi2( 2 );
	* // returns <number>
	*/
	function chi2( k ) {
		if (
			_$isnan_370( k ) ||
			k <= 0.0
		) {
			return NaN;
		}
		return _$sqrt_625( rchisq( k ) );
	}
}


// EXPORTS //

var _$factory_890 = __factory_890;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_890 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a chi distribution with degrees of freedom `k`.
*
* @name chi
* @type {PRNG}
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} pseudorandom number
*
* @example
* var v = chi( 2 );
* // returns <number>
*
* @example
* var v = chi( 0 );
* // returns NaN
*
* @example
* var v = chi( NaN );
* // returns NaN
*/
var chi = _$factory_890();


// EXPORTS //

var _$chi_892 = chi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distributed pseudorandom numbers.
*
* @module @stdlib/random/base/chi
*
* @example
* var chi = require( '@stdlib/random/base/chi' );
*
* var v = chi( 6 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/chi' ).factory;
*
* var chi = factory( 3, {
*     'seed': 297
* });
*
* var v = chi();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$chi_892 = require( './main.js' ); */;
/* removed: var _$factory_890 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$chi_892, 'factory', _$factory_890 );


// EXPORTS //

var _$chi_891 = _$chi_892;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositive_1066 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1066 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rchi = _$chi_891.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1066( k, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositive_1066( k ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+k+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1066( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rchi( k, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rchi( k );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1066( k, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1066 = __iterator_1066;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a chi distribution.
*
* @module @stdlib/random/iter/chi
*
* @example
* var iterator = require( '@stdlib/random/iter/chi' );
*
* var iter = iterator( 1.5 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1066 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1065 = _$iterator_1066;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositive_1068 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1068 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rchisq = _$chisquare_894.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a chi-square distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1068( k, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositive_1068( k ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+k+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1068( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rchisq( k, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rchisq( k );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1068( k, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1068 = __iterator_1068;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a chi-square distribution.
*
* @module @stdlib/random/iter/chisquare
*
* @example
* var iterator = require( '@stdlib/random/iter/chisquare' );
*
* var iter = iterator( 1.5 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1068 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1067 = _$iterator_1068;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_900 = _$isNumber_162.isPrimitive;
var __isPositive_900 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_900( mu, s ) {
	if ( !__isNumber_900( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_900( s ) ) {
		return new TypeError( 'invalid argument. `s` must be a positive number. Value: `' + s + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_900 = __validate_900;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* @example
* var y = cdf( 1.2, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = cdf( -0.9, 0.0, 1.0);
* // returns ~0.0
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, s ) {
	var z;
	if (
		_$isnan_370( x ) ||
		_$isnan_370( mu ) ||
		_$isnan_370( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x < mu ) ? 0.0 : 1.0;
	}
	if ( x < mu - s ) {
		return 0.0;
	}
	if ( x > mu + s ) {
		return 1.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + z + ( _$sinpi_623( z ) / _$PI_237 ) ) / 2.0;
}


// EXPORTS //

var _$cdf_1183 = cdf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = cdf( 4.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( 3.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*/
function __cdf_1190( x, mu ) {
	if ( _$isnan_370( x ) || _$isnan_370( mu ) ) {
		return NaN;
	}
	return (x < mu) ? 0.0 : 1.0;
}


// EXPORTS //

var _$cdf_1190 = __cdf_1190;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - constant value of distribution
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*
* y = cdf( NaN );
* // returns NaN
*/
function __factory_1191( mu ) {
	if ( _$isnan_370( mu ) ) {
		return _$constantFunction_1348( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated cumulative distribution function
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_370( x ) ) {
			return NaN;
		}
		return (x < mu) ? 0.0 : 1.0;
	}
}


// EXPORTS //

var _$factory_1191 = __factory_1191;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/degenerate/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/degenerate/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/cdf' ).factory;
*
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1190 = require( './cdf.js' ); */;
/* removed: var _$factory_1191 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$cdf_1190, 'factory', _$factory_1191 );


// EXPORTS //

var _$cdf_1192 = _$cdf_1190;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
var degenerate = _$cdf_1192.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.9 );
* // returns ~0.015
*
* y = cdf( 4.0 );
* // returns ~0.971
*/
function __factory_1184( mu, s ) {
	if ( _$isnan_370( mu ) || _$isnan_370( s ) || s < 0.0 ) {
		return _$constantFunction_1348( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_370( x ) ) {
			return NaN;
		}
		if ( x < mu - s ) {
			return 0.0;
		}
		if ( x > mu + s ) {
			return 1.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + z + ( _$sinpi_623( z ) / _$PI_237 ) ) / 2.0;
	}
}


// EXPORTS //

var _$factory_1184 = __factory_1184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/cosine/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/cosine/cdf' );
*
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 4.0 );
* // returns ~0.971
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1183 = require( './cdf.js' ); */;
/* removed: var _$factory_1184 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$cdf_1183, 'factory', _$factory_1184 );


// EXPORTS //

var _$cdf_1185 = _$cdf_1183;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_1185 = require( '@stdlib/stats/base/dists/cosine/cdf' ); */;


// VARIABLES //

var MAX_ITERATIONS = 1e4;
var TOLERANCE = 1e-12;


// MAIN //

/**
* Bisection method to find quantile as there is no closed-form expression for the inverse of the CDF.
*
* @private
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*/
function bisect( p, mu, s ) {
	var a;
	var b;
	var c;
	var m;
	var n;

	n = 1;
	a = mu - s;
	b = mu + s;
	while ( n < MAX_ITERATIONS ) {
		m = ( a + b ) / 2.0;
		if ( b - a < TOLERANCE ) {
			return m;
		}
		c = _$cdf_1185( m, mu, s);
		if ( p > c ) {
			a = m;
		} else {
			b = m;
		}
		n += 1;
	}
	return m;
}


// EXPORTS //

var _$bisect_1186 = bisect;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$bisect_1186 = require( './bisect.js' ); */;


// MAIN //

/**
* Evaluates the quantile function for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, s ) {
	if (
		_$isnan_370( mu ) ||
		_$isnan_370( s ) ||
		_$isnan_370( p ) ||
		s < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return _$bisect_1186( p, mu, s );
}


// EXPORTS //

var _$quantile_1189 = quantile;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a degenerate distribution centered at `mu`.
*
* @param {Probability} p - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function __quantile_1195( p, mu ) {
	if ( _$isnan_370( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$quantile_1195 = __quantile_1195;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the quantile function
*
* @example
* var quantile = factory( 5.0 );
*
* var y = quantile( 0.3 );
* // returns 5.0
*
* y = quantile( 0.1 );
* // returns 5.0
*
* y = quantile( 1.1 );
* // returns NaN
*/
function __factory_1193( mu ) {
	if ( _$isnan_370( mu ) ) {
		return _$constantFunction_1348( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function of a degenerate distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.5 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_370( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu;
	}
}


// EXPORTS //

var _$factory_1193 = __factory_1193;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution quantile function.
*
* @module @stdlib/stats/base/dists/degenerate/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/degenerate/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/quantile' ).factory;
*
* var quantile = factory( 10.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1195 = require( './quantile.js' ); */;
/* removed: var _$factory_1193 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$quantile_1195, 'factory', _$factory_1193 );


// EXPORTS //

var _$quantile_1194 = _$quantile_1195;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1187 = _$quantile_1194.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$bisect_1186 = require( './bisect.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~10.0
*
* y = quantile( 0.8 );
* // returns ~10.655
*/
function __factory_1187( mu, s ) {
	if ( _$isnan_370( mu ) || _$isnan_370( s ) || s < 0.0 ) {
		return _$constantFunction_1348( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1187( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a raised cosine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_370( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return _$bisect_1186( p, mu, s );
	}
}


// EXPORTS //

var _$factory_1187 = __factory_1187;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution quantile function.
*
* @module @stdlib/stats/base/dists/cosine/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/cosine/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1189 = require( './quantile.js' ); */;
/* removed: var _$factory_1187 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$quantile_1189, 'factory', _$factory_1187 );


// EXPORTS //

var _$quantile_1188 = _$quantile_1189;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$quantile_1188 = require( '@stdlib/stats/base/dists/cosine/quantile' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a raised cosine distribution using inverse transform sampling.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {number} mu - mean
* @param {PositiveNumber} s - scale parameter
* @returns {number} pseudorandom number
*/
function __sample_896( rand, mu, s ) {
	return _$quantile_1188( rand(), mu, s );
}


// EXPORTS //

var _$sample_896 = __sample_896;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_897 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_900 = require( './validate.js' ); */;
/* removed: var _$sample_896 = require( './cosine.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a raised cosine distribution.
*
* @param {number} [mu] - mean parameter
* @param {PositiveNumber} [s] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `s` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var cosine = factory( 0.0, 1.0 );
* var v = cosine();
* // returns <number>
*
* @example
* var cosine = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = cosine();
* // returns <number>
*/
function __factory_897() {
	var opts;
	var rand;
	var prng;
	var err;
	var mu;
	var s;
	if ( arguments.length === 0 ) {
		rand = __randu_897();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_897( opts );
		}
	} else {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		err = _$validate_900( mu, s );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_897( opts );
			}
		} else {
			rand = __randu_897();
		}
	}
	if ( mu === void 0 ) {
		prng = cosine2;
	} else {
		prng = cosine1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'cosine' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, s ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a raised cosine distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = cosine1();
	* // returns <number>
	*/
	function cosine1() {
		return _$sample_896( rand, mu, s );
	}

	/**
	* Returns a pseudorandom number drawn from a raised cosine distribution.
	*
	* @private
	* @param {number} mu - mean
	* @param {PositiveNumber} s - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = cosine2( 0.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = cosine2( 0.0, -1.0 );
	* // returns NaN
	*/
	function cosine2( mu, s ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( s ) ||
			s <= 0.0
		) {
			return NaN;
		}
		return _$sample_896( rand, mu, s );
	}
}


// EXPORTS //

var _$factory_897 = __factory_897;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_897 = require( './factory.js' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a raised cosine distribution.
*
* @name cosine
* @type {PRNG}
* @param {number} mu - mean
* @param {PositiveNumber} s - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = cosine( 0.0, 2.0 );
* // returns <number>
*
* @example
* var v = cosine( 0.0, -1.0 );
* // returns NaN
*/
var cosine = _$factory_897();


// EXPORTS //

var _$cosine_899 = cosine;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distributed pseudorandom numbers.
*
* @module @stdlib/random/base/cosine
*
* @example
* var cosine = require( '@stdlib/random/base/cosine' );
*
* var v = cosine( 0.5, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/cosine' ).factory;
* var cosine = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = cosine();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/cosine' ).factory;
* var cosine = factory({
*     'seed': 297
* });
*
* var v = cosine( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cosine_899 = require( './main.js' ); */;
/* removed: var _$factory_897 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$cosine_899, 'factory', _$factory_897 );


// EXPORTS //

var _$cosine_898 = _$cosine_899;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1070 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1070 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1070 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rcosine = _$cosine_898.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `s` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1070( mu, s, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1070( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1070( s ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+s+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1070( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rcosine( mu, s, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rcosine( mu, s );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1070( mu, s, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1070 = __iterator_1070;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a raised cosine distribution.
*
* @module @stdlib/random/iter/cosine
*
* @example
* var iterator = require( '@stdlib/random/iter/cosine' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1070 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1069 = _$iterator_1070;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_905 = _$isInteger_140.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates values provided for minimum and maximum support.
*
* @private
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1, 20 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_905( a, b ) {
	if ( !__isInteger_905( a ) || _$isnan_150( a ) ) {
		return new TypeError( 'invalid argument. First argument must be an integer and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isInteger_905( b ) || _$isnan_150( b ) ) {
		return new TypeError( 'invalid argument. Second argument must be an integer and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a > b ) {
		return new RangeError( 'invalid argument. Minimum support `a` must be less than or equal to maximum support `b`. Value: `['+a+','+b+']`.');
	}
	return null;
}


// EXPORTS //

var _$validate_905 = __validate_905;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_65_1/doc/html/boost/random/uniform_int_distribution.html}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Steven Watanabe 2011.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_231 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator which outputs integer values
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {integer} pseudorandom number
*/
function discreteUniform( rand, a, b ) {
	var result;
	var RANGE;
	var range;
	var limit;
	var bsize;
	var mult;
	var MIN;
	var MAX;
	var inc;

	range = b - a;
	if ( range === 0 ) {
		return a;
	}
	MIN = rand.MIN;
	MAX = rand.MAX;
	RANGE = MAX - MIN;
	if ( RANGE === range ) {
		return ( rand()-MIN ) + a;
	}
	if ( RANGE < range ) {
		limit = 0;
		while ( true ) {
			// Avoid overflow...
			if ( range === _$FLOAT64_MAX_SAFE_INTEGER_231 ) { // in JavaScript, we only explicitly have doubles
				limit = _$floor_523( range / (RANGE+1) );
				if ( range%(RANGE+1) === RANGE ) { // e.g., 5%(2+1) == 2
					limit += 1;
				}
			} else {
				limit = _$floor_523( (range+1) / (RANGE+1) );
			}
			// We consider `result` as expressed base `(RANGE+1)`:
			result = 0;

			// For every power of `(RANGE+1)`, we determine a random factor:
			mult = 1;

			// Loop invariants: result < mult && mult <= range
			while ( mult <= limit ) {
				// Note: see first and second post-conditions.
				result += (rand() - MIN) * mult;

				// Equivalent to (mult * (RANGE+1)) == range+1, but avoids overflow...
				if ( mult*RANGE === range-mult+1 ) {
					// The destination range is an integer power of the generator's range...
					return result;
				}
				// Note: see third post-condition.
				mult *= RANGE + 1;
			}
			// range/mult < RANGE+1 (no endless loop)
			inc = discreteUniform( rand, 0, _$floor_523( range/mult ) );
			if ( inc > _$FLOAT64_MAX_SAFE_INTEGER_231/mult ) {
				// The multiplication would overflow, so reject immediately...
				continue;
			}
			inc *= mult;
			result += inc;

			// NOTE: if we were working with unsigned integers, we would need to check that `result` is NOT less than `inc`, as unsigned integers wrap on overflow. In which case, we would need to reject.

			if ( result > range ) {
				// Result is too big, so reject...
				continue;
			}
			return result + a;
		}
	}
	// Case: RANGE > range

	// When determining the bucket size, avoid overflow...
	if ( RANGE === _$FLOAT64_MAX_SAFE_INTEGER_231 ) { // in JavaScript, we only explicitly have doubles
		bsize = _$floor_523( RANGE / (range+1) );
		if ( RANGE%(range+1) === range ) { // e.g., 5%(2+1) == 2
			bsize += 1;
		}
	} else {
		bsize = _$floor_523( (RANGE+1) / (range+1) );
	}
	while ( true ) {
		result = rand() - MIN;
		result = _$floor_523( result / bsize );
		if ( result <= range ) {
			return result + a;
		}
	}
}


// EXPORTS //

var _$discreteUniform_901 = discreteUniform;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var randi = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_368 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_905 = require( './validate.js' ); */;
/* removed: var _$discreteUniform_901 = require( './discrete_uniform.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers draw from a discrete uniform distribution.
*
* @param {integer} [a] - minimum support
* @param {integer} [b] - maximum support
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom integers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be an integer
* @throws {TypeError} `b` must be an integer
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} provided PRNG must have a valid `MIN` property
* @throws {TypeError} provided PRNG must have a valid `MAX` property
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var discreteUniform = factory( 1, 10 );
* var v = discreteUniform();
* // returns <number>
*
* @example
* var discreteUniform = factory( -30, -1, {
*     'seed': 297
* });
* var v = discreteUniform();
* // returns <number>
*/
function __factory_902() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = randi();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
			if ( !_$isInteger_368( rand.MIN ) ) {
				throw new TypeError( 'invalid option. `prng` option must have a `MIN` property specifying the minimum possible pseudorandom integer value.' );
			}
			if ( !_$isInteger_368( rand.MAX ) ) {
				throw new TypeError( 'invalid option. `prng` option must have a `MAX` property specifying the maximum possible pseudorandom integer value.' );
			}
		} else {
			rand = randi( opts );
		}
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = _$validate_905( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
				if ( !_$isInteger_368( rand.MIN ) ) {
					throw new TypeError( 'invalid option. `prng` option must have a `MIN` property specifying the minimum possible pseudorandom integer value.' );
				}
				if ( !_$isInteger_368( rand.MAX ) ) {
					throw new TypeError( 'invalid option. `prng` option must have a `MAX` property specifying the maximum possible pseudorandom integer value.' );
				}
			} else {
				rand = randi( opts );
			}
		} else {
			rand = randi();
		}
	}
	if ( a === void 0 ) {
		prng = discreteUniform2;
	} else {
		prng = discreteUniform1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'discrete-uniform' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( a === void 0 ) {
			out.params = [];
		} else {
			out.params = [ a, b ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {integer} pseudorandom number
	*
	* @example
	* var v = discreteUniform1();
	* // returns <number>
	*/
	function discreteUniform1() {
		return _$discreteUniform_901( rand, a, b );
	}

	/**
	* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {integer} a - minimum support
	* @param {integer} b - maximum support
	* @returns {integer} pseudorandom number
	*
	* @example
	* var v = discreteUniform2( 1, 10 );
	* // returns <number>
	*
	* @example
	* var v = discreteUniform2( 1, 0 );
	* // returns NaN
	*/
	function discreteUniform2( a, b ) {
		if (
			_$isnan_370( a ) ||
			_$isnan_370( b ) ||
			!_$isInteger_368( a ) ||
			!_$isInteger_368( b ) ||
			a > b
		) {
			return NaN;
		}
		return _$discreteUniform_901( rand, a, b );
	}
}


// EXPORTS //

var _$factory_902 = __factory_902;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_902 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* ## Method
*
* -   Let \\( R \\) be a pseudorandom generator (PRNG) which yields integers on the interval \\( \[ A, B ] \\).
*
* -   If \\( a = b \\), then \\( rv = a \\).
*
* -   Let \\( r1 = b - a \\) and \\( r2 = B - A \\). If \\( r2 = r1 \\) (likely a rare occurrence), then
*
*     ```tex
*     rv = ( R() - B ) + a
*     ```
*
*     where, for real integer types, operation order is important in order to avoid overflow.
*
* -   If \\( r2 < r1 \\), use rejection sampling to map random variates from \\( R \\) to a larger domain (e.g., \\( {0,1,2,3} \rightarrow {0,1,2,3,4} \\)). For real integer types (and floating-point integer values), we must take extra care to avoid overflow. During sampling, the following conditions will hold:
*
*     -   First, consider the post-condition: \\( \textrm{result} \leq r2 \\), thus avoiding overflow.
*
*     -   Begin with definition of \\( \textrm{limit} \\)
*
*         ```tex
*         \textrm{limit} = \lfloor{\frac{r2+1}{r1+1}\rfloor
*         ```
*
*         thus,
*
*         ```tex
*         \textrm{limit}\ \cdot (r1+1) \leq r2+1
*         ```
*
*     -   Let \\( m \\) be a random factor where the loop condition is defined as
*
*         ```tex
*         m \leq \textrm{limit}
*         ```
*
*     -   Let \\( \textrm{result} \\) be the generator output, which is expressed base \\( r2+1 \\) and obeys the loop invariant \\( \textrm{result} < m \\).
*
*     -   Let \\( rv \\) be a realization of the PRNG. Then,
*
*         ```tex
*         rv-A \leq r1
*         ```
*
*         and, by the loop condition, \\( m \leq \textrm{limit} \\).
*
*     -   Therefore,
*
*         ```tex
*         m \cdot (rv - A + 1) \leq r2+1
*         ```
*
*     -   Rearranging terms,
*
*         ```tex
*         m + m \cdot (rv - A) \leq r2+1
*         ```
*
*     -   Since \\( \textrm{result} < m \\),
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < r2+1
*         ```
*
*     -   Next, consider the post-condition: \\( \textrm{result} < m \cdot (r2+1) \\).
*
*     -   Since \\( \textrm{result} < m \\) and \\( rv - A \leq r1 \\),
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < m + m \cdot (rv - A)
*         ```
*
*     -   Therefore,
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < m + m \cdot r1
*         ```
*
*     -   Therefore,
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < m \cdot (r1+1)
*         ```
*
*     -   Next, consider the post-condition: \\( m \leq r2 \\).
*
*     -   According to the definition of \\( \textrm{limit} \\) and the loop condition \\( m \leq \textrm{limit} \\),
*
*         ```tex
*         m \cdot (r1+1) \leq r2+1
*         ```
*
*     -   If \\( r2 \\) is **not** an integer power of the generator range \\( r1 \\), i.e.,
*
*         ```tex
*         m \cdot (r1+1) \neq r2+1
*         ```
*
*         then
*
*         ```tex
*         m \cdot (r1+1) < r2+1
*         ```
*
*     -   Thus, \\( \textrm{result} < m \\).
*
*     -   Next, consider the post-condition: \\( r2/m < r1+1 \\).
*
*     -   To show this is true, let us try to prove its opposite. Given the loop condition \\( m > \textrm{limit} \\), assume
*
*         ```tex
*         r2/m > r1+1
*         ```
*
*     -   Accordingly,
*
*         ```tex
*         r2 \geq m \cdot (r1+1)
*         ```
*
*     -   Hence,
*
*         ```tex
*         r2+1 > m \cdot (r1+1)
*         ```
*
*     -   Using the loop condition,
*
*         ```tex
*         r2+1 > (\textrm{limit}+1) \cdot (r1+1)
*         ```
*
*     -   Rearranging terms,
*
*         ```tex
*         \frac{r2+1}{r1+1} > \textrm{limit} + 1
*         ```
*
*     -   Hence,
*
*         ```tex
*         \textrm{limit} < \lfloor{\frac{r2+1}{r1+1}} \rfloor
*         ```
*
*     -   But the definition of \\( \textrm{limit} \\) is
*
*         ```tex
*         \textrm{limit} = \lfloor{\frac{r2+1}{r1+1}}
*         ```
*
*     -   Thus, our assumption cannot be true, providing the post-condition by reductio ad absurdum.
*
*     -   Next, consider the post-condition
*
*         ```tex
*         r2 \leq \frac{r2}{m} \cdot m + (m - 1)
*         ```
*
*     -   Recall the identity
*
*         ```tex
*         r2 = \frac{r2}{m} \cdot m + r2 \mod m
*         ```
*
*     -   By the definition of the modulus
*
*         ```tex
*         r2 \mod m < m
*         ```
*
*     -   Therefore,
*
*         ```tex
*         r2 < \frac{r2}{m} \cdot m + m
*         ```
*
*     -   Hence,
*
*         ```tex
*         r2 \leq \frac{r2}{m} \cdot m + (m - 1)
*         ```
*
*     At this point, the maximum value \\( \textrm{result} \\) is \\( m-1 \\). Hence, we can generate numbers that can be at least as large as \\( r2 \\), but we must be careful to avoid overflow during addition and in the sampling rejection. Anything which overflows is larger than \\( r2 \\) and can thus be rejected.
*
* -   If \\( r1 > r2 \\), use rejection sampling to map random variates from \\( R \\) to a smaller domain (e.g., \\( {0,1,2,3,4} \rightarrow {0,1,2,3} \\)) by defining "buckets" in which multiple random variates in \\( R \\) map to a single random variate in the smaller domain. We are safe in adding 1 to \\( r2 \\); however, we need to be careful to not cause overflow when adding 1 to \\( r1 \\).
*
* @name discreteUniform
* @type {PRNG}
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {integer} pseudorandom number
*
* @example
* var v = discreteUniform( 1, 10 );
* // returns <number>
*/
var __discreteUniform_904 = _$factory_902();


// EXPORTS //

var _$discreteUniform_904 = __discreteUniform_904;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution pseudorandom numbers.
*
* @module @stdlib/random/base/discrete-uniform
*
* @example
* var discreteUniform = require( '@stdlib/random/base/discrete-uniform' );
*
* var v = discreteUniform( 1, 10 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/discrete-uniform' ).factory;
* var discreteUniform = factory( -5, 5, {
*     'seed': 297
* });
*
* var v = discreteUniform();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/discrete-uniform' ).factory;
* var discreteUniform = factory({
*     'seed': 297
* });
*
* var v = discreteUniform( -5, 5 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$discreteUniform_904 = require( './main.js' ); */;
/* removed: var _$factory_902 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$discreteUniform_904, 'factory', _$factory_902 );


// EXPORTS //

var _$discreteUniform_903 = _$discreteUniform_904;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isInteger_1072 = _$isNumber_162.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1072 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var runif = _$discreteUniform_903.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be an integer
* @throws {TypeError} `b` must be an integer
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2, 6 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1072( a, b, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isInteger_1072( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be an integer. Value: `'+a+'`.' );
	}
	if ( !__isInteger_1072( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be an integer. Value: `'+b+'`.' );
	}
	if ( a > b ) {
		throw new RangeError( 'invalid argument. Minimum support `a` must be less than or equal to maximum support `b`. Value: `['+a+','+b+']`.');
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1072( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = runif( a, b, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = runif( a, b );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1072( a, b, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1072 = __iterator_1072;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a discrete uniform distribution.
*
* @module @stdlib/random/iter/discrete-uniform
*
* @example
* var iterator = require( '@stdlib/random/iter/discrete-uniform' );
*
* var iter = iterator( -1, 2 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1072 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1071 = _$iterator_1072;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_910 = _$isPositiveNumber_178.isPrimitive;
var __isPositiveInteger_910 = _$isPositiveInteger_174.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1, 2.5 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_910( k, lambda ) {
	if ( !__isPositiveInteger_910( k ) ) {
		return new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + k + '`.' );
	}
	if ( !__isPositive_910( lambda ) ) {
		return new TypeError( 'invalid argument. Second argument must be a positive number. Value: `' + lambda + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_910 = __validate_910;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from an Erlang distribution.
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} pseudorandom number
*
* @example
* var v = erlang();
* // returns <number>
*/
function erlang( rand, k, lambda ) {
	var prod;
	var i;
	prod = 1.0;
	for ( i = 0; i < k; i++ ) {
		prod *= rand();
	}
	return -(1.0/lambda) * _$ln_561( prod );
}


// EXPORTS //

var _$erlang_906 = erlang;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_907 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPositiveInteger_380 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_910 = require( './validate.js' ); */;
/* removed: var _$erlang_906 = require( './erlang.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Erlang distributed random numbers.
*
* @param {PositiveInteger} [k] - shape parameter
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `k` must be a positive integer
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var erlang = factory( 2, 1.0 );
* var v = erlang();
* // returns <number>
*
* @example
* var erlang = factory( 2, 2.0, {
*     'seed': 297
* });
* var v = erlang();
* // returns <number>
*/
function __factory_907() {
	var lambda;
	var rand;
	var opts;
	var prng;
	var err;
	var k;

	if ( arguments.length === 0 ) {
		rand = __randu_907();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_907( opts );
		}
	} else {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		err = _$validate_910( k, lambda );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_907( opts );
			}
		} else {
			rand = __randu_907();
		}
	}
	if ( k === void 0 ) {
		prng = erlang2;
	} else {
		prng = erlang1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'erlang' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( k === void 0 ) {
			out.params = [];
		} else {
			out.params = [ k, lambda ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from an Erlang distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = erlang1();
	* // returns <number>
	*/
	function erlang1() {
		return _$erlang_906( rand, k, lambda );
	}

	/**
	* Returns a pseudorandom number drawn from an Erlang distribution.
	*
	* @private
	* @param {PositiveInteger} k - shape parameter
	* @param {PositiveNumber} lambda - rate parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = erlang2( 2, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = erlang2( NaN, 1.0 );
	* // returns NaN
	*
	* v = erlang2( 2, NaN );
	* // returns NaN
	*
	* v = erlang2( 3.14, 1.0 );
	* // returns NaN
	*
	* v = erlang2( 2, 0.0 );
	* // returns NaN
	*/
	function erlang2( k, lambda ) {
		if (
			_$isnan_370( k ) ||
			_$isnan_370( lambda ) ||
			!_$isPositiveInteger_380( k ) ||
			lambda <= 0.0
		) {
			return NaN;
		}
		return _$erlang_906( rand, k, lambda );
	}
}


// EXPORTS //

var _$factory_907 = __factory_907;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_907 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from an Erlang distribution.
*
* @name erlang
* @type {PRNG}
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} pseudorandom number
*
* @example
* var v = erlang( 2, 1.0 );
* // returns <number>
*
* @example
* var v = erlang( NaN, 1.0 );
* // returns NaN
*
* v = erlang( 2, NaN );
* // returns NaN
*
* v = erlang( 3.14, 1.0 );
* // returns NaN
*
* v = erlang( 3, 0.0 );
* // returns NaN
*/
var __erlang_909 = _$factory_907();


// EXPORTS //

var _$erlang_909 = __erlang_909;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distributed pseudorandom numbers.
*
* @module @stdlib/random/base/erlang
*
* @example
* var erlang = require( '@stdlib/random/base/erlang' );
*
* var v = erlang( 3, 2.5 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/erlang' ).factory;
*
* var erlang = factory( 8, 5.9, {
*     'seed': 297
* });
*
* var v = erlang();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$erlang_909 = require( './main.js' ); */;
/* removed: var _$factory_907 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$erlang_909, 'factory', _$factory_907 );


// EXPORTS //

var _$erlang_908 = _$erlang_909;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1074 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1074 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositiveInteger_1074 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rerlang = _$erlang_908.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda  - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `k` must be a positive integer
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1074( k, lambda, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveInteger_1074( k ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive integer. Value: `'+k+'`.' );
	}
	if ( !__isPositiveNumber_1074( lambda ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+lambda+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1074( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rerlang( k, lambda, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rerlang( k, lambda );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1074( k, lambda, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1074 = __iterator_1074;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from an Erlang distribution.
*
* @module @stdlib/random/iter/erlang
*
* @example
* var iterator = require( '@stdlib/random/iter/erlang' );
*
* var iter = iterator( 2, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1074 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1073 = _$iterator_1074;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from an exponential distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} pseudorandom number
*/
function exponential( rand, lambda ) {
	return -_$ln_561( 1.0 - rand() ) / lambda;
}


// EXPORTS //

var _$exponential_911 = exponential;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
var __isPositive_912 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_912 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$exponential_911 = require( './exponential.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating exponentially distributed random numbers.
*
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var exponential = factory( 0.5 );
* var v = exponential();
* // returns <number>
*
* @example
* var exponential = factory( 0.8, {
*     'seed': 297
* });
* var v = exponential();
* // returns ~3.735
*
* @example
* var exponential = factory();
* var v = exponential( 0.5 );
* // returns <number>
*/
function __factory_912() {
	var lambda;
	var opts;
	var rand;
	var prng;

	if ( arguments.length === 0 ) {
		rand = __randu_912();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_912( opts );
		}
	} else {
		lambda = arguments[ 0 ];
		if ( !__isPositive_912( lambda ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + lambda + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_912( opts );
			}
		} else {
			rand = __randu_912();
		}
	}
	if ( lambda === void 0 ) {
		prng = exponential2;
	} else {
		prng = exponential1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'exponential' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( lambda === void 0 ) {
			out.params = [];
		} else {
			out.params = [ lambda ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from an exponential distribution with bound parameter `lambda`.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = exponential1();
	* // returns <number>
	*/
	function exponential1() {
		return _$exponential_911( rand, lambda );
	}

	/**
	* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.
	*
	* @private
	* @param {PositiveNumber} lambda - rate parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = exponential2( 4.8 );
	* // returns <number>
	*/
	function exponential2( lambda ) {
		if (
			_$isnan_370( lambda ) ||
			lambda <= 0.0
		) {
			return NaN;
		}
		return _$exponential_911( rand, lambda );
	}
}


// EXPORTS //

var _$factory_912 = __factory_912;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_912 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.
*
* @name exponential
* @type {PRNG}
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} pseudorandom number
*
* @example
* var v = exponential( 4.8 );
* // returns <number>
*
* @example
* var v = exponential( 0.0 );
* // returns NaN
*
* @example
* var v = exponential( NaN );
* // returns NaN
*/
var __exponential_914 = _$factory_912();


// EXPORTS //

var _$exponential_914 = __exponential_914;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponentially distributed pseudorandom numbers.
*
* @module @stdlib/random/base/exponential
*
* @example
* var exponential = require( '@stdlib/random/base/exponential' );
*
* var v = exponential( 4.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/exponential' ).factory;
*
* var exponential = factory( 4.0, {
*     'seed': 297
* });
*
* var v = exponential();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$exponential_914 = require( './main.js' ); */;
/* removed: var _$factory_912 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$exponential_914, 'factory', _$factory_912 );


// EXPORTS //

var _$exponential_913 = _$exponential_914;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositive_1076 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1076 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rexp = _$exponential_913.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from an exponential distribution.
*
* @param {PositiveNumber} lambda - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1076( lambda, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositive_1076( lambda ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+lambda+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1076( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rexp( lambda, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rexp( lambda );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1076( lambda, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1076 = __iterator_1076;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from an exponential distribution.
*
* @module @stdlib/random/iter/exponential
*
* @example
* var iterator = require( '@stdlib/random/iter/exponential' );
*
* var iter = iterator( 1.5 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1076 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1075 = _$iterator_1076;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_919 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} d1 - degrees of freedom
* @param {PositiveNumber} d2 - degrees of freedom
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_919( d1, d2 ) {
	if ( !__isPositive_919( d1 ) ) {
		return new TypeError( 'invalid argument. `d1` must be a positive number. Value: `' + d1 + '`.' );
	}
	if ( !__isPositive_919( d2 ) ) {
		return new TypeError( 'invalid argument. `d2` must be a positive number. Value: `' + d2 + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_919 = __validate_919;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.
*
* @private
* @param {PRNG} rchisq - PRNG for chi-square distributed numbers
* @param {PositiveNumber} d1 - degrees of freedom
* @param {PositiveNumber} d2 - degrees of freedom
* @returns {NonNegativeNumber} pseudorandom number
*/
function __f_915( rchisq, d1, d2 ) {
	var x1 = rchisq( d1 ) / d1;
	var x2 = rchisq( d2 ) / d2;
	return x1 / x2;
}


// EXPORTS //

var _$f_915 = __f_915;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __chisquare_916 = _$chisquare_894.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_919 = require( './validate.js' ); */;
/* removed: var _$f_915 = require( './f.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating F distributed random numbers.
*
* @param {PositiveNumber} [d1] - degrees of freedom
* @param {PositiveNumber} [d2] - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var f = factory( 1.0, 2.0 );
* var v = f();
* // returns <number>
*
* @example
* var f = factory( 0.5, 3.0, {
*     'seed': 297
* });
* var v = f();
* // returns <number>
*/
function __factory_916() {
	var rchisq;
	var opts;
	var rand;
	var prng;
	var err;
	var d1;
	var d2;

	if ( arguments.length === 0 ) {
		rchisq = __chisquare_916();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rchisq = __chisquare_916({
				'prng': opts.prng
			});
		} else {
			rchisq = __chisquare_916( opts );
		}
	} else {
		d1 = arguments[ 0 ];
		d2 = arguments[ 1 ];
		err = _$validate_919( d1, d2 );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rchisq = __chisquare_916({
					'prng': opts.prng
				});
			} else {
				rchisq = __chisquare_916( opts );
			}
		} else {
			rchisq = __chisquare_916();
		}
	}
	if ( d1 === void 0 ) {
		prng = f2;
	} else {
		prng = f1;
	}
	rand = rchisq.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'f' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( d1 === void 0 ) {
			out.params = [];
		} else {
			out.params = [ d1, d2 ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number from an F distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = f1();
	* // returns <number>
	*/
	function f1() {
		return _$f_915( rchisq, d1, d2 );
	}

	/**
	* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.
	*
	* @private
	* @param {PositiveNumber} d1 - degrees of freedom
	* @param {PositiveNumber} d2 - degrees of freedom
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = f2( 3.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = f2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = f2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = f2( NaN, NaN );
	* // returns NaN
	*/
	function f2( d1, d2 ) {
		if (
			_$isnan_370( d1 ) ||
			_$isnan_370( d2 ) ||
			d1 <= 0.0 ||
			d2 <= 0.0
		) {
			return NaN;
		}
		return _$f_915( rchisq, d1, d2 );
	}
}


// EXPORTS //

var _$factory_916 = __factory_916;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_916 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.
*
* @name f
* @type {PRNG}
* @param {PositiveNumber} d1 - degrees of freedom
* @param {PositiveNumber} d2 - degrees of freedom
* @returns {NonNegativeNumber} pseudorandom number
*
* @example
* var v = f( 3.0, 2.0 );
* // returns <number>
*
* @example
* var r = f( -2.0, 5.0 );
* // returns NaN
*/
var __f_918 = _$factory_916();


// EXPORTS //

var _$f_918 = __f_918;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distributed pseudorandom numbers.
*
* @module @stdlib/random/base/f
*
* @example
* var f = require( '@stdlib/random/base/f' );
*
* var v = f( 5.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/f' ).factory;
*
* var f = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = f();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$f_918 = require( './main.js' ); */;
/* removed: var _$factory_916 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$f_918, 'factory', _$factory_916 );


// EXPORTS //

var _$f_917 = _$f_918;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1078 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1078 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rf = _$f_917.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from an F distribution.
*
* @param {PositiveNumber} d1 - degrees of freedom
* @param {PositiveNumber} d2 - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1078( d1, d2, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1078( d1 ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+d1+'`.' );
	}
	if ( !__isPositiveNumber_1078( d2 ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+d2+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1078( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rf( d1, d2, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rf( d1, d2 );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1078( d1, d2, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1078 = __iterator_1078;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from an F distribution.
*
* @module @stdlib/random/iter/f
*
* @example
* var iterator = require( '@stdlib/random/iter/f' );
*
* var iter = iterator( 2.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1078 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1077 = _$iterator_1078;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveNumber_924 = _$isPositiveNumber_178.isPrimitive;
var __isNumber_924 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0, 1.3 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_924( alpha, s, m ) {
	if ( !__isPositiveNumber_924( alpha ) || _$isnan_150( alpha ) ) {
		return new TypeError( 'invalid argument. First argument must be a positive number primitive and not `NaN`. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_924( s ) || _$isnan_150( s ) ) {
		return new TypeError( 'invalid argument. Second argument must be a positive number primitive and not `NaN`. Value: `'+s+'`.' );
	}
	if ( !__isNumber_924( m ) || _$isnan_150( m ) ) {
		return new TypeError( 'invalid argument. Third argument must be a number primitive and not `NaN`. Value: `'+m+'`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_924 = __validate_924;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} pseudorandom number
*/
function frechet( rand, alpha, s, m ) {
	return m + ( s * ( _$pow_579( -_$ln_561( rand() ), -1.0/alpha ) ) );
}


// EXPORTS //

var _$frechet_921 = frechet;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_920 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_924 = require( './validate.js' ); */;
/* removed: var _$frechet_921 = require( './frechet.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers drawn from a Fréchet distribution.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [s] - scale parameter
* @param {number} [m] - location parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `s` must be a positive number
* @throws {TypeError} `m` must be a number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var frechet = factory( 1.0, 1.0, 0.8 );
* var v = frechet();
* // returns <number>
*
* @example
* var frechet = factory( 1.0, 1.0, -2.0, {
*     'seed': 297
* });
* var v = frechet();
* // returns <number>
*/
function __factory_920() {
	var alpha;
	var opts;
	var rand;
	var prng;
	var err;
	var s;
	var m;

	if ( arguments.length === 0 ) {
		rand = __randu_920();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_920( opts );
		}
	} else {
		alpha = arguments[ 0 ];
		s = arguments[ 1 ];
		m = arguments[ 2 ];
		err = _$validate_924( alpha, s, m );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 3 ) {
			opts = arguments[ 3 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_920( opts );
			}
		} else {
			rand = __randu_920();
		}
	}
	if ( alpha === void 0 ) {
		prng = frechet2;
	} else {
		prng = frechet1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'frechet' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( alpha === void 0 ) {
			out.params = [];
		} else {
			out.params = [ alpha, s, m ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Fréchet distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = frechet1();
	* // returns <number>
	*/
	function frechet1() {
		return _$frechet_921( rand, alpha, s, m );
	}

	/**
	* Returns a pseudorandom number drawn from a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} s - scale parameter
	* @param {number} m - location parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = frechet2( 2.0, 1.0, 0.5 );
	* // returns <number>
	*
	* @example
	* var v = frechet2( 1.0, 1.0, 0.5 );
	* // returns NaN
	*
	* @example
	* var v = frechet2( 1.0, 2.0, NaN );
	* // returns NaN
	*/
	function frechet2( alpha, s, m ) {
		if (
			_$isnan_370( alpha ) ||
			_$isnan_370( s ) ||
			_$isnan_370( m ) ||
			alpha <= 0.0 ||
			s <= 0.0
		) {
			return NaN;
		}
		return _$frechet_921( rand, alpha, s, m );
	}
}


// EXPORTS //

var _$factory_920 = __factory_920;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_920 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @name frechet
* @type {PRNG}
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} pseudorandom number
*
* @example
* var v = frechet( 1.0, 1.0, 0.5 );
* // returns <number>
*/
var __frechet_923 = _$factory_920();


// EXPORTS //

var _$frechet_923 = __frechet_923;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distributed pseudorandom numbers.
*
* @module @stdlib/random/base/frechet
*
* @example
* var frechet = require( '@stdlib/random/base/frechet' );
*
* var v = frechet( 10.0, 10.0, 7.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/frechet' ).factory;
*
* var frechet = factory( 5.0, 5.0, 3.0, {
*     'seed': 643361677
* });
*
* var v = frechet();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/frechet' ).factory;
*
* var frechet = factory({
*     'seed': 643361677
* });
*
* var v = frechet( 5.0, 5.0, 3.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$frechet_923 = require( './main.js' ); */;
/* removed: var _$factory_920 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$frechet_923, 'factory', _$factory_920 );


// EXPORTS //

var _$frechet_922 = _$frechet_923;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1080 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNumber_1080 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __isNonNegativeInteger_1080 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rfrechet = _$frechet_922.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Fréchet distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s  - rate parameter
* @param {number} m - location parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `s` must be a positive number
* @throws {TypeError} `m` must be a number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1080( alpha, s, m, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1080( alpha ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_1080( s ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+s+'`.' );
	}
	if ( !__isNumber_1080( m ) || _$isnan_370( m ) ) {
		throw new TypeError( 'invalid argument. Third argument must be a number primitive. Value: `'+m+'`.' );
	}
	if ( arguments.length > 3 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1080( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rfrechet( alpha, s, m, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rfrechet( alpha, s, m );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1080( alpha, s, m, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1080 = __iterator_1080;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Fréchet distribution.
*
* @module @stdlib/random/iter/frechet
*
* @example
* var iterator = require( '@stdlib/random/iter/frechet' );
*
* var iter = iterator( 2.0, 5.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1080 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1079 = _$iterator_1080;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1082 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1082 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rgamma = _$gamma_927.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta  - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1082( alpha, beta, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1082( alpha ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_1082( beta ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1082( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rgamma( alpha, beta, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rgamma( alpha, beta );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1082( alpha, beta, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1082 = __iterator_1082;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a gamma distribution.
*
* @module @stdlib/random/iter/gamma
*
* @example
* var iterator = require( '@stdlib/random/iter/gamma' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1082 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1081 = _$iterator_1082;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a geometric distribution.
*
* ## Proof
*
* Consider
*
* ```tex
* N = \left \lfloor \ln (U) / \ln (1-p) \right \rfloor
* ```
*
* where \\( U \\) is uniform on the interval \\((0,1)\\). Accordingly, \\(N\\) must be a nonnegative integer, and, for every \\( n \geq 0\\), the event \\(A_n = \left \{ N = n \right \}\\) is
*
* ```tex
* A_n = \left \{(n+1) \ln (1-p) < \ln (U) \leq n \ln (1-p) \right \}
* ```
*
* where \\(\ln (1-p) < 0\\). Thus,
*
* ```tex
* A_n = \left \{(1-p)^{n+1} < U \leq (1-p)^n \right \}
* ```
*
* For every \\(u < v\\) on the interval \\((0,1)\\),
*
* ```tex
* P\left \[u < U \leq v\right \] = v - u
* ```
*
* Hence,
*
* ```tex
* P\left \[N = n \right \] = P\left \[A_n\right \] = (1-p)^n - (1-p)^{n+1} = (1-p)^n(1-(1-p)) = p(1-p)^n
* ```
*
* which proves that \\(N\\) is a geometric random variable.
*
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*/
function geometric( rand, p ) {
	var u = rand();
	if ( u === 0.0 ) {
		// Drawing random variates from a PRNG (with period > 1) is effectively sampling without replacement. Thus, should not be possible to draw `0` twice in a row.
		u = rand();
	}
	return _$floor_523( _$ln_561( u ) / _$ln_561( 1.0-p ) );
}


// EXPORTS //

var _$geometric_931 = geometric;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isProbability_930 = _$isProbability_182.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_930 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$geometric_931 = require( './geometric.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating geometric distributed random numbers.
*
* @param {Probability} [p] - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `p` must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var geometric = factory( 0.5 );
* var v = geometric();
* // returns <number>
*
* @example
* var geometric = factory( 0.8, {
*     'seed': 297
* });
* var v = geometric();
* // returns <number>
*
* @example
* var geometric = factory();
* var v = geometric( 0.5 );
* // returns <number>
*/
function __factory_930() {
	var opts;
	var rand;
	var prng;
	var p;

	if ( arguments.length === 0 ) {
		rand = __randu_930();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_930( opts );
		}
	} else {
		p = arguments[ 0 ];
		if ( !__isProbability_930( p ) ) {
			throw new TypeError( 'invalid argument. First argument must be a probability. Value: `' + p + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_930( opts );
			}
		} else {
			rand = __randu_930();
		}
	}
	if ( p === void 0 ) {
		prng = geometric2;
	} else {
		prng = geometric1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'geometric' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( p === void 0 ) {
			out.params = [];
		} else {
			out.params = [ p ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a geometric distribution with bound parameter `p`.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = geometric1();
	* // returns <number>
	*/
	function geometric1() {
		return _$geometric_931( rand, p );
	}

	/**
	* Returns a pseudorandom number drawn from a geometric distribution with parameter `p`.
	*
	* @private
	* @param {Probability} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = geometric2( 0.5 );
	* // returns <number>
	*/
	function geometric2( p ) {
		if (
			_$isnan_370( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		return _$geometric_931( rand, p );
	}
}


// EXPORTS //

var _$factory_930 = __factory_930;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_930 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom random number drawn from a geometric distribution with parameter `p`.
*
* @name geometric
* @type {PRNG}
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var v = geometric( 0.5 );
* // returns <number>
*
* @example
* var v = geometric( 3.14 );
* // returns NaN
*
* @example
* var v = geometric( -1.0 );
* // returns NaN
*
* @example
* var v = geometric( NaN );
* // returns NaN
*/
var __geometric_933 = _$factory_930();


// EXPORTS //

var _$geometric_933 = __geometric_933;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distributed pseudorandom numbers.
*
* @module @stdlib/random/base/geometric
*
* @example
* var geometric = require( '@stdlib/random/base/geometric' );
*
* var v = geometric( 0.5 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/geometric' ).factory;
*
* var geometric = factory( 0.3, {
*     'seed': 297
* });
*
* var v = geometric();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/geometric' ).factory;
*
* var geometric = factory({
*     'seed': 297
* });
*
* var v = geometric( 0.5 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$geometric_933 = require( './main.js' ); */;
/* removed: var _$factory_930 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$geometric_933, 'factory', _$factory_930 );


// EXPORTS //

var _$geometric_932 = _$geometric_933;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isProbability_1084 = _$isProbability_182.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1084 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rgeom = _$geometric_932.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a geometric distribution.
*
* @param {Probability} p - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1084( p, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isProbability_1084( p ) ) {
		throw new TypeError( 'invalid argument. First argument must be a probability. Value: `'+p+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1084( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rgeom( p, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rgeom( p );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1084( p, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1084 = __iterator_1084;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a geometric distribution.
*
* @module @stdlib/random/iter/geometric
*
* @example
* var iterator = require( '@stdlib/random/iter/geometric' );
*
* var iter = iterator( 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1084 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1083 = _$iterator_1084;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_938 = _$isNumber_162.isPrimitive;
var __isPositive_938 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - mean
* @param {PositiveNumber} beta - shape parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_938( mu, beta ) {
	if ( !__isNumber_938( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_938( beta ) ) {
		return new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_938 = __validate_938;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a Gumbel distribution.
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {number} pseudorandom number
*/
function gumbel( rand, mu, beta ) {
	return mu - ( beta*_$ln_561( -_$ln_561( rand() ) ) );
}


// EXPORTS //

var _$gumbel_935 = gumbel;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_934 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_938 = require( './validate.js' ); */;
/* removed: var _$gumbel_935 = require( './gumbel.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a Gumbel distribution.
*
* @param {number} [mu] - mean
* @param {PositiveNumber} [beta] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number primitive
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var gumbel = factory( 0.0, 1.0 );
* var v = gumbel();
* // returns <number>
*
* @example
* var gumbel = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = gumbel();
* // returns <number>
*/
function __factory_934() {
	var beta;
	var opts;
	var rand;
	var prng;
	var err;
	var mu;

	if ( arguments.length === 0 ) {
		rand = __randu_934();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_934( opts );
		}
	} else {
		mu = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = _$validate_938( mu, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_934( opts );
			}
		} else {
			rand = __randu_934();
		}
	}
	if ( mu === void 0 ) {
		prng = gumbel2;
	} else {
		prng = gumbel1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'gumbel' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, beta ];
		}
		return out;
	}

	/**
	* Returns pseudorandom number drawn from a Gumbel distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = gumbel1();
	* // returns <number>
	*/
	function gumbel1() {
		return _$gumbel_935( rand, mu, beta );
	}

	/**
	* Returns pseudorandom number drawn from a Gumbel distribution.
	*
	* @private
	* @param {number} mu - mean
	* @param {PositiveNumber} beta - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = gumbel2( 0.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = gumbel2( 0.0, -1.0 );
	* // returns NaN
	*/
	function gumbel2( mu, beta ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( beta ) ||
			beta <= 0.0
		) {
			return NaN;
		}
		return _$gumbel_935( rand, mu, beta );
	}
}


// EXPORTS //

var _$factory_934 = __factory_934;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_934 = require( './factory.js' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a Gumbel distribution.
*
* @name gumbel
* @type {PRNG}
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = gumbel( 0.0, 2.0 );
* // returns <number>
*
* @example
* var v = gumbel( 0.0, -1.0 );
* // returns NaN
*/
var __gumbel_937 = _$factory_934();


// EXPORTS //

var _$gumbel_937 = __gumbel_937;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution pseudorandom numbers.
*
* @module @stdlib/random/base/gumbel
*
* @example
* var gumbel = require( '@stdlib/random/base/gumbel' );
*
* var v = gumbel( 0.5, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/gumbel' ).factory;
*
* var gumbel = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = gumbel();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/gumbel' ).factory;
*
* var gumbel = factory({
*     'seed': 297
* });
*
* var v = gumbel( 2.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$gumbel_937 = require( './main.js' ); */;
/* removed: var _$factory_934 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$gumbel_937, 'factory', _$factory_934 );


// EXPORTS //

var _$gumbel_936 = _$gumbel_937;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1086 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1086 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1086 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rgumbel = _$gumbel_936.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Gumbel distribution.
*
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a number
* @throws {TypeError} second argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1086( mu, beta, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1086( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1086( beta ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1086( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rgumbel( mu, beta, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rgumbel( mu, beta );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1086( mu, beta, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1086 = __iterator_1086;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Gumbel distribution.
*
* @module @stdlib/random/iter/gumbel
*
* @example
* var iterator = require( '@stdlib/random/iter/gumbel' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1086 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1085 = _$iterator_1086;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a nonnegative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -10.0 );
* // returns false
*/
function __isNonNegativeInteger_377( x ) {
	return (_$floor_523(x) === x && x >= 0);
}


// EXPORTS //

var _$isNonNegativeInteger_377 = __isNonNegativeInteger_377;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a nonnegative integer.
*
* @module @stdlib/math/base/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNonNegativeInteger_377 = require( './is_nonnegative_integer.js' ); */;


// EXPORTS //

var _$isNonNegativeInteger_376 = _$isNonNegativeInteger_377;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNonNegativeInteger_944 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1, 2, 3 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_944( N, K, n ) {
	if ( !__isNonNegativeInteger_944( N ) ) {
		return new TypeError( 'invalid argument. `N` must be a nonnegative integer. Value: `' + N + '`.' );
	}
	if ( !__isNonNegativeInteger_944( K ) ) {
		return new TypeError( 'invalid argument. `K` must be a nonnegative integer. Value: `' + K + '`.' );
	}
	if ( !__isNonNegativeInteger_944( n ) ) {
		return new TypeError( 'invalid argument. `n` must be a nonnegative integer. Value: `' + n + '`.' );
	}
	if ( n > N ) {
		return new RangeError( 'invalid argument. `n` must be less than or equal to `N`. Value: `' + n + '`.' );
	}
	if ( K > N ) {
		return new RangeError( 'invalid argument. `K` must be less than or equal to `N`. Value: `' + K + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_944 = __validate_944;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factorial_519 = require( '@stdlib/math/base/special/factorial' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a hypergeometric distribution using the HIN algorithm, which is based on an inverse transformation method.
*
* ## References
*
* -   Fishman, George S. 1973. _Concepts and methods in discrete event digital simulation_. A Wiley-Interscience Publication. New York, NY, USA: Wiley.
* -   Kachitvichyanukul, Voratas., and Burce Schmeiser. 1985. "Computer generation of hypergeometric random variates." _Journal of Statistical Computation and Simulation_ 22 (2): 127–45. doi:[10.1080/00949658508810839][@kachitvichyanukul:1985].
*
* [@kachitvichyanukul:1985]: http://dx.doi.org/10.1080/00949658508810839
*
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {NonNegativeInteger} n1 - number of successes in population
* @param {NonNegativeInteger} n2 - number of failures in population
* @param {NonNegativeInteger} k - number of draws
* @returns {NonNegativeInteger} pseudorandom number
*/
function hin( rand, n1, n2, k ) {
	var p;
	var u;
	var x;
	if ( k < n2 ) {
		p = ( _$factorial_519( n2 ) * _$factorial_519( n1 + n2 - k ) ) /
			( _$factorial_519( n1 + n2 ) * _$factorial_519( n2 - k ) );
		x = 0;
	} else {
		p = ( _$factorial_519( n1 ) * _$factorial_519( k ) ) /
			( _$factorial_519( k - n2 ) * _$factorial_519( n1 + n2 ) );
		x = k - n2;
	}
	u = rand();
	while ( u > p ) {
		u -= p;
		p *= ( n1 - x ) * ( k - x ) / ( ( x + 1 ) * ( n2 - k + 1 + x ) );
		x += 1;
	}
	return x;
}


// EXPORTS //

var _$hin_940 = hin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hin_940 = require( './hin.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a hypergeometric distribution.
*
* ## References
*
* -   Kachitvichyanukul, Voratas., and Burce Schmeiser. 1985. "Computer generation of hypergeometric random variates." _Journal of Statistical Computation and Simulation_ 22 (2): 127–45. doi:[10.1080/00949658508810839][@kachitvichyanukul:1985].
*
* [@kachitvichyanukul:1985]: http://dx.doi.org/10.1080/00949658508810839
*
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} pseudorandom number
*/
function hypergeometric( rand, N, K, n ) {
	var n1;
	var n2;
	var k;
	var x;

	if ( n > N/2 ) {
		k = N - n;
		if ( 2*K <= N ) {
			n1 = K;
			n2 = N - K;
			x = _$hin_940( rand, n1, n2, k );
			return K - x;
		}
		n2 = K;
		n1 = N - K;
		x = _$hin_940( rand, n1, n2, k );
		return n - N + K + x;
	}
	k = n;
	if ( 2*K <= N ) {
		n1 = K;
		n2 = N - K;
		x = _$hin_940( rand, n1, n2, k );
		return x;
	}
	n1 = N - K;
	n2 = K;
	x = _$hin_940( rand, n1, n2, k );
	return n - x;
}


// EXPORTS //

var _$hypergeometric_941 = hypergeometric;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_939 = _$mt19937_991.factory;
/* removed: var _$isNonNegativeInteger_376 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_944 = require( './validate.js' ); */;
/* removed: var _$hypergeometric_941 = require( './hypergeometric.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating hypergeometric distributed random numbers.
*
* @param {NonNegativeInteger} [N] - population size
* @param {NonNegativeInteger} [K] - subpopulation size
* @param {NonNegativeInteger} [n] - number of draws
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `N` must be a nonnegative integer
* @throws {TypeError} `K` must be a nonnegative integer
* @throws {TypeError} `n` must be a nonnegative integer
* @throws {RangeError} `n` must be less than or equal to `N`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var hypergeometric = factory( 5, 3, 2 );
* var v = hypergeometric();
* // returns <number>
*
* @example
* var hypergeometric = factory( 10, 10, 10, {
*     'seed': 297
* });
* var v = hypergeometric();
* // returns <number>
*
* @example
* var hypergeometric = factory();
* var v = hypergeometric( 5, 3, 2 );
* // returns <number>
*/
function __factory_939() {
	var opts;
	var rand;
	var prng;
	var err;
	var N;
	var K;
	var n;

	if ( arguments.length === 0 ) {
		rand = __randu_939();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_939( opts );
		}
	} else {
		N = arguments[ 0 ];
		K = arguments[ 1 ];
		n = arguments[ 2 ];
		err = _$validate_944( N, K, n );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 3 ) {
			opts = arguments[ 3 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_939( opts );
			}
		} else {
			rand = __randu_939();
		}
	}
	if ( N === void 0 ) {
		prng = hypergeometric2;
	} else {
		prng = hypergeometric1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'hypergeometric' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( N === void 0 ) {
			out.params = [];
		} else {
			out.params = [ N, K, n ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a hypergeometric distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = hypergeometric1();
	* // returns <number>
	*/
	function hypergeometric1() {
		return _$hypergeometric_941( rand, N, K, n );
	}

	/**
	* Returns a pseudorandom number drawn from a hypergeometric distribution.
	*
	* @private
	* @param {NonNegativeInteger} N - population size
	* @param {NonNegativeInteger} K - subpopulation size
	* @param {NonNegativeInteger} n - number of draws
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = hypergeometric2( 5, 3, 2 );
	* // returns <number>
	*
	* @example
	* var v = hypergeometric2( NaN, NaN, NaN );
	* // returns NaN
	*
	* @example
	* var v = hypergeometric2( 5.21, 3.14, 2.76 );
	* // returns NaN
	*/
	function hypergeometric2( N, K, n ) {
		if (
			N === _$FLOAT64_PINF_238 ||
			K === _$FLOAT64_PINF_238 ||
			!_$isNonNegativeInteger_376( N ) ||
			!_$isNonNegativeInteger_376( K ) ||
			!_$isNonNegativeInteger_376( n ) ||
			n > N
		) {
			return NaN;
		}
		return _$hypergeometric_941( rand, N, K, n );
	}
}


// EXPORTS //

var _$factory_939 = __factory_939;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_939 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a hypergeometric distribution.
*
* @name hypergeometric
* @type {PRNG}
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var v = hypergeometric( 5, 3, 2 );
* // returns <number>
*
* @example
* var v = hypergeometric( -5, 3, 2 );
* // returns NaN
*
* @example
* var v = hypergeometric( 5, 3.14, 2 );
* // returns NaN
*
* @example
* var v = hypergeometric( 5, 3, 1.5 );
* // returns NaN
*
* @example
* var v = hypergeometric( NaN, NaN, NaN );
* // returns NaN
*/
var __hypergeometric_943 = _$factory_939();


// EXPORTS //

var _$hypergeometric_943 = __hypergeometric_943;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distributed pseudorandom numbers.
*
* @module @stdlib/random/base/hypergeometric
*
* @example
* var hypergeometric = require( '@stdlib/random/base/hypergeometric' );
*
* var v = hypergeometric( 10, 10, 10 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;
* var hypergeometric = factory( 5, 3, 2, {
*     'seed': 297
* });
*
* var v = hypergeometric();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;
* var hypergeometric = factory();
*
* var v = hypergeometric( 10, 2, 2 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;
* var hypergeometric = factory({
*     'seed': 297
* });
*
* var v = hypergeometric( 5, 3, 2 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$hypergeometric_943 = require( './main.js' ); */;
/* removed: var _$factory_939 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$hypergeometric_943, 'factory', _$factory_939 );


// EXPORTS //

var _$hypergeometric_942 = _$hypergeometric_943;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1088 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rhypergeom = _$hypergeometric_942.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a nonnegative integer
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {TypeError} third argument must be a nonnegative integer
* @throws {RangeError} `n` must be less than or equal to `N`
* @throws {RangeError} `K` must be less than or equal to `N`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 10, 5, 3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1088( N, K, n, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNonNegativeInteger_1088( N ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `'+N+'`.' );
	}
	if ( !__isNonNegativeInteger_1088( K ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `'+K+'`.' );
	}
	if ( !__isNonNegativeInteger_1088( n ) ) {
		throw new TypeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `'+n+'`.' );
	}
	if ( n > N ) {
		throw new RangeError( 'invalid argument. `n` must be less than or equal to `N`. Value: `' + n + '`.' );
	}
	if ( K > N ) {
		throw new RangeError( 'invalid argument. `K` must be less than or equal to `N`. Value: `' + K + '`.' );
	}
	if ( arguments.length > 3 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1088( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rhypergeom( N, K, n, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rhypergeom( N, K, n );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1088( N, K, n, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1088 = __iterator_1088;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a hypergeometric distribution.
*
* @module @stdlib/random/iter/hypergeometric
*
* @example
* var iterator = require( '@stdlib/random/iter/hypergeometric' );
*
* var iter = iterator( 10, 5, 6 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1088 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1087 = _$iterator_1088;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1090 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __rnorm_1090 = _$randn_948.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.
*
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1090( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1090( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __rnorm_1090( opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __rnorm_1090();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1090( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1090 = __iterator_1090;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.
*
* @module @stdlib/random/iter/improved-ziggurat
*
* @example
* var iterator = require( '@stdlib/random/iter/improved-ziggurat' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1090 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1089 = _$iterator_1090;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_955 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_955( alpha, beta ) {
	if ( !__isPositive_955( alpha ) ) {
		return new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );
	}
	if ( !__isPositive_955( beta ) ) {
		return new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_955 = __validate_955;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __gamma_952 = _$gamma_927.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_955 = require( './validate.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating inverse gamma distributed random numbers.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var invgamma = factory( 2.0, 1.0 );
* var v = invgamma();
* // returns <number>
*
* @example
* var invgamma = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = invgamma();
* // returns <number>
*/
function __factory_952() {
	var rgamma;
	var alpha;
	var beta;
	var opts;
	var rand;
	var prng;
	var err;

	if ( arguments.length === 0 ) {
		rgamma = __gamma_952();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rgamma = __gamma_952({
				'prng': opts.prng
			});
		} else {
			rgamma = __gamma_952( opts );
		}
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = _$validate_955( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rgamma = __gamma_952( alpha, beta, {
					'prng': opts.prng
				});
			} else {
				rgamma = __gamma_952( alpha, beta, opts );
			}
		} else {
			rgamma = __gamma_952( alpha, beta );
		}
	}
	if ( alpha === void 0 ) {
		prng = invgamma2;
	} else {
		prng = invgamma1;
	}
	rand = rgamma.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'invgamma' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( alpha === void 0 ) {
			out.params = [];
		} else {
			out.params = [ alpha, beta ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from an inverse gamma distribution.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = invgamma1();
	* // returns <number>
	*/
	function invgamma1() {
		return 1.0 / rgamma();
	}

	/**
	* Returns a pseudorandom number drawn from an inverse gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = invgamma2( 2.0, 1.0 );
	* // returns <number>
	*/
	function invgamma2( alpha, beta ) {
		if (
			_$isnan_370( alpha ) ||
			_$isnan_370( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		return 1.0 / rgamma( alpha, beta );
	}
}


// EXPORTS //

var _$factory_952 = __factory_952;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_952 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a random number drawn from an inverse gamma distribution.
*
* ## Method
*
* When
*
* ```tex
* X \sim \operatorname{Gamma}( \alpha, \beta )
* ```
*
* then
*
* ```tex
* \frac{1}{X} \sim \operatorname{InvGamma}\left( \alpha, \tfrac{1}{beta} \right)
* ```
*
* Hence, to generate a draw from an inverse gamma distribution with parameters \\( \alpha \\) and \\( \beta \\), sample `X` from a \\( \operatorname{Gamma}\left( \alpha, \tfrac{1}{\beta} \right) \\) distribution and return `1/X`.
*
*
* @name invgamma
* @type {PRNG}
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = invgamma( 2.0, 1.0 );
* // returns <number>
*
* @example
* var v = invgamma( -2.0, 5.0 );
* // returns NaN
*/
var invgamma = _$factory_952();


// EXPORTS //

var _$invgamma_954 = invgamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distributed pseudorandom numbers.
*
* @module @stdlib/random/base/invgamma
*
* @example
* var invgamma = require( '@stdlib/random/base/invgamma' );
*
* var v = invgamma( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/invgamma' ).factory;
* var invgamma = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = invgamma();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/invgamma' ).factory;
* var invgamma = factory({
*     'seed': 297
* });
*
* var v = invgamma( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$invgamma_954 = require( './main.js' ); */;
/* removed: var _$factory_952 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$invgamma_954, 'factory', _$factory_952 );


// EXPORTS //

var _$invgamma_953 = _$invgamma_954;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1092 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1092 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rinvgamma = _$invgamma_953.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta  - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1092( alpha, beta, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1092( alpha ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_1092( beta ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1092( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rinvgamma( alpha, beta, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rinvgamma( alpha, beta );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1092( alpha, beta, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1092 = __iterator_1092;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from an inverse gamma distribution.
*
* @module @stdlib/random/iter/invgamma
*
* @example
* var iterator = require( '@stdlib/random/iter/invgamma' );
*
* var iter = iterator( 2.0, 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1092 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1091 = _$iterator_1092;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_960 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_960( a, b ) {
	if ( !__isPositive_960( a ) ) {
		return new TypeError( 'invalid argument. `a` must be a positive number. Value: `' + a + '`.' );
	}
	if ( !__isPositive_960( b ) ) {
		return new TypeError( 'invalid argument. `b` must be a positive number. Value: `' + b + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_960 = __validate_960;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a random number drawn from Kumaraswamy's double bounded distribution.
*
* @private
* @param {PRNG} rand - pseudorandom number generator for uniformly distributed numbers
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Probability} pseudorandom number
*/
function __sample_958( rand, a, b ) {
	var u = rand();
	return _$pow_579( 1.0 - _$pow_579( 1.0-u, 1.0/b ), 1.0/a );
}


// EXPORTS //

var _$sample_958 = __sample_958;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_956 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_960 = require( './validate.js' ); */;
/* removed: var _$sample_958 = require( './kumaraswamy.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Kumaraswamy's double bounded distributed random numbers.
*
* @param {PositiveNumber} [a] - first shape parameter
* @param {PositiveNumber} [b] - second shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be a positive number
* @throws {TypeError} `b` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var kumaraswamy = factory( 2.0, 1.0 );
* var v = kumaraswamy();
* // returns <number>
*
* @example
* var kumaraswamy = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = kumaraswamy();
* // returns <number>
*/
function __factory_956() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = __randu_956();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_956( opts );
		}
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = _$validate_960( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_956( opts );
			}
		} else {
			rand = __randu_956();
		}
	}
	if ( a === void 0 ) {
		prng = kumaraswamy2;
	} else {
		prng = kumaraswamy1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'kumaraswamy' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( a === void 0 ) {
			out.params = [];
		} else {
			out.params = [ a, b ];
		}
		return out;
	}

	/**
	* Returns a random number drawn from a Kumaraswamy's double bounded distribution with bound parameter values.
	*
	* @private
	* @returns {Probability} pseudorandom number
	*
	* @example
	* var v = beta1();
	* // returns <number>
	*/
	function kumaraswamy1() {
		return _$sample_958( rand, a, b );
	}

	/**
	* Returns a random number drawn from a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {PositiveNumber} a - first shape parameter
	* @param {PositiveNumber} b - second shape parameter
	* @returns {Probability} pseudorandom number
	*
	* @example
	* var v = kumaraswamy2( 2.0, 3.0 );
	* // returns <number>
	*/
	function kumaraswamy2( a, b ) {
		if (
			_$isnan_370( a ) ||
			_$isnan_370( b ) ||
			a <= 0.0 ||
			b <= 0.0
		) {
			return NaN;
		}
		return _$sample_958( rand, a, b );
	}
}


// EXPORTS //

var _$factory_956 = __factory_956;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_956 = require( './factory.js' ); */;


// MAIN //

/**
* Generates a Kumaraswamy's double bounded distributed random number.
*
* @name kumaraswamy
* @type {PRNG}
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Probability} pseudorandom number
*
* @example
* var r = kumaraswamy( 2.0, 5.0 );
* // returns <number>
*
* @example
* var r = kumaraswamy( -2.0, 5.0 );
* // returns NaN
*/
var kumaraswamy = _$factory_956();


// EXPORTS //

var _$kumaraswamy_959 = kumaraswamy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distributed pseudorandom numbers.
*
* @module @stdlib/random/base/kumaraswamy
*
* @example
* var kumaraswamy = require( '@stdlib/random/base/kumaraswamy' );
*
* var v = kumaraswamy( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/kumaraswamy' ).factory;
*
* var kumaraswamy = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = kumaraswamy();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$kumaraswamy_959 = require( './main.js' ); */;
/* removed: var _$factory_956 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$kumaraswamy_959, 'factory', _$factory_956 );


// EXPORTS //

var _$kumaraswamy_957 = _$kumaraswamy_959;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1094 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1094 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rkumaraswamy = _$kumaraswamy_957.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b  - second shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be a positive number
* @throws {TypeError} `b` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1094( a, b, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1094( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+a+'`.' );
	}
	if ( !__isPositiveNumber_1094( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+b+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1094( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rkumaraswamy( a, b, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rkumaraswamy( a, b );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1094( a, b, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1094 = __iterator_1094;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/random/iter/kumaraswamy
*
* @example
* var iterator = require( '@stdlib/random/iter/kumaraswamy' );
*
* var iter = iterator( 2.0, 1.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1094 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1093 = _$iterator_1094;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_965 = _$isNumber_162.isPrimitive;
var __isPositive_965 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - mean
* @param {PositiveNumber} b - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_965( mu, b ) {
	if ( !__isNumber_965( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_965( b ) ) {
		return new TypeError( 'invalid argument. `b` must be a positive number. Value: `' + b + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_965 = __validate_965;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$signum_613 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {number} mu - mean
* @param {PositiveNumber} b - scale parameter
* @returns {number} pseudorandom number
*/
function laplace( rand, mu, b ) {
	var u = rand() - 0.5;
	return mu - ( b*_$signum_613( u )*_$ln_561( 1.0 - (2.0*_$abs_390(u)) ) );
}


// EXPORTS //

var _$laplace_963 = laplace;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_961 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_965 = require( './validate.js' ); */;
/* removed: var _$laplace_963 = require( './laplace.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a Laplace (double exponential) distribution.
*
* @param {number} [mu] - mean
* @param {PositiveNumber} [b] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `b` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var laplace = factory( 0.0, 1.0 );
* var v = laplace();
* // returns <number>
*
* @example
* var laplace = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = laplace();
* // returns <number>
*/
function __factory_961() {
	var opts;
	var rand;
	var prng;
	var err;
	var mu;
	var b;

	if ( arguments.length === 0 ) {
		rand = __randu_961();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_961( opts );
		}
	} else {
		mu = arguments[ 0 ];
		b = arguments[ 1 ];
		err = _$validate_965( mu, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_961( opts );
			}
		} else {
			rand = __randu_961();
		}
	}
	if ( mu === void 0 ) {
		prng = laplace2;
	} else {
		prng = laplace1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'laplace' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, b ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = laplace1();
	* // returns <number>
	*/
	function laplace1() {
		return _$laplace_963( rand, mu, b );
	}

	/**
	* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.
	*
	* @private
	* @param {number} mu - mean
	* @param {PositiveNumber} b - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = laplace2( 0.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = laplace2( 0.0, -1.0 );
	* // returns NaN
	*/
	function laplace2( mu, b ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( b ) ||
			b <= 0.0
		) {
			return NaN;
		}
		return _$laplace_963( rand, mu, b );
	}
}


// EXPORTS //

var _$factory_961 = __factory_961;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_961 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.
*
* @name laplace
* @type {PRNG}
* @param {number} mu - mean
* @param {PositiveNumber} b - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = laplace( 0.0, 2.0 );
* // returns <number>
*
* @example
* var v = laplace( 0.0, -1.0 );
* // returns NaN
*/
var __laplace_964 = _$factory_961();


// EXPORTS //

var _$laplace_964 = __laplace_964;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace (double exponential) distributed pseudorandom numbers.
*
* @module @stdlib/random/base/laplace
*
* @example
* var laplace = require( '@stdlib/random/base/laplace' );
*
* var v = laplace( 0.5, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/laplace' ).factory;
* var laplace = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = laplace();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/laplace' ).factory;
* var laplace = factory({
*     'seed': 297
* });
*
* var v = laplace( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$laplace_964 = require( './main.js' ); */;
/* removed: var _$factory_961 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$laplace_964, 'factory', _$factory_961 );


// EXPORTS //

var _$laplace_962 = _$laplace_964;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1096 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1096 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1096 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rlaplace = _$laplace_962.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.
*
* @param {number} mu - mean
* @param {PositiveNumber} b - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `b` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1096( mu, b, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1096( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1096( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+b+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1096( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rlaplace( mu, b, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rlaplace( mu, b );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1096( mu, b, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1096 = __iterator_1096;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.
*
* @module @stdlib/random/iter/laplace
*
* @example
* var iterator = require( '@stdlib/random/iter/laplace' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1096 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1095 = _$iterator_1096;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_970 = _$isNumber_162.isPrimitive;
var __isPositive_970 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - mean
* @param {PositiveNumber} c - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_970( mu, c ) {
	if ( !__isNumber_970( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_970( c ) ) {
		return new TypeError( 'invalid argument. `c` must be a positive number. Value: `' + c + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_970 = __validate_970;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$erfinv_504 = require( '@stdlib/math/base/special/erfinv' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1198( p, mu, sigma ) {
	var A;
	var B;

	if (
		_$isnan_370( mu ) ||
		_$isnan_370( sigma ) ||
		_$isnan_370( p ) ||
		sigma < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return mu;
	}
	A = mu;
	B = sigma * _$sqrt_625( 2.0 );
	return A + (B * _$erfinv_504( (2.0*p) - 1.0 ));
}


// EXPORTS //

var _$quantile_1198 = __quantile_1198;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1196 = _$quantile_1194.factory;
/* removed: var _$erfinv_504 = require( '@stdlib/math/base/special/erfinv' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function of a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.683
*/
function __factory_1196( mu, sigma ) {
	var A;
	var B;
	if ( _$isnan_370( mu ) || _$isnan_370( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1348( NaN );
	}
	if ( sigma === 0.0 ) {
		__degenerate_1196( mu );
	}
	A = mu;
	B = sigma * _$sqrt_625( 2.0 );
	return quantile;

	/**
	* Evaluates the quantile function for a normal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_370( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return A + ( B * _$erfinv_504( (2.0*p) - 1.0 ) );
	}
}


// EXPORTS //

var _$factory_1196 = __factory_1196;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution quantile function.
*
* @module @stdlib/stats/base/dists/normal/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/normal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1198 = require( './quantile.js' ); */;
/* removed: var _$factory_1196 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$quantile_1198, 'factory', _$factory_1196 );


// EXPORTS //

var _$quantile_1197 = _$quantile_1198;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$quantile_1197 = require( '@stdlib/stats/base/dists/normal/quantile' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Lévy distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} pseudorandom number
*/
function levy( rand, mu, c ) {
	var z = _$quantile_1197( 1.0 - ( rand() / 2.0 ), 0.0, 1.0 );
	return mu + ( c / ( z*z ) );
}


// EXPORTS //

var _$levy_968 = levy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_966 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_970 = require( './validate.js' ); */;
/* removed: var _$levy_968 = require( './levy.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a Lévy distribution.
*
* @param {number} [mu] - location parameter
* @param {PositiveNumber} [c] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `c` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var levy = factory( 0.0, 1.0 );
* var v = levy();
* // returns <number>
*
* @example
* var levy = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = levy();
* // returns <number>
*/
function __factory_966() {
	var opts;
	var rand;
	var prng;
	var err;
	var mu;
	var c;

	if ( arguments.length === 0 ) {
		rand = __randu_966();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_966( opts );
		}
	} else {
		mu = arguments[ 0 ];
		c = arguments[ 1 ];
		err = _$validate_970( mu, c );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_966( opts );
			}
		} else {
			rand = __randu_966();
		}
	}
	if ( mu === void 0 ) {
		prng = levy2;
	} else {
		prng = levy1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'levy' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, c ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Lévy distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = levy1();
	* // returns <number>
	*/
	function levy1() {
		return _$levy_968( rand, mu, c );
	}

	/**
	* Returns a pseudorandom number drawn from a Lévy distribution.
	*
	* @private
	* @param {number} mu - location parameter
	* @param {PositiveNumber} c - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = levy2( 0.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = levy2( 0.0, -1.0 );
	* // returns NaN
	*/
	function levy2( mu, c ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( c ) ||
			c <= 0.0
		) {
			return NaN;
		}
		return _$levy_968( rand, mu, c );
	}
}


// EXPORTS //

var _$factory_966 = __factory_966;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_966 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Lévy distribution.
*
* @name levy
* @type {PRNG}
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = levy( 0.0, 2.0 );
* // returns <number>
*
* @example
* var v = levy( 0.0, -1.0 );
* // returns NaN
*/
var __levy_969 = _$factory_966();


// EXPORTS //

var _$levy_969 = __levy_969;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distributed pseudorandom numbers.
*
* @module @stdlib/random/base/levy
*
* @example
* var levy = require( '@stdlib/random/base/levy' );
*
* var v = levy( 0.5, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/levy' ).factory;
* var levy = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = levy();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/levy' ).factory;
* var levy = factory({
*     'seed': 297
* });
*
* var v = levy( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$levy_969 = require( './main.js' ); */;
/* removed: var _$factory_966 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$levy_969, 'factory', _$factory_966 );


// EXPORTS //

var _$levy_967 = _$levy_969;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1098 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1098 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1098 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rlevy = _$levy_967.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Lévy distribution.
*
* @param {number} mu - mean
* @param {PositiveNumber} c - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `c` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1098( mu, c, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1098( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1098( c ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+c+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1098( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rlevy( mu, c, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rlevy( mu, c );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1098( mu, c, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1098 = __iterator_1098;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Lévy distribution.
*
* @module @stdlib/random/iter/levy
*
* @example
* var iterator = require( '@stdlib/random/iter/levy' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1098 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1097 = _$iterator_1098;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_975 = _$isNumber_162.isPrimitive;
var __isPositive_975 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - mean
* @param {PositiveNumber} s - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_975( mu, s ) {
	if ( !__isNumber_975( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_975( s ) ) {
		return new TypeError( 'invalid argument. `s` must be a positive number. Value: `' + s + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_975 = __validate_975;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a logistic distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {number} mu - mean
* @param {PositiveNumber} s - scale parameter
* @returns {number} pseudorandom number
*/
function logistic( rand, mu, s ) {
	var u = rand();
	return mu + ( s*_$ln_561( u / (1.0-u) ) );
}


// EXPORTS //

var _$logistic_973 = logistic;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_971 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_975 = require( './validate.js' ); */;
/* removed: var _$logistic_973 = require( './logistic.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a logistic distribution.
*
* @param {number} [mu] - mean parameter
* @param {PositiveNumber} [s] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `s` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var logistic = factory( 0.0, 1.0 );
*
* var v = logistic();
* // returns <number>
*
* @example
* var logistic = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = logistic();
* // returns <number>
*/
function __factory_971() {
	var opts;
	var rand;
	var prng;
	var err;
	var mu;
	var s;

	if ( arguments.length === 0 ) {
		rand = __randu_971();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_971( opts );
		}
	} else {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		err = _$validate_975( mu, s );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_971( opts );
			}
		} else {
			rand = __randu_971();
		}
	}
	if ( mu === void 0 ) {
		prng = logistic2;
	} else {
		prng = logistic1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'logistic' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, s ];
		}
		return out;
	}

	/**
	* Returns pseudorandom number drawn from a logistic distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = logistic1();
	* // returns <number>
	*/
	function logistic1() {
		return _$logistic_973( rand, mu, s );
	}

	/**
	* Returns pseudorandom number drawn from a logistic distribution.
	*
	* @private
	* @param {number} mu - mean
	* @param {PositiveNumber} s - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = logistic2( 0.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = logistic2( 0.0, -1.0 );
	* // returns NaN
	*/
	function logistic2( mu, s ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( s ) ||
			s <= 0.0
		) {
			return NaN;
		}
		return _$logistic_973( rand, mu, s );
	}
}


// EXPORTS //

var _$factory_971 = __factory_971;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_971 = require( './factory.js' ); */;


// MAIN //

/**
* Returns pseudorandom number drawn from a logistic distribution.
*
* @name logistic
* @type {PRNG}
* @param {number} mu - mean
* @param {PositiveNumber} s - scale parameter
* @returns {number} pseudorandom number
*
* @example
* var v = logistic( 0.0, 2.0 );
* // returns <number>
*
* @example
* var v = logistic( 0.0, -1.0 );
* // returns NaN
*/
var __logistic_974 = _$factory_971();


// EXPORTS //

var _$logistic_974 = __logistic_974;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distributed pseudorandom numbers.
*
* @module @stdlib/random/base/logistic
*
* @example
* var logistic = require( '@stdlib/random/base/logistic' );
*
* var v = logistic( 0.5, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/logistic' ).factory;
* var logistic = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = logistic();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/logistic' ).factory;
* var logistic = factory({
*     'seed': 297
* });
*
* var v = logistic( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logistic_974 = require( './main.js' ); */;
/* removed: var _$factory_971 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$logistic_974, 'factory', _$factory_971 );


// EXPORTS //

var _$logistic_972 = _$logistic_974;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1100 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1100 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1100 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rlogis = _$logistic_972.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a logistic distribution.
*
* @param {number} mu - mean
* @param {PositiveNumber} s - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `s` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1100( mu, s, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1100( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1100( s ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+s+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1100( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rlogis( mu, s, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rlogis( mu, s );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1100( mu, s, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1100 = __iterator_1100;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a logistic distribution.
*
* @module @stdlib/random/iter/logistic
*
* @example
* var iterator = require( '@stdlib/random/iter/logistic' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1100 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1099 = _$iterator_1100;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_980 = _$isNumber_162.isPrimitive;
var __isPositive_980 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale paramter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_980( mu, sigma ) {
	if ( !__isNumber_980( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_980( sigma ) ) {
		return new TypeError( 'invalid argument. `sigma` must be a positive number. Value: `' + sigma + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_980 = __validate_980;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a log-normally distributed pseudorandom number.
*
* @private
* @param {PRNG} randn - PRNG for standard normally distributed numbers
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {PositiveNumber} pseudorandom number
*/
function lognormal( randn, mu, sigma ) {
	return _$exp_512( mu + (sigma*randn()) );
}


// EXPORTS //

var _$lognormal_978 = lognormal;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randn_976 = _$randn_948.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_980 = require( './validate.js' ); */;
/* removed: var _$lognormal_978 = require( './lognormal.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers from a lognormal distribution.
*
* @param {number} [mu] - location parameter
* @param {PositiveNumber} [sigma] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var lognormal = factory( 0.0, 1.0 );
*
* var v = lognormal();
* // returns <number>
*
* @example
* var lognormal = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = lognormal();
* // returns <number>
*/
function __factory_976() {
	var sigma;
	var rnorm;
	var opts;
	var rand;
	var prng;
	var err;
	var mu;

	if ( arguments.length === 0 ) {
		rnorm = __randn_976();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rnorm = __randn_976({
				'prng': opts.prng
			});
		} else {
			rnorm = __randn_976( opts );
		}
	} else {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		err = _$validate_980( mu, sigma );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rnorm = __randn_976({
					'prng': opts.prng
				});
			} else {
				rnorm = __randn_976( opts );
			}
		} else {
			rnorm = __randn_976();
		}
	}
	if ( mu === void 0 ) {
		prng = lognormal2;
	} else {
		prng = lognormal1;
	}
	rand = rnorm.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'lognormal' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, sigma ];
		}
		return out;
	}

	/**
	* Returns a log-normally distributed pseudorandom number with bound parameters `mu` and `sigma`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = lognormal1();
	* // returns <number>
	*/
	function lognormal1() {
		return _$lognormal_978( rnorm, mu, sigma );
	}

	/**
	* Returns a log-normally distributed pseudorandom number with parameters `mu` and `sigma`.
	*
	* @private
	* @param {number} mu - location parameter
	* @param {PositiveNumber} sigma - scale parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = lognormal2( -2.0, 4.0 );
	* // returns <number>
	*
	* @example
	* var v = lognormal2( 0.0, -1.0 );
	* // returns NaN
	*/
	function lognormal2( mu, sigma ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( sigma ) ||
			sigma <= 0.0
		) {
			return NaN;
		}
		return _$lognormal_978( rnorm, mu, sigma );
	}
}


// EXPORTS //

var _$factory_976 = __factory_976;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_976 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a log-normally distributed pseudorandom number with parameters `mu` and `sigma`.
*
* @name lognormal
* @type {PRNG}
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {PositiveNumber} pseudorandom number
*
* @example
* var v = lognormal( -2.0, 4.0 );
* // returns <number>
*
* @example
* var v = lognormal( 0.0, -1.0 );
* // returns NaN
*/
var __lognormal_979 = _$factory_976();


// EXPORTS //

var _$lognormal_979 = __lognormal_979;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Log-normal distributed pseudorandom numbers.
*
* @module @stdlib/random/base/lognormal
*
* @example
* var lognormal = require( '@stdlib/random/base/lognormal' );
*
* var v = lognormal( 0.0, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/lognormal' ).factory;
* var lognormal = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = lognormal();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/lognormal' ).factory;
* var lognormal = factory({
*     'seed': 297
* });
*
* var v = lognormal( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$lognormal_979 = require( './main.js' ); */;
/* removed: var _$factory_976 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$lognormal_979, 'factory', _$factory_976 );


// EXPORTS //

var _$lognormal_977 = _$lognormal_979;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1102 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1102 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1102 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rlognorm = _$lognormal_977.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a lognormal distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1102( mu, sigma, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1102( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1102( sigma ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+sigma+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1102( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rlognorm( mu, sigma, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rlognorm( mu, sigma );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1102( mu, sigma, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1102 = __iterator_1102;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a lognormal distribution.
*
* @module @stdlib/random/iter/lognormal
*
* @example
* var iterator = require( '@stdlib/random/iter/lognormal' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1102 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1101 = _$iterator_1102;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$INT32_MAX_248 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// VARIABLES //

var __MAX_985 = _$INT32_MAX_248 - 1;


// MAIN //

/**
* Returns a pseudorandom integer on the interval \\([1, 2^{31}-1)\\).
*
* @private
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = randint32();
* // returns <number>
*/
function randint32() {
	var v = _$floor_523( 1.0 + (__MAX_985*Math.random()) ); // eslint-disable-line stdlib/no-builtin-math
	return v|0; // asm type annotation
}


// EXPORTS //

var _$randint32_985 = randint32;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$INT32_MAX_248 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;


// VARIABLES //

var __MAX_989 = _$INT32_MAX_248 - 1;


// MAIN //

/**
* Returns a pseudorandom integer on the interval \\([1, 2^{31}-1)\\).
*
* @private
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = randint32();
* // returns <number>
*/
function __randint32_989() {
	var v = _$floor_523( 1.0 + (__MAX_989*Math.random()) ); // eslint-disable-line stdlib/no-builtin-math
	return v|0; // asm type annotation
}


// EXPORTS //

var _$randint32_989 = __randint32_989;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_986 = _$isBoolean_108.isPrimitive;
/* removed: var _$isCollection_116 = require( '@stdlib/assert/is-collection' ); */;
var __isPositiveInteger_986 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isInt32Array_136 = require( '@stdlib/assert/is-int32array' ); */;
/* removed: var _$INT32_MAX_248 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$ctor_12 = require( '@stdlib/array/int32' ); */;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$randint32_989 = require( './rand_int32.js' ); */;


// VARIABLES //

var NORMALIZATION_CONSTANT = (_$INT32_MAX_248 - 1)|0; // asm type annotation
var __MAX_SEED_986 = (_$INT32_MAX_248 - 1)|0; // asm type annotation
var A = 16807|0; // asm type annotation

// Define the state array schema version:
var __STATE_ARRAY_VERSION_986 = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!

// Define the number of sections in the state array:
var __NUM_STATE_SECTIONS_986 = 2; // state, seed

// Define the index offset of the "state" section in the state array:
var __STATE_SECTION_OFFSET_986 = 2; // | version | num_sections | state_length | ...state | seed_length | ...seed |

// Define the index offset of the seed section in the state array:
var __SEED_SECTION_OFFSET_986 = 4; // | version | num_sections | state_length | ...state | seed_length | ...seed |

// Define the length of the "fixed" length portion of the state array:
var __STATE_FIXED_LENGTH_986 = 5; // 1 (version) + 1 (num_sections) + 1 (state_length) + 1 (state) + 1 (seed_length)


// FUNCTIONS //

/**
* Verifies state array integrity.
*
* @private
* @param {Int32Array} state - state array
* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
* @returns {(Error|null)} an error or `null`
*/
function __verifyState_986( state, FLG ) {
	var s1;
	if ( FLG ) {
		s1 = 'option';
	} else {
		s1 = 'argument';
	}
	// The state array must have a minimum length...
	if ( state.length < __STATE_FIXED_LENGTH_986+1 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has insufficient length.' );
	}
	// The first element of the state array must equal the supported state array schema version...
	if ( state[ 0 ] !== __STATE_ARRAY_VERSION_986 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible schema version. Expected: '+__STATE_ARRAY_VERSION_986+'. Actual: '+state[ 0 ]+'.' );
	}
	// The second element of the state array must contain the number of sections...
	if ( state[ 1 ] !== __NUM_STATE_SECTIONS_986 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible number of sections. Expected: '+__NUM_STATE_SECTIONS_986+'. Actual: '+state[ 1 ]+'.' );
	}
	// The length of the "state" section must equal `1`...
	if ( state[ __STATE_SECTION_OFFSET_986 ] !== 1 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible state length. Expected: '+(1).toString()+'. Actual: '+state[ __STATE_SECTION_OFFSET_986 ]+'.' );
	}
	// The length of the "seed" section much match the empirical length...
	if ( state[ __SEED_SECTION_OFFSET_986 ] !== state.length-__STATE_FIXED_LENGTH_986 ) {
		return new RangeError( 'invalid '+s1+'. `state` array length is incompatible with seed section length. Expected: '+(state.length-__STATE_FIXED_LENGTH_986)+'. Actual: '+state[ __SEED_SECTION_OFFSET_986 ]+'.' );
	}
	return null;
}


// MAIN //

/**
* Returns a linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @param {Options} [options] - options
* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integers less than the maximum signed 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than the maximum signed 32-bit integer
* @throws {TypeError} state must be an `Int32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} LCG PRNG
*
* @example
* var minstd = factory();
*
* var v = minstd();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 20739838
*/
function __factory_986( options ) {
	var STATE;
	var state;
	var opts;
	var seed;
	var slen;
	var err;

	opts = {};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_986( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'state' ) ) {
			state = options.state;
			opts.state = true;
			if ( !_$isInt32Array_136( state ) ) {
				throw new TypeError( 'invalid option. `state` option must be an Int32Array. Option: `' + state + '`.' );
			}
			err = __verifyState_986( state, true );
			if ( err ) {
				throw err;
			}
			if ( opts.copy === false ) {
				STATE = state;
			} else {
				STATE = new _$ctor_12( state.length );
				_$gcopy_206( state.length, state, 1, STATE, 1 );
			}
			// Create a state "view":
			state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__STATE_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), 1 );

			// Create a seed "view":
			seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), state[ __SEED_SECTION_OFFSET_986 ] );
		}
		// If provided a PRNG state, we ignore the `seed` option...
		if ( seed === void 0 ) {
			if ( _$hasOwnProp_78( options, 'seed' ) ) {
				seed = options.seed;
				opts.seed = true;
				if ( __isPositiveInteger_986( seed ) ) {
					if ( seed > __MAX_SEED_986 ) {
						throw new RangeError( 'invalid option. `seed` option must be a positive integer less than the maximum signed 32-bit integer. Option: `' + seed + '`.' );
					}
					seed |= 0; // asm type annotation
				} else if ( _$isCollection_116( seed ) && seed.length > 0 ) {
					slen = seed.length;
					STATE = new _$ctor_12( __STATE_FIXED_LENGTH_986+slen );

					// Initialize sections:
					STATE[ 0 ] = __STATE_ARRAY_VERSION_986;
					STATE[ 1 ] = __NUM_STATE_SECTIONS_986;
					STATE[ __STATE_SECTION_OFFSET_986 ] = 1;
					STATE[ __SEED_SECTION_OFFSET_986 ] = slen;

					// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:
					_$gcopy_206.ndarray( slen, seed, 1, 0, STATE, 1, __SEED_SECTION_OFFSET_986+1 );

					// Create a state "view":
					state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__STATE_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), 1 );

					// Create a seed "view":
					seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), slen );

					// Initialize the internal PRNG state:
					state[ 0 ] = seed[ 0 ];
				} else {
					throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `' + seed + '`.' );
				}
			} else {
				seed = _$randint32_989()|0; // asm type annotation
			}
		}
	} else {
		seed = _$randint32_989()|0; // asm type annotation
	}
	if ( state === void 0 ) {
		STATE = new _$ctor_12( __STATE_FIXED_LENGTH_986+1 );

		// Initialize sections:
		STATE[ 0 ] = __STATE_ARRAY_VERSION_986;
		STATE[ 1 ] = __NUM_STATE_SECTIONS_986;
		STATE[ __STATE_SECTION_OFFSET_986 ] = 1;
		STATE[ __SEED_SECTION_OFFSET_986 ] = 1;
		STATE[ __SEED_SECTION_OFFSET_986+1 ] = seed;

		// Create a state "view":
		state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__STATE_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), 1 );

		// Create a seed "view":
		seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), 1 );

		// Initialize the internal PRNG state:
		state[ 0 ] = seed[ 0 ];
	}
	_$setNonEnumerableReadOnly_1359( minstd, 'NAME', 'minstd' );
	_$setNonEnumerableReadOnlyAccessor_1357( minstd, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( minstd, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( minstd, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( minstd, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( minstd, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( minstd, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( minstd, 'MIN', 1 );
	_$setNonEnumerableReadOnly_1359( minstd, 'MAX', _$INT32_MAX_248-1 );
	_$setNonEnumerableReadOnly_1359( minstd, 'normalized', normalized );

	_$setNonEnumerableReadOnly_1359( normalized, 'NAME', minstd.NAME );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( normalized, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( normalized, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( normalized, 'MIN', (minstd.MIN-1.0) / NORMALIZATION_CONSTANT );
	_$setNonEnumerableReadOnly_1359( normalized, 'MAX', (minstd.MAX-1.0) / NORMALIZATION_CONSTANT );

	return minstd;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMINSTD} seed
	*/
	function getSeed() {
		var len = STATE[ __SEED_SECTION_OFFSET_986 ];
		return _$gcopy_206( len, seed, 1, new _$ctor_12( len ), 1 );
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return STATE[ __SEED_SECTION_OFFSET_986 ];
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return STATE.length;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return STATE.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `2` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  internal PRNG state
	*     2.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `2`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMINSTD} current state
	*/
	function getState() {
		var len = STATE.length;
		return _$gcopy_206( len, STATE, 1, new _$ctor_12( len ), 1 );
	}

	/**
	* Sets the PRNG state.
	*
	* ## Notes
	*
	* -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
	* -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
	*
	* @private
	* @param {PRNGStateMINSTD} s - generator state
	* @throws {TypeError} must provide an `Int32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		var err;
		if ( !_$isInt32Array_136( s ) ) {
			throw new TypeError( 'invalid argument. Must provide an Int32Array. Value: `' + s + '`.' );
		}
		err = __verifyState_986( s, false );
		if ( err ) {
			throw err;
		}
		if ( opts.copy === false ) {
			if ( opts.state && s.length === STATE.length ) {
				_$gcopy_206( s.length, s, 1, STATE, 1 ); // update current shared state
			} else {
				STATE = s; // point to new shared state
				opts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation
			}
		} else {
			// Check if we can reuse allocated memory...
			if ( s.length !== STATE.length ) {
				STATE = new _$ctor_12( s.length ); // reallocate
			}
			_$gcopy_206( s.length, s, 1, STATE, 1 );
		}
		// Create a new state "view":
		state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__STATE_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), 1 );

		// Create a new seed "view":
		seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_986+1)*STATE.BYTES_PER_ELEMENT), STATE[ __SEED_SECTION_OFFSET_986 ] );
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = minstd.NAME;
		out.state = _$toJSON_25( STATE );
		out.params = [];
		return out;
	}

	/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*/
	function minstd() {
		var s = state[ 0 ]|0; // asm type annotation
		s = ( (A*s)%_$INT32_MAX_248 )|0; // asm type annotation
		state[ 0 ] = s;
		return s|0; // asm type annotation
	}

	/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*/
	function normalized() {
		return (minstd()-1) / NORMALIZATION_CONSTANT;
	}
}


// EXPORTS //

var _$factory_986 = __factory_986;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_986 = require( './factory.js' ); */;
/* removed: var _$randint32_989 = require( './rand_int32.js' ); */;


// MAIN //

/**
* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
*
* ## Method
*
* Linear congruential generators (LCGs) use the recurrence relation
*
* ```tex
* X_{n+1} = ( a \cdot X_n + c ) \operatorname{mod}(m)
* ```
*
* where the modulus \\( m \\) is a prime number or power of a prime number and \\( a \\) is a primitive root modulo \\( m \\).
*
* <!-- <note> -->
*
* For an LCG to be a Lehmer RNG, the seed \\( X_0 \\) must be coprime to \\( m \\).
*
* <!-- </note> -->
*
* In this implementation, the constants \\( a \\), \\( c \\), and \\( m \\) have the values
*
* ```tex
* \begin{align*}
* a &= 7^5 = 16807 \\
* c &= 0 \\
* m &= 2^{31} - 1 = 2147483647
* \end{align*}
* ```
*
* <!-- <note> -->
*
* The constant \\( m \\) is a Mersenne prime (modulo \\(31\\)).
*
* <!-- </note> -->
*
* <!-- <note> -->
*
* The constant \\( a \\) is a primitive root (modulo \\(31\\)).
*
* <!-- </note> -->
*
* Accordingly, the maximum possible product is
*
* ```tex
* 16807 \cdot (m - 1) \approx 2^{46}
* ```
*
* The values for \\( a \\), \\( c \\), and \\( m \\) are taken from Park and Miller, "Random Number Generators: Good Ones Are Hard To Find". Park's and Miller's article is also the basis for a recipe in the second edition of _Numerical Recipes in C_.
*
*
* ## Notes
*
* -   The generator has a period of approximately \\(2.1\mbox{e}9\\) (see [Numerical Recipes in C, 2nd Edition](#references), p. 279).
*
*
* ## References
*
* -   Park, S. K., and K. W. Miller. 1988. "Random Number Generators: Good Ones Are Hard to Find." _Communications of the ACM_ 31 (10). New York, NY, USA: ACM: 1192–1201. doi:[10.1145/63039.63042](http://dx.doi.org/10.1145/63039.63042).
* -   Press, William H., Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. 1992. _Numerical Recipes in C: The Art of Scientific Computing, Second Edition_. Cambridge University Press.
*
*
* @function minstd
* @type {PRNG}
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = minstd();
* // returns <number>
*/
var minstd = _$factory_986({
	'seed': _$randint32_989()
});


// EXPORTS //

var _$minstd_988 = minstd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* A linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @module @stdlib/random/base/minstd
*
* @example
* var minstd = require( '@stdlib/random/base/minstd' );
*
* var v = minstd();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/minstd' ).factory;
*
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 20739838
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$minstd_988 = require( './main.js' ); */;
/* removed: var _$factory_986 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$minstd_988, 'factory', _$factory_986 );


// EXPORTS //

var _$minstd_987 = _$minstd_988;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_1106 = _$isBoolean_108.isPrimitive;
var __isNonNegativeInteger_1106 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __minstd_1106 = _$minstd_987.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @param {Options} [options] - function options
* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`
* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1106( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'normalized' ) ) {
			if ( !__isBoolean_1106( opts.normalized ) ) {
				throw new TypeError( 'invalid option. `normalized` option must be a boolean primitive. Option: `'+opts.normalized+'`.' );
			}
		}
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1106( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __minstd_1106( opts );
		if ( opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __minstd_1106();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	if ( opts.normalized ) {
		rand = rand.normalized;
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1106( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMINSTD} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMINSTD} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMINSTD} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}
}


// EXPORTS //

var _$iterator_1106 = __iterator_1106;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for a linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @module @stdlib/random/iter/minstd
*
* @example
* var iterator = require( '@stdlib/random/iter/minstd' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1106 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1105 = _$iterator_1106;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// VARIABLES //

var NUM_WARMUPS = 8;


// MAIN //

/**
* Initializes a shuffle table.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {Int32Array} table - table
* @param {PositiveInteger} N - table size
* @throws {Error} PRNG returned `NaN`
* @returns {NumberArray} shuffle table
*/
function createTable( rand, table, N ) {
	var v;
	var i;

	// "warm-up" the PRNG...
	for ( i = 0; i < NUM_WARMUPS; i++ ) {
		v = rand();

		// Prevent the above loop from being discarded by the compiler...
		if ( _$isnan_370( v ) ) {
			throw new Error( 'unexpected error. PRNG returned `NaN`.' );
		}
	}
	// Initialize the shuffle table...
	for ( i = N-1; i >= 0; i-- ) {
		table[ i ] = rand();
	}
	return table;
}


// EXPORTS //

var _$createTable_981 = createTable;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_982 = _$isBoolean_108.isPrimitive;
/* removed: var _$isCollection_116 = require( '@stdlib/assert/is-collection' ); */;
var __isPositiveInteger_982 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isInt32Array_136 = require( '@stdlib/assert/is-int32array' ); */;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ctor_12 = require( '@stdlib/array/int32' ); */;
/* removed: var _$INT32_MAX_248 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$createTable_981 = require( './create_table.js' ); */;
/* removed: var _$randint32_985 = require( './rand_int32.js' ); */;


// VARIABLES //

var __NORMALIZATION_CONSTANT_982 = (_$INT32_MAX_248 - 1)|0; // asm type annotation
var __MAX_SEED_982 = (_$INT32_MAX_248 - 1)|0; // asm type annotation
var __A_982 = 16807|0; // asm type annotation

// Define the number of elements in the shuffle table:
var TABLE_LENGTH = 32;

// Define the state array schema version:
var __STATE_ARRAY_VERSION_982 = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!

// Define the number of sections in the state array:
var __NUM_STATE_SECTIONS_982 = 3; // table, other, seed

// Define the index offset of the "table" section in the state array:
var TABLE_SECTION_OFFSET = 2; // | version | num_sections | table_length | ...table | other_length | shuffle_state | prng_state | seed_length | ...seed |

// Define the index offset of the "state" section in the state array:
var __STATE_SECTION_OFFSET_982 = TABLE_LENGTH + 3; // | version | num_sections | table_length | ...table | state_length | shuffle_state | prng_state | seed_length | ...seed |

// Define the index offset of the seed section in the state array:
var __SEED_SECTION_OFFSET_982 = TABLE_LENGTH + 6; // | version | num_sections | table_length | ...table | state_length | shuffle_state | prng_state | seed_length | ...seed |

// Define the length of the "fixed" length portion of the state array:
var __STATE_FIXED_LENGTH_982 = TABLE_LENGTH + 7; // 1 (version) + 1 (num_sections) + 1 (table_length) + TABLE_LENGTH (table) + 1 (state_length) + 1 (shuffle_state) + 1 (prng_state) + 1 (seed_length)

// Define the indices for the shuffle table and PRNG states:
var SHUFFLE_STATE = __STATE_SECTION_OFFSET_982 + 1;
var PRNG_STATE = __STATE_SECTION_OFFSET_982 + 2;


// FUNCTIONS //

/**
* Verifies state array integrity.
*
* @private
* @param {Int32Array} state - state array
* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
* @returns {(Error|null)} an error or `null`
*/
function __verifyState_982( state, FLG ) {
	var s1;
	if ( FLG ) {
		s1 = 'option';
	} else {
		s1 = 'argument';
	}
	// The state array must have a minimum length...
	if ( state.length < __STATE_FIXED_LENGTH_982+1 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has insufficient length.' );
	}
	// The first element of the state array must equal the supported state array schema version...
	if ( state[ 0 ] !== __STATE_ARRAY_VERSION_982 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible schema version. Expected: '+__STATE_ARRAY_VERSION_982+'. Actual: '+state[ 0 ]+'.' );
	}
	// The second element of the state array must contain the number of sections...
	if ( state[ 1 ] !== __NUM_STATE_SECTIONS_982 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible number of sections. Expected: '+__NUM_STATE_SECTIONS_982+'. Actual: '+state[ 1 ]+'.' );
	}
	// The length of the "table" section must equal `TABLE_LENGTH`...
	if ( state[ TABLE_SECTION_OFFSET ] !== TABLE_LENGTH ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible table length. Expected: '+TABLE_LENGTH+'. Actual: '+state[ TABLE_SECTION_OFFSET ]+'.' );
	}
	// The length of the "state" section must equal `2`...
	if ( state[ __STATE_SECTION_OFFSET_982 ] !== 2 ) {
		return new RangeError( 'invalid '+s1+'. `state` array has an incompatible state length. Expected: '+(2).toString()+'. Actual: '+state[ __STATE_SECTION_OFFSET_982 ]+'.' );
	}
	// The length of the "seed" section much match the empirical length...
	if ( state[ __SEED_SECTION_OFFSET_982 ] !== state.length-__STATE_FIXED_LENGTH_982 ) {
		return new RangeError( 'invalid '+s1+'. `state` array length is incompatible with seed section length. Expected: '+(state.length-__STATE_FIXED_LENGTH_982)+'. Actual: '+state[ __SEED_SECTION_OFFSET_982 ]+'.' );
	}
	return null;
}


// MAIN //

/**
* Returns a linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @param {Options} [options] - options
* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integers less than the maximum signed 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than the maximum signed 32-bit integer
* @throws {TypeError} state must be an `Int32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} shuffled LCG PRNG
*
* @example
* var minstd = factory();
*
* var v = minstd();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 1421600654
*/
function __factory_982( options ) {
	var STATE;
	var state;
	var opts;
	var seed;
	var slen;
	var err;

	opts = {};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_982( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'state' ) ) {
			state = options.state;
			opts.state = true;
			if ( !_$isInt32Array_136( state ) ) {
				throw new TypeError( 'invalid option. `state` option must be an Int32Array. Option: `' + state + '`.' );
			}
			err = __verifyState_982( state, true );
			if ( err ) {
				throw err;
			}
			if ( opts.copy === false ) {
				STATE = state;
			} else {
				STATE = new _$ctor_12( state.length );
				_$gcopy_206( state.length, state, 1, STATE, 1 );
			}
			// Create a state (table) "view":
			state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );

			// Create a seed "view":
			seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_982+1)*STATE.BYTES_PER_ELEMENT), state[ __SEED_SECTION_OFFSET_982 ] );
		}
		// If provided a PRNG state, we ignore the `seed` option...
		if ( seed === void 0 ) {
			if ( _$hasOwnProp_78( options, 'seed' ) ) {
				seed = options.seed;
				opts.seed = true;
				if ( __isPositiveInteger_982( seed ) ) {
					if ( seed > __MAX_SEED_982 ) {
						throw new RangeError( 'invalid option. `seed` option must be a positive integer less than the maximum signed 32-bit integer. Option: `' + seed + '`.' );
					}
					seed |= 0; // asm type annotation
				} else if ( _$isCollection_116( seed ) && seed.length > 0 ) {
					slen = seed.length;
					STATE = new _$ctor_12( __STATE_FIXED_LENGTH_982+slen );

					// Initialize sections:
					STATE[ 0 ] = __STATE_ARRAY_VERSION_982;
					STATE[ 1 ] = __NUM_STATE_SECTIONS_982;
					STATE[ TABLE_SECTION_OFFSET ] = TABLE_LENGTH;
					STATE[ __STATE_SECTION_OFFSET_982 ] = 2;
					STATE[ PRNG_STATE ] = seed[ 0 ];
					STATE[ __SEED_SECTION_OFFSET_982 ] = slen;

					// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:
					_$gcopy_206.ndarray( slen, seed, 1, 0, STATE, 1, __SEED_SECTION_OFFSET_982+1 );

					// Create a state (table) "view":
					state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );

					// Create a seed "view":
					seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_982+1)*STATE.BYTES_PER_ELEMENT), slen );

					// Initialize the internal PRNG state:
					state = _$createTable_981( minstd, state, TABLE_LENGTH );
					STATE[ SHUFFLE_STATE ] = state[ 0 ];
				} else {
					throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `' + seed + '`.' );
				}
			} else {
				seed = _$randint32_985()|0; // asm type annotation
			}
		}
	} else {
		seed = _$randint32_985()|0; // asm type annotation
	}
	if ( state === void 0 ) {
		STATE = new _$ctor_12( __STATE_FIXED_LENGTH_982+1 );

		// Initialize sections:
		STATE[ 0 ] = __STATE_ARRAY_VERSION_982;
		STATE[ 1 ] = __NUM_STATE_SECTIONS_982;
		STATE[ TABLE_SECTION_OFFSET ] = TABLE_LENGTH;
		STATE[ __STATE_SECTION_OFFSET_982 ] = 2;
		STATE[ PRNG_STATE ] = seed;
		STATE[ __SEED_SECTION_OFFSET_982 ] = 1;
		STATE[ __SEED_SECTION_OFFSET_982+1 ] = seed;

		// Create a state (table) "view":
		state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );

		// Create a seed "view":
		seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_982+1)*STATE.BYTES_PER_ELEMENT), 1 );

		// Initialize the internal PRNG state:
		state = _$createTable_981( minstd, state, TABLE_LENGTH );
		STATE[ SHUFFLE_STATE ] = state[ 0 ];
	}
	_$setNonEnumerableReadOnly_1359( minstdShuffle, 'NAME', 'minstd-shuffle' );
	_$setNonEnumerableReadOnlyAccessor_1357( minstdShuffle, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( minstdShuffle, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( minstdShuffle, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( minstdShuffle, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( minstdShuffle, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( minstdShuffle, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( minstdShuffle, 'MIN', 1 );
	_$setNonEnumerableReadOnly_1359( minstdShuffle, 'MAX', _$INT32_MAX_248-1 );
	_$setNonEnumerableReadOnly_1359( minstdShuffle, 'normalized', normalized );

	_$setNonEnumerableReadOnly_1359( normalized, 'NAME', minstdShuffle.NAME );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( normalized, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( normalized, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( normalized, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( normalized, 'MIN', (minstdShuffle.MIN-1.0) / __NORMALIZATION_CONSTANT_982 );
	_$setNonEnumerableReadOnly_1359( normalized, 'MAX', (minstdShuffle.MAX-1.0) / __NORMALIZATION_CONSTANT_982 );

	return minstdShuffle;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMINSTD} seed
	*/
	function getSeed() {
		var len = STATE[ __SEED_SECTION_OFFSET_982 ];
		return _$gcopy_206( len, seed, 1, new _$ctor_12( len ), 1 );
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return STATE[ __SEED_SECTION_OFFSET_982 ];
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return STATE.length;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return STATE.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `3` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  shuffle table
	*     2.  internal PRNG state
	*     3.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMINSTD} current state
	*/
	function getState() {
		var len = STATE.length;
		return _$gcopy_206( len, STATE, 1, new _$ctor_12( len ), 1 );
	}

	/**
	* Sets the PRNG state.
	*
	* ## Notes
	*
	* -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
	* -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
	*
	* @private
	* @param {PRNGStateMINSTD} s - generator state
	* @throws {TypeError} must provide an `Int32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		var err;
		if ( !_$isInt32Array_136( s ) ) {
			throw new TypeError( 'invalid argument. Must provide an Int32Array. Value: `' + s + '`.' );
		}
		err = __verifyState_982( s, false );
		if ( err ) {
			throw err;
		}
		if ( opts.copy === false ) {
			if ( opts.state && s.length === STATE.length ) {
				_$gcopy_206( s.length, s, 1, STATE, 1 ); // update current shared state
			} else {
				STATE = s; // point to new shared state
				opts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation
			}
		} else {
			// Check if we can reuse allocated memory...
			if ( s.length !== STATE.length ) {
				STATE = new _$ctor_12( s.length ); // reallocate
			}
			_$gcopy_206( s.length, s, 1, STATE, 1 );
		}
		// Create a new state (table) "view":
		state = new _$ctor_12( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );

		// Create a new seed "view":
		seed = new _$ctor_12( STATE.buffer, STATE.byteOffset+((__SEED_SECTION_OFFSET_982+1)*STATE.BYTES_PER_ELEMENT), STATE[ __SEED_SECTION_OFFSET_982 ] );
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = minstdShuffle.NAME;
		out.state = _$toJSON_25( STATE );
		out.params = [];
		return out;
	}

	/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*/
	function minstd() {
		var s = STATE[ PRNG_STATE ]|0; // asm type annotation
		s = ( (__A_982*s)%_$INT32_MAX_248 )|0; // asm type annotation
		STATE[ PRNG_STATE ] = s;
		return s|0; // asm type annotation
	}

	/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*
	* @example
	* var v = minstd();
	* // returns <number>
	*/
	function minstdShuffle() {
		var s;
		var i;

		s = STATE[ SHUFFLE_STATE ];
		i = _$floor_523( TABLE_LENGTH * (s/_$INT32_MAX_248) );

		// Pull a state from the table:
		s = state[ i ];

		// Update the PRNG state:
		STATE[ SHUFFLE_STATE ] = s;

		// Replace the pulled state:
		state[ i ] = minstd();

		return s;
	}

	/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normalized();
	* // returns <number>
	*/
	function normalized() {
		return (minstdShuffle()-1) / __NORMALIZATION_CONSTANT_982;
	}
}


// EXPORTS //

var _$factory_982 = __factory_982;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_982 = require( './factory.js' ); */;
/* removed: var _$randint32_985 = require( './rand_int32.js' ); */;


// MAIN //

/**
* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
*
* ## Method
*
* Linear congruential generators (LCGs) use the recurrence relation
*
* ```tex
* X_{n+1} = ( a \cdot X_n + c ) \operatorname{mod}(m)
* ```
*
* where the modulus \\( m \\) is a prime number or power of a prime number and \\( a \\) is a primitive root modulo \\( m \\).
*
* <!-- <note> -->
*
* For an LCG to be a Lehmer RNG, the seed \\( X_0 \\) must be coprime to \\( m \\).
*
* <!-- </note> -->
*
* In this implementation, the constants \\( a \\), \\( c \\), and \\( m \\) have the values
*
* ```tex
* \begin{align*}
* a &= 7^5 = 16807 \\
* c &= 0 \\
* m &= 2^{31} - 1 = 2147483647
* \end{align*}
* ```
*
* <!-- <note> -->
*
* The constant \\( m \\) is a Mersenne prime (modulo \\(31\\)).
*
* <!-- </note> -->
*
* <!-- <note> -->
*
* The constant \\( a \\) is a primitive root (modulo \\(31\\)).
*
* <!-- </note> -->
*
* Accordingly, the maximum possible product is
*
* ```tex
* 16807 \cdot (m - 1) \approx 2^{46}
* ```
*
* The values for \\( a \\), \\( c \\), and \\( m \\) are taken from Park and Miller, "Random Number Generators: Good Ones Are Hard To Find". Park's and Miller's article is also the basis for a recipe in the second edition of _Numerical Recipes in C_.
*
* This implementation subsequently shuffles the output of a linear congruential pseudorandom number generator (LCG) using a shuffle table in accordance with the Bays-Durham algorithm.
*
*
* ## Notes
*
* -   The generator has a period of approximately \\(2.1\mbox{e}9\\) (see [Numerical Recipes in C, 2nd Edition](#references), p. 279).
*
*
* ## References
*
* -   Bays, Carter, and S. D. Durham. 1976. "Improving a Poor Random Number Generator." _ACM Transactions on Mathematical Software_ 2 (1). New York, NY, USA: ACM: 59–64. doi:[10.1145/355666.355670](http://dx.doi.org/10.1145/355666.355670).
* -   Herzog, T.N., and G. Lord. 2002. _Applications of Monte Carlo Methods to Finance and Insurance_. ACTEX Publications. [https://books.google.com/books?id=vC7I\\\_gdX-A0C](https://books.google.com/books?id=vC7I\_gdX-A0C).
* -   Press, William H., Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. 1992. _Numerical Recipes in C: The Art of Scientific Computing, Second Edition_. Cambridge University Press.
*
*
* @function minstd
* @type {PRNG}
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = minstd();
* // returns <number>
*/
var __minstd_984 = _$factory_982({
	'seed': _$randint32_985()
});


// EXPORTS //

var _$minstd_984 = __minstd_984;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* A linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @module @stdlib/random/base/minstd-shuffle
*
* @example
* var minstd = require( '@stdlib/random/base/minstd-shuffle' );
*
* var v = minstd();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/minstd-shuffle' ).factory;
*
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 1421600654
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$minstd_984 = require( './main.js' ); */;
/* removed: var _$factory_982 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$minstd_984, 'factory', _$factory_982 );


// EXPORTS //

var _$minstd_983 = _$minstd_984;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_1104 = _$isBoolean_108.isPrimitive;
var __isNonNegativeInteger_1104 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __minstd_1104 = _$minstd_983.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @param {Options} [options] - function options
* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`
* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1104( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'normalized' ) ) {
			if ( !__isBoolean_1104( opts.normalized ) ) {
				throw new TypeError( 'invalid option. `normalized` option must be a boolean primitive. Option: `'+opts.normalized+'`.' );
			}
		}
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1104( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __minstd_1104( opts );
		if ( opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __minstd_1104();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	if ( opts.normalized ) {
		rand = rand.normalized;
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1104( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMINSTD} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMINSTD} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMINSTD} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}
}


// EXPORTS //

var _$iterator_1104 = __iterator_1104;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for a linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @module @stdlib/random/iter/minstd-shuffle
*
* @example
* var iterator = require( '@stdlib/random/iter/minstd-shuffle' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1104 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1103 = _$iterator_1104;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_1108 = _$isBoolean_108.isPrimitive;
var __isNonNegativeInteger_1108 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __mt19937_1108 = _$mt19937_991.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.
*
* @param {Options} [options] - function options
* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1108( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'normalized' ) ) {
			if ( !__isBoolean_1108( opts.normalized ) ) {
				throw new TypeError( 'invalid option. `normalized` option must be a boolean primitive. Option: `'+opts.normalized+'`.' );
			}
		}
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1108( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __mt19937_1108( opts );
		if ( opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __mt19937_1108();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	if ( opts.normalized ) {
		rand = rand.normalized;
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1108( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}
}


// EXPORTS //

var _$iterator_1108 = __iterator_1108;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for a 32-bit Mersenne Twister pseudorandom number generator.
*
* @module @stdlib/random/iter/mt19937
*
* @example
* var iterator = require( '@stdlib/random/iter/mt19937' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1108 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1107 = _$iterator_1108;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Poisson distribution.
*
* ## Notes
*
* -   Appropriate for \\(lambda < 30\\).
*
*
* ## References
*
* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.
*
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {PositiveNumber} lambda - mean
* @returns {NonNegativeInteger} pseudorandom number
*/
function poisson( rand, lambda ) {
	var p = rand();
	var k = 1;
	while ( p > _$exp_512( -lambda ) ) {
		k += 1;
		p *= rand();
	}
	return k - 1;
}


// EXPORTS //

var _$poisson_1010 = poisson;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factorialln_521 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$signum_613 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_SQRT_TWO_PI_226 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;


// VARIABLES //

var __ONE_12_1013 = 1.0 / 12.0;
var __ONE_360_1013 = 1.0 / 360.0;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.
*
* ## References
*
* -   Hörmann, W. 1993. "The transformed rejection method for generating Poisson random variables." _Insurance: Mathematics and Economics_ 12 (1): 39–45. doi:[10.1016/0167-6687(93)90997-4][@hormann:1993b].
*
* [@hormann:1993b]: http://dx.doi.org/10.1016/0167-6687(93)90997-4
*
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {PositiveNumber} lambda - mean
* @returns {NonNegativeInteger} pseudorandom number
*/
function __poisson_1013( rand, lambda ) {
	var slambda;
	var ainv;
	var urvr;
	var us;
	var vr;
	var a;
	var b;
	var k;
	var u;
	var v;

	slambda = _$sqrt_625( lambda );

	b = (2.53*slambda) + 0.931;
	a = (0.02483*b) - 0.059;

	ainv = (1.1328/(b-3.4)) + 1.1239;
	vr = (-3.6224/(b-2.0)) + 0.9277;
	urvr = 0.86 * vr;

	while ( true ) {
		v = rand();
		if ( v <= urvr ) {
			u = (v / vr) - 0.43;
			u *= (2.0*a / (0.5-_$abs_390(u))) + b;
			u += lambda + 0.445;
			return _$floor_523( u );
		}
		if ( v >= vr ) {
			u = rand() - 0.5;
		} else {
			u = (v / vr) - 0.93;
			u = (_$signum_613( u )*0.5) - u;
			v = vr * rand();
		}
		us = 0.5 - _$abs_390( u );
		if (
			us >= 0.013 ||
			us >= v
		) {
			k = _$floor_523( (((2.0*a/us) + b)*u) + lambda + 0.445 );
			v *= ainv / ( (a/(us*us)) + b );
			u = (k+0.5) * _$ln_561( lambda/k );
			u += -lambda - _$LN_SQRT_TWO_PI_226 + k;
			u -= ( __ONE_12_1013 - (__ONE_360_1013/(k*k)) ) / k;
			if (
				k >= 10 &&
				u >= _$ln_561( v*slambda )
			) {
				return k;
			}
			u = (k*_$ln_561( lambda )) - lambda - _$factorialln_521( k );
			if (
				k >= 0 &&
				k <= 9 &&
				u >= _$ln_561( v )
			) {
				return k;
			}
		}
	}
}


// EXPORTS //

var _$poisson_1013 = __poisson_1013;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$poisson_1010 = require( './knuth.js' ); */;
/* removed: var _$poisson_1013 = require( './rejection.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {PositiveNumber} lambda - mean
* @returns {NonNegativeInteger} pseudorandom number
*/
function __poisson_1012( rand, lambda ) {
	if ( lambda < 30.0 ) {
		return _$poisson_1010( rand, lambda );
	}
	return _$poisson_1013( rand, lambda );
}


// EXPORTS //

var _$poisson_1012 = __poisson_1012;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
var __isPositive_1008 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_1008 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$poisson_1012 = require( './poisson.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Poisson distributed random numbers.
*
* @param {PositiveNumber} [lambda] - mean
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var poisson = factory( 5.0 );
* var v = poisson();
* // returns <number>
*
* @example
* var poisson = factory( 8.0, {
*     'seed': 297
* });
* var v = poisson();
* // returns <number>
*
* @example
* var poisson = factory();
* var v = poisson( 0.5 );
* // returns <number>
*/
function __factory_1008() {
	var lambda;
	var opts;
	var rand;
	var prng;

	if ( arguments.length === 0 ) {
		rand = __randu_1008();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_1008( opts );
		}
	} else {
		lambda = arguments[ 0 ];
		if ( !__isPositive_1008( lambda ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + lambda + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_1008( opts );
			}
		} else {
			rand = __randu_1008();
		}
	}
	if ( lambda === void 0 ) {
		prng = poisson2;
	} else {
		prng = poisson1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'poisson' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( lambda === void 0 ) {
			out.params = [];
		} else {
			out.params = [ lambda ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Poisson distribution.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = poisson1();
	* // returns <number>
	*/
	function poisson1() {
		return _$poisson_1012( rand, lambda );
	}

	/**
	* Returns a pseudorandom number drawn from a Poisson distribution.
	*
	* @private
	* @param {PositiveNumber} lambda - mean
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = poisson2( 0.5 );
	* // returns <number>
	*
	* @example
	* var v = poisson2( NaN );
	* // returns NaN
	*
	* @example
	* var v = poisson2( -1.0 );
	* // returns NaN
	*/
	function poisson2( lambda ) {
		if (
			_$isnan_370( lambda ) ||
			lambda <= 0.0
		) {
			return NaN;
		}
		return _$poisson_1012( rand, lambda );
	}
}


// EXPORTS //

var _$factory_1008 = __factory_1008;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1008 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.
*
* ## Method
*
* -   When \\(\lambda < 30\\), use Knuth's method.
* -   When \\(lambda \geq 30\\), use transformed rejection method as Knuth's method does not scale well with \\(\lambda\\).
*
* ## References
*
* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.
* -   Hörmann, W. 1993. "The transformed rejection method for generating Poisson random variables." _Insurance: Mathematics and Economics_ 12 (1): 39–45. doi:[10.1016/0167-6687(93)90997-4][@hormann:1993b].
*
* [@hormann:1993b]: http://dx.doi.org/10.1016/0167-6687(93)90997-4
*
*
* @name poisson
* @type {PRNG}
* @param {PositiveNumber} lambda - mean
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var v = poisson( 0.5 );
* // returns <number>
*
* @example
* var v = poisson( 0.0 );
* // returns NaN
*
* @example
* var v = poisson( NaN );
* // returns NaN
*/
var __poisson_1011 = _$factory_1008();


// EXPORTS //

var _$poisson_1011 = __poisson_1011;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distributed pseudorandom numbers.
*
* @module @stdlib/random/base/poisson
*
* @example
* var poisson = require( '@stdlib/random/base/poisson' );
*
* var v = poisson( 4.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/poisson' ).factory;
* var poisson = factory( 4.0, {
*     'seed': 297
* });
*
* var v = poisson();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/poisson' ).factory;
* var poisson = factory({
*     'seed': 297
* });
*
* var v = poisson( 3.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$poisson_1011 = require( './main.js' ); */;
/* removed: var _$factory_1008 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$poisson_1011, 'factory', _$factory_1008 );


// EXPORTS //

var _$poisson_1009 = _$poisson_1011;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_997 = _$isPositiveNumber_178.isPrimitive;
var __isNumber_997 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {number} p - success probability
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 10, 0.5 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_997( r, p ) {
	if ( !__isPositive_997( r ) ) {
		return new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + r + '`.' );
	}
	if ( !__isNumber_997( p ) || _$isnan_150( p ) ) {
		return new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `' + p + '`.' );
	}
	if ( p <= 0.0 || p >= 1.0 ) {
		return new RangeError( 'invalid argument. Second argument must be on the interval `(0,1)`. Value: `' + p + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_997 = __validate_997;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
var __isBoolean_994 = _$isBoolean_108.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
var __poisson_994 = _$poisson_1009.factory;
var __gamma_994 = _$gamma_927.factory;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_997 = require( './validate.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.
*
* @param {PositiveNumber} [r] - number of successes until experiment is stopped
* @param {number} [p] - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `r` must be a positive number
* @throws {TypeError} `p` must be number
* @throws {RangeError} `p` must be a number on the interval `(0,1)`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var negativeBinomial = factory( 10, 0.5 );
*
* var v = negativeBinomial();
* // returns <number>
*
* @example
* var negativeBinomial = factory( 10, 0.8, {
*     'seed': 297
* });
*
* var v = negativeBinomial();
* // returns <number>
*
* @example
* var negativeBinomial = factory();
*
* var v = negativeBinomial( 10, 0.5 );
* // returns <number>
*/
function __factory_994() {
	var rgamma;
	var STATE;
	var rpois;
	var opts;
	var prng;
	var rand;
	var FLG;
	var err;
	var p;
	var r;

	FLG = true;
	if ( arguments.length === 0 ) {
		opts = {
			'copy': false
		};
		rpois = __poisson_994( opts );
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_994( opts.copy ) ) {
			throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rpois = __poisson_994({
				'prng': opts.prng
			});
		} else {
			if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
			}
			opts = _$copy_1353( opts, 1 );
			if ( opts.copy === false ) {
				FLG = false;
			} else if ( opts.state ) {
				opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
			}
			opts.copy = false;
			rpois = __poisson_994( opts );
		}
	} else {
		r = arguments[ 0 ];
		p = arguments[ 1 ];
		err = _$validate_997( r, p );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_994( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rpois = __poisson_994({
					'prng': opts.prng
				});
			} else {
				if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
					throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
				}
				opts = _$copy_1353( opts, 1 );
				if ( opts.copy === false ) {
					FLG = false;
				} else if ( opts.state ) {
					opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
				}
				opts.copy = false;
				rpois = __poisson_994( opts );
			}
		} else {
			opts = {
				'copy': false
			};
			rpois = __poisson_994( opts );
		}
	}
	if ( opts && opts.prng ) {
		if ( r === void 0 ) {
			rgamma = __gamma_994({
				'prng': opts.prng
			});
		} else {
			rgamma = __gamma_994( r, p/(1-p), {
				'prng': opts.prng
			});
		}
	} else {
		if ( opts.state ) {
			STATE = opts.state;
		} else {
			STATE = rpois.state;
			rpois.state = STATE; // updates the underlying PRNG to point to a shared state
		}
		if ( r === void 0 ) {
			rgamma = __gamma_994({
				'state': STATE,
				'copy': false
			});
		} else {
			rgamma = __gamma_994( r, p/(1-p), {
				'state': STATE,
				'copy': false
			});
		}
	}
	if ( r === void 0 ) {
		prng = negativeBinomial2;
	} else {
		prng = negativeBinomial1;
	}
	rand = rpois.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'negative-binomial' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		if ( !_$isUint32Array_198( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		if ( FLG ) {
			s = _$gcopy_206( s.length, s, 1, new _$ctor_41( s.length ), 1 );
		}
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( r === void 0 ) {
			out.params = [];
		} else {
			out.params = [ r, p ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = negativeBinomial1();
	* // returns <number>
	*/
	function negativeBinomial1() {
		return rpois( rgamma() );
	}

	/**
	* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.
	*
	* @private
	* @param {PositiveNumber} r - number of successes until experiment is stopped
	* @param {number} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = negativeBinomial2( 10, 0.5 );
	* // returns <number>
	*/
	function negativeBinomial2( r, p ) {
		if (
			_$isnan_370( r ) ||
			_$isnan_370( p ) ||
			p <= 0.0 ||
			p >= 1.0
		) {
			return NaN;
		}
		return rpois( rgamma( r, p/(1-p) ) );
	}
}


// EXPORTS //

var _$factory_994 = __factory_994;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_994 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a negative binomial distribution.
*
* @name negativeBinomial
* @type {PRNG}
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {number} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var v = negativeBinomial( 10, 0.5 );
* // returns <number>
*/
var negativeBinomial = _$factory_994();


// EXPORTS //

var _$negativeBinomial_996 = negativeBinomial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distributed pseudorandom numbers.
*
* @module @stdlib/random/base/negative-binomial
*
* @example
* var negativeBinomial = require( '@stdlib/random/base/negative-binomial' );
*
* var v = negativeBinomial( 20, 0.5 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/negative-binomial' ).factory;
* var negativeBinomial = factory( 10, 0.3, {
*     'seed': 297
* });
*
* var v = negativeBinomial();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/negative-binomial' ).factory;
* var negativeBinomial = factory({
*     'seed': 297
* });
*
* var v = negativeBinomial( 10, 0.67 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$negativeBinomial_996 = require( './main.js' ); */;
/* removed: var _$factory_994 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$negativeBinomial_996, 'factory', _$factory_994 );


// EXPORTS //

var _$negativeBinomial_995 = _$negativeBinomial_996;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isProbability_1110 = _$isProbability_182.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isPositiveNumber_1110 = _$isPositiveNumber_178.isPrimitive;
var __isNonNegativeInteger_1110 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rnbinom = _$negativeBinomial_995.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a negative binomial distribution.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} second argument must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 8, 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1110( r, p, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1110( r ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive integer. Value: `'+r+'`.' );
	}
	if ( !__isProbability_1110( p ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a probability. Value: `'+p+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1110( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rnbinom( r, p, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rnbinom( r, p );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1110( r, p, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1110 = __iterator_1110;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a negative binomial distribution.
*
* @module @stdlib/random/iter/negative-binomial
*
* @example
* var iterator = require( '@stdlib/random/iter/negative-binomial' );
*
* var iter = iterator( 10, 0.3 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1110 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1109 = _$iterator_1110;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_1002 = _$isNumber_162.isPrimitive;
var __isPositive_1002 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1002( mu, sigma ) {
	if ( !__isNumber_1002( mu ) || _$isnan_150( mu ) ) {
		return new TypeError( 'invalid argument. `mu` must be a number primitive and not `NaN`. Value: `' + mu + '`.' );
	}
	if ( !__isPositive_1002( sigma ) ) {
		return new TypeError( 'invalid argument. `sigma` must be a positive number. Value: `' + sigma + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_1002 = __validate_1002;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns a pseudorandom number from a normal distribution with parameters `mu` and `sigma`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} pseudorandom number
*/
function normal( rand, mu, sigma ) {
	return mu + (sigma*rand());
}


// EXPORTS //

var _$normal_1001 = normal;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randn_998 = _$randn_948.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_1002 = require( './validate.js' ); */;
/* removed: var _$normal_1001 = require( './normal.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating normally distributed random numbers.
*
* @param {number} [mu] - mean
* @param {PositiveNumber} [sigma] - standard deviation
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var normal = factory( 0.0, 1.0 );
* var v = normal();
* // returns <number>
*
* @example
* var normal = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = normal();
* // returns <number>
*/
function __factory_998() {
	var sigma;
	var rnorm;
	var opts;
	var rand;
	var prng;
	var err;
	var mu;

	if ( arguments.length === 0 ) {
		rnorm = __randn_998();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rnorm = __randn_998({
				'prng': opts.prng
			});
		} else {
			rnorm = __randn_998( opts );
		}
	} else {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		err = _$validate_1002( mu, sigma );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rnorm = __randn_998({
					'prng': opts.prng
				});
			} else {
				rnorm = __randn_998( opts );
			}
		} else {
			rnorm = __randn_998();
		}
	}
	if ( mu === void 0 ) {
		prng = normal2;
	} else {
		prng = normal1;
	}
	rand = rnorm.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'normal' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( mu === void 0 ) {
			out.params = [];
		} else {
			out.params = [ mu, sigma ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number from a normal distribution with bound parameters `mu` and `sigma`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normal1();
	* // returns <number>
	*/
	function normal1() {
		return _$normal_1001( rnorm, mu, sigma );
	}

	/**
	* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.
	*
	* @private
	* @param {number} mu - mean
	* @param {PositiveNumber} sigma - standard deviation
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normal2( 0.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = normal2( 0.0, -1.0 );
	* // returns NaN
	*/
	function normal2( mu, sigma ) {
		if (
			_$isnan_370( mu ) ||
			_$isnan_370( sigma ) ||
			sigma <= 0.0
		) {
			return NaN;
		}
		return _$normal_1001( rnorm, mu, sigma );
	}
}


// EXPORTS //

var _$factory_998 = __factory_998;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_998 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.
*
* @name normal
* @type {PRNG}
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} pseudorandom number
*
* @example
* var v = normal( 0.0, 1.0 );
* // returns <number>
*
* @example
* var v = normal( 0.0, -1.0 );
* // returns NaN
*/
var __normal_1000 = _$factory_998();


// EXPORTS //

var _$normal_1000 = __normal_1000;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normally distributed pseudorandom numbers.
*
* @module @stdlib/random/base/normal
*
* @example
* var normal = require( '@stdlib/random/base/normal' );
*
* var v = normal( 0.0, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/normal' ).factory;
* var normal = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = normal();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/normal' ).factory;
* var normal = factory({
*     'seed': 297
* });
*
* var v = normal( -3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$normal_1000 = require( './main.js' ); */;
/* removed: var _$factory_998 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$normal_1000, 'factory', _$factory_998 );


// EXPORTS //

var _$normal_999 = _$normal_1000;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1112 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1112 = _$isNonNegativeInteger_154.isPrimitive;
var __isPositive_1112 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __rnorm_1112 = _$normal_999.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a normal distribution.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1112( mu, sigma, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1112( mu ) || _$isnan_370( mu ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+mu+'`.' );
	}
	if ( !__isPositive_1112( sigma ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+sigma+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1112( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __rnorm_1112( mu, sigma, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __rnorm_1112( mu, sigma );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1112( mu, sigma, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1112 = __iterator_1112;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a normal distribution.
*
* @module @stdlib/random/iter/normal
*
* @example
* var iterator = require( '@stdlib/random/iter/normal' );
*
* var iter = iterator( -1.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1112 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1111 = _$iterator_1112;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_1007 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1007( alpha, beta ) {
	if ( !__isPositive_1007( alpha ) ) {
		return new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );
	}
	if ( !__isPositive_1007( beta ) ) {
		return new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_1007 = __validate_1007;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {NonNegativeNumber} pseudorandom number
*/
function pareto( rand, alpha, beta ) {
	return beta / _$pow_579( rand(), 1.0/alpha );
}


// EXPORTS //

var _$pareto_1006 = pareto;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_1003 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_1007 = require( './validate.js' ); */;
/* removed: var _$pareto_1006 = require( './pareto.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Pareto (Type I) distributed random numbers.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var pareto1 = factory( 2.0, 1.0 );
*
* var v = pareto1();
* // returns <number>
*
* @example
* var pareto1 = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = pareto1();
* // returns <number>
*/
function __factory_1003() {
	var alpha;
	var beta;
	var opts;
	var rand;
	var prng;
	var err;

	if ( arguments.length === 0 ) {
		rand = __randu_1003();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_1003( opts );
		}
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = _$validate_1007( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_1003( opts );
			}
		} else {
			rand = __randu_1003();
		}
	}
	if ( alpha === void 0 ) {
		prng = pareto2;
	} else {
		prng = pareto1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'pareto-type1' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( alpha === void 0 ) {
			out.params = [];
		} else {
			out.params = [ alpha, beta ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Pareto (Type I) distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = pareto1();
	* // returns <number>
	*/
	function pareto1() {
		return _$pareto_1006( rand, alpha, beta );
	}

	/**
	* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - scale parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = pareto2( 2.0, 3.0 );
	* // returns <number>
	*
	* @example
	* var v = pareto2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = pareto2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = pareto2( NaN, NaN );
	* // returns NaN
	*/
	function pareto2( alpha, beta ) {
		if (
			_$isnan_370( alpha ) ||
			_$isnan_370( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		return _$pareto_1006( rand, alpha, beta );
	}
}


// EXPORTS //

var _$factory_1003 = __factory_1003;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1003 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.
*
* @name pareto1
* @type {PRNG}
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {NonNegativeNumber} pseudorandom number
*
* @example
* var v = pareto1( 2.0, 3.0 );
* // returns <number>
*
* @example
* var v = pareto1( -2.0, 3.0 );
* // returns NaN
*/
var pareto1 = _$factory_1003();


// EXPORTS //

var _$pareto1_1005 = pareto1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distributed pseudorandom numbers.
*
* @module @stdlib/random/base/pareto-type1
*
* @example
* var pareto1 = require( '@stdlib/random/base/pareto-type1' );
*
* var v = pareto1( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/pareto-type1' ).factory;
* var pareto1 = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = pareto1();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/pareto-type1' ).factory;
* var pareto1 = factory({
*     'seed': 297
* });
*
* var v = pareto1( 3.0, 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pareto1_1005 = require( './main.js' ); */;
/* removed: var _$factory_1003 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$pareto1_1005, 'factory', _$factory_1003 );


// EXPORTS //

var _$pareto1_1004 = _$pareto1_1005;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1114 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1114 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rpareto = _$pareto1_1004.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta  - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1114( alpha, beta, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1114( alpha ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+alpha+'`.' );
	}
	if ( !__isPositiveNumber_1114( beta ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+beta+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1114( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rpareto( alpha, beta, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rpareto( alpha, beta );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1114( alpha, beta, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1114 = __iterator_1114;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.
*
* @module @stdlib/random/iter/pareto-type1
*
* @example
* var iterator = require( '@stdlib/random/iter/pareto-type1' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1114 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1113 = _$iterator_1114;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositive_1116 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1116 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rpois = _$poisson_1009.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1116( lambda, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositive_1116( lambda ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+lambda+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1116( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rpois( lambda, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rpois( lambda );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1116( lambda, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1116 = __iterator_1116;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Poisson distribution.
*
* @module @stdlib/random/iter/poisson
*
* @example
* var iterator = require( '@stdlib/random/iter/poisson' );
*
* var iter = iterator( 1.5 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1116 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1115 = _$iterator_1116;

var _$defaults_1014={
	"name": "mt19937",
	"copy": true
}

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var prngs = {};

prngs[ 'minstd' ] = _$minstd_987;
prngs[ 'minstd-shuffle' ] = _$minstd_983;
prngs[ 'mt19937' ] = _$mt19937_991;


// EXPORTS //

var _$prngs_1018 = prngs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_1015 = _$isBoolean_108.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$defaults_1014 = require( './defaults.json' ); */;
/* removed: var _$prngs_1018 = require( './prngs.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers having integer values.
*
* @param {Options} [options] - function options
* @param {string} [options.name='mt19937'] - name of pseudorandom number generator
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {*} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide the name of a supported pseudorandom number generator
* @returns {PRNG} pseudorandom number generator
*
* @example
* var randi = factory();
* var v = randi();
* // returns <number>
*
* @example
* var randi = factory({
*     'name': 'minstd'
* });
* var v = randi();
* // returns <number>
*
* @example
* var randi = factory({
*     'seed': 12345
* });
* var v = randi();
* // returns <number>
*
* @example
* var randi = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
* var v = randi();
* // returns <number>
*/
function __factory_1015( options ) {
	var opts;
	var rand;
	var prng;

	opts = {
		'name': _$defaults_1014.name,
		'copy': _$defaults_1014.copy
	};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'name' ) ) {
			opts.name = options.name;
		}
		if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( opts.state === void 0 ) {
				throw new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );
			}
		} else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( opts.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_1015( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
		}
	}
	prng = _$prngs_1018[ opts.name ];
	if ( prng === void 0 ) {
		throw new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );
	}
	if ( opts.state === void 0 ) {
		if ( opts.seed === void 0 ) {
			rand = prng.factory();
		} else {
			rand = prng.factory({
				'seed': opts.seed
			});
		}
	} else {
		rand = prng.factory({
			'state': opts.state,
			'copy': opts.copy
		});
	}
	_$setNonEnumerableReadOnly_1359( randi, 'NAME', 'randi' );
	_$setNonEnumerableReadOnlyAccessor_1357( randi, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( randi, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( randi, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( randi, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( randi, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( randi, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( randi, 'PRNG', rand );
	_$setNonEnumerableReadOnly_1359( randi, 'MIN', rand.MIN );
	_$setNonEnumerableReadOnly_1359( randi, 'MAX', rand.MAX );

	return randi;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {*} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {*} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {*} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = randi.NAME + '-' + rand.NAME;
		out.state = _$toJSON_25( rand.state );
		out.params = [];
		return out;
	}

	/**
	* Returns a pseudorandom number having an integer value.
	*
	* @private
	* @returns {integer} pseudorandom number
	*
	* @example
	* var v = randi();
	* // returns <number>
	*/
	function randi() {
		return rand();
	}
}


// EXPORTS //

var _$factory_1015 = __factory_1015;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1015 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number having an integer value.
*
* @name randi
* @type {PRNG}
* @returns {integer} pseudorandom number
*
* @example
* var v = randi();
* // returns <number>
*/
var __randi_1017 = _$factory_1015();


// EXPORTS //

var _$randi_1017 = __randi_1017;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pseudorandom numbers having integer values.
*
* @module @stdlib/random/base/randi
*
* @example
* var randi = require( '@stdlib/random/base/randi' );
*
* var v = randi();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/randi' ).factory;
*
* var randi = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
*
* var v = randi();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$randi_1017 = require( './main.js' ); */;
/* removed: var _$factory_1015 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$randi_1017, 'factory', _$factory_1015 );


// EXPORTS //

var _$randi_1016 = _$randi_1017;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1118 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __randi_1118 = _$randi_1016.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers having integer values.
*
* @param {Options} [options] - function options
* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {*} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1118( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1118( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __randi_1118( opts );
		if ( opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __randi_1118();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1118( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {*} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {*} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {*} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1118 = __iterator_1118;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers having integer values.
*
* @module @stdlib/random/iter/randi
*
* @example
* var iterator = require( '@stdlib/random/iter/randi' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1118 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1117 = _$iterator_1118;

var _$defaults_1019={
	"name": "improved-ziggurat",
	"copy": true
}

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __prngs_1023 = {};

__prngs_1023[ 'box-muller' ] = _$randn_880;
__prngs_1023[ 'improved-ziggurat' ] = _$randn_948;


// EXPORTS //

var _$prngs_1023 = __prngs_1023;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_1020 = _$isBoolean_108.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$defaults_1019 = require( './defaults.json' ); */;
/* removed: var _$prngs_1023 = require( './prngs.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for numbers from a standard normal distribution.
*
* @param {Options} [options] - function options
* @param {string} [options.name='improved-ziggurat'] - name of pseudorandom number generator
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {*} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide the name of a supported pseudorandom number generator
* @returns {PRNG} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var v = randn();
* // returns <number>
*
* @example
* var randn = factory({
*     'name': 'box-muller'
* });
* var v = randn();
* // returns <number>
*
* @example
* var randn = factory({
*     'seed': 12345
* });
* var v = randn();
* // returns <number>
*
* @example
* var randn = factory({
*     'name': 'box-muller',
*     'seed': 12345
* });
* var v = randn();
* // returns <number>
*/
function __factory_1020( options ) {
	var opts;
	var rand;
	var prng;

	opts = {
		'name': _$defaults_1019.name,
		'copy': _$defaults_1019.copy
	};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'name' ) ) {
			opts.name = options.name;
		}
		if ( _$hasOwnProp_78( options, 'prng' ) ) {
			opts.prng = options.prng;
			if ( opts.prng === void 0 ) {
				throw new TypeError( 'invalid option. `prng` option cannot be undefined. Option: `' + opts.prng + '`.' );
			}
		} else if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( opts.state === void 0 ) {
				throw new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );
			}
		} else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( opts.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_1020( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
		}
	}
	prng = _$prngs_1023[ opts.name ];
	if ( prng === void 0 ) {
		throw new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );
	}
	if ( opts.prng === void 0 ) {
		if ( opts.state === void 0 ) {
			if ( opts.seed === void 0 ) {
				rand = prng.factory();
			} else {
				rand = prng.factory({
					'seed': opts.seed
				});
			}
		} else {
			rand = prng.factory({
				'state': opts.state,
				'copy': opts.copy
			});
		}
	} else {
		rand = prng.factory({
			'prng': opts.prng
		});
	}
	_$setNonEnumerableReadOnly_1359( normal, 'NAME', 'randn' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts.prng ) {
		_$setNonEnumerableReadOnly_1359( normal, 'seed', null );
		_$setNonEnumerableReadOnly_1359( normal, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( normal, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( normal, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( normal, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( normal, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( normal, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( normal, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( normal, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( normal, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( normal, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( normal, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( normal, 'PRNG', rand.PRNG );
	return normal;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {*} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {*} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {*} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = normal.NAME + '-' + rand.NAME;
		out.state = _$toJSON_25( rand.state );
		out.params = [];
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a standard normal distribution.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normal();
	* // returns <number>
	*/
	function normal() {
		return rand();
	}
}


// EXPORTS //

var _$factory_1020 = __factory_1020;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1020 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a standard normal random number.
*
* @name normal
* @type {PRNG}
* @returns {number} pseudorandom number
*
* @example
* var v = normal();
* // returns <number>
*/
var __normal_1022 = _$factory_1020();


// EXPORTS //

var _$normal_1022 = __normal_1022;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Standard normal pseudorandom numbers.
*
* @module @stdlib/random/base/randn
*
* @example
* var randn = require( '@stdlib/random/base/randn' );
*
* var v = randn();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/randn' ).factory;
*
* var randn = factory({
*     'name': 'box-muller',
*     'seed': 12345
* });
*
* var v = randn();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$normal_1022 = require( './main.js' ); */;
/* removed: var _$factory_1020 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$normal_1022, 'factory', _$factory_1020 );


// EXPORTS //

var _$randn_1021 = _$normal_1022;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1120 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __randn_1120 = _$randn_1021.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution.
*
* @param {Options} [options] - function options
* @param {string} [options.name='improved-ziggurat'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1120( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1120( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __randn_1120( opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __randn_1120();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1120( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1120 = __iterator_1120;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution.
*
* @module @stdlib/random/iter/randn
*
* @example
* var iterator = require( '@stdlib/random/iter/randn' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1120 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1119 = _$iterator_1120;

var _$defaults_1024={
	"name": "mt19937",
	"copy": true
}

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __prngs_1028 = {};

__prngs_1028[ 'minstd' ] = _$minstd_987;
__prngs_1028[ 'minstd-shuffle' ] = _$minstd_983;
__prngs_1028[ 'mt19937' ] = _$mt19937_991;


// EXPORTS //

var _$prngs_1028 = __prngs_1028;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isBoolean_1025 = _$isBoolean_108.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$defaults_1024 = require( './defaults.json' ); */;
/* removed: var _$prngs_1028 = require( './prngs.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating uniformly distributed random numbers on the interval \\( [0,1) \\).
*
* @param {Options} [options] - function options
* @param {string} [options.name='mt19937'] - name of pseudorandom number generator
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {*} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide the name of a supported pseudorandom number generator
* @returns {PRNG} pseudorandom number generator
*
* @example
* var uniform = factory();
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory({
*     'name': 'minstd'
* });
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory({
*     'seed': 12345
* });
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
* var v = uniform();
* // returns <number>
*/
function __factory_1025( options ) {
	var opts;
	var rand;
	var prng;

	opts = {
		'name': _$defaults_1024.name,
		'copy': _$defaults_1024.copy
	};
	if ( arguments.length ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'name' ) ) {
			opts.name = options.name;
		}
		if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( opts.state === void 0 ) {
				throw new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );
			}
		} else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( opts.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_1025( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
		}
	}
	prng = _$prngs_1028[ opts.name ];
	if ( prng === void 0 ) {
		throw new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );
	}
	if ( opts.state === void 0 ) {
		if ( opts.seed === void 0 ) {
			rand = prng.factory();
		} else {
			rand = prng.factory({
				'seed': opts.seed
			});
		}
	} else {
		rand = prng.factory({
			'state': opts.state,
			'copy': opts.copy
		});
	}
	_$setNonEnumerableReadOnly_1359( uniform, 'NAME', 'randu' );
	_$setNonEnumerableReadOnlyAccessor_1357( uniform, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( uniform, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( uniform, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( uniform, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( uniform, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( uniform, 'toJSON', toJSON );
	_$setNonEnumerableReadOnly_1359( uniform, 'PRNG', rand );
	_$setNonEnumerableReadOnly_1359( uniform, 'MIN', rand.normalized.MIN );
	_$setNonEnumerableReadOnly_1359( uniform, 'MAX', rand.normalized.MAX );

	return uniform;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {*} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {*} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {*} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = uniform.NAME + '-' + rand.NAME;
		out.state = _$toJSON_25( rand.state );
		out.params = [];
		return out;
	}

	/**
	* Returns a uniformly distributed pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform();
	* // returns <number>
	*/
	function uniform() {
		return rand.normalized();
	}
}


// EXPORTS //

var _$factory_1025 = __factory_1025;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1025 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a uniformly distributed random number on the interval \\( [0,1) \\).
*
* @name randu
* @type {PRNG}
* @returns {number} pseudorandom number
*
* @example
* var v = randu();
* // returns <number>
*/
var __randu_1027 = _$factory_1025();


// EXPORTS //

var _$randu_1027 = __randu_1027;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniformly distributed pseudorandom numbers on the interval \\( [0,1) \\).
*
* @module @stdlib/random/base/randu
*
* @example
* var randu = require( '@stdlib/random/base/randu' );
*
* var v = randu();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/randu' ).factory;
*
* var randu = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
*
* var v = randu();
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$randu_1027 = require( './main.js' ); */;
/* removed: var _$factory_1025 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$randu_1027, 'factory', _$factory_1025 );


// EXPORTS //

var _$randu_1026 = _$randu_1027;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1122 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __randu_1122 = _$randu_1026.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating uniformly distributed pseudorandom numbers between 0 and 1.
*
* @param {Options} [options] - function options
* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {*} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1122( options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( arguments.length > 0 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1122( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __randu_1122( opts );
		if ( opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __randu_1122();
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
	_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
	_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1122( opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {*} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {*} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {*} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1122 = __iterator_1122;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating uniformly distributed pseudorandom numbers between 0 and 1.
*
* @module @stdlib/random/iter/randu
*
* @example
* var iterator = require( '@stdlib/random/iter/randu' );
*
* var iter = iterator();
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1122 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1121 = _$iterator_1122;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number from a Rayleigh distribution with scale parameter `sigma`.
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} pseudorandom number
*/
function rayleigh( rand, sigma ) {
	return sigma * _$sqrt_625( -2.0*_$ln_561( rand() ) );
}


// EXPORTS //

var _$rayleigh_1032 = rayleigh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
var __isPositive_1029 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_1029 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$rayleigh_1032 = require( './rayleigh.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Rayleigh distributed random numbers.
*
* @param {PositiveNumber} [sigma] - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var rayleigh = factory( 1.0 );
*
* var v = rayleigh();
* // returns <number>
*
* @example
* var rayleigh = factory( 0.5, {
*     'seed': 297
* });
* var v = rayleigh();
* // returns <number>
*
* @example
* var rayleigh = factory();
* var v = rayleigh( 0.5 );
* // returns <number>
*/
function __factory_1029() {
	var sigma;
	var opts;
	var rand;
	var prng;

	if ( arguments.length === 0 ) {
		rand = __randu_1029();
	} else if (
		arguments.length === 1 &&
		_$isPlainObject_172( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_1029( opts );
		}
	} else {
		sigma = arguments[ 0 ];
		if ( !__isPositive_1029( sigma ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + sigma + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_1029( opts );
			}
		} else {
			rand = __randu_1029();
		}
	}
	if ( sigma === void 0 ) {
		prng = rayleigh2;
	} else {
		prng = rayleigh1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'rayleigh' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( sigma === void 0 ) {
			out.params = [];
		} else {
			out.params = [ sigma ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number from a Rayleigh distribution with bound scale parameter `sigma`.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = rayleigh1();
	* // returns <number>
	*/
	function rayleigh1() {
		return _$rayleigh_1032( rand, sigma );
	}

	/**
	* Returns a pseudorandom number from a Rayleigh distribution with scale parameter `sigma`.
	*
	* @private
	* @param {PositiveNumber} sigma - scale parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = rayleigh2( 3.0 );
	* // returns <number>
	*/
	function rayleigh2( sigma ) {
		if (
			_$isnan_370( sigma ) ||
			sigma <= 0.0
		) {
			return NaN;
		}
		return _$rayleigh_1032( rand, sigma );
	}
}


// EXPORTS //

var _$factory_1029 = __factory_1029;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1029 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Rayleigh distribution with scale parameter `sigma`.
*
* @name rayleigh
* @type {Function}
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} pseudorandom number
*
* @example
* var v = rayleigh( 3.0 );
* // returns <number>
*
* @example
* var v = rayleigh( 0.0 );
* // returns NaN
*
* @example
* var v = rayleigh( NaN );
* // returns NaN
*/
var __rayleigh_1031 = _$factory_1029();


// EXPORTS //

var _$rayleigh_1031 = __rayleigh_1031;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distributed pseudorandom numbers.
*
* @module @stdlib/random/base/rayleigh
*
* @example
* var rayleigh = require( '@stdlib/random/base/rayleigh' );
*
* var v = rayleigh( 2.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/rayleigh' ).factory;
* var rayleigh = factory( 3.0, {
*     'seed': 297
* });
*
* var v = rayleigh();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/rayleigh' ).factory;
* var rayleigh = factory({
*     'seed': 297
* });
*
* var v = rayleigh( 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$rayleigh_1031 = require( './main.js' ); */;
/* removed: var _$factory_1029 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$rayleigh_1031, 'factory', _$factory_1029 );


// EXPORTS //

var _$rayleigh_1030 = _$rayleigh_1031;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositive_1124 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1124 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rrayleigh = _$rayleigh_1030.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Rayleigh distribution.
*
* @param {PositiveNumber} sigma - scale parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1124( sigma, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositive_1124( sigma ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+sigma+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1124( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rrayleigh( sigma, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rrayleigh( sigma );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1124( sigma, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1124 = __iterator_1124;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Rayleigh distribution.
*
* @module @stdlib/random/iter/rayleigh
*
* @example
* var iterator = require( '@stdlib/random/iter/rayleigh' );
*
* var iter = iterator( 1.5 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1124 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1123 = _$iterator_1124;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositive_1033 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
var __isBoolean_1033 = _$isBoolean_108.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __chisquare_1033 = _$chisquare_894.factory;
var __randn_1033 = _$randn_948.factory;
/* removed: var _$gcopy_206 = require( '@stdlib/blas/base/gcopy' ); */;
/* removed: var _$ctor_41 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating t-distributed random numbers.
*
* @param {PositiveNumber} [v] - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `v` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var t = factory( 1.0 );
*
* var v = t();
* // returns <number>
*
* @example
* var t = factory( 0.5, {
*     'seed': 297
* });
* var v = t();
* // returns <number>
*
* @example
* var t = factory();
* var v = t( 0.5 );
* // returns <number>
*/
function __factory_1033() {
	var rchisq;
	var STATE;
	var rnorm;
	var rand;
	var opts;
	var prng;
	var FLG;
	var v;

	FLG = true;
	if ( arguments.length === 0 ) {
		opts = {
			'copy': false
		};
		rnorm = __randn_1033( opts );
	} else if ( arguments.length === 1 ) {
		if ( _$isPlainObject_172( arguments[ 0 ] ) ) {
			opts = arguments[ 0 ];
			if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_1033( opts.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rnorm = __randn_1033({
					'prng': opts.prng
				});
			} else {
				if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
					throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
				}
				opts = _$copy_1353( opts, 1 );
				if ( opts.copy === false ) {
					FLG = false;
				} else if ( opts.state ) {
					opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
				}
				opts.copy = false;
				rnorm = __randn_1033( opts );
			}
		} else {
			v = arguments[ 0 ];
			if ( !__isPositive_1033( v ) ) {
				throw new TypeError( 'invalid argument. First argument must be a positive number or an options object. Value: `' + v + '`.' );
			}
			opts = {
				'copy': false
			};
			rnorm = __randn_1033( opts );
		}
	} else {
		v = arguments[ 0 ];
		if ( !__isPositive_1033( v ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + v + '`.' );
		}
		opts = arguments[ 1 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'copy' ) && !__isBoolean_1033( opts.copy ) ) {
			throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rnorm = __randn_1033({
				'prng': opts.prng
			});
		} else {
			if ( _$hasOwnProp_78( opts, 'state' ) && !_$isUint32Array_198( opts.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );
			}
			opts = _$copy_1353( opts, 1 );
			if ( opts.copy === false ) {
				FLG = false;
			} else if ( opts.state ) {
				opts.state = _$gcopy_206( opts.state.length, opts.state, 1, new _$ctor_41( opts.state.length ), 1 ); // eslint-disable-line max-len
			}
			opts.copy = false;
			rnorm = __randn_1033( opts );
		}
	}
	if ( opts && opts.prng ) {
		if ( v === void 0 ) {
			rchisq = __chisquare_1033({
				'prng': opts.prng
			});
		} else {
			rchisq = __chisquare_1033( v, {
				'prng': opts.prng
			});
		}
	} else {
		if ( opts.state ) {
			STATE = opts.state;
		} else {
			STATE = rnorm.state;
			rnorm.state = STATE; // updates the underlying PRNG to point to a shared state
		}
		if ( v === void 0 ) {
			rchisq = __chisquare_1033({
				'state': STATE,
				'copy': false
			});
		} else {
			rchisq = __chisquare_1033( v, {
				'state': STATE,
				'copy': false
			});
		}
	}
	if ( v === void 0 ) {
		prng = t2;
	} else {
		prng = t1;
	}
	rand = rnorm.PRNG;

	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 't' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
	}
	_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		if ( !_$isUint32Array_198( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		if ( FLG ) {
			s = _$gcopy_206( s.length, s, 1, new _$ctor_41( s.length ), 1 );
		}
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( v === void 0 ) {
			out.params = [];
		} else {
			out.params = [ v ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = t1();
	* // returns <number>
	*/
	function t1() {
		return rnorm() / _$sqrt_625( rchisq() / v );
	}

	/**
	* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.
	*
	* @private
	* @param {PositiveNumber} v - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = t2( 3.0 );
	* // returns <number>
	*
	* @example
	* var v = t2( 0.0 );
	* // returns NaN
	*
	* @example
	* var v = t2( -1.5 );
	* // returns NaN
	*/
	function t2( v ) {
		if (
			_$isnan_370( v ) ||
			v <= 0.0
		) {
			return NaN;
		}
		return rnorm() / _$sqrt_625( rchisq( v ) / v );
	}
}


// EXPORTS //

var _$factory_1033 = __factory_1033;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1033 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.
*
* @name t
* @type {PRNG}
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} pseudorandom number
*
* @example
* var v = t( 3.0 );
* // returns <number>
*
* @example
* var v = t( 0.0 );
* // returns NaN
*
* @example
* var v = t( NaN );
* // returns NaN
*/
var t = _$factory_1033();


// EXPORTS //

var _$t_1035 = t;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t-distributed pseudorandom numbers.
*
* @module @stdlib/random/base/t
*
* @example
* var t = require( '@stdlib/random/base/t' );
*
* var v = t( 2.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/t' ).factory;
* var t = factory( 3.0, {
*     'seed': 297
* });
*
* var v = t();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/t' ).factory;
* var t = factory({
*     'seed': 297
* });
*
* var v = t( 2.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$t_1035 = require( './main.js' ); */;
/* removed: var _$factory_1033 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$t_1035, 'factory', _$factory_1033 );


// EXPORTS //

var _$t_1034 = _$t_1035;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositive_1126 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1126 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rt = _$t_1034.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} first argument must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1126( v, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositive_1126( v ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+v+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1126( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rt( v, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rt( v );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1126( v, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1126 = __iterator_1126;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Student's t distribution.
*
* @module @stdlib/random/iter/t
*
* @example
* var iterator = require( '@stdlib/random/iter/t' );
*
* var iter = iterator( 1.5 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1126 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1125 = _$iterator_1126;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_1040 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0, 1.3 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1040( a, b, c ) {
	if ( !__isNumber_1040( a ) || _$isnan_150( a ) ) {
		return new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isNumber_1040( b ) || _$isnan_150( b ) ) {
		return new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( !__isNumber_1040( c ) || _$isnan_150( c ) ) {
		return new TypeError( 'invalid argument. Third argument must be a number primitive and not `NaN`. Value: `'+c+'`.' );
	}
	if ( !(a <= c && c <= b) ) {
		return new RangeError( 'invalid arguments. The condition `a <= c <= b` must be satisfied. Value: `['+a+','+b+','+c+']`.');
	}
	return null;
}


// EXPORTS //

var _$validate_1040 = __validate_1040;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} pseudorandom number
*/
function triangular( rand, a, b, c ) {
	var fc;
	var x;
	var u;
	fc = (c - a) / (b - a);
	u = rand();
	if ( u < fc ) {
		x = (b - a) * (c - a);
		return a + _$sqrt_625( x * u );
	}
	x = (b - a) * (b - c);
	return b - _$sqrt_625( x * (1.0 - u) );
}


// EXPORTS //

var _$triangular_1039 = triangular;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_1036 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_1040 = require( './validate.js' ); */;
/* removed: var _$triangular_1039 = require( './triangular.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers drawn from a triangular distribution.
*
* @param {number} [a] - minimum support
* @param {number} [b] - maximum support
* @param {number} [c] - mode
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {TypeError} `c` must be a number
* @throws {RangeError} arguments must satisfy `a <= c <= b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var triangular = factory( 0.0, 1.0, 0.8 );
*
* var v = triangular();
* // returns <number>
*
* @example
* var triangular = factory( -3.0, -1.0, -2.0, {
*     'seed': 297
* });
* var v = triangular();
* // returns <number>
*/
function __factory_1036() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;
	var c;

	if ( arguments.length === 0 ) {
		rand = __randu_1036();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_1036( opts );
		}
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		c = arguments[ 2 ];
		err = _$validate_1040( a, b, c );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 3 ) {
			opts = arguments[ 3 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_1036( opts );
			}
		} else {
			rand = __randu_1036();
		}
	}
	if ( a === void 0 ) {
		prng = triangular2;
	} else {
		prng = triangular1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'triangular' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( a === void 0 ) {
			out.params = [];
		} else {
			out.params = [ a, b, c ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a triangular distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = triangular1();
	* // returns <number>
	*/
	function triangular1() {
		return _$triangular_1039( rand, a, b, c );
	}

	/**
	* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b`, and mode `c`.
	*
	* @private
	* @param {number} a - minimum support
	* @param {number} b - maximum support
	* @param {number} c - mode
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = triangular2( 0.0, 1.0, 0.5 );
	* // returns <number>
	*
	* @example
	* var v = triangular2( 1.0, 0.0, 0.5 );
	* // returns NaN
	*
	* @example
	* var v = triangular2( 1.0, 2.0, NaN );
	* // returns NaN
	*/
	function triangular2( a, b, c ) {
		if (
			_$isnan_370( a ) ||
			_$isnan_370( b ) ||
			_$isnan_370( c ) ||
			!(a <= c && c <= b)
		) {
			return NaN;
		}
		return _$triangular_1039( rand, a, b, c );
	}
}


// EXPORTS //

var _$factory_1036 = __factory_1036;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1036 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b`, and mode `c`.
*
* @name triangular
* @type {PRNG}
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} pseudorandom number
*
* @example
* var v = triangular( 0.0, 1.0, 0.5 );
* // returns <number>
*/
var __triangular_1038 = _$factory_1036();


// EXPORTS //

var _$triangular_1038 = __triangular_1038;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distributed pseudorandom numbers.
*
* @module @stdlib/random/base/triangular
*
* @example
* var triangular = require( '@stdlib/random/base/triangular' );
*
* var v = triangular( 0.0, 10.0, 7.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/triangular' ).factory;
* var triangular = factory( -5.0, 5.0, 3.0, {
*     'seed': 297
* });
*
* var v = triangular();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/triangular' ).factory;
* var triangular = factory({
*     'seed': 297
* });
*
* var v = triangular( -5.0, 5.0, 3.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$triangular_1038 = require( './main.js' ); */;
/* removed: var _$factory_1036 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$triangular_1038, 'factory', _$factory_1036 );


// EXPORTS //

var _$triangular_1037 = _$triangular_1038;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1128 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1128 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rtriangular = _$triangular_1037.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} arguments must satisfy `a <= c <= b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1128( a, b, c, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1128( a ) || _$isnan_370( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isNumber_1128( b ) || _$isnan_370( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( !__isNumber_1128( c ) || _$isnan_370( c ) ) {
		throw new TypeError( 'invalid argument. Third argument must be a number primitive and not `NaN`. Value: `'+c+'`.' );
	}
	if ( !(a <= c && c <= b) ) {
		throw new RangeError( 'invalid arguments. The condition `a <= c <= b` must be satisfied. Value: `['+a+','+b+','+c+']`.');
	}
	if ( arguments.length > 3 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1128( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rtriangular( a, b, c, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rtriangular( a, b, c );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1128( a, b, c, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1128 = __iterator_1128;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a triangular distribution.
*
* @module @stdlib/random/iter/triangular
*
* @example
* var iterator = require( '@stdlib/random/iter/triangular' );
*
* var iter = iterator( 2.0, 5.0, 3.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1128 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1127 = _$iterator_1128;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_1045 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_150 = require( '@stdlib/assert/is-nan' ); */;


// MAIN //

/**
* Validates values provided for minimum and maximum support.
*
* @private
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1045( a, b ) {
	if ( !__isNumber_1045( a ) || _$isnan_150( a ) ) {
		return new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isNumber_1045( b ) || _$isnan_150( b ) ) {
		return new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a >= b ) {
		return new RangeError( 'invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `['+a+','+b+']`.');
	}
	return null;
}


// EXPORTS //

var _$validate_1045 = __validate_1045;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} a - minimum support (inclusive)
* @param {number} b - maximum support (exclusive)
* @returns {number} pseudorandom number
*/
function uniform( rand, a, b ) {
	var r = rand();
	return ( b*r ) + ( (1.0-r)*a ); // equivalent to (b-a)*r + a
}


// EXPORTS //

var _$uniform_1044 = uniform;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_1041 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_1045 = require( './validate.js' ); */;
/* removed: var _$uniform_1044 = require( './uniform.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating uniformly distributed random numbers.
*
* @param {number} [a] - minimum support (inclusive)
* @param {number} [b] - maximum support (exclusive)
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var uniform = factory( 0.0, 1.0 );
*
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory( -3.0, -1.0, {
*     'seed': 297
* });
* var v = uniform();
* // returns <number>
*/
function __factory_1041() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = __randu_1041();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_1041( opts );
		}
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = _$validate_1045( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+opts+'`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_1041( opts );
			}
		} else {
			rand = __randu_1041();
		}
	}
	if ( a === void 0 ) {
		prng = uniform2;
	} else {
		prng = uniform1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'uniform' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( a === void 0 ) {
			out.params = [];
		} else {
			out.params = [ a, b ];
		}
		return out;
	}

	/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform1();
	* // returns <number>
	*/
	function uniform1() {
		return _$uniform_1044( rand, a, b );
	}

	/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {number} a - minimum support (inclusive)
	* @param {number} b - maximum support (exclusive)
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform2( 0.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = uniform2( 1.0, 0.0 );
	* // returns NaN
	*/
	function uniform2( a, b ) {
		if (
			_$isnan_370( a ) ||
			_$isnan_370( b ) ||
			a >= b
		) {
			return NaN;
		}
		return _$uniform_1044( rand, a, b );
	}
}


// EXPORTS //

var _$factory_1041 = __factory_1041;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1041 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
*
* @name uniform
* @type {PRNG}
* @param {number} a - minimum support (inclusive)
* @param {number} b - maximum support (exclusive)
* @returns {number} pseudorandom number
*
* @example
* var v = uniform( 0.0, 1.0 );
* // returns <number>
*/
var __uniform_1043 = _$factory_1041();


// EXPORTS //

var _$uniform_1043 = __uniform_1043;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution pseudorandom numbers.
*
* @module @stdlib/random/base/uniform
*
* @example
* var uniform = require( '@stdlib/random/base/uniform' );
*
* var v = uniform( 0.0, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/uniform' ).factory;
* var uniform = factory( -5.0, 5.0, {
*     'seed': 297
* });
*
* var v = uniform();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/uniform' ).factory;
* var uniform = factory({
*     'seed': 297
* });
*
* var v = uniform( -5.0, 5.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$uniform_1043 = require( './main.js' ); */;
/* removed: var _$factory_1041 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$uniform_1043, 'factory', _$factory_1041 );


// EXPORTS //

var _$uniform_1042 = _$uniform_1043;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isNumber_1130 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1130 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var __runif_1130 = _$uniform_1042.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a continuous uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1130( a, b, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isNumber_1130( a ) || _$isnan_370( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !__isNumber_1130( b ) || _$isnan_370( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a >= b ) {
		throw new RangeError( 'invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `['+a+','+b+']`.');
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1130( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = __runif_1130( a, b, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = __runif_1130( a, b );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1130( a, b, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1130 = __iterator_1130;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a continuous uniform distribution.
*
* @module @stdlib/random/iter/uniform
*
* @example
* var iterator = require( '@stdlib/random/iter/uniform' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1130 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1129 = _$iterator_1130;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositive_1049 = _$isPositiveNumber_178.isPrimitive;


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1049( k, lambda ) {
	if ( !__isPositive_1049( k ) ) {
		return new TypeError( 'invalid argument. Scale parameter must be a positive number. Value: `' + k + '`.' );
	}
	if ( !__isPositive_1049( lambda ) ) {
		return new TypeError( 'invalid argument. Shape parameter must be a positive number. Value: `' + lambda + '`.' );
	}
	return null;
}


// EXPORTS //

var _$validate_1049 = __validate_1049;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_579 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Weibull distribution.
*
* @private
* @param {PRNG} rand - PRNG for generating uniformly distributed numbers
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {NonNegativeNumber} pseudorandom number
*/
function weibull( rand, k, lambda ) {
	return lambda * _$pow_579( -_$ln_561( 1.0-rand() ), 1.0/k );
}


// EXPORTS //

var _$weibull_1050 = weibull;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
var __randu_1046 = _$mt19937_991.factory;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toJSON_25 = require( '@stdlib/array/to-json' ); */;
/* removed: var _$validate_1049 = require( './validate.js' ); */;
/* removed: var _$weibull_1050 = require( './weibull.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number generator for generating Weibull distributed random numbers.
*
* @param {PositiveNumber} [k] - scale parameter
* @param {PositiveNumber} [lambda] - shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var weibull = factory( 2.0, 1.0 );
*
* var v = weibull();
* // returns <number>
*
* @example
* var weibull = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = weibull();
* // returns <number>
*/
function __factory_1046() {
	var lambda;
	var opts;
	var rand;
	var prng;
	var err;
	var k;

	if ( arguments.length === 0 ) {
		rand = __randu_1046();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !_$isPlainObject_172( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		if ( _$hasOwnProp_78( opts, 'prng' ) ) {
			if ( !_$isFunction_132( opts.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
			}
			rand = opts.prng;
		} else {
			rand = __randu_1046( opts );
		}
	} else {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		err = _$validate_1049( lambda, k );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !_$isPlainObject_172( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			if ( _$hasOwnProp_78( opts, 'prng' ) ) {
				if ( !_$isFunction_132( opts.prng ) ) {
					throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );
				}
				rand = opts.prng;
			} else {
				rand = __randu_1046( opts );
			}
		} else {
			rand = __randu_1046();
		}
	}
	if ( lambda === void 0 ) {
		prng = weibull2;
	} else {
		prng = weibull1;
	}
	_$setNonEnumerableReadOnly_1359( prng, 'NAME', 'weibull' );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( prng, 'seed', null );
		_$setNonEnumerableReadOnly_1359( prng, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( prng, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', _$constantFunction_1348( null ) );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( prng, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( prng, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( prng, 'toJSON', toJSON );
		_$setNonEnumerableReadOnly_1359( prng, 'PRNG', rand );
		rand = rand.normalized;
	}
	return prng;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/
	function toJSON() {
		var out = {};
		out.type = 'PRNG';
		out.name = prng.NAME;
		out.state = _$toJSON_25( rand.state );
		if ( k === void 0 ) {
			out.params = [];
		} else {
			out.params = [ k, lambda ];
		}
		return out;
	}

	/**
	* Returns a pseudorandom number drawn from a Weibull distribution.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = weibull1();
	* // returns <number>
	*/
	function weibull1() {
		return _$weibull_1050( rand, k, lambda );
	}

	/**
	* Returns a pseudorandom number drawn from a Weibull distribution.
	*
	* @private
	* @param {PositiveNumber} k - scale parameter
	* @param {PositiveNumber} lambda - shape parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = weibull2( 2.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = weibull2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = weibull2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = weibull2( NaN, NaN );
	* // returns NaN
	*/
	function weibull2( k, lambda ) {
		if (
			_$isnan_370( k ) ||
			_$isnan_370( lambda ) ||
			k <= 0.0 ||
			lambda <= 0.0
		) {
			return NaN;
		}
		return _$weibull_1050( rand, k, lambda );
	}
}


// EXPORTS //

var _$factory_1046 = __factory_1046;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$factory_1046 = require( './factory.js' ); */;


// MAIN //

/**
* Returns a pseudorandom number drawn from a Weibull distribution.
*
* @name weibull
* @type {PRNG}
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {NonNegativeNumber} pseudorandom number
*
* @example
* var v = weibull( 2.0, 3.0 );
* // returns <number>
*
* @example
* var v = weibull( -2.0, 3.0 );
* // returns NaN
*/
var __weibull_1048 = _$factory_1046();


// EXPORTS //

var _$weibull_1048 = __weibull_1048;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distributed pseudorandom numbers.
*
* @module @stdlib/random/base/weibull
*
* @example
* var weibull = require( '@stdlib/random/base/weibull' );
*
* var v = weibull( 2.0, 3.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/weibull' ).factory;
* var weibull = factory( 2.0, 3.0, {
*     'seed': 297
* });
*
* var v = weibull();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/weibull' ).factory;
* var weibull = factory({
*     'seed': 297
* });
*
* var v = weibull( 2.0, 3.0 );
* // returns <number>
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$weibull_1048 = require( './main.js' ); */;
/* removed: var _$factory_1046 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$weibull_1048, 'factory', _$factory_1046 );


// EXPORTS //

var _$weibull_1047 = _$weibull_1048;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
var __isPositiveNumber_1132 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
var __isNonNegativeInteger_1132 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$FLOAT64_MAX_232 = require( '@stdlib/constants/math/float64-max' ); */;
var rweibull = _$weibull_1047.factory;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;


// MAIN //

/**
* Returns an iterator for generating pseudorandom numbers drawn from a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda  - shape parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/
function __iterator_1132( k, lambda, options ) {
	var opts;
	var iter;
	var rand;
	var FLG;
	var i;
	if ( !__isPositiveNumber_1132( k ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `'+k+'`.' );
	}
	if ( !__isPositiveNumber_1132( lambda ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `'+lambda+'`.' );
	}
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = _$copy_1353( options, 1 );
		if ( _$hasOwnProp_78( opts, 'iter' ) ) {
			if ( !__isNonNegativeInteger_1132( opts.iter ) ) {
				throw new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `'+opts.iter+'`.' );
			}
		} else {
			opts.iter = _$FLOAT64_MAX_232;
		}
		rand = rweibull( k, lambda, opts );
		if ( opts.prng === void 0 && opts.copy !== false ) {
			opts.state = rand.state; // cache a copy of the PRNG state
		}
	} else {
		rand = rweibull( k, lambda );
		opts = {
			'iter': _$FLOAT64_MAX_232,
			'state': rand.state // cache a copy of the PRNG state
		};
	}
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	if ( opts && opts.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
	}
	_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rand.PRNG );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		return {
			'value': rand(),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return __iterator_1132( k, lambda, opts );
	}

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rand.PRNG.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rand.PRNG.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rand.PRNG.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rand.PRNG.byteLength;
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rand.PRNG.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rand.PRNG.state = s;
	}
}


// EXPORTS //

var _$iterator_1132 = __iterator_1132;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator for generating pseudorandom numbers drawn from a Weibull distribution.
*
* @module @stdlib/random/iter/weibull
*
* @example
* var iterator = require( '@stdlib/random/iter/weibull' );
*
* var iter = iterator( 2.0, 5.0 );
*
* var r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* r = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterator_1132 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1131 = _$iterator_1132;

var _$defaults_1135={
	"copy": true
}

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveNumber_1137 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isBoolean_1137 = _$isBoolean_108.isPrimitive;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
var __randn_1137 = _$randn_948.factory;
/* removed: var _$defaults_1135 = require( './defaults.json' ); */;


// MAIN //

/**
* Returns an iterator which introduces additive white Gaussian noise with standard deviation `sigma`.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveNumber} sigma - standard deviation of the noise
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates pseudorandom numbers drawn from a standard normal distribution
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive number
* @throws {TypeError} third argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
*
* var sine = iterSineWave({
*     'iter': 100
* });
*
* var it = iterawgn( sine, 0.5 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function iterawgn( iterator, sigma, options ) {
	var rnorm;
	var opts;
	var iter;
	var FLG;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveNumber_1137( sigma ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `' + sigma + '`.' );
	}
	opts = _$copy_1353( _$defaults_1135 );
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Third argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_1137( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'prng' ) ) {
			if ( !_$isFunction_132( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			rnorm = options.prng;
		}
		// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.
		else if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( !_$isUint32Array_198( options.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );
			}
		}
		// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.
		else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( options.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );
			}
		}
	}
	if ( rnorm === void 0 ) {
		rnorm = __randn_1137( opts );
	}
	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( options && options.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'PRNG', null );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rnorm.PRNG );
	}

	return iter;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rnorm.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rnorm.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rnorm.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rnorm.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rnorm.state;
	}

	/**
	* Sets the PRNG state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rnorm.state = s;
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = v.value + ( sigma*rnorm() );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = NaN;
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterawgn( iterator[ _$IteratorSymbol_1345 ](), sigma, opts );
	}
}


// EXPORTS //

var _$iterawgn_1137 = iterawgn;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which introduces additive white Gaussian noise (AWGN).
*
* @module @stdlib/simulate/iter/awgn
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
* var iterawgn = require( '@stdlib/simulate/iter/awgn' );
*
* var sine = iterSineWave({
*     'iter': 100
* });
*
* var it = iterawgn( sine, 0.5 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterawgn_1137 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1136 = _$iterawgn_1137;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two
* @type {number}
*
* @example
* var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
* // returns 1.4142135623730951
*/


// MAIN //

/**
* Square root of `2`.
*
* ```tex
* \sqrt{2}
* ```
*
* @constant
* @type {number}
* @default 1.4142135623730951
*/
var SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len


// EXPORTS //

var _$SQRT2_244 = SQRT2;

var _$defaults_1138={
	"copy": true
}

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveNumber_1140 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isBoolean_1140 = _$isBoolean_108.isPrimitive;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
var __laplace_1140 = _$laplace_962.factory;
/* removed: var _$SQRT2_244 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$defaults_1138 = require( './defaults.json' ); */;


// MAIN //

/**
* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.
*
* ## Method
*
* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by
*
*     ```tex
*     \operatorname{Var} = 2b^2
*     ```
*
*     where \\( b \\) is the distribution scale parameter.
*
* -   Accordingly, the standard deviation is then
*
*     ```tex
*     \sigma = b\sqrt{2}
*     ```
*
* -   Solving for \\( b \\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\( \sigma \\)
*
*     ```tex
*     b = \frac{\sigma}{\sqrt{2}}
*     ```
*
* @param {Iterator} iterator - input iterator
* @param {PositiveNumber} sigma - standard deviation of the noise
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive number
* @throws {TypeError} third argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
*
* var sine = iterSineWave({
*     'iter': 100
* });
*
* var it = iterawln( sine, 0.5 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function iterawln( iterator, sigma, options ) {
	var rlaplace;
	var opts;
	var iter;
	var FLG;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveNumber_1140( sigma ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `' + sigma + '`.' );
	}
	opts = _$copy_1353( _$defaults_1138 );
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Third argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_1140( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'prng' ) ) {
			if ( !_$isFunction_132( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			opts.prng = options.prng;
		}
		// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.
		else if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( !_$isUint32Array_198( options.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );
			}
		}
		// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.
		else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( options.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );
			}
		}
	}
	rlaplace = __laplace_1140( 0.0, sigma/_$SQRT2_244, opts );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( options && options.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'PRNG', options.prng );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( iter, 'PRNG', rlaplace.PRNG );
	}
	return iter;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return rlaplace.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return rlaplace.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return rlaplace.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return rlaplace.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return rlaplace.state;
	}

	/**
	* Sets the PRNG state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		rlaplace.state = s;
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = v.value + rlaplace();
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = NaN;
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterawln( iterator[ _$IteratorSymbol_1345 ](), sigma, opts );
	}
}


// EXPORTS //

var _$iterawln_1140 = iterawln;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which introduces additive white Laplacian noise (AWLN).
*
* @module @stdlib/simulate/iter/awln
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
* var iterawln = require( '@stdlib/simulate/iter/awln' );
*
* var sine = iterSineWave({
*     'iter': 100
* });
*
* var it = iterawln( sine, 0.5 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterawln_1140 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1139 = _$iterawln_1140;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of `3`.
*
* @module @stdlib/constants/math/float64-sqrt-three
* @type {number}
*
* @example
* var SQRT3 = require( '@stdlib/constants/math/float64-sqrt-three' );
* // returns 1.7320508075688772
*/


// MAIN //

/**
* Square root of `3`.
*
* ```tex
* \sqrt{3}
* ```
*
* @constant
* @type {number}
* @default 1.7320508075688772
*/
var SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00;


// EXPORTS //

var _$SQRT3_242 = SQRT3;

var _$defaults_1141={
	"copy": true
}

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1357 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$setNonEnumerableReadWriteAccessor_1361 = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveNumber_1143 = _$isPositiveNumber_178.isPrimitive;
/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
var __isBoolean_1143 = _$isBoolean_108.isPrimitive;
/* removed: var _$isUint32Array_198 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$copy_1353 = require( '@stdlib/utils/copy' ); */;
/* removed: var _$noop_1408 = require( '@stdlib/utils/noop' ); */;
/* removed: var _$constantFunction_1348 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
var __randu_1143 = _$uniform_1042.factory;
/* removed: var _$SQRT3_242 = require( '@stdlib/constants/math/float64-sqrt-three' ); */;
/* removed: var _$defaults_1141 = require( './defaults.json' ); */;


// MAIN //

/**
* Returns an iterator which introduces additive white uniform noise with standard deviation `sigma`.
*
* ## Method
*
* -   The variance of a uniform distribution is given by
*
*     ```tex
*     \operatorname{Var} = \frac{(b-a)^2}{12}
*     ```
*
*     where \\( a \\) is the minimum support and \\( b \\) is the maximum support.
*
* -   Accordingly, to generate uniform noise having zero mean and a desired standard deviation, we let \\( a = -b \\) and solve for \\( b \\).
*
*     ```tex
*     \begin{align*}
*     \sigma &= \frac{b-a}{\sqrt{12}} \\
*     \sigma \sqrt{12} &= b - a \\
*     2 \sigma \sqrt{3} &= b - (-b) \\
*     2 \sigma \sqrt{3} &= 2b \\
*     b &= \sigma \sqrt{3}
*     \end{align*}
*     ```
*
*     where \\( \sigma \\) is the standard deviation.
*
* -   Thus, to generate uniform noise having zero mean and a desired standard deviation, we sample from \\( \operatorname{unif}(-sigma\sqrt{3}, sigma\sqrt{3}) \\).
*
* @param {Iterator} iterator - input iterator
* @param {PositiveNumber} sigma - standard deviation of the noise
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive number
* @throws {TypeError} third argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {Iterator} iterator
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
*
* var sine = iterSineWave({
*     'iter': 100
* });
*
* var it = iterawun( sine, 0.5 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function iterawun( iterator, sigma, options ) {
	var runif;
	var opts;
	var iter;
	var FLG;
	var a;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveNumber_1143( sigma ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive number. Value: `' + sigma + '`.' );
	}
	opts = _$copy_1353( _$defaults_1141 );
	if ( arguments.length > 2 ) {
		if ( !_$isPlainObject_172( options ) ) {
			throw new TypeError( 'invalid argument. Third argument must be an object. Value: `' + options + '`.' );
		}
		if ( _$hasOwnProp_78( options, 'copy' ) ) {
			opts.copy = options.copy;
			if ( !__isBoolean_1143( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( _$hasOwnProp_78( options, 'prng' ) ) {
			if ( !_$isFunction_132( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			opts.prng = options.prng;
		}
		// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.
		else if ( _$hasOwnProp_78( options, 'state' ) ) {
			opts.state = options.state;
			if ( !_$isUint32Array_198( options.state ) ) {
				throw new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + options.state + '`.' );
			}
		}
		// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.
		else if ( _$hasOwnProp_78( options, 'seed' ) ) {
			opts.seed = options.seed;
			if ( options.seed === void 0 ) {
				throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `' + options.seed + '`.' );
			}
		}
	}
	a = sigma * _$SQRT3_242;
	runif = __randu_1143( -a, a, opts );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.
	if ( options && options.prng ) {
		_$setNonEnumerableReadOnly_1359( iter, 'seed', null );
		_$setNonEnumerableReadOnly_1359( iter, 'seedLength', null );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', _$constantFunction_1348( null ), _$noop_1408 );
		_$setNonEnumerableReadOnly_1359( iter, 'stateLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'byteLength', null );
		_$setNonEnumerableReadOnly_1359( iter, 'PRNG', options.prng );
	} else {
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seed', getSeed );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'seedLength', getSeedLength );
		_$setNonEnumerableReadWriteAccessor_1361( iter, 'state', getState, setState );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'stateLength', getStateLength );
		_$setNonEnumerableReadOnlyAccessor_1357( iter, 'byteLength', getStateSize );
		_$setNonEnumerableReadOnly_1359( iter, 'PRNG', runif.PRNG );
	}
	return iter;

	/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/
	function getSeed() {
		return runif.seed;
	}

	/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/
	function getSeedLength() {
		return runif.seedLength;
	}

	/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return runif.stateLength;
	}

	/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return runif.byteLength;
	}

	/**
	* Returns the current PRNG state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/
	function getState() {
		return runif.state;
	}

	/**
	* Sets the PRNG state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/
	function setState( s ) {
		runif.state = s;
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = v.value + runif();
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = NaN;
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterawun( iterator[ _$IteratorSymbol_1345 ](), sigma, opts );
	}
}


// EXPORTS //

var _$iterawun_1143 = iterawun;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which introduces additive white uniform noise (AWUN).
*
* @module @stdlib/simulate/iter/awun
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
* var iterawun = require( '@stdlib/simulate/iter/awun' );
*
* var sine = iterSineWave({
*     'iter': 100
* });
*
* var it = iterawun( sine, 0.5 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterawun_1143 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1142 = _$iterawun_1143;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositiveNumber_1146 = _$isPositiveNumber_178.isPrimitive;
var __isInteger_1146 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1146 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1146 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration] - pulse duration
* @param {PositiveNumber} [options.amplitude] - amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1146( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'duration' ) ) {
		opts.duration = options.duration;
		if ( !__isPositiveInteger_1146( options.duration ) ) {
			return new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1146( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isPositiveNumber_1146( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a positive number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1146( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1146( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1146 = __validate_1146;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$cospi_471 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$validate_1146 = require( './validate.js' ); */;


// VARIABLES //

var A0 = 0.62;
var A1 = 0.48;
var A2 = 0.38;


// FUNCTIONS //

/**
* Evaluates a Bartlett-Hann window function.
*
* @private
* @param {integer} t - value at which to evaluate the function
* @param {integer} T - period
* @param {number} A - amplitude
* @returns {number} function value
*/
function bartlettHann( t, T, A ) {
	T -= 1;
	return A * ( A0 - (A1*_$abs_390( (t/T)-0.5) ) - (A2*_$cospi_471( (2.0/T)*t) ) );
}


// MAIN //

/**
* Returns an iterator which generates a Bartlett-Hann pulse waveform.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration=options.period] - pulse duration
* @param {PositiveNumber} [options.amplitude=1.0] - amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} pulse duration must be less than the period
* @throws {RangeError} pulse duration must be greater than `2`
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 10
* };
*
* var iter = iterBartlettHannPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBartlettHannPulse( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var i;

	opts = {
		'duration': -1,
		'period': 100,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1146( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.duration === -1 ) {
		opts.duration = opts.period;
	}
	if ( opts.duration > opts.period ) {
		throw new RangeError( 'invalid option. `duration` option must be less than or equal to the period. Option: `' + opts.duration + '`.' );
	}
	if ( opts.duration <= 2 ) {
		throw new RangeError( 'invalid option. `duration` option must be greater than 2. Option: `' + opts.duration + '`.' );
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t = (t+1) % opts.period;
		return {
			'value': ( t < opts.duration ) ? bartlettHann( t, opts.duration, opts.amplitude ) : 0.0,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterBartlettHannPulse( opts );
	}
}


// EXPORTS //

var _$iterBartlettHannPulse_1145 = iterBartlettHannPulse;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Bartlett-Hann pulse waveform.
*
* @module @stdlib/simulate/iter/bartlett-hann-pulse
*
* @example
* var iterBartlettHannPulse = require( '@stdlib/simulate/iter/bartlett-hann-pulse' );
*
* var opts = {
*     'period': 10
* };
*
* var iter = iterBartlettHannPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBartlettHannPulse_1145 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1144 = _$iterBartlettHannPulse_1145;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositiveNumber_1149 = _$isPositiveNumber_178.isPrimitive;
var __isInteger_1149 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1149 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1149 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration] - pulse duration
* @param {PositiveNumber} [options.amplitude] - amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1149( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'duration' ) ) {
		opts.duration = options.duration;
		if ( !__isPositiveInteger_1149( options.duration ) ) {
			return new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1149( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isPositiveNumber_1149( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a positive number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1149( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1149( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1149 = __validate_1149;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$validate_1149 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a Bartlett pulse waveform.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration=options.period] - pulse duration
* @param {PositiveNumber} [options.amplitude=1.0] - amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} pulse duration must be less than the period
* @throws {RangeError} pulse duration must be greater than `2`
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 10
* };
*
* var iter = iterBartlettPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterBartlettPulse( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var s;
	var i;

	opts = {
		'duration': -1,
		'period': 100,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1149( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.duration === -1 ) {
		opts.duration = opts.period;
	}
	if ( opts.duration > opts.period ) {
		throw new RangeError( 'invalid option. `duration` option must be less than or equal to the period. Option: `' + opts.duration + '`.' );
	}
	if ( opts.duration <= 2 ) {
		throw new RangeError( 'invalid option. `duration` option must be greater than 2. Option: `' + opts.duration + '`.' );
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	s = 2.0 / (opts.duration-1);
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t = (t+1) % opts.period;
		return {
			'value': ( t < opts.duration ) ? opts.amplitude*(1.0-_$abs_390((s*t)-1.0)) : 0.0,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterBartlettPulse( opts );
	}
}


// EXPORTS //

var _$iterBartlettPulse_1148 = iterBartlettPulse;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Bartlett pulse waveform.
*
* @module @stdlib/simulate/iter/bartlett-pulse
*
* @example
* var iterBartlettPulse = require( '@stdlib/simulate/iter/bartlett-pulse' );
*
* var opts = {
*     'period': 10
* };
*
* var iter = iterBartlettPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterBartlettPulse_1148 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1147 = _$iterBartlettPulse_1148;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_161 = _$isNumber_162.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative number value
*
* @example
* var bool = isNonNegativeNumber( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns false
*/
function isNonNegativeNumber( value ) {
	return (
		__isNumber_161( value ) &&
		value >= 0.0
	);
}


// EXPORTS //

var _$isNonNegativeNumber_161 = isNonNegativeNumber;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_160 = _$isNumber_162.isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative number value
*
* @example
* var bool = isNonNegativeNumber( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns true
*/
function __isNonNegativeNumber_160( value ) {
	return (
		__isNumber_160( value ) &&
		value.valueOf() >= 0.0
	);
}


// EXPORTS //

var _$isNonNegativeNumber_160 = __isNonNegativeNumber_160;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeNumber_161 = require( './primitive.js' ); */;
/* removed: var _$isNonNegativeNumber_160 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a nonnegative number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative number
*
* @example
* var bool = isNonNegativeNumber( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeNumber( null );
* // returns false
*/
function __isNonNegativeNumber_159( value ) {
	return ( _$isNonNegativeNumber_161( value ) || _$isNonNegativeNumber_160( value ) );
}


// EXPORTS //

var _$isNonNegativeNumber_159 = __isNonNegativeNumber_159;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a nonnegative number.
*
* @module @stdlib/assert/is-nonnegative-number
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' );
*
* var bool = isNonNegativeNumber( 5.0 );
* // returns true
*
* bool = isNonNegativeNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeNumber( 3.14 );
* // returns true
*
* bool = isNonNegativeNumber( -5.0 );
* // returns false
*
* bool = isNonNegativeNumber( null );
* // returns false
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;
*
* var bool = isNonNegativeNumber( 3.0 );
* // returns true
*
* bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isObject;
*
* var bool = isNonNegativeNumber( 3.0 );
* // returns false
*
* bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isNonNegativeNumber_159 = require( './main.js' ); */;
/* removed: var _$isNonNegativeNumber_161 = require( './primitive.js' ); */;
/* removed: var _$isNonNegativeNumber_160 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1359( _$isNonNegativeNumber_159, 'isPrimitive', _$isNonNegativeNumber_161 );
_$setNonEnumerableReadOnly_1359( _$isNonNegativeNumber_159, 'isObject', _$isNonNegativeNumber_160 );


// EXPORTS //

var _$isNonNegativeNumber_158 = _$isNonNegativeNumber_159;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isInteger_1152 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1152 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1152 = _$isNonNegativeInteger_154.isPrimitive;
var __isNonNegativeNumber_1152 = _$isNonNegativeNumber_158.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a cosine wave repeats
* @param {NonNegativeNumber} [options.amplitude] - peak amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1152( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1152( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isNonNegativeNumber_1152( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a nonnegative number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1152( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1152( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1152 = __validate_1152;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$cospi_471 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$validate_1152 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a cosine wave.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a cosine wave repeats
* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterCosineWave( opts );
*
* var v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns -1.0
*
* // ...
*/
function iterCosineWave( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var s;
	var i;

	opts = {
		'period': 10,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1152( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period; // normalize such that t ϵ [0,τ]
	}
	t -= 1;
	s = 2.0 / opts.period;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		return {
			'value': opts.amplitude * _$cospi_471( s*t ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterCosineWave( opts );
	}
}


// EXPORTS //

var _$iterCosineWave_1151 = iterCosineWave;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a cosine wave.
*
* @module @stdlib/simulate/iter/cosine-wave
*
* @example
* var iterCosineWave = require( '@stdlib/simulate/iter/cosine-wave' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterCosineWave( opts );
*
* var v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 1.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterCosineWave_1151 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1150 = _$iterCosineWave_1151;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isInteger_1155 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1155 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1155 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1155( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1155( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1155( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1155( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1155 = __validate_1155;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$validate_1155 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a Dirac comb.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterDiracComb( opts );
*
* var v = iter.next().value;
* // returns Infinity
*
* v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/
function iterDiracComb( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var i;

	opts = {
		'period': 10,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1155( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period; // normalize such that t ϵ [0,T]
	}
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		return {
			'value': ( t === 0 ) ? _$FLOAT64_PINF_238 : 0.0,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterDiracComb( opts );
	}
}


// EXPORTS //

var _$iterDiracComb_1154 = iterDiracComb;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Dirac comb.
*
* @module @stdlib/simulate/iter/dirac-comb
*
* @example
* var iterDiracComb = require( '@stdlib/simulate/iter/dirac-comb' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterDiracComb( opts );
*
* var v = iter.next().value;
* // returns Infinity
*
* v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterDiracComb_1154 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1153 = _$iterDiracComb_1154;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositiveNumber_1158 = _$isPositiveNumber_178.isPrimitive;
var __isInteger_1158 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1158 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1158 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration] - pulse duration
* @param {PositiveNumber} [options.amplitude] - amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1158( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'duration' ) ) {
		opts.duration = options.duration;
		if ( !__isPositiveInteger_1158( options.duration ) ) {
			return new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1158( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isPositiveNumber_1158( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a positive number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1158( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1158( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1158 = __validate_1158;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$cospi_471 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$validate_1158 = require( './validate.js' ); */;


// VARIABLES //

var __A0_1157 = 0.21557895;
var __A1_1157 = 0.41663158;
var __A2_1157 = 0.277263158;
var A3 = 0.083578947;
var A4 = 0.006947368;


// FUNCTIONS //

/**
* Evaluates the flat top window function.
*
* @private
* @param {integer} t - value at which to evaluate the function
* @param {number} A - amplitude
* @param {integer} tau - period
* @returns {number} function value
*/
function flatTop( t, A, tau ) {
	var s = 2.0 / (tau-1);
	return A * (__A0_1157 - (__A1_1157*_$cospi_471(s*t)) + (__A2_1157*_$cospi_471(2.0*s*t)) - (A3*_$cospi_471(3.0*s*t)) + (A4*_$cospi_471(4.0*s*t))); // eslint-disable-line max-len
}


// MAIN //

/**
* Returns an iterator which generates a flat top pulse waveform.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration=options.period] - pulse duration
* @param {PositiveNumber} [options.amplitude=1.0] - amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} pulse duration must be less than the period
* @throws {RangeError} pulse duration must be greater than `2`
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 10
* };
*
* var iter = iterFlatTopPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterFlatTopPulse( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var i;

	opts = {
		'duration': -1,
		'period': 100,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1158( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.duration === -1 ) {
		opts.duration = opts.period;
	}
	if ( opts.duration > opts.period ) {
		throw new RangeError( 'invalid option. `duration` option must be less than or equal to the period. Option: `' + opts.duration + '`.' );
	}
	if ( opts.duration <= 2 ) {
		throw new RangeError( 'invalid option. `duration` option must be greater than 2. Option: `' + opts.duration + '`.' );
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t = (t+1) % opts.period;
		return {
			'value': ( t < opts.duration ) ? flatTop( t, opts.amplitude, opts.duration ) : 0.0,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterFlatTopPulse( opts );
	}
}


// EXPORTS //

var _$iterFlatTopPulse_1157 = iterFlatTopPulse;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a flat top pulse waveform.
*
* @module @stdlib/simulate/iter/flat-top-pulse
*
* @example
* var iterFlatTopPulse = require( '@stdlib/simulate/iter/flat-top-pulse' );
*
* var opts = {
*     'period': 10
* };
*
* var iter = iterFlatTopPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterFlatTopPulse_1157 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1156 = _$iterFlatTopPulse_1157;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositiveNumber_1161 = _$isPositiveNumber_178.isPrimitive;
var __isInteger_1161 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1161 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1161 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration] - pulse duration
* @param {PositiveNumber} [options.amplitude] - amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1161( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'duration' ) ) {
		opts.duration = options.duration;
		if ( !__isPositiveInteger_1161( options.duration ) ) {
			return new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1161( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isPositiveNumber_1161( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a positive number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1161( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1161( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1161 = __validate_1161;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$cospi_471 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$validate_1161 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a Hann pulse waveform.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration=options.period] - pulse duration
* @param {PositiveNumber} [options.amplitude=1.0] - amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} pulse duration must be less than the period
* @throws {RangeError} pulse duration must be greater than `2`
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 10
* };
*
* var iter = iterHannPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterHannPulse( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var A;
	var t;
	var s;
	var i;

	opts = {
		'duration': -1,
		'period': 100,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1161( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.duration === -1 ) {
		opts.duration = opts.period;
	}
	if ( opts.duration > opts.period ) {
		throw new RangeError( 'invalid option. `duration` option must be less than or equal to the period. Option: `' + opts.duration + '`.' );
	}
	if ( opts.duration <= 2 ) {
		throw new RangeError( 'invalid option. `duration` option must be greater than 2. Option: `' + opts.duration + '`.' );
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	A = 0.5 * opts.amplitude;
	s = 2.0 / (opts.duration-1);
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t = (t+1) % opts.period;
		return {
			'value': ( t < opts.duration ) ? A*(1.0-_$cospi_471(s*t)) : 0.0,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterHannPulse( opts );
	}
}


// EXPORTS //

var _$iterHannPulse_1160 = iterHannPulse;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Hann pulse waveform.
*
* @module @stdlib/simulate/iter/hann-pulse
*
* @example
* var iterHannPulse = require( '@stdlib/simulate/iter/hann-pulse' );
*
* var opts = {
*     'period': 10
* };
*
* var iter = iterHannPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterHannPulse_1160 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1159 = _$iterHannPulse_1160;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the normalized cardinal sine of a number.
*
* ## Method
*
* For \\( x \neq 0 \\), the normalized cardinal sine is calculated as
*
* ```tex
* \operatorname{sinc}(x) = \frac{\operatorname{sin}(\pi x)}{\pi x}.
* ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{sinc}(0) &= 1 & \\
* \operatorname{sinc}(\infty) &= 0 & \\
* \operatorname{sinc}(-\infty) &= 0 & \\
* \operatorname{sinc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} cardinal sine
*
* @example
* var v = sinc( 0.5 );
* // returns ~0.637
*
* @example
* var v = sinc( -1.2 );
* // returns ~-0.156
*
* @example
* var v = sinc( 0.0 );
* // returns 1.0
*
* @example
* var v = sinc( NaN );
* // returns NaN
*/
function sinc( x ) {
	if ( _$isnan_370( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_366( x ) ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return 1.0;
	}
	return _$sinpi_623( x ) / ( _$PI_237*x );
}


// EXPORTS //

var _$sinc_618 = sinc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the normalized cardinal sine of a number.
*
* @module @stdlib/math/base/special/sinc
*
* @example
* var sinc = require( '@stdlib/math/base/special/sinc' );
*
* var v = sinc( 0.5 );
* // returns ~0.637
*
* v = sinc( -1.2 );
* // returns ~-0.156
*
* v = sinc( 0.0 );
* // returns 1.0
*
* v = sinc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinc_618 = require( './sinc.js' ); */;


// EXPORTS //

var _$sinc_617 = _$sinc_618;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isPositiveNumber_1164 = _$isPositiveNumber_178.isPrimitive;
var __isInteger_1164 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1164 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1164 = _$isNonNegativeInteger_154.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration] - pulse duration
* @param {PositiveNumber} [options.amplitude] - amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1164( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'duration' ) ) {
		opts.duration = options.duration;
		if ( !__isPositiveInteger_1164( options.duration ) ) {
			return new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1164( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isPositiveNumber_1164( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a positive number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1164( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1164( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1164 = __validate_1164;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$sinc_617 = require( '@stdlib/math/base/special/sinc' ); */;
/* removed: var _$validate_1164 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a Lanczos pulse waveform.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration=options.period] - pulse duration
* @param {PositiveNumber} [options.amplitude=1.0] - amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} pulse duration must be less than the period
* @throws {RangeError} pulse duration must be greater than `2`
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 10
* };
*
* var iter = iterLanczosPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterLanczosPulse( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var s;
	var i;

	opts = {
		'duration': -1,
		'period': 100,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1164( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.duration === -1 ) {
		opts.duration = opts.period;
	}
	if ( opts.duration > opts.period ) {
		throw new RangeError( 'invalid option. `duration` option must be less than or equal to the period. Option: `' + opts.duration + '`.' );
	}
	if ( opts.duration <= 2 ) {
		throw new RangeError( 'invalid option. `duration` option must be greater than 2. Option: `' + opts.duration + '`.' );
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	s = 2.0 / (opts.duration-1);
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t = (t+1) % opts.period;
		return {
			'value': ( t < opts.duration ) ? opts.amplitude*_$sinc_617((s*t)-1.0) : 0.0,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterLanczosPulse( opts );
	}
}


// EXPORTS //

var _$iterLanczosPulse_1163 = iterLanczosPulse;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a Lanczos pulse waveform.
*
* @module @stdlib/simulate/iter/lanczos-pulse
*
* @example
* var iterLanczosPulse = require( '@stdlib/simulate/iter/lanczos-pulse' );
*
* var opts = {
*     'period': 10
* };
*
* var iter = iterLanczosPulse( opts );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterLanczosPulse_1163 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1162 = _$iterLanczosPulse_1163;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isInteger_1167 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1167 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1167 = _$isNonNegativeInteger_154.isPrimitive;
var __isNonNegativeNumber_1167 = _$isNonNegativeNumber_158.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {NonNegativeNumber} [options.amplitude] - peak amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1167( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1167( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isNonNegativeNumber_1167( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a nonnegative number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1167( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1167( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1167 = __validate_1167;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
var __isPositiveInteger_1166 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isEven_364 = require( '@stdlib/math/base/assert/is-even' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$validate_1167 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a periodic sinc waveform.
*
* ## Method
*
* -   The periodic sinc function, or Dirichlet function, is defined as
*
*     ```tex
*     D_N(x; A) = \begin{cases}
*     A \cdot \frac{\sin(Nx/2)}{N\sin(x/2)} & x \neq 2\pi k\ \textrm{for} k = 0, \pm 1, \pm 2, \pm 3, \ldots \\
*     A \cdot (-1)^{k(N-1)} & x = 2\pi k\ \textrm{for} k = 0, \pm 1, \pm 2, \pm 3, \ldots
*     \end{cases}
*     ```
*
*     where, for odd \\( N \\), the waveform period is \\( 2\pi \\), and, for even \\( N \\), the waveform period is \\( 4\pi \\).
*
* -   In order to evaluate the periodic sinc function in terms of an iteration number \\( t \\) and a specified period (period \\( \tau \\)), rather than radians, for odd \\( N \\), we define
*
*     ```tex
*     x = \frac{2\pi(t-\varphi)}{\tau}
*     ```
*
*     and, for even \\( N \\), we define
*
*     ```tex
*     x = \frac{4\pi(t-\varphi)}{\tau}
*     ```
*
*     and substitute accordingly.
*
* @param {PositiveInteger} n - order
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats
* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} first argument must be a positive integer
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var iter = iterPeriodicSinc( 7 );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/
function iterPeriodicSinc( n, options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var sgn;
	var hwf;
	var hw;
	var t;
	var s;
	var i;

	if ( !__isPositiveInteger_1166( n ) ) {
		throw new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + n + '`.' );
	}
	opts = {
		'period': 100,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length > 1 ) {
		err = _$validate_1167( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period; // normalize such that t ϵ [0,τ]
	}
	if ( _$isEven_364( n ) ) {
		if ( opts.offset >= 0 ) {
			sgn = -1.0;
		} else {
			sgn = 1.0;
		}
		// Note: when `n` is even, the waveform period (in radians) is 4π, so we need to adjust the "period" parameter to ensure that the waveform repeats within the specified number of iterations:
		hw = opts.period / 2;
		hwf = _$floor_523( hw ); // note: τ could be an odd number; in which case, negative peaks happen "between" two iterations (t%τ and t%(τ+1))
		s = n / hw;
	} else {
		s = n / opts.period;
	}
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', ( sgn === void 0 ) ? next2 : next1 );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next1() {
		var v;
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		if ( t === 0 || t === hw ) {
			sgn *= -1.0;
			v = sgn * opts.amplitude;
		} else {
			if ( t === hwf ) {
				// We just passed a negative peak, so we need flip the sign in order to ensure that the waveform at `t%τ=0` is the correct sign:
				sgn *= -1.0;
			}
			v = opts.amplitude * _$sinpi_623(s*t) / ( n*_$sinpi_623(t/hw) );
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next2() {
		var v;
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		if ( t === 0 ) {
			v = opts.amplitude;
		} else {
			v = opts.amplitude * _$sinpi_623(s*t) / ( n*_$sinpi_623(t/opts.period) );
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterPeriodicSinc( n, opts );
	}
}


// EXPORTS //

var _$iterPeriodicSinc_1166 = iterPeriodicSinc;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a periodic sinc waveform.
*
* @module @stdlib/simulate/iter/periodic-sinc
*
* @example
* var iterPeriodicSinc = require( '@stdlib/simulate/iter/periodic-sinc' );
*
* var iter = iterPeriodicSinc( 7 );
*
* var v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* v = iter.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$iterPeriodicSinc_1166 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1165 = _$iterPeriodicSinc_1166;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNumber_1170 = _$isNumber_162.isPrimitive;
var __isInteger_1170 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1170 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1170 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration] - number of consecutive iterations of maximum amplitude during one period
* @param {number} [options.min] - minimum amplitude
* @param {number} [options.max] - maximum amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1170( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'duration' ) ) {
		opts.duration = options.duration;
		if ( !__isPositiveInteger_1170( options.duration ) ) {
			return new TypeError( 'invalid option. `duration` option must be a positive integer. Option: `' + options.duration + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1170( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be a positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'min' ) ) {
		opts.min = options.min;
		if ( !__isNumber_1170( options.min ) || _$isnan_370( options.min ) ) {
			return new TypeError( 'invalid option. `min` option must be a number. Option: `' + options.min + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'max' ) ) {
		opts.max = options.max;
		if ( !__isNumber_1170( options.max ) || _$isnan_370( options.max ) ) {
			return new TypeError( 'invalid option. `max` option must be a number. Option: `' + options.max + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1170( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1170( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1170 = __validate_1170;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$floor_523 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$validate_1170 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a pulse waveform.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats
* @param {PositiveInteger} [options.duration=floor(options.period/2)] - number of consecutive iterations of maximum amplitude during one period
* @param {number} [options.min=0.0] - minimum amplitude
* @param {number} [options.max=1.0] - maximum amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} pulse duration must be less than the period
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterPulse( opts );
*
* var v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/
function iterPulse( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var i;

	opts = {
		'duration': -1,
		'period': 10,
		'min': 0.0,
		'max': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1170( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.duration === -1 ) {
		opts.duration = _$floor_523( opts.period/2 );
	}
	if ( opts.duration >= opts.period ) {
		throw new RangeError( 'invalid option. `duration` option must be less than the period. Option: `' + opts.duration + '`.' );
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	t -= 1;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t = (t+1) % opts.period;
		return {
			'value': ( t < opts.duration ) ? opts.max : opts.min,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterPulse( opts );
	}
}


// EXPORTS //

var _$iterPulse_1169 = iterPulse;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a pulse waveform.
*
* @module @stdlib/simulate/iter/pulse
*
* @example
* var iterPulse = require( '@stdlib/simulate/iter/pulse' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterPulse( opts );
*
* var v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterPulse_1169 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1168 = _$iterPulse_1169;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isInteger_1173 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1173 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1173 = _$isNonNegativeInteger_154.isPrimitive;
var __isNonNegativeNumber_1173 = _$isNonNegativeNumber_158.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {NonNegativeNumber} [options.amplitude] - peak amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1173( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1173( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isNonNegativeNumber_1173( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a nonnegative number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1173( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1173( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1173 = __validate_1173;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$tan_627 = require( '@stdlib/math/base/special/tan' ); */;
/* removed: var _$atan_414 = require( '@stdlib/math/base/special/atan' ); */;
/* removed: var _$HALF_PI_224 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$PI_237 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$validate_1173 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a sawtooth wave.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats
* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterSawtoothWave( opts );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns ~0.5
*
* v = iter.next().value;
* // returns ~1.0
*
* // ...
*/
function iterSawtoothWave( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var s;
	var a;
	var i;

	opts = {
		'period': 10,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1173( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period; // normalize such that t ϵ [0,τ]
	}
	t -= 1;
	s = _$PI_237 / opts.period;
	a = opts.amplitude / _$HALF_PI_224;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		return {
			'value': a * _$atan_414( _$tan_627( s*t ) ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterSawtoothWave( opts );
	}
}


// EXPORTS //

var _$iterSawtoothWave_1172 = iterSawtoothWave;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sawtooth wave.
*
* @module @stdlib/simulate/iter/sawtooth-wave
*
* @example
* var iterSawtoothWave = require( '@stdlib/simulate/iter/sawtooth-wave' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterSawtoothWave( opts );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns ~0.5
*
* v = iter.next().value;
* // returns ~1.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterSawtoothWave_1172 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1171 = _$iterSawtoothWave_1172;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isInteger_1176 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1176 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1176 = _$isNonNegativeInteger_154.isPrimitive;
var __isNonNegativeNumber_1176 = _$isNonNegativeNumber_158.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a sine wave repeats
* @param {NonNegativeNumber} [options.amplitude] - peak amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1176( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1176( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isNonNegativeNumber_1176( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a nonnegative number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1176( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1176( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1176 = __validate_1176;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$validate_1176 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a sine wave.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a sine wave repeats
* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterSineWave( opts );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/
function iterSineWave( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var s;
	var i;

	opts = {
		'period': 10,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1176( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period; // normalize such that t ϵ [0,τ]
	}
	t -= 1;
	s = 2.0 / opts.period;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		return {
			'value': opts.amplitude * _$sinpi_623( s*t ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterSineWave( opts );
	}
}


// EXPORTS //

var _$iterSineWave_1175 = iterSineWave;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a sine wave.
*
* @module @stdlib/simulate/iter/sine-wave
*
* @example
* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterSineWave( opts );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterSineWave_1175 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1174 = _$iterSineWave_1175;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNumber_1179 = _$isNumber_162.isPrimitive;
var __isInteger_1179 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1179 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1179 = _$isNonNegativeInteger_154.isPrimitive;
/* removed: var _$isEven_364 = require( '@stdlib/math/base/assert/is-even' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a square wave repeats
* @param {number} [options.min] - minimum amplitude
* @param {number} [options.max] - maximum amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1179( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1179( options.period ) || !_$isEven_364( options.period ) ) { // eslint-disable-line max-len
			return new TypeError( 'invalid option. `period` option must be an positive even integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'min' ) ) {
		opts.min = options.min;
		if ( !__isNumber_1179( options.min ) || _$isnan_370( options.min ) ) {
			return new TypeError( 'invalid option. `min` option must be a number. Option: `' + options.min + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'max' ) ) {
		opts.max = options.max;
		if ( !__isNumber_1179( options.max ) || _$isnan_370( options.max ) ) {
			return new TypeError( 'invalid option. `max` option must be a number. Option: `' + options.max + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1179( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1179( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1179 = __validate_1179;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$validate_1179 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a square wave.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a square wave repeats (this must be a positive even integer)
* @param {number} [options.min=-1.0] - minimum amplitude
* @param {number} [options.max=1.0] - maximum amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterSquareWave( opts );
*
* var v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns -1.0
*
* // ...
*/
function iterSquareWave( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var h;
	var i;

	opts = {
		'period': 10,
		'min': -1.0,
		'max': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1179( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period;
	}
	t -= 1;
	h = opts.period / 2;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		return {
			'value': ( (t%opts.period) < h ) ? opts.max : opts.min,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterSquareWave( opts );
	}
}


// EXPORTS //

var _$iterSquareWave_1178 = iterSquareWave;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a square wave.
*
* @module @stdlib/simulate/iter/square-wave
*
* @example
* var iterSquareWave = require( '@stdlib/simulate/iter/square-wave' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterSquareWave( opts );
*
* var v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns -1.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterSquareWave_1178 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1177 = _$iterSquareWave_1178;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPlainObject_172 = require( '@stdlib/assert/is-plain-object' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isInteger_1182 = _$isInteger_140.isPrimitive;
var __isPositiveInteger_1182 = _$isPositiveInteger_174.isPrimitive;
var __isNonNegativeInteger_1182 = _$isNonNegativeInteger_154.isPrimitive;
var __isNonNegativeNumber_1182 = _$isNonNegativeNumber_158.isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats
* @param {NonNegativeNumber} [options.amplitude] - peak amplitude
* @param {integer} [options.offset] - phase offset (in units of iterations)
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'iter': 100
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function __validate_1182( opts, options ) {
	if ( !_$isPlainObject_172( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( _$hasOwnProp_78( options, 'period' ) ) {
		opts.period = options.period;
		if ( !__isPositiveInteger_1182( options.period ) ) {
			return new TypeError( 'invalid option. `period` option must be an positive integer. Option: `' + options.period + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'amplitude' ) ) {
		opts.amplitude = options.amplitude;
		if ( !__isNonNegativeNumber_1182( options.amplitude ) ) {
			return new TypeError( 'invalid option. `amplitude` option must be a nonnegative number. Option: `' + options.amplitude + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'offset' ) ) {
		opts.offset = options.offset;
		if ( !__isInteger_1182( options.offset ) ) {
			return new TypeError( 'invalid option. `offset` option must be an integer. Option: `' + options.offset + '`.' );
		}
	}
	if ( _$hasOwnProp_78( options, 'iter' ) ) {
		opts.iter = options.iter;
		if ( !__isNonNegativeInteger_1182( options.iter ) ) {
			return new TypeError( 'invalid option. `iter` option must be a nonnegative integer. Option: `' + options.iter + '`.' );
		}
	}
	return null;
}


// EXPORTS //

var _$validate_1182 = __validate_1182;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$sinpi_623 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$asin_408 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$HALF_PI_224 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$validate_1182 = require( './validate.js' ); */;


// MAIN //

/**
* Returns an iterator which generates a triangle wave.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats
* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude
* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)
* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Iterator} iterator
*
* @example
* var opts = {
*     'period': 4
* };
*
* var iter = iterTriangleWave( opts );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/
function iterTriangleWave( options ) {
	var opts;
	var iter;
	var FLG;
	var err;
	var t;
	var s;
	var a;
	var i;

	opts = {
		'period': 10,
		'amplitude': 1.0,
		'offset': 0,
		'iter': 1e308
	};
	if ( arguments.length ) {
		err = _$validate_1182( opts, options );
		if ( err ) {
			throw err;
		}
	}
	t = ( opts.period-opts.offset ) % opts.period;
	if ( t < 0 ) {
		t += opts.period; // normalize such that t ϵ [0,τ]
	}
	t -= 1;
	s = 2.0 / opts.period;
	a = opts.amplitude / _$HALF_PI_224;
	i = 0;

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		i += 1;
		if ( FLG || i > opts.iter ) {
			return {
				'done': true
			};
		}
		t += 1;
		t %= opts.period;
		return {
			'value': a * _$asin_408( _$sinpi_623( s*t ) ),
			'done': false
		};
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return iterTriangleWave( opts );
	}
}


// EXPORTS //

var _$iterTriangleWave_1181 = iterTriangleWave;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which generates a triangle wave.
*
* @module @stdlib/simulate/iter/triangle-wave
*
* @example
* var iterTriangleWave = require( '@stdlib/simulate/iter/triangle-wave' );
*
* var opts = {
*     'period': 4
* };
*
* var iter = iterTriangleWave( opts );
*
* var v = iter.next().value;
* // returns 0.0
*
* v = iter.next().value;
* // returns 1.0
*
* v = iter.next().value;
* // returns 0.0
*
* // ...
*/

// MODULES //

/* removed: var _$iterTriangleWave_1181 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1180 = _$iterTriangleWave_1181;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_561 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$exp_512 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a geometric mean.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrgmean();
*
* var v = accumulator();
* // returns null
*
* v = accumulator( 2.0 );
* // returns 2.0
*
* v = accumulator( 5.0 );
* // returns ~3.16
*
* v = accumulator();
* // returns ~3.16
*/
function incrgmean() {
	var sum;
	var N;
	var v;

	sum = 0.0;
	N = 0;
	v = 1;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} geometric mean or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return v;
		}
		N += 1;
		sum += _$ln_561( x );
		v = _$exp_512( sum/N );
		return v;
	}
}


// EXPORTS //

var _$incrgmean_1200 = incrgmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a geometric mean incrementally.
*
* @module @stdlib/stats/incr/gmean
*
* @example
* var incrgmean = require( '@stdlib/stats/incr/gmean' );
*
* var accumulator = incrgmean();
*
* var v = accumulator();
* // returns null
*
* v = accumulator( 2.0 );
* // returns 2.0
*
* v = accumulator( 5.0 );
* // returns ~3.16
*
* v = accumulator();
* // returns ~3.16
*/

// MODULES //

/* removed: var _$incrgmean_1200 = require( './main.js' ); */;


// EXPORTS //

var _$incrgmean_1199 = _$incrgmean_1200;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrgmean_1199 = require( '@stdlib/stats/incr/gmean' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( 0.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercugmean( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercugmean( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrgmean_1199();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercugmean( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercugmean_1260 = itercugmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative geometric mean.
*
* @module @stdlib/stats/iter/cugmean
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercugmean = require( '@stdlib/stats/iter/cugmean' );
*
* var rand = runif( 0.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercugmean( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercugmean_1260 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1259 = _$itercugmean_1260;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns an accumulator function which incrementally computes an arithmetic mean.
*
* ## Method
*
* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows
*
*     ```tex
*     \begin{align*}
*     \mu_n &= \frac{1}{n} \sum_{i=0}^{n-1} x_i \\
*           &= \frac{1}{n} \biggl(x_{n-1} + \sum_{i=0}^{n-2} x_i \biggr) \\
*           &= \frac{1}{n} (x_{n-1} + (n-1)\mu_{n-1}) \\
*           &= \mu_{n-1} + \frac{1}{n} (x_{n-1} - \mu_{n-1})
*     \end{align*}
*     ```
*
* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmean();
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns -1.5
*
* mu = accumulator();
* // returns -1.5
*/
function incrmean() {
	var mu;
	var N;

	mu = 0.0;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} mean value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return mu;
		}
		N += 1;
		mu += (x-mu) / N;
		return mu;
	}
}


// EXPORTS //

var _$incrmean_1208 = incrmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an arithmetic mean incrementally.
*
* @module @stdlib/stats/incr/mean
*
* @example
* var incrmean = require( '@stdlib/stats/incr/mean' );
*
* var accumulator = incrmean();
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns -1.5
*
* mu = accumulator();
* // returns -1.5
*/

// MODULES //

/* removed: var _$incrmean_1208 = require( './main.js' ); */;


// EXPORTS //

var _$incrmean_1207 = _$incrmean_1208;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$incrmean_1207 = require( '@stdlib/stats/incr/mean' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a harmonic mean.
*
* ## Method
*
* -   The harmonic mean of positive real numbers \\(x_0, x_1, \ldots, x_{n-1}\\) is defined as
*
*     ```tex
*     \begin{align*}
*     H &= \frac{n}{\frac{1}{x_0} + \frac{1}{x_1} + \cdots + \frac{1}{x_{n-1}}} \\
*       &= \frac{n}{\sum_{i=0}^{n-1} \frac{1}{x_i}}
*     \end{align*}
*     ```
*
*     which may be expressed
*
*     ```tex
*     H = \biggl( \frac{\sum_{i=0}^{n-1} \frac{1}{x_i}}{n} \biggr)^{-1}
*     ```
*
* -   Accordingly, to compute the harmonic mean incrementally, we can simply compute the arithmetic mean of reciprocal values and then compute the reciprocal of the result.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrhmean();
*
* var v = accumulator();
* // returns null
*
* v = accumulator( 2.0 );
* // returns 2.0
*
* v = accumulator( 5.0 );
* // returns ~2.86
*
* v = accumulator();
* // returns ~2.86
*/
function incrhmean() {
	var mean = _$incrmean_1207();
	var v;
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated harmonic mean. If not provided a value, the accumulator function returns the current harmonic mean.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} harmonic mean or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( v === void 0 ) ? null : v;
		}
		v = 1.0 / mean( 1.0/x );
		return v;
	}
}


// EXPORTS //

var _$incrhmean_1202 = incrhmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a harmonic mean incrementally.
*
* @module @stdlib/stats/incr/hmean
*
* @example
* var incrhmean = require( '@stdlib/stats/incr/hmean' );
*
* var accumulator = incrhmean();
*
* var v = accumulator();
* // returns null
*
* v = accumulator( 2.0 );
* // returns 2.0
*
* v = accumulator( 5.0 );
* // returns ~2.86
*
* v = accumulator();
* // returns ~2.86
*/

// MODULES //

/* removed: var _$incrhmean_1202 = require( './main.js' ); */;


// EXPORTS //

var _$incrhmean_1201 = _$incrhmean_1202;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrhmean_1201 = require( '@stdlib/stats/incr/hmean' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( 0.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercuhmean( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercuhmean( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrhmean_1201();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercuhmean( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercuhmean_1262 = itercuhmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative harmonic mean.
*
* @module @stdlib/stats/iter/cuhmean
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercuhmean = require( '@stdlib/stats/iter/cuhmean' );
*
* var rand = runif( 0.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercuhmean( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercuhmean_1262 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1261 = _$itercuhmean_1262;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPositiveZero_382 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a maximum value.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmax();
*
* var max = accumulator();
* // returns null
*
* max = accumulator( 3.14 );
* // returns 3.14
*
* max = accumulator( -5.0 );
* // returns 3.14
*
* max = accumulator( 10.1 );
* // returns 10.1
*
* max = accumulator();
* // returns 10.1
*/
function incrmax() {
	var max;
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated maximum value. If not provided a value, the accumulator function returns the current max.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} max value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( max === void 0 ) ? null : max;
		}
		if (
			max === void 0 ||
			x > max ||
			_$isnan_370( x ) ||
			( x === max && _$isPositiveZero_382( x ) )
		) {
			max = x;
		}
		return max;
	}
}


// EXPORTS //

var _$incrmax_1204 = incrmax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a maximum value incrementally.
*
* @module @stdlib/stats/incr/max
*
* @example
* var incrmax = require( '@stdlib/stats/incr/max' );
*
* var accumulator = incrmax();
*
* var max = accumulator();
* // returns null
*
* max = accumulator( 3.14 );
* // returns 3.14
*
* max = accumulator( -5.0 );
* // returns 3.14
*
* max = accumulator( 10.1 );
* // returns 10.1
*
* max = accumulator();
* // returns 10.1
*/

// MODULES //

/* removed: var _$incrmax_1204 = require( './main.js' ); */;


// EXPORTS //

var _$incrmax_1203 = _$incrmax_1204;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmax_1203 = require( '@stdlib/stats/incr/max' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative maximum value.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumax( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumax( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmax_1203();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumax( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumax_1264 = itercumax;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative maximum value.
*
* @module @stdlib/stats/iter/cumax
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumax = require( '@stdlib/stats/iter/cumax' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumax( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumax_1264 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1263 = _$itercumax_1264;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmax_1203 = require( '@stdlib/stats/incr/max' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a maximum absolute value.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmaxabs();
*
* var max = accumulator();
* // returns null
*
* max = accumulator( 3.14 );
* // returns 3.14
*
* max = accumulator( -5.0 );
* // returns 5.0
*
* max = accumulator( 10.1 );
* // returns 10.1
*
* max = accumulator();
* // returns 10.1
*/
function incrmaxabs() {
	var max = _$incrmax_1203();
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} maximum absolute value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return max();
		}
		return max( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrmaxabs_1206 = incrmaxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a maximum absolute value incrementally.
*
* @module @stdlib/stats/incr/maxabs
*
* @example
* var incrmaxabs = require( '@stdlib/stats/incr/maxabs' );
*
* var accumulator = incrmaxabs();
*
* var max = accumulator();
* // returns null
*
* max = accumulator( 3.14 );
* // returns 3.14
*
* max = accumulator( -5.0 );
* // returns 5.0
*
* max = accumulator( 10.1 );
* // returns 10.1
*
* max = accumulator();
* // returns 10.1
*/

// MODULES //

/* removed: var _$incrmaxabs_1206 = require( './main.js' ); */;


// EXPORTS //

var _$incrmaxabs_1205 = _$incrmaxabs_1206;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmaxabs_1205 = require( '@stdlib/stats/incr/maxabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative maximum absolute value.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumaxabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumaxabs( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmaxabs_1205();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumaxabs( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumaxabs_1266 = itercumaxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative maximum absolute value.
*
* @module @stdlib/stats/iter/cumaxabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumaxabs = require( '@stdlib/stats/iter/cumaxabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumaxabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumaxabs_1266 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1265 = _$itercumaxabs_1266;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmean_1207 = require( '@stdlib/stats/incr/mean' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative arithmetic mean.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumean( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumean( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmean_1207();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumean( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumean_1268 = itercumean;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative arithmetic mean.
*
* @module @stdlib/stats/iter/cumean
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumean = require( '@stdlib/stats/iter/cumean' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumean( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumean_1268 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1267 = _$itercumean_1268;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmean_1207 = require( '@stdlib/stats/incr/mean' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes an arithmetic mean of absolute values.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmeanabs();
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns 3.5
*
* mu = accumulator();
* // returns 3.5
*/
function incrmeanabs() {
	var mean = _$incrmean_1207();
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} mean value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return mean();
		}
		return mean( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrmeanabs_1210 = incrmeanabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an arithmetic mean of absolute values incrementally.
*
* @module @stdlib/stats/incr/meanabs
*
* @example
* var incrmeanabs = require( '@stdlib/stats/incr/meanabs' );
*
* var accumulator = incrmeanabs();
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns 3.5
*
* mu = accumulator();
* // returns 3.5
*/

// MODULES //

/* removed: var _$incrmeanabs_1210 = require( './main.js' ); */;


// EXPORTS //

var _$incrmeanabs_1209 = _$incrmeanabs_1210;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmeanabs_1209 = require( '@stdlib/stats/incr/meanabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative arithmetic mean of absolute values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumeanabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumeanabs( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmeanabs_1209();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumeanabs( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumeanabs_1270 = itercumeanabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative arithmetic mean of absolute values.
*
* @module @stdlib/stats/iter/cumeanabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumeanabs = require( '@stdlib/stats/iter/cumeanabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumeanabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumeanabs_1270 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1269 = _$itercumeanabs_1270;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$incrmean_1207 = require( '@stdlib/stats/incr/mean' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes an arithmetic mean of squared absolute values.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmeanabs2();
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 4.0
*
* m = accumulator( -5.0 );
* // returns 14.5
*
* m = accumulator();
* // returns 14.5
*/
function incrmeanabs2() {
	var mean = _$incrmean_1207();
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} mean value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return mean();
		}
		return mean( x*x );
	}
}


// EXPORTS //

var _$incrmeanabs2_1212 = incrmeanabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an arithmetic mean of squared absolute values incrementally.
*
* @module @stdlib/stats/incr/meanabs2
*
* @example
* var incrmeanabs2 = require( '@stdlib/stats/incr/meanabs2' );
*
* var accumulator = incrmeanabs2();
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 4.0
*
* m = accumulator( -5.0 );
* // returns 14.5
*
* m = accumulator();
* // returns 14.5
*/

// MODULES //

/* removed: var _$incrmeanabs2_1212 = require( './main.js' ); */;


// EXPORTS //

var _$incrmeanabs2_1211 = _$incrmeanabs2_1212;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmeanabs2_1211 = require( '@stdlib/stats/incr/meanabs2' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumeanabs2( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumeanabs2( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmeanabs2_1211();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumeanabs2( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumeanabs2_1272 = itercumeanabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.
*
* @module @stdlib/stats/iter/cumeanabs2
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumeanabs2 = require( '@stdlib/stats/iter/cumeanabs2' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumeanabs2( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumeanabs2_1272 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1271 = _$itercumeanabs2_1272;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a mid-range.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmidrange();
*
* var midrange = accumulator();
* // returns null
*
* midrange = accumulator( 3.14 );
* // returns 3.14
*
* midrange = accumulator( -5.0 );
* // returns ~-0.93
*
* midrange = accumulator( 10.1 );
* // returns 2.55
*
* midrange = accumulator();
* // returns 2.55
*/
function incrmidrange() {
	var max = _$FLOAT64_NINF_235;
	var min = _$FLOAT64_PINF_238;
	var sum;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {number} mid-range
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			if ( sum === void 0 ) {
				return null;
			}
			return sum / 2.0;
		}
		if ( _$isnan_370( x ) ) {
			min = x;
			max = x;
		}
		if ( x > max ) {
			max = x;
		}
		if ( x < min ) {
			min = x;
		}
		sum = max + min;
		return sum / 2.0;
	}
}


// EXPORTS //

var _$incrmidrange_1214 = incrmidrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a mid-range incrementally.
*
* @module @stdlib/stats/incr/midrange
*
* @example
* var incrmidrange = require( '@stdlib/stats/incr/midrange' );
*
* var accumulator = incrmidrange();
*
* var midrange = accumulator();
* // returns null
*
* midrange = accumulator( 3.14 );
* // returns 3.14
*
* midrange = accumulator( -5.0 );
* // returns ~-0.93
*
* midrange = accumulator( 10.1 );
* // returns 2.55
*
* midrange = accumulator();
* // returns 2.55
*/

// MODULES //

/* removed: var _$incrmidrange_1214 = require( './main.js' ); */;


// EXPORTS //

var _$incrmidrange_1213 = _$incrmidrange_1214;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmidrange_1213 = require( '@stdlib/stats/incr/midrange' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative mid-range.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumidrange( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumidrange( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmidrange_1213();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumidrange( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumidrange_1274 = itercumidrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative mid-range.
*
* @module @stdlib/stats/iter/cumidrange
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumidrange = require( '@stdlib/stats/iter/cumidrange' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumidrange( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumidrange_1274 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1273 = _$itercumidrange_1274;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isNegativeZero_374 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a minimum value.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmin();
*
* var min = accumulator();
* // returns null
*
* min = accumulator( 3.14 );
* // returns 3.14
*
* min = accumulator( -5.0 );
* // returns -5.0
*
* min = accumulator( 10.1 );
* // returns -5.0
*
* min = accumulator();
* // returns -5.0
*/
function incrmin() {
	var min;
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated minimum value. If not provided a value, the accumulator function returns the current min.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} min value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( min === void 0 ) ? null : min;
		}
		if (
			min === void 0 ||
			x < min ||
			_$isnan_370( x ) ||
			( x === min && _$isNegativeZero_374( x ) )
		) {
			min = x;
		}
		return min;
	}
}


// EXPORTS //

var _$incrmin_1216 = incrmin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a minimum value incrementally.
*
* @module @stdlib/stats/incr/min
*
* @example
* var incrmin = require( '@stdlib/stats/incr/min' );
*
* var accumulator = incrmin();
*
* var min = accumulator();
* // returns null
*
* min = accumulator( 3.14 );
* // returns 3.14
*
* min = accumulator( -5.0 );
* // returns -5.0
*
* min = accumulator( 10.1 );
* // returns -5.0
*
* min = accumulator();
* // returns -5.0
*/

// MODULES //

/* removed: var _$incrmin_1216 = require( './main.js' ); */;


// EXPORTS //

var _$incrmin_1215 = _$incrmin_1216;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmin_1215 = require( '@stdlib/stats/incr/min' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative minimum value.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumin( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercumin( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrmin_1215();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercumin( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercumin_1276 = itercumin;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative minimum value.
*
* @module @stdlib/stats/iter/cumin
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercumin = require( '@stdlib/stats/iter/cumin' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercumin( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercumin_1276 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1275 = _$itercumin_1276;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmin_1215 = require( '@stdlib/stats/incr/min' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a minimum absolute value.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrminabs();
*
* var min = accumulator();
* // returns null
*
* min = accumulator( 3.14 );
* // returns 3.14
*
* min = accumulator( -5.0 );
* // returns 3.14
*
* min = accumulator( 10.1 );
* // returns 3.14
*
* min = accumulator();
* // returns 3.14
*/
function incrminabs() {
	var min = _$incrmin_1215();
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} minimum absolute value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return min();
		}
		return min( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrminabs_1218 = incrminabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a minimum absolute value incrementally.
*
* @module @stdlib/stats/incr/minabs
*
* @example
* var incrminabs = require( '@stdlib/stats/incr/minabs' );
*
* var accumulator = incrminabs();
*
* var min = accumulator();
* // returns null
*
* min = accumulator( 3.14 );
* // returns 3.14
*
* min = accumulator( -5.0 );
* // returns 3.14
*
* min = accumulator( 10.1 );
* // returns 3.14
*
* min = accumulator();
* // returns 3.14
*/

// MODULES //

/* removed: var _$incrminabs_1218 = require( './main.js' ); */;


// EXPORTS //

var _$incrminabs_1217 = _$incrminabs_1218;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrminabs_1217 = require( '@stdlib/stats/incr/minabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative minimum absolute value.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercuminabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercuminabs( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrminabs_1217();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercuminabs( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercuminabs_1278 = itercuminabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative minimum absolute value.
*
* @module @stdlib/stats/iter/cuminabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercuminabs = require( '@stdlib/stats/iter/cuminabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercuminabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercuminabs_1278 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1277 = _$itercuminabs_1278;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$normalize_833 = require( '@stdlib/number/float64/base/normalize' ); */;
/* removed: var _$exponent_822 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$toWords_844 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$fromWords_824 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var __CLEAR_EXP_MASK_526 = 0x800fffff>>>0; // asm type annotation

// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672
var SET_EXP_MASK = 0x3fe00000|0; // asm type annotation

// Normalization workspace:
var __X_526 = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var __WORDS_526 = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = frexp( new Array( 2 ), 4.0 );
* // returns [ 0.5, 3 ]
*
* @example
* var out = frexp( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), -0.0 );
* // returns [ -0.0, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), Infinity );
* // returns [ Infinity , 0 ]
*
* @example
* var out = frexp( new Array( 2 ), -Infinity );
* // returns [ -Infinity , 0 ]
*/
function frexp( out, x ) {
	var high;
	var exp;
	if (
		x === 0.0 || // handles -0
		_$isnan_370( x ) ||
		_$isInfinite_366( x )
	) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	// If `x` is subnormal, normalize it...
	_$normalize_833( __X_526, x );

	// Extract the exponent from `x` and add the normalization exponent:
	exp = _$exponent_822( __X_526[0] ) + __X_526[ 1 ] + 1;

	// Break `x` into two unsigned 32-bit integers (higher and lower order words):
	_$toWords_844( __WORDS_526, __X_526[ 0 ] );
	high = __WORDS_526[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= __CLEAR_EXP_MASK_526;

	// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):
	high |= SET_EXP_MASK;

	// Create a new floating-point number:
	x = _$fromWords_824( high, __WORDS_526[ 1 ] );

	out[ 0 ] = x;
	out[ 1 ] = exp;
	return out;
}


// EXPORTS //

var _$frexp_526 = frexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$frexp_526 = require( './frexp.js' ); */;


// MAIN //

/**
* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = frexp( 4.0 );
* // returns [ 0.5, 3 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var y = frexp( out, 4.0 );
* // returns <Float64Array>[ 0.5, 3 ]
*
* var bool = ( y === out );
* // returns true
*
* @example
* var out = frexp( 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = frexp( -0.0 );
* // returns [ -0.0, 0 ]
*
* @example
* var out = frexp( NaN );
* // returns [ NaN, 0 ]
*
* @example
* var out = frexp( Infinity );
* // returns [ Infinity , 0 ]
*
* @example
* var out = frexp( -Infinity );
* // returns [ -Infinity , 0 ]
*/
function __frexp_528( out, x ) {
	if ( arguments.length === 1 ) {
		return _$frexp_526( [ 0.0, 0 ], out );
	}
	return _$frexp_526( out, x );
}


// EXPORTS //

var _$frexp_528 = __frexp_528;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @module @stdlib/math/base/special/frexp
*
* @example
* var frexp = require( '@stdlib/math/base/special/frexp' );
*
* var out = frexp( 4.0 );
* // returns [ 0.5, 3 ]
*
* out = frexp( 0.0 );
* // returns [ 0.0, 0 ]
*
* out = frexp( -0.0 );
* // returns [ -0.0, 0 ]
*
* out = frexp( NaN );
* // returns [ NaN, 0 ]
*
* out = frexp( Infinity );
* // returns [ Infinity , 0 ]
*
* out = frexp( -Infinity );
* // returns [ -Infinity , 0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var frexp = require( '@stdlib/math/base/special/frexp' );
*
* var out = new Float64Array( 2 );
*
* var y = frexp( out, 4.0 );
* // returns <Float64Array>[ 0.5, 3 ]
*
* var bool = ( y === out );
* // returns true
*/

// MODULES //

/* removed: var _$frexp_528 = require( './main.js' ); */;


// EXPORTS //

var _$frexp_527 = _$frexp_528;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$frexp_527 = require( '@stdlib/math/base/special/frexp' ); */;
/* removed: var _$ldexp_559 = require( '@stdlib/math/base/special/ldexp' ); */;


// VARIABLES //

// `frexp` workspace:
var PARTS = [ 0.0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns an accumulator function which incrementally computes a product.
*
* ## Method
*
* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.
*
* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).
*
*
* ## References
*
* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrprod();
*
* var prod = accumulator();
* // returns null
*
* prod = accumulator( 2.0 );
* // returns 2.0
*
* prod = accumulator( -5.0 );
* // returns -10.0
*
* prod = accumulator();
* // returns -10.0
*/
function incrprod() {
	var frac;
	var prod;
	var exp;

	// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):
	frac = 0.5;
	exp = 1.0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated product. If not provided a value, the accumulator function returns the current product.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} product or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( prod === void 0 ) ? null : prod;
		}
		// Split the incoming value into a normalized fraction and exponent:
		_$frexp_527( PARTS, x );

		// Update the accumulated fraction:
		frac *= PARTS[ 0 ];

		// Update the accumulated exponent:
		exp += PARTS[ 1 ];

		// Ensure fraction remains normalized to avoid overflow/underflow...
		if ( frac > -0.5 && frac < 0.5 ) {
			_$frexp_527( PARTS, frac );
			frac = PARTS[ 0 ];
			exp += PARTS[ 1 ];
		}
		prod = _$ldexp_559( frac, exp );
		return prod;
	}
}


// EXPORTS //

var _$incrprod_1246 = incrprod;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a product incrementally.
*
* @module @stdlib/stats/incr/prod
*
* @example
* var incrprod = require( '@stdlib/stats/incr/prod' );
*
* var accumulator = incrprod();
*
* var prod = accumulator();
* // returns null
*
* prod = accumulator( 2.0 );
* // returns 2.0
*
* prod = accumulator( -5.0 );
* // returns -10.0
*
* prod = accumulator();
* // returns -10.0
*/

// MODULES //

/* removed: var _$incrprod_1246 = require( './main.js' ); */;


// EXPORTS //

var _$incrprod_1245 = _$incrprod_1246;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrprod_1245 = require( '@stdlib/stats/incr/prod' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative product.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercuprod( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercuprod( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrprod_1245();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercuprod( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercuprod_1280 = itercuprod;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative product.
*
* @module @stdlib/stats/iter/cuprod
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercuprod = require( '@stdlib/stats/iter/cuprod' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercuprod( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercuprod_1280 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1279 = _$itercuprod_1280;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a range.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrrange();
*
* var range = accumulator();
* // returns null
*
* range = accumulator( 3.14 );
* // returns 0.0
*
* range = accumulator( -5.0 );
* // returns 8.14
*
* range = accumulator( 10.1 );
* // returns 15.1
*
* range = accumulator();
* // returns 15.1
*/
function incrrange() {
	var range;
	var max = _$FLOAT64_NINF_235;
	var min = _$FLOAT64_PINF_238;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} range or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( range === void 0 ) ? null : range;
		}
		if ( _$isnan_370( x ) ) {
			min = x;
			max = x;
		}
		if ( x > max ) {
			max = x;
		}
		if ( x < min ) {
			min = x;
		}
		range = max - min;
		return range;
	}
}


// EXPORTS //

var _$incrrange_1248 = incrrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a range incrementally.
*
* @module @stdlib/stats/incr/range
*
* @example
* var incrrange = require( '@stdlib/stats/incr/range' );
*
* var accumulator = incrrange();
*
* var range = accumulator();
* // returns null
*
* range = accumulator( 3.14 );
* // returns 0.0
*
* range = accumulator( -5.0 );
* // returns 8.14
*
* range = accumulator( 10.1 );
* // returns 15.1
*
* range = accumulator();
* // returns 15.1
*/

// MODULES //

/* removed: var _$incrrange_1248 = require( './main.js' ); */;


// EXPORTS //

var _$incrrange_1247 = _$incrrange_1248;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrrange_1247 = require( '@stdlib/stats/incr/range' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative range.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercurange( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercurange( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrrange_1247();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercurange( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercurange_1282 = itercurange;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative range.
*
* @module @stdlib/stats/iter/curange
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercurange = require( '@stdlib/stats/iter/curange' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercurange( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercurange_1282 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1281 = _$itercurange_1282;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a sum.
*
* ## Method
*
* -   This implementation uses a second-order "iterative Kahan–Babuška algorithm", as proposed by Klein (2005).
*
* ## References
*
* -   Klein, Andreas. 2005. "A Generalized Kahan-Babuška-Summation-Algorithm." _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrsum();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns -3.0
*
* sum = accumulator();
* // returns -3.0
*/
function incrsum() {
	var sum;
	var ccs;
	var FLG;
	var cs;
	var cc;
	var t;
	var c;

	sum = 0.0;
	ccs = 0.0; // second order correction term for lost low order bits
	cs = 0.0; // first order correction term for lost low order bits
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} sum or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( FLG ) ? sum+cs+ccs : null;
		}
		FLG = true;
		t = sum + x;
		if ( _$abs_390( sum ) >= _$abs_390( x ) ) {
			c = (sum-t) + x;
		} else {
			c = (x-t) + sum;
		}
		sum = t;
		t = cs + c;
		if ( _$abs_390( cs ) >= _$abs_390( c ) ) {
			cc = (cs-t) + c;
		} else {
			cc = (c-t) + cs;
		}
		cs = t;
		ccs += cc;
		return sum + cs + ccs;
	}
}


// EXPORTS //

var _$incrsum_1252 = incrsum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a sum incrementally.
*
* @module @stdlib/stats/incr/sum
*
* @example
* var incrsum = require( '@stdlib/stats/incr/sum' );
*
* var accumulator = incrsum();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns -3.0
*
* sum = accumulator();
* // returns -3.0
*/

// MODULES //

/* removed: var _$incrsum_1252 = require( './main.js' ); */;


// EXPORTS //

var _$incrsum_1251 = _$incrsum_1252;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrsum_1251 = require( '@stdlib/stats/incr/sum' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative sum.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercusum( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercusum( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrsum_1251();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercusum( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercusum_1284 = itercusum;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative sum.
*
* @module @stdlib/stats/iter/cusum
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercusum = require( '@stdlib/stats/iter/cusum' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercusum( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercusum_1284 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1283 = _$itercusum_1284;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a sum of absolute values.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrsumabs();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns 7.0
*
* sum = accumulator();
* // returns 7.0
*/
function incrsumabs() {
	var sum = 0.0;
	var FLG;
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} sum or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( FLG ) ? sum : null;
		}
		FLG = true;
		sum += _$abs_390( x );
		return sum;
	}
}


// EXPORTS //

var _$incrsumabs_1254 = incrsumabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a sum of absolute values incrementally.
*
* @module @stdlib/stats/incr/sumabs
*
* @example
* var incrsumabs = require( '@stdlib/stats/incr/sumabs' );
*
* var accumulator = incrsumabs();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns 7.0
*
* sum = accumulator();
* // returns 7.0
*/

// MODULES //

/* removed: var _$incrsumabs_1254 = require( './main.js' ); */;


// EXPORTS //

var _$incrsumabs_1253 = _$incrsumabs_1254;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrsumabs_1253 = require( '@stdlib/stats/incr/sumabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative sum of absolute values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercusumabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercusumabs( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrsumabs_1253();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercusumabs( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercusumabs_1286 = itercusumabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative sum of absolute values.
*
* @module @stdlib/stats/iter/cusumabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercusumabs = require( '@stdlib/stats/iter/cusumabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercusumabs( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercusumabs_1286 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1285 = _$itercusumabs_1286;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns an accumulator function which incrementally computes a sum of squared absolute values.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrsumabs2();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 4.0
*
* sum = accumulator( -5.0 );
* // returns 29.0
*
* sum = accumulator();
* // returns 29.0
*/
function incrsumabs2() {
	var sum = 0.0;
	var FLG;
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} sum or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return ( FLG ) ? sum : null;
		}
		FLG = true;
		sum += x * x;
		return sum;
	}
}


// EXPORTS //

var _$incrsumabs2_1256 = incrsumabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a sum of squared absolute values incrementally.
*
* @module @stdlib/stats/incr/sumabs2
*
* @example
* var incrsumabs2 = require( '@stdlib/stats/incr/sumabs2' );
*
* var accumulator = incrsumabs2();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 4.0
*
* sum = accumulator( -5.0 );
* // returns 29.0
*
* sum = accumulator();
* // returns 29.0
*/

// MODULES //

/* removed: var _$incrsumabs2_1256 = require( './main.js' ); */;


// EXPORTS //

var _$incrsumabs2_1255 = _$incrsumabs2_1256;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrsumabs2_1255 = require( '@stdlib/stats/incr/sumabs2' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a cumulative sum of squared absolute values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercusumabs2( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itercusumabs2( iterator ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );
	}
	acc = _$incrsumabs2_1255();

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itercusumabs2( iterator[ _$IteratorSymbol_1345 ]() );
	}
}


// EXPORTS //

var _$itercusumabs2_1288 = itercusumabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a cumulative sum of squared absolute values.
*
* @module @stdlib/stats/iter/cusumabs2
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itercusumabs2 = require( '@stdlib/stats/iter/cusumabs2' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itercusumabs2( rand );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itercusumabs2_1288 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1287 = _$itercusumabs2_1288;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmax_1203 = require( '@stdlib/stats/incr/max' ); */;


// MAIN //

/**
* Computes the maximum value of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} maximum value
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermax( rand );
* // returns <number>
*/
function itermax( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmax_1203();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermax_1290 = itermax;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the maximum value of all iterated values.
*
* @module @stdlib/stats/iter/max
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermax = require( '@stdlib/stats/iter/max' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermax( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermax_1290 = require( './main.js' ); */;


// EXPORTS //

var _$main_1289 = _$itermax_1290;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmaxabs_1205 = require( '@stdlib/stats/incr/maxabs' ); */;


// MAIN //

/**
* Computes the maximum absolute value of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} maximum absolute value
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermaxabs( rand );
* // returns <number>
*/
function itermaxabs( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmaxabs_1205();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermaxabs_1292 = itermaxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the maximum absolute value of all iterated values.
*
* @module @stdlib/stats/iter/maxabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermaxabs = require( '@stdlib/stats/iter/maxabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermaxabs( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermaxabs_1292 = require( './main.js' ); */;


// EXPORTS //

var _$main_1291 = _$itermaxabs_1292;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmean_1207 = require( '@stdlib/stats/incr/mean' ); */;


// MAIN //

/**
* Computes the arithmetic mean over all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} arithmetic mean
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermean( rand );
* // returns <number>
*/
function itermean( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmean_1207();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermean_1294 = itermean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arithmetic mean over all iterated values.
*
* @module @stdlib/stats/iter/mean
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermean = require( '@stdlib/stats/iter/mean' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermean( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermean_1294 = require( './main.js' ); */;


// EXPORTS //

var _$main_1293 = _$itermean_1294;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmeanabs_1209 = require( '@stdlib/stats/incr/meanabs' ); */;


// MAIN //

/**
* Computes the arithmetic mean of absolute values for all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} arithmetic mean of absolute values
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermeanabs( rand );
* // returns <number>
*/
function itermeanabs( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmeanabs_1209();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermeanabs_1296 = itermeanabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arithmetic mean of absolute values for all iterated values.
*
* @module @stdlib/stats/iter/meanabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermeanabs = require( '@stdlib/stats/iter/meanabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermeanabs( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermeanabs_1296 = require( './main.js' ); */;


// EXPORTS //

var _$main_1295 = _$itermeanabs_1296;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmeanabs2_1211 = require( '@stdlib/stats/incr/meanabs2' ); */;


// MAIN //

/**
* Computes the arithmetic mean of squared absolute values for all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} arithmetic mean of squared absolute values
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermeanabs2( rand );
* // returns <number>
*/
function itermeanabs2( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmeanabs2_1211();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermeanabs2_1298 = itermeanabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arithmetic mean of squared absolute values for all iterated values.
*
* @module @stdlib/stats/iter/meanabs2
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermeanabs2 = require( '@stdlib/stats/iter/meanabs2' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermeanabs2( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermeanabs2_1298 = require( './main.js' ); */;


// EXPORTS //

var _$main_1297 = _$itermeanabs2_1298;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmidrange_1213 = require( '@stdlib/stats/incr/midrange' ); */;


// MAIN //

/**
* Computes the mid-range of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} mid-range
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var v = itermidrange( rand );
* // returns <number>
*/
function itermidrange( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmidrange_1213();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermidrange_1300 = itermidrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the mid-range of all iterated values.
*
* @module @stdlib/stats/iter/midrange
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermidrange = require( '@stdlib/stats/iter/midrange' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var v = itermidrange( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermidrange_1300 = require( './main.js' ); */;


// EXPORTS //

var _$main_1299 = _$itermidrange_1300;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrmin_1215 = require( '@stdlib/stats/incr/min' ); */;


// MAIN //

/**
* Computes the minimum value of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} minimum value
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermin( rand );
* // returns <number>
*/
function itermin( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrmin_1215();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itermin_1302 = itermin;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the minimum value of all iterated values.
*
* @module @stdlib/stats/iter/min
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermin = require( '@stdlib/stats/iter/min' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = itermin( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itermin_1302 = require( './main.js' ); */;


// EXPORTS //

var _$main_1301 = _$itermin_1302;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrminabs_1217 = require( '@stdlib/stats/incr/minabs' ); */;


// MAIN //

/**
* Computes the minimum absolute value of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} minimum absolute value
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = iterminabs( rand );
* // returns <number>
*/
function iterminabs( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrminabs_1217();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$iterminabs_1304 = iterminabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the minimum absolute value of all iterated values.
*
* @module @stdlib/stats/iter/minabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var iterminabs = require( '@stdlib/stats/iter/minabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var m = iterminabs( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$iterminabs_1304 = require( './main.js' ); */;


// EXPORTS //

var _$main_1303 = _$iterminabs_1304;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1220 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPositiveZero_382 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving maximum value.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmax( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns 2.0
*
* m = accumulator( 3.0 );
* // returns 3.0
*
* m = accumulator( 5.0 );
* // returns 5.0
*
* m = accumulator();
* // returns 5.0
*/
function incrmmax( W ) {
	var buf;
	var max;
	var N;
	var i;
	if ( !__isPositiveInteger_1220( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	max = _$FLOAT64_NINF_235;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated maximum. If not provided a value, the accumulator function returns the current maximum.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} maximum value or null
	*/
	function accumulator( x ) {
		var v;
		var k;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return max;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Case: update initial window...
		if ( N < W ) {
			N += 1;
			if (
				_$isnan_370( x ) ||
				x > max ||
				( x === max && _$isPositiveZero_382( x ) )
			) {
				max = x;
			}
		}
		// Case: incoming value is NaN or greater than current maximum value...
		else if ( _$isnan_370( x ) || x > max ) {
			max = x;
		}
		// Case: outgoing value is the current maximum and the new value is less than the maximum, and, thus, we need to find a new maximum among the current values...
		else if ( ( buf[ i ] === max && x < max ) || _$isnan_370( buf[ i ] ) ) {
			max = x;
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					v = buf[ k ];
					if ( _$isnan_370( v ) ) {
						max = v;
						break; // no need to continue searching
					}
					if ( v > max || ( v === max && _$isPositiveZero_382( v ) ) ) {
						max = v;
					}
				}
			}
		}
		// Case: outgoing value is the current maximum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...
		else if ( buf[ i ] === max && x === max && x === 0.0 ) {
			if ( _$isPositiveZero_382( x ) ) {
				max = x;
			} else if ( _$isPositiveZero_382( buf[ i ] ) ) {
				// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...
				max = x;
				for ( k = 0; k < W; k++ ) {
					if ( k !== i && _$isPositiveZero_382( buf[ k ] ) ) {
						max = buf[ k ];
						break;
					}
				}
			}
			// Case: the outgoing and incoming values are both negative zero, so nothing changes
		}
		// Case: updating existing window; however, the maximum value does not change so nothing to do but update our buffer...

		buf[ i ] = x;
		return max;
	}
}


// EXPORTS //

var _$incrmmax_1220 = incrmmax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving maximum incrementally.
*
* @module @stdlib/stats/incr/mmax
*
* @example
* var incrmmax = require( '@stdlib/stats/incr/mmax' );
*
* var accumulator = incrmmax( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns 2.0
*
* m = accumulator( 3.0 );
* // returns 3.0
*
* m = accumulator( 5.0 );
* // returns 5.0
*
* m = accumulator();
* // returns 5.0
*/

// MODULES //

/* removed: var _$incrmmax_1220 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmax_1219 = _$incrmmax_1220;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1306 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmax_1219 = require( '@stdlib/stats/incr/mmax' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving maximum value.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmax( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmax( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1306( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmax_1219( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmax( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmax_1306 = itermmax;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving maximum value.
*
* @module @stdlib/stats/iter/mmax
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmax = require( '@stdlib/stats/iter/mmax' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmax( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmax_1306 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1305 = _$itermmax_1306;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1222 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmmax_1219 = require( '@stdlib/stats/incr/mmax' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving maximum absolute value.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmaxabs( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns 5.0
*
* m = accumulator( 3.0 );
* // returns 5.0
*
* m = accumulator( 5.0 );
* // returns 5.0
*
* m = accumulator();
* // returns 5.0
*/
function incrmmaxabs( W ) {
	var max;
	if ( !__isPositiveInteger_1222( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	max = _$incrmmax_1219( W );
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} maximum absolute value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return max();
		}
		return max( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrmmaxabs_1222 = incrmmaxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving maximum absolute value incrementally.
*
* @module @stdlib/stats/incr/mmaxabs
*
* @example
* var incrmmaxabs = require( '@stdlib/stats/incr/mmaxabs' );
*
* var accumulator = incrmmaxabs( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns 5.0
*
* m = accumulator( 3.0 );
* // returns 5.0
*
* m = accumulator( 5.0 );
* // returns 5.0
*
* m = accumulator();
* // returns 5.0
*/

// MODULES //

/* removed: var _$incrmmaxabs_1222 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmaxabs_1221 = _$incrmmaxabs_1222;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1308 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmaxabs_1221 = require( '@stdlib/stats/incr/mmaxabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving maximum absolute value.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmaxabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmaxabs( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1308( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmaxabs_1221( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmaxabs( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmaxabs_1308 = itermmaxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving maximum absolute value.
*
* @module @stdlib/stats/iter/mmaxabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmaxabs = require( '@stdlib/stats/iter/mmaxabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmaxabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmaxabs_1308 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1307 = _$itermmaxabs_1308;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1224 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving arithmetic mean.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmean( 3 );
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns -1.5
*
* mu = accumulator( 3.0 );
* // returns 0.0
*
* mu = accumulator( 5.0 );
* // returns 1.0
*
* mu = accumulator();
* // returns 1.0
*/
function incrmmean( W ) {
	var delta;
	var buf;
	var mu;
	var N;
	var i;
	if ( !__isPositiveInteger_1224( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	mu = 0.0;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} mean or null
	*/
	function accumulator( x ) {
		var k;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return mu;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Case: incoming value is NaN, the sliding mean is automatically NaN...
		if ( _$isnan_370( x ) ) {
			N = W; // explicitly set to avoid `N < W` branch
			mu = NaN;
		}
		// Case: initial window...
		else if ( N < W ) {
			N += 1;
			delta = x - mu;
			mu += delta / N;
		}
		// Case: outgoing value is NaN, and, thus, we need to compute the sample mean...
		else if ( _$isnan_370( buf[ i ] ) ) {
			N = 1;
			mu = x;
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					if ( _$isnan_370( buf[ k ] ) ) {
						N = W; // explicitly set to avoid `N < W` branch
						mu = NaN;
						break; // mean is automatically NaN, so no need to continue
					}
					N += 1;
					delta = buf[ k ] - mu;
					mu += delta / N;
				}
			}
		}
		// Case: neither the current mean nor the incoming value are NaN, so we need to update the sample mean...
		else if ( _$isnan_370( mu ) === false ) {
			delta = x - buf[ i ];
			mu += delta / W;
		}
		// Case: the current mean is NaN, so nothing to do until the buffer no longer contains NaN values...

		buf[ i ] = x;
		return mu;
	}
}


// EXPORTS //

var _$incrmmean_1224 = incrmmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving arithmetic mean incrementally.
*
* @module @stdlib/stats/incr/mmean
*
* @example
* var incrmmean = require( '@stdlib/stats/incr/mmean' );
*
* var accumulator = incrmmean( 3 );
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns -1.5
*
* mu = accumulator( 3.0 );
* // returns 0.0
*
* mu = accumulator( 5.0 );
* // returns 1.0
*
* mu = accumulator();
* // returns 1.0
*/

// MODULES //

/* removed: var _$incrmmean_1224 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmean_1223 = _$incrmmean_1224;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1310 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmean_1223 = require( '@stdlib/stats/incr/mmean' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving arithmetic mean.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmean( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmean( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1310( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmean_1223( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmean( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmean_1310 = itermmean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving arithmetic mean.
*
* @module @stdlib/stats/iter/mmean
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmean = require( '@stdlib/stats/iter/mmean' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmean( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmean_1310 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1309 = _$itermmean_1310;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1226 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmmean_1223 = require( '@stdlib/stats/incr/mmean' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving arithmetic mean of absolute values.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmeanabs( 3 );
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns 3.5
*
* mu = accumulator( 3.0 );
* // returns ~3.33
*
* mu = accumulator( 5.0 );
* // returns ~4.33
*
* mu = accumulator();
* // returns ~4.33
*/
function incrmmeanabs( W ) {
	var mean;
	if ( !__isPositiveInteger_1226( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	mean = _$incrmmean_1223( W );
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} mean or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return mean();
		}
		return mean( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrmmeanabs_1226 = incrmmeanabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving arithmetic mean of absolute values incrementally.
*
* @module @stdlib/stats/incr/mmeanabs
*
* @example
* var incrmmeanabs = require( '@stdlib/stats/incr/mmeanabs' );
*
* var accumulator = incrmmeanabs( 3 );
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns 3.5
*
* mu = accumulator( 3.0 );
* // returns ~3.33
*
* mu = accumulator( 5.0 );
* // returns ~4.33
*
* mu = accumulator();
* // returns ~4.33
*/

// MODULES //

/* removed: var _$incrmmeanabs_1226 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmeanabs_1225 = _$incrmmeanabs_1226;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1312 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmeanabs_1225 = require( '@stdlib/stats/incr/mmeanabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving arithmetic mean of absolute values.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmeanabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmeanabs( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1312( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmeanabs_1225( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmeanabs( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmeanabs_1312 = itermmeanabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving arithmetic mean of absolute values.
*
* @module @stdlib/stats/iter/mmeanabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmeanabs = require( '@stdlib/stats/iter/mmeanabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmeanabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmeanabs_1312 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1311 = _$itermmeanabs_1312;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1228 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$incrmmean_1223 = require( '@stdlib/stats/incr/mmean' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving arithmetic mean of squared absolute values.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmeanabs2( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 4.0
*
* m = accumulator( -5.0 );
* // returns 14.5
*
* m = accumulator( 3.0 );
* // returns ~12.67
*
* m = accumulator( 5.0 );
* // returns ~19.67
*
* m = accumulator();
* // returns ~19.67
*/
function incrmmeanabs2( W ) {
	var mean;
	if ( !__isPositiveInteger_1228( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	mean = _$incrmmean_1223( W );
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} mean or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return mean();
		}
		return mean( x*x );
	}
}


// EXPORTS //

var _$incrmmeanabs2_1228 = incrmmeanabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving arithmetic mean of squared absolute values incrementally.
*
* @module @stdlib/stats/incr/mmeanabs2
*
* @example
* var incrmmeanabs2 = require( '@stdlib/stats/incr/mmeanabs2' );
*
* var accumulator = incrmmeanabs2( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 4.0
*
* m = accumulator( -5.0 );
* // returns 14.5
*
* m = accumulator( 3.0 );
* // returns ~12.67
*
* m = accumulator( 5.0 );
* // returns ~19.67
*
* m = accumulator();
* // returns ~19.67
*/

// MODULES //

/* removed: var _$incrmmeanabs2_1228 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmeanabs2_1227 = _$incrmmeanabs2_1228;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1314 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmeanabs2_1227 = require( '@stdlib/stats/incr/mmeanabs2' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving arithmetic mean of squared absolute values.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmeanabs2( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmeanabs2( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1314( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmeanabs2_1227( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmeanabs2( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmeanabs2_1314 = itermmeanabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving arithmetic mean of squared absolute values.
*
* @module @stdlib/stats/iter/mmeanabs2
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmeanabs2 = require( '@stdlib/stats/iter/mmeanabs2' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmeanabs2( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmeanabs2_1314 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1313 = _$itermmeanabs2_1314;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1230 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving mid-range.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmidrange( 3 );
*
* var mr = accumulator();
* // returns null
*
* mr = accumulator( 2.0 );
* // returns 2.0
*
* mr = accumulator( -5.0 );
* // returns -1.5
*
* mr = accumulator( 3.0 );
* // returns -1.0
*
* mr = accumulator( 5.0 );
* // returns 0.0
*
* mr = accumulator();
* // returns 0.0
*/
function incrmmidrange( W ) {
	var buf;
	var min;
	var max;
	var N;
	var i;
	if ( !__isPositiveInteger_1230( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	min = _$FLOAT64_PINF_238;
	max = _$FLOAT64_NINF_235;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} mid-range or null
	*/
	function accumulator( x ) {
		var v;
		var k;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return ( max+min ) / 2.0;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		if ( x === 0.0 ) {
			x = 0.0; // normalizes +-0
		}
		// Case: incoming value is NaN...
		if ( _$isnan_370( x ) ) {
			N = W; // explicitly set to avoid `N < W` branch
			min = x;
			max = x;
		}
		// Case: initial window...
		else if ( N < W ) {
			N += 1;
			if ( x < min ) {
				min = x;
			}
			if ( x > max ) {
				max = x;
			}
		}
		// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...
		else if (
			( buf[ i ] === min && x > min ) ||
			( buf[ i ] === max && x < max ) ||
			_$isnan_370( buf[ i ] )
		) {
			min = x;
			max = x;
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					v = buf[ k ];
					if ( _$isnan_370( v ) ) {
						min = v;
						max = v;
						break; // no need to continue searching
					}
					if ( v < min ) {
						min = v;
					}
					if ( v > max ) {
						max = v;
					}
				}
			}
		}
		// Case: incoming value is less than current minimum value...
		else if ( x < min ) {
			min = x;
		}
		// Case: incoming value is greater than current maximum value...
		else if ( x > max ) {
			max = x;
		}
		// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...
		buf[ i ] = x;

		return ( max+min ) / 2.0;
	}
}


// EXPORTS //

var _$incrmmidrange_1230 = incrmmidrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving mid-range incrementally.
*
* @module @stdlib/stats/incr/mmidrange
*
* @example
* var incrmmidrange = require( '@stdlib/stats/incr/mmidrange' );
*
* var accumulator = incrmmidrange( 3 );
*
* var mr = accumulator();
* // returns null
*
* mr = accumulator( 2.0 );
* // returns 2.0
*
* mr = accumulator( -5.0 );
* // returns -1.5
*
* mr = accumulator( 3.0 );
* // returns -1.0
*
* mr = accumulator( 5.0 );
* // returns 0.0
*
* mr = accumulator();
* // returns 0.0
*/

// MODULES //

/* removed: var _$incrmmidrange_1230 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmidrange_1229 = _$incrmmidrange_1230;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1316 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmidrange_1229 = require( '@stdlib/stats/incr/mmidrange' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving mid-range.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmidrange( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmidrange( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1316( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmidrange_1229( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmidrange( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmidrange_1316 = itermmidrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving mid-range.
*
* @module @stdlib/stats/iter/mmidrange
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmidrange = require( '@stdlib/stats/iter/mmidrange' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmidrange( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmidrange_1316 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1315 = _$itermmidrange_1316;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1232 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isNegativeZero_374 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving minimum value.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmmin( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns -5.0
*
* m = accumulator( 3.0 );
* // returns -5.0
*
* m = accumulator( 5.0 );
* // returns -5.0
*
* m = accumulator();
* // returns -5.0
*/
function incrmmin( W ) {
	var buf;
	var min;
	var N;
	var i;
	if ( !__isPositiveInteger_1232( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	min = _$FLOAT64_PINF_238;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated minimum. If not provided a value, the accumulator function returns the current minimum.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} minimum value or null
	*/
	function accumulator( x ) {
		var v;
		var k;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return min;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Case: update initial window...
		if ( N < W ) {
			N += 1;
			if (
				_$isnan_370( x ) ||
				x < min ||
				( x === min && _$isNegativeZero_374( x ) )
			) {
				min = x;
			}
		}
		// Case: incoming value is NaN or less than current minimum value...
		else if ( _$isnan_370( x ) || x < min ) {
			min = x;
		}
		// Case: outgoing value is the current minimum and the new value is greater than the minimum, and, thus, we need to find a new minimum among the current values...
		else if ( ( buf[ i ] === min && x > min ) || _$isnan_370( buf[ i ] ) ) {
			min = x;
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					v = buf[ k ];
					if ( _$isnan_370( v ) ) {
						min = v;
						break; // no need to continue searching
					}
					if ( v < min || ( v === min && _$isNegativeZero_374( v ) ) ) {
						min = v;
					}
				}
			}
		}
		// Case: outgoing value is the current minimum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...
		else if ( buf[ i ] === min && x === min && x === 0.0 ) {
			if ( _$isNegativeZero_374( x ) ) {
				min = x;
			} else if ( _$isNegativeZero_374( buf[ i ] ) ) {
				// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...
				min = x;
				for ( k = 0; k < W; k++ ) {
					if ( k !== i && _$isNegativeZero_374( buf[ k ] ) ) {
						min = buf[ k ];
						break;
					}
				}
			}
			// Case: the outgoing and incoming values are both positive zero, so nothing changes
		}
		// Case: updating existing window; however, the minimum value does not change so nothing to do but update our buffer...

		buf[ i ] = x;
		return min;
	}
}


// EXPORTS //

var _$incrmmin_1232 = incrmmin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving minimum incrementally.
*
* @module @stdlib/stats/incr/mmin
*
* @example
* var incrmmin = require( '@stdlib/stats/incr/mmin' );
*
* var accumulator = incrmmin( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns -5.0
*
* m = accumulator( 3.0 );
* // returns -5.0
*
* m = accumulator( 5.0 );
* // returns -5.0
*
* m = accumulator();
* // returns -5.0
*/

// MODULES //

/* removed: var _$incrmmin_1232 = require( './main.js' ); */;


// EXPORTS //

var _$incrmmin_1231 = _$incrmmin_1232;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1318 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmmin_1231 = require( '@stdlib/stats/incr/mmin' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving minimum value.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmin( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermmin( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1318( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmmin_1231( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermmin( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermmin_1318 = itermmin;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving minimum value.
*
* @module @stdlib/stats/iter/mmin
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermmin = require( '@stdlib/stats/iter/mmin' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermmin( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermmin_1318 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1317 = _$itermmin_1318;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1234 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmmin_1231 = require( '@stdlib/stats/incr/mmin' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving minimum absolute value.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmminabs( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns 2.0
*
* m = accumulator( 3.0 );
* // returns 2.0
*
* m = accumulator( 5.0 );
* // returns 3.0
*
* m = accumulator();
* // returns 3.0
*/
function incrmminabs( W ) {
	var min;
	if ( !__isPositiveInteger_1234( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	min = _$incrmmin_1231( W );
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} minimum absolute value or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return min();
		}
		return min( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrmminabs_1234 = incrmminabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving minimum absolute value incrementally.
*
* @module @stdlib/stats/incr/mminabs
*
* @example
* var incrmminabs = require( '@stdlib/stats/incr/mminabs' );
*
* var accumulator = incrmminabs( 3 );
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0 );
* // returns 2.0
*
* m = accumulator( -5.0 );
* // returns 2.0
*
* m = accumulator( 3.0 );
* // returns 2.0
*
* m = accumulator( 5.0 );
* // returns 2.0
*
* m = accumulator();
* // returns 2.0
*/

// MODULES //

/* removed: var _$incrmminabs_1234 = require( './main.js' ); */;


// EXPORTS //

var _$incrmminabs_1233 = _$incrmminabs_1234;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1320 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmminabs_1233 = require( '@stdlib/stats/incr/mminabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving minimum absolute value.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermminabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermminabs( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1320( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmminabs_1233( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermminabs( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermminabs_1320 = itermminabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving minimum absolute value.
*
* @module @stdlib/stats/iter/mminabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermminabs = require( '@stdlib/stats/iter/mminabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermminabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermminabs_1320 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1319 = _$itermminabs_1320;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1236 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_366 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$frexp_527 = require( '@stdlib/math/base/special/frexp' ); */;
/* removed: var _$ldexp_559 = require( '@stdlib/math/base/special/ldexp' ); */;


// FUNCTIONS //

/**
* Computes an updated product.
*
* @private
* @param {Array} workspace - workspace array
* @param {Object} acc - accumulated fractional and exponent parts
* @param {number} x - multiplicative factor
* @returns {number} product
*/
function product( workspace, acc, x ) {
	// Split the incoming value into a normalized fraction and exponent:
	_$frexp_527( workspace, x );

	// Update the accumulated fraction:
	acc.frac *= workspace[ 0 ];

	// Update the accumulated exponent:
	acc.exp += workspace[ 1 ];

	// Ensure fraction remains normalized to avoid overflow/underflow...
	if ( acc.frac > -0.5 && acc.frac < 0.5 ) {
		_$frexp_527( workspace, acc.frac );
		acc.frac = workspace[ 0 ];
		acc.exp += workspace[ 1 ];
	}
	return _$ldexp_559( acc.frac, acc.exp );
}


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving product.
*
* ## Method
*
* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.
*
* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).
*
*
* ## References
*
* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmprod( 3 );
*
* var p = accumulator();
* // returns null
*
* p = accumulator( 2.0 );
* // returns 2.0
*
* p = accumulator( -5.0 );
* // returns -10.0
*
* p = accumulator( 3.0 );
* // returns -30.0
*
* p = accumulator( 5.0 );
* // returns -75.0
*
* p = accumulator();
* // returns -75.0
*/
function incrmprod( W ) {
	var parts;
	var prod;
	var buf;
	var acc;
	var N;
	var i;
	if ( !__isPositiveInteger_1236( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	i = -1;
	N = 0;

	// Initialize a workspace for `frexp`:
	parts = [ 0.0, 0 ];

	// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):
	prod = 1.0;
	acc = {};
	acc.frac = 0.5;
	acc.exp = 1.0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated prodct. If not provided a value, the accumulator function returns the current prodct.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} product or null
	*/
	function accumulator( x ) {
		var k;
		var v;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return prod;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Case: incoming value is NaN, the accumulated value is automatically NaN...
		if ( _$isnan_370( x ) ) {
			N = W; // explicitly set to avoid `N < W` branch
			prod = NaN;
		}
		// Case: initial window...
		else if ( N < W ) {
			N += 1;
			prod = product( parts, acc, x );
		}
		// Case: outgoing value is a "special" value, and, thus, we need to compute the accumulated value...
		else if (
			buf[ i ] === 0.0 ||
			_$isnan_370( buf[ i ] ) ||
			_$isInfinite_366( buf[ i ] )
		) {
			N = 1;
			acc.frac = 0.5;
			acc.exp = 1.0;
			product( parts, acc, x );
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					v = buf[ k ];
					if ( _$isnan_370( v ) ) {
						N = W; // explicitly set to avoid `N < W` branch
						prod = NaN;
						break; // product is automatically NaN, so no need to continue
					}
					N += 1;
					prod = product( parts, acc, v );
				}
			}
		}
		// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...
		else if ( _$isnan_370( prod ) === false ) {
			v = x / buf[ i ];
			prod = product( parts, acc, v );
		}
		// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...
		buf[ i ] = x;

		return prod;
	}
}


// EXPORTS //

var _$incrmprod_1236 = incrmprod;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving product incrementally.
*
* @module @stdlib/stats/incr/mprod
*
* @example
* var incrmprod = require( '@stdlib/stats/incr/mprod' );
*
* var accumulator = incrmprod( 3 );
*
* var p = accumulator();
* // returns null
*
* p = accumulator( 2.0 );
* // returns 2.0
*
* p = accumulator( -5.0 );
* // returns -10.0
*
* p = accumulator( 3.0 );
* // returns -30.0
*
* p = accumulator( 5.0 );
* // returns -75.0
*
* p = accumulator();
* // returns -75.0
*/

// MODULES //

/* removed: var _$incrmprod_1236 = require( './main.js' ); */;


// EXPORTS //

var _$incrmprod_1235 = _$incrmprod_1236;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1322 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmprod_1235 = require( '@stdlib/stats/incr/mprod' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving product.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermprod( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermprod( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1322( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmprod_1235( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermprod( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermprod_1322 = itermprod;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving product.
*
* @module @stdlib/stats/iter/mprod
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermprod = require( '@stdlib/stats/iter/mprod' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermprod( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermprod_1322 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1321 = _$itermprod_1322;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1238 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_238 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_235 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving range.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmrange( 3 );
*
* var r = accumulator();
* // returns null
*
* r = accumulator( 2.0 );
* // returns 0.0
*
* r = accumulator( -5.0 );
* // returns 7.0
*
* r = accumulator( 3.0 );
* // returns 8.0
*
* r = accumulator( 5.0 );
* // returns 10.0
*
* r = accumulator();
* // returns 10.0
*/
function incrmrange( W ) {
	var buf;
	var min;
	var max;
	var N;
	var i;
	if ( !__isPositiveInteger_1238( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	min = _$FLOAT64_PINF_238;
	max = _$FLOAT64_NINF_235;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} range or null
	*/
	function accumulator( x ) {
		var v;
		var k;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return max - min;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		if ( x === 0.0 ) {
			x = 0.0; // normalizes +-0
		}
		// Case: incoming value is NaN...
		if ( _$isnan_370( x ) ) {
			N = W; // explicitly set to avoid `N < W` branch
			min = x;
			max = x;
		}
		// Case: initial window...
		else if ( N < W ) {
			N += 1;
			if ( x < min ) {
				min = x;
			}
			if ( x > max ) {
				max = x;
			}
		}
		// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find a new accumulated values among the current buffer values...
		else if (
			( buf[ i ] === min && x > min ) ||
			( buf[ i ] === max && x < max ) ||
			_$isnan_370( buf[ i ] )
		) {
			min = x;
			max = x;
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					v = buf[ k ];
					if ( _$isnan_370( v ) ) {
						min = v;
						max = v;
						break; // no need to continue searching
					}
					if ( v < min ) {
						min = v;
					}
					if ( v > max ) {
						max = v;
					}
				}
			}
		}
		// Case: incoming value is less than current minimum value...
		else if ( x < min ) {
			min = x;
		}
		// Case: incoming value is greater than current maximum value...
		else if ( x > max ) {
			max = x;
		}
		// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...
		buf[ i ] = x;

		return max - min;
	}
}


// EXPORTS //

var _$incrmrange_1238 = incrmrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving range incrementally.
*
* @module @stdlib/stats/incr/mrange
*
* @example
* var incrmrange = require( '@stdlib/stats/incr/mrange' );
*
* var accumulator = incrmrange( 3 );
*
* var r = accumulator();
* // returns null
*
* r = accumulator( 2.0 );
* // returns 0.0
*
* r = accumulator( -5.0 );
* // returns 7.0
*
* r = accumulator( 3.0 );
* // returns 8.0
*
* r = accumulator( 5.0 );
* // returns 10.0
*
* r = accumulator();
* // returns 10.0
*/

// MODULES //

/* removed: var _$incrmrange_1238 = require( './main.js' ); */;


// EXPORTS //

var _$incrmrange_1237 = _$incrmrange_1238;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1324 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmrange_1237 = require( '@stdlib/stats/incr/mrange' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving range.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermrange( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermrange( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1324( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmrange_1237( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermrange( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermrange_1324 = itermrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving range.
*
* @module @stdlib/stats/iter/mrange
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermrange = require( '@stdlib/stats/iter/mrange' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermrange( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermrange_1324 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1323 = _$itermrange_1324;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1240 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving sum.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmsum( 3 );
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns -3.0
*
* sum = accumulator( 3.0 );
* // returns 0.0
*
* sum = accumulator( 5.0 );
* // returns 3.0
*
* sum = accumulator();
* // returns 3.0
*/
function incrmsum( W ) {
	var buf;
	var sum;
	var N;
	var i;
	if ( !__isPositiveInteger_1240( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	sum = 0.0;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} sum or null
	*/
	function accumulator( x ) {
		var k;
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return sum;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Case: incoming value is NaN, the accumulated value is automatically NaN...
		if ( _$isnan_370( x ) ) {
			N = W; // explicitly set to avoid `N < W` branch
			sum = NaN;
		}
		// Case: initial window...
		else if ( N < W ) {
			N += 1;
			sum += x;
		}
		// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...
		else if ( _$isnan_370( buf[ i ] ) ) {
			N = 1;
			sum = x;
			for ( k = 0; k < W; k++ ) {
				if ( k !== i ) {
					if ( _$isnan_370( buf[ k ] ) ) {
						N = W; // explicitly set to avoid `N < W` branch
						sum = NaN;
						break; // sum is automatically NaN, so no need to continue
					}
					N += 1;
					sum += buf[ k ];
				}
			}
		}
		// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...
		else if ( _$isnan_370( sum ) === false ) {
			sum += x - buf[ i ];
		}
		// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...

		buf[ i ] = x;
		return sum;
	}
}


// EXPORTS //

var _$incrmsum_1240 = incrmsum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving sum incrementally.
*
* @module @stdlib/stats/incr/msum
*
* @example
* var incrmsum = require( '@stdlib/stats/incr/msum' );
*
* var accumulator = incrmsum( 3 );
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns -3.0
*
* sum = accumulator( 3.0 );
* // returns 0.0
*
* sum = accumulator( 5.0 );
* // returns 3.0
*
* sum = accumulator();
* // returns 3.0
*/

// MODULES //

/* removed: var _$incrmsum_1240 = require( './main.js' ); */;


// EXPORTS //

var _$incrmsum_1239 = _$incrmsum_1240;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1326 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmsum_1239 = require( '@stdlib/stats/incr/msum' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving sum.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermsum( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermsum( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1326( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmsum_1239( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermsum( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermsum_1326 = itermsum;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving sum.
*
* @module @stdlib/stats/iter/msum
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermsum = require( '@stdlib/stats/iter/msum' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermsum( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermsum_1326 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1325 = _$itermsum_1326;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1242 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$abs_390 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$incrmsum_1239 = require( '@stdlib/stats/incr/msum' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving sum of absolute values.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmsumabs( 3 );
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns 7.0
*
* sum = accumulator( 3.0 );
* // returns 10.0
*
* sum = accumulator( 5.0 );
* // returns 13.0
*
* sum = accumulator();
* // returns 13.0
*/
function incrmsumabs( W ) {
	var sum;
	if ( !__isPositiveInteger_1242( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	sum = _$incrmsum_1239( W );
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} sum or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return sum();
		}
		return sum( _$abs_390( x ) );
	}
}


// EXPORTS //

var _$incrmsumabs_1242 = incrmsumabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving sum of absolute values incrementally.
*
* @module @stdlib/stats/incr/msumabs
*
* @example
* var incrmsumabs = require( '@stdlib/stats/incr/msumabs' );
*
* var accumulator = incrmsumabs( 3 );
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 2.0
*
* sum = accumulator( -5.0 );
* // returns 7.0
*
* sum = accumulator( 3.0 );
* // returns 10.0
*
* sum = accumulator( -5.0 );
* // returns 13.0
*
* sum = accumulator();
* // returns 13.0
*/

// MODULES //

/* removed: var _$incrmsumabs_1242 = require( './main.js' ); */;


// EXPORTS //

var _$incrmsumabs_1241 = _$incrmsumabs_1242;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1328 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmsumabs_1241 = require( '@stdlib/stats/incr/msumabs' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving sum of absolute values.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermsumabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermsumabs( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1328( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmsumabs_1241( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermsumabs( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermsumabs_1328 = itermsumabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving sum of absolute values.
*
* @module @stdlib/stats/iter/msumabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermsumabs = require( '@stdlib/stats/iter/msumabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermsumabs( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermsumabs_1328 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1327 = _$itermsumabs_1328;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isPositiveInteger_1244 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$incrmsum_1239 = require( '@stdlib/stats/incr/msum' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving sum of squared absolute values.
*
* @param {PositiveInteger} W - window size
* @throws {TypeError} must provide a positive integer
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmsumabs2( 3 );
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 4.0
*
* sum = accumulator( -5.0 );
* // returns 29.0
*
* sum = accumulator( 3.0 );
* // returns 38.0
*
* sum = accumulator( 5.0 );
* // returns 59.0
*
* sum = accumulator();
* // returns 59.0
*/
function incrmsumabs2( W ) {
	var sum;
	if ( !__isPositiveInteger_1244( W ) ) {
		throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	sum = _$incrmsum_1239( W );
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} sum or null
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return sum();
		}
		return sum( x*x );
	}
}


// EXPORTS //

var _$incrmsumabs2_1244 = incrmsumabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a moving sum of squared absolute values incrementally.
*
* @module @stdlib/stats/incr/msumabs2
*
* @example
* var incrmsumabs2 = require( '@stdlib/stats/incr/msumabs2' );
*
* var accumulator = incrmsumabs2( 3 );
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 4.0
*
* sum = accumulator( -5.0 );
* // returns 29.0
*
* sum = accumulator( 3.0 );
* // returns 38.0
*
* sum = accumulator( -5.0 );
* // returns 59.0
*
* sum = accumulator();
* // returns 59.0
*/

// MODULES //

/* removed: var _$incrmsumabs2_1244 = require( './main.js' ); */;


// EXPORTS //

var _$incrmsumabs2_1243 = _$incrmsumabs2_1244;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1359 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
var __isPositiveInteger_1330 = _$isPositiveInteger_174.isPrimitive;
/* removed: var _$isFunction_132 = require( '@stdlib/assert/is-function' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$IteratorSymbol_1345 = require( '@stdlib/symbol/iterator' ); */;
/* removed: var _$incrmsumabs2_1243 = require( '@stdlib/stats/incr/msumabs2' ); */;


// MAIN //

/**
* Returns an iterator which iteratively computes a moving sum of squared absolute values.
*
* @param {Iterator} iterator - input iterator
* @param {PositiveInteger} W - window size
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a positive integer
* @returns {Iterator} iterator
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermsumabs2( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/
function itermsumabs2( iterator, W ) {
	var iter;
	var FLG;
	var acc;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );
	}
	if ( !__isPositiveInteger_1330( W ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );
	}
	acc = _$incrmsumabs2_1243( W );

	// Create an iterator protocol-compliant object:
	iter = {};
	_$setNonEnumerableReadOnly_1359( iter, 'next', next );
	_$setNonEnumerableReadOnly_1359( iter, 'return', end );

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if ( _$IteratorSymbol_1345 && _$isFunction_132( iterator[ _$IteratorSymbol_1345 ] ) ) {
		_$setNonEnumerableReadOnly_1359( iter, _$IteratorSymbol_1345, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/
	function next() {
		var out;
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		out = {};
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			out.value = acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			out.value = acc( NaN );
		}
		if ( v.done ) {
			FLG = true;
			out.done = true;
		} else {
			out.done = false;
		}
		return out;
	}

	/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/
	function end( value ) {
		FLG = true;
		if ( arguments.length ) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/
	function factory() {
		return itermsumabs2( iterator[ _$IteratorSymbol_1345 ](), W );
	}
}


// EXPORTS //

var _$itermsumabs2_1330 = itermsumabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create an iterator which iteratively computes a moving sum of squared absolute values.
*
* @module @stdlib/stats/iter/msumabs2
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itermsumabs2 = require( '@stdlib/stats/iter/msumabs2' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var it = itermsumabs2( rand, 3 );
*
* var v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* v = it.next().value;
* // returns <number>
*
* // ...
*/

// MODULES //

/* removed: var _$itermsumabs2_1330 = require( './main.js' ); */;


// EXPORTS //

var _$iterator_1329 = _$itermsumabs2_1330;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrprod_1245 = require( '@stdlib/stats/incr/prod' ); */;


// MAIN //

/**
* Computes the product of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} product
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var p = iterprod( rand );
* // returns <number>
*/
function iterprod( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrprod_1245();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$iterprod_1332 = iterprod;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the product of all iterated values.
*
* @module @stdlib/stats/iter/prod
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var iterprod = require( '@stdlib/stats/iter/prod' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var p = iterprod( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$iterprod_1332 = require( './main.js' ); */;


// EXPORTS //

var _$main_1331 = _$iterprod_1332;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrrange_1247 = require( '@stdlib/stats/incr/range' ); */;


// MAIN //

/**
* Computes the range of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} range
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var v = iterrange( rand );
* // returns <number>
*/
function iterrange( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrrange_1247();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$iterrange_1334 = iterrange;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the range of all iterated values.
*
* @module @stdlib/stats/iter/range
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var iterrange = require( '@stdlib/stats/iter/range' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var v = iterrange( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$iterrange_1334 = require( './main.js' ); */;


// EXPORTS //

var _$main_1333 = _$iterrange_1334;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_1250 = _$isNumber_162.isPrimitive;
/* removed: var _$sqrt_625 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a corrected sample standard deviation.
*
* ## Method
*
* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let
*
*     ```tex
*     \begin{align*}
*     S_n &= n \sigma_n^2 \\
*         &= \sum_{i=1}^{n} (x_i - \mu_n)^2 \\
*         &= \biggl(\sum_{i=1}^{n} x_i^2 \biggr) - n\mu_n^2
*     \end{align*}
*     ```
*
*     Accordingly,
*
*     ```tex
*     \begin{align*}
*     S_n - S_{n-1} &= \sum_{i=1}^{n} x_i^2 - n\mu_n^2 - \sum_{i=1}^{n-1} x_i^2 + (n-1)\mu_{n-1}^2 \\
*                   &= x_n^2 - n\mu_n^2 + (n-1)\mu_{n-1}^2 \\
*                   &= x_n^2 - \mu_{n-1}^2 + n(\mu_{n-1}^2 - \mu_n^2) \\
*                   &= x_n^2 - \mu_{n-1}^2 + n(\mu_{n-1} - \mu_n)(\mu_{n-1} + \mu_n) \\
*                   &= x_n^2 - \mu_{n-1}^2 + (\mu_{n-1} - x_n)(\mu_{n-1} + \mu_n) \\
*                   &= x_n^2 - \mu_{n-1}^2 + \mu_{n-1}^2 - x_n\mu_n - x_n\mu_{n-1} + \mu_n\mu_{n-1} \\
*                   &= x_n^2 - x_n\mu_n - x_n\mu_{n-1} + \mu_n\mu_{n-1} \\
*                   &= (x_n - \mu_{n-1})(x_n - \mu_n) \\
*                   &= S_{n-1} + (x_n - \mu_{n-1})(x_n - \mu_n)
*     \end{align*}
*     ```
*
*     where we use the identity
*
*     ```tex
*     x_n - \mu_{n-1} = n (\mu_n - \mu_{n-1})
*     ```
*
* ## References
*
* -   Welford, B. P. 1962. "Note on a Method for Calculating Corrected Sums of Squares and Products." _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).
* -   van Reeken, A. J. 1968. "Letters to the Editor: Dealing with Neely's Algorithms." _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).
*
* @param {number} [mean] - mean value
* @throws {TypeError} must provide a number primitive
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrstdev();
*
* var s = accumulator();
* // returns null
*
* s = accumulator( 2.0 );
* // returns 0.0
*
* s = accumulator( -5.0 );
* // returns ~4.95
*
* s = accumulator();
* // returns ~4.95
*
* @example
* var accumulator = incrstdev( 3.0 );
*/
function incrstdev( mean ) {
	var delta;
	var mu;
	var M2;
	var N;

	M2 = 0.0;
	N = 0;
	if ( arguments.length ) {
		if ( !__isNumber_1250( mean ) ) {
			throw new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );
		}
		mu = mean;
		return accumulator2;
	}
	mu = 0.0;
	return accumulator1;

	/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} corrected sample standard deviation or null
	*/
	function accumulator1( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			if ( N === 1 ) {
				return ( _$isnan_370( M2 ) ) ? NaN : 0.0;
			}
			return _$sqrt_625( M2/(N-1) );
		}
		N += 1;
		delta = x - mu;
		mu += delta / N;
		M2 += delta * ( x-mu );
		if ( N < 2 ) {
			return ( _$isnan_370( M2 ) ) ? NaN : 0.0;
		}
		return _$sqrt_625( M2/(N-1) );
	}

	/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} corrected sample standard deviation or null
	*/
	function accumulator2( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return _$sqrt_625( M2/N );
		}
		N += 1;
		delta = x - mu;
		M2 += delta * delta;
		return _$sqrt_625( M2/N );
	}
}


// EXPORTS //

var _$incrstdev_1250 = incrstdev;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a corrected sample standard deviation incrementally.
*
* @module @stdlib/stats/incr/stdev
*
* @example
* var incrstdev = require( '@stdlib/stats/incr/stdev' );
*
* var accumulator = incrstdev();
*
* var s = accumulator();
* // returns null
*
* s = accumulator( 2.0 );
* // returns 0.0
*
* s = accumulator( -5.0 );
* // returns ~4.95
*
* s = accumulator();
* // returns ~4.95
*/

// MODULES //

/* removed: var _$incrstdev_1250 = require( './main.js' ); */;


// EXPORTS //

var _$incrstdev_1249 = _$incrstdev_1250;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNumber_1336 = _$isNumber_162.isPrimitive;
/* removed: var _$incrstdev_1249 = require( '@stdlib/stats/incr/stdev' ); */;


// MAIN //

/**
* Computes the corrected sample standard deviation over all iterated values.
*
* @param {Iterator} iterator - input iterator
* @param {number} [mean] - mean value
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a number
* @returns {(number|null)} corrected sample standard deviation
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = iterstdev( rand );
* // returns <number>
*/
function iterstdev( iterator, mean ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !__isNumber_1336( mean ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.' );
		}
		acc = _$incrstdev_1249( mean );
	} else {
		acc = _$incrstdev_1249();
	}
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$iterstdev_1336 = iterstdev;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the corrected sample standard deviation over all iterated values.
*
* @module @stdlib/stats/iter/stdev
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var iterstdev = require( '@stdlib/stats/iter/stdev' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = iterstdev( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$iterstdev_1336 = require( './main.js' ); */;


// EXPORTS //

var _$main_1335 = _$iterstdev_1336;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrsum_1251 = require( '@stdlib/stats/incr/sum' ); */;


// MAIN //

/**
* Computes the sum of all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} sum
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = itersum( rand );
* // returns <number>
*/
function itersum( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrsum_1251();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itersum_1338 = itersum;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sum of all iterated values.
*
* @module @stdlib/stats/iter/sum
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itersum = require( '@stdlib/stats/iter/sum' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = itersum( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itersum_1338 = require( './main.js' ); */;


// EXPORTS //

var _$main_1337 = _$itersum_1338;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrsumabs_1253 = require( '@stdlib/stats/incr/sumabs' ); */;


// MAIN //

/**
* Computes the sum of absolute values for all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} sum of absolute values
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = itersumabs( rand );
* // returns <number>
*/
function itersumabs( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrsumabs_1253();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itersumabs_1340 = itersumabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sum of absolute values for all iterated values.
*
* @module @stdlib/stats/iter/sumabs
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itersumabs = require( '@stdlib/stats/iter/sumabs' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = itersumabs( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itersumabs_1340 = require( './main.js' ); */;


// EXPORTS //

var _$main_1339 = _$itersumabs_1340;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$incrsumabs2_1255 = require( '@stdlib/stats/incr/sumabs2' ); */;


// MAIN //

/**
* Computes the sum of squared absolute values for all iterated values.
*
* @param {Iterator} iterator - input iterator
* @throws {TypeError} must provide an iterator
* @returns {(number|null)} sum of squared absolute values
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = itersumabs2( rand );
* // returns <number>
*/
function itersumabs2( iterator ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );
	}
	acc = _$incrsumabs2_1255();
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itersumabs2_1342 = itersumabs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sum of squared absolute values for all iterated values.
*
* @module @stdlib/stats/iter/sumabs2
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itersumabs2 = require( '@stdlib/stats/iter/sumabs2' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s = itersumabs2( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itersumabs2_1342 = require( './main.js' ); */;


// EXPORTS //

var _$main_1341 = _$itersumabs2_1342;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_1258 = _$isNumber_162.isPrimitive;
/* removed: var _$isnan_370 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns an accumulator function which incrementally computes an unbiased sample variance.
*
* ## Method
*
* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let
*
*     ```tex
*     \begin{align*}
*     S_n &= n \sigma_n^2 \\
*         &= \sum_{i=1}^{n} (x_i - \mu_n)^2 \\
*         &= \biggl(\sum_{i=1}^{n} x_i^2 \biggr) - n\mu_n^2
*     \end{align*}
*     ```
*
*     Accordingly,
*
*     ```tex
*     \begin{align*}
*     S_n - S_{n-1} &= \sum_{i=1}^{n} x_i^2 - n\mu_n^2 - \sum_{i=1}^{n-1} x_i^2 + (n-1)\mu_{n-1}^2 \\
*                   &= x_n^2 - n\mu_n^2 + (n-1)\mu_{n-1}^2 \\
*                   &= x_n^2 - \mu_{n-1}^2 + n(\mu_{n-1}^2 - \mu_n^2) \\
*                   &= x_n^2 - \mu_{n-1}^2 + n(\mu_{n-1} - \mu_n)(\mu_{n-1} + \mu_n) \\
*                   &= x_n^2 - \mu_{n-1}^2 + (\mu_{n-1} - x_n)(\mu_{n-1} + \mu_n) \\
*                   &= x_n^2 - \mu_{n-1}^2 + \mu_{n-1}^2 - x_n\mu_n - x_n\mu_{n-1} + \mu_n\mu_{n-1} \\
*                   &= x_n^2 - x_n\mu_n - x_n\mu_{n-1} + \mu_n\mu_{n-1} \\
*                   &= (x_n - \mu_{n-1})(x_n - \mu_n) \\
*                   &= S_{n-1} + (x_n - \mu_{n-1})(x_n - \mu_n)
*     \end{align*}
*     ```
*
*     where we use the identity
*
*     ```tex
*     x_n - \mu_{n-1} = n (\mu_n - \mu_{n-1})
*     ```
*
* ## References
*
* -   Welford, B. P. 1962. "Note on a Method for Calculating Corrected Sums of Squares and Products." _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).
* -   van Reeken, A. J. 1968. "Letters to the Editor: Dealing with Neely's Algorithms." _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).
*
* @param {number} [mean] - mean value
* @throws {TypeError} must provide a number primitive
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrvariance();
*
* var s2 = accumulator();
* // returns null
*
* s2 = accumulator( 2.0 );
* // returns 0.0
*
* s2 = accumulator( -5.0 );
* // returns 24.5
*
* s2 = accumulator();
* // returns 24.5
*
* @example
* var accumulator = incrvariance( 3.14 );
*/
function incrvariance( mean ) {
	var delta;
	var mu;
	var M2;
	var N;

	M2 = 0.0;
	N = 0;
	if ( arguments.length ) {
		if ( !__isNumber_1258( mean ) ) {
			throw new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );
		}
		mu = mean;
		return accumulator2;
	}
	mu = 0.0;
	return accumulator1;

	/**
	* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} unbiased sample variance or null
	*/
	function accumulator1( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			if ( N === 1 ) {
				return ( _$isnan_370( M2 ) ) ? NaN : 0.0;
			}
			return M2 / (N-1);
		}
		N += 1;
		delta = x - mu;
		mu += delta / N;
		M2 += delta * ( x - mu );
		if ( N < 2 ) {
			return ( _$isnan_370( M2 ) ) ? NaN : 0.0;
		}
		return M2 / (N-1);
	}

	/**
	* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} unbiased sample variance or null
	*/
	function accumulator2( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return M2 / N;
		}
		N += 1;
		delta = x - mu;
		M2 += delta * delta;
		return M2 / N;
	}
}


// EXPORTS //

var _$incrvariance_1258 = incrvariance;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an unbiased sample variance incrementally.
*
* @module @stdlib/stats/incr/variance
*
* @example
* var incrvariance = require( '@stdlib/stats/incr/variance' );
*
* var accumulator = incrvariance();
*
* var s2 = accumulator();
* // returns null
*
* s2 = accumulator( 2.0 );
* // returns 0.0
*
* s2 = accumulator( -5.0 );
* // returns 24.5
*
* s2 = accumulator();
* // returns 24.5
*/

// MODULES //

/* removed: var _$incrvariance_1258 = require( './main.js' ); */;


// EXPORTS //

var _$incrvariance_1257 = _$incrvariance_1258;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isIterator_145 = require( '@stdlib/assert/is-iterator-like' ); */;
/* removed: var _$hasOwnProp_78 = require( '@stdlib/assert/has-own-property' ); */;
var __isNumber_1344 = _$isNumber_162.isPrimitive;
/* removed: var _$incrvariance_1257 = require( '@stdlib/stats/incr/variance' ); */;


// MAIN //

/**
* Computes the unbiased sample variance over all iterated values.
*
* @param {Iterator} iterator - input iterator
* @param {number} [mean] - mean value
* @throws {TypeError} first argument must be an iterator
* @throws {TypeError} second argument must be a number
* @returns {(number|null)} unbiased sample variance
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s2 = itervariance( rand );
* // returns <number>
*/
function itervariance( iterator, mean ) {
	var acc;
	var v;
	if ( !_$isIterator_145( iterator ) ) {
		throw new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );
	}
	if ( arguments.length > 1 ) {
		if ( !__isNumber_1344( mean ) ) {
			throw new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.' );
		}
		acc = _$incrvariance_1257( mean );
	} else {
		acc = _$incrvariance_1257();
	}
	while ( true ) {
		v = iterator.next();
		if ( typeof v.value === 'number' ) {
			acc( v.value );
		} else if ( _$hasOwnProp_78( v, 'value' ) ) {
			acc( NaN );
		}
		if ( v.done ) {
			break;
		}
	}
	return acc();
}


// EXPORTS //

var _$itervariance_1344 = itervariance;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the unbiased sample variance over all iterated values.
*
* @module @stdlib/stats/iter/variance
*
* @example
* var runif = require( '@stdlib/random/iter/uniform' );
* var itervariance = require( '@stdlib/stats/iter/variance' );
*
* var rand = runif( -10.0, 10.0, {
*     'iter': 100
* });
*
* var s2 = itervariance( rand );
* // returns <number>
*/

// MODULES //

/* removed: var _$itervariance_1344 = require( './main.js' ); */;


// EXPORTS //

var _$main_1343 = _$itervariance_1344;

"use strict";

/* removed: var _$setReadOnly_1366 = require('@stdlib/utils/define-read-only-property'); */;

var ns = {};
_$setReadOnly_1366(ns,'iterator2array',_$main_7);
_$setReadOnly_1366(ns,'circarray2iterator',_$iterator_18);
_$setReadOnly_1366(ns,'array2iterator',_$iterator_22);
_$setReadOnly_1366(ns,'array2iteratorRight',_$iterator_20);
_$setReadOnly_1366(ns,'sparsearray2iterator',_$iterator_30);
_$setReadOnly_1366(ns,'sparsearray2iteratorRight',_$iterator_28);
_$setReadOnly_1366(ns,'stridedarray2iterator',_$iterator_32);
_$setReadOnly_1366(ns,'arrayview2iterator',_$iterator_36);
_$setReadOnly_1366(ns,'arrayview2iteratorRight',_$iterator_34);
_$setReadOnly_1366(ns,'iterAdvance',_$iterAdvance_255);
_$setReadOnly_1366(ns,'iterAny',_$iterAny_259);
_$setReadOnly_1366(ns,'iterAnyBy',_$iterAnyBy_257);
_$setReadOnly_1366(ns,'iterConcat',_$iterConcat_261);
_$setReadOnly_1366(ns,'iterConstant',_$iterator_263);
_$setReadOnly_1366(ns,'iterCounter',_$iterCounter_265);
_$setReadOnly_1366(ns,'iterDatespace',_$iterator_268);
_$setReadOnly_1366(ns,'iterDedupe',_$iterDedupe_272);
_$setReadOnly_1366(ns,'iterDedupeBy',_$iterDedupeBy_270);
_$setReadOnly_1366(ns,'iterEmpty',_$iterator_274);
_$setReadOnly_1366(ns,'iterEvery',_$iterEvery_278);
_$setReadOnly_1366(ns,'iterEveryBy',_$iterEveryBy_276);
_$setReadOnly_1366(ns,'iterFill',_$iterFill_280);
_$setReadOnly_1366(ns,'iterFilter',_$iterFilter_284);
_$setReadOnly_1366(ns,'iterFilterMap',_$iterFilterMap_282);
_$setReadOnly_1366(ns,'iterFirst',_$iterFirst_286);
_$setReadOnly_1366(ns,'iterFlow',_$iterFlow_288);
_$setReadOnly_1366(ns,'iterForEach',_$iterator_290);
_$setReadOnly_1366(ns,'iterHead',_$iterHead_292);
_$setReadOnly_1366(ns,'iterIncrspace',_$iterator_294);
_$setReadOnly_1366(ns,'iterIntersection',_$iterIntersection_298);
_$setReadOnly_1366(ns,'iterIntersectionByHash',_$iterIntersectionByHash_296);
_$setReadOnly_1366(ns,'iterLast',_$iterLast_300);
_$setReadOnly_1366(ns,'iterLength',_$iterLength_302);
_$setReadOnly_1366(ns,'iterLinspace',_$iterator_304);
_$setReadOnly_1366(ns,'iterLogspace',_$iterator_306);
_$setReadOnly_1366(ns,'iterMap',_$iterMap_308);
_$setReadOnly_1366(ns,'iterMapN',_$iterMapN_310);
_$setReadOnly_1366(ns,'iterNone',_$iterNone_314);
_$setReadOnly_1366(ns,'iterNoneBy',_$iterNoneBy_312);
_$setReadOnly_1366(ns,'iterNth',_$iterNth_316);
_$setReadOnly_1366(ns,'iterPipeline',_$iterPipeline_320);
_$setReadOnly_1366(ns,'iterThunk',_$iterThunk_318);
_$setReadOnly_1366(ns,'iterPop',_$iterPop_322);
_$setReadOnly_1366(ns,'iterPush',_$iterPush_324);
_$setReadOnly_1366(ns,'iterReject',_$iterReject_326);
_$setReadOnly_1366(ns,'iterReplicate',_$iterReplicate_330);
_$setReadOnly_1366(ns,'iterReplicateBy',_$iterReplicateBy_328);
_$setReadOnly_1366(ns,'iterShift',_$iterShift_332);
_$setReadOnly_1366(ns,'iterSlice',_$iterSlice_334);
_$setReadOnly_1366(ns,'iterSome',_$iterSome_338);
_$setReadOnly_1366(ns,'iterSomeBy',_$iterSomeBy_336);
_$setReadOnly_1366(ns,'iterStep',_$iterator_340);
_$setReadOnly_1366(ns,'iterStrided',_$iterStrided_344);
_$setReadOnly_1366(ns,'iterStridedBy',_$iterStridedBy_342);
_$setReadOnly_1366(ns,'iterator2arrayview',_$main_348);
_$setReadOnly_1366(ns,'iterator2arrayviewRight',_$main_346);
_$setReadOnly_1366(ns,'iterUnion',_$iterUnion_350);
_$setReadOnly_1366(ns,'iterUnique',_$iterUnique_356);
_$setReadOnly_1366(ns,'iterUniqueBy',_$iterUniqueBy_354);
_$setReadOnly_1366(ns,'iterUniqueByHash',_$iterUniqueByHash_352);
_$setReadOnly_1366(ns,'iterUnitspace',_$iterator_358);
_$setReadOnly_1366(ns,'iterUnshift',_$iterUnshift_360);
_$setReadOnly_1366(ns,'iterCompositesSeq',_$iterator_633);
_$setReadOnly_1366(ns,'iterCubesSeq',_$iterator_636);
_$setReadOnly_1366(ns,'iterEvenIntegersSeq',_$iterator_639);
_$setReadOnly_1366(ns,'iterFactorialsSeq',_$iterator_642);
_$setReadOnly_1366(ns,'iterFibonacciSeq',_$iterator_645);
_$setReadOnly_1366(ns,'iterIntegersSeq',_$iterator_648);
_$setReadOnly_1366(ns,'iterLucasSeq',_$iterator_651);
_$setReadOnly_1366(ns,'iterNegaFibonacciSeq',_$iterator_654);
_$setReadOnly_1366(ns,'iterNegaLucasSeq',_$iterator_657);
_$setReadOnly_1366(ns,'iterNegativeIntegersSeq',_$iterator_660);
_$setReadOnly_1366(ns,'iterNonFibonacciSeq',_$iterator_663);
_$setReadOnly_1366(ns,'iterNonNegativeEvenIntegersSeq',_$iterator_666);
_$setReadOnly_1366(ns,'iterNonNegativeIntegersSeq',_$iterator_669);
_$setReadOnly_1366(ns,'iterNonPositiveIntegersSeq',_$iterator_672);
_$setReadOnly_1366(ns,'iterNonSquaresSeq',_$iterator_675);
_$setReadOnly_1366(ns,'iterOddIntegersSeq',_$iterator_678);
_$setReadOnly_1366(ns,'iterPositiveEvenIntegersSeq',_$iterator_681);
_$setReadOnly_1366(ns,'iterPositiveIntegersSeq',_$iterator_684);
_$setReadOnly_1366(ns,'iterPrimesSeq',_$iterator_687);
_$setReadOnly_1366(ns,'iterSquaredTriangularSeq',_$iterator_690);
_$setReadOnly_1366(ns,'iterSquaresSeq',_$iterator_693);
_$setReadOnly_1366(ns,'iterTriangularSeq',_$iterator_696);
_$setReadOnly_1366(ns,'iterAbs',_$iterator_699);
_$setReadOnly_1366(ns,'iterAbs2',_$iterator_701);
_$setReadOnly_1366(ns,'iterAcos',_$iterator_703);
_$setReadOnly_1366(ns,'iterAcosh',_$iterator_705);
_$setReadOnly_1366(ns,'iterAcoth',_$iterator_707);
_$setReadOnly_1366(ns,'iterAcovercos',_$iterator_709);
_$setReadOnly_1366(ns,'iterAcoversin',_$iterator_711);
_$setReadOnly_1366(ns,'iterAdd',_$iterAdd_713);
_$setReadOnly_1366(ns,'iterAhavercos',_$iterator_715);
_$setReadOnly_1366(ns,'iterAhaversin',_$iterator_717);
_$setReadOnly_1366(ns,'iterAsin',_$iterator_719);
_$setReadOnly_1366(ns,'iterAsinh',_$iterator_721);
_$setReadOnly_1366(ns,'iterAtan',_$iterator_723);
_$setReadOnly_1366(ns,'iterAtan2',_$iterator_725);
_$setReadOnly_1366(ns,'iterAtanh',_$iterator_727);
_$setReadOnly_1366(ns,'iterAvercos',_$iterator_729);
_$setReadOnly_1366(ns,'iterAversin',_$iterator_731);
_$setReadOnly_1366(ns,'iterBesselj0',_$iterator_733);
_$setReadOnly_1366(ns,'iterBesselj1',_$iterator_735);
_$setReadOnly_1366(ns,'iterBessely0',_$iterator_737);
_$setReadOnly_1366(ns,'iterBessely1',_$iterator_739);
_$setReadOnly_1366(ns,'iterBeta',_$iterator_741);
_$setReadOnly_1366(ns,'iterBetaln',_$iterator_743);
_$setReadOnly_1366(ns,'iterBinet',_$iterator_745);
_$setReadOnly_1366(ns,'iterCbrt',_$iterator_747);
_$setReadOnly_1366(ns,'iterCeil',_$iterator_749);
_$setReadOnly_1366(ns,'iterCeil10',_$iterator_751);
_$setReadOnly_1366(ns,'iterCos',_$iterator_753);
_$setReadOnly_1366(ns,'iterCospi',_$iterator_755);
_$setReadOnly_1366(ns,'iterDiracDelta',_$iterator_757);
_$setReadOnly_1366(ns,'iterEta',_$iterator_759);
_$setReadOnly_1366(ns,'iterDivide',_$iterDivide_761);
_$setReadOnly_1366(ns,'iterErf',_$iterator_763);
_$setReadOnly_1366(ns,'iterErfc',_$iterator_765);
_$setReadOnly_1366(ns,'iterErfcinv',_$iterator_767);
_$setReadOnly_1366(ns,'iterErfinv',_$iterator_769);
_$setReadOnly_1366(ns,'iterExp',_$iterator_771);
_$setReadOnly_1366(ns,'iterFactorial',_$iterator_773);
_$setReadOnly_1366(ns,'iterFactorialln',_$iterator_775);
_$setReadOnly_1366(ns,'iterFloor',_$iterator_777);
_$setReadOnly_1366(ns,'iterFloor10',_$iterator_779);
_$setReadOnly_1366(ns,'iterGamma',_$iterator_781);
_$setReadOnly_1366(ns,'iterGammaln',_$iterator_783);
_$setReadOnly_1366(ns,'iterInv',_$iterator_785);
_$setReadOnly_1366(ns,'iterLn',_$iterator_787);
_$setReadOnly_1366(ns,'iterMod',_$iterMod_789);
_$setReadOnly_1366(ns,'iterMultiply',_$iterMultiply_791);
_$setReadOnly_1366(ns,'iterRamp',_$iterator_793);
_$setReadOnly_1366(ns,'iterRound',_$iterator_795);
_$setReadOnly_1366(ns,'iterRsqrt',_$iterator_797);
_$setReadOnly_1366(ns,'iterSignum',_$iterator_799);
_$setReadOnly_1366(ns,'iterSin',_$iterator_801);
_$setReadOnly_1366(ns,'iterSinpi',_$iterator_803);
_$setReadOnly_1366(ns,'iterSqrt',_$iterator_805);
_$setReadOnly_1366(ns,'iterSubtract',_$iterSubtract_807);
_$setReadOnly_1366(ns,'iterTrunc',_$iterator_809);
_$setReadOnly_1366(ns,'map',_$iterator_811);
_$setReadOnly_1366(ns,'map2',_$iterator_814);
_$setReadOnly_1366(ns,'map3',_$iterator_817);
_$setReadOnly_1366(ns,'random',{});
_$setReadOnly_1366(ns['random'],'iterators',{});
_$setReadOnly_1366(ns['random']['iterators'],'arcsine',_$iterator_1051);
_$setReadOnly_1366(ns['random']['iterators'],'bernoulli',_$iterator_1053);
_$setReadOnly_1366(ns['random']['iterators'],'beta',_$iterator_1055);
_$setReadOnly_1366(ns['random']['iterators'],'betaprime',_$iterator_1057);
_$setReadOnly_1366(ns['random']['iterators'],'binomial',_$iterator_1059);
_$setReadOnly_1366(ns['random']['iterators'],'boxMuller',_$iterator_1061);
_$setReadOnly_1366(ns['random']['iterators'],'cauchy',_$iterator_1063);
_$setReadOnly_1366(ns['random']['iterators'],'chi',_$iterator_1065);
_$setReadOnly_1366(ns['random']['iterators'],'chisquare',_$iterator_1067);
_$setReadOnly_1366(ns['random']['iterators'],'cosine',_$iterator_1069);
_$setReadOnly_1366(ns['random']['iterators'],'discreteUniform',_$iterator_1071);
_$setReadOnly_1366(ns['random']['iterators'],'erlang',_$iterator_1073);
_$setReadOnly_1366(ns['random']['iterators'],'exponential',_$iterator_1075);
_$setReadOnly_1366(ns['random']['iterators'],'f',_$iterator_1077);
_$setReadOnly_1366(ns['random']['iterators'],'frechet',_$iterator_1079);
_$setReadOnly_1366(ns['random']['iterators'],'gamma',_$iterator_1081);
_$setReadOnly_1366(ns['random']['iterators'],'geometric',_$iterator_1083);
_$setReadOnly_1366(ns['random']['iterators'],'gumbel',_$iterator_1085);
_$setReadOnly_1366(ns['random']['iterators'],'hypergeometric',_$iterator_1087);
_$setReadOnly_1366(ns['random']['iterators'],'improvedZiggurat',_$iterator_1089);
_$setReadOnly_1366(ns['random']['iterators'],'invgamma',_$iterator_1091);
_$setReadOnly_1366(ns['random']['iterators'],'kumaraswamy',_$iterator_1093);
_$setReadOnly_1366(ns['random']['iterators'],'laplace',_$iterator_1095);
_$setReadOnly_1366(ns['random']['iterators'],'levy',_$iterator_1097);
_$setReadOnly_1366(ns['random']['iterators'],'logistic',_$iterator_1099);
_$setReadOnly_1366(ns['random']['iterators'],'lognormal',_$iterator_1101);
_$setReadOnly_1366(ns['random']['iterators'],'minstd',_$iterator_1105);
_$setReadOnly_1366(ns['random']['iterators'],'minstdShuffle',_$iterator_1103);
_$setReadOnly_1366(ns['random']['iterators'],'mt19937',_$iterator_1107);
_$setReadOnly_1366(ns['random']['iterators'],'negativeBinomial',_$iterator_1109);
_$setReadOnly_1366(ns['random']['iterators'],'normal',_$iterator_1111);
_$setReadOnly_1366(ns['random']['iterators'],'pareto1',_$iterator_1113);
_$setReadOnly_1366(ns['random']['iterators'],'poisson',_$iterator_1115);
_$setReadOnly_1366(ns['random']['iterators'],'randi',_$iterator_1117);
_$setReadOnly_1366(ns['random']['iterators'],'randn',_$iterator_1119);
_$setReadOnly_1366(ns['random']['iterators'],'randu',_$iterator_1121);
_$setReadOnly_1366(ns['random']['iterators'],'rayleigh',_$iterator_1123);
_$setReadOnly_1366(ns['random']['iterators'],'t',_$iterator_1125);
_$setReadOnly_1366(ns['random']['iterators'],'triangular',_$iterator_1127);
_$setReadOnly_1366(ns['random']['iterators'],'uniform',_$iterator_1129);
_$setReadOnly_1366(ns['random']['iterators'],'weibull',_$iterator_1131);
_$setReadOnly_1366(ns,'iterawgn',_$iterator_1136);
_$setReadOnly_1366(ns,'iterawln',_$iterator_1139);
_$setReadOnly_1366(ns,'iterawun',_$iterator_1142);
_$setReadOnly_1366(ns,'iterBartlettHannPulse',_$iterator_1144);
_$setReadOnly_1366(ns,'iterBartlettPulse',_$iterator_1147);
_$setReadOnly_1366(ns,'iterCosineWave',_$iterator_1150);
_$setReadOnly_1366(ns,'iterDiracComb',_$iterator_1153);
_$setReadOnly_1366(ns,'iterFlatTopPulse',_$iterator_1156);
_$setReadOnly_1366(ns,'iterHannPulse',_$iterator_1159);
_$setReadOnly_1366(ns,'iterLanczosPulse',_$iterator_1162);
_$setReadOnly_1366(ns,'iterPeriodicSinc',_$iterator_1165);
_$setReadOnly_1366(ns,'iterPulse',_$iterator_1168);
_$setReadOnly_1366(ns,'iterSawtoothWave',_$iterator_1171);
_$setReadOnly_1366(ns,'iterSineWave',_$iterator_1174);
_$setReadOnly_1366(ns,'iterSquareWave',_$iterator_1177);
_$setReadOnly_1366(ns,'iterTriangleWave',_$iterator_1180);
_$setReadOnly_1366(ns,'itercugmean',_$iterator_1259);
_$setReadOnly_1366(ns,'itercuhmean',_$iterator_1261);
_$setReadOnly_1366(ns,'itercumax',_$iterator_1263);
_$setReadOnly_1366(ns,'itercumaxabs',_$iterator_1265);
_$setReadOnly_1366(ns,'itercumean',_$iterator_1267);
_$setReadOnly_1366(ns,'itercumeanabs',_$iterator_1269);
_$setReadOnly_1366(ns,'itercumeanabs2',_$iterator_1271);
_$setReadOnly_1366(ns,'itercumidrange',_$iterator_1273);
_$setReadOnly_1366(ns,'itercumin',_$iterator_1275);
_$setReadOnly_1366(ns,'itercuminabs',_$iterator_1277);
_$setReadOnly_1366(ns,'itercuprod',_$iterator_1279);
_$setReadOnly_1366(ns,'itercurange',_$iterator_1281);
_$setReadOnly_1366(ns,'itercusum',_$iterator_1283);
_$setReadOnly_1366(ns,'itercusumabs',_$iterator_1285);
_$setReadOnly_1366(ns,'itercusumabs2',_$iterator_1287);
_$setReadOnly_1366(ns,'itermax',_$main_1289);
_$setReadOnly_1366(ns,'itermaxabs',_$main_1291);
_$setReadOnly_1366(ns,'itermean',_$main_1293);
_$setReadOnly_1366(ns,'itermeanabs',_$main_1295);
_$setReadOnly_1366(ns,'itermeanabs2',_$main_1297);
_$setReadOnly_1366(ns,'itermidrange',_$main_1299);
_$setReadOnly_1366(ns,'itermin',_$main_1301);
_$setReadOnly_1366(ns,'iterminabs',_$main_1303);
_$setReadOnly_1366(ns,'itermmax',_$iterator_1305);
_$setReadOnly_1366(ns,'itermmaxabs',_$iterator_1307);
_$setReadOnly_1366(ns,'itermmean',_$iterator_1309);
_$setReadOnly_1366(ns,'itermmeanabs',_$iterator_1311);
_$setReadOnly_1366(ns,'itermmeanabs2',_$iterator_1313);
_$setReadOnly_1366(ns,'itermmidrange',_$iterator_1315);
_$setReadOnly_1366(ns,'itermmin',_$iterator_1317);
_$setReadOnly_1366(ns,'itermminabs',_$iterator_1319);
_$setReadOnly_1366(ns,'itermprod',_$iterator_1321);
_$setReadOnly_1366(ns,'itermrange',_$iterator_1323);
_$setReadOnly_1366(ns,'itermsum',_$iterator_1325);
_$setReadOnly_1366(ns,'itermsumabs',_$iterator_1327);
_$setReadOnly_1366(ns,'itermsumabs2',_$iterator_1329);
_$setReadOnly_1366(ns,'iterprod',_$main_1331);
_$setReadOnly_1366(ns,'iterrange',_$main_1333);
_$setReadOnly_1366(ns,'iterstdev',_$main_1335);
_$setReadOnly_1366(ns,'itersum',_$main_1337);
_$setReadOnly_1366(ns,'itersumabs',_$main_1339);
_$setReadOnly_1366(ns,'itersumabs2',_$main_1341);
_$setReadOnly_1366(ns,'itervariance',_$main_1343);

var _$ns_1430 = ns;

return _$ns_1430;

});

