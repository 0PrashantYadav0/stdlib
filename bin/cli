#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var spawn = require( 'child_process' ).spawn;
var readFileSync = require( './../lib/node_modules/@stdlib/fs/read-file' ).sync;
var cwd = require( './../lib/node_modules/@stdlib/process/cwd' );
var ENV = require( './../lib/node_modules/@stdlib/process/env' );
var CLI = require( './../lib/node_modules/@stdlib/tools/cli' );
var COMMANDS = require( './commands.json' );


// FUNCTIONS //

/**
* Callback invoked upon encountering an error while running a command.
*
* @private
* @param {Error} error - error object
*/
function onError( error ) {
	process.exitCode = 1;
	console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
}

/**
* Returns command information.
*
* @private
* @param {string} cmd - command
* @returns {(Object|null)} command info
*/
function findCommand( cmd ) {
	var i;
	for ( i = 0; i < COMMANDS.length; i++ ) {
		if ( cmd === COMMANDS[ i ].cmd ) {
			return COMMANDS[ i ];
		}
	}
	return null;
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var subargs;
	var args;
	var opts;
	var proc;
	var cli;
	var cmd;
	var i;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './opts.json' ),
		'help': readFileSync( resolve( __dirname, 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Extract the command:
	if ( args[ 0 ] === 'help' ) {
		if ( args[ 1 ] === void 0 ) {
			return cli.help();
		}
		cmd = findCommand( args[ 1 ] );;
		if ( cmd === null ) {
			return onError( new Error( 'invalid argument. Unrecognized/unsupported command. Value: `' + args[ 1 ] + '`.' ) );
		}
		cmd = resolve( __dirname, '..', cmd.path );
		subargs = [ cmd, '--help' ];
	} else {
		cmd = findCommand( args[ 0 ] );;
		if ( cmd === null ) {
			return onError( new Error( 'invalid argument. Unrecognized/unsupported command. Value: `' + args[ 0 ] + '`.' ) );
		}
		cmd = resolve( __dirname, '..', cmd.path );
		subargs = [ cmd ];
		for ( i = 1; i < args.length; i++ ) {
			subargs.push( args[ i ] );
		}
	}

	// Define sub-process options:
	opts = {
		'cwd': cwd(),
		'env': ENV,
		'stdio': 'inherit'
	};

	// Invoke the command in a sub-process:
	proc = spawn( 'node', subargs, opts );
	proc.on( 'error', onError );
}

main();
