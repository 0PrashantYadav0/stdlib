'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var Float32Array = require( '@stdlib/array/float32' );


// MAIN //

/**
* 64-bit complex number constructor.
*
* @constructor
* @param {number} real - real component
* @param {number} imag - imaginary component
* @throws {TypeError} must invoke using the `new` keyword
* @throws {TypeError} real component must be a number primitive
* @throws {TypeError} imaginary component must be a number primitive
* @returns {Complex64} 64-bit complex number
*
* @example
* var z = new Complex64( 5.0, 3.0 );
* // returns <Complex64>
*/
function Complex64( real, imag ) {
	var view;
	if ( !( this instanceof Complex64 ) ) {
		throw new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );
	}
	if ( !isNumber( real ) ) {
		throw new TypeError( 'invalid input argument. Real component must be a number primitive. Value: `'+real+'`.' );
	}
	if ( !isNumber( imag ) ) {
		throw new TypeError( 'invalid input argument. Imaginary component must be a number primitive. Value: `'+imag+'`.' );
	}
	Object.defineProperty( this, 're', {
		'configurable': false,
		'enumerable': true,
		'get': getReal
	});

	Object.defineProperty( this, 'im', {
		'configurable': false,
		'enumerable': true,
		'get': getImag
	});
	view = new Float32Array( 2 );
	view[ 0 ] = real;
	view[ 1 ] = imag;

	return this;

	/**
	* Returns a real component.
	*
	* @private
	* @returns {number} real component
	*/
	function getReal() {
		return view[ 0 ];
	}

	/**
	* Returns an imaginary component.
	*
	* @private
	* @returns {number} imaginary component
	*/
	function getImag() {
		return view[ 1 ];
	}
}

/**
* Size (in bytes) of each component.
*
* @memberof Complex64
* @name BYTES_PER_ELEMENT
* @type {number}
* @returns {number} size of each component
*
* @example
* var nbytes = Complex64.BYTES_PER_ELEMENT;
* // returns 4
*/
setReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );

/**
* Size (in bytes) of each component.
*
* @memberof Complex64.prototype
* @name BYTES_PER_ELEMENT
* @type {number}
* @returns {number} size of each component
*
* @example
* var z = new Complex64( 5.0, 3.0 );
*
* var nbytes = z.BYTES_PER_ELEMENT;
* // returns 4
*/
setReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );

/**
* Length (in bytes) of a complex number.
*
* @memberof Complex64.prototype
* @name byteLength
* @type {number}
* @returns {number} byte length
*
* @example
* var z = new Complex64( 5.0, 3.0 );
*
* var nbytes = z.byteLength;
* // returns 8
*/
setReadOnly( Complex64.prototype, 'byteLength', 8 );

/**
* Serializes a complex number as a string.
*
* @memberof Complex64.prototype
* @name toString
* @type {Function}
* @returns {string} serialized complex number
*
* @example
* var z = new Complex64( 5.0, 3.0 );
*
* var str = z.toString();
* // returns '5 + 3i'
*/
setReadOnly( Complex64.prototype, 'toString', require( './tostring.js' ) );

/**
* Serializes a complex number as a JSON object.
*
* ## Notes
*
* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.
*
*
* @memberof Complex64.prototype
* @name toJSON
* @type {Function}
* @returns {Object} serialized complex number
*
* @example
* var z = new Complex64( 5.0, 3.0 );
*
* var obj = z.toJSON();
* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }
*/
setReadOnly( Complex64.prototype, 'toJSON', require( './tojson.js' ) );


// EXPORTS //

module.exports = Complex64;
