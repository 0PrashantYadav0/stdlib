'use strict';

// MODULES //

var tape = require( 'tape' );
var Complex128 = require( '@stdlib/complex/float64' );
var Complex64 = require( '@stdlib/complex/float32' );
var Float64Array = require( '@stdlib/array/float64' );
var Float32Array = require( '@stdlib/array/float32' );
var reim = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof reim, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns the real and imaginary components of a complex number', function test( t ) {
	var expected;
	var out;
	var z;

	z = new Complex128( 3.14, -3.14 );
	out = reim( z );
	expected = new Float64Array( [ 3.14, -3.14 ] );
	t.strictEqual( out[ 0 ], expected[ 0 ], 'returns expected value' );
	t.strictEqual( out[ 1 ], expected[ 1 ], 'returns expected value' );

	z = new Complex64( 3.14, -3.14 );
	out = reim( z );
	expected = new Float32Array( [ 3.14, -3.14 ] );
	t.strictEqual( out[ 0 ], expected[ 0 ], 'returns expected value' );
	t.strictEqual( out[ 1 ], expected[ 1 ], 'returns expected value' );

	t.end();
});
