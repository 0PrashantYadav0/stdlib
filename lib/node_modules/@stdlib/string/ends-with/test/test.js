'use strict';

// MODULES //

var tape = require( 'tape' );
var endsWith = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof endsWith, 'function', 'main export is a function' );
	t.end();
});


tape( 'the function throws an error if the first argument is not a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			endsWith( value, 'abc' );
		};
	}
});

tape( 'the function throws an error if the second argument is not a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			endsWith( 'abc', value );
		};
	}
});

tape( 'the function throws an error if the `position` argument is not an integer', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5.5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			endsWith( 'abc', 'a', value );
		};
	}
});

tape( 'the function returns `true` if the input string ends with the search value', function test( t ) {
	var out;

	out = endsWith( 'Too late, I\'m afraid', 'afraid' );
	t.equal( out, true, 'returns true' );

	out = endsWith( 'Not too late, I\'m afraid...', 'afraid...' );
	t.equal( out, true, 'returns true' );

	out = endsWith( 'Welcome home!', 'home!' );
	t.equal( out, true, 'returns true' );

	t.end();
});

tape( 'the function returns `false` if the input string does not end with the search value', function test( t ) {
	var out;

	out = endsWith( 'Too late, I\'m afraid', 'Afraid' );
	t.equal( out, false, 'returns false' );

	out = endsWith( 'Not too late, I\'m afraid...', 'afraid' );
	t.equal( out, false, 'returns false' );

	out = endsWith( 'Welcome home!', 'welcome home!' );
	t.equal( out, false, 'returns false' );

	t.end();
});

tape( 'the function starts the search at the provided position (from the right)', function test( t ) {
	var out;

	out = endsWith( 'Too late, I\'m afraid', 'late', 7 );
	t.equal( out, false, 'returns false' );

	out = endsWith( 'Too late, I\'m afraid', 'late', 8 );
	t.equal( out, true, 'returns true' );

	out = endsWith( 'Too late, I\'m afraid', 'late', 9 );
	t.equal( out, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a negative position', function test( t ) {
	var out = endsWith( 'abc', 'c', -1 );
	t.equal( out, false, 'returns false' );
	t.end();
});
