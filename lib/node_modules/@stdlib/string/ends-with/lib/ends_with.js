'use strict';

// MODULES //

var isInteger = require( '@stdlib/utils/is-integer' ).isPrimitive;
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;


// FUNCTIONS //

var max = Math.max;


// ENDS WITH //

/**
* Test if a string ends with the characters of another string.
*
* @param {string} str - input string
* @param {string} search - search string
* @param {Integer} [position=str.length] - position at which to start searching for `search`
* @throws {TypeError} str must be a string primitive
* @throws {TypeError} search must be a string primitive
* @throws {TypeError} position must be an integer
* @returns {boolean} true if `str` begins with the characters of `search`
*
* @example
* var out = endsWith( 'Remember the story I used to tell you when you were a boy?', 'boy?' );
* // returns true
* @example
* var out = endsWith( 'Remember the story I used to tell you when you were a boy?', 'Boy?' );
* // returns false
* @example
* var out = endsWith( 'To be, or not to be, that is the question.', 'to be' );
* // returns false
* @example
* var out = endsWith( 'To be, or not to be, that is the question.', 'to be', 19 );
* // returns true
*/
function endsWith( str, search, position ) {
	var idx;
	var pos;
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + str + '`.' );
	}
	if ( !isString( search ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a string primitive. Value: `' + search + '`.' );
	}
	pos = str.length;
	if ( arguments.length > 2 ) {
		if ( !isInteger( position ) ) {
			throw new TypeError( 'invalid input argument. Third argument must be an integer. Value: `' + position + '`.' );
		}
		pos = max( position, 0 );
	}
	pos -= search.length;
	if ( pos  < 0 ) {
		return false;
	}
	idx = 0;
	while ( idx < search.length ) {
		if ( str.charCodeAt( pos + idx ) !== search.charCodeAt( idx ) ) {
			return false;
		}
		idx += 1;
	}
	return true;
} // end FUNCTION endsWith()


// EXPORTS //

module.exports = endsWith;
