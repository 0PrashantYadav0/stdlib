'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var repeat = require( './../lib' );


// FUNCTIONS //

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} n - number of repeats
* @returns {Function} benchmark function
*/
function createBenchmark( n ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var out;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			out = repeat( String.fromCharCode( i%126 ) + 'eep', n );
			if ( !isString( out ) ) {
				b.fail( 'should return a string' );
			}
		}
		b.toc();
		if ( isString( out ) ) {
			b.pass( 'benchmark finished' );
		} else {
			b.fail( 'should return a string' );
		}
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var min;
	var max;
	var n;
	var f;
	var i;

	min = 1;  // 10*min
	max = 10; // 10*max

	for ( i = min; i <= max; i++ ) {
		n = 10 * i;
		f = createBenchmark( n );
		bench( pkg+':n='+n, f );
	}
} // end FUNCTION main()

main();
