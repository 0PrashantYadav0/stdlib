'use strict';

// MODULES //

var tape = require( 'tape' );
var escapeRegexp = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof escapeRegexp, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			escapeRegexp( value );
		};
	}
});

tape( 'the function escapes regular expression special characters in a given string', function test( t ) {
	var out;

	out = escapeRegexp( 'Et tu, Brute?' );
	t.equal( out, 'Et tu, Brute\\?', 'escapes question mark' );

	out = escapeRegexp( '2 + 3 * 4 = 12' );
	t.equal( out, '2 \\+ 3 \\* 4 = 12', 'escapes + and *' );

	out = escapeRegexp( 'The US federal budget was $3.8 trillion (in 2015)' );
	t.equal( out, 'The US federal budget was \\$3\\.8 trillion \\(in 2015\\)', 'escapes `$`, `.`, and parantheses' );

	out = escapeRegexp( '[]' );
	t.equal( out, '\\[\\]', 'escapes square brackets' );

	out = escapeRegexp( '{}' );
	t.equal( out, '\\{\\}', 'escapes curly braces' );

	out = escapeRegexp( '|/^' );
	t.equal( out, '\\|\\/\\^', 'escapes `|`, `/`, and `^` characters' );

	t.end();
});
