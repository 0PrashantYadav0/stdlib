'use strict';

// MODULES //

var isStringArray = require( '@stdlib/assert/is-string-array' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var replace = require( '@stdlib/string/replace' );


// MAIN //

/**
* Removes a list of words from a string.
*
* @param {string} str - input string
* @param {StringArray} words - array of words to be removed
* @param {boolean} ignoreCase - boolean indicating whether to perform a case-insensitive operation
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be an array of words
* @throws {TypeError} third argument must be a boolean primitive
* @returns {string} output string
*
* @example
* var str = 'We lost the game, what crap. Damn.';
* var words = [ 'crap', 'damn' ];
* var out = removeWords( str, words );
* // returns 'We lost the game, what . Damn.'
*
* @example
* var str = 'We lost the game, what crap. Damn.';
* var words = [ 'crap', 'damn' ];
* var out = removeWords( str, words, true );
* // returns 'We lost the game, what . .'
*/
function removeWords( str, words, ignoreCase ) {
	var options;
	var wordRE;
	var out;
	var i;
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + str + '`.' );
	}
	if ( !isStringArray( words ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be an array of words. Value: `' + words + '`.' );
	}
	options = 'g';
	if ( arguments.length > 2 ) {
		if ( !isBoolean( ignoreCase ) ) {
			throw new TypeError( 'invalid input argument. Third argument must be a boolean primitive. Value: `' + ignoreCase + '`.' );
		}
		if ( ignoreCase ) {
			options = 'gi';
		}
	}
	out = str;
	for ( i = 0; i < words.length; i++ ) {
		wordRE = new RegExp( '\\b'+words[i]+'\\b', options );
		out = replace( out, wordRE, '' );
	}
	return out;
} // end FUNCTION removeWords()


// EXPORTS //

module.exports = removeWords;
