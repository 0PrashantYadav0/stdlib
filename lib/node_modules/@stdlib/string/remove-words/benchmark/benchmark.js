'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var stopwords = require( '@stdlib/datasets/stopwords-en' );
var uppercase = require( '@stdlib/string/uppercase' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var replace = require( '@stdlib/string/replace' );
var pkg = require( './../package.json' ).name;
var removeWords = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var words;
	var str;
	var out;
	var i;

	words = stopwords();
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = 'The word '+words[ i % words.length ]+' should be removed from this string';
		out = removeWords( str, words );
		if ( !isString( out ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( out ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::case_insensitive', function benchmark( b ) {
	var upper;
	var words;
	var str;
	var out;
	var i;

	words = stopwords();
	upper = new Array( words.length );
	for ( i = 0; i < words.length; i++ ) {
		upper[ i ] = uppercase( words[ i ] );
	}
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = 'The word '+words[ i % words.length ]+' should be removed from this string';
		out = removeWords( str, upper, true );
		if ( !isString( out ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( out ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::regexp', function benchmark( b ) {
	var words;
	var str;
	var out;
	var i;

	words = stopwords();
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = 'The word '+words[ i % words.length ]+' should be removed from this string';
		out = removeWordsRegexp( str, words );
		if ( !isString( out ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( out ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();

	function removeWordsRegexp( str, words ) {
		var reString;
		var wordRE;
		var i;
		reString = '';
		for ( i = 0; i < words.length; i++ ) {
			reString += '\\b'+words[i]+'\\b';
			if ( i < words.length-1 ) {
				reString += '|';
			}
		}
		wordRE = new RegExp( reString, 'g' );
		return replace( str, wordRE, '' );
	}
});
