'use strict';

// MODULES //

var isFunction = require( '@stdlib/utils/is-function' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isRegexp = require( '@stdlib/utils/is-regexp' );


// REPLACE //

/**
* Replace all search occurrences by a specified replacement string.
*
* @param {string} str - input string
* @param {(string|RegExp)} search - search expression
* @param {(string|Function)} newval - replacement value or function
* @throws {TypeError} str must be a string primitive
* @throws {TypeError} search argument must be a string primitive or regular expression
* @throws {TypeError} newval must be a string primitive or function
* @returns {string} new string with all matches replaced
*
* @example
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
* @example
* var str = 'Hello World';
* var out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
* @example
* var capitalize = require( '@stdlib/utils/string/capitalize' );
* var str = 'Oranges and lemons say the bells of St. Clement\'s';
* var out = replace( str, /([^\s]*)/gi, function replacer( match, p1 ) {
* 	return capitalize( p1 );
* });
* // returns 'Oranges And Lemons Say The Bells Of St. Clement\'s'
*/
function replace( str, search, newval ) {
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + str + '`.' );
	}
	if ( isString( search ) ) {
		search = new RegExp( search, 'g' );
	}
	else if ( !isRegexp( search ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a string primitive or regular expression. Value: `' + search + '`.' );
	}
	if ( !isString( newval ) && !isFunction( newval ) ) {
		throw new TypeError( 'invalid input argument. Third argument must be a string primitive or replacement function. Value: `' + str + '`.' );
	}
	return str.replace( search, newval );
} // end FUNCTION replace()


// EXPORTS //

module.exports = replace;
