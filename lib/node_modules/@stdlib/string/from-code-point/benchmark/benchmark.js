'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var floor = require( '@stdlib/math/base/special/floor' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var MAX_CODE_POINT = require( '@stdlib/constants/string/unicode-max' );
var pkg = require( './../package.json' ).name;
var fromCodePoint = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': ( typeof String.fromCodePoint !== 'function' )
};


// MAIN //

bench( pkg, function benchmark( b ) {
	var out;
	var x;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = floor( randu() * MAX_CODE_POINT );
		out = fromCodePoint( x );
		if ( typeof out !== 'string' ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( out ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::built-in', opts, function benchmark( b ) {
	var out;
	var x;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = floor( randu() * MAX_CODE_POINT );
		out = String.fromCodePoint( x );
		if ( typeof out !== 'string' ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( out ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
