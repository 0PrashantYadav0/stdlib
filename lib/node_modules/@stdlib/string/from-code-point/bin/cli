#!/usr/bin/env node
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/utils/read-stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var fromCodePoint = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	/* eslint-disable no-console */
	var args;
	var cli;
	var i;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Check if we are receiving data from `stdin`...
	if ( process.stdin.isTTY ) {
		for ( i = 0; i < args.length; i++ ) {
			args[ i ] = parseInt( args[ i ], 10 );
		}
		return console.log( fromCodePoint( args ) );
	}
	return stdin( onRead );

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var flags;
		var sep;
		if ( error ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message );
		}
		flags = cli.flags();
		if ( flags.split ) {
			sep = reFromString( flags.split );
			if ( sep === null ) {
				// If the previous command "failed", we were not provided a regular expression:
				sep = flags.split;
			}
		} else {
			sep = RE_EOL;
		}
		data = data.toString().split( sep );

		// Remove any trailing separators (e.g., trailing newline)...
		if ( data[ data.length-1 ] === '' ) {
			data.pop();
		}
		// Cast all values to integers...
		for ( i = 0; i < data.length; i++ ) {
			data[ i ] = parseInt( data[ i ], 10 );
		}
		console.log( fromCodePoint( data ) );
	} // end FUNCTION onRead()
} // end FUNCTION main()

main();
