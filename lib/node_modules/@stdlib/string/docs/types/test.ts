/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* tslint:disable:no-unused-expression */

import string = require( './index' );


// TESTS //

// The exported object has the expected function interfaces...
{
	string.constants; // $ExpectType STRING
	string.capitalize; // $ExpectType (str: string) => string
	string.codePointAt; // $ExpectType (str: string, idx: number, backward?: boolean | undefined) => number
	string.endsWith; // $ExpectType (str: string, search: string, len?: number | undefined) => boolean
	string.fromCodePoint; // $ExpectType { (pts: ArrayLike<number>): string; (...pt: number[]): string; }
	string.lpad; // $ExpectType (str: string, len: number, pad?: string | undefined) => string
	string.ltrim; // $ExpectType (str: string) => string
	string.lowercase; // $ExpectType (str: string) => string
	string.nextGraphemeClusterBreak; // $ExpectType (str: string, fromIndex?: number | undefined) => number
	string.numGraphemeClusters; // $ExpectType (str: string) => number
	string.pad; // $ExpectType (str: string, len: number, options?: Options | undefined) => string
	string.percentEncode; // $ExpectType (str: string) => string
	string.removeFirst; // $ExpectType (str: string) => string
	string.removeLast; // $ExpectType (str: string) => string
	string.removePunctuation; // $ExpectType (str: string) => string
	string.removeUTF8BOM; // $ExpectType (str: string) => string
	string.removeWords; // $ExpectType (str: string, words: string[], ignoreCase?: boolean | undefined) => string
	string.repeat; // $ExpectType (str: string, n: number) => string
	string.replace; // $ExpectType (str: string, search: string | RegExp, newval: string | Function) => string
	string.reverseString; // $ExpectType (str: string) => string
	string.rpad; // $ExpectType (str: string, len: number, pad?: string | undefined) => string
	string.rtrim; // $ExpectType (str: string) => string
	string.startcase; // $ExpectType (str: string) => string
	string.startsWith; // $ExpectType (str: string, search: string, position?: number | undefined) => boolean
	string.trim; // $ExpectType (str: string) => string
	string.uncapitalize; // $ExpectType (str: string) => string
	string.uppercase; // $ExpectType (str: string) => string
	string.utf16ToUTF8Array; // $ExpectType (str: string) => number[]
}
