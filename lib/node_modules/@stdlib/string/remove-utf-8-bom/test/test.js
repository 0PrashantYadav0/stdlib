'use strict';

// MODULES //

var tape = require( 'tape' );
var removeBOM = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof removeBOM, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string primitive', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			removeBOM( value );
		};
	}
});

tape( 'the function removes a UTF-8 byte order mark (BOM) from the beginning of a string', function test( t ) {
	var str;

	str = removeBOM( '\ufeffbeep' );
	t.equal( str, 'beep', 'returns beep' );

	str = (new Buffer( '\ufeffboop' )).toString();
	str = removeBOM( str );
	t.equal( str, 'boop', 'returns boop' );

	t.end();
});

tape( 'the function ignores zero-width non-breaking spaces (Unicode) occurring elsewhere in a string', function test( t ) {
	var str;

	str = removeBOM( 'boop\ufeff' );
	t.equal( str, 'boop\ufeff', 'returns boop\ufeff' );

	str = removeBOM( 'be\ufeffbop' );
	t.equal( str, 'be\ufeffbop', 'returns be\ufeffbop' );

	t.end();
});

tape( 'if a string does not begin with a BOM, the function returns the input string unchanged', function test( t ) {
	var str = removeBOM( 'foobar' );
	t.equal( str, 'foobar', 'returns foobar' );
	t.end();
});
