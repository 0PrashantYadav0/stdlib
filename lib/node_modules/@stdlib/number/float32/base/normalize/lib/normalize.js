'use strict';

// MODULES //

var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/math/float32-smallest-normal' );
var PINF = require( '@stdlib/constants/math/float32-pinf' );
var NINF = require( '@stdlib/constants/math/float32-ninf' );
var abs = require( '@stdlib/math/base/special/abs' );
var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );


// VARIABLES //

// (1<<32)
var SCALAR = 8388608;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - single-precision floating-point number
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
*
* var v = normalizef( new Array( 2 ), toFloat32( 1.401e-45 ) );
* // returns [ 1.1754943508222875e-38, -23 ]
*
* @example
* var v = normalizef( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var PINF = require( '@stdlib/constants/math/float32-pinf' );
*
* var v = normalizef( new Array( 2 ), PINF );
* // returns [ PINF, 0 ]
*
* @example
* var NINF = require( '@stdlib/constants/math/float32-ninf' );
*
* var v = normalizef( new Array( 2 ), NINF );
* // returns [ NINF, 0 ]
*
* @example
* var v = normalizef( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function normalizef( out, x ) {
	if (
		x !== x ||
		x === PINF ||
		x === NINF
	) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {
		x = toFloat32( x*SCALAR );
		out[ 0 ] = x;
		out[ 1 ] = -23;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
} // end FUNCTION normalizef()


// EXPORTS //

module.exports = normalizef;
