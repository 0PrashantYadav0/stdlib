'use strict';

/**
* Given a new observation `(x,y)`, updates the weights using the epsilon-insensitive loss.
*
* #### Notes
*
* The penalty of the epsilon-insensitive loss is the absolute value of the dot product of the weights and `x` minus `y` whenever the absolute error exceeds epsilon, and zero otherwise.
*
* @private
* @param {WeightVector} weights - current model coefficients
* @param {NumericArray} x - feature vector
* @param {number} y - response value
* @param {PositiveNumber} eta - current learning rate
* @param {PositiveNumber} epsilon - insensitivity parameter
*/
function epsilonInsensitiveLoss( weights, x, y, eta, epsilon ) {
	var p = weights.innerProduct( x ) - y;
	if ( p > epsilon ) {
		weights.add( x, -eta );
	} else if ( p < -epsilon ) {
		weights.add( x, +eta );
	}
} // end METHOD epsilonInsensitiveLoss()


// EXPORTS //

module.exports = epsilonInsensitiveLoss;
