'use strict';

// MODULES //

var tape = require( 'tape' );
var toBinaryString = require( '@stdlib/types/number/uint32/base/to-binary-string' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( './../lib' );


// TESTS //

tape( 'the main export is a number', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof FLOAT64_HIGH_WORD_EXPONENT_MASK, 'number', 'main export is a number' );
	t.end();
});

tape( 'the exported value can be used to mask off all bits except for the exponent bits', function test( t ) {
	var expected;
	var actual;
	var hi;
	var x;

	x = 33.8;
	hi = getHighWord( x ); // 1074685542 => 0 10000000100 00001110011001100110

	actual = hi & FLOAT64_HIGH_WORD_EXPONENT_MASK; // 1077936128 => 0 10000000100 00000000000000000000
	expected = '01000000010000000000000000000000';

	t.strictEqual( toBinaryString( actual ), expected );

	t.end();
});
