'use strict';

// MODULES //

var getWord = require( '@stdlib/math/base/utils/float32-to-word' );


// VARIABLES //

// Significand mask: 0 00000000 11111111111111111111111
var MASK = 0x007fffff;


// SIGNIFICAND //

/**
* Returns an integer corresponding to the significand of a single-precision floating-point number.
*
* @param {number} x - single-precision floating-point number
* @returns {number} significand
*
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var s = significand( toFloat32( 3.14e34 ) );
* // returns 4293751 => 10000011000010001110111
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var s = significand( toFloat32( 3.14e-34 ) );
* // returns 5288021 => 10100001011000001010101
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var s = significand( toFloat32( -3.14 ) );
* // returns 4781507 => 10010001111010111000011
* @example
* var s = significand( 0.0 );
* // returns 0 => 00000000000000000000000
* @example
* var s = significand( NaN );
* // returns 4194304 => 10000000000000000000000
*/
function significand( x ) {
	// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:
	var w = getWord( x );

	// Apply a mask to isolate only the significand bits:
	return w & MASK;
} // end FUNCTION significand()


// EXPORTS //

module.exports = significand;
