'use strict';

// MODULES //

var getWord = require( '@stdlib/math/base/utils/float32-to-word' );


// VARIABLES //

// Significand mask: 0 00000000 11111111111111111111111
var MASK = 0x007fffff; // TODO: consider making an external constant


// SIGNIFICAND //

/**
* Returns an integer corresponding to the significand of a single-precision floating-point number.
*
* @param {number} x - single-precision floating-point number
* @returns {uinteger32} significand
*
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var s = significandf( toFloat32( 3.14e34 ) ); // => 10000011000010001110111
* // returns 4293751
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var s = significandf( toFloat32( 3.14e-34 ) ); // => 10100001011000001010101
* // returns 5288021
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var s = significandf( toFloat32( -3.14 ) ); // => 10010001111010111000011
* // returns 4781507
* @example
* var s = significandf( 0.0 ); // => 00000000000000000000000
* // returns 0
* @example
* var s = significandf( NaN ); // => 10000000000000000000000
* // returns 4194304
*/
function significandf( x ) {
	// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:
	var w = getWord( x );

	// Apply a mask to isolate only the significand bits:
	return w & MASK;
} // end FUNCTION significandf()


// EXPORTS //

module.exports = significandf;
