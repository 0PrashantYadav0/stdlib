'use strict';

// MODULES //

var tape = require( 'tape' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isfinite = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isfinite, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a finite number', function test( t ) {
	var values;
	var i;

	values = [
		3.14,
		-2.0e64,
		// TODO: add max double value
		// TODO: add min subnormal
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isfinite( values[i] ), true, 'returns true when provided '+values[i] );
	}
	for ( i = -100; i < 101; i++ ) {
		t.equal( isfinite( i ), true, 'returns true when provided '+i );
	}
	t.end();
});

tape( 'the function returns `false` if provided `+infinity`', function test( t ) {
	t.equal( isfinite( PINF ), false, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if provided `-infinity`', function test( t ) {
	t.equal( isfinite( NINF ), false, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if provided `NaN`', function test( t ) {
	t.equal( isfinite( NaN ), false, 'returns true' );
	t.equal( isfinite( 0/0 ), false, 'returns true' );
	t.end();
});
