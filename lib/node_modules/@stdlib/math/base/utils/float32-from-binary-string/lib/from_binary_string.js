'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float32-pinf' );
var NINF = require( '@stdlib/math/constants/float32-ninf' );
var pow = require( '@stdlib/math/base/special/pow' );
var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
var toFrac = require( './tofrac.js' );


// VARIABLES //

var BIAS = 127; // FIXME: use constant


// FROM BITS //

/**
* Creates a single-precision floating-point number from an IEEE 754 literal bit representation.
*
* @param {string} bstr - string which is a literal bit representation
* @returns {number} single-precision floating-point number
*
* @example
* var bstr = '01000000100000000000000000000000';
* var v = fromBinaryString( bstr );
* // returns 4
* @example
* var bstr = '01000000010010010000111111011011';
* var v = fromBinaryString( bstr );
* // returns ~3.14
* @example
* var bstr = '11111111011011000011101000110011';
* var v = fromBinaryString( bstr );
* // returns ~-3.14e+38
* @example
* var bstr = '00000000000000000000000000000000';
* var v =  fromBinaryString( bstr );
* // returns 0
* @example
* var bstr = '10000000000000000000000000000000';
* var v = fromBinaryString( bstr );
* // returns -0
*/
function fromBinaryString( bstr ) {
	var sign;
	var frac;
	var exp;

	// Sign bit:
	sign = ( bstr[0] === '1' ) ? -1 : 1;

	// Exponent bits:
	exp = parseInt( bstr.substring(1,9), 2 ) - BIAS;

	// Fraction bits:
	frac = toFrac( bstr.substring( 9 ) );

	// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...
	if ( exp === -BIAS ) {
		if ( frac === 0 ) {
			return ( sign === 1 ) ? 0 : -0;
		}
		exp = -(BIAS-1); // subnormals are special in that their exponent is constant
	}
	// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...
	else if ( exp === BIAS+1 ) {
		if ( frac === 0 ) {
			return ( sign === 1 ) ? PINF : NINF;
		}
		return NaN;
	}
	// Normal numbers...
	else {
		// Account for hidden/implicit bit (2^0):
		frac += 1;
	}
	return toFloat32( sign*frac*pow(2,exp) );
} // end FUNCTION fromBinaryString()


// EXPORTS //

module.exports = fromBinaryString;
