'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// VARIABLES //

var NBITS = 16;


// MAIN //

/**
* Creates an unsigned 16-bit integer from a literal bit representation.
*
* @param {BinaryString} bstr - string which is a literal bit representation
* @throws {Error} must provide a string with a length equal to `16`
* @returns {uinteger} unsigned 16-bit integer
*
* @example
* var bstr = '0101010101010101';
* var val = fromBinaryStringUint16( bstr );
* // returns 21845
*
* @example
* var bstr = '0000000000000000';
* var val = fromBinaryStringUint16( bstr );
* // returns 0
*
* @example
* var bstr = '0000000000000010';
* var val = fromBinaryStringUint16( bstr );
* // returns 2
*
* @example
* var bstr = '1111111111111111';
* var val = fromBinaryStringUint16( bstr );
* // returns 65535
*/
function fromBinaryStringUint16( bstr ) {
	var sum;
	var i;
	if ( bstr.length !== NBITS ) {
		throw new Error( 'invalid input argument. Input string must have a length equal to '+NBITS+'. Value: `'+bstr+'`.' );
	}
	sum = 0;
	for ( i = 0; i < bstr.length; i++ ) {
		if ( bstr[ i ] === '1' ) {
			sum += pow( 2.0, (NBITS-i-1) );
		}
	}
	return sum;
} // end FUNCTION fromBinaryStringUint16()


// EXPORTS //

module.exports = fromBinaryStringUint16;
