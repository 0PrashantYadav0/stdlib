'use strict';

// MODULES //

var tape = require( 'tape' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isInfinite = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isInfinite, 'function', 'main export is a function' );
	t.end();
});

tape( 'function returns `true` if provided `+infinity`', function test( t ) {
	t.equal( isInfinite( PINF ), true, 'returns true' );
	t.end();
});

tape( 'function returns `true` if provided `-infinity`', function test( t ) {
	t.equal( isInfinite( NINF ), true, 'returns true' );
	t.end();
});

tape( 'function returns `false` if not provided an infinite number', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isInfinite( values[i] ), false, 'returns false' );
	}
	t.end();
});
