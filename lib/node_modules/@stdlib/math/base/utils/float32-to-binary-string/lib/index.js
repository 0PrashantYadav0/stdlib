'use strict';

/**
* Return a string giving the literal bit representation of a single-precision floating-point number.
*
* @module @stdlib/math/base/utils/float32-to-binary-string
*
* @example
* var toBinaryStringf = require( '@stdlib/math/base/utils/float32-to-binary-string' );
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
*
* var str = toBinaryStringf( toFloat32( 4.0 ) );
* // returns '01000000100000000000000000000000'
*
* str = toBinaryStringf( toFloat32( Math.PI ) );
* // returns '01000000010010010000111111011011'
*
* str = toBinaryStringf( toFloat32( -1.0e38 ) );
* // returns '11111110100101100111011010011001'
*
* str = toBinaryStringf( toFloat32( -3.14e-39 ) );
* // returns '10000000001000100011000100001011'
*
* str = toBinaryStringf( toFloat32( 1.4e-45 ) );
* // returns '00000000000000000000000000000001'
*
* str = toBinaryStringf( 0.0 );
* // returns '00000000000000000000000000000000'
*
* str = toBinaryStringf( -0.0 );
* // returns '10000000000000000000000000000000'
*
* str = toBinaryStringf( NaN );
* // returns '01111111110000000000000000000000'
*
* var PINF = require( '@stdlib/math/constants/float32-pinf' );
* str = toBinaryStringf( PINF );
* // returns '01111111100000000000000000000000'
*
* var NINF = require( '@stdlib/math/constants/float32-ninf' );
* str = toBinaryStringf( NINF );
* // returns '11111111100000000000000000000000'
*/

// MODULES //

var totoBinaryStringf = require( './to_binary_string.js' );


// EXPORTS //

module.exports = totoBinaryStringf;
