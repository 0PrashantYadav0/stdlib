'use strict';

// MODULES //

var getWord = require( '@stdlib/math/base/utils/float32-to-word' );


// VARIABLES //

// Exponent mask: 0 11111111 00000000000000000000000
var EXP_MASK = 0x7f800000;
var BIAS = 127|0; // use asm.js annotation to denote an integer


// EXPONENT //

/**
* Returns an integer corresponding to the unbiased exponent of a single-precision floating-point number.
*
* @param {number} x - single-precision floating-point number
* @returns {number} unbiased exponent
*
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var exp = exponent( toFloat32( 3.14e34 ) );
* // returns 114 => 2**114 ~ 2.08e34
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var exp = exponent( toFloat32( 3.14e-34 ) );
* // returns -112 => 2**-112 ~ 1.93e-34
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var exp = exponent( toFloat32( -3.14 ) );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 128
*/
function exponent( x ) {
	// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:
	var w = getWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	w = ( w & EXP_MASK ) >>> 23;

	// Remove the bias and return:
	return w - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;
