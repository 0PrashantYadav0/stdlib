'use strict';

// MODULES //

var tape = require( 'tape' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var cround = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof cround, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function rounds real and imaginary components to the nearest integer.', function test( t ) {
	var expected;
	var actual;

	actual = cround( -4.2, 5.5 );
	expected = [ -4.0, 6.0 ];
	t.deepEqual( actual, expected, 'returns expected value' );

	actual = cround( 9.99999, 0.1 );
	expected = [ 10.0, 0.0 ];
	t.deepEqual( actual, expected, 'returns expected value' );

	actual = cround( 0.0, 0.0 );
	expected = [ 0.0, 0.0 ];
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function returns a `NaN` if provided a `NaN`', function test( t ) {
	var val = cround( NaN, NaN );
	t.strictEqual( isnan( val[ 0 ] ), true, 'returns expected value' );
	t.strictEqual( isnan( val[ 1 ] ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `-0` if provided `-0`', function test( t ) {
	var val = cround( -0.0, -0.0 );
	t.strictEqual( isNegativeZero( val[ 0 ] ), true, 'returns expected value' );
	t.strictEqual( isNegativeZero( val[ 1 ] ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `+0` if provided `+0`', function test( t ) {
	var val = cround( +0.0, +0.0 );
	t.strictEqual( isPositiveZero( val[ 0 ] ), true, 'returns expected value' );
	t.strictEqual( isPositiveZero( val[ 1 ] ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	var val = cround( PINF, PINF );
	t.strictEqual( val[ 0 ], PINF, 'returns expected value' );
	t.strictEqual( val[ 1 ], PINF, 'returns expected value' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-infinity`', function test( t ) {
	var val = cround( NINF, NINF );
	t.strictEqual( val[ 0 ], NINF, 'returns expected value' );
	t.strictEqual( val[ 1 ], NINF, 'returns expected value' );
	t.end();
});
