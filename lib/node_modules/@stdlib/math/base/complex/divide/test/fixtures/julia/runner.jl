#!/usr/bin/env julia

import JSON

"""
    gen( x, name )

Generate fixture data and write to file.

# Arguments

* `x`: domain
* `name::AbstractString`: output filename

# Examples

``` julia
julia> x = linspace( -1000, 1000, 2001 );
julia> gen( x, \"data.json\" );
```
"""
function gen( x, name )
	re1 = [2.0 ^ i for i in x ];
	im1 = [2.0 ^ i for i in x ];
	re2 = [2.0 ^ i for i in x ];
	im2 = [2.0 ^ i for i in x ];

	inre1 = [ a for a in re1, b in im1, c in re2, d in im2 ];
	inim1 = [ b for a in re1, b in im1, c in re2, d in im2 ];
	inre2 = [ c for a in re1, b in im1, c in re2, d in im2 ];
	inim2 = [ d for a in re1, b in im1, c in re2, d in im2 ];

	# Unroll the arrays:
	re1 = reshape( inre1, prod( size( inre1 ) ) );
	im1 = reshape( inim1, prod( size( inim1 ) ) );
	re2 = reshape( inre2, prod( size( inre2 ) ) );
	im2 = reshape( inim2, prod( size( inim2 ) ) );

	n = size(re1)[1];
	qre = ones(n);
	qim = ones(n);
	for i = 1:n
		q = Complex128( re1[i], im1[i] ) / Complex128( re2[i], im2[i] );
		qre[i] = real(q);
		qim[i] = imag(q);
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("re1", re1),
		("im1", im1),
		("re2", re2),
		("im2", im2),
		("qre", qre),
		("qim", qim),
		("qreFinite", [ isfinite(x) for x in qre ]),
		("qimFinite", [ isfinite(x) for x in qim ]),
		("qreNaN", [ isnan(x) for x in qre ]),
		("qimNaN", [ isnan(x) for x in qim ])
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Generate fixture data:
x = linspace( -1023, 1023, 9 );
gen( x, "quotients.json" );
