/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/* tslint:disable:max-line-length */
/* tslint:disable:max-file-line-count */

import cabs = require( '@stdlib/math/base/complex/abs' );
import cabs2 = require( '@stdlib/math/base/complex/abs2' );
import cadd = require( '@stdlib/math/base/complex/add' );
import cceil = require( '@stdlib/math/base/complex/ceil' );
import cceiln = require( '@stdlib/math/base/complex/ceiln' );
import ccis = require( '@stdlib/math/base/complex/cis' );
import cdiv = require( '@stdlib/math/base/complex/divide' );
import cexp = require( '@stdlib/math/base/complex/exp' );
import cflipsign = require( '@stdlib/math/base/complex/flipsign' );
import cfloor = require( '@stdlib/math/base/complex/floor' );
import cfloorn = require( '@stdlib/math/base/complex/floorn' );
import cinv = require( '@stdlib/math/base/complex/inv' );
import cmul = require( '@stdlib/math/base/complex/multiply' );
import cneg = require( '@stdlib/math/base/complex/negate' );
import cphase = require( '@stdlib/math/base/complex/phase' );
import cpolar = require( '@stdlib/math/base/complex/polar' );
import cround = require( '@stdlib/math/base/complex/round' );
import croundn = require( '@stdlib/math/base/complex/roundn' );
import csignum = require( '@stdlib/math/base/complex/signum' );
import csub = require( '@stdlib/math/base/complex/subtract' );

/**
* Interface describing the `complex` namespace.
*/
interface Namespace {
	/**
	* Computes the absolute value of a complex number.
	*
	* ## Notes
	*
	* -   The absolute value of a complex number is its distance from zero.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns absolute value
	*
	* @example
	* var v = ns.cabs( 5.0, 3.0 );
	* // returns ~5.83
	*/
	cabs: typeof cabs;

	/**
	* Computes the squared absolute value of a complex number.
	*
	* ## Notes
	*
	* -   The absolute value of a complex number is its distance from zero.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns squared absolute value
	*
	* @example
	* var v = ns.cabs2( 5.0, 3.0 );
	* // returns 34.0
	*/
	cabs2: typeof cabs2;

	/**
	* Adds two complex numbers.
	*
	* @param re1 - real component
	* @param im1 - imaginary component
	* @param re2 - real component
	* @param im2 - imaginary component
	* @returns real and imaginary components
	*
	* @example
	var v = ns.cadd( 5.0, 3.0, -2.0, 1.0 );
	// returns [ 3.0, 4.0 ]
	*/
	cadd: typeof cadd;

	/**
	* Rounds a complex number toward positive infinity.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var out = ns.cceil( 5.5, 3.3 );
	* // returns [ 6.0, 4.0 ]
	*/
	cceil: typeof cceil;

	/**
	* Rounds a complex number to the nearest multiple of `10^n` toward positive infinity.
	*
	* @param re - real component
	* @param im - imaginary component
	* @param n - integer power of 10
	* @returns real and imaginary components
	*
	* @example
	* var out = ns.cceiln( 5.555, -3.333, -2 );
	* // returns [ 5.56, -3.33 ]
	*/
	cceiln: typeof cceiln;

	/**
	* Computes the cis function of a complex number.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var v = ns.ccis( 0.0, 0.0 );
	* // returns [ 1.0, 0.0 ]
	*
	* @example
	* var v = ns.ccis( 1.0, 0.0 );
	* // returns [ ~0.540, ~0.841 ]
	*/
	ccis: typeof ccis;

	/**
	* Divides two complex numbers.
	*
	* @param re1 - real component
	* @param im1 - imaginary component
	* @param re2 - real component
	* @param im2 - imaginary component
	* @returns real and imaginary components
	*
	* @example
	var v = ns.cdiv( -13.0, -1.0, -2.0, 1.0 );
	// returns [ 5.0, 3.0 ]
	*/
	cdiv: typeof cdiv;

	/**
	* Computes the exponential function of a complex number.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var v = ns.cexp( 0.0, 0.0 );
	* // returns [ 1.0, 0.0 ]
	*
	* @example
	* var v = ns.cexp( 1.0, 0.0 );
	* // returns [ ~2.718, 0.0 ]
	*/
	cexp: typeof cexp;

	/**
	* Returns a complex number with the same magnitude as `z` and the sign of `y*z`.
	*
	* @param re - real component
	* @param im - imaginary component
	* @param y - number from which to derive the sign
	* @returns function result
	*
	* @example
	* var v = ns.cflipsign( -4.2, 5.5, 66 );
	* // returns [ -4.2, 5.5 ]
	*
	* @example
	* var v = ns.cflipsign( 0.0, 0.0, -8 );
	* // returns [ -0.0, -0.0 ]
	*
	* @example
	* var v = ns.cflipsign( NaN, NaN, -9 );
	* // returns [ NaN, NaN ]
	*/
	cflipsign: typeof cflipsign;

	/**
	* Rounds a complex number toward negative infinity.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var out = ns.cfloor( 5.5, 3.3 );
	* // returns [ 5.0, 3.0 ]
	*/
	cfloor: typeof cfloor;

	/**
	* Rounds a complex number to the nearest multiple of `10^n` toward negative infinity.
	*
	* @param re - real component
	* @param im - imaginary component
	* @param n - integer power of 10
	* @returns real and imaginary components
	*
	* @example
	* var out = ns.cfloorn( 5.555, -3.333, -2 );
	* // returns [ 5.55, -3.34 ]
	*/
	cfloorn: typeof cfloorn;

	/**
	* Computes the inverse of a complex number.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var v = ns.cinv( 2.0, 4.0 );
	* // returns [ 0.1, -0.2 ]
	*/
	cinv: typeof cinv;

	/**
	* Multiplies two complex numbers.
	*
	* @param re1 - real component
	* @param im1 - imaginary component
	* @param re2 - real component
	* @param im2 - imaginary component
	* @returns real and imaginary components
	*
	* @example
	var v = ns.cmul( 5.0, 3.0, -2.0, 1.0 );
	// returns [ -13.0, -1.0 ]
	*/
	cmul: typeof cmul;

	/**
	* Negates a complex number.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var v = ns.cneg( -4.2, 5.5 );
	* // returns [ 4.2, -5.5 ]
	*
	* @example
	* var v = ns.cneg( 0.0, 0.0 );
	* // returns [ -0.0, -0.0 ]
	*
	* @example
	* var v = ns.cneg( NaN, NaN );
	* // returns [ NaN, NaN ]
	*/
	cneg: typeof cneg;

	/**
	* Computes the argument of a complex number in radians.
	*
	* ## Notes
	*
	* -   The argument of a complex number, also known as the phase, is the angle of the radius extending from the origin to the complex number plotted in the complex plane and the positive real axis.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns argument
	*
	* @example
	* var phi = ns.cphase( 5.0, 3.0 );
	* // returns ~0.5404
	*/
	cphase: typeof cphase;

	/**
	* Computes the absolute value and the phase of a complex number.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns absolute value and phase, respectively
	*
	* @example
	* var v = ns.cpolar( 5.0, 3.0 );
	* // returns [ ~5.83, ~0.5404 ]
	*/
	cpolar: typeof cpolar;

	/**
	* Rounds a complex number to the nearest integer.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var out = ns.cround( 5.5, 3.3 );
	* // returns [ 6.0, 3.0 ]
	*/
	cround: typeof cround;

	/**
	* Rounds a complex number to the nearest multiple of `10^n`.
	*
	* ## Notes
	*
	* - When operating on floating-point numbers in bases other than `2`, rounding to specified digits can be inexact.
	*
	* @param re - real component
	* @param im - imaginary component
	* @param n - integer power of 10
	* @returns real and imaginary components
	*
	* @example
	* var out = ns.croundn( 5.555, -3.333, -2 );
	* // returns [ 5.56, -3.34 ]
	*/
	croundn: typeof croundn;

	/**
	* Evaluates the signum function of a complex number.
	*
	* @param re - real component
	* @param im - imaginary component
	* @returns real and imaginary components
	*
	* @example
	* var v = ns.csignum( -4.2, 5.5 );
	* // returns [ -0.6069136033622302, 0.79476781392673 ]
	*
	* @example
	* var v = ns.csignum( 0.0, 0.0 );
	* // returns [ 0.0, 0.0 ]
	*
	* @example
	* var v = ns.csignum( NaN, NaN );
	* // returns [ NaN, NaN ]
	*/
	csignum: typeof csignum;

	/**
	* Subtracts two complex numbers.
	*
	* @param re1 - real component
	* @param im1 - imaginary component
	* @param re2 - real component
	* @param im2 - imaginary component
	* @returns real and imaginary components
	*
	* @example
	var v = ns.csub( 5.0, 3.0, -2.0, 1.0 );
	// returns [ 7.0, 2.0 ]
	*/
	csub: typeof csub;
}

/**
* Standard library base complex number math functions.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
