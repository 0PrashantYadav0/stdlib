'use strict';

/**
* Blas level 1 routine to copy values from `x` into `y`.
*
* @module @stdlib/math/base/blas/dcopy
*
* @example
* var dcopy = require( '@stdlib/math/base/blas/dcopy' );
*
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ 6, 7, 8, 9, 10 ];
*
* dcopy( x.length, x, 1, y, 1 );
* // y => [ 1, 2, 3, 4, 5 ]
*
* @example
* // Use the `ndarray` interface...
* var dcopy = require( '@stdlib/math/base/blas/dcopy' ).ndarray;
*
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ 6, 7, 8, 9, 10 ];
*
* dcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1, 2, 3, 4, 5 ]
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var dcopy = require( './dcopy.js' );
var ndarray = require( './ndarray.js' );


// METHODS //

setReadOnly( dcopy, 'ndarray', ndarray );


// EXPORTS //

module.exports = dcopy;

/**
* Copies values from `x` into `y`.
*
* @name dcopy
* @function
* @param {number} N - number of values to copy
* @param {NumericArray} x - input array
* @param {number} strideX - `x` stride length
* @param {NumericArray} y - destination array
* @param {number} strideY - `y` stride length
* @returns {NumericArray} `y`
*
* @example
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ 6, 7, 8, 9, 10 ];
*
* dcopy( x.length, x, 1, y, 1 );
* // y => [ 1, 2, 3, 4, 5 ]
*/

/**
* Copies values from `x` into `y`. This method provides alternative indexing semantics amenable to `ndarrays`.
*
* @name ndarray
* @function
* @param {number} N - number of values to copy
* @param {NumericArray} x - input array
* @param {number} strideX - `x` stride length
* @param {number} offsetX - starting `x` index
* @param {NumericArray} y - destination array
* @param {number} strideY - `y` stride length
* @param {number} offsetY - starting `y` index
* @returns {NumericArray} `y`
*
* @example
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ 6, 7, 8, 9, 10 ];
*
* dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1, 2, 3, 4, 5 ]
*/
