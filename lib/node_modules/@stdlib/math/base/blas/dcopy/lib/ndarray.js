'use strict';

/**
* Blas level 1 routine to copy values from `x` into `y` using an `ndarray` interface.
*
* @module @stdlib/math/base/blas/dcopy
* @type {Function}
*
* @example
* var dcopy = require( '@stdlib/math/base/blas/dcopy' ).ndarray;
*
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ 6, 7, 8, 9, 10 ];
*
* dcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1, 2, 3, 4, 5 ]
*/

// VARIABLES //

var M = 8;


// DCOPY //

/**
* Copies values from `x` into `y`.
*
* @param {number} N - number of values to copy
* @param {(Array<number>|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array)} x - input array
* @param {number} strideX - `x` stride length
* @param {number} offsetX - starting `x` index
* @param {(Array<number>|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array)} y - destination array
* @param {number} strideY - `y` stride length
* @param {number} offsetY - starting `y` index
* @returns {(Array<number>|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array)} `y`
*
* @example
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ 6, 7, 8, 9, 10 ];
*
* dcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1, 2, 3, 4, 5 ]
*/
function dcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {
	var ix;
	var iy;
	var m;
	var i;
	if ( N <= 0 ) {
		return y;
	}
	ix = offsetX;
	iy = offsetY;

	// Use unrolled loops if both strides are equal to `1`...
	if ( strideX === 1 && strideY === 1 ) {
		m = N % M;

		// If we have a remainder, run a clean-up loop...
		if ( m > 0 ) {
			for ( i = 0; i < m; i++ ) {
				y[ iy ] = x[ ix ];
				ix += strideX;
				iy += strideY;
			}
		}
		if ( N < M ) {
			return y;
		}
		for ( i = m; i < N; i += M ) {
			y[ iy ] = x[ ix ];
			y[ iy+1 ] = x[ ix+1 ];
			y[ iy+2 ] = x[ ix+2 ];
			y[ iy+3 ] = x[ ix+3 ];
			y[ iy+4 ] = x[ ix+4 ];
			y[ iy+5 ] = x[ ix+5 ];
			y[ iy+6 ] = x[ ix+6 ];
			y[ iy+7 ] = x[ ix+7 ];
			ix += M;
			iy += M;
		}
		return y;
	}
	for ( i = 0; i < N; i++ ) {
		y[ iy ] = x[ ix ];
		ix += strideX;
		iy += strideY;
	}
	return y;
} // end FUNCTION dcopy()


// EXPORTS //

module.exports = dcopy;
