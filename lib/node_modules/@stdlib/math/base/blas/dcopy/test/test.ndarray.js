'use strict';

// MODULES //

var tape = require( 'tape' );
var dcopy = require( './../lib/ndarray.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof dcopy, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 7', function test( t ) {
	t.equal( dcopy.length, 7, 'arity of 7' );
	t.end();
});

tape( 'the function copies elements from `x` into `y`', function test( t ) {
	var x = [ 1, 2, 3, 4, 5 ];
	var y = [ 6, 7, 8, 9, 10 ];

	dcopy( x.length, x, 1, 0, y, 1, 0 );

	t.deepEqual( y, x, 'deep equal' );
	t.notEqual( y, x, 'different references' );

	t.end();
});

tape( 'the function supports an `x` stride', function test( t ) {
	var expected;
	var x;
	var y;
	var N;

	x = [ 1, 2, 3, 4, 5 ];
	y = [ 6, 7, 8, 9, 10 ];
	N = 3;

	dcopy( N, x, 2, 0, y, 1, 0 );

	expected = [ 1, 3, 5, 9, 10 ];

	t.deepEqual( y, expected, 'deep equal' );
	t.end();
});

tape( 'the function supports an `x` offset', function test( t ) {
	var expected;
	var x;
	var y;
	var N;

	x = [ 1, 2, 3, 4, 5 ];
	y = [ 6, 7, 8, 9, 10 ];
	N = 3;

	dcopy( N, x, 1, 2, y, 1, 0 );

	expected = [ 3, 4, 5, 9, 10 ];

	t.deepEqual( y, expected, 'deep equal' );
	t.end();
});

tape( 'the function supports a `y` stride', function test( t ) {
	var expected;
	var x;
	var y;
	var N;

	x = [ 1, 2, 3, 4, 5 ];
	y = [ 6, 7, 8, 9, 10 ];
	N = 3;

	dcopy( N, x, 1, 0, y, 2, 0 );

	expected = [ 1, 7, 2, 9, 3 ];

	t.deepEqual( y, expected, 'deep equal' );
	t.end();
});

tape( 'the function supports a `y` offset', function test( t ) {
	var expected;
	var x;
	var y;
	var N;

	x = [ 1, 2, 3, 4, 5 ];
	y = [ 6, 7, 8, 9, 10 ];
	N = 3;

	dcopy( N, x, 1, 0, y, 1, 2 );

	expected = [ 6, 7, 1, 2, 3 ];

	t.deepEqual( y, expected, 'deep equal' );
	t.end();
});

tape( 'the function returns a reference to the destination array', function test( t ) {
	var x = [ 1, 2, 3, 4, 5 ];
	var y = [ 6, 7, 8, 9, 10 ];

	var out = dcopy( x.length, x, 1, 0, y, 1, 0 );

	t.equal( out, y, 'same reference' );
	t.end();
});

tape( 'if provided an `N` parameter less than or equal to 0, the function returns `y` unchanged', function test( t ) {
	var expected;
	var x;
	var y;

	x = [ 1, 2, 3, 4, 5 ];
	y = [ 6, 7, 8, 9, 10 ];

	expected = [ 6, 7, 8, 9, 10 ];

	dcopy( -1, x, 1, 0, y, 1, 0 );
	t.deepEqual( y, expected, 'returns `y` unchanged' );

	dcopy( 0, x, 1, 0, y, 1, 0 );
	t.deepEqual( y, expected, 'returns `y` unchanged' );

	t.end();
});

tape( 'the function supports negative strides', function test( t ) {
	var expected;
	var x;
	var y;
	var N;

	x = [ 1, 2, 3, 4, 5 ];
	y = [ 6, 7, 8, 9, 10 ];
	N = 3;

	dcopy( N, x, -2, x.length-1, y, -1, y.length-2 );

	expected = [ 6, 1, 3, 5, 10 ];

	t.deepEqual( y, expected, 'deep equal' );
	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var expected;
	var x;
	var y;
	var N;

	x = [ 1, 2, 3, 4, 5, 6 ];
	y = [ 7, 8, 9, 10, 11, 12 ];
	N = 3;

	dcopy( N, x, 2, 1, y, -1, y.length-1 );

	expected = [ 7, 8, 9, 6, 4, 2 ];

	t.deepEqual( y, expected, 'deep equal' );
	t.end();
});

tape( 'if both strides are equal to `1`, the function efficiently copies elements from `x` into `y`', function test( t ) {
	var x;
	var y;
	var i;

	x = new Array( 100 );
	y = new Array( x.length );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = i;
		y[ i ] = x.length - i;
	}

	dcopy( x.length, x, 1, 0, y, 1, 0 );

	t.deepEqual( y, x, 'deep equal' );
	t.notEqual( y, x, 'different references' );

	x = new Array( 120 );
	y = new Array( x.length );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = i*2;
		y[ i ] = x.length - i;
	}

	dcopy( x.length, x, 1, 0, y, 1, 0 );

	t.deepEqual( y, x, 'deep equal' );
	t.notEqual( y, x, 'different references' );

	t.end();
});
