'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var randu = require( '@stdlib/math/base/random/randu' );
var sasum = require( './../lib/main.js' );


// VARIABLES //

var N = 1e5;


// FUNCTIONS //

function warmup() {
	var i;
	var j;

	j = 0;
	for ( i = 0; i < 1e6; i++ ) {
		j += i * 2;
	}
	if ( j > 0 ) {
		return true;
	}
	return false;
}

function test( name, fcn ) {
	var start;
	var time;
	var bool;
	var x;
	var y;
	var i;

	bool = warmup();
	if ( !bool ) {
		throw new Error( 'Something went wrong.' );
	}
	x = new Float32Array( 10000 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = ( randu()*10000.0 ) - 20000.0;
	}
	start = process.hrtime();
	for ( i = 0; i < N; i++ ) {
		y = fcn( x.length, x, 1 );
		if ( isnan( y ) ) {
			throw new Error( 'Something went wrong.' );
		}
	}
	time = process.hrtime( start );
	time = time[ 0 ] + ( time[ 1 ]*1.0e-9 );

	if ( isnan( y ) ) {
		throw new Error( 'Something went wrong.' );
	}
	console.log( 'Test: %s. Elapsed time: %d sec. Iterations: %d. ops/s: %d.', name, time, N, N/time );
}

function benchmark() {
	var nsasum;

	// Try loading the the native addon...
	try {
		nsasum = require( './../lib/native.js' );
		test( 'Native', nsasum );
		test( 'Native', nsasum );
		test( 'Native', nsasum );
	} catch ( error ) {
		console.log( 'Unable to load native implementation. %s', error.message );
	}
	test( 'JavaScript', sasum );
	test( 'JavaScript', sasum );
	test( 'JavaScript', sasum );
}


// MAIN //

benchmark();
