'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var daxpy = require( './../lib/wasm.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof daxpy, 'function', 'main export is a function' );
	t.end();
});

tape( 'if a WebAssembly implementation is available, the main export is the WebAssembly implementation', function test( t ) {
	var daxpy = proxyquire( './../lib/wasm.js', {
		'@stdlib/utils/try-function': tryFunction,
		'@stdlib/utils/detect-wasm-support': hasWasm,
		'./daxpy.wasm.js': mock
	});

	t.strictEqual( daxpy, mock, 'returns WebAssembly implementation' );
	t.end();

	function tryFunction() {
		return function foo() {
			return null;
		};
	}

	function hasWasm() {
		return true;
	}

	function mock() {
		// Mock...
	}
});

tape( 'if a WebAssembly implementation is not available, the main export is an `asm.js` implementation (error loading WebAssembly)', function test( t ) {
	var daxpy;
	var asm;

	asm = require( './../lib/daxpy.asm.js' );

	daxpy = proxyquire( './../lib/wasm.js', {
		'@stdlib/utils/try-function': tryFunction,
		'@stdlib/utils/detect-wasm-support': hasWasm
	});

	t.strictEqual( daxpy, asm, 'returns `asm.js` implementation' );
	t.end();

	function tryFunction() {
		return function foo() {
			return new Error( 'Cannot find module' );
		};
	}

	function hasWasm() {
		return true;
	}
});

tape( 'if a WebAssembly implementation is not available, the main export is an `asm.js` implementation (no WebAssembly support)', function test( t ) {
	var daxpy;
	var asm;

	asm = require( './../lib/daxpy.asm.js' );

	daxpy = proxyquire( './../lib/wasm.js', {
		'@stdlib/utils/detect-wasm-support': hasWasm
	});

	t.strictEqual( daxpy, asm, 'returns `asm.js` implementation' );
	t.end();

	function hasWasm() {
		return false;
	}
});

