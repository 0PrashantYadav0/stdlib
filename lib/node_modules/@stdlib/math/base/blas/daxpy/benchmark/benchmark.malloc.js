'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var pkg = require( './../package.json' ).name;
var factory = require( './../lib/wasm.js' );


// FUNCTIONS //

/**
* Wraps `daxpy`, explicitly allocating upon receiving typed arrays. This would need to happen if one wanted to provide unique externally defined arrays to a WASM interface.
*
* @private
* @param {Function} daxpy - `daxpy`
* @param {PositiveInteger} N - number of elements
* @param {number} alpha - scalar
* @param {Float64Array} x - input array
* @param {integer} strideX - `x` stride length
* @param {Float64Array} y - destination array
* @param {integer} strideY - `y` stride length
* @returns {Float64Array} destination array
*/
function wrapper( daxpy, N, alpha, x, strideX, y, strideY ) {
	var nbytes;
	var xbytes;
	var ybytes;
	var view;
	var i;

	// Determine the number of bytes:
	nbytes = x.length * x.BYTES_PER_ELEMENT;

	// Allocate space on the heap:
	xbytes = daxpy.malloc( nbytes );
	ybytes = daxpy.malloc( nbytes );

	// Copy the data to the heap:
	xbytes.set( new Uint8Array( x.buffer ) );
	ybytes.set( new Uint8Array( y.buffer ) );

	// Multiply and add:
	daxpy( N, alpha, xbytes, strideX, ybytes, strideY );

	// Extract the results from the heap:
	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
	for ( i = 0; i < N; i++ ) {
		y[ i ] = view[ i ];
	}
	// Free the memory:
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	return y;
} // end FUNCTION wrapper()

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark( len ) {
	var daxpy;
	var x;
	var y;
	var i;

	daxpy = factory();

	x = new Float64Array( len );
	y = new Float64Array( len );
	for ( i = 0; i < len; i++ ) {
		x[ i ] = ( randu()*200.0 ) - 100.0;
		y[ i ] = ( randu()*200.0 ) - 100.0;
	}
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			z = wrapper( daxpy, x.length, 5.0, x, 1, y, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var len;
	var min;
	var max;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );
		f = createBenchmark( len );
		bench( pkg+'::wasm,malloc:len='+len, f );
	}
} // end FUNCTION main()

main();
