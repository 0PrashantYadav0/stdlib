'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var tryRequire = require( '@stdlib/utils/try-require' );
var pkg = require( './../package.json' ).name;
var daxpy = require( './../lib/main.js' );
var factory = require( './../lib/wasm.js' );


// VARIABLES //

var ndaxpy = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( ndaxpy instanceof Error )
};


// FUNCTIONS //

/**
* Creates a benchmark function for measuring vanilla JavaScript interface.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark1( len ) {
	var idx;
	var x;
	var y;
	var i;

	x = new Float64Array( len );
	y = new Float64Array( len );
	for ( i = 0; i < len; i++ ) {
		x[ i ] = ( randu()*200.0 ) - 100.0;
		y[ i ] = ( randu()*200.0 ) - 100.0;
	}
	idx = floor( len / 10 );

	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var v;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			v = ( randu()*200.0 ) - 100.0;
			x[ idx ] = v;
			z = daxpy( x.length, 5.0, x, 1, y, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark1()

/**
* Creates a benchmark function for measuring native add-on interface.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark2( len ) {
	var idx;
	var x;
	var y;
	var i;

	x = new Float64Array( len );
	y = new Float64Array( len );
	for ( i = 0; i < len; i++ ) {
		x[ i ] = ( randu()*200.0 ) - 100.0;
		y[ i ] = ( randu()*200.0 ) - 100.0;
	}
	idx = floor( len / 10 );

	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var v;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			v = ( randu()*200.0 ) - 100.0;
			x[ idx ] = v;
			z = ndaxpy( x.length, 5.0, x, 1, y, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark2()

/**
* Creates a benchmark function for measuring WASM interface and using heap `setValue` method.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark3( len ) {
	var wasm;
	var idx;
	var x;
	var y;
	var i;

	wasm = factory();

	x = new Float64Array( len );
	y = new Float64Array( len );
	for ( i = 0; i < len; i++ ) {
		x[ i ] = ( randu()*200.0 ) - 100.0;
		y[ i ] = ( randu()*200.0 ) - 100.0;
	}
	idx = floor( len/10 * x.BYTES_PER_ELEMENT );

	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var nbytes;
		var xbytes;
		var ybytes;
		var z;
		var v;
		var i;

		nbytes = x.length * x.BYTES_PER_ELEMENT;

		xbytes = wasm.malloc( nbytes );
		ybytes = wasm.malloc( nbytes );

		xbytes.set( new Uint8Array( x.buffer ) );
		ybytes.set( new Uint8Array( y.buffer ) );

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			v = ( randu()*200.0 ) - 100.0;
			xbytes.setValue( idx, v );
			z = wasm( x.length, 5.0, xbytes, 1, ybytes, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );

		wasm.free( xbytes );
		wasm.free( ybytes );

		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark3()

/**
* Creates a benchmark function for measuring WASM interface and using heap views.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark4( len ) {
	var wasm;
	var idx;
	var x;
	var y;
	var i;

	wasm = factory();

	x = new Float64Array( len );
	y = new Float64Array( len );
	for ( i = 0; i < len; i++ ) {
		x[ i ] = ( randu()*200.0 ) - 100.0;
		y[ i ] = ( randu()*200.0 ) - 100.0;
	}
	idx = floor( len / 10 );

	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var nbytes;
		var xbytes;
		var ybytes;
		var xview;
		var z;
		var v;
		var i;

		nbytes = x.length * x.BYTES_PER_ELEMENT;

		xbytes = wasm.malloc( nbytes );
		ybytes = wasm.malloc( nbytes );

		xbytes.set( new Uint8Array( x.buffer ) );
		ybytes.set( new Uint8Array( y.buffer ) );

		xview = new Float64Array( xbytes.buffer, xbytes.byteOffset, x.length );

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			v = ( randu()*200.0 ) - 100.0;
			xview[ idx ] = v;
			z = wasm( x.length, 5.0, xbytes, 1, ybytes, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );

		wasm.free( xbytes );
		wasm.free( ybytes );

		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark4()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var len;
	var min;
	var max;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );

		f = createBenchmark1( len );
		bench( pkg+'::memory-reuse,main:len='+len, f );

		f = createBenchmark2( len );
		bench( pkg+'::memory-reuse,native:len='+len, opts, f );

		f = createBenchmark3( len );
		bench( pkg+'::memory-reuse,wasm,set-value:len='+len, f );

		f = createBenchmark4( len );
		bench( pkg+'::memory-reuse,wasm,view:len='+len, f );
	}
} // end FUNCTION main()

main();
