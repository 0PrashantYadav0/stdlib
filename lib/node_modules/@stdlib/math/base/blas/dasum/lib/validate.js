'use strict';

// MODULES //

var isObject = require( '@stdlib/utils/is-plain-object' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.memory] - total memory
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'memory': 16777216
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'memory' ) ) {
		opts.TOTAL_MEMORY = options.memory;
		if ( !isPositiveInteger( options.memory ) ) {
			return new TypeError( 'invalid option. `memory` option must be a positive integer. Option: `' + options.memory + '`.' );
		}
		if ( options.memory <= opts.TOTAL_STACK ) {
			return new RangeError( 'invalid option. `memory` option must be greater than total stack size: `' + opts.TOTAL_STACK + '`. Option: `' + options.memory + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
