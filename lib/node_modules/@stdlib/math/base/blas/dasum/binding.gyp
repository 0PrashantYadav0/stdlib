# A `.gyp` file for building a Node.js native add-on.
#
# [1]: https://gyp.gsrc.io/docs/InputFormatReference.md
# [2]: https://gyp.gsrc.io/docs/UserDocumentation.md
{
  'targets': [
    {
      # The target name should match the add-on export name:
      'target_name': 'addon',

      # Define target dependencies:
      'dependencies': [
        'c_dasum', # C libraries
        'f_dasum'  # Fortran libraries
      ],

      # Define directories which contain relevant include headers:
      'include_dirs': [
        '<!(node -e "require(\'nan\')")',
        'include'
      ],

      # List the source files to compile:
      'sources': [
        './src/addon.cpp'
      ],

      # C++ compiler flags:
      'cflags': [
        # Specify the C++ standard to which the program is expected to conform:
        '-std=c++11',

        # Generate platform-independent code:
        '-fPIC',

        # Enable commonly used warning options:
        '-Wall',

        # Aggressive optimization:
        '-O3'
      ],

      # Apply conditions based on the runtime environment:
      'conditions': []
    },
    {
      'target_name': 'c_dasum',

      # Compile as a static library:
      'type': 'static_library',

      # Define directories which contain relevant include headers:
      'include_dirs': [
        'include'
      ],

      # List of source files to compile:
      'sources': [
        './src/c_dasum.c'
      ],

      # C compiler flags:
      'cflags': [
        # Specify the C standard to which the program is expected to conform:
        '-std=c99',

        # Generate platform-independent code:
        '-fPIC',

        # Enable commonly used warning options:
        '-Wall',

        # Aggressive optimization:
        '-O3'
      ]
    },
    {
      'target_name': 'f_dasum',

      # List of source files to compile:
      'sources': [
        './src/dasum.f',
        './src/dasumsub.f'
      ]
    }
  ], # end targets

  # Rules
  'rules': [
    {
      'rule_name': 'fortran',

      'extension': 'f',

      'variables': {
        'fflags': [
          '-std=f95',
          '-ffree-form',
          '-Wall',
          '-Wextra',
          '-Wimplicit-interface',
          '-fcheck=bounds',
          '-fno-underscoring',
          '-pedantic',
          '-c'
        ]
      },

      'inputs': [],

      'outputs': [
        '<(INTERMEDIATE_DIR)/<(RULE_INPUT_ROOT).o'
      ],

      'action': [
        'gfortran',
        '<@(fflags)',
        '<(RULE_INPUT_PATH)',
        '-o',
        '<(INTERMEDIATE_DIR)/<(RULE_INPUT_ROOT).o'
      ],

      'message': 'Compiling Fortran...'
    }
  ] # end rules
}
