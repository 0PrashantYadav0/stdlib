'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var tryRequire = require( '@stdlib/utils/try-require' );
var pkg = require( './../package.json' ).name;
var dasum = require( './../lib/main.js' );
var wasm = require( './../lib/wasm.js' )();


// VARIABLES //

var ndasum = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( ndasum instanceof Error )
};


// FUNCTIONS //

/**
* Creates a benchmark function for measuring vanilla JavaScript interface.
*
* @private
* @param {Float64Array} x - array buffer
* @returns {Function} benchmark function
*/
function createBenchmark1( x ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var y;
		var i;
		var j;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < x.length; j++ ) {
				x[ j ] = ( randu()*10000.0 ) - 20000.0;
			}
			y = dasum( x.length, x, 1 );
			if ( isnan( y ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark1()

/**
* Creates a benchmark function for measuring native add-on interface.
*
* @private
* @param {Float64Array} x - array buffer
* @returns {Function} benchmark function
*/
function createBenchmark2( x ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var y;
		var i;
		var j;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < x.length; j++ ) {
				x[ j ] = ( randu()*10000.0 ) - 20000.0;
			}
			y = ndasum( x.length, x, 1 );
			if ( isnan( y ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark2()

/**
* Creates a benchmark function for measuring WASM interface and using heap `setValue` method.
*
* @private
* @param {Uint8Array} heap - allocated buffer
* @param {PositiveInteger} len - array length
* @param {PositiveInteger} nbytes - number of bytes per element
* @returns {Function} benchmark function
*/
function createBenchmark3( heap, len, nbytes ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var y;
		var v;
		var i;
		var j;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < len; j++ ) {
				v = ( randu()*10000.0 ) - 20000.0;
				heap.setValue( j * nbytes, v );
			}
			y = wasm( len, heap, 1 );
			if ( isnan( y ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark3()

/**
* Creates a benchmark function for measuring WASM interface and using a view.
*
* @private
* @param {Uint8Array} heap - allocated buffer
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark4( heap, len ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var view;
		var y;
		var v;
		var i;
		var j;

		view = new Float64Array( heap.buffer, heap.byteOffset, len );

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < len; j++ ) {
				v = ( randu()*10000.0 ) - 20000.0;
				view[ j ] = v;
			}
			y = wasm( len, heap, 1 );
			if ( isnan( y ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	} // end FUNCTION benchmark()
} // end FUNCTION createBenchmark4()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var nbytes;
	var heap;
	var len;
	var min;
	var max;
	var x;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );
		x = new Float64Array( len );

		f = createBenchmark1( x );
		bench( pkg+'::memory-reuse,shared-array,main:len='+len, f );

		f = createBenchmark2( x );
		bench( pkg+'::memory-reuse,shared-array,native:len='+len, opts, f );

		nbytes = x.length * x.BYTES_PER_ELEMENT;
		heap = wasm.malloc( nbytes );
		heap.set( new Uint8Array( x.buffer ) );

		f = createBenchmark3( heap, len, x.BYTES_PER_ELEMENT );
		bench( pkg+'::memory-reuse,shared-array,wasm,set-value:len='+len, f );

		f = createBenchmark4( heap, len );
		bench( pkg+'::memory-reuse,shared-array,wasm,view:len='+len, f );
	}
} // end FUNCTION main()

main();
