'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pkg = require( './../package.json' ).name;
var dasum = require( './../lib/main.js' );
var wasm = require( './../lib/wasm.js' )();


// MAIN //

bench( pkg+'::memory_reuse,main', function bench( b ) {
	var idx;
	var x;
	var y;
	var v;
	var i;

	x = new Float64Array( 1000 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = ( randu()*10000.0 ) - 20000.0;
	}
	idx = 800;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = ( randu()*10000.0 ) - 20000.0;
		x[ idx ] = v;
		y = dasum( x.length, x, 1 );
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( y ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::memory_reuse,wasm', function bench( b ) {
	var nbytes;
	var heap;
	var idx;
	var x;
	var y;
	var v;
	var i;

	x = new Float64Array( 1000 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = ( randu()*10000.0 ) - 20000.0;
	}
	nbytes = x.length * x.BYTES_PER_ELEMENT;
	heap = wasm.malloc( nbytes );
	heap.set( new Uint8Array( x.buffer ) );

	idx = 100 * x.BYTES_PER_ELEMENT;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = ( randu()*10000.0 ) - 20000.0;
		heap.setValue( idx, v );
		y = wasm( x.length, heap, 1 );
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( y ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );

	wasm.free( heap );
	b.end();
});
