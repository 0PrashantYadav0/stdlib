'use strict';

// MODULES //

var tape = require( 'tape' );
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './../lib/defaults.json' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		true,
		false,
		undefined,
		null,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), values[ i ] );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `memory` option which is not a positive integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		undefined,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'memory': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `memory` option which is less than or equal to the total stack size', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		1,
		2,
		3,
		DEFAULTS.TOTAL_STACK,
		DEFAULTS.TOTAL_STACK - 1,
		DEFAULTS.TOTAL_STACK - 2
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'memory': values[ i ]
		});
		t.strictEqual( err instanceof RangeError, true, 'returns a range error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var expected;
	var options;
	var opts;
	var err;

	expected = copy( DEFAULTS );
	expected.TOTAL_MEMORY = 16777256;

	opts = copy( DEFAULTS );
	options = {
		'memory': 16777256
	};

	err = validate( opts, options );
	t.strictEqual( err, null, 'returns null' );
	t.deepEqual( opts, expected, 'sets options' );

	t.end();
});

tape( 'the function will ignore unrecognized options', function test( t ) {
	var options;
	var opts;
	var err;

	opts = {};
	options = {
		'beep': true,
		'boop': 'bop'
	};

	err = validate( opts, options );
	t.strictEqual( err, null, 'returns null' );
	t.deepEqual( opts, {}, 'ignores unrecognized options' );

	t.end();
});
