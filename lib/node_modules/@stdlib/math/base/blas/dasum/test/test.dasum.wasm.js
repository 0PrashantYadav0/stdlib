'use strict';

// MODULES //

var tape = require( 'tape' );
var floor = require( '@stdlib/math/base/special/floor' );
var randu = require( '@stdlib/math/base/random/randu' );
var tryFunction = require( '@stdlib/utils/try-function' );
var factory = require( './../lib/dasum.wasm.js' );


// VARIABLES //

var opts = {
	'skip': ( tryFunction( factory )() instanceof Error )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory({
				'memory': value
			});
		};
	}
});

tape( 'the function returns a function', opts, function test( t ) {
	var dasum = factory();
	t.strictEqual( typeof dasum, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (options)', opts, function test( t ) {
	var dasum = factory({
		'memory': 16777216
	});
	t.strictEqual( typeof dasum, 'function', 'returns a function' );
	t.end();
});

tape( 'attached to the returned function is a method to allocate memory', opts, function test( t ) {
	var dasum = factory();
	t.strictEqual( typeof dasum.malloc, 'function', 'has method' );
	t.end();
});

tape( 'attached to the returned function is a method to free memory', opts, function test( t ) {
	var dasum = factory();
	t.strictEqual( typeof dasum.free, 'function', 'has method' );
	t.end();
});

tape( 'the returned function has an arity of 3', opts, function test( t ) {
	var dasum = factory();
	t.strictEqual( dasum.length, 3, 'arity of 3' );
	t.end();
});

tape( 'the returned function computes the sum of absolute values', opts, function test( t ) {
	var dasum;
	var bytes;
	var x;
	var y;

	dasum = factory();

	x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );

	bytes = dasum.malloc( x.length * x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	y = dasum( x.length, bytes, 1 );

	dasum.free( bytes );

	t.strictEqual( y, 15.0, 'returns 15' );
	t.end();
});

tape( 'the returned function computes the sum of absolute values (malloc)', opts, function test( t ) {
	var dasum;
	var bytes;
	var view;
	var N;
	var y;

	dasum = factory();

	N = 5;

	bytes = dasum.malloc( N * 8 ); // 8 bytes per double
	view = new Float64Array( bytes.buffer, bytes.byteOffset, N );

	view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );

	y = dasum( N, bytes, 1 );

	dasum.free( bytes );

	t.strictEqual( y, 15.0, 'returns 15' );
	t.end();
});

tape( 'the returned function supports an `x` stride', opts, function test( t ) {
	var dasum;
	var bytes;
	var x;
	var y;
	var N;

	dasum = factory();

	x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
	N = 3;

	bytes = dasum.malloc( x.length * x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	y = dasum( N, bytes, 2 );

	dasum.free( bytes );

	t.strictEqual( y, 9.0, 'returns 9' );
	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the returned function returns `0`', opts, function test( t ) {
	var dasum;
	var bytes;
	var x;
	var y;

	dasum = factory();

	x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );

	bytes = dasum.malloc( x.length * x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	y = dasum( 0, bytes, 1 );

	dasum.free( bytes );

	t.strictEqual( y, 0.0, 'returns 0' );
	t.end();
});

tape( 'if provided a `stride` parameter less than or equal to `0`, the returned function returns `0`', opts, function test( t ) {
	var dasum;
	var bytes;
	var x;
	var y;

	dasum = factory();

	x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );

	bytes = dasum.malloc( x.length * x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	y = dasum( x.length, bytes, -1 );

	dasum.free( bytes );

	t.strictEqual( y, 0.0, 'returns 0' );
	t.end();
});

tape( 'the returned function supports view offsets', opts, function test( t ) {
	var dasum;
	var bytes;
	var view;
	var x0;
	var x1;
	var y;
	var N;

	dasum = factory();

	// Initial array...
	x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );

	// Create an offset view...
	x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 ); // begin at 2nd element

	N = floor( x0.length / 2 );

	bytes = dasum.malloc( x1.length * x1.BYTES_PER_ELEMENT );
	view = new Uint8Array( x1.buffer, x1.byteOffset, x1.length*x1.BYTES_PER_ELEMENT ); // eslint-disable-line max-len
	bytes.set( view );

	y = dasum( N, bytes, 2 );

	dasum.free( bytes );

	t.strictEqual( y, 12.0, 'returns 12' );
	t.end();
});

tape( 'if the stride equals `1`, the returned function efficiently sums the absolute values', opts, function test( t ) {
	var dasum;
	var bytes;
	var sign;
	var x;
	var y;
	var i;

	dasum = factory();

	x = new Float64Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		sign = randu();
		if ( sign < 0.5 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		x[ i ] = sign * (i+1);
	}
	bytes = dasum.malloc( x.length * x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	y = dasum( x.length, bytes, 1 );

	dasum.free( bytes );

	// Compare to closed-form formula:
	t.strictEqual( y, x.length*(x.length+1)/2, 'returns expected sum' );

	x = new Float64Array( 240 );
	for ( i = 0; i < x.length; i++ ) {
		sign = randu();
		if ( sign < 0.5 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		x[ i ] = sign * (i+1);
	}
	bytes = dasum.malloc( x.length * x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	y = dasum( x.length, bytes, 1 );

	dasum.free( bytes );

	// Compare to closed-form formula:
	t.strictEqual( y, x.length*(x.length+1)/2, 'returns expected sum' );

	t.end();
});

tape( 'if provided an unrecognized heap buffer, the returned function throws an error', opts, function test( t ) {
	var dasum = factory();
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		dasum( 8, new Uint8Array( 64 ), 1 );
	}
});

tape( 'if provided a heap buffer which has already been freed, the returned function throws an error', opts, function test( t ) {
	var dasum = factory();
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var bytes = dasum.malloc( 64 );
		dasum.free( bytes );
		dasum( 8, bytes, 1 );
	}
});

tape( 'if the `free` method is provided an unrecognized buffer, the returned function throws an error', opts, function test( t ) {
	var dasum = factory();
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		dasum.free( new Uint8Array( 64 ) );
	}
});

tape( 'if the `free` method is provided a buffer which has already been freed, the returned function throws an error', opts, function test( t ) {
	var dasum = factory();
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var bytes = dasum.malloc( 64 );
		dasum.free( bytes );
		dasum.free( bytes );
	}
});

tape( 'the returned function handles repeated memory allocation', opts, function test( t ) {
	var dasum;
	var heaps;
	var i;

	dasum = factory();

	heaps = new Array( 1e5 );
	for ( i = 0; i < heaps.length; i++ ) {
		heaps[ i ] = dasum.malloc( 1 );
	}
	for ( i = 0; i < heaps.length; i++ ) {
		dasum.free( heaps[ i ] );
	}
	t.pass( 'handles repeated memory allocation' );
	t.end();
});

tape( 'the buffer view returned when allocating memory supports accessing a value at a specific memory address', opts, function test( t ) {
	var dasum;
	var bytes;
	var x;
	var y;

	dasum = factory();

	x = new Float64Array( [ 0.0, 2.0, 4.0, 6.0, 8.0, 10.0 ] );

	bytes = dasum.malloc( x.length*x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	// Default behavior:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT );
	t.strictEqual( y, 4.0, 'returns value' );

	// Specify type:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'returns value' );

	// Word:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'i32' );
	t.notEqual( y, 4.0, 'returns word' );

	dasum.free( bytes );

	t.end();
});

tape( 'the buffer view returned when allocating memory supports setting a value at a specific memory address', opts, function test( t ) {
	var dasum;
	var bytes;
	var x;
	var y;

	dasum = factory();

	x = new Float64Array( [ 0.0, 2.0, 4.0, 6.0, 8.0, 10.0 ] );

	bytes = dasum.malloc( x.length*x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	// Default behavior:
	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 10.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 10.0, 'set value' );

	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 4.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'reset value' );

	// Specify type:
	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 10.0, 'double' );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 10.0, 'set value' );

	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 4.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'reset value' );

	// Word:
	bytes.setValue( (2*x.BYTES_PER_ELEMENT) + 4, 10, 'i32' );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.notEqual( y, 4.0, 'sets word' );

	dasum.free( bytes );

	t.end();
});
