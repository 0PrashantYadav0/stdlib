/* eslint-disable */module.exports = function(Module) {
  Module = Module || {};
  var Module = Module;

Module["print"] = (function() {});
Module["printErr"] = (function() {});
var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
if (Module["ENVIRONMENT"]) {
 if (Module["ENVIRONMENT"] === "WEB") {
  ENVIRONMENT_IS_WEB = true;
 } else if (Module["ENVIRONMENT"] === "WORKER") {
  ENVIRONMENT_IS_WORKER = true;
 } else if (Module["ENVIRONMENT"] === "NODE") {
  ENVIRONMENT_IS_NODE = true;
 } else if (Module["ENVIRONMENT"] === "SHELL") {
  ENVIRONMENT_IS_SHELL = true;
 } else {
  throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");
 }
} else {
 ENVIRONMENT_IS_WEB = typeof window === "object";
 ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
 ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
 ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = console.log;
 if (!Module["printErr"]) Module["printErr"] = console.warn;
 var nodeFS;
 var nodePath;
 Module["read"] = function read(filename, binary) {
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  return binary ? ret : ret.toString();
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 if (!Module["thisProgram"]) {
  if (process["argv"].length > 1) {
   Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
  } else {
   Module["thisProgram"] = "unknown-program";
  }
 }
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  
 }
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  var data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 Module["readAsync"] = function readAsync(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
   } else {
    onerror();
   }
  };
  xhr.onerror = onerror;
  xhr.send(null);
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.warn(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
 }
 if (typeof Module["setWindowTitle"] === "undefined") {
  Module["setWindowTitle"] = (function(title) {
   document.title = title;
  });
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
 Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
moduleOverrides = undefined;
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
  return value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 STACK_ALIGN: 16,
 prepVararg: (function(ptr, type) {
  if (type === "double" || type === "i64") {
   if (ptr & 7) {
    assert((ptr & 7) === 4);
    ptr += 4;
   }
  } else {
   assert((ptr & 3) === 0);
  }
  return ptr;
 }),
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   return Module["dynCall_" + sig].apply(null, [ ptr ].concat(args));
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[sig]) {
   Runtime.funcWrappers[sig] = {};
  }
  var sigCache = Runtime.funcWrappers[sig];
  if (!sigCache[func]) {
   if (sig.length === 1) {
    sigCache[func] = function dynCall_wrapper() {
     return Runtime.dynCall(sig, func);
    };
   } else if (sig.length === 2) {
    sigCache[func] = function dynCall_wrapper(arg) {
     return Runtime.dynCall(sig, func, [ arg ]);
    };
   } else {
    sigCache[func] = function dynCall_wrapper() {
     return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
    };
   }
  }
  return sigCache[func];
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 15 & -16;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 15 & -16;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = HEAP32[DYNAMICTOP_PTR >> 2];
  var end = (ret + size + 15 | 0) & -16;
  HEAP32[DYNAMICTOP_PTR >> 2] = end;
  if (end >= TOTAL_MEMORY) {
   var success = enlargeMemory();
   if (!success) {
    HEAP32[DYNAMICTOP_PTR >> 2] = ret;
    return 0;
   }
  }
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
var ABORT = 0;
var EXITSTATUS = 0;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  try {
   func = eval("_" + ident);
  } catch (e) {}
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var JSfuncs = {
  "stackSave": (function() {
   Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore();
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    var len = (str.length << 2) + 1;
    ret = Runtime.stackAlloc(len);
    stringToUTF8(str, ret, len);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) {
   if (opts && opts.async) {
    EmterpreterAsync.asyncFinalizers.push((function() {
     Runtime.stackRestore(stack);
    }));
    return;
   }
   Runtime.stackRestore(stack);
  }
  return ret;
 };
 var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = null;
 function ensureJSsource() {
  if (!JSsource) {
   JSsource = {};
   for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
     JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
   }
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   ensureJSsource();
   funcstr += "var stack = " + JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=(" + convertCode.returnValue + ");";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   ensureJSsource();
   funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
  }
  funcstr += "return ret})";
  return eval(funcstr);
 };
}))();
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STATIC = 2;
var ALLOC_NONE = 4;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ typeof _malloc === "function" ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return Module["UTF8ToString"](ptr);
}
var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;
function UTF8ArrayToString(u8Array, idx) {
 var endPtr = idx;
 while (u8Array[endPtr]) ++endPtr;
 if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
 } else {
  var u0, u1, u2, u3, u4, u5;
  var str = "";
  while (1) {
   u0 = u8Array[idx++];
   if (!u0) return str;
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   u1 = u8Array[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   u2 = u8Array[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u3 = u8Array[idx++] & 63;
    if ((u0 & 248) == 240) {
     u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
    } else {
     u4 = u8Array[idx++] & 63;
     if ((u0 & 252) == 248) {
      u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
     } else {
      u5 = u8Array[idx++] & 63;
      u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
     }
    }
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
}
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;
function demangle(func) {
 var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
 if (__cxa_demangle_func) {
  try {
   var s = func.substr(1);
   var len = lengthBytesUTF8(s) + 1;
   var buf = _malloc(len);
   stringToUTF8(s, buf, len);
   var status = _malloc(4);
   var ret = __cxa_demangle_func(buf, 0, 0, status);
   if (getValue(status, "i32") === 0 && ret) {
    return Pointer_stringify(ret);
   }
  } catch (e) {} finally {
   if (buf) _free(buf);
   if (status) _free(status);
   if (ret) _free(ret);
  }
  return func;
 }
 Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 return func;
}
function demangleAll(text) {
 var regex = /__Z[\w\d_]+/g;
 return text.replace(regex, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 var js = jsStackTrace();
 if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
 return demangleAll(js);
}
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;
function alignUp(x, multiple) {
 if (x % multiple > 0) {
  x += multiple - x % multiple;
 }
 return x;
}
var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
function updateGlobalBuffer(buf) {
 Module["buffer"] = buffer = buf;
}
function updateGlobalBufferViews() {
 Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
 Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
 Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE, STATICTOP, staticSealed;
var STACK_BASE, STACKTOP, STACK_MAX;
var DYNAMIC_BASE, DYNAMICTOP_PTR;
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;
if (!Module["reallocBuffer"]) Module["reallocBuffer"] = (function(size) {
 var ret;
 try {
  if (ArrayBuffer.transfer) {
   ret = ArrayBuffer.transfer(buffer, size);
  } else {
   var oldHEAP8 = HEAP8;
   ret = new ArrayBuffer(size);
   var temp = new Int8Array(ret);
   temp.set(oldHEAP8);
  }
 } catch (e) {
  return false;
 }
 var success = _emscripten_replace_memory(ret);
 if (!success) return false;
 return ret;
});
function enlargeMemory() {
 var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;
 var LIMIT = 2147483648 - PAGE_MULTIPLE;
 if (HEAP32[DYNAMICTOP_PTR >> 2] > LIMIT) {
  return false;
 }
 TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY);
 while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR >> 2]) {
  if (TOTAL_MEMORY <= 536870912) {
   TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE);
  } else {
   TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
  }
 }
 var replacement = Module["reallocBuffer"](TOTAL_MEMORY);
 if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
  return false;
 }
 updateGlobalBuffer(replacement);
 updateGlobalBufferViews();
 return true;
}
var byteLength;
try {
 byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get);
 byteLength(new ArrayBuffer(4));
} catch (e) {
 byteLength = (function(buffer) {
  return buffer.byteLength;
 });
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 1024;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
if (Module["buffer"]) {
 buffer = Module["buffer"];
} else {
 {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
 }
}
updateGlobalBufferViews();
function getTotalMemory() {
 return TOTAL_MEMORY;
}
HEAP32[0] = 1668509029;
HEAP16[1] = 25459;
if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99) throw "Runtime error: expected the system to be little-endian!";
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Module["dynCall_v"](func);
   } else {
    Module["dynCall_vi"](func, callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}
function writeArrayToMemory(array, buffer) {
 HEAP8.set(array, buffer);
}
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
if (!Math["clz32"]) Math["clz32"] = (function(x) {
 x = x >>> 0;
 for (var i = 0; i < 32; i++) {
  if (x & 1 << 31 - i) return i;
 }
 return 32;
});
Math.clz32 = Math["clz32"];
if (!Math["trunc"]) Math["trunc"] = (function(x) {
 return x < 0 ? Math.ceil(x) : Math.floor(x);
});
Math.trunc = Math["trunc"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var ASM_CONSTS = [];
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 560;
__ATINIT__.push();
allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
var tempDoublePtr = STATICTOP;
STATICTOP += 16;
function _abort() {
 Module["abort"]();
}
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
Module["_sbrk"] = _sbrk;
Module["_pthread_self"] = _pthread_self;
Module["_memset"] = _memset;
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
staticSealed = true;
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity,
 "byteLength": byteLength
};
Module.asmLibraryArg = {
 "abort": abort,
 "assert": assert,
 "enlargeMemory": enlargeMemory,
 "getTotalMemory": getTotalMemory,
 "_abort": _abort,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "___setErrNo": ___setErrNo,
 "DYNAMICTOP_PTR": DYNAMICTOP_PTR,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX
};
// EMSCRIPTEN_START_ASM

var asm = (function(global,env,buffer) {

 "almost asm";
 var a = global.Int8Array;
 var b = global.Int16Array;
 var c = global.Int32Array;
 var d = global.Uint8Array;
 var e = global.Uint16Array;
 var f = global.Uint32Array;
 var g = global.Float32Array;
 var h = global.Float64Array;
 var i = new a(buffer);
 var j = new b(buffer);
 var k = new c(buffer);
 var l = new d(buffer);
 var m = new e(buffer);
 var n = new f(buffer);
 var o = new g(buffer);
 var p = new h(buffer);
 var q = global.byteLength;
 var r = env.DYNAMICTOP_PTR | 0;
 var s = env.tempDoublePtr | 0;
 var t = env.ABORT | 0;
 var u = env.STACKTOP | 0;
 var v = env.STACK_MAX | 0;
 var w = 0;
 var x = 0;
 var y = 0;
 var z = 0;
 var A = global.NaN, B = global.Infinity;
 var C = 0, D = 0, E = 0, F = 0, G = 0.0, H = 0, I = 0, J = 0, K = 0.0;
 var L = 0;
 var M = global.Math.floor;
 var N = global.Math.abs;
 var O = global.Math.sqrt;
 var P = global.Math.pow;
 var Q = global.Math.cos;
 var R = global.Math.sin;
 var S = global.Math.tan;
 var T = global.Math.acos;
 var U = global.Math.asin;
 var V = global.Math.atan;
 var W = global.Math.atan2;
 var X = global.Math.exp;
 var Y = global.Math.log;
 var Z = global.Math.ceil;
 var _ = global.Math.imul;
 var $ = global.Math.min;
 var aa = global.Math.max;
 var ba = global.Math.clz32;
 var ca = env.abort;
 var da = env.assert;
 var ea = env.enlargeMemory;
 var fa = env.getTotalMemory;
 var ga = env._abort;
 var ha = env._emscripten_memcpy_big;
 var ia = env.___setErrNo;
 var ja = 0.0;
 function ka(newBuffer) {
  if (q(newBuffer) & 16777215 || q(newBuffer) <= 16777215 || q(newBuffer) > 2147483648) return false;
  i = new a(newBuffer);
  j = new b(newBuffer);
  k = new c(newBuffer);
  l = new d(newBuffer);
  m = new e(newBuffer);
  n = new f(newBuffer);
  o = new g(newBuffer);
  p = new h(newBuffer);
  buffer = newBuffer;
  return true;
 }
 
// EMSCRIPTEN_START_FUNCS

function ua(a) {
 a = a | 0;
 var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0;
 D = u;
 u = u + 16 | 0;
 o = D;
 do if (a >>> 0 < 245) {
  n = a >>> 0 < 11 ? 16 : a + 11 & -8;
  a = n >>> 3;
  s = k[14] | 0;
  b = s >>> a;
  if (b & 3 | 0) {
   e = (b & 1 ^ 1) + a | 0;
   f = 96 + (e << 1 << 2) | 0;
   b = f + 8 | 0;
   c = k[b >> 2] | 0;
   g = c + 8 | 0;
   d = k[g >> 2] | 0;
   do if ((f | 0) == (d | 0)) k[14] = s & ~(1 << e); else {
    if (d >>> 0 < (k[18] | 0) >>> 0) ga();
    a = d + 12 | 0;
    if ((k[a >> 2] | 0) == (c | 0)) {
     k[a >> 2] = f;
     k[b >> 2] = d;
     break;
    } else ga();
   } while (0);
   C = e << 3;
   k[c + 4 >> 2] = C | 3;
   C = c + C + 4 | 0;
   k[C >> 2] = k[C >> 2] | 1;
   C = g;
   u = D;
   return C | 0;
  }
  r = k[16] | 0;
  if (n >>> 0 > r >>> 0) {
   if (b | 0) {
    d = 2 << a;
    d = b << a & (d | 0 - d);
    d = (d & 0 - d) + -1 | 0;
    h = d >>> 12 & 16;
    d = d >>> h;
    a = d >>> 5 & 8;
    d = d >>> a;
    f = d >>> 2 & 4;
    d = d >>> f;
    b = d >>> 1 & 2;
    d = d >>> b;
    c = d >>> 1 & 1;
    c = (a | h | f | b | c) + (d >>> c) | 0;
    d = 96 + (c << 1 << 2) | 0;
    b = d + 8 | 0;
    f = k[b >> 2] | 0;
    h = f + 8 | 0;
    a = k[h >> 2] | 0;
    do if ((d | 0) == (a | 0)) {
     i = s & ~(1 << c);
     k[14] = i;
    } else {
     if (a >>> 0 < (k[18] | 0) >>> 0) ga();
     e = a + 12 | 0;
     if ((k[e >> 2] | 0) == (f | 0)) {
      k[e >> 2] = d;
      k[b >> 2] = a;
      i = s;
      break;
     } else ga();
    } while (0);
    g = (c << 3) - n | 0;
    k[f + 4 >> 2] = n | 3;
    e = f + n | 0;
    k[e + 4 >> 2] = g | 1;
    k[e + g >> 2] = g;
    if (r | 0) {
     d = k[19] | 0;
     a = r >>> 3;
     c = 96 + (a << 1 << 2) | 0;
     a = 1 << a;
     if (!(i & a)) {
      k[14] = i | a;
      j = c + 8 | 0;
      l = c;
     } else {
      a = c + 8 | 0;
      b = k[a >> 2] | 0;
      if (b >>> 0 < (k[18] | 0) >>> 0) ga(); else {
       j = a;
       l = b;
      }
     }
     k[j >> 2] = d;
     k[l + 12 >> 2] = d;
     k[d + 8 >> 2] = l;
     k[d + 12 >> 2] = c;
    }
    k[16] = g;
    k[19] = e;
    C = h;
    u = D;
    return C | 0;
   }
   h = k[15] | 0;
   if (h) {
    i = (h & 0 - h) + -1 | 0;
    B = i >>> 12 & 16;
    i = i >>> B;
    A = i >>> 5 & 8;
    i = i >>> A;
    C = i >>> 2 & 4;
    i = i >>> C;
    b = i >>> 1 & 2;
    i = i >>> b;
    j = i >>> 1 & 1;
    j = k[360 + ((A | B | C | b | j) + (i >>> j) << 2) >> 2] | 0;
    i = (k[j + 4 >> 2] & -8) - n | 0;
    b = j;
    while (1) {
     a = k[b + 16 >> 2] | 0;
     if (!a) {
      a = k[b + 20 >> 2] | 0;
      if (!a) break;
     }
     b = (k[a + 4 >> 2] & -8) - n | 0;
     C = b >>> 0 < i >>> 0;
     i = C ? b : i;
     b = a;
     j = C ? a : j;
    }
    e = k[18] | 0;
    if (j >>> 0 < e >>> 0) ga();
    g = j + n | 0;
    if (j >>> 0 >= g >>> 0) ga();
    f = k[j + 24 >> 2] | 0;
    c = k[j + 12 >> 2] | 0;
    do if ((c | 0) == (j | 0)) {
     b = j + 20 | 0;
     a = k[b >> 2] | 0;
     if (!a) {
      b = j + 16 | 0;
      a = k[b >> 2] | 0;
      if (!a) {
       m = 0;
       break;
      }
     }
     while (1) {
      d = a + 20 | 0;
      c = k[d >> 2] | 0;
      if (c | 0) {
       a = c;
       b = d;
       continue;
      }
      d = a + 16 | 0;
      c = k[d >> 2] | 0;
      if (!c) break; else {
       a = c;
       b = d;
      }
     }
     if (b >>> 0 < e >>> 0) ga(); else {
      k[b >> 2] = 0;
      m = a;
      break;
     }
    } else {
     d = k[j + 8 >> 2] | 0;
     if (d >>> 0 < e >>> 0) ga();
     a = d + 12 | 0;
     if ((k[a >> 2] | 0) != (j | 0)) ga();
     b = c + 8 | 0;
     if ((k[b >> 2] | 0) == (j | 0)) {
      k[a >> 2] = c;
      k[b >> 2] = d;
      m = c;
      break;
     } else ga();
    } while (0);
    do if (f | 0) {
     a = k[j + 28 >> 2] | 0;
     b = 360 + (a << 2) | 0;
     if ((j | 0) == (k[b >> 2] | 0)) {
      k[b >> 2] = m;
      if (!m) {
       k[15] = h & ~(1 << a);
       break;
      }
     } else {
      if (f >>> 0 < (k[18] | 0) >>> 0) ga();
      a = f + 16 | 0;
      if ((k[a >> 2] | 0) == (j | 0)) k[a >> 2] = m; else k[f + 20 >> 2] = m;
      if (!m) break;
     }
     b = k[18] | 0;
     if (m >>> 0 < b >>> 0) ga();
     k[m + 24 >> 2] = f;
     a = k[j + 16 >> 2] | 0;
     do if (a | 0) if (a >>> 0 < b >>> 0) ga(); else {
      k[m + 16 >> 2] = a;
      k[a + 24 >> 2] = m;
      break;
     } while (0);
     a = k[j + 20 >> 2] | 0;
     if (a | 0) if (a >>> 0 < (k[18] | 0) >>> 0) ga(); else {
      k[m + 20 >> 2] = a;
      k[a + 24 >> 2] = m;
      break;
     }
    } while (0);
    if (i >>> 0 < 16) {
     C = i + n | 0;
     k[j + 4 >> 2] = C | 3;
     C = j + C + 4 | 0;
     k[C >> 2] = k[C >> 2] | 1;
    } else {
     k[j + 4 >> 2] = n | 3;
     k[g + 4 >> 2] = i | 1;
     k[g + i >> 2] = i;
     if (r | 0) {
      d = k[19] | 0;
      a = r >>> 3;
      c = 96 + (a << 1 << 2) | 0;
      a = 1 << a;
      if (!(s & a)) {
       k[14] = s | a;
       p = c + 8 | 0;
       q = c;
      } else {
       a = c + 8 | 0;
       b = k[a >> 2] | 0;
       if (b >>> 0 < (k[18] | 0) >>> 0) ga(); else {
        p = a;
        q = b;
       }
      }
      k[p >> 2] = d;
      k[q + 12 >> 2] = d;
      k[d + 8 >> 2] = q;
      k[d + 12 >> 2] = c;
     }
     k[16] = i;
     k[19] = g;
    }
    C = j + 8 | 0;
    u = D;
    return C | 0;
   }
  }
 } else if (a >>> 0 > 4294967231) n = -1; else {
  a = a + 11 | 0;
  n = a & -8;
  j = k[15] | 0;
  if (j) {
   b = 0 - n | 0;
   a = a >>> 8;
   if (!a) g = 0; else if (n >>> 0 > 16777215) g = 31; else {
    q = (a + 1048320 | 0) >>> 16 & 8;
    w = a << q;
    p = (w + 520192 | 0) >>> 16 & 4;
    w = w << p;
    g = (w + 245760 | 0) >>> 16 & 2;
    g = 14 - (p | q | g) + (w << g >>> 15) | 0;
    g = n >>> (g + 7 | 0) & 1 | g << 1;
   }
   c = k[360 + (g << 2) >> 2] | 0;
   a : do if (!c) {
    a = 0;
    c = 0;
    w = 86;
   } else {
    a = 0;
    e = n << ((g | 0) == 31 ? 0 : 25 - (g >>> 1) | 0);
    f = c;
    c = 0;
    while (1) {
     d = (k[f + 4 >> 2] & -8) - n | 0;
     if (d >>> 0 < b >>> 0) if (!d) {
      b = 0;
      a = f;
      c = f;
      w = 90;
      break a;
     } else {
      b = d;
      c = f;
     }
     d = k[f + 20 >> 2] | 0;
     f = k[f + 16 + (e >>> 31 << 2) >> 2] | 0;
     a = (d | 0) == 0 | (d | 0) == (f | 0) ? a : d;
     d = (f | 0) == 0;
     if (d) {
      w = 86;
      break;
     } else e = e << (d & 1 ^ 1);
    }
   } while (0);
   if ((w | 0) == 86) {
    if ((a | 0) == 0 & (c | 0) == 0) {
     a = 2 << g;
     a = j & (a | 0 - a);
     if (!a) break;
     q = (a & 0 - a) + -1 | 0;
     l = q >>> 12 & 16;
     q = q >>> l;
     i = q >>> 5 & 8;
     q = q >>> i;
     m = q >>> 2 & 4;
     q = q >>> m;
     p = q >>> 1 & 2;
     q = q >>> p;
     a = q >>> 1 & 1;
     a = k[360 + ((i | l | m | p | a) + (q >>> a) << 2) >> 2] | 0;
    }
    if (!a) {
     h = b;
     i = c;
    } else w = 90;
   }
   if ((w | 0) == 90) while (1) {
    w = 0;
    q = (k[a + 4 >> 2] & -8) - n | 0;
    d = q >>> 0 < b >>> 0;
    b = d ? q : b;
    c = d ? a : c;
    d = k[a + 16 >> 2] | 0;
    if (d | 0) {
     a = d;
     w = 90;
     continue;
    }
    a = k[a + 20 >> 2] | 0;
    if (!a) {
     h = b;
     i = c;
     break;
    } else w = 90;
   }
   if (i) if (h >>> 0 < ((k[16] | 0) - n | 0) >>> 0) {
    e = k[18] | 0;
    if (i >>> 0 < e >>> 0) ga();
    g = i + n | 0;
    if (i >>> 0 >= g >>> 0) ga();
    f = k[i + 24 >> 2] | 0;
    c = k[i + 12 >> 2] | 0;
    do if ((c | 0) == (i | 0)) {
     b = i + 20 | 0;
     a = k[b >> 2] | 0;
     if (!a) {
      b = i + 16 | 0;
      a = k[b >> 2] | 0;
      if (!a) {
       r = 0;
       break;
      }
     }
     while (1) {
      d = a + 20 | 0;
      c = k[d >> 2] | 0;
      if (c | 0) {
       a = c;
       b = d;
       continue;
      }
      d = a + 16 | 0;
      c = k[d >> 2] | 0;
      if (!c) break; else {
       a = c;
       b = d;
      }
     }
     if (b >>> 0 < e >>> 0) ga(); else {
      k[b >> 2] = 0;
      r = a;
      break;
     }
    } else {
     d = k[i + 8 >> 2] | 0;
     if (d >>> 0 < e >>> 0) ga();
     a = d + 12 | 0;
     if ((k[a >> 2] | 0) != (i | 0)) ga();
     b = c + 8 | 0;
     if ((k[b >> 2] | 0) == (i | 0)) {
      k[a >> 2] = c;
      k[b >> 2] = d;
      r = c;
      break;
     } else ga();
    } while (0);
    do if (!f) s = j; else {
     a = k[i + 28 >> 2] | 0;
     b = 360 + (a << 2) | 0;
     if ((i | 0) == (k[b >> 2] | 0)) {
      k[b >> 2] = r;
      if (!r) {
       s = j & ~(1 << a);
       k[15] = s;
       break;
      }
     } else {
      if (f >>> 0 < (k[18] | 0) >>> 0) ga();
      a = f + 16 | 0;
      if ((k[a >> 2] | 0) == (i | 0)) k[a >> 2] = r; else k[f + 20 >> 2] = r;
      if (!r) {
       s = j;
       break;
      }
     }
     b = k[18] | 0;
     if (r >>> 0 < b >>> 0) ga();
     k[r + 24 >> 2] = f;
     a = k[i + 16 >> 2] | 0;
     do if (a | 0) if (a >>> 0 < b >>> 0) ga(); else {
      k[r + 16 >> 2] = a;
      k[a + 24 >> 2] = r;
      break;
     } while (0);
     a = k[i + 20 >> 2] | 0;
     if (!a) s = j; else if (a >>> 0 < (k[18] | 0) >>> 0) ga(); else {
      k[r + 20 >> 2] = a;
      k[a + 24 >> 2] = r;
      s = j;
      break;
     }
    } while (0);
    do if (h >>> 0 < 16) {
     C = h + n | 0;
     k[i + 4 >> 2] = C | 3;
     C = i + C + 4 | 0;
     k[C >> 2] = k[C >> 2] | 1;
    } else {
     k[i + 4 >> 2] = n | 3;
     k[g + 4 >> 2] = h | 1;
     k[g + h >> 2] = h;
     a = h >>> 3;
     if (h >>> 0 < 256) {
      c = 96 + (a << 1 << 2) | 0;
      b = k[14] | 0;
      a = 1 << a;
      if (!(b & a)) {
       k[14] = b | a;
       t = c + 8 | 0;
       v = c;
      } else {
       a = c + 8 | 0;
       b = k[a >> 2] | 0;
       if (b >>> 0 < (k[18] | 0) >>> 0) ga(); else {
        t = a;
        v = b;
       }
      }
      k[t >> 2] = g;
      k[v + 12 >> 2] = g;
      k[g + 8 >> 2] = v;
      k[g + 12 >> 2] = c;
      break;
     }
     a = h >>> 8;
     if (!a) a = 0; else if (h >>> 0 > 16777215) a = 31; else {
      B = (a + 1048320 | 0) >>> 16 & 8;
      C = a << B;
      A = (C + 520192 | 0) >>> 16 & 4;
      C = C << A;
      a = (C + 245760 | 0) >>> 16 & 2;
      a = 14 - (A | B | a) + (C << a >>> 15) | 0;
      a = h >>> (a + 7 | 0) & 1 | a << 1;
     }
     c = 360 + (a << 2) | 0;
     k[g + 28 >> 2] = a;
     b = g + 16 | 0;
     k[b + 4 >> 2] = 0;
     k[b >> 2] = 0;
     b = 1 << a;
     if (!(s & b)) {
      k[15] = s | b;
      k[c >> 2] = g;
      k[g + 24 >> 2] = c;
      k[g + 12 >> 2] = g;
      k[g + 8 >> 2] = g;
      break;
     }
     b = h << ((a | 0) == 31 ? 0 : 25 - (a >>> 1) | 0);
     d = k[c >> 2] | 0;
     while (1) {
      if ((k[d + 4 >> 2] & -8 | 0) == (h | 0)) {
       w = 148;
       break;
      }
      c = d + 16 + (b >>> 31 << 2) | 0;
      a = k[c >> 2] | 0;
      if (!a) {
       w = 145;
       break;
      } else {
       b = b << 1;
       d = a;
      }
     }
     if ((w | 0) == 145) if (c >>> 0 < (k[18] | 0) >>> 0) ga(); else {
      k[c >> 2] = g;
      k[g + 24 >> 2] = d;
      k[g + 12 >> 2] = g;
      k[g + 8 >> 2] = g;
      break;
     } else if ((w | 0) == 148) {
      b = d + 8 | 0;
      a = k[b >> 2] | 0;
      C = k[18] | 0;
      if (a >>> 0 >= C >>> 0 & d >>> 0 >= C >>> 0) {
       k[a + 12 >> 2] = g;
       k[b >> 2] = g;
       k[g + 8 >> 2] = a;
       k[g + 12 >> 2] = d;
       k[g + 24 >> 2] = 0;
       break;
      } else ga();
     }
    } while (0);
    C = i + 8 | 0;
    u = D;
    return C | 0;
   }
  }
 } while (0);
 c = k[16] | 0;
 if (c >>> 0 >= n >>> 0) {
  b = c - n | 0;
  a = k[19] | 0;
  if (b >>> 0 > 15) {
   C = a + n | 0;
   k[19] = C;
   k[16] = b;
   k[C + 4 >> 2] = b | 1;
   k[C + b >> 2] = b;
   k[a + 4 >> 2] = n | 3;
  } else {
   k[16] = 0;
   k[19] = 0;
   k[a + 4 >> 2] = c | 3;
   C = a + c + 4 | 0;
   k[C >> 2] = k[C >> 2] | 1;
  }
  C = a + 8 | 0;
  u = D;
  return C | 0;
 }
 g = k[17] | 0;
 if (g >>> 0 > n >>> 0) {
  A = g - n | 0;
  k[17] = A;
  C = k[20] | 0;
  B = C + n | 0;
  k[20] = B;
  k[B + 4 >> 2] = A | 1;
  k[C + 4 >> 2] = n | 3;
  C = C + 8 | 0;
  u = D;
  return C | 0;
 }
 if (!(k[132] | 0)) {
  k[134] = 4096;
  k[133] = 4096;
  k[135] = -1;
  k[136] = -1;
  k[137] = 0;
  k[125] = 0;
  a = o & -16 ^ 1431655768;
  k[o >> 2] = a;
  k[132] = a;
  a = 4096;
 } else a = k[134] | 0;
 h = n + 48 | 0;
 i = n + 47 | 0;
 f = a + i | 0;
 c = 0 - a | 0;
 j = f & c;
 if (j >>> 0 <= n >>> 0) {
  C = 0;
  u = D;
  return C | 0;
 }
 a = k[124] | 0;
 if (a | 0) {
  t = k[122] | 0;
  v = t + j | 0;
  if (v >>> 0 <= t >>> 0 | v >>> 0 > a >>> 0) {
   C = 0;
   u = D;
   return C | 0;
  }
 }
 b : do if (!(k[125] & 4)) {
  b = k[20] | 0;
  c : do if (!b) w = 172; else {
   e = 504;
   while (1) {
    a = k[e >> 2] | 0;
    if (a >>> 0 <= b >>> 0) {
     d = e + 4 | 0;
     if ((a + (k[d >> 2] | 0) | 0) >>> 0 > b >>> 0) break;
    }
    a = k[e + 8 >> 2] | 0;
    if (!a) {
     w = 172;
     break c;
    } else e = a;
   }
   a = f - g & c;
   if (a >>> 0 < 2147483647) {
    b = xa(a | 0) | 0;
    if ((b | 0) == ((k[e >> 2] | 0) + (k[d >> 2] | 0) | 0)) {
     if ((b | 0) != (-1 | 0)) {
      g = b;
      f = a;
      w = 190;
      break b;
     }
    } else {
     d = b;
     w = 180;
    }
   }
  } while (0);
  do if ((w | 0) == 172) {
   e = xa(0) | 0;
   if ((e | 0) != (-1 | 0)) {
    a = e;
    b = k[133] | 0;
    d = b + -1 | 0;
    a = ((d & a | 0) == 0 ? 0 : (d + a & 0 - b) - a | 0) + j | 0;
    b = k[122] | 0;
    d = a + b | 0;
    if (a >>> 0 > n >>> 0 & a >>> 0 < 2147483647) {
     c = k[124] | 0;
     if (c | 0) if (d >>> 0 <= b >>> 0 | d >>> 0 > c >>> 0) break;
     b = xa(a | 0) | 0;
     if ((b | 0) == (e | 0)) {
      g = e;
      f = a;
      w = 190;
      break b;
     } else {
      d = b;
      w = 180;
     }
    }
   }
  } while (0);
  d : do if ((w | 0) == 180) {
   c = 0 - a | 0;
   do if (h >>> 0 > a >>> 0 & (a >>> 0 < 2147483647 & (d | 0) != (-1 | 0))) {
    b = k[134] | 0;
    b = i - a + b & 0 - b;
    if (b >>> 0 < 2147483647) if ((xa(b | 0) | 0) == (-1 | 0)) {
     xa(c | 0) | 0;
     break d;
    } else {
     a = b + a | 0;
     break;
    }
   } while (0);
   if ((d | 0) != (-1 | 0)) {
    g = d;
    f = a;
    w = 190;
    break b;
   }
  } while (0);
  k[125] = k[125] | 4;
  w = 187;
 } else w = 187; while (0);
 if ((w | 0) == 187) if (j >>> 0 < 2147483647) {
  b = xa(j | 0) | 0;
  a = xa(0) | 0;
  if (b >>> 0 < a >>> 0 & ((b | 0) != (-1 | 0) & (a | 0) != (-1 | 0))) {
   a = a - b | 0;
   if (a >>> 0 > (n + 40 | 0) >>> 0) {
    g = b;
    f = a;
    w = 190;
   }
  }
 }
 if ((w | 0) == 190) {
  a = (k[122] | 0) + f | 0;
  k[122] = a;
  if (a >>> 0 > (k[123] | 0) >>> 0) k[123] = a;
  j = k[20] | 0;
  do if (!j) {
   C = k[18] | 0;
   if ((C | 0) == 0 | g >>> 0 < C >>> 0) k[18] = g;
   k[126] = g;
   k[127] = f;
   k[129] = 0;
   k[23] = k[132];
   k[22] = -1;
   a = 0;
   do {
    C = 96 + (a << 1 << 2) | 0;
    k[C + 12 >> 2] = C;
    k[C + 8 >> 2] = C;
    a = a + 1 | 0;
   } while ((a | 0) != 32);
   C = g + 8 | 0;
   C = (C & 7 | 0) == 0 ? 0 : 0 - C & 7;
   B = g + C | 0;
   C = f + -40 - C | 0;
   k[20] = B;
   k[17] = C;
   k[B + 4 >> 2] = C | 1;
   k[B + C + 4 >> 2] = 40;
   k[21] = k[136];
  } else {
   a = 504;
   do {
    b = k[a >> 2] | 0;
    d = a + 4 | 0;
    c = k[d >> 2] | 0;
    if ((g | 0) == (b + c | 0)) {
     w = 200;
     break;
    }
    a = k[a + 8 >> 2] | 0;
   } while ((a | 0) != 0);
   if ((w | 0) == 200) if (!(k[a + 12 >> 2] & 8)) if (j >>> 0 < g >>> 0 & j >>> 0 >= b >>> 0) {
    k[d >> 2] = c + f;
    C = j + 8 | 0;
    C = (C & 7 | 0) == 0 ? 0 : 0 - C & 7;
    B = j + C | 0;
    C = f - C + (k[17] | 0) | 0;
    k[20] = B;
    k[17] = C;
    k[B + 4 >> 2] = C | 1;
    k[B + C + 4 >> 2] = 40;
    k[21] = k[136];
    break;
   }
   a = k[18] | 0;
   if (g >>> 0 < a >>> 0) {
    k[18] = g;
    h = g;
   } else h = a;
   b = g + f | 0;
   a = 504;
   while (1) {
    if ((k[a >> 2] | 0) == (b | 0)) {
     w = 208;
     break;
    }
    a = k[a + 8 >> 2] | 0;
    if (!a) {
     b = 504;
     break;
    }
   }
   if ((w | 0) == 208) if (!(k[a + 12 >> 2] & 8)) {
    k[a >> 2] = g;
    m = a + 4 | 0;
    k[m >> 2] = (k[m >> 2] | 0) + f;
    m = g + 8 | 0;
    m = g + ((m & 7 | 0) == 0 ? 0 : 0 - m & 7) | 0;
    a = b + 8 | 0;
    a = b + ((a & 7 | 0) == 0 ? 0 : 0 - a & 7) | 0;
    l = m + n | 0;
    i = a - m - n | 0;
    k[m + 4 >> 2] = n | 3;
    do if ((a | 0) == (j | 0)) {
     C = (k[17] | 0) + i | 0;
     k[17] = C;
     k[20] = l;
     k[l + 4 >> 2] = C | 1;
    } else {
     if ((a | 0) == (k[19] | 0)) {
      C = (k[16] | 0) + i | 0;
      k[16] = C;
      k[19] = l;
      k[l + 4 >> 2] = C | 1;
      k[l + C >> 2] = C;
      break;
     }
     b = k[a + 4 >> 2] | 0;
     if ((b & 3 | 0) == 1) {
      g = b & -8;
      e = b >>> 3;
      e : do if (b >>> 0 < 256) {
       c = k[a + 8 >> 2] | 0;
       d = k[a + 12 >> 2] | 0;
       b = 96 + (e << 1 << 2) | 0;
       do if ((c | 0) != (b | 0)) {
        if (c >>> 0 < h >>> 0) ga();
        if ((k[c + 12 >> 2] | 0) == (a | 0)) break;
        ga();
       } while (0);
       if ((d | 0) == (c | 0)) {
        k[14] = k[14] & ~(1 << e);
        break;
       }
       do if ((d | 0) == (b | 0)) x = d + 8 | 0; else {
        if (d >>> 0 < h >>> 0) ga();
        b = d + 8 | 0;
        if ((k[b >> 2] | 0) == (a | 0)) {
         x = b;
         break;
        }
        ga();
       } while (0);
       k[c + 12 >> 2] = d;
       k[x >> 2] = c;
      } else {
       f = k[a + 24 >> 2] | 0;
       d = k[a + 12 >> 2] | 0;
       do if ((d | 0) == (a | 0)) {
        d = a + 16 | 0;
        c = d + 4 | 0;
        b = k[c >> 2] | 0;
        if (!b) {
         b = k[d >> 2] | 0;
         if (!b) {
          A = 0;
          break;
         } else e = d;
        } else e = c;
        while (1) {
         d = b + 20 | 0;
         c = k[d >> 2] | 0;
         if (c | 0) {
          b = c;
          e = d;
          continue;
         }
         d = b + 16 | 0;
         c = k[d >> 2] | 0;
         if (!c) break; else {
          b = c;
          e = d;
         }
        }
        if (e >>> 0 < h >>> 0) ga(); else {
         k[e >> 2] = 0;
         A = b;
         break;
        }
       } else {
        e = k[a + 8 >> 2] | 0;
        if (e >>> 0 < h >>> 0) ga();
        b = e + 12 | 0;
        if ((k[b >> 2] | 0) != (a | 0)) ga();
        c = d + 8 | 0;
        if ((k[c >> 2] | 0) == (a | 0)) {
         k[b >> 2] = d;
         k[c >> 2] = e;
         A = d;
         break;
        } else ga();
       } while (0);
       if (!f) break;
       b = k[a + 28 >> 2] | 0;
       c = 360 + (b << 2) | 0;
       do if ((a | 0) == (k[c >> 2] | 0)) {
        k[c >> 2] = A;
        if (A | 0) break;
        k[15] = k[15] & ~(1 << b);
        break e;
       } else {
        if (f >>> 0 < (k[18] | 0) >>> 0) ga();
        b = f + 16 | 0;
        if ((k[b >> 2] | 0) == (a | 0)) k[b >> 2] = A; else k[f + 20 >> 2] = A;
        if (!A) break e;
       } while (0);
       d = k[18] | 0;
       if (A >>> 0 < d >>> 0) ga();
       k[A + 24 >> 2] = f;
       c = a + 16 | 0;
       b = k[c >> 2] | 0;
       do if (b | 0) if (b >>> 0 < d >>> 0) ga(); else {
        k[A + 16 >> 2] = b;
        k[b + 24 >> 2] = A;
        break;
       } while (0);
       b = k[c + 4 >> 2] | 0;
       if (!b) break;
       if (b >>> 0 < (k[18] | 0) >>> 0) ga(); else {
        k[A + 20 >> 2] = b;
        k[b + 24 >> 2] = A;
        break;
       }
      } while (0);
      a = a + g | 0;
      e = g + i | 0;
     } else e = i;
     a = a + 4 | 0;
     k[a >> 2] = k[a >> 2] & -2;
     k[l + 4 >> 2] = e | 1;
     k[l + e >> 2] = e;
     a = e >>> 3;
     if (e >>> 0 < 256) {
      c = 96 + (a << 1 << 2) | 0;
      b = k[14] | 0;
      a = 1 << a;
      do if (!(b & a)) {
       k[14] = b | a;
       B = c + 8 | 0;
       C = c;
      } else {
       a = c + 8 | 0;
       b = k[a >> 2] | 0;
       if (b >>> 0 >= (k[18] | 0) >>> 0) {
        B = a;
        C = b;
        break;
       }
       ga();
      } while (0);
      k[B >> 2] = l;
      k[C + 12 >> 2] = l;
      k[l + 8 >> 2] = C;
      k[l + 12 >> 2] = c;
      break;
     }
     a = e >>> 8;
     do if (!a) b = 0; else {
      if (e >>> 0 > 16777215) {
       b = 31;
       break;
      }
      B = (a + 1048320 | 0) >>> 16 & 8;
      C = a << B;
      A = (C + 520192 | 0) >>> 16 & 4;
      C = C << A;
      b = (C + 245760 | 0) >>> 16 & 2;
      b = 14 - (A | B | b) + (C << b >>> 15) | 0;
      b = e >>> (b + 7 | 0) & 1 | b << 1;
     } while (0);
     d = 360 + (b << 2) | 0;
     k[l + 28 >> 2] = b;
     a = l + 16 | 0;
     k[a + 4 >> 2] = 0;
     k[a >> 2] = 0;
     a = k[15] | 0;
     c = 1 << b;
     if (!(a & c)) {
      k[15] = a | c;
      k[d >> 2] = l;
      k[l + 24 >> 2] = d;
      k[l + 12 >> 2] = l;
      k[l + 8 >> 2] = l;
      break;
     }
     b = e << ((b | 0) == 31 ? 0 : 25 - (b >>> 1) | 0);
     d = k[d >> 2] | 0;
     while (1) {
      if ((k[d + 4 >> 2] & -8 | 0) == (e | 0)) {
       w = 278;
       break;
      }
      c = d + 16 + (b >>> 31 << 2) | 0;
      a = k[c >> 2] | 0;
      if (!a) {
       w = 275;
       break;
      } else {
       b = b << 1;
       d = a;
      }
     }
     if ((w | 0) == 275) if (c >>> 0 < (k[18] | 0) >>> 0) ga(); else {
      k[c >> 2] = l;
      k[l + 24 >> 2] = d;
      k[l + 12 >> 2] = l;
      k[l + 8 >> 2] = l;
      break;
     } else if ((w | 0) == 278) {
      b = d + 8 | 0;
      a = k[b >> 2] | 0;
      C = k[18] | 0;
      if (a >>> 0 >= C >>> 0 & d >>> 0 >= C >>> 0) {
       k[a + 12 >> 2] = l;
       k[b >> 2] = l;
       k[l + 8 >> 2] = a;
       k[l + 12 >> 2] = d;
       k[l + 24 >> 2] = 0;
       break;
      } else ga();
     }
    } while (0);
    C = m + 8 | 0;
    u = D;
    return C | 0;
   } else b = 504;
   while (1) {
    a = k[b >> 2] | 0;
    if (a >>> 0 <= j >>> 0) {
     c = a + (k[b + 4 >> 2] | 0) | 0;
     if (c >>> 0 > j >>> 0) break;
    }
    b = k[b + 8 >> 2] | 0;
   }
   e = c + -47 | 0;
   b = e + 8 | 0;
   b = e + ((b & 7 | 0) == 0 ? 0 : 0 - b & 7) | 0;
   e = j + 16 | 0;
   b = b >>> 0 < e >>> 0 ? j : b;
   a = b + 8 | 0;
   d = g + 8 | 0;
   d = (d & 7 | 0) == 0 ? 0 : 0 - d & 7;
   C = g + d | 0;
   d = f + -40 - d | 0;
   k[20] = C;
   k[17] = d;
   k[C + 4 >> 2] = d | 1;
   k[C + d + 4 >> 2] = 40;
   k[21] = k[136];
   d = b + 4 | 0;
   k[d >> 2] = 27;
   k[a >> 2] = k[126];
   k[a + 4 >> 2] = k[127];
   k[a + 8 >> 2] = k[128];
   k[a + 12 >> 2] = k[129];
   k[126] = g;
   k[127] = f;
   k[129] = 0;
   k[128] = a;
   a = b + 24 | 0;
   do {
    a = a + 4 | 0;
    k[a >> 2] = 7;
   } while ((a + 4 | 0) >>> 0 < c >>> 0);
   if ((b | 0) != (j | 0)) {
    f = b - j | 0;
    k[d >> 2] = k[d >> 2] & -2;
    k[j + 4 >> 2] = f | 1;
    k[b >> 2] = f;
    a = f >>> 3;
    if (f >>> 0 < 256) {
     c = 96 + (a << 1 << 2) | 0;
     b = k[14] | 0;
     a = 1 << a;
     if (!(b & a)) {
      k[14] = b | a;
      y = c + 8 | 0;
      z = c;
     } else {
      a = c + 8 | 0;
      b = k[a >> 2] | 0;
      if (b >>> 0 < (k[18] | 0) >>> 0) ga(); else {
       y = a;
       z = b;
      }
     }
     k[y >> 2] = j;
     k[z + 12 >> 2] = j;
     k[j + 8 >> 2] = z;
     k[j + 12 >> 2] = c;
     break;
    }
    a = f >>> 8;
    if (!a) c = 0; else if (f >>> 0 > 16777215) c = 31; else {
     B = (a + 1048320 | 0) >>> 16 & 8;
     C = a << B;
     A = (C + 520192 | 0) >>> 16 & 4;
     C = C << A;
     c = (C + 245760 | 0) >>> 16 & 2;
     c = 14 - (A | B | c) + (C << c >>> 15) | 0;
     c = f >>> (c + 7 | 0) & 1 | c << 1;
    }
    d = 360 + (c << 2) | 0;
    k[j + 28 >> 2] = c;
    k[j + 20 >> 2] = 0;
    k[e >> 2] = 0;
    a = k[15] | 0;
    b = 1 << c;
    if (!(a & b)) {
     k[15] = a | b;
     k[d >> 2] = j;
     k[j + 24 >> 2] = d;
     k[j + 12 >> 2] = j;
     k[j + 8 >> 2] = j;
     break;
    }
    b = f << ((c | 0) == 31 ? 0 : 25 - (c >>> 1) | 0);
    d = k[d >> 2] | 0;
    while (1) {
     if ((k[d + 4 >> 2] & -8 | 0) == (f | 0)) {
      w = 304;
      break;
     }
     c = d + 16 + (b >>> 31 << 2) | 0;
     a = k[c >> 2] | 0;
     if (!a) {
      w = 301;
      break;
     } else {
      b = b << 1;
      d = a;
     }
    }
    if ((w | 0) == 301) if (c >>> 0 < (k[18] | 0) >>> 0) ga(); else {
     k[c >> 2] = j;
     k[j + 24 >> 2] = d;
     k[j + 12 >> 2] = j;
     k[j + 8 >> 2] = j;
     break;
    } else if ((w | 0) == 304) {
     b = d + 8 | 0;
     a = k[b >> 2] | 0;
     C = k[18] | 0;
     if (a >>> 0 >= C >>> 0 & d >>> 0 >= C >>> 0) {
      k[a + 12 >> 2] = j;
      k[b >> 2] = j;
      k[j + 8 >> 2] = a;
      k[j + 12 >> 2] = d;
      k[j + 24 >> 2] = 0;
      break;
     } else ga();
    }
   }
  } while (0);
  a = k[17] | 0;
  if (a >>> 0 > n >>> 0) {
   A = a - n | 0;
   k[17] = A;
   C = k[20] | 0;
   B = C + n | 0;
   k[20] = B;
   k[B + 4 >> 2] = A | 1;
   k[C + 4 >> 2] = n | 3;
   C = C + 8 | 0;
   u = D;
   return C | 0;
  }
 }
 C = ta() | 0;
 k[C >> 2] = 12;
 C = 0;
 u = D;
 return C | 0;
}

function va(a) {
 a = a | 0;
 var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
 if (!a) return;
 c = a + -8 | 0;
 g = k[18] | 0;
 if (c >>> 0 < g >>> 0) ga();
 a = k[a + -4 >> 2] | 0;
 b = a & 3;
 if ((b | 0) == 1) ga();
 d = a & -8;
 n = c + d | 0;
 do if (!(a & 1)) {
  a = k[c >> 2] | 0;
  if (!b) return;
  j = c + (0 - a) | 0;
  i = a + d | 0;
  if (j >>> 0 < g >>> 0) ga();
  if ((j | 0) == (k[19] | 0)) {
   b = n + 4 | 0;
   a = k[b >> 2] | 0;
   if ((a & 3 | 0) != 3) {
    q = j;
    e = i;
    break;
   }
   k[16] = i;
   k[b >> 2] = a & -2;
   k[j + 4 >> 2] = i | 1;
   k[j + i >> 2] = i;
   return;
  }
  d = a >>> 3;
  if (a >>> 0 < 256) {
   b = k[j + 8 >> 2] | 0;
   c = k[j + 12 >> 2] | 0;
   a = 96 + (d << 1 << 2) | 0;
   if ((b | 0) != (a | 0)) {
    if (b >>> 0 < g >>> 0) ga();
    if ((k[b + 12 >> 2] | 0) != (j | 0)) ga();
   }
   if ((c | 0) == (b | 0)) {
    k[14] = k[14] & ~(1 << d);
    q = j;
    e = i;
    break;
   }
   if ((c | 0) == (a | 0)) f = c + 8 | 0; else {
    if (c >>> 0 < g >>> 0) ga();
    a = c + 8 | 0;
    if ((k[a >> 2] | 0) == (j | 0)) f = a; else ga();
   }
   k[b + 12 >> 2] = c;
   k[f >> 2] = b;
   q = j;
   e = i;
   break;
  }
  f = k[j + 24 >> 2] | 0;
  c = k[j + 12 >> 2] | 0;
  do if ((c | 0) == (j | 0)) {
   c = j + 16 | 0;
   b = c + 4 | 0;
   a = k[b >> 2] | 0;
   if (!a) {
    a = k[c >> 2] | 0;
    if (!a) {
     h = 0;
     break;
    } else d = c;
   } else d = b;
   while (1) {
    c = a + 20 | 0;
    b = k[c >> 2] | 0;
    if (b | 0) {
     a = b;
     d = c;
     continue;
    }
    c = a + 16 | 0;
    b = k[c >> 2] | 0;
    if (!b) break; else {
     a = b;
     d = c;
    }
   }
   if (d >>> 0 < g >>> 0) ga(); else {
    k[d >> 2] = 0;
    h = a;
    break;
   }
  } else {
   d = k[j + 8 >> 2] | 0;
   if (d >>> 0 < g >>> 0) ga();
   a = d + 12 | 0;
   if ((k[a >> 2] | 0) != (j | 0)) ga();
   b = c + 8 | 0;
   if ((k[b >> 2] | 0) == (j | 0)) {
    k[a >> 2] = c;
    k[b >> 2] = d;
    h = c;
    break;
   } else ga();
  } while (0);
  if (!f) {
   q = j;
   e = i;
  } else {
   a = k[j + 28 >> 2] | 0;
   b = 360 + (a << 2) | 0;
   if ((j | 0) == (k[b >> 2] | 0)) {
    k[b >> 2] = h;
    if (!h) {
     k[15] = k[15] & ~(1 << a);
     q = j;
     e = i;
     break;
    }
   } else {
    if (f >>> 0 < (k[18] | 0) >>> 0) ga();
    a = f + 16 | 0;
    if ((k[a >> 2] | 0) == (j | 0)) k[a >> 2] = h; else k[f + 20 >> 2] = h;
    if (!h) {
     q = j;
     e = i;
     break;
    }
   }
   c = k[18] | 0;
   if (h >>> 0 < c >>> 0) ga();
   k[h + 24 >> 2] = f;
   b = j + 16 | 0;
   a = k[b >> 2] | 0;
   do if (a | 0) if (a >>> 0 < c >>> 0) ga(); else {
    k[h + 16 >> 2] = a;
    k[a + 24 >> 2] = h;
    break;
   } while (0);
   a = k[b + 4 >> 2] | 0;
   if (!a) {
    q = j;
    e = i;
   } else if (a >>> 0 < (k[18] | 0) >>> 0) ga(); else {
    k[h + 20 >> 2] = a;
    k[a + 24 >> 2] = h;
    q = j;
    e = i;
    break;
   }
  }
 } else {
  q = c;
  e = d;
 } while (0);
 if (q >>> 0 >= n >>> 0) ga();
 a = n + 4 | 0;
 b = k[a >> 2] | 0;
 if (!(b & 1)) ga();
 if (!(b & 2)) {
  if ((n | 0) == (k[20] | 0)) {
   p = (k[17] | 0) + e | 0;
   k[17] = p;
   k[20] = q;
   k[q + 4 >> 2] = p | 1;
   if ((q | 0) != (k[19] | 0)) return;
   k[19] = 0;
   k[16] = 0;
   return;
  }
  if ((n | 0) == (k[19] | 0)) {
   p = (k[16] | 0) + e | 0;
   k[16] = p;
   k[19] = q;
   k[q + 4 >> 2] = p | 1;
   k[q + p >> 2] = p;
   return;
  }
  e = (b & -8) + e | 0;
  d = b >>> 3;
  do if (b >>> 0 < 256) {
   b = k[n + 8 >> 2] | 0;
   c = k[n + 12 >> 2] | 0;
   a = 96 + (d << 1 << 2) | 0;
   if ((b | 0) != (a | 0)) {
    if (b >>> 0 < (k[18] | 0) >>> 0) ga();
    if ((k[b + 12 >> 2] | 0) != (n | 0)) ga();
   }
   if ((c | 0) == (b | 0)) {
    k[14] = k[14] & ~(1 << d);
    break;
   }
   if ((c | 0) == (a | 0)) l = c + 8 | 0; else {
    if (c >>> 0 < (k[18] | 0) >>> 0) ga();
    a = c + 8 | 0;
    if ((k[a >> 2] | 0) == (n | 0)) l = a; else ga();
   }
   k[b + 12 >> 2] = c;
   k[l >> 2] = b;
  } else {
   f = k[n + 24 >> 2] | 0;
   a = k[n + 12 >> 2] | 0;
   do if ((a | 0) == (n | 0)) {
    c = n + 16 | 0;
    b = c + 4 | 0;
    a = k[b >> 2] | 0;
    if (!a) {
     a = k[c >> 2] | 0;
     if (!a) {
      m = 0;
      break;
     } else d = c;
    } else d = b;
    while (1) {
     c = a + 20 | 0;
     b = k[c >> 2] | 0;
     if (b | 0) {
      a = b;
      d = c;
      continue;
     }
     c = a + 16 | 0;
     b = k[c >> 2] | 0;
     if (!b) break; else {
      a = b;
      d = c;
     }
    }
    if (d >>> 0 < (k[18] | 0) >>> 0) ga(); else {
     k[d >> 2] = 0;
     m = a;
     break;
    }
   } else {
    b = k[n + 8 >> 2] | 0;
    if (b >>> 0 < (k[18] | 0) >>> 0) ga();
    c = b + 12 | 0;
    if ((k[c >> 2] | 0) != (n | 0)) ga();
    d = a + 8 | 0;
    if ((k[d >> 2] | 0) == (n | 0)) {
     k[c >> 2] = a;
     k[d >> 2] = b;
     m = a;
     break;
    } else ga();
   } while (0);
   if (f | 0) {
    a = k[n + 28 >> 2] | 0;
    b = 360 + (a << 2) | 0;
    if ((n | 0) == (k[b >> 2] | 0)) {
     k[b >> 2] = m;
     if (!m) {
      k[15] = k[15] & ~(1 << a);
      break;
     }
    } else {
     if (f >>> 0 < (k[18] | 0) >>> 0) ga();
     a = f + 16 | 0;
     if ((k[a >> 2] | 0) == (n | 0)) k[a >> 2] = m; else k[f + 20 >> 2] = m;
     if (!m) break;
    }
    c = k[18] | 0;
    if (m >>> 0 < c >>> 0) ga();
    k[m + 24 >> 2] = f;
    b = n + 16 | 0;
    a = k[b >> 2] | 0;
    do if (a | 0) if (a >>> 0 < c >>> 0) ga(); else {
     k[m + 16 >> 2] = a;
     k[a + 24 >> 2] = m;
     break;
    } while (0);
    a = k[b + 4 >> 2] | 0;
    if (a | 0) if (a >>> 0 < (k[18] | 0) >>> 0) ga(); else {
     k[m + 20 >> 2] = a;
     k[a + 24 >> 2] = m;
     break;
    }
   }
  } while (0);
  k[q + 4 >> 2] = e | 1;
  k[q + e >> 2] = e;
  if ((q | 0) == (k[19] | 0)) {
   k[16] = e;
   return;
  }
 } else {
  k[a >> 2] = b & -2;
  k[q + 4 >> 2] = e | 1;
  k[q + e >> 2] = e;
 }
 a = e >>> 3;
 if (e >>> 0 < 256) {
  c = 96 + (a << 1 << 2) | 0;
  b = k[14] | 0;
  a = 1 << a;
  if (!(b & a)) {
   k[14] = b | a;
   o = c + 8 | 0;
   p = c;
  } else {
   a = c + 8 | 0;
   b = k[a >> 2] | 0;
   if (b >>> 0 < (k[18] | 0) >>> 0) ga(); else {
    o = a;
    p = b;
   }
  }
  k[o >> 2] = q;
  k[p + 12 >> 2] = q;
  k[q + 8 >> 2] = p;
  k[q + 12 >> 2] = c;
  return;
 }
 a = e >>> 8;
 if (!a) b = 0; else if (e >>> 0 > 16777215) b = 31; else {
  o = (a + 1048320 | 0) >>> 16 & 8;
  p = a << o;
  n = (p + 520192 | 0) >>> 16 & 4;
  p = p << n;
  b = (p + 245760 | 0) >>> 16 & 2;
  b = 14 - (n | o | b) + (p << b >>> 15) | 0;
  b = e >>> (b + 7 | 0) & 1 | b << 1;
 }
 d = 360 + (b << 2) | 0;
 k[q + 28 >> 2] = b;
 k[q + 20 >> 2] = 0;
 k[q + 16 >> 2] = 0;
 a = k[15] | 0;
 c = 1 << b;
 do if (!(a & c)) {
  k[15] = a | c;
  k[d >> 2] = q;
  k[q + 24 >> 2] = d;
  k[q + 12 >> 2] = q;
  k[q + 8 >> 2] = q;
 } else {
  b = e << ((b | 0) == 31 ? 0 : 25 - (b >>> 1) | 0);
  d = k[d >> 2] | 0;
  while (1) {
   if ((k[d + 4 >> 2] & -8 | 0) == (e | 0)) {
    a = 130;
    break;
   }
   c = d + 16 + (b >>> 31 << 2) | 0;
   a = k[c >> 2] | 0;
   if (!a) {
    a = 127;
    break;
   } else {
    b = b << 1;
    d = a;
   }
  }
  if ((a | 0) == 127) if (c >>> 0 < (k[18] | 0) >>> 0) ga(); else {
   k[c >> 2] = q;
   k[q + 24 >> 2] = d;
   k[q + 12 >> 2] = q;
   k[q + 8 >> 2] = q;
   break;
  } else if ((a | 0) == 130) {
   b = d + 8 | 0;
   a = k[b >> 2] | 0;
   p = k[18] | 0;
   if (a >>> 0 >= p >>> 0 & d >>> 0 >= p >>> 0) {
    k[a + 12 >> 2] = q;
    k[b >> 2] = q;
    k[q + 8 >> 2] = a;
    k[q + 12 >> 2] = d;
    k[q + 24 >> 2] = 0;
    break;
   } else ga();
  }
 } while (0);
 q = (k[22] | 0) + -1 | 0;
 k[22] = q;
 if (!q) a = 512; else return;
 while (1) {
  a = k[a >> 2] | 0;
  if (!a) break; else a = a + 8 | 0;
 }
 k[22] = -1;
 return;
}

function Aa(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0;
 if ((c | 0) >= 8192) return ha(a | 0, b | 0, c | 0) | 0;
 f = a | 0;
 e = a + c | 0;
 if ((a & 3) == (b & 3)) {
  while (a & 3) {
   if (!c) return f | 0;
   i[a >> 0] = i[b >> 0] | 0;
   a = a + 1 | 0;
   b = b + 1 | 0;
   c = c - 1 | 0;
  }
  c = e & -4 | 0;
  d = c - 64 | 0;
  while ((a | 0) <= (d | 0)) {
   k[a >> 2] = k[b >> 2];
   k[a + 4 >> 2] = k[b + 4 >> 2];
   k[a + 8 >> 2] = k[b + 8 >> 2];
   k[a + 12 >> 2] = k[b + 12 >> 2];
   k[a + 16 >> 2] = k[b + 16 >> 2];
   k[a + 20 >> 2] = k[b + 20 >> 2];
   k[a + 24 >> 2] = k[b + 24 >> 2];
   k[a + 28 >> 2] = k[b + 28 >> 2];
   k[a + 32 >> 2] = k[b + 32 >> 2];
   k[a + 36 >> 2] = k[b + 36 >> 2];
   k[a + 40 >> 2] = k[b + 40 >> 2];
   k[a + 44 >> 2] = k[b + 44 >> 2];
   k[a + 48 >> 2] = k[b + 48 >> 2];
   k[a + 52 >> 2] = k[b + 52 >> 2];
   k[a + 56 >> 2] = k[b + 56 >> 2];
   k[a + 60 >> 2] = k[b + 60 >> 2];
   a = a + 64 | 0;
   b = b + 64 | 0;
  }
  while ((a | 0) < (c | 0)) {
   k[a >> 2] = k[b >> 2];
   a = a + 4 | 0;
   b = b + 4 | 0;
  }
 } else {
  c = e - 4 | 0;
  while ((a | 0) < (c | 0)) {
   i[a >> 0] = i[b >> 0] | 0;
   i[a + 1 >> 0] = i[b + 1 >> 0] | 0;
   i[a + 2 >> 0] = i[b + 2 >> 0] | 0;
   i[a + 3 >> 0] = i[b + 3 >> 0] | 0;
   a = a + 4 | 0;
   b = b + 4 | 0;
  }
 }
 while ((a | 0) < (e | 0)) {
  i[a >> 0] = i[b >> 0] | 0;
  a = a + 1 | 0;
  b = b + 1 | 0;
 }
 return f | 0;
}

function sa(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 var d = 0.0, e = 0, f = 0, g = 0.0;
 if ((a | 0) < 1 | (c | 0) < 1) {
  d = 0.0;
  return +d;
 }
 if ((c | 0) != 1) {
  f = _(c, a) | 0;
  if ((f | 0) > 0) {
   e = 0;
   d = 0.0;
  } else {
   d = 0.0;
   return +d;
  }
  do {
   d = d + +N(+(+p[b + (e << 3) >> 3]));
   e = e + c | 0;
  } while ((e | 0) < (f | 0));
  return +d;
 }
 f = (a | 0) % 6 | 0;
 if ((f | 0) > 0) {
  e = 0;
  d = 0.0;
  do {
   d = d + +N(+(+p[b + (e << 3) >> 3]));
   e = e + 1 | 0;
  } while ((e | 0) != (f | 0));
 } else d = 0.0;
 if ((a | 0) > 5 & (f | 0) < (a | 0)) e = f; else return +d;
 do {
  g = +N(+(+p[b + (e << 3) >> 3]));
  g = g + +N(+(+p[b + (e + 1 << 3) >> 3]));
  g = g + +N(+(+p[b + (e + 2 << 3) >> 3]));
  g = g + +N(+(+p[b + (e + 3 << 3) >> 3]));
  g = g + +N(+(+p[b + (e + 4 << 3) >> 3]));
  d = d + (g + +N(+(+p[b + (e + 5 << 3) >> 3])));
  e = e + 6 | 0;
 } while ((e | 0) < (a | 0));
 return +d;
}

function za(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 var d = 0, e = 0, f = 0, g = 0;
 f = a + c | 0;
 b = b & 255;
 if ((c | 0) >= 67) {
  while (a & 3) {
   i[a >> 0] = b;
   a = a + 1 | 0;
  }
  d = f & -4 | 0;
  e = d - 64 | 0;
  g = b | b << 8 | b << 16 | b << 24;
  while ((a | 0) <= (e | 0)) {
   k[a >> 2] = g;
   k[a + 4 >> 2] = g;
   k[a + 8 >> 2] = g;
   k[a + 12 >> 2] = g;
   k[a + 16 >> 2] = g;
   k[a + 20 >> 2] = g;
   k[a + 24 >> 2] = g;
   k[a + 28 >> 2] = g;
   k[a + 32 >> 2] = g;
   k[a + 36 >> 2] = g;
   k[a + 40 >> 2] = g;
   k[a + 44 >> 2] = g;
   k[a + 48 >> 2] = g;
   k[a + 52 >> 2] = g;
   k[a + 56 >> 2] = g;
   k[a + 60 >> 2] = g;
   a = a + 64 | 0;
  }
  while ((a | 0) < (d | 0)) {
   k[a >> 2] = g;
   a = a + 4 | 0;
  }
 }
 while ((a | 0) < (f | 0)) {
  i[a >> 0] = b;
  a = a + 1 | 0;
 }
 return f - c | 0;
}

function wa() {}
function xa(a) {
 a = a | 0;
 var b = 0, c = 0;
 c = a + 15 & -16 | 0;
 b = k[r >> 2] | 0;
 a = b + c | 0;
 if ((c | 0) > 0 & (a | 0) < (b | 0) | (a | 0) < 0) {
  ia(12);
  return -1;
 }
 k[r >> 2] = a;
 if ((a | 0) > (fa() | 0)) if (!(ea() | 0)) {
  ia(12);
  k[r >> 2] = b;
  return -1;
 }
 return b | 0;
}

function ta() {
 var a = 0;
 if (!(k[2] | 0)) a = 52; else {
  a = (ya() | 0) + 64 | 0;
  a = k[a >> 2] | 0;
 }
 return a | 0;
}
function la(a) {
 a = a | 0;
 var b = 0;
 b = u;
 u = u + a | 0;
 u = u + 15 & -16;
 return b | 0;
}

function pa(a, b) {
 a = a | 0;
 b = b | 0;
 if (!w) {
  w = a;
  x = b;
 }
}

function oa(a, b) {
 a = a | 0;
 b = b | 0;
 u = a;
 v = b;
}

function qa(a) {
 a = a | 0;
 L = a;
}

function na(a) {
 a = a | 0;
 u = a;
}

function ra() {
 return L | 0;
}

function ma() {
 return u | 0;
}

function ya() {
 return 0;
}

// EMSCRIPTEN_END_FUNCS

 return {
  _c_dasum: sa,
  _free: va,
  _pthread_self: ya,
  _memset: za,
  _malloc: ua,
  _memcpy: Aa,
  _sbrk: xa,
  runPostSets: wa,
  _emscripten_replace_memory: ka,
  stackAlloc: la,
  stackSave: ma,
  stackRestore: na,
  establishStackSpace: oa,
  setTempRet0: qa,
  getTempRet0: ra,
  setThrew: pa,
  stackAlloc: la,
  stackSave: ma,
  stackRestore: na,
  establishStackSpace: oa,
  setThrew: pa,
  setTempRet0: qa,
  getTempRet0: ra
 };
})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _c_dasum = Module["_c_dasum"] = asm["_c_dasum"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var stackSave = Module["stackSave"] = asm["stackSave"];
Runtime.stackAlloc = Module["stackAlloc"];
Runtime.stackSave = Module["stackSave"];
Runtime.stackRestore = Module["stackRestore"];
Runtime.establishStackSpace = Module["establishStackSpace"];
Runtime.setTempRet0 = Module["setTempRet0"];
Runtime.getTempRet0 = Module["getTempRet0"];
Module["asm"] = asm;
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 try {
  var ret = Module["_main"](argc, argv, 0);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (Module["_main"] && shouldRunNow) Module["callMain"](args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"]) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 if (ENVIRONMENT_IS_NODE) {
  process["exit"](status);
 } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
  quit(status);
 }
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
 if (what !== undefined) {
  Module.print(what);
  Module.printErr(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 var output = "abort(" + what + ") at " + stackTrace() + extra;
 if (abortDecorators) {
  abortDecorators.forEach((function(decorator) {
   output = decorator(output, what);
  }));
 }
 throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
run();





  return Module;
};
