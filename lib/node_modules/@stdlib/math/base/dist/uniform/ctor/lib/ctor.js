/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/uniform/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/uniform/kurtosis' );
var mean = require( '@stdlib/math/base/dist/uniform/mean' );
var median = require( '@stdlib/math/base/dist/uniform/median' );
var skewness = require( '@stdlib/math/base/dist/uniform/skewness' );
var variance = require( '@stdlib/math/base/dist/uniform/variance' );
var cdf = require( '@stdlib/math/base/dist/uniform/cdf' );
var logcdf = require( '@stdlib/math/base/dist/uniform/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/uniform/logpdf' );
var mgf = require( '@stdlib/math/base/dist/uniform/mgf' );
var pdf = require( '@stdlib/math/base/dist/uniform/pdf' );
var quantile = require( '@stdlib/math/base/dist/uniform/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function uniformCDF( x ) {
	return cdf( x, this.a, this.b );
} // end FUNCTION uniformCDF()

/**
* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated logCDF
*/
function uniformLogCDF( x ) {
	return logcdf( x, this.a, this.b );
} // end FUNCTION uniformLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function uniformLogPDF( x ) {
	return logpdf( x, this.a, this.b );
} // end FUNCTION uniformLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function uniformMGF( t ) {
	return mgf( t, this.a, this.b );
} // end FUNCTION  uniformMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function uniformPDF( x ) {
	return pdf( x, this.a, this.b );
} // end FUNCTION uniformPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function uniformQuantile( p ) {
	return quantile( p, this.a, this.b );
} // end FUNCTION uniformQuantile()


// MAIN //

/**
* Uniform distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be smaller than `b`
* @returns {Uniform} distribution instance
*
* @example
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns ~0.705
*
* var mu = uniform.mean;
* // returns 0.5
*/
function Uniform() {
	var a;
	var b;
	if ( !(this instanceof Uniform) ) {
		if ( arguments.length === 0 ) {
			return new Uniform();
		}
		return new Uniform( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid input arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a >= value ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
} // end FUNCTION Uniform()

/**
* Uniform distribution differential entropy.
*
* @memberof Uniform.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.entropy;
* // returns ~1.838
*/
Object.defineProperty( Uniform.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b );
	}
});

/**
* Uniform distribution excess kurtosis.
*
* @memberof Uniform.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.kurtosis;
* // returns -1.5
*/
Object.defineProperty( Uniform.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Uniform distribution expected value.
*
* @memberof Uniform.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.mean;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Uniform distribution median.
*
* @memberof Uniform.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.median;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b );
	}
});

/**
* Uniform distribution skewness.
*
* @memberof Uniform.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.skewness;
* // returns 0.0
*/
Object.defineProperty( Uniform.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Uniform distribution variance.
*
* @memberof Uniform.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.variance;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Uniform.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.cdf( 3.0 );
* // returns ~0.5
*/
setReadOnly( Uniform.prototype, 'cdf', uniformCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Uniform.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logcdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Uniform.prototype, 'logcdf', uniformLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Uniform.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logpdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Uniform.prototype, 'logpdf', uniformLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Uniform.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Uniform.prototype, 'mgf', uniformMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Uniform.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.pdf( 2.4 );
* // returns ~0.398
*/
setReadOnly( Uniform.prototype, 'pdf', uniformPDF );

/**
* Evaluates the quantile function.
*
* @memberof Uniform.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Uniform.prototype, 'quantile', uniformQuantile );


// EXPORTS //

module.exports = Uniform;
