'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for an exponential distribution with rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.609
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
* @example
* var y = quantile( 0.5, 0.1 );
* // returns ~6.931
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative rate parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, lambda ) {
	if ( lambda < 0.0 || isnan( lambda ) || lambda === PINF ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return -ln( 1.0 - p ) / lambda;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
