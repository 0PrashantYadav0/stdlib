'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0 );
* var y = mgf( 3.0 );
* // returns 4.0
*
* y = mgf( 0.5 );
* // returns ~1.143
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an exponential distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		if ( t >= lambda ) {
			return NaN;
		}
		return lambda / ( lambda - t );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
