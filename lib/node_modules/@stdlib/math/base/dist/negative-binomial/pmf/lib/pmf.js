'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var ibeta_derivative = require( './ibeta_derivative.js' );


// PDF //

/**
* Evaluates the probability mass function (PMF) for a negative binomial distribution with number of failures until experiment is stopped `r` and success probability `p`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
* @example
* var y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
* @example
* var y = pmf( 5.0, 10.0, 0.4 )
* // returns ~0.016
* @example
* var y = pmf( 0.0, 10.0, 0.9 )
* // returns ~0.349
* @example
* var y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
* @example
* var y = pmf( 5.0, 7.4, 0.4 )
* // returns ~0.051
* @example
* var y = cdf( 2.0, 0.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
* @example
* var y = cdf( NaN, 20.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, 20.0, NaN );
* // returns NaN
*/
function pmf( x, r, p ) {
	if (
		isnan( x ) ||
		isnan( r ) ||
		isnan( p )
	) {
		return NaN;
	}
	if (
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( !isNonNegativeInteger( x ) ) {
		return 0.0;
	}
	return ( p / ( r + x ) ) * ibeta_derivative( p, r, x + 1.0 );
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;
