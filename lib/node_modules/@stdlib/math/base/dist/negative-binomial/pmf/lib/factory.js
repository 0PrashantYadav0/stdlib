'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var ibetaDerivative = require( './ibeta_derivative.js' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a negative binomial distribution with number of failures until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.027
*
* y = pmf( 5.0 );
* // returns ~0.061
*/
function factory( r, p ) {
	if ( isnan( r ) || isnan( p ) ) {
		return nan;
	}
	if ( r <= 0.0 || p <= 0.0 || p > 1.0 ) {
		return nan;
	}
	/**
	* Evaluates the probability mass function (PMF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	return function pmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( !isNonNegativeInteger( x ) ) {
			return 0.0;
		}
		return ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );
	}; // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
