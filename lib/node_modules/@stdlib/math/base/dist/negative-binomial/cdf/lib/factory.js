'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a negative binomial distribution with number of failures until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} CDF
*/
function factory( r, p ) {
	if ( isnan( r ) || isnan( p ) ) {
		return nan;
	}
	if ( r <= 0.0 || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	/**
	* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	return function cdf( x ) {
		var xint;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		// Ensure left-continuity
		xint = floor( x + 1e-7 );
		return betainc( p, r, xint + 1.0 );
	}; // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
