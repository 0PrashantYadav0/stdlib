'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var getMean = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof getMean, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var mean = getMean( NaN, 0.5 );
	t.equal( isnan( mean ), true, 'returns NaN' );

	mean = getMean( 10, NaN );
	t.equal( isnan( mean ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a `r` which is not a positive number, the function returns `NaN`', function test( t ) {
	var mean;

	mean = getMean( -2, 0.5 );
	t.equal( isnan( mean ), true, 'returns NaN' );

	mean = getMean( -1, 0.5 );
	t.equal( isnan( mean ), true, 'returns NaN' );

	mean = getMean( NINF, 0.5 );
	t.equal( isnan( mean ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a success probability `p` outside of `[0,1]`, the function returns `NaN`', function test( t ) {
	var mean;

	mean = getMean( 20, -1.0 );
	t.equal( isnan( mean ), true, 'returns NaN' );

	mean = getMean( 20, 1.5 );
	t.equal( isnan( mean ), true, 'returns NaN' );

	mean = getMean( 20, NINF );
	t.equal( isnan( mean ), true, 'returns NaN' );

	mean = getMean( 20, PINF );
	t.equal( isnan( mean ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns the expected value for a negative binomial distribution with the given parameters', function test( t ) {
	var mean = getMean( 100, 0.2 );
	t.equal( mean, 400, 'returns 100*(0.8/0.2)' );

	mean = getMean( 50, 0.5 );
	t.equal( mean, 50, 'returns 50*(0.5/0.5)' );

	t.end();
});
