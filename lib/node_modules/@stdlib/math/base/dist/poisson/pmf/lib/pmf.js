'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// PMF //

/**
* Evaluates the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
* @example
* var y = pmf( 1.0, 3.0 );
* // returns ~0.149
* @example
* var y = pmf( -1.0, 2.0 );
* // returns 0.0
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
* @example
* // Invalid mean parameter:
* var y = pmf( 2.0, -0.5 );
* // returns NaN
*/
function pmf( x, lambda ) {
	var lnl;
	if ( isnan( x ) || isnan( lambda ) ) {
		return NaN;
	}
	if ( lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return x === 0.0 ? 1.0 : 0.0;
	}
	if ( isNonNegativeInteger( x ) && x !== PINF ) {
		lnl = x * ln( lambda ) - lambda - factorialln( x );
		return exp( lnl );
	}
	return 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;
