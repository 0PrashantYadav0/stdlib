#!/usr/bin/env julia

import Distributions
import JSON

"""
	gen( t, lambda, name )

Generate fixture data and write to file.

# Arguments

* `x`: input value
* `lambda`: mean parameter
* `name::AbstractString`: output filename

# Examples

``` julia
julia> t = linspace( -0.5, 0.5, 2001 );
julia> lambda = rand( 2001 );
julia> gen( t, lambda, \"./data.json\" );
```
"""
function gen( x, lambda, name )
	z = Array( Float64, length(x) );
	for i in eachindex(x)
		z[ i ] = mgf( Poisson( lambda[i] ), x[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("x", x),
		("lambda",lambda),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Small lambdas:
lambda = rand( 1000 ) * 1.0;
t = rand( 1000 ) * 1.0;
gen( t, lambda, "small.json" );

# Medium lambdas:
lambda = rand( 1000 ) * 3.0;
t = rand( 1000 ) * 3.0;
gen( t, lambda, "medium.json" );

# Large lambdas:
lambda = rand( 1000 ) * 10.0;
t = rand( 1000 ) * 3.0;
gen( t, lambda, "large.json" );
