'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Poisson distributio with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 5.0 );
* var y = cdf( 3.0 );
* // returns ~0.265
*
* y = cdf( 8.0 );
* // returns ~0.932
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return nan;
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	/**
	* Evaluates the cumulative distribution function (CDF) for a Poisson distribution.
	*
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	return function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return gammainc( lambda, floor( x ) + 1.0, true, true );
	}; // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
