'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// FUNCTIONS //

var max = Math.max;


// FACTORY //

/**
* Returns a function for evaluating the quantile function for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns 0
*
* y = quantile( 0.8 );
* // returns 3
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	/**
	* Evaluates the quantile function for a geometric distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	return function quantile( r ) {
		if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 1.0 ) {
			return PINF;
		}
		return max( 0.0, ceil( ln( 1.0 - r ) / log1p( -p ) - ( 1.0 + 1e-12 ) ) );
	}; // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
