'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var mean = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof mean, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for `p`, the function returns `NaN`', function test( t ) {
	var v = mean( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a success probability `p` outside of `[0,1]`, the function returns `NaN`', function test( t ) {
	var v;

	v = mean( -1.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( 1.5 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( PINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns the expected value for a geometric distribution with the given success probability `p`', function test( t ) {
	var v = mean( 0.5 );
	t.equal( v, 1, 'returns 0.5/0.5' );

	v = mean( 0.1 );
	t.equal( v, 9, 'returns 0.9/0.1' );

	t.end();
});
