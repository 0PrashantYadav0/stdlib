'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var FOURTH_PI = require( '@stdlib/math/constants/float64-fourth-pi' );


// VARIABLES //

var LN_FOURTH_PI = ln( FOURTH_PI );


// MAIN //

/**
* Returns the differential entropy of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.838
*
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~1.838
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return LN_FOURTH_PI + ln( b - a );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;
