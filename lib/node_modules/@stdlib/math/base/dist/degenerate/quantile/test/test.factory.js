'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var factory = require( './../lib/factory.js' );

// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var quantile = factory( 0.0 );
	t.equal( typeof quantile, 'function', 'returns a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the created function returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0 );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN );
	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function returns `NaN` for `p` outside the interval `[0,1]`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 2.0 );

	y = quantile( 1.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( -0.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function returns `mu` for `p` on the interval `[0,1]`', function test( t ) {
	var quantile;
	var mu;
	var y;

	mu = 2.0;
	quantile = factory( mu );

	y = quantile( 0.3 );
	t.equal( y, mu, 'returns `mu`' );

	y = quantile( 0.1 );
	t.equal( y, mu, 'returns `mu`' );

	t.end();
});
