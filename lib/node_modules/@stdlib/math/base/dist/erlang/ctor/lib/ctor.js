/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer').isPrimitive;
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/erlang/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/erlang/kurtosis' );
var mean = require( '@stdlib/math/base/dist/erlang/mean' );
var mode = require( '@stdlib/math/base/dist/erlang/mode' );
var skewness = require( '@stdlib/math/base/dist/erlang/skewness' );
var variance = require( '@stdlib/math/base/dist/erlang/variance' );
var cdf = require( '@stdlib/math/base/dist/erlang/cdf' );
var mgf = require( '@stdlib/math/base/dist/erlang/mgf' );
var pdf = require( '@stdlib/math/base/dist/erlang/pdf' );
var quantile = require( '@stdlib/math/base/dist/erlang/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function erlangCDF( x ) {
	return cdf( x, this.k, this.lambda );
} // end FUNCTION erlangCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function erlangMGF( t ) {
	return mgf( t, this.k, this.lambda );
} // end FUNCTION erlangMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function erlangPDF( x ) {
	return pdf( x, this.k, this.lambda );
} // end FUNCTION erlangPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function erlangQuantile( p ) {
	return quantile( p, this.k, this.lambda );
} // end FUNCTION erlangQuantile()


// MAIN //

/**
* Erlang distribution constructor.
*
* @constructor
* @param {PositiveInteger} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Erlang} distribution instance
*
* @example
* var erlang = new Erlang( 1.0, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var mode = erlang.mode;
* // returns 0.0
*/
function Erlang() {
	var k;
	var lambda;
	if ( !(this instanceof Erlang) ) {
		if ( arguments.length === 0 ) {
			return new Erlang();
		}
		return new Erlang( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !isPositiveInteger( k ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `k` must be a positive integer. Value: `' + k + '`' );
		}
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositiveInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
} // end FUNCTION Erlang()

/**
* Erlang distribution differential entropy.
*
* @memberof Erlang.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.entropy;
* // returns ~2.531
*/
Object.defineProperty( Erlang.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k, this.lambda );
	}
});

/**
* Erlang distribution excess kurtosis.
*
* @memberof Erlang.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.kurtosis;
* // returns ~-0.252
*/
Object.defineProperty( Erlang.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k, this.lambda );
	}
});

/**
* Erlang distribution expected value.
*
* @memberof Erlang.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mean;
* // returns ~10.877
*/
Object.defineProperty( Erlang.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k, this.lambda );
	}
});

/**
* Erlang distribution mode.
*
* @memberof Erlang.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mode;
* // returns ~11.167
*/
Object.defineProperty( Erlang.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k, this.lambda );
	}
});

/**
* Erlang distribution skewness.
*
* @memberof Erlang.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.skewness;
* // returns ~-0.087
*/
Object.defineProperty( Erlang.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.lambda );
	}
});

/**
* Erlang distribution variance.
*
* @memberof Erlang.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.variance;
* // returns ~9.311
*/
Object.defineProperty( Erlang.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k, this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Erlang.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.cdf( 0.5 );
* // returns ~0.016
*/
setReadOnly( Erlang.prototype, 'cdf', erlangCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Erlang.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.mgf( 0.5 );
* // returns ~9.878
*/
setReadOnly( Erlang.prototype, 'mgf', erlangMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Erlang.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.pdf( 2.0 );
* // returns ~0.195
*/
setReadOnly( Erlang.prototype, 'pdf', erlangPDF );

/**
* Evaluates the quantile function.
*
* @memberof Erlang.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.quantile( 0.5 );
* // returns ~3.33
*/
setReadOnly( Erlang.prototype, 'quantile', erlangQuantile );


// EXPORTS //

module.exports = Erlang;
