'use strict';

// MODULES //

var betaFun = require( '@stdlib/math/base/special/beta' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.522
*
* y = mgf( 0.3 );
* // returns ~1.168
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a beta distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		var summand;
		var denom;
		var sum;
		var c;
		var k;

		if ( isnan( t ) ) {
			return NaN;
		}
		denom = betaFun( alpha, beta );
		sum = 1.0;
		c = 1.0;
		k = 1;
		do {
			c *= t / k;
			summand = ( betaFun( alpha + k, beta ) / denom ) * c;
			sum += summand;
			k += 1;
		} while ( abs( summand / sum ) >= EPS );
		return sum;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
