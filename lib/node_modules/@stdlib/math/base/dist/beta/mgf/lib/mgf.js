'use strict';

// MODULES //

var betaFcn = require( '@stdlib/math/base/special/beta' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/math/constants/float64-eps' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = mgf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.5, 0.0 );
* // returns NaN
*/
function mgf( t, alpha, beta ) {
	var summand;
	var denom;
	var sum;
	var c;
	var k;

	if (
		isnan( t ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	denom = betaFcn( alpha, beta );
	sum = 1.0;
	c = 1.0;
	k = 1;
	do {
		c *= t / k;
		summand = ( betaFcn( alpha+k, beta ) / denom ) * c;
		sum += summand;
		k += 1;
	} while ( abs( summand / sum ) >= EPS );
	return sum;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;
