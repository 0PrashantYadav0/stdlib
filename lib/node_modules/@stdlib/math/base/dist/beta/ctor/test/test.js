'use strict';

// MODULES //

var tape = require( 'tape' );
var isFunction = require( '@stdlib/assert/is-function' );
var betaQuantile = require( '@stdlib/math/base/dist/beta/quantile' );
var betaLogPDF = require( '@stdlib/math/base/dist/beta/logpdf' );
var betaCDF = require( '@stdlib/math/base/dist/beta/cdf' );
var betaMGF = require( '@stdlib/math/base/dist/beta/mgf' );
var betaPDF = require( '@stdlib/math/base/dist/beta/pdf' );
var kurtosis = require( '@stdlib/math/base/dist/beta/kurtosis' );
var skewness = require( '@stdlib/math/base/dist/beta/skewness' );
var variance = require( '@stdlib/math/base/dist/beta/variance' );
var entropy = require( '@stdlib/math/base/dist/beta/entropy' );
var median = require( '@stdlib/math/base/dist/beta/median' );
var mode = require( '@stdlib/math/base/dist/beta/mode' );
var mean = require( '@stdlib/math/base/dist/beta/mean' );
var hasProp = require( '@stdlib/assert/has-property' );
var Beta = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof Beta, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of two', function test( t ) {
	t.equal( Beta.length, 2, 'arity is two' );
	t.end();
});

tape( 'the function throws an error if the `alpha` argument is not a positive number', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5.0,
		0.0,
		[ 1.2, 0.8, 3, 4 ],
		true,
		undefined,
		null,
		NaN,
		function noop() {},
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			// eslint-disable-next-line no-new
			new Beta( value, 2.0 );
		};
	}
});

tape( 'the function throws an error if the `beta` argument is not a positive number', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5.0,
		0.0,
		[ 1.2, 0.8, 3, 4 ],
		true,
		undefined,
		null,
		NaN,
		function noop() {},
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			// eslint-disable-next-line no-new
			new Beta( 2.0, value );
		};
	}
});

tape( 'the function returns a new distribution instance (default parameters)', function test( t ) {
	var dist = new Beta();
	t.strictEqual( dist instanceof Beta, true, 'is an instance of Beta');
	t.end();
});

tape( 'the function returns a new distribution instance (custom parameters)', function test( t ) {
	var dist = new Beta( 2.0, 4.0 );
	t.strictEqual( dist instanceof Beta, true, 'is an instance of Beta');
	t.end();
});

tape( 'the function can be invoked without the new operator', function test( t ) {
	// eslint-disable-next-line new-cap
	var dist = Beta();
	t.strictEqual( dist instanceof Beta, true, 'is an instance of Beta');

	// eslint-disable-next-line new-cap
	dist = Beta( 2.0, 4.0 );
	t.strictEqual( dist instanceof Beta, true, 'is an instance of Beta');

	t.end();
});

tape( 'the created distribution has parameter setters / getters', function test( t ) {
	var dist = new Beta( 2.0, 4.0 );
	t.strictEqual( hasProp( dist, 'alpha' ), true, 'has `alpha` setter / getter' );
	t.strictEqual( dist.alpha, 2.0, 'returns 2' );

	dist.alpha = 3.0;
	t.strictEqual( dist.alpha, 3.0, 'returns 3.0' );

	t.strictEqual( hasProp( dist, 'beta' ), true, 'has `beta` setter / getter' );
	t.strictEqual( dist.beta, 4.0, 'returns 4' );

	dist.beta = 3.0;
	t.strictEqual( dist.beta, 3.0, 'returns 3.0' );

	t.end();
});

tape( 'the created distribution has associated methods', function test( t ) {
	var dist;
	var y;

	dist = new Beta();
	t.strictEqual( isFunction( dist.cdf ), true, 'has CDF method' );
	t.strictEqual( isFunction( dist.logpdf ), true, 'has logPDF method' );
	t.strictEqual( isFunction( dist.mgf ), true, 'has MGF method' );
	t.strictEqual( isFunction( dist.pdf ), true, 'has PDF method' );
	t.strictEqual( isFunction( dist.quantile ), true, 'has quantile method' );

	y = dist.cdf( 0.5 );
	t.strictEqual( y, betaCDF( 0.5, 1.0, 1.0 ), 'CDF method returns correct value' );

	y = dist.logpdf( 0.5 );
	t.strictEqual( y, betaLogPDF( 0.5, 1.0, 1.0 ), 'logPDF method returns correct value' );

	y = dist.mgf( 0.5 );
	t.strictEqual( y, betaMGF( 0.5, 1.0, 1.0 ), 'MGF method returns correct value' );

	y = dist.pdf( 0.2 );
	t.strictEqual( y, betaPDF( 0.2, 1.0, 1.0 ), 'PDF method returns correct value' );

	y = dist.quantile( 0.8 );
	t.strictEqual( y, betaQuantile( 0.8, 1.0, 1.0 ), 'quantile method returns correct value' );

	t.end();
});

tape( 'the created distribution has an `entropy` property', function test( t ) {
	var dist = new Beta();
	t.strictEqual( hasProp( dist, 'entropy' ), true, 'has entropy' );
	t.strictEqual( dist.entropy, entropy( 1.0, 1.0 ), 'returns correct value' );
	t.end();
});

tape( 'the created distribution has a `kurtosis` property', function test( t ) {
	var dist = new Beta( 2.0, 4.0 );
	t.strictEqual( hasProp( dist, 'kurtosis' ), true, 'has kurtosis' );
	t.strictEqual( dist.kurtosis, kurtosis( 2.0, 4.0 ), 'returns correct value' );
	t.end();
});

tape( 'the created distribution has a `mean` property', function test( t ) {
	var dist = new Beta();
	t.strictEqual( hasProp( dist, 'mean' ), true, 'has mean' );
	t.strictEqual( dist.mean, mean( 1.0, 1.0 ), 'returns correct value' );
	t.end();
});

tape( 'the created distribution has a `median` property', function test( t ) {
	var dist = new Beta( 5.0, 2.0 );
	t.strictEqual( hasProp( dist, 'median' ), true, 'has median' );
	t.strictEqual( dist.median, median( 5.0, 2.0 ), 'returns correct value' );
	t.end();
});

tape( 'the created distribution has a `mode` property', function test( t ) {
	var dist = new Beta( 2.0, 3.0 );
	t.strictEqual( hasProp( dist, 'mode' ), true, 'has mode' );
	t.strictEqual( dist.mode, mode( 2.0, 3.0 ), 'returns correct value' );
	t.end();
});

tape( 'the created distribution has a `skewness` property', function test( t ) {
	var dist = new Beta( 0.5, 0.5 );
	t.strictEqual( hasProp( dist, 'skewness' ), true, 'has skewness' );
	t.strictEqual( dist.skewness, skewness( 0.5, 0.5 ), 'returns correct value' );
	t.end();
});

tape( 'the created distribution has a `variance` property', function test( t ) {
	var dist = new Beta( 3.0, 1.0 );
	t.strictEqual( hasProp( dist, 'variance' ), true, 'has variance' );
	t.strictEqual( dist.variance, variance( 3.0, 1.0 ), 'returns correct value' );
	t.end();
});
