#!/usr/bin/env python
"""Benchmark scipy.stats.beta."""

import timeit

repeats = 3
count = [0]  # use list to allow modification within nested scopes


def print_version():
    """Print the TAP version."""

    print("TAP version 13")


def print_summary(total, passing):
    """Print the benchmark summary.

    # Arguments

    * `total`: total number of tests
    * `passing`: number of passing tests

    """

    print("#")
    print("1.." + str(total))  # TAP plan
    print("# total " + str(total))
    print("# pass  " + str(passing))
    print("#")
    print("# ok")


def print_results(iterations, elapsed):
    """Print benchmark results.

    # Arguments

    * `iterations`: number of iterations
    * `elapsed`: elapsed time (in seconds)

    # Examples

    ``` python
    python> print_results(1000000, 0.131009101868)
    ```
    """

    rate = iterations / elapsed

    print("  ---")
    print("  iterations: " + str(iterations))
    print("  elapsed: " + str(elapsed))
    print("  rate: " + str(rate))
    print("  ...")


def benchmark(name, setup, stmt, iterations):
    """Run the benchmark and print benchmark results.

    # Arguments

    * `name`: benchmark name
    * `setup`: benchmark setup
    * `stmt`: statement to benchmark
    * `iterations`: number of iterations

    # Examples

    ``` python
    python> benchmark("random", "from random import random;", "y = random()", 1000000)
    ```
    """

    t = timeit.Timer(stmt, setup=setup)

    print_version()

    for i in xrange(repeats):
        print("# python::" + name)
        count[0] += 1
        elapsed = t.timeit(number=iterations)
        print_results(iterations, elapsed)
        print("ok " + str(count[0]) + " benchmark finished")


def main():
    """Run the benchmarks."""

    name = "beta:entropy"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.entropy()"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:kurtosis"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.stats(moments='k')"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:mean"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.mean()"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:median"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.median()"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:skewness"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.stats(moments='s')"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:variance"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.var()"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:cdf"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.cdf(random())"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:logpdf"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.logpdf(random())"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:pdf"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.pdf(random())"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    name = "beta:quantile"
    setup = "from scipy.stats import beta; from random import random; rv = beta(100.56789, 55.54321);"
    stmt = "y = rv.ppf(random())"
    iterations = 1000
    benchmark(name, setup, stmt, iterations)

    print_summary(count[0], count[0])


if __name__ == "__main__":
    main()
