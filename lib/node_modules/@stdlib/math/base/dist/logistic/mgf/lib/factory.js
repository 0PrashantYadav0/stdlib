'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/mgf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinc = require( '@stdlib/math/base/special/sinc' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a logistic distribution with mean `mu` and scale parameter `s`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10.0, 0.5 );
*
* var y = mgf( 0.5 );
* // returns ~164.846
*
* y = mgf( 2.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a logistic distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var st = s * t;
		return exp( mu * t ) / sinc( st );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
