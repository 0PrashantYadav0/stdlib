'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a logistic distribution with mean `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
* @example
* var y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
* @example
* var y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
* @example
* var y = mgf( 0.5, 0.0, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.5, 0.0, 4.0 );
* // returns NaN
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function mgf( t, mu, s ) {
	var st;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( s )
	) {
		return NaN;
	}
	if ( s < 0.0 ) {
		return NaN;
	}
	st = s * t;
	return exp( mu * t ) * beta( 1.0 - st, 1.0 + st );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;
