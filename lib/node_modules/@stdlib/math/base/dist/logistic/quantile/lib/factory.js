'use strict';

// FUNCTIONS //

var ln = require( '@stdlib/math/base/special/ln' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var nan = require( './nan.js' );
var degenerate = require( './degenerate.js' );


// FACTORY //

/**
* Returns a function for evaluating the quantile function for a logistic distribution.
*
* @param {Number} mu - location parameter
* @param {Number} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10, 2 );
* var y = quantile( 0.5 );
* // returns 10
* y = quantile( 0.8 );
* // returns ~12.773
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if( s === 0.0 ) {
		return degenerate( mu );
	}
	/**
	* Evaluates the quantile function for a logistic distribution.
	*
	* @param {Number} p - input value
	* @returns {Number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	return function quantile( p ) {
		if ( isnan( p ) || p < 0 || p > 1 ) {
			return NaN;
		}
		return mu + s * ln( p / ( 1 - p ) );
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
