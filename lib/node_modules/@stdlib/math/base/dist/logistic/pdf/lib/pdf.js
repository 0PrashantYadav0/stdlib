'use strict';

// FUNCTIONS //

var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );


// PDF //

/**
* Evaluates the probability density function (PDF) for a Logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {Number} x - input value
* @param {Number} mu - location parameter
* @param {Number} s - scale parameter
* @returns {Number} evaluated PDF
*
* @example
* var y = pdf( 2, 0, 1 );
* // returns ~0.105
* @example
* var y = pdf( -1, 4, 2 );
* // returns ~0.035
* @example
* var y = pdf( NaN, 0, 1 );
* // returns NaN
* @example
* var y = pdf( 0, NaN, 1 );
* // returns NaN
* @example
* var y = pdf( 0, 0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2, 0, -1 );
* // returns NaN
* @example
* var y = pdf( 2, 8, 0 );
* // returns 0.0
* @example
* var y = pdf( 8, 8, 0 );
* // returns +infinity
*/
function pdf( x, mu, s ) {
	if ( isnan( x ) || isnan( mu ) || isnan( s ) ) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	var lnl;
	var z;
	z = ( x - mu ) / s;
	lnl = -z - ln( s * pow( 1 + exp( -z ), 2 ) );
	return exp( lnl );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;
