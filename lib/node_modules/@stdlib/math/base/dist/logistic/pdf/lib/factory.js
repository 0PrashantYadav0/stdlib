'use strict';

// FUNCTIONS //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns 0.125
* y = pdf( 5.0 );
* // returns ~0.035
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	/**
	* Evaluates the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	return function pdf( x ) {
		var lnl;
		var z;
		if ( x === NINF ) {
			return 0.0;
		}
		z = ( x - mu ) / s;
		lnl = -z - ln( s * pow( 1.0 + exp( -z ), 2.0 ) );
		return exp( lnl );
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
