'use strict';

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );


// QUANTILE //

/**
* Evaluates the quantile function for a Inverse Gamma distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~1.213
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.545
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return beta / gammaincinv( p, alpha, true );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
