'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var factory = require( './../lib/factory.js' );


// FIXTURES //

var data = require( './fixtures/data.json' );


// FUNCTIONS //

function almostEqual( a, b, tol ) {
	var delta = abs( a - b );
	tol = tol * Math.max( 1.0, abs( a ), abs( b ) );
	return ( delta <= tol );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var quantile = factory( 0.0, 1.0 );
	t.equal( typeof quantile, 'function', 'returns a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the created function returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, 1.0 );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, 1.0 );
	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( 1.0, NaN );
	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NaN );
	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NaN );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a finite `mu` and `sigma`, the function returns a function which returns `0` when provided `+infinity` for `x`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, 1.0 );
	y = quantile( PINF );
	t.equal( y, 0.0, 'returns 0' );

	t.end();
});

tape( 'If provided a finite `mu` and `sigma`, the function returns a function which returns `0` when provided `-infinity` for `x`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, 1.0 );
	y = quantile( NINF );
	t.equal( y, 0.0, 'returns 0' );

	t.end();
});

tape( 'if provided `+infinity` for `mu` and a finite `sigma`, the function returns a function which returns `NaN` for any `x`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( PINF, 1.0 );

	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided `-infinity` for `mu` and a finite `sigma`, the function returns a function which returns `NaN` for any `x`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( NINF, 1.0 );

	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided `+infinity` for `sigma` and a finite `mu`, the function returns a function which returns `NaN` for any `x`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, PINF );

	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a negative `sigma`, the created function always returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, -1.0 );

	y = quantile( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( 0.0, NINF );
	y = quantile( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( PINF, NINF );
	y = quantile( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NINF, NINF );
	y = quantile( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NINF );
	y = quantile( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if `sigma` equals `0`, the created function evaluates a degenerate distribution centered at `mu`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 2.0, 0.0 );

	y = quantile( 2.0 );
	t.equal( y, PINF, 'returns +infinity for x equal to mu' );

	y = quantile( 1.0 );
	t.equal( y, 0.0, 'returns 0' );

	y = quantile( PINF );
	t.equal( y, 0.0, 'returns 0' );

	y = quantile( NINF );
	t.equal( y, 0.0, 'returns 0' );

	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function evaluates the quantile for `x` given parameters `mu` and `sigma`', function test( t ) {
	var expected;
	var quantile;
	var bool;
	var tol;
	var x;
	var mu;
	var sigma;
	var y;
	var i;

	tol = EPS;

	expected = data.expected;
	x = data.x;
	mu = data.mu;
	sigma = data.sigma;
	for ( i = 0; i < x.length; i++ ) {
		quantile = factory( mu[i], sigma[i] );
		y = quantile( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		}  else {
			bool = almostEqual( y, expected[i], tol );
			t.ok( bool, 'within tolerance. x: '+x[i]+'. mu:'+mu[i]+'. sigma: '+sigma[i]+'. y: '+y+'. Expected: '+expected[i]+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});
