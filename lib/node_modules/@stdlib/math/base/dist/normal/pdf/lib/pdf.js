'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );


// PDF //

/**
* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {Number} x - input value
* @param {Number} mu - mean
* @param {Number} sigma - standard deviation
* @returns {Number} evaluated probability density function
*
* @example
* var y = pdf( 2, 0, 1 );
* // returns ~0.054
* @example
* var y = pdf( -1, 4, 2 );
* // returns ~0.009
* @example
* var y = pdf( NaN, 0, 1 );
* // returns NaN
* @example
* var y = pdf( 0, NaN, 1 );
* // returns NaN
* @example
* var y = pdf( 0, 0, NaN );
* // returns NaN
* @example
* // Negative standard deviation:
* var y = pdf( 2, 0, -1 );
* // returns NaN
* @example
* var y = pdf( 2, 8, 0 );
* // returns 0.0
* @example
* var y = pdf( 8, 8, 0 );
* // returns +infinity
*/
function pdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if ( isnan( x ) || isnan( mu ) || isnan( sigma ) ) {
		return NaN;
	}
	if ( sigma < 0.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / sqrt( s2*TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return A * exp( B * pow(x-mu, 2.0) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;
