#!/usr/bin/env julia

import Distributions: logpdf, Frechet
import JSON

"""
	gen( x, alpha, s, name )

Generate fixture data and write to file.

# Arguments

* `x`: input value
* `alpha`: shape parameter
* `s`: scale parameter
* `name::AbstractString`: output filename

# Examples

``` julia
julia> x = rand( 1000 ) * 15.0;
julia> alpha = rand( 1000 ) * 5.0;
julia> s = rand( 1000 ) * 5.0;
julia> gen( x, alpha, s, "data.json" );
```
"""
function gen( x, alpha, s, name )
	z = Array( Float64, length(x) );
	for i in eachindex(x)
		z[ i ] = logpdf( Frechet( alpha[i], s[i] ), x[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("x", x),
		("alpha", alpha),
		("s", s),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Large shape:
x = rand( 1000 ) * 10.0 + 5.0;
alpha = rand( 1000 ) * 20.0;
s = rand( 1000 ) * 2.0;
gen( x, alpha, s, "large_shape.json" );

# Large scale:
x = rand( 1000 ) * 10.0 + 5.0;
alpha = rand( 1000 ) * 2.0;
s = rand( 1000 ) * 20.0;
gen( x, alpha, s, "large_scale.json" );

# Both large:
x = rand( 1000 ) * 10.0 + 5.0;
alpha = rand( 1000 ) * 20;
s = rand( 1000 ) * 20.0;
gen( x, alpha, s, "both_large.json" );
