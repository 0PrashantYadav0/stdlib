'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} CDF
*/
function factory( d1, d2 ) {
	if ( isnan( d1 ) || isnan( d2 ) ) {
		return nan;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return nan;
	}
	/**
	* Evaluates the cumulative distribution function (CDF) for a F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	return function cdf( x ) {
		var p;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		if ( d1 * x > d2 ) {
			p = betainc( (d1*x)/(d2+d1*x), d1/2.0, d2/2.0, true, false );
		} else {
			p = betainc( d2/(d2+d1*x), d2/2.0, d1/2.0, true, true );
		}
		return p;
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
