'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var ibeta_derivative = require( './ibeta_derivative.js' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the probability density function (PDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 6.0, 7.0 );
* var y = pdf( 7.0 );
* // returns ~0.004
*
* y = pdf( 2.0 );
* // returns ~0.166
*/
function factory( d1, d2 ) {
	var d1d2;
	var d1by2;
	var d2by2;
	var zeroVal;
	if ( isnan( d1 ) || isnan( d2 ) ) {
		return nan;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return nan;
	}
	d1d2 = d1 * d2;
	d1by2 = d1 / 2.0;
	d2by2 = d2 / 2.0;
	zeroVal = 0.0;
	if ( d1 < 2.0 ) {
		zeroVal = PINF;
	}
	else if ( d1 === 2.0 ) {
		zeroVal = 1.0;
	}
	/**
	* Evaluates the probability density function (PDF) for a F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	return function pdf( x ) {
		var dens;
		var v1x;
		var y;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return zeroVal;
		}
		v1x = d1 * x;
		if ( v1x > d2 ) {
			y = d1d2 / ( ( d2 + v1x ) * ( d2 + v1x ) );
			dens = y * ibeta_derivative( d2 / ( d2 + v1x ), d2by2, d1by2 );
		} else {
			z = d2 + v1x;
			y = ( z * d1 - x * d1 * d1 ) / ( z * z );
			dens = y * ibeta_derivative( d1 * x / ( d2 + v1x ), d1by2, d2by2 );
		}
		return dens;
	}; // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
