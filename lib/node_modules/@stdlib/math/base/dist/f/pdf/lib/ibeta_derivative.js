'use strict';

// MODULES //

var ibeta_power_terms = require( '@stdlib/math/base/special/betainc/lib/ibeta_power_terms.js' );
var beta = require( '@stdlib/math/base/special/beta' );


// INCOMPLETE BETA DERIVATIVE //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter
* @returns {number} value of the partial derivative
*/
function ibeta_derivative( x, a, b ) {
	var f1;
	var y;
	if ( x === 0.0 ) {
		return ( a > 1.0 ) ? 0.0 : ( a === 1.0 ) ? 1.0 / beta( a, b ) : NaN;
	}
	else if ( x === 1.0 ) {
		return ( b > 1.0 ) ? 0.0 : ( b === 1.0 ) ? 1.0 / beta( a, b ) : NaN;
	}
	// Regular cases:
	f1 = ibeta_power_terms( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
} // end FUNCTION ibeta_derivative()


// EXPORTS //

module.exports = ibeta_derivative;
