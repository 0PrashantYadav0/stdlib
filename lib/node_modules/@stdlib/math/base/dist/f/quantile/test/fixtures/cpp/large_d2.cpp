#include <random>
#include <algorithm>
#include <iterator>
#include <vector>
#include <iostream>
#include <boost/math/distributions/fisher_f.hpp>

using namespace std;
using boost::math::fisher_f;


vector<double> linspace( double start, double end, int num ) {
	double delta = (end - start) / (num - 1);
	vector<double> arr( num - 1 );
	for ( int i = 0; i < num - 1; ++i ){
		arr[ i ] = start + delta * i;
	}
	arr.push_back( end );
	return arr;
}

void print_vector( vector<double> vec, bool last = false ) {
	cout << "[";
	for ( vector<double>::iterator it = vec.begin(); it != vec.end(); ++it ) {
		if ( vec.end() != it+1 ) {
			cout << setprecision (16) << *it;
			cout << ",";
		} else {
			cout << setprecision (16) << *it;
			cout << "]";
			if ( last == false ) {
				cout << ",";
			}
		}
	}
	return;
}

void print_results(
	vector<double> p,
	vector<double> d1,
	vector<double> d2,
	vector<double> expected
) {
	cout << "{" << endl;
	cout << "  \"p\": ";
	print_vector( p );
	cout << "  \"d1\": ";
	print_vector( d1 );
	cout << "  \"d2\": ";
	print_vector( d2 );
	cout << "  \"expected\": ";
	print_vector( expected, true );
	cout << "}" << endl;
	return;
}

int main() {
	random_device rd;
	mt19937 g(rd());

	vector<double> p = linspace( 0.001, 0.999, 2000 );
	shuffle( p.begin(), p.end(), g );
	vector<double> d1 = linspace( 1.0, 100.0, 2000 );
	shuffle( d1.begin(), d1.end(), g );
	vector<double> d2 = linspace( 30.0, 100.0, 2000 );
	shuffle( d2.begin(), d2.end(), g );
	vector<double> expected;

	for ( int i = 0; i < 2000; i++ ) {
		double df1 = d1[ i ];
		double df2 = d2[ i ];
		double prob = p[ i ];
		fisher_f dist( df1, df2 );
		expected.push_back( quantile( dist, prob ) );
	}

	print_results( p, d1, d2, expected );
	return 0;
}
