/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/f/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/f/kurtosis' );
var mean = require( '@stdlib/math/base/dist/f/mean' );
var mode = require( '@stdlib/math/base/dist/f/mode' );
var skewness = require( '@stdlib/math/base/dist/f/skewness' );
var stdev = require( '@stdlib/math/base/dist/f/stdev' );
var variance = require( '@stdlib/math/base/dist/f/variance' );
var cdf = require( '@stdlib/math/base/dist/f/cdf' );
var pdf = require( '@stdlib/math/base/dist/f/pdf' );
var quantile = require( '@stdlib/math/base/dist/f/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function fCDF( x ) {
	return cdf( x, this.d1, this.d2 );
} // end FUNCTION fCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function fPDF( x ) {
	return pdf( x, this.d1, this.d2 );
} // end FUNCTION fPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function fQuantile( p ) {
	return quantile( p, this.d1, this.d2 );
} // end FUNCTION fQuantile()


// MAIN //

/**
* F distribution constructor.
*
* @constructor
* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom
* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @returns {F} distribution instance
*
* @example
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var mode = f.mode;
* // returns NaN
*/
function F() {
	var d1;
	var d2;
	if ( !(this instanceof F) ) {
		if ( arguments.length === 0 ) {
			return new F();
		}
		return new F( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		d1 = arguments[ 0 ];
		d2 = arguments[ 1 ];
		if ( !isPositive( d1 ) ) {
			throw new TypeError( 'invalid input argument. Numerator degrees of freedom `d1` must be a positive number. Value: `' + d1 + '`' );
		}
		if ( !isPositive( d2 ) ) {
			throw new TypeError( 'invalid input argument. Denominator degrees of freedom `d2` must be a positive number. Value: `' + d2 + '`' );
		}
	} else {
		d1 = 1.0;
		d2 = 1.0;
	}
	Object.defineProperty( this, 'd1', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d1;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d1 = value;
		}
	});
	Object.defineProperty( this, 'd2', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d2;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d2 = value;
		}
	});
	return this;
} // end FUNCTION F()

/**
* F distribution differential entropy.
*
* @memberof F.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.entropy;
* // returns ~1.12
*/
Object.defineProperty( F.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.d1, this.d2 );
	}
});

/**
* F distribution excess kurtosis.
*
* @memberof F.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.kurtosis;
* // returns ~26.143
*/
Object.defineProperty( F.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.d1, this.d2 );
	}
});

/**
* F distribution expected value.
*
* @memberof F.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mean;
* // returns 1.2
*/
Object.defineProperty( F.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.d1, this.d2 );
	}
});

/**
* F distribution mode.
*
* @memberof F.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mode;
* // returns ~0.429
*/
Object.defineProperty( F.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.d1, this.d2 );
	}
});

/**
* F distribution skewness.
*
* @memberof F.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.skewness;
* // returns ~3.207
*/
Object.defineProperty( F.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.d1, this.d2 );
	}
});

/**
* F distribution standard deviation.
*
* @memberof F.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.stdev;
* // returns ~1.122
*/
Object.defineProperty( F.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.d1, this.d2 );
	}
});

/**
* F distribution variance.
*
* @memberof F.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.variance;
* // returns 1.26
*/
Object.defineProperty( F.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.d1, this.d2 );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof F.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.cdf( 0.5 );
* // returns ~0.36
*/
setReadOnly( F.prototype, 'cdf', fCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof F.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.pdf( 2.0 );
* // returns ~0.125
*/
setReadOnly( F.prototype, 'pdf', fPDF );

/**
* Evaluates the quantile function.
*
* @memberof F.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.quantile( 0.5 );
* // returns ~0.828
*/
setReadOnly( F.prototype, 'quantile', fQuantile );


// EXPORTS //

module.exports = F;
