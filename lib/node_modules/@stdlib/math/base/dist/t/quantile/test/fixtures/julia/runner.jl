#!/usr/bin/env julia

import Distributions: quantile, TDist
import JSON

"""
    gen( p, v, name )

Generate fixture data and write to file.

# Arguments

* `p`: input value
* `v`: degrees of freedom
* `name::AbstractString`: output filename

# Examples

``` julia
julia> p = linspace( 0, 1, 1001 );
julia> v = linspace( 0, 20, 1001 );
julia> gen( p, v, \"data.json\" );
```
"""
function gen( p, v, name )
	z = Array( Float64, length(p) );
	for i in eachindex(p)
		z[ i ] = quantile( TDist( v[i] ), p[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("p", p),
		("v", v),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Random (v small):
p = rand( 1001 );
v = rand( 1001 ) * 5.0;
gen( p, v, "small.json" );

# Random (v large):
p = rand( 1001 );
v = rand( 1001 ) * 20.0;
gen( p, v, "large.json" );
