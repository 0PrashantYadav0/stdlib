'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var sign = require( '@stdlib/math/base/special/signum' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
* @example
* var y = quantile( 0.1, 1.0 );
* // returns ~-3.078
* @example
* var y = quantile( 0.5, 0.1 );
* // returns 0.0
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, v ) {
	var prob;
	var xs;
	if ( isnan( v ) || v <= 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	prob = ( p > 0.5 ) ? 1.0 - p : p;
	xs = betaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - 2.0 * prob );
	return sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
