/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/lognormal/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/lognormal/kurtosis' );
var mean = require( '@stdlib/math/base/dist/lognormal/mean' );
var median = require( '@stdlib/math/base/dist/lognormal/median' );
var mode = require( '@stdlib/math/base/dist/lognormal/mode' );
var skewness = require( '@stdlib/math/base/dist/lognormal/skewness' );
var stdev = require( '@stdlib/math/base/dist/lognormal/stdev' );
var variance = require( '@stdlib/math/base/dist/lognormal/variance' );
var cdf = require( '@stdlib/math/base/dist/lognormal/cdf' );
var pdf = require( '@stdlib/math/base/dist/lognormal/pdf' );
var quantile = require( '@stdlib/math/base/dist/lognormal/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function lognormalCDF( x ) {
	return cdf( x, this.mu, this.sigma );
} // end FUNCTION lognormalCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function lognormalPDF( x ) {
	return pdf( x, this.mu, this.sigma );
} // end FUNCTION lognormalPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function lognormalQuantile( p ) {
	return quantile( p, this.mu, this.sigma );
} // end FUNCTION lognormalQuantile()


// MAIN //

/**
* Lognormal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {LogNormal} distribution instance
*
* @example
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/
function LogNormal() {
	var sigma;
	var mu;
	if ( !(this instanceof LogNormal) ) {
		if ( arguments.length === 0 ) {
			return new LogNormal();
		}
		return new LogNormal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
} // end FUNCTION LogNormal()

/**
* Lognormal distribution differential entropy.
*
* @memberof LogNormal.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.entropy;
* // returns ~7.904
*/
Object.defineProperty( LogNormal.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution excess kurtosis.
*
* @memberof LogNormal.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.kurtosis;
* // returns 1.4243659274306933e+250
*/
Object.defineProperty( LogNormal.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution expected value.
*
* @memberof LogNormal.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mean;
* // returns 1.0148003881138887e+33
*/
Object.defineProperty( LogNormal.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution median.
*
* @memberof LogNormal.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.median;
* // returns ~54.598
*/
Object.defineProperty( LogNormal.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution mode.
*
* @memberof LogNormal.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mode;
* // returns 1.580420060273613e-61
*/
Object.defineProperty( LogNormal.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution skewness.
*
* @memberof LogNormal.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.skewness;
* // returns 6.421080152185613e+93
*/
Object.defineProperty( LogNormal.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution standard deviation.
*
* @memberof LogNormal.prototype
* @name stdev
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.stdev;
* // returns 1.886180808490652e+64
*/
Object.defineProperty( LogNormal.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution variance.
*
* @memberof LogNormal.prototype
* @name variance
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.variance;
* // returns 3.55767804231845e+128
*/
Object.defineProperty( LogNormal.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof LogNormal.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.cdf( 0.5 );
* // returns ~0.25
*/
setReadOnly( LogNormal.prototype, 'cdf', lognormalCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof LogNormal.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.pdf( 0.8 );
* // returns ~0.107
*/
setReadOnly( LogNormal.prototype, 'pdf', lognormalPDF );

/**
* Evaluates the quantile function.
*
* @memberof LogNormal.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.quantile( 0.5 );
* // returns ~7.389
*/
setReadOnly( LogNormal.prototype, 'quantile', lognormalQuantile );


// EXPORTS //

module.exports = LogNormal;
