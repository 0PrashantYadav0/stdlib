'use strict';

// FUNCTIONS //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var LNHALF = require( '@stdlib/math/constants/float64-lnhalf' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-2.025
*
* y = logcdf( 4.0 );
* // returns ~-0.297
*/
function factory( mu, b ) {
	if ( isnan( mu ) || isnan( b ) || b <= 0.0 ) {
		return nan;
	}
	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	return function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return LNHALF + z;
		} else {
			return LNHALF + log1p( -expm1( -z ) );
		}
	}; // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
