'use strict';

// MODULES //

var signum = require( '@stdlib/math/base/special/signum' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// QUANTILE //

/**
* Evaluates the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu - b * signum( p - 0.5 ) * ln( 1.0 - 2.0 * abs( p - 0.5 ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
