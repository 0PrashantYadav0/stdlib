'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 2.0, 1.0 );
* var y = mgf( -1.0 );
* // returns ~0.3996
*
* y = mgf( 2.0 );
* // returns ~10.205
*/
function factory( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return nan;
	}
	if ( !( a <= c && c <= b ) ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a triangular distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var bmc;
		var bma;
		var cma;
		var ret;

		if ( isnan( t ) ) {
			return NaN;
		}
		bmc = b - c;
		bma = b - a;
		cma = c - a;
		if ( t === 0.0 ) {
			return 1.0;
		}
		ret = (bmc * exp( a * t )) - (bma * exp( c * t ));
		ret += cma * exp( b * t );
		ret *= 2.0;
		ret /= bma * cma * bmc * pow( t, 2.0 );
		return ret;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
