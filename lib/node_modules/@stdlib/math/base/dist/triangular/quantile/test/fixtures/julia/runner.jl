#!/usr/bin/env julia

import Distributions: quantile, TriangularDist
import JSON

"""
	gen( p, a, b, c, name )

Generate fixture data and write to file.

# Arguments

* `p`: input value
* `a`: minimum support
* `b`: maximum support
* `c`: mode
* `name::AbstractString`: output filename

# Examples

``` julia
julia> a = rand( 1000 );
julia> b = rand( 1000 ) + a;
julia> c = a + ( b - a ) .* rand();
julia> p = rand( 1000 );
julia> gen( p, a, b, c, "data.json" );
```
"""
function gen( p, a, b, c, name )
	z = Array( Float64, length(p) );
	for i in eachindex(p)
		z[ i ] = quantile( TriangularDist( a[i], b[i], c[i] ), p[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("p", p),
		("a", a),
		("b", b),
		("c", c),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Small Range:
a = rand( 1000 ) * 20.0;
b = rand( 1000 ) * 20.0 + a;
c = a + ( b - a ) .* rand();
p = rand( 1000 );
gen( p, a, b, c, "small_range.json" );

# Medium Range:
a = rand( 1000 ) * 20.0;
b = rand( 1000 ) * 40.0 + a;
c = a + ( b - a ) .* rand();
p = rand( 1000 );
gen( p, a, b, c, "medium_range.json" );

# Large Range:
a = rand( 1000 ) * 20.0;
b = rand( 1000 ) * 80.0 + a;
c = a + ( b - a ) .* rand();
p = rand( 1000 );
gen( p, a, b, c, "large_range.json" );
