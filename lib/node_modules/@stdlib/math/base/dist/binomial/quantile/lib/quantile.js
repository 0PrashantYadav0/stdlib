'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p  - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 20, 0.2 );
* // returns 2
* @example
* var y = quantile( 0.8, 20, 0.2 );
* // returns 5
* @example
* var y = quantile( 0.5, 10, 0.4 )
* // returns 4
* @example
* var y = quantile( 0.0, 10, 0.4 )
* // returns 0
* @example
* var y = quantile( 1.0, 10, 0.4 )
* // returns 10
* @example
* var y = quantile( NaN, 20, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.2, NaN, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.2, 20, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.5, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.5, 20, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 20, 1.5 );
* // returns NaN
*/
function quantile( r, n, p  ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;

	if ( !isNonNegativeInteger( n ) || n === PINF ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
		return NaN;
	}
	if ( p === 1.0 ) {
		return n;
	}
	if ( p === 0.0 || n === 0 ) {
		return 0.0;
	}
	if ( r === 0.0 ) {
		return 0;
	}
	if ( r === 1.0 ) {
		return n;
	}
	// Cornish-Fisher expansion
	mu = n * p;
	sigma = sqrt( n * p * ( 1.0 - p ) );
 	sigmaInv = 1.0 / sigma;
	if ( r < 0.5 ) {
		x = -erfcinv( 2.0 * r ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * ( 1.0 - r ) ) * SQRT2;
	}
	x2 = x * x;
	// Skewness correction:
	corr = x + sigmaInv * ( x2 - 1.0 ) / 6.0;
	guess = round( mu + sigma * corr );
	return ( cdf( guess, n, p ) >= r ) ? search.left( guess, r, n, p ) : search.right( guess, r, n, p );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
