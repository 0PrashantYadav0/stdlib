#!/usr/bin/env julia

using Distributions
import JSON

"""
	gen( r, n, p, name )

Generate fixture data and write to file.

# Arguments

* `r`: input value
* `n`: number of trials
* `p`: success probability
* `name::AbstractString`: output filename

"""
function gen( r, n, p, name )
	z = Array( Float64, length(r) );
	for i in eachindex(r)
		z[ i ] = quantile( Binomial( n[i], p[i] ), r[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("r", r),
		("n", n),
		("p", p),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Random (small n, small p):
r = rand( 1000 );
n = round( rand( 1000 ) * 20 );
p = rand( 1000 ) * 0.2;
gen( r, n, p, "small_small.json" );

# Random (small n, high p):
r = rand( 1000 );
n = round( rand( 1000 ) * 20 );
p = rand( 1000 ) * 0.25 + 0.75;
gen( r, n, p, "small_high.json" );

# Random (high n, high p):
r = rand( 1000 );
n = round( rand( 1000 ) * 100 );
p = rand( 1000 ) * 0.25 + 0.75;
gen( r, n, p, "high_high.json" );

# Random (high n, small p):
r = rand( 1000 );
n = round( rand( 1000 ) * 100 );
p = rand( 1000 ) * 0.2;
gen( r, n, p, "high_small.json" );
