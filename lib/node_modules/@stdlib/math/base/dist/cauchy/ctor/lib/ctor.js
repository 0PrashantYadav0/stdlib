/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/cauchy/entropy' );
var median = require( '@stdlib/math/base/dist/cauchy/median' );
var mode = require( '@stdlib/math/base/dist/cauchy/mode' );
var cdf = require( '@stdlib/math/base/dist/cauchy/cdf' );
var logcdf = require( '@stdlib/math/base/dist/cauchy/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/cauchy/logpdf' );
var pdf = require( '@stdlib/math/base/dist/cauchy/pdf' );
var quantile = require( '@stdlib/math/base/dist/cauchy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function cauchyCDF( x ) {
	return cdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function cauchyLogCDF( x ) {
	return logcdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated cauchyPDF
*/
function cauchyLogPDF( x ) {
	return logpdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyLogPDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cauchyPDF( x ) {
	return pdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cauchyQuantile( p ) {
	return quantile( p, this.x0, this.gamma );
} // end FUNCTION cauchyQuantile()


// MAIN //

/**
* Cauchy distribution constructor.
*
* @constructor
* @param {number} [x0=0.0] - location parameter
* @param {PositiveNumber} [gamma=1.0] - scale parameter
* @throws {TypeError} `gamma` must be a positive number
* @returns {Cauchy} distribution instance
*
* @example
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var median = cauchy.median;
* // returns 1.0
*/
function Cauchy() {
	var gamma;
	var x0;
	if ( !(this instanceof Cauchy) ) {
		if ( arguments.length === 0 ) {
			return new Cauchy();
		}
		return new Cauchy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		x0 = arguments[ 0 ];
		gamma = arguments[ 1 ];
		if ( !isNumber( x0 ) || isnan( x0 ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `x0` must be a number primitive. Value: `' + x0 + '`' );
		}
		if ( !isPositive( gamma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `gamma` must be a positive number. Value: `' + gamma + '`' );
		}
	} else {
		x0 = 0.0;
		gamma = 1.0;
	}
	Object.defineProperty( this, 'x0', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return x0;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			x0 = value;
		}
	});
	Object.defineProperty( this, 'gamma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return gamma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			gamma = value;
		}
	});
	return this;
} // end FUNCTION Cauchy()

/**
* Cauchy distribution differential entropy.
*
* @memberof Cauchy.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.entropy;
* // returns ~5.016
*/
Object.defineProperty( Cauchy.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.x0, this.gamma );
	}
});

/**
* Cauchy distribution median.
*
* @memberof Cauchy.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.median;
* // returns 4.0
*/
Object.defineProperty( Cauchy.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.x0, this.gamma );
	}
});

/**
* Cauchy distribution mode.
*
* @memberof Cauchy.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.mode;
* // returns 4.0
*/
Object.defineProperty( Cauchy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.x0, this.gamma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Cauchy.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.cdf( 0.5 );
* // returns ~0.386
*/
setReadOnly( Cauchy.prototype, 'cdf', cauchyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Cauchy.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logcdf( 0.5 );
* // returns ~-0.952
*/
setReadOnly( Cauchy.prototype, 'logcdf', cauchyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Cauchy.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logpdf( 0.8 );
* // returns ~-2.617
*/
setReadOnly( Cauchy.prototype, 'logpdf', cauchyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Cauchy.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.pdf( 0.8 );
* // returns ~0.073
*/
setReadOnly( Cauchy.prototype, 'pdf', cauchyPDF );

/**
* Evaluates the quantile function.
*
* @memberof Cauchy.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Cauchy.prototype, 'quantile', cauchyQuantile );


// EXPORTS //

module.exports = Cauchy;
