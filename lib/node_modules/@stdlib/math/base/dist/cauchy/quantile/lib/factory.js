'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.2 );
* // returns ~7.247
* y = pdf( 0.8 );
* // returns ~12.753
*/
function factory( x0, gamma ) {
	if (
		isnan( x0 ) ||
		isnan( gamma ) ||
		gamma <= 0
	) {
		return nan;
	}
	/**
	* Evaluates the quantile function for a Cauchy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	return function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return x0 + gamma * tan( PI * ( p - 0.5 ) );
	}; // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
