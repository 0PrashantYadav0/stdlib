'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// QUANTILE //

/**
* Evaluates the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.3, 2.0, 2.0 );
* // returns ~0.547
* @example
* var y = quantile( 0.8, 10, 2.0 );
* // returns ~12.753
* @example
* var y = quantile( 0.1, 10.0, 2.0 );
* // returns ~3.845
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, x0, gamma ) {
	if (
		isnan( x0 ) ||
		isnan( gamma )
	) {
		return NaN;
	}
	if ( gamma <= 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return x0 + gamma * tan( PI * ( p - 0.5 ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
