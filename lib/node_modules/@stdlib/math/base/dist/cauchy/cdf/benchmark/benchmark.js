'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isProbability = require( '@stdlib/math/base/utils/is-probability' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var pkg = require( './../package.json' ).name;
var cdf = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var gamma;
	var x0;
	var x;
	var y;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = ( randu()*100.0 ) - 100;
		x0 = ( randu()*100.0 ) - 50.0;
		gamma = ( randu()*20.0 ) + EPS;
		y = cdf( x, x0, gamma );
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		if ( !isProbability( y ) ) {
			b.fail( 'should not return a number outside `[0,1]`' );
		}
	}
	b.toc();
	if ( isnan( y ) ) {
		b.fail( 'should not return NaN' );
	}
	else if ( isProbability( y ) ) {
		b.pass( 'benchmark finished' );
	}
	else {
		b.fail( 'should not return a number outside `[0,1]`' );
	}
	b.end();
});

bench( pkg+':factory', function benchmark( b ) {
	var mycdf;
	var gamma;
	var x0;
	var x;
	var y;
	var i;

	x0 = 0.0;
	gamma = 1.5;
	mycdf = cdf.factory( x0, gamma );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = ( randu()*100.0 ) + EPS;
		y = mycdf( x );
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		if ( !isProbability( y ) ) {
			b.fail( 'should not return a number outside `[0,1]`' );
		}
	}
	b.toc();
	if ( isnan( y ) ) {
		b.fail( 'should not return NaN' );
	}
	else if ( isProbability( y ) ) {
		b.pass( 'benchmark finished' );
	}
	else {
		b.fail( 'should not return a number outside `[0,1]`' );
	}
	b.end();
});
