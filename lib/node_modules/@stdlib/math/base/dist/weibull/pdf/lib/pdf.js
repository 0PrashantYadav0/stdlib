'use strict';

// FUNCTIONS //

var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// PDF //

/**
* Evaluates the probability density function (PDF) for a Weibull distribution with scale parameter `lambda` and shape parameter `k` at a value `x`.
*
* @param {Number} x - input value
* @param {Number} lambda - scale parameter
* @param {Number} k - shape parameter
* @returns {Number} evaluated probability density function
*
* @example
* var y = pdf( 2, 0.5, 1 );
* // returns ~0.037
* @example
* var y = pdf( 0.1, 1, 1 );
* // returns ~0.905
* @example
* var y = pdf( -1, 4, 2 );
* // returns 0
* @example
* var y = pdf( NaN, 0.6, 1 );
* // returns NaN
* @example
* var y = pdf( 0, NaN, 1 );
* // returns NaN
* @example
* var y = pdf( 0, 0, NaN );
* // returns NaN
* @example
* var y = pdf( 2, 0, -1 );
* // returns NaN
*/
function pdf( x, lambda, k ) {
	var lnl;
	var lnp;
	if ( isnan( lambda ) || isnan( k ) ) {
		return NaN;
	}
	if ( lambda < 0.0 || k < 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF || x === NINF ) {
		return 0;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? k/lambda : 0.0;
	}
	lnl = ln( lambda );
	lnp = ln( k ) - lnl;
	lnp += ( k-1 ) * ( ln(x)-lnl );
	lnp -= pow( x/lambda, k );

	return exp( lnp );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;
