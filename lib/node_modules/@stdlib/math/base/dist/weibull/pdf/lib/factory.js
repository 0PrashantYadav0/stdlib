'use strict';

// FUNCTIONS //

var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a function for evaluating the probability density function (PDF) for a Weibull distribution.
*
* @param {Number} lambda - scale parameter
* @param {Number} k - shape parameter
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 6, 7 );
* var y = pdf( 7 );
* // returns ~0.155
* y = pdf( 5 );
* // returns ~0.296
*/
function factory( lambda, k ) {
	var lnl = ln( lambda );
	var kl = k / lambda;
	var d = ln( k ) - lnl;
	var j = k - 1;
	if ( lambda < 0.0 || k < 1.0 ) {
		return nan;
	}
	/**
	* Evaluates the probability density function (PDF) for a Weibull distribution.
	*
	* @param {Number} x - input value
	* @returns {Number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	return function pdf( x ) {
		var lnp;
		if ( x < 0 ) {
			return 0;
		}
		if ( x === 0 ) {
			return ( k === 1 ) ? kl : 0;
		}
		lnp = d + j*( ln(x)-lnl );
		lnp -= pow( x/lambda, k );
		return exp( lnp );
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
