'use strict';

// FUNCTIONS //

var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} lambda - scale parameter
* @param {PositiveNumber} k - shape parameter
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 6.0, 7.0 );
* var y = pdf( 7.0 );
* // returns ~0.155
* y = pdf( 5.0 );
* // returns ~0.296
*/
function factory( lambda, k ) {
	if ( isnan( lambda ) || isnan( k ) ) {
		return nan;
	}
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return nan;
	}
	/**
	* Evaluates the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	return function pdf( x ) {
		var xol;
		var z;
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF || x === NINF ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? k / lambda : 0.0;
		}
		xol = x / lambda;
		z = pow( xol, k - 1.0 );
		return ( k / lambda ) * z * exp( -pow( xol, k ) );
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
