'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// LOGPDF //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Weibull distribution with scale parameter `lambda` and shape parameter `k` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - scale parameter
* @param {PositiveNumber} k - shape parameter
* @returns {number} evaluated logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-3.297
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, lambda, k ) {
	var xol;
	if ( isnan( lambda ) || isnan( k ) ) {
		return NaN;
	}
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	if ( x === PINF || x === NINF ) {
		return NINF;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? ln( k/lambda ): NINF;
	}
	xol = x / lambda;
	return ln( k / lambda ) + ( k - 1.0 ) * ln( xol ) - pow( xol, k );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;
