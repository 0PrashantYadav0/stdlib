'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} lambda - scale parameter
* @param {PositiveNumber} k - shape parameter
* @returns {Function} function to evaluate the logarithm of the probability density function
*
* @example
* var logpdf = factory( 6.0, 7.0 );
* var y = logpdf( 7.0 );
* // returns ~-1.864
*
* y = logpdf( 5.0 );
* // returns ~-1.217
*/
function factory( lambda, k ) {
	var lnkl;
	if ( isnan( lambda ) || isnan( k ) ) {
		return nan;
	}
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return nan;
	}
	lnkl = ln( k / lambda );
	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	return function logpdf( x ) {
		var xol;
		if ( x < 0.0 ) {
			return NINF;
		}
		if ( x === PINF || x === NINF ) {
			return NINF;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? ln( k / lambda ) : NINF;
		}
		xol = x / lambda;
		return lnkl + ( k - 1.0 ) * ln( xol ) - pow( xol, k );
	}; // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
