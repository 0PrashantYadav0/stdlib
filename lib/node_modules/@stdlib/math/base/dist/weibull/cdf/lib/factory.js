'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} lambda - shape parameter
* @param {PositiveNumber} k - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
* var y = cdf( 12.0 );
* // returns ~0.763
*
* y = cdf( 8.0 );
* // returns ~0.473
*/
function factory( lambda, k ) {
	if ( isnan( lambda ) || isnan( k ) ) {
		return nan;
	}
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return -expm1( -pow( x / lambda, k ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
