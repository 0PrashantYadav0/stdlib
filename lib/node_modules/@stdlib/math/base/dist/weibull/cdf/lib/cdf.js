'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );


// CDF //

/**
* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with shape parameter `lambda` and scale parameter `k` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - shape parameter
* @param {PositiveNumber} k - scale parameter
* @returns {number} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, lambda, k ) {
	if ( isnan( lambda ) || isnan( k ) ) {
		return NaN;
	}
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return -expm1( - pow( x / lambda, k ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;
