'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// LOGCDF //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Weibull distribution with shape parameter `lambda` and scale parameter `k` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - shape parameter
* @param {PositiveNumber} k - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
* @example
* var y = logcdf( -1.0, 2.0, 2.0 );
* // returns -Infinity
* @example
* var y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0
* @example
* var y = logcdf( -Infinity, 4.0, 2.0 );
* // returns -Infinity
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, lambda, k ) {
	var p;
	if ( isnan( lambda ) || isnan( k ) ) {
		return NaN;
	}
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	p = -pow( x / lambda, k );
	return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;
