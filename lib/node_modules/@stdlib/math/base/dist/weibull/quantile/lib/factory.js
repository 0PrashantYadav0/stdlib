'use strict';

// FUNCTIONS //

var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the quantile function for a Weibull distribution.
*
* @param {PositiveNumber} lambda - shape parameter
* @param {PositiveNumber} k - scale parameter
* @returns {Function} quantile function
*
 @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.4 );
* // returns ~7.147
* y = quantile( 0.8 );
* // returns ~12.686
*/
function factory( lambda, k ) {
	if ( lambda <= 0.0 || k <= 0.0 ) {
		return nan;
	}
	if ( isnan( lambda ) || isnan( k ) ) {
		return nan;
	}
	/**
	* Evaluates the quantile function for a Weibull distribution.
	*
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	return function quantile( p ) {
		if ( p !== p || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return lambda * pow( -ln( 1.0 - p ) , 1.0/k );
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
