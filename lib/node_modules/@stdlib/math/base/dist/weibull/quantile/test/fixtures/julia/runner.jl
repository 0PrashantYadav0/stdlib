#!/usr/bin/env julia

import Distributions: quantile, Weibull
import JSON

"""
	gen( p, k, lambda, name )

Generate fixture data and write to file.

# Arguments

* `p`: input value
* `k`: shape parameter
* `lambda`: scale parameter
* `name::AbstractString`: output filename

# Examples

``` julia
julia> p = rand( 1000 );
julia> lambda = rand( 1000 ) * 20.0;
julia> k = rand( 1000 ) * 10.0 + 10.0;
julia> gen( p, k, lambda, "data.json" );
```
"""
function gen( p, k, lambda, name )
	z = Array( Float64, length(p) );
	for i in eachindex(p)
		z[ i ] = quantile( Weibull( k[i], lambda[i] ), p[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("p", p),
		("lambda", lambda),
		("k", k),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Large scale parameter:
p = rand( 1000 );
lambda = rand( 1000 ) * 10.0 + 10.0;
k = rand( 1000 ) * 10.0;
gen( p, k, lambda, "large_scale.json" );

# Large shape parameter:
p = rand( 1000 );
lambda = rand( 1000 ) * 10.0;
k = rand( 1000 ) * 10.0 + 10.0;
gen( p, k, lambda, "large_shape.json" );

# Both large:
p = rand( 1000 );
lambda = rand( 1000 ) * 20.0 + 10.0;
k = rand( 1000 ) * 20.0 + 10.0;
gen( p, k, lambda, "both_large.json" );
