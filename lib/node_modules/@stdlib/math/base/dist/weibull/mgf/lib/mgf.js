'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var EPS = require( '@stdlib/math/constants/float64-eps' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Weibull distribution with scale `lambda` and shape `k` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - scale parameter
* @param {PositiveNumber} k - shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 0.5, 1.0 );
* // returns ~2.0
* @example
* var y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = mgf( 0.2, -1.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.5, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.5, 0.0 );
* // returns NaN
*/
function mgf( t, lambda, k ) {
	var summand;
	var sum;
	var c;
	var n;

	if (
		isnan( t ) ||
		isnan( lambda ) ||
		isnan( k ) ||
		lambda <= 0.0 ||
		k <= 0.0
	) {
		return NaN;
	}
	sum = 1.0;
	c = 1.0;
	n = 0;
	do {
		n += 1;
		c *= ( t * lambda ) / n;
		summand = c * gamma( 1.0 + (n / k) );
		sum += summand;
	} while ( summand / sum > EPS );

	return sum;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;
