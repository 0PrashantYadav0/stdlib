'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var trunc = require( '@stdlib/math/base/special/truncate' );
var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );
var sum = require( './sum.js' );


// FUNCTIONS //

var max = Math.max;
var min = Math.min;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a hypergeometric distribution with number of white balls in urn `m`, number of black balls in urn `n` and number of draws `k`.
*
* @param {NonNegativeInteger} m - number of white balls in urn
* @param {NonNegativeInteger} n - number of black balls in urn
* @param {NonNegativeInteger} k - number of draws
* @returns {Function} CDF
*
* @example
* var mycdf = factory( 20, 10, 5 );
* var y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/
function factory( m, n, k ) {
	if (
		isnan( m ) ||
		isnan( n ) ||
		isnan( k )
	) {
		return nan;
	}
	if (
		!isNonNegativeInteger( m ) ||
		!isNonNegativeInteger( n ) ||
		!isNonNegativeInteger( k ) ||
		m === PINF ||
		n === PINF ||
		k > m + n
	) {
		return nan;
	}

	/**
	* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	return function cdf( x ) {
		var denom;
		var probs;
		var num;
		var ret;
		var i;

		if ( isnan( x ) ) {
			return NaN;
		}
		x = trunc( x );
		if ( x < max( 0, k - n ) ) {
			return 0.0;
		}
		if ( x >= min( k, m ) ) {
			return 1.0;
		}

		probs = new Array( x + 1 );
		probs[ x ] = pmf( x, m, n, k );
		// Use recurrence relation:
		// (x+1)( n -(k-x-1))P(X=x+1)=(m-x)(k-x)P(X=x)
		for ( i = x - 1; i >= 0; i-- ) {
			num = ( i + 1 ) * ( n - (k-i-1) );
			denom = ( m - i ) * ( k - i );
			probs[ i ] =  ( num / denom ) * probs[ i + 1 ];
		}
		ret = sum( probs );
		return ret;
	}; // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
