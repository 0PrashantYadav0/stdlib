#!/usr/bin/env julia

import Distributions: var, Hypergeometric
import JSON

"""
	gen( N, K, n, name )

Generate fixture data and write to file.

# Arguments

* `N`: population size
* `K`: subpopulation size
* `n`: number of draws
* `name::AbstractString`: output filename

# Examples

``` julia
julia> N = round( rand( 1000 ) * 200 + 20 );
julia> K = round( rand( 1000 ) .* N );
julia> n = round( rand( 1000 ) .* K );
julia> gen( N, K, n, "data.json" );
```
"""
function gen( N, K, n, name )
	z = Array( Float64, length(N) );
	for i in eachindex(N)
		z[ i ] = var( Hypergeometric( K[i], N[i] - K[i], n[i] ) );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("N", N),
		("K", K),
		("n", n),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Generate fixtures:
N = round( rand( 100 ) * 200 + 20 );
K = round( rand( 100 ) .* N );
n = round( rand( 100 ) .* K );
gen( N, K, n, "data.json" );
