'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a hypergeometric distribution with number of white balls in urn `m`, number of black balls in urn `n` and number of draws `k`.
*
* @param {NonNegativeInteger} m - number of white balls in urn
* @param {NonNegativeInteger} n - number of black balls in urn
* @param {NonNegativeInteger} k - number of draws
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 20, 80, 10 );
* var y = quantile( 0.2 );
* // returns 1
*
* y = quantile( 0.9 );
* // returns 4
*/
function factory( m, n, k ) {
	if (
		isnan( m ) ||
		isnan( n ) ||
		isnan( k )
	) {
		return nan;
	}
	if (
		!isNonNegativeInteger( m ) ||
		!isNonNegativeInteger( n ) ||
		!isNonNegativeInteger( k ) ||
		m === PINF ||
		n === PINF ||
		k > m + n
	) {
		return nan;
	}
	/**
	* Evaluates the quantile function for a hypergeometric distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*/
	return function quantile( p ) {
		var finished;
		var prob;
		var x;

		finished = false;
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return max( 0, k - n );
		}
		if ( p === 1.0 ) {
			return min( k, m );
		}
		x = max( 0, k - n );
		while ( !finished ) {
			prob = cdf( x, m, n, k );
			if ( prob > p ) {
				finished = true;
			} else {
				x++;
			}
		}
		return x;
	}; // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
