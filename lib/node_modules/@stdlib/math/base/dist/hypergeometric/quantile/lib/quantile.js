'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// FUNCTIONS //

var max = Math.max;
var min = Math.min;


// MAIN //

/**
* Evaluates the quantile function for a hypergeometric distribution with number of white balls in urn `m` and number of black balls in urn `n` and number of draws `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} m - number of white balls in urn
* @param {NonNegativeInteger} n - number of black balls in urn
* @param {NonNegativeInteger} k - number of draws
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 20, 20, 10 );
* // returns 5
* @example
* var y = quantile( 0.8, 40, 20, 20 );
* // returns 15
* @example
* var y = quantile( 0.5, 10, 90, 10 )
* // returns 1
* @example
* var y = quantile( 0.0, 40, 60, 20 )
* // returns 0
* @example
* var y = quantile( 1.0, 40, 60, 20 )
* // returns 20
* @example
* var y = quantile( NaN, 20, 20, 10 );
* // returns NaN
* @example
* var y = quantile( 0.2, NaN, 20, 10 );
* // returns NaN
* @example
* var y = quantile( 0.2, 20, NaN, 10 );
* // returns NaN
* @example
* var y = quantile( 0.2, 20, 20, NaN );
* // returns NaN
*/
function quantile( p, m, n, k ) {
	var finished;
	var prob;
	var x;

	if (
		isnan( p ) ||
		isnan( m ) ||
		isnan( n ) ||
		isnan( k )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( m ) ||
		!isNonNegativeInteger( n ) ||
		!isNonNegativeInteger( k ) ||
		m === PINF ||
		n === PINF ||
		k > m + n
	) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return max( 0, k - n );
	}
	if ( p === 1.0 ) {
		return min( k, m );
	}
	x = max( 0, k - n );
	finished = false;
	while ( !finished ) {
		prob = cdf( x, m, n, k );
		if ( prob > p ) {
			finished = true;
		} else {
			x++;
		}
	}
	return x;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
