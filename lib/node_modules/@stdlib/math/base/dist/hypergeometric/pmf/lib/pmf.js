'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// FUNCTIONS //

var max = Math.max;
var min = Math.min;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a hypergeometric distribution with number of white balls in urn `m` and number of black balls in urn `n` and number of draws `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} m - number of white balls in urn
* @param {NonNegativeInteger} n - number of black balls in urn
* @param {NonNegativeInteger} k - number of draws
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 1.0, 4, 4, 2 );
* // returns ~0.571
* @example
* var y = pmf( 2.0, 4, 4, 2 );
* // returns ~0.214
* @example
* var y = pmf( 0.0, 4, 4, 2 )
* // returns ~0.214
* @example
* var y = pmf( 1.5, 4, 4, 2 );
* // returns 0.0
* @example
* var y = pmf( NaN, 5, 5, 2 );
* // returns NaN
* @example
* var y = pmf( 0.0, NaN, 5, 2 );
* // returns NaN
* @example
* var y = pmf( 0.0, 5, NaN, 2 );
* // returns NaN
* @example
* var y = pmf( 0.0, 5, 5, NaN );
* // returns NaN
* @example
* var y = pmf( 2.0, 1.5, 5, 2 );
* // returns NaN
* @example
* var y = pmf( 2.0, 5, 1.5, 2 );
* // returns NaN
* @example
* var y = pmf( 2.0, 5, 5, -2.0 );
* // returns NaN
* @example
* var y = pmf( 2.0, 5, 5, 12 );
* // returns NaN
* @example
* var y = pmf( 2.0, 5, 3, 9 );
* // returns NaN
*/
function pmf( x, m, n, k ) {
	var ldenom;
	var lnum;
	var lpmf;
	var maxs;
	var mins;

	if (
		isnan( x ) ||
		isnan( m ) ||
		isnan( n ) ||
		isnan( k )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( m ) ||
		!isNonNegativeInteger( n ) ||
		!isNonNegativeInteger( k ) ||
		m === PINF ||
		n === PINF ||
		k > m + n
	) {
		return NaN;
	}
	mins = max( 0, k - n );
	maxs = min( m, k );
	if (
		isNonNegativeInteger( x ) &&
		mins <= x &&
		x <= maxs
	) {
		lnum = fln( k ) + fln( m ) + fln( m + n - k) + fln( n );
		ldenom = fln( m + n ) + fln( x ) + fln( k - x ) + fln( m - x ) + fln( n + x - k );
		lpmf = lnum - ldenom;
		return exp( lpmf );
	}
	return 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;
