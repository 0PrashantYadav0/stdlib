'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// FUNCTIONS //

var max = Math.max;
var min = Math.min;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with number of white balls in urn `m`, number of black balls in urn `n` and number of draws `k`.
*
* @param {NonNegativeInteger} m - number of white balls in urn
* @param {NonNegativeInteger} n - number of black balls in urn
* @param {NonNegativeInteger} k - number of draws
* @returns {Function} PMF
*
* @example
* var mypmf = factory( 20, 10, 5 );
* var y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/
function factory( m, n, k ) {
	var maxs;
	var mins;
	if (
		isnan( m ) ||
		isnan( n ) ||
		isnan( k )
	) {
		return nan;
	}
	if (
		!isNonNegativeInteger( m ) ||
		!isNonNegativeInteger( n ) ||
		!isNonNegativeInteger( k ) ||
		m === PINF ||
		n === PINF ||
		k > m + n
	) {
		return nan;
	}

	mins = max( 0, k - n );
	maxs = min( m, k );
	/**
	* Evaluates the probability mass function (PMF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*/
	return function pmf( x ) {
		var ldenom;
		var lnum;
		var lpmf;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			isNonNegativeInteger( x ) &&
			mins <= x &&
			x <= maxs
		) {
			lnum = fln( k ) + fln( m ) + fln( m + n - k) + fln( n );
			ldenom = fln( m + n ) + fln( x ) + fln( k - x ) + fln( m - x ) + fln( n + x - k );
			lpmf = lnum - ldenom;
			return exp( lpmf );
		}
		return 0.0;
	}; // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
