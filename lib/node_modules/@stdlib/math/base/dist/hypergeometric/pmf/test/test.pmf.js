'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var pmf = require( './../lib' );


// FIXTURES //

var data = require( './fixtures/julia/data.json' );


// FUNCTIONS //

function almostEqual( a, b, tol ) {
	var delta = abs( a - b );
	tol = tol * abs( b );
	return ( delta <= tol );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof pmf, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var y = pmf( NaN, 10, 10, 5 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = pmf( 0.0, NaN, 10, 5 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = pmf( 0.0, 10, NaN, 5 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = pmf( 0.0, 10, 10, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided an integer `x` greater than `min( k, m )`, the function returns `0` (provided all parameters are valid)', function test( t ) {
	var y = pmf( PINF, 20, 20, 10 );
	t.equal( y, 0.0, 'returns 0' );

	y = pmf( 11, 20, 20, 10 );
	t.equal( y, 0.0, 'returns 0' );

	y = pmf( 100, 20, 20, 10 );
	t.equal( y, 0.0, 'returns 0' );

	t.end();
});

tape( 'if provided an integer for `x` smaller than `max( 0, k - n )`, the function returns `0`', function test( t ) {
	var y = pmf( NINF, 20, 20, 10 );
	t.equal( y, 0.0, 'returns 0' );

	y = pmf( -1.0, 20, 20, 10 );
	t.equal( y, 0.0, 'returns 0' );

	y = pmf( -2.0, 20, 10, 20 );
	t.equal( y, 0.0, 'returns 0' );

	t.end();
});

tape( 'if provided a `m` which is not a non-negative integer, the function returns `NaN`', function test( t ) {
	var y;

	y = pmf( 2.0, 3.5, 20, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 2.0, -2, 20, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 2.0, -1, 20, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 0.0, 2.5, 20, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 0.0, PINF, 20, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a `n` which is not a non-negative integer, the function returns `NaN`', function test( t ) {
	var y;

	y = pmf( 2.0, 20, 3.5, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 2.0, 20, -2, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 2.0, 20, -1, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 0.0, 20, 2.5, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 0.0, 20, PINF, 10 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a `k` which is not a non-negative integer, the function returns `NaN`', function test( t ) {
	var y;

	y = pmf( 2.0, 20, 20, 3.5 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 2.0, 20, 20, -2 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 2.0, 20, 20, -1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 0.0, 20, 20, 2.5 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = pmf( 0.0, 20, 20, PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the function evaluates the pmf for `x`', function test( t ) {
	var expected;
	var bool;
	var tol;
	var x;
	var m;
	var n;
	var k;
	var y;
	var i;

	tol = 2e-12;

	expected = data.expected;
	x = data.x;
	m = data.m;
	n = data.n;
	k = data.k;
	for ( i = 0; i < x.length; i++ ) {
		y = pmf( x[i], m[i], n[i], k[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', m: '+n[i]+', n: '+n[i]+', y: '+', k: '+k[i]+', y: '+y+', expected: '+expected[i] );
		}  else {
			bool = almostEqual( y, expected[i], tol );
			t.ok( bool, 'within tolerance. x: '+x[i]+'. m: '+m[i]+'. n: '+n[i]+'. k: '+k[i]+'. y: '+y+'. Expected: '+expected[i]+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});
