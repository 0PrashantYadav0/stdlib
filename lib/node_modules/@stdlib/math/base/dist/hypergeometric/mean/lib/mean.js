'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} expected value
*
* @example
* var mean = getMean( 16, 11, 4 );
* // returns 2.75
* @example
* var mean = getMean( 2, 1, 1 );
* // returns 0.5
* @example
* var mean = getMean( 10, 5, 12 );
* // returns NaN
* @example
* var mean = getMean( 10.3, 10, 4 );
* // returns NaN
* @example
* var mean = getMean( 10, 5.5, 4 );
* // returns NaN
* @example
* var mean = getMean( 10, 5, 4.5 );
* // returns NaN
* @example
* var mean = getMean( NaN, 10, 4 );
* // returns NaN
* @example
* var mean = getMean( 20, NaN, 4 );
* // returns NaN
* @example
* var mean = getMean( 20, 10, NaN );
* // returns NaN
*/
function getMean( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K / N );
} // end FUNCTION getMean()


// EXPORTS //

module.exports = getMean;
