'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var mean = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof mean, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var v = mean( NaN, 10, 4 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( 20, NaN, 4 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( 20, 10, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a `N` which is not a nonnegative integer, the function returns `NaN`', function test( t ) {
	var v;

	v = mean( 10.5, 4, 2 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( -2, 4, 2 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( -1, 4, 2 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( 20.5, 10, 5 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = mean( PINF, 10, 5 );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns the expected value for a hypergeometric distribution with the given parameters', function test( t ) {
	var v = mean( 10, 6, 4 );
	t.equal( v, 2.4, 'returns 4 * (6/10)' );

	v = mean( 10, 9, 7 );
	t.equal( v, 6.3, 'returns 7 * (9/10)' );

	t.end();
});
