/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var kurtosis = require( '@stdlib/math/base/dist/hypergeometric/kurtosis' );
var mean = require( '@stdlib/math/base/dist/hypergeometric/mean' );
var mode = require( '@stdlib/math/base/dist/hypergeometric/mode' );
var skewness = require( '@stdlib/math/base/dist/hypergeometric/skewness' );
var stdev = require( '@stdlib/math/base/dist/hypergeometric/stdev' );
var variance = require( '@stdlib/math/base/dist/hypergeometric/variance' );
var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' );
var quantile = require( '@stdlib/math/base/dist/hypergeometric/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function hypergeometricCDF( x ) {
	return cdf( x, this.N, this.K, this.n );
} // end FUNCTION hypergeometricCDF()

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated PMF
*/
function hypergeometricPMF( x ) {
	return pmf( x, this.N, this.K, this.n );
} // end FUNCTION hypergeometricPMF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
*/
function hypergeometricQuantile( p ) {
	return quantile( p, this.N, this.K, this.n );
} // end FUNCTION hypergeometricQuantile()


// MAIN //

/**
* Hypergeometric distribution constructor.
*
* @constructor
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @throws {TypeError} `N` must be a non-negative integer
* @throws {TypeError} `K` must be a non-negative integer
* @throws {TypeError} `n` must be a non-negative integer
* @throws {RangeError} `K` must not exceed `N`
* @throws {RangeError} `n` must not exceed `N`
* @returns {Hypergeometric} distribution instance
*
* @example
* var hypergeometric = new Hypergeometric( 10, 5, 7 );
*
* var y = hypergeometric.cdf( 0.8 );
* // returns 0.0
*
* var mode = hypergeometric.mode;
* // returns 4.0
*/
function Hypergeometric( N, K, n ) {
	if ( !(this instanceof Hypergeometric) ) {
		return new Hypergeometric( N, K, n );
	}
	if ( !isNonNegativeInteger( N ) ) {
		throw new TypeError( 'invalid input argument. Population size `N` must be a non-negative integer. Value: `' + N + '`' );
	}
	if ( !isNonNegativeInteger( K ) ) {
		throw new TypeError( 'invalid input argument. Subpopulation size `K` must be a non-negative integer. Value: `' + K + '`' );
	}
	if ( !isNonNegativeInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Number of draws `n` must be a non-negative integer. Value: `' + n + '`' );
	}
	if ( K > N ) {
		throw new RangeError( 'invalid input arguments. Subpopulation size `K` must be smaller than or equal to `N`.' );
	}
	if ( n > N ) {
		throw new RangeError( 'invalid input arguments. Number of draws `n` must be smaller than or equal to `N`.' );
	}
	Object.defineProperty( this, 'N', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return N;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( K > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `K`. Value: `' + value + '`' );
			}
			if ( n > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `n`. Value: `' + value + '`' );
			}
			N = value;
		}
	});
	Object.defineProperty( this, 'K', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return K;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			K = value;
		}
	});
	Object.defineProperty( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	return this;
} // end FUNCTION Hypergeometric()

/**
* Hypergeometric distribution excess kurtosis.
*
* @memberof Hypergeometric.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.kurtosis;
* // returns ~-0.276
*/
Object.defineProperty( Hypergeometric.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution expected value.
*
* @memberof Hypergeometric.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mean;
* // returns 3.75
*/
Object.defineProperty( Hypergeometric.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution mode.
*
* @memberof Hypergeometric.prototype
* @name mode
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mode;
* // returns 4.0
*/
Object.defineProperty( Hypergeometric.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution skewness.
*
* @memberof Hypergeometric.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.skewness;
* // returns ~-0.323
*/
Object.defineProperty( Hypergeometric.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution standard deviation.
*
* @memberof Hypergeometric.prototype
* @name stdev
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.stdev;
* // returns ~0.86
*/
Object.defineProperty( Hypergeometric.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution variance.
*
* @memberof Hypergeometric.prototype
* @name variance
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.variance;
* // returns ~0.74
*/
Object.defineProperty( Hypergeometric.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.N, this.K, this.n );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Hypergeometric.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {Probability} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.cdf( 0.5 );
* // returns ~0.214
*/
setReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );

/**
* Evaluates the probability density function (PMF).
*
* @memberof Hypergeometric.prototype
* @name pmf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.pmf( 2.0 );
* // returns ~0.214
*/
setReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );

/**
* Evaluates the quantile function.
*
* @memberof Hypergeometric.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.quantile( 0.8 );
* // returns 2.0
*/
setReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );


// EXPORTS //

module.exports = Hypergeometric;
