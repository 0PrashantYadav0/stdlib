'use strict';

// FUNCTIONS //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// FACTORY //

/**
* Returns a function for evaluating the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 1.0 );
* // returns ~0.541
* y = pdf( 0.1 );
* // returns ~0.392
*/
function factory( sigma ) {
	var s2;
	var s2i;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	/**
	* Evaluates the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	return function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		return s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
