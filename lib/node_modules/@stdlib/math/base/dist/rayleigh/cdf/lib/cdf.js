'use strict';

// FUNCTIONS //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );


// CDF //

/**
* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.199
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.118
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, sigma ) {
	var s2;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x < 0.0 ? 0.0 : 1.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	return -expm1( - pow( x, 2.0 ) / ( 2.0 * s2 ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;
