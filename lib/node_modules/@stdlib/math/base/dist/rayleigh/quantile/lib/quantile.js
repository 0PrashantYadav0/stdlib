'use strict';

// FUNCTIONS //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// QUANTILE //

/**
* Evaluates the quantile function for a Rayleigh distribution with scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.794
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
* @example
* var y = quantile( 1.1, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return 0.0;
	}
	return sigma * sqrt( -ln( pow( 1.0 - p, 2.0 ) ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
