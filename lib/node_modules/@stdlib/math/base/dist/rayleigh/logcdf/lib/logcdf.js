'use strict';

// FUNCTIONS //

var expm1 = require( '@stdlib/math/base/special/expm1' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// CDF //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns ~-1.614
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-2.137
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function logcdf( x, sigma ) {
	var s2;
	var p;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x < 0.0 ? NINF : 0.0;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	s2 = pow( sigma, 2.0 );
	p = -pow( x, 2.0 ) / ( 2.0 * s2 );
	return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;
