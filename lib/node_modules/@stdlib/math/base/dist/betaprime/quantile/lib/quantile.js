'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	var x;
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	x = betaincinv( p, alpha, beta );
	return x / ( 1.0-x );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;
