/**
* Test if a numeric value is infinite.
*/
#include <nan.h>
#include "is_infinite.h"

/**
* Add-on namespace.
*/
namespace addon_base_is_infinite {

	using Nan::FunctionCallbackInfo;
	using Nan::ThrowTypeError;
	using Nan::ThrowError;
	using v8::Boolean;
	using v8::Local;
	using v8::Value;

	/**
	* Tests if a numeric value is infinite.
	*
	* When called from JavaScript, the function expects one argument:
	*
	* * __x__: a number.
	*
	* @param info   arguments
	*/
	void node_is_infinite( const FunctionCallbackInfo<Value>& info ) {
		if ( info.Length() != 1 ) {
			ThrowError( "invalid invocation. Must provide a number." );
			return;
		}
		if ( !info[ 0 ]->IsNumber() ) {
			info.GetReturnValue().Set( false );
			return;
		}
		const double x = info[ 0 ]->NumberValue();

		Local<Boolean> b = Nan::New( stdlib_base_is_infinite( x ) );
		info.GetReturnValue().Set( b );
	}

	NAN_MODULE_INIT( Init ) {
		Nan::Export( target, "isInfinite", node_is_infinite );
	}

	NODE_MODULE( addon, Init )
} // end namespace addon_base_is_infinite
