/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var floor = require( '@stdlib/math/base/special/floor' );
var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );


// MAIN //

/**
* Returns a boolean indicating whether a number is a prime.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether a value is a prime number
*
* @example
* var bool = isPrime( 5.0 );
* // returns true
*
* @example
* var bool = isPrime( 4.0 );
* // returns false
*/
function isPrime( x ) {
	var N;
	var i;

	// Check whether the number is an integer...
	if ( floor( x ) !== x ) {
		return false;
	}
	// Check whether the number is positive...
	if ( x <= 3 ) {
		return (x > 1); // primes: 2, 3
	}
	// Check whether the number is even...
	if ( x > FLOAT64_MAX_SAFE_INTEGER || x%2 === 0 ) {
		return false;
	}
	// Check for primes `5` and `7`...
	if ( x < 9 ) {
		return true;
	}
	// Check whether the number is evenly divisible by `3`...
	if ( x%3 === 0 ) {
		return false;
	}
	// Use trial division to detect composite numbers, leveraging the fact that all primes greater than `3`` are of the form `6kÂ±1`...
	N = floor( sqrt( x ) );
	for ( i = 5; i <= N; i += 6 ) {
		if ( x%i === 0 || x%(i+2) === 0 ) {
			return false;
		}
	}
	return true;
}


// EXPORTS //

module.exports = isPrime;
