/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var randu = require( '@stdlib/random/base/randu' );
var discreteUniform = require( '@stdlib/random/base/discrete-uniform' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PRIMES = require( './fixtures/primes.json' );
var isPrime = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isPrime, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a prime number', function test( t ) {
	var N;
	var v;
	var i;
	var j;

	t.equal( isPrime( 2 ), true, 'returns expected value' );
	t.equal( isPrime( 3 ), true, 'returns expected value' );
	t.equal( isPrime( 5 ), true, 'returns expected value' );
	t.equal( isPrime( 7 ), true, 'returns expected value' );
	t.equal( isPrime( 11 ), true, 'returns expected value' );
	t.equal( isPrime( 13 ), true, 'returns expected value' );
	t.equal( isPrime( 17 ), true, 'returns expected value' );
	t.equal( isPrime( 19 ), true, 'returns expected value' );
	t.equal( isPrime( 23 ), true, 'returns expected value' );
	t.equal( isPrime( 29 ), true, 'returns expected value' );
	t.equal( isPrime( 31 ), true, 'returns expected value' );

	N = PRIMES.length - 1;
	for ( i = 0; i < 1e3; i++ ) {
		j = discreteUniform( 0, N );
		v = PRIMES[ j ];
		t.equal( isPrime( v ), true, 'returns true when provided '+v );
	}
	t.end();
});

tape( 'the function returns `false` if provided a composite number', function test( t ) {
	var values;
	var v;
	var i;

	values = [
		4,
		6,
		8,
		9,
		10,
		12,
		14,
		15,
		16,
		18,
		20,
		21,
		22,
		24,
		25,
		26,
		27,
		28,
		30,
		32,
		33,
		34,
		35,
		36,
		38,
		39,
		40,
		42,
		44,
		45,
		46,
		48,
		49,
		50,
		51,
		52,
		54,
		100,
		3333
	];

	for ( i = 0; i < values.length; i++ ) {
		v = values[ i ];
		t.equal( isPrime( v ), false, 'returns false when provided '+v );
	}
	t.end();
});

tape( 'the function returns `false` if not provided a positive integer', function test( t ) {
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		v = ( randu()*100.0 ) - 50.0;
		if ( trunc(v) !== v ) {
			t.equal( isPrime( v ), false, 'returns false when provided '+v );
		}
	}
	t.end();
});

tape( 'the function returns `false` if provided `NaN`', function test( t ) {
	t.equal( isPrime( NaN ), false, 'returns expected value' );
	t.end();
});

tape( 'the function returns `false` if provided `+infinity`', function test( t ) {
	t.equal( isPrime( PINF ), false, 'returns expected value' );
	t.end();
});

tape( 'the function returns `false` if provided `-infinity`', function test( t ) {
	t.equal( isPrime( NINF ), false, 'returns expected value' );
	t.end();
});
