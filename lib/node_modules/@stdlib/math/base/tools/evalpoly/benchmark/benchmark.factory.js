'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pkg = require( './../package.json' ).name;
var factory = require( './../lib/factory.js' );


// MAIN //

bench( pkg+'::create:factory', function benchmark( b ) {
	var c;
	var f;
	var i;

	c = new Array( 10 );
	for ( i = 0; i < c.length; i++ ) {
		c[ i ] = randu();
	}
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		c[ 0 ] = randu();
		f = factory( c );
		if ( typeof f !== 'function' ) {
			b.fail( 'should return a function' );
		}
	}
	b.toc();
	if ( typeof f !== 'function' ) {
		b.fail( 'should return a function' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::evaluate:factory', function benchmark( b ) {
	var x;
	var v;
	var f;
	var c;
	var i;

	c = new Array( 10 );
	for ( i = 0; i < c.length; i++ ) {
		c[ i ] = randu();
	}
	f = factory( c );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = randu() * 100.0;
		v = f( x );
		if ( isnan( v ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( v ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
