'use strict';

var hasGeneratorsSupport = require( '@stdlib/utils/detect-generator-support' )();
var log1p = require( '@stdlib/math/base/special/log1p' );
var sumSeries = require( './../lib' );

var generator;
function createGenerator() {
	var str = 'generator = function* generator( x ) {';
	str += 'var k = 0;';
	str += 'var m_mult = -x;';
	str += 'var m_prod = -1;';
	str += 'while ( true ) {';
	str += 'm_prod *= m_mult;';
	str += 'yield ( m_prod / ++k )';
	str += '}';
	str += '}';
	return eval( str );
}

if ( hasGeneratorsSupport ) {
	createGenerator();
	console.log( 'log1p(0.5) evaluated via infinite series expansion (generator): %d', sumSeries( generator( 0.5 ) ) );
}
console.log( 'log1p(0.5) evaluated via infinite series expansion (closure): %d', sumSeries( closure( 0.5 ) ) );
console.log( 'log1p(0.5) evaluated via log1p module: %d', log1p( 0.5 ) );


function closure( x ) {
	var k = 0;
	var m_mult = -x;
	var m_prod = -1;
	return function next() {
		m_prod *= m_mult;
		return ( m_prod / ++k );
	};
}
