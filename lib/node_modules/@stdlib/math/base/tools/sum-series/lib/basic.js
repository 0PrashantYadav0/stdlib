'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/math/constants/float64-eps' );


// VARIABLES //

var MAX_TERMS = 1000000;


// SUM SERIES //

/**
* Sum the element of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [opts] - function options
* @param {PositiveInteger} [opts.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [opts.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [opts.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
* 	var exponent = -1;
* 	return function() {
* 		exponent += 1;
* 		return Math.pow( x, exponent );
* 	};
* }
*/
function sum_series( generator, options ) {
	var next_term;
	var tolerance;
	var counter;
	var result;
	var opts;

	opts = {};

	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || TOLERANCE;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	// Repeatedly call function...
	do {
		next_term = generator();
		result += next_term;
	}
	while( ( abs(tolerance * result) < abs(next_term) ) && --counter );

	return result;
} // end FUNCTION sum_series()


// EXPORTS //

module.exports = sum_series;
