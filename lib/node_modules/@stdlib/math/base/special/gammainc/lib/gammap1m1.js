'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/gamma.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );


// MAIN //

/**
* Computes `Î“(x+1) - 1`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammap1m1( 1e-3 );
* // returns ~-0.001
* @example
* var v = gammap1m1( -3/2 );
* // returns ~-4.545
* @example
* var v = gammap1m1( 4.0 );
* // returns 23
* @example
* var v = gammap1m1( 1/2 );
* // returns ~-0.114
* @example
* var v = gammap1m1( NaN );
* // returns NaN
*/
function gammap1m1( x ) {
	var result;
	if ( x < 0.0 ) {
		if ( x < -0.5 ) {
			// Best method is simply to subtract 1 from gamma:
			result = gamma( 1.0 + x ) - 1.0;
		} else {
			// Use expm1 on gammaln:
			result = expm1( -log1p(x) + gammaln( x + 2.0 ) );
		}
	} else {
		if ( x < 2.0 ) {
			// Use expm1 on gammaln:
			result = expm1( gammaln( x + 1.0 ) );
		} else {
			// Best method is simply to subtract 1 from gamma:
			result = gamma( 1.0 + x ) - 1.0;
		}
	}
	return result;
} // end FUNCTION gammap1m1()


// EXPORTS //

module.exports = gammap1m1;
