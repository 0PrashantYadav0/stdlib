#include <random>
#include <algorithm>
#include <iterator>
#include <vector>
#include <iostream>
#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_int_distribution.hpp>
#include <boost/math/special_functions/gamma.hpp>

using namespace std;

boost::random::mt19937 gen;

/**
* Generates a random integer between `start` and `end`.
*
* @param start   minimum value
* @param end     maximum value
* @return random integer
*/
int generate_integer( int start, int end ) {
	boost::random::uniform_int_distribution<> dist( start, end );
	return dist( gen );
}

/**
* Prints the elements of a vector as JSON.
*
* @param vec    input vector
* @param last   boolean indicating whether last vector in JSON object
* @return string representation of vector for JSON output
*/
void print_vector( vector<double> vec, bool last = false ) {
	int precision = std::numeric_limits<double>::max_digits10;
	cout << "[";
	for ( vector<double>::iterator it = vec.begin(); it != vec.end(); ++it ) {
		if ( vec.end() != it+1 ) {
			cout << setprecision( precision ) << *it;
			cout << ",";
		} else {
			cout << setprecision( precision ) << *it;
			cout << "]";
			if ( last == false ) {
				cout << ",";
			}
		}
	}
	return;
}

/**
* Prints the results as JSON.
*
* @param z          first gamma parameter
* @param delta      difference
* @param expected   ratio of gamma functions
* @return JSON string
*/
void print_results(
	vector<double> z,
	vector<double> delta,
	vector<double> expected
) {
	cout << "{" << endl;
	cout << "  \"z\": ";
	print_vector( z );
	cout << "  \"delta\": ";
	print_vector( delta );
	cout << "  \"expected\": ";
	print_vector( expected, true );
	cout << "}" << endl;
	return;
}

/**
* Main execution sequence.
*/
int main() {
	random_device rd;
	mt19937 g(rd());

	vector<double> z(1000);
	vector<double> delta(1000);
	vector<double> expected(1000);

	for ( int i = 0; i < 1000; i++  ) {
		int arg1 = generate_integer( 50, 300 );
		z[ i ] = (double) arg1;
		int arg2 =  generate_integer( 50, 300 );
		delta[ i ] = (double) arg2;
		expected[ i ] = boost::math::tgamma_delta_ratio( arg1, arg2 );
	}
	print_results( z, delta, expected );
	return 0;
}
