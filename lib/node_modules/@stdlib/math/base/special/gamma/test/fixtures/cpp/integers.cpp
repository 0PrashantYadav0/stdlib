#include <random>
#include <algorithm>
#include <iterator>
#include <vector>
#include <iostream>
#include <boost/math/special_functions/gamma.hpp>

using namespace std;

/**
* Prints the elements of a vector as JSON.
*
* @param vec    input vector
* @param last   boolean indicating whether last vector in JSON object
* @return string representation of vector for JSON output
*/
void print_vector( vector<double> vec, bool last = false ) {
	int precision = std::numeric_limits<double>::max_digits10;
	cout << "[";
	for ( vector<double>::iterator it = vec.begin(); it != vec.end(); ++it ) {
		if ( vec.end() != it+1 ) {
			cout << setprecision( precision ) << *it;
			cout << ",";
		} else {
			cout << setprecision( precision ) << *it;
			cout << "]";
			if ( last == false ) {
				cout << ",";
			}
		}
	}
	return;
}

/**
* Prints the results as JSON.
*
* @param x          input values
* @param expected   expected values
* @return           JSON string
*/
void print_results(
	vector<double> x,
	vector<double> expected
) {
	cout << "{" << endl;
	cout << "  \"x\": ";
	print_vector( x );
	cout << "  \"expected\": ";
	print_vector( expected, true );
	cout << "}" << endl;
	return;
}

/**
* Main execution sequence.
*/
int main() {
	vector<double> x(171);
	vector<double> expected(171);

	for ( int i = 0; i < 171; i++ ) {
		x[ i ] = i+1;
		expected[ i ] = tgamma( i+1 );
	}
	print_results( x, expected );
	return 0;
}
