'use strict';

// MAIN //

/**
* Computes an absolute value of a signed 32-bit integer in two's complement format.
*
* ## Method
*
* * Assume two's complement format.
* * Create a mask by applying a sign propagating right-shift. For negative integers, this results in all `1`'s. For nonnegative integers, this results in all `0`'s.
* * XOR the mask with `x`. For negative integers, this is the equivalent of a NOT. For nonnegative integers, this is a no-op.
* * Subtract the mask to recover the absolute value. For negative integers, this adds `1`, which is `-x` when using two's complement. For nonnegative integers, this subtracts `0`.
*
* @private
* @param {integer32} x - integer
* @returns {integer32} absolute value
*
* @example
* var v = labs( -10 );
* // returns 10
*/
function labs( x ) {
	var mask = ( x >> 31 );
	return ((x ^ mask) - mask)|0; // asm type annotation
} // end FUNCTION labs()


// EXPORTS //

module.exports = labs;
