'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var cosKernel = require( './cos_kernel.js' );
var sinKernel = require( './sin_kernel.js' );
var remPio2 = require( './rem_pio2.js' );


// SIN //

/**
* Computes the sine of a number.
*
* #### Method
*
* * Let S, C and T denote the sin, cos and tan respectively on [-PI/4, +PI/4]. Reduce the argument x to y1+y2 = x-k*pi/2 in [-pi/4 , +pi/4], and let n = k mod 4. We have
*
* | n   |  sin(x)  |  cos(x)  |  tan(x)  |
* | --- |----------|----------|----------|
* |  0  |     S    |     C    |    T     |
* |  1  |     C    |    -S    |   -1/T   |
* |  2  |    -S    |    -C    |    T     |
* |  3  |    -C    |     S    |   -1/T   |
*
* @param {number} x - input value
* @returns {number} sine (in radians)
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
* @example
* var v = sin( Math.PI/2.0 );
* // returns ~1.0
* @example
* var v = sin( -Math.PI/6.0 );
* // returns ~-0.5
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;
	var y;
	var z;

	y = new Array( 2 );
	z = 0.0;
	ix = getHighWord( x );

	// Case: |x| ~< pi/4
	ix &= 0x7fffffff;
	if ( ix <= 0x3fe921fb ) {
		if ( ix < 0x3e500000 ){
			// Case:|x| < 2**-26
			if( x|0 === 0 ) {
				return x;
			}
		}
		return sinKernel( x, z, 0 );
	}
	// sin(Inf or NaN) is NaN...
	else if ( ix>=0x7ff00000 ) {
		return NaN;
	}
	// Argument reduction needed...
	else {
		n = remPio2( x, y );
		switch ( n & 3 ) {
		case 0:
			return sinKernel( y[0], y[1], 1 );
		case 1:
			return cosKernel( y[0], y[1] );
		case 2:
			return -sinKernel( y[0], y[1], 1 );
		default:
			return -cosKernel( y[0], y[1] );
		}
	}
} // end FUNCTION sin()


// EXPORTS //

module.exports = sin;
