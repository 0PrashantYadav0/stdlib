'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var abs = require( '@stdlib/math/base/special/abs' );
var sin = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof sin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the sine', function test( t ) {
	var delta;

	delta = abs( sin( 0 ) - 0 );
	t.ok( delta < 1e-14, 'approx 0' );

	delta = abs( sin( PI ) - 0 );
	t.ok( delta < 1e-14, 'approx 0' );

	delta = abs( sin( PI/6 ) - 0.5 );
	t.ok( delta < 1e-14, 'approx 1/2' );

	delta = abs( sin( -PI/6 ) + 0.5 );
	t.ok( delta < 1e-14, 'approx -1/2' );

	delta = abs( sin( PI/2 ) - 1 );
	t.ok( delta < 1e-14, 'approx 1' );

	delta = abs( sin( -PI/2 ) + 1 );
	t.ok( delta < 1e-14, 'approx -1' );

	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = sin( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `+infinity`', function test( t ) {
	var v = sin( PINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `-infinity`', function test( t ) {
	var v = sin( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});
