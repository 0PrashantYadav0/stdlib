'use strict';

// MODULES //

var tape = require( 'tape' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof exp, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the natural exponential function', function test( t ) {
	var delta;

	// TODO: extensive testing

	// Compared against output from Julia...
	delta = abs( exp( 4 ) - 54.598150033144236);
	t.ok( delta < 1e-14, 'equals ~54.598150033144236' );

	delta = abs( exp( -9 ) - 1.2340980408667956e-4 );
	t.ok( delta < 1e-14, 'equals ~1.2340980408667956e-4' );

	t.equal( exp( 0 ), 1, 'equals 1' );
	t.end();
});

tape( 'the function returns `0` if provided a `-infinity`', function test( t ) {
	var val = exp( NINF );
	t.equal( val, 0, 'returns 0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided a `+infinity`', function test( t ) {
	var val = exp( PINF );
	t.equal( val, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var val = exp( NaN );
	t.equal( isnan( val ), true, 'returns NaN' );
	t.end();
});
