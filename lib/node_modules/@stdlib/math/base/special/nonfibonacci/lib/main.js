'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var ln = require( '@stdlib/math/base/special/ln' );
var floor = require( '@stdlib/math/base/special/floor' );
var PHI = require( '@stdlib/math/constants/float64-phi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// VARIABLES //

var SQRT_5 = 2.23606797749979;
var LN_PHI = ln( PHI );


// MAIN //

/**
* Computes the nth non-Fibonacci number.
*
* @param {NonNegativeInteger} n - the non-Fibonacci number to compute
* @returns {NonNegativeInteger} non-Fibonacci number
*
* @example
* var v = nonfibonacci( 1 );
* // returns 4
*
* @example
* var v = nonfibonacci( 2 );
* // returns 6
*
* @example
* var v = nonfibonacci( 3 );
* // returns 7
*
* @example
* var v = nonfibonacci( NaN );
* // returns NaN
*
* @example
* var v = nonfibonacci( 3.14 );
* // returns NaN
*
* @example
* var v = nonfibonacci( -1 );
* // returns NaN
*/
function nonfibonacci( n ) {
	var a;
	var b;
	if (
		isnan( n ) ||
		isInteger( n ) === false ||
		n < 1 ||
		n === PINF
	) {
		return NaN;
	}
	n += 1;
	a = ln( n * SQRT_5 ) / LN_PHI;
	b = ln( (SQRT_5 * (n+a)) - 5.0 + (3.0/n) ) / LN_PHI;
	return floor( n + b - 2.0 );
} // end FUNCTION nonfibonacci()


// EXPORTS //

module.exports = nonfibonacci;
