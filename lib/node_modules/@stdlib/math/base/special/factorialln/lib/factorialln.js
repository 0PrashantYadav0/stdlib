'use strict';

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isInteger = require( '@stdlib/math/base/utils/is-integer' );
var ln = require( '@stdlib/math/base/special/ln' );
var FACTORIALS = require( './factorials.json' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// NATURAL LOGARITHM FACTORIAL //

/**
* Evaluate the natural logarithm factorial of x.
*
* @param {Number} x - input value
* @returns {Number} natural logarithm factorial of x
*
* @example
* var v = factorialln( 3 );
* // returns ~1.792
* @example
* var v = factorialln( 2.4 );
* // returns ~1.092
* @example
* var v = factorialln( -1 );
* // returns +Infinity
* @example
* var v = factorialln( -1.5 );
* // returns ~1.266
* @example
* var v = factorialln( NaN );
* // returns NaN
*/
function factorialln( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x === PINF || x === NINF ) {
		return PINF;
	}
	if ( isInteger( x ) ) {
		if ( x < 0 ) {
			return PINF;
		}
		if  ( x <= 256 ) {
			return FACTORIALS[ x ];
		} else {
			var x1 = x + 1;
			return ( x1 - 0.5) * ln(x1) - x1 + 0.5 * ln( 2 * PI ) + 1 / ( 12 * x1 );
		}
	}
	return gammaln( x + 1 );
} // end FUNCTION factorialln()


// EXPORTS //

module.exports = factorialln;
