'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.1:  January, 1989
* Copyright 1984, 1987, 1989 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cos = require( '@stdlib/math/base/special/cos' );
var sin = require( '@stdlib/math/base/special/sin' );
var ln = require( '@stdlib/math/base/special/ln' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// VARIABLES //

var SN = [
	1.00000000000000000302e0,
	-4.13470316229406538752e-2,
	9.76945438170435310816e-4,
	-9.75759303843632795789e-6,
	4.62591714427012837309e-8,
	-8.39167827910303881427e-11
];
var SD = [
	9.99999999999999996984e-1,
	1.42085239326149893930e-2,
	9.96412122043875552487e-5,
	4.41827842801218905784e-7,
	1.27997891179943299903e-9,
	2.03269266195951942049e-12
];
var CN = [
	-1.00000000000000000080e0,
	2.89159652607555242092e-2,
	-4.74007206873407909465e-4,
	3.59325051419993077021e-6,
	-1.35249504915790756375e-8,
	2.02524002389102268789e-11
];
var CD = [
	4.00000000000000000080e0,
	5.10028056236446052392e-2,
	3.17442024775032769882e-4,
	1.23210355685883423679e-6,
	3.06780997581887812692e-9,
	4.07746040061880559506e-12
];
var FN4 = [
	5.48900223421373614008e-7,
	1.08936580650328664411e-4,
	6.81020132472518137426e-3,
	1.67006611831323023771e-1,
	1.62083287701538329132e0,
	5.45937717161812843388e0,
	4.23612862892216586994e0
];
var FD4 = [
	5.48900252756255700982e-7,
	1.10034357153915731354e-4,
	7.01710668322789753610e-3,
	1.78792052963149907262e-1,
	1.86792257950184183883e0,
	7.30828822505564552187e0,
	8.16496634205391016773e0,
	1.00000000000000000000e0
];
var FN8 = [
	9.70507110881952024631e-14,
	9.41779576128512936592e-11,
	3.20092790091004902806e-8,
	4.86215430826454749482e-6,
	3.49556442447859055605e-4,
	1.16064229408124407915e-2,
	1.60300158222319456320e-1,
	7.13715274100146711374e-1,
	4.55880873470465315206e-1
];
var FD8 = [
	9.70507110881952025725e-14,
	9.43720590350276732376e-11,
	3.21956939101046018377e-8,
	4.92435064317881464393e-6,
	3.58696481881851580297e-4,
	1.22253594771971293032e-2,
	1.78685545332074536321e-1,
	9.17463611873684053703e-1,
	1.00000000000000000000e0
];
var GN4 = [
	7.82579040744090311069e-9,
	1.97963874140963632189e-6,
	1.61999794598934024525e-4,
	5.38868681462177273157e-3,
	7.48527737628469092119e-2,
	3.97180296392337498885e-1,
	6.11379109952219284151e-1,
	8.71001698973114191777e-2
];
var GD4 = [
	7.82579218933534490868e-9,
	2.02659182086343991969e-6,
	1.73221081474177119497e-4,
	6.22396345441768420760e-3,
	9.88771761277688796203e-2,
	6.66296701268987968381e-1,
	1.64402202413355338886e0,
	1.00000000000000000000e0
];
var GN8 = [
	3.14040098946363334640e-15,
	3.85945925430276600453e-12,
	1.70404452782044526189e-9,
	3.47131167084116673800e-7,
	3.48941165502279436777e-5,
	1.71718239052347903558e-3,
	3.84878767649974295920e-2,
	3.30410979305632063225e-1,
	6.97359953443276214934e-1
];
var GD8 = [
	3.14040098946363335242e-15,
	3.87830166023954706752e-12,
	1.72693748966316146736e-9,
	3.57043223443740838771e-7,
	3.68475504442561108162e-5,
	1.90284426674399523638e-3,
	4.67913194259625806320e-2,
	4.87852258695304967486e-1,
	1.68548898811011640017e0,
	1.00000000000000000000e0
];


// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalFN4 = evalpoly( FN4 );
var polyvalFD4 = evalpoly( FD4 );
var polyvalFN8 = evalpoly( FN8 );
var polyvalFD8 = evalpoly( FD8 );
var polyvalGN4 = evalpoly( GN4 );
var polyvalGD4 = evalpoly( GD4 );
var polyvalGN8 = evalpoly( GN8 );
var polyvalGD8 = evalpoly( GD8 );
var polyvalSN = evalpoly( SN );
var polyvalSD = evalpoly( SD );
var polyvalCN = evalpoly( CN );
var polyvalCD = evalpoly( CD );


// MAIN //

/**
* Computes the sine and cosine integrals.
*
* ## Method
*
* -   The integrals are approximated by rational functions.
*
* -   For \\( x > 8 \\), auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
*     ```tex
*     \operatorname{Ci}(x) = f(x) \sin(x) - g(x) \cos(x) \\
*     \operatorname{Si}(x) = \pi/2 - f(x) \cos(x) - g(x) \sin(x)
*     ```
*
* ## Notes
*
* -   Absolute error on test interval \\( \[0,50\] \\), except relative when greater than \\( 1 \\):
*
*     | arithmetic | function    | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | Si          | 30000    | 4.4e-16 | 7.3e-17 |
*     | IEEE       | Ci          | 30000    | 6.9e-16 | 5.1e-17 |
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = sici( new Array( 2 ), 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* @example
* var v = sici( new Array( 2 ), 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* @example
* var v = sici( new Array( 2 ), -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* @example
* var v = sici( new Array( 2 ), NaN );
* // returns [ NaN, NaN ]
*/
function sici( out, x ) {
	var sgn;
	var si;
	var ci;
	var c;
	var f;
	var g;
	var s;
	var z;

	if ( isnan( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x < 0.0 ) {
		sgn = -1;
		x = -x;
	} else {
		sgn = 0;
	}
	if ( x === 0.0 ) {
		out[ 0 ] = 0.0;
		out[ 1 ] = NINF;
		return out;
	}
	if ( x > 1.0e9 ) {
		if ( isInfinite( x ) ) {
			if ( sgn === -1 ) {
				si = -HALF_PI;
				ci = NaN;
			} else {
				si = HALF_PI;
				ci = 0.0;
			}
			out[ 0 ] = si;
			out[ 1 ] = ci;
			return out;
		}
		si = HALF_PI - ( cos( x ) / x );
		ci = sin( x ) / x;
	}
	if ( x > 4.0 ) {
		s = sin( x );
		c = cos( x );
		z = 1.0 / ( x*x );
		if ( x < 8.0 ) {
			f = polyvalFN4( z ) / ( x * polyvalFD4( z ) );
			g = z * polyvalGN4( z ) / polyvalGD4( z );
		} else {
			f = polyvalFN8( z ) / ( x * polyvalFD8( z ) );
			g = z * polyvalGN8( z ) / polyvalGD8( z );
		}
		si = HALF_PI - ( f*c ) - ( g*s );
		if ( sgn ) {
			si = -si;
		}
		ci = ( f*s ) - ( g*c );
		out[ 0 ] = si;
		out[ 1 ] = ci;
		return out;
	}
	z = x * x;
	s = x * polyvalSN( z ) / polyvalSD( z );
	c = z * polyvalCN( z ) / polyvalCD( z );
	if ( sgn ) {
		s = -s;
	}
	si = s;
	ci = GAMMA + ln( x ) + c; // real part if x < 0
	out[ 0 ] = si;
	out[ 1 ] = ci;
	return out;
} // end FUNCTION sici()


// EXPORTS //

module.exports = sici;
