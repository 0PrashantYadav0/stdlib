'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );
var lower_gamma_series = require( './lower_gamma_series.js' );
var upper_gamma_fraction = require( './upper_gamma_fraction.js' );


// IBETA POWER TERMS //

function ibeta_power_terms( a, b, x, y, normalised ) {
	var result;
	var lb1;
	var lb2;
	var la;
	var e1;
	var b1;
	var b2;
	var lb;
	var lc;
	var p1;
	var p2;
	var p3;
	var sa;
	var sb;
	var sc;
	var c;

	if ( !normalised ) {
		return pow( x, a ) * pow( y, b );
	}
	result = 0.0;
	c = a + b;
	// Integration limits for the gamma functions:
	la = a + 5.0;
	lb = b + 5.0;
	lc = a + b + 5.0;
	// Gamma function partials:
	sa = lower_gamma_series( a, la ) / a;
	sa += upper_gamma_fraction( a, la );
	sb = lower_gamma_series( b, lb ) / b;
	sb += upper_gamma_fraction( b, lb );
	sc = lower_gamma_series( c, lc ) / c;
	sc += upper_gamma_fraction( c, lc );
	// Gamma function powers combined with incomplete beta powers:
	b1 = (x * lc) / la;
	b2 = (y * lc) / lb;
	e1 = lc - la - lb;
	lb1 = a * ln( b1 );
	lb2 = b * ln( b2 );

	if (
		lb1 >= MAX_LN || lb1 <= MIN_LN  ||
		lb2 >= MAX_LN || lb2 <= MIN_LN ||
		e1 >= MAX_LN || e1 <= MIN_LN
	) {
		result = exp( lb1 + lb2 - e1 );
	} else {
		if( abs(b1 - 1) * a < 10 && a > 1 ) {
			p1 = exp( a * log1p( (x * b - y * la) / la ) );
		} else {
			p1 = pow( b1, a );
		}
		if( abs(b2 - 1) * b < 10 && b > 1 ) {
			p2 = exp( b * log1p( (y * a - x * lb) / lb ) );
		} else {
			p2 = pow( b2, b );
		}
		p3 = exp( e1 );
		result = p1 * p2 / p3;
	}
	// Combine with the remaining gamma function components:
	result /= sa * sb / sc;
	return result;
} // end FUNCTION ibeta_power_terms()


// EXPORTS //

module.exports = ibeta_power_terms;
