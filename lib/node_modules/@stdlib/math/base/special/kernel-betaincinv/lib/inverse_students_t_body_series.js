/* eslint-disable max-len, no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var sqrt = require( '@stdlib/math/base/special/sqrt');
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

// Workspace for the polynomial coefficients:
var c = new Array( 10 );

// Polynomial coefficients:
var co1 = [
	0.16666666666666666667,
	0.16666666666666666667
];
var co2 = [
	0.058333333333333333333,
	0.066666666666666666667,
	0.0083333333333333333333
];
var co3 = [
	0.025198412698412698413,
	0.026785714285714285714,
	0.0017857142857142857143,
	0.00019841269841269841270
];
var co4 = [
	0.012039792768959435626,
	0.010559964726631393298,
	-0.0011078042328042328042,
	0.00037477954144620811287,
	2.7557319223985890653e-6
];
var co5 = [
	0.0038370059724226390893,
	0.0061039211560044893378,
	-0.0016095979637646304313,
	0.00059458674042007375341,
	-0.000062705427288760622094,
	2.5052108385441718775e-8
];
var co6 = [
	0.0032177478835464946576,
	0.0010898206731540064873,
	-0.0012579159844784844785,
	0.00069084207973096861986,
	-0.00016376804137220803887,
	0.000015401265401265401265,
	1.6059043836821614599e-10
];
var co7 = [
	0.0017438262298340009980,
	0.000033530976880017885309,
	-0.00076245135440323932387,
	0.00064513046951456342991,
	-0.00024947258047043099953,
	0.000049255746366361445727,
	-3.9851014346715404916e-6,
	7.6471637318198164759e-13
];
var co8 = [
	0.00096472747321388644237,
	-0.00031101086326318780412,
	-0.00036307660358786885787,
	0.00051406605788341121363,
	-0.00029133414466938067350,
	0.000090867107935219902229,
	-0.000015303004486655377567,
	1.0914179173496789432e-6,
	2.8114572543455207632e-15
];
var co9 = [
	0.00054229262813129686486,
	-0.00036942667800009661203,
	-0.00010230378073700412687,
	0.00035764655430568632777,
	-0.00028690924218514613987,
	0.00012645437628698076975,
	-0.000033202652391372058698,
	4.8903045291975346210e-6,
	-3.1239569599829868045e-7,
	8.2206352466243297170e-18
];


// FUNCTIONS //

var polyval1 = evalpoly.factory( co1 );
var polyval2 = evalpoly.factory( co2 );
var polyval3 = evalpoly.factory( co3 );
var polyval4 = evalpoly.factory( co4 );
var polyval5 = evalpoly.factory( co5 );
var polyval6 = evalpoly.factory( co6 );
var polyval7 = evalpoly.factory( co7 );
var polyval8 = evalpoly.factory( co8 );
var polyval9 = evalpoly.factory( co9 );


// MAIN //

/**
* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.
*
* #### References
*
* - Shaw, W.T., 2006, "Sampling Student's T distribution - use of the inverse cumulative distribution function.", Journal of Computational Finance, Vol 9 Issue 4, pp 37-73, Summer 2006 (www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf)
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTBodySeries( df, u ) {
	var idf;
	var c0;
	var v;

	// Body series for small N, start with Eq 56 of Shaw:
	v = gammaDeltaRatio( df / 2, 0.5 ) * sqrt( df * PI ) * ( u - 0.5 );
	c0 = 0;
	c[ 0 ] = 1;

	// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):
	idf = 1.0 / df;
	c[ 1 ] = polyval1( idf );
	c[ 2 ] = polyval2( idf );
	c[ 3 ] = polyval3( idf );
	c[ 4 ] = polyval4( idf );
	c[ 5 ] = polyval5( idf );
	c[ 6 ] = polyval6( idf );
	c[ 7 ] = polyval7( idf );
	c[ 8 ] = polyval8( idf );
	c[ 9 ] = polyval9( idf );

	// Result is then a polynomial in v (see Eq 56 of Shaw)...
	// evaluate_odd_polynomial:
	return c0 + ( v * evalpoly( c, v*v ) );
} // end FUNCTION inverseStudentsTBodySeries()


// EXPORTS //

module.exports = inverseStudentsTBodySeries;
