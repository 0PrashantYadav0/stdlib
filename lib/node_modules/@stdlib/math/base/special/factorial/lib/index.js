'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isInteger = require( '@stdlib/math/base/utils/is-integer' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var FACTORIALS = require( './factorials.json' );


// VARIABLES //

var MAX_FACTORIAL = 170; // FIXME: make into constant


// FACTORIAL //

/**
* FUNCTION: factorial( x )
*	Computes the factorial of x.
*
* @param {Number} x - input value
* @returns {Number} factorial
*/
function factorial( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInteger( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_FACTORIAL ) {
			return FACTORIALS[ x ];
		}
		return PINF;
	}
	return gamma( x + 1 );
} // end FUNCTION factorial()


// EXPORTS //

module.exports = factorial;
