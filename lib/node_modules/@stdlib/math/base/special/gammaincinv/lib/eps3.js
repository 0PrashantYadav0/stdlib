'use strict';

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var ak1 = [
	4.95346498136e-2,
	2.99521337141e-2,
	6.88296911516e-3,
	5.12634846317e-4,
	-2.01411722031e-5
];
var bk1 = [
	1.00000000000e+0,
	7.59803615283e-1,
	2.61547111595e-1,
	4.64854522477e-2,
	4.03751193496e-3
];

var ak2 = [
	4.52313583942e-3,
	1.20744920113e-3,
	-7.89724156582e-5,
	-5.04476066942e-5,
	-5.35770949796e-6
];
var bk2 = [
	1.00000000000e+0,
	9.12203410349e-1,
	4.05368773071e-1,
	9.01638932349e-2,
	9.48935714996e-3
];

var ak3 = [
	4.39937562904e-3,
	4.87225670639e-4,
	-1.28470657374e-4,
	5.29110969589e-6,
	1.57166771750e-7
];
var bk3 = [
	1.00000000000e+0,
	7.94435257415e-1,
	3.33094721709e-1,
	7.03527806143e-2,
	8.06110846078e-3
];

var ak4 = [
	-1.14811912320e-3,
	-1.12850923276e-1,
	1.51623048511e+0,
	-2.18472031183e-1,
	7.30002451555e-2
];
var bk4 = [
	1.00000000000e+0,
	1.42482206905e+1,
	6.97360396285e+1,
	2.18938950816e+2,
	2.77067027185e+2
];

var ak5 = [
	-1.45727889667e-4,
	-2.90806748131e-1,
	-1.33085045450e+1,
	1.99722374056e+2,
	-1.14311378756e+1
];
var bk5 = [
	1.00000000000e+0,
	1.39612587808e+2,
	2.18901116348e+3,
	7.11524019009e+3,
	4.55746081453e+4
];


// FUNCTIONS //

var rational1 = evalrational.factory( ak1, bk1 );
var rational2 = evalrational.factory( ak2, bk2 );
var rational3 = evalrational.factory( ak3, bk3 );
var rational4 = evalrational.factory( ak4, bk4 );
var rational5 = evalrational.factory( ak5, bk5 );


// MAIN //

/**
* Evaluates the `eps3` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps3( eta ) {
	var eta3;
	var x;
	var y;

	if ( eta < -8.0 ) {
		x = eta * eta;
		y = ln( -eta ) / eta;
		return ( -30.0 + ( eta*y*( (6.0*x*y*y) - 12.0+x ) ) ) /
			( 12.0 * eta * x * x );
	}
	else if ( eta < -4.0 ) {
		return rational1( eta ) / ( eta * eta );
	}
	else if ( eta < -2.0 ) {
		return rational2( eta );
	}
	else if ( eta < 2.0 ) {
		return rational3( eta );
	}
	else if ( eta < 10.0 ) {
		x = 1.0 / eta;
		return rational4( x ) / ( eta * eta );
	}
	else if ( eta < 100.0 ) {
		x = 1.0 / eta;
		return rational5( x ) / ( eta * eta );
	}
	eta3 = eta * eta * eta;
	return -ln( eta ) / ( 12.0 * eta3 );
} // end FUNCTION eps3()


// EXPORTS //

module.exports = eps3;
