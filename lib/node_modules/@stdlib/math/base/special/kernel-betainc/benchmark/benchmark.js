'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var pkg = require( './../package.json' ).name;
var kernelBetainc = require( './../lib' );


// MAIN //

bench( pkg+'::regularized,upper', function benchmark( assert ) {
	var out;
	var x;
	var a;
	var b;
	var i;

	assert.tic();
	out = new Array( 2 );
	for ( i = 0; i < assert.iterations; i++ ) {
		x = randu();
		a = ( randu()*1000.0 ) + EPS;
		b = ( randu()*1000.0 ) + EPS;
		out = kernelBetainc( out, x, a, b, true, true );
		if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
			assert.fail( 'should not return NaN' );
		}
	}
	assert.toc();
	if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
		assert.fail( 'should not return NaN' );
	}
	assert.pass( 'benchmark finished' );
	assert.end();
});

bench( pkg+'::unregularized,upper', function benchmark( assert ) {
	var out;
	var x;
	var a;
	var b;
	var i;

	assert.tic();
	out = new Array( 2 );
	for ( i = 0; i < assert.iterations; i++ ) {
		x = randu();
		a = ( randu()*1000.0 ) + EPS;
		b = ( randu()*1000.0 ) + EPS;
		out = kernelBetainc( out, x, a, b, false, true );
		if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
			assert.fail( 'should not return NaN' );
		}
	}
	assert.toc();
	if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
		assert.fail( 'should not return NaN' );
	}
	assert.pass( 'benchmark finished' );
	assert.end();
});

bench( pkg+'::regularized,lower', function benchmark( assert ) {
	var out;
	var x;
	var a;
	var b;
	var i;

	assert.tic();
	out = new Array( 2 );
	for ( i = 0; i < assert.iterations; i++ ) {
		x = randu();
		a = ( randu()*1000.0 ) + EPS;
		b = ( randu()*1000.0 ) + EPS;
		out = kernelBetainc( out, x, a, b, true, false );
		if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
			assert.fail( 'should not return NaN' );
		}
	}
	assert.toc();
	if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
		assert.fail( 'should not return NaN' );
	}
	assert.pass( 'benchmark finished' );
	assert.end();
});

bench( pkg+'::unregularized,lower', function benchmark( assert ) {
	var out;
	var x;
	var a;
	var b;
	var i;

	assert.tic();
	out = new Array( 2 );
	for ( i = 0; i < assert.iterations; i++ ) {
		x = randu();
		a = ( randu()*1000.0 ) + EPS;
		b = ( randu()*1000.0 ) + EPS;
		out = kernelBetainc( out, x, a, b, false, false );
		if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
			assert.fail( 'should not return NaN' );
		}
	}
	assert.toc();
	if ( isnan( out[ 0 ] ) || isnan( out[ 1 ] ) ) {
		assert.fail( 'should not return NaN' );
	}
	assert.pass( 'benchmark finished' );
	assert.end();
});
