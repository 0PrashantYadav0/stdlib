'use strict';

// MODULES //

var tape = require( 'tape' );
var isNaNArray = require( '@stdlib/assert/is-nan-array' );
var isArray = require( '@stdlib/assert/is-array' );
var kernelBetainc = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof kernelBetainc, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `[ NaN, NaN ]` if `x` is outside `[0,1]`', function test( t ) {
	var val = kernelBetainc( new Array( 2 ), -0.2, 1.0, 1.0, true, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), -0.2, 1.0, 1.0, false, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), -0.2, 1.0, 1.0, true, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), -0.2, 1.0, 1.0, false, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 1.1, 1.0, 1.0, true, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 1.1, 1.0, 1.0, false, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 1.1, 1.0, 1.0, false, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 1.1, 1.0, 1.0, true, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	t.end();
});

tape( 'the function returns `[ NaN, NaN ]` negative `a` or `b`', function test( t ) {
	var val = kernelBetainc( new Array( 2 ), 0.5, -1.0, 1.0, true, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, 1.0, false, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, 1.0, true, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, 1.0, false, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, 1.0, -1.0, true, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, 1.0, -1.0, false, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, 1.0, -1.0, true, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, 1.0, -1.0, false, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, -1.0, true, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, -1.0, false, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, -1.0, false, true );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	val = kernelBetainc( new Array( 2 ), 0.5, -1.0, -1.0, true, false );
	t.equal( isNaNArray( val ), true, 'returns array of NaNs' );

	t.end();
});

tape( 'the function returns a reference to the supplied destination array', function test( t ) {
	var bool;
	var out;
	var val;

	out = new Array( 2 );

	val = kernelBetainc( out, 0.5, 1.0, 1.0, true, true );
	t.equal( isArray( val ), true, 'returns an array' );
	t.equal( val.length, 2, 'returned array has two elements' );

	bool = ( val === out );
	t.ok( bool, 'returns a reference to output array' );

	t.end();
});

// TODO: Add fixtures
