'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var isinfinite = require( '@stdlib/math/base/utils/is-infinite' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );


// CONSTANTS //

var B1 = 715094163; // B1 = (1023-1023/3-0.03306235651)*2**20
var B2 = 696219795; // B2 = (1023-1023/3-54/3-0.03306235651)*2**20

// |1/cbrt(x) - p(x)| < 2**-23.5 (~[-7.93e-8, 7.929e-8]).
var P0 =  1.87595182427177009643; // 0x3ffe03e6, 0x0f61e692
var P1 = -1.88497979543377169875; // 0xbffe28e0, 0x92f02420
var P2 =  1.621429720105354466140; // 0x3ff9f160, 0x4a49d6c2
var P3 = -0.758397934778766047437; // 0xbfe844cb, 0xbee751d9
var P4 =  0.145996192886612446982; // 0x3fc2b000, 0xd4e4edd7


// CBRT //

/**
* Computes the cube root.
*
* @param {number} x - input value
* @returns {number} cube root
*
* @example
* var v = cbrt( 64.0 );
* // returns 4.0
* @example
* var v = cbrt( 27.0 );
* // returns 3.0
* @example
* var v = cbrt( 0.0 );
* // returns 0.0
* @example
* var v = cbrt( -9.0 );
* // returns ~-2.08
* @example
* var v = cbrt( NaN );
* // returns NaN
*/
function cbrt( x ) {
	var words;
	var high;
	var low;
	var sgn;
	var hx;
	var r;
	var s;
	var t = 0.0;
	var w;

	if ( isnan( x ) || isinfinite( x ) || x === 0.0 ) {
		return x;
	}

	words = toWords( x );
	hx = words[ 0 ];
	low = words[ 1 ];

	sgn = hx & 0x80000000;
	hx ^= sgn;

	if ( x < FLOAT64_SMALLEST_NORMAL ) {
		// Case: x is subnormal
		t = setHighWord( t, 0x43500000 ); // Set t = 2**54
		t *= x;
		high = getHighWord( t );
		t = fromWords( sgn|((high&0x7fffffff)/3+B2), 0 );
	} else {
		t = setHighWord( t, sgn|hx/3 + B1 );
	}
	r = (t*t) * (t / x);
	t = t*((P0+r*(P1+r*P2))+((r*r)*r)*(P3+r*P4));

	high = getHighWord( t );
	t = fromWords( high+0x00000001, 0 );

	// One step Newton iteration to 53 bits with error < 0.667 ulps...
	s = t * t; // t*t is exact
	r = x / s; // error <= 0.5 ulps; |r| < |t|
	w = t + t; // t+t is exact
	r = ( r - t ) / ( w + r ); // r-t is exact; w+r ~= 3*t
	t = t + t * r; // error <= 0.5 + 0.5/3 + epsilon
	return t;
} // end FUNCTION cbrt()


// EXPORTS //

module.exports = cbrt;
