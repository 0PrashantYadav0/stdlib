'use strict';

// MODULES //

var tape = require( 'tape' );
var abs = require( '@stdlib/math/base/special/abs' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isPositiveZero = require( '@stdlib/math/base/utils/is-positive-zero' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var pow = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof pow, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function accepts two parameters: a base and an exponent', function test( t ) {
	t.equal( pow.length, 2.0, 'arity is 2' );
	t.end();
});

tape( 'the function evaluates the exponential function', function test( t ) {
	var delta;

	t.equal( pow( 2.0, 3.0 ), 8.0, '2^3 = 8' );
	t.equal( pow( -5.0, 3.0 ), -125.0, '(-5)^3 = -125' );

	// TODO: more extensive tests for various regimes.

	// Compared against Julia:
	delta = abs( pow( Math.PI, 5.0 ) - 306.0196847852814 );
	t.ok( delta < 1.0e-14, 'pi^5 ~ 306.0196847852814' );

	t.end();
});

tape( 'the function evaluates the exponential function when provided fractional exponents', function test( t ) {
	var delta;

	t.equal( pow( 16.0, 0.5 ), 4.0, '16^0.5 = 4' );

	delta = abs( pow( 125.0, 1.0/3.0 ) - 5.0 );
	t.ok( delta < 1.0e-14, '125^1/3 ~= 5' );

	// Compared against Julia:
	delta = abs( pow( PI, -0.2 ) - 0.7953715005639397 );
	t.ok( delta < 1.0e-14, 'pi^0.2 ~ 0.7953715005639397' );

	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for the exponent', function test( t ) {
	var v;

	v = pow( -3.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( 0.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for the base', function test( t ) {
	var v;

	v = pow( NaN, 5.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( NaN, 1.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( NaN, 0.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'any number raised to the zero power is `1`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = Math.random()*1.0e6 - 5.0e5;
		v = pow( x, 0.0 );
		t.equal( v, 1.0, 'pow('+x+',0.0) returns 1' );
	}
	t.equal( pow( PINF, 0.0 ), 1.0, 'inf^0 = 1' );
	t.equal( pow( NINF, 0.0 ), 1.0, '(-inf)^0 = 1' );
	t.equal( pow( 0.0, 0.0 ), 1.0, '0^0 = 1' );
	t.end();
});

tape( 'one raised to any power is `1`', function test( t ) {
	var y;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		y = Math.random()*1.0e6 - 5.0e5;
		v = pow( 1.0, y );
		t.equal( v, 1.0, 'pow(1.0,'+y+') returns 1' );
	}
	t.equal( pow( 1.0, PINF ), 1.0, '1^inf = 1' );
	t.equal( pow( 1.0, NINF ), 1.0, '1^(-inf) = 1' );
	t.equal( pow( 1.0, 0.0 ), 1.0, '1^0 = 1' );
	t.end();
});

tape( '`+-0` raised to `-infinity` is `+infinity`', function test( t ) {
	var v;

	v = pow( +0.0, NINF );
	t.equal( v, PINF, 'returns +infinity' );

	v = pow( -0.0, NINF );
	t.equal( v, PINF, 'returns +infinity' );

	t.end();
});

tape( '`+-0` raised to `+infinity` is `0`', function test( t ) {
	var v;

	v = pow( +0.0, PINF );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	v = pow( -0.0, PINF );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	t.end();
});

tape( '`+-0` raised to any positive finite number which is not an odd integer is `0`', function test( t ) {
	var y;
	var i;
	var v;

	y = [
		2,
		3.14,
		1.0e5,
		5.1,
		9.999999
	];

	for ( i = 0; i < y.length; i++ ) {
		v = pow( +0.0, y[ i ] );
		t.equal( isPositiveZero( v ), true, 'pow(0,'+y[i]+') returns +0' );

		v = pow( -0.0, y[ i ] );
		t.equal( isPositiveZero( v ), true, 'pow(-0,'+y[i]+') returns +0' );
	}
	t.end();
});

tape( '`+-0` raised to any positive odd integer is `+-0`', function test( t ) {
	var i;
	var v;

	for ( i = 1; i < 101; i += 2 ) {
		v = pow( +0.0, i );
		t.equal( isPositiveZero( v ), true, 'pow(0,'+i+') returns +0' );

		v = pow( -0.0, i );
		t.equal( isNegativeZero( v ), true, 'pow(-0,'+i+') returns -0' );
	}
	t.end();
});

tape( '`+-0` raised to any negative finite number which is not an odd integer is `+infinity`', function test( t ) {
	var y;
	var i;
	var v;

	y = [
		-2,
		-3.14,
		-1.0e5,
		-5.1,
		-9.999999
	];

	for ( i = 0; i < y.length; i++ ) {
		v = pow( +0.0, y[ i ] );
		t.equal( v, PINF, 'pow(0,'+y[i]+') returns +infinity' );

		v = pow( -0.0, y[ i ] );
		t.equal( v, PINF, 'pow(-0,'+y[i]+') returns +infinity' );
	}
	t.end();
});

tape( '`+-0` raised to any negative odd integer is `+-infinity`', function test( t ) {
	var i;
	var v;

	for ( i = -101; i < 0; i += 2 ) {
		v = pow( +0.0, i );
		t.equal( v, PINF, 'pow(0,'+i+') returns +infinity' );

		v = pow( -0.0, i );
		t.equal( v, NINF, 'pow(-0,'+i+') returns -infinity' );
	}
	t.end();
});

tape( '`-1` raised to `+-infinity` is indeterminate and the function returns `NaN`', function test( t ) {
	var v;

	v = pow( -1.0, PINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( -1.0, NINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'raising any number to the `1/2` power returns the same results as evaluating the principal square root', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 500; i++ ) {
		x = Math.random()*1.0e5;
		v = pow( x, 0.5 );
		t.equal( v, sqrt( x ), 'returns sqrt('+x+')' );
	}
	t.end();
});

tape( 'raising any number to the `-1/2` power returns the same results as evaluating the inverse of the principal square root', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 500; i++ ) {
		x = Math.random()*1.0e5;
		v = pow( x, -0.5 );
		t.equal( v, 1.0/sqrt( x ), 'returns sqrt('+x+')' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if a positive number greater than `1` is raised to `+infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = 1.0 + Math.random()*1.0e5;
		v = pow( x, PINF );
		t.equal( v, PINF, 'pow('+x+',+infinity) returns +infinity' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if a negative number less than `-1` is raised to `+infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = -Math.random()*1.0e5 - 1.0;
		v = pow( x, PINF );
		t.equal( v, PINF, 'pow('+x+',+infinity) returns +infinity' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if `-infinity` is raised to `+infinity`', function test( t ) {
	var v = pow( NINF, PINF );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `(-0)^y` if `-infinity` is raised to a numeric `y` power', function test( t ) {
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		y = Math.random()*100.0 - 50.0;
		v = pow( NINF, y );
		t.equal( v, pow( -0.0, -y ), 'pow(-infinity,'+y+') returns pow(-0,-'+y+')' );
	}
	v = pow( NINF, NINF );
	t.equal( v, pow( -0.0, PINF ), 'pow(-infinity,-infinity) returns pow(-0,+infinity)' );

	v = pow( NINF, PINF );
	t.equal( v, pow( -0.0, NINF ), 'pow(-infinity,+infinity) returns pow(-0,-infinity)' );

	v = pow( NINF, 5.0 );
	t.equal( v, pow( -0.0, -5.0 ), 'pow(-infinity,5) returns pow(-0,-5)' );

	v = pow( NINF, 2.0 );
	t.equal( v, pow( -0.0, -2.0 ), 'pow(-infinity,2) returns pow(-0,-2)' );

	v = pow( NINF, -5.0 );
	t.equal( v, pow( -0.0, 5.0 ), 'pow(-infinity,-5) returns pow(-0,5)' );

	v = pow( NINF, -2.0 );
	t.equal( v, pow( -0.0, 2.0 ), 'pow(-infinity,-2) returns pow(-0,2)' );

	t.end();
});

tape( 'the function returns `0` if a positive number greater than `1` is raised to `-infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = 1.0 + Math.random()*1.0e5;
		v = pow( x, NINF );
		t.equal( v, 0.0, 'pow('+x+',-infinity) returns 0' );
	}
	t.end();
});

tape( 'the function returns `0` if `+infinity` is raised to `-infinity`', function test( t ) {
	var v = pow( PINF, NINF );
	t.equal( v, 0.0, 'returns 0' );
	t.end();
});

tape( 'the function returns `0` if `+infinity` is raised to any negative finite number', function test( t ) {
	var y;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		y = -(Math.random() * 1.0e5) - EPS;
		v = pow( PINF, y );
		t.equal( isPositiveZero( v ), true, 'returns 0' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if `+infinity` is raised to any positive finite number', function test( t ) {
	var y;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		y = Math.random()*1.0e5 + EPS;
		v = pow( PINF, y );
		t.equal( v, PINF, 'returns +infinity' );
	}
	t.end();
});

tape( 'the function returns `0` if a negative number less than `-1` is raised to `-infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = -Math.random()*1.0e5 - 1.0;
		v = pow( x, NINF );
		t.equal( v, 0.0, 'pow('+x+',-infinity) returns 0' );
	}
	t.end();
});

tape( 'the function returns `NaN` if asked to raise a negative number to an exponent whose absolute value is greater than 0 but less than 1', function test( t ) {
	var x;
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		x = -Math.random()*1.0e5 - EPS;
		y = Math.random();
		if ( y === 0.0 || y === 1.0 ) {
			continue;
		}
		v = pow( x, y );
		t.equal( isnan( v ), true, 'pow('+x+','+y+') returns NaN' );
	}
	t.end();
});
