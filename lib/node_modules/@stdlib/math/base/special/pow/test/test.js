'use strict';

// MODULES //

var tape = require( 'tape' );
var abs = require( '@stdlib/math/base/special/abs' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var round = require( '@stdlib/math/base/special/round' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var MAX_SAFE_INTEGER = require( '@stdlib/math/constants/float64-max-safe-integer' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isPositiveZero = require( '@stdlib/math/base/utils/is-positive-zero' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var pow = require( './../lib' );


// FIXTURES //

var squared_small = require( './fixtures/julia/squared_small.json' );
var squared_large = require( './fixtures/julia/squared_large.json' );
var cubed_small = require( './fixtures/julia/cubed_small.json' );
var cubed_large = require( './fixtures/julia/cubed_large.json' );
var toTheFourth_small = require( './fixtures/julia/to_the_fourth_small.json' );
var toTheFourth_large = require( './fixtures/julia/to_the_fourth_large.json' );
var baseNearUnity_small = require( './fixtures/julia/base_near_unity_small.json' );
var baseNearUnity_large = require( './fixtures/julia/base_near_unity_large.json' );
var baseNearUnity_huge = require( './fixtures/julia/base_near_unity_huge.json' );
var subnormal_results = require( './fixtures/julia/subnormal_results.json' );
var negative_exp_small_small = require( './fixtures/julia/negative_exp_small_small.json' );
var negative_exp_small_large = require( './fixtures/julia/negative_exp_small_large.json' );
var negative_exp_large_small = require( './fixtures/julia/negative_exp_large_small.json' );
var negative_exp_large_large = require( './fixtures/julia/negative_exp_large_large.json' );
var small_small = require( './fixtures/julia/small_small.json' );
var small_large = require( './fixtures/julia/small_large.json' );
var large_small = require( './fixtures/julia/large_small.json' );
var decimal_decimal = require( './fixtures/julia/decimal_decimal.json' );
var decimal_integer = require( './fixtures/julia/decimal_integer.json' );
var integer_decimal = require( './fixtures/julia/integer_decimal.json' );
var integer_integer = require( './fixtures/julia/integer_integer.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof pow, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function accepts two parameters: a base and an exponent', function test( t ) {
	t.equal( pow.length, 2.0, 'arity is 2' );
	t.end();
});

tape( 'the function evaluates the exponential function (`y = 2` and `x` small)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = squared_small.x;
	y = squared_small.y;
	expected = squared_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`y = 2` and `x` large)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = squared_large.x;
	y = squared_large.y;
	expected = squared_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`y = 3` and `x` small)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = cubed_small.x;
	y = cubed_small.y;
	expected = cubed_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`y = 3` and `x` large)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = cubed_large.x;
	y = cubed_large.y;
	expected = cubed_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`y = 4` and `x` small)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = toTheFourth_small.x;
	y = toTheFourth_small.y;
	expected = toTheFourth_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`y = 4` and `x` large)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = toTheFourth_large.x;
	y = toTheFourth_large.y;
	expected = toTheFourth_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`x ~ 1`, `y` small)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = baseNearUnity_small.x;
	y = baseNearUnity_small.y;
	expected = baseNearUnity_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`x ~ 1`, `y` large)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = baseNearUnity_large.x;
	y = baseNearUnity_large.y;
	expected = baseNearUnity_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (`x ~ 1`, `y` huge)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = baseNearUnity_huge.x;
	y = baseNearUnity_huge.y;
	expected = baseNearUnity_huge.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (subnormal results)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = subnormal_results.x;
	y = subnormal_results.y;
	expected = subnormal_results.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (negative exponents; `x` small, `y` small)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = negative_exp_small_small.x;
	y = negative_exp_small_small.y;
	expected = negative_exp_small_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		if ( expected[i] === null ) {
			t.equal( actual, PINF, 'pow('+x[i]+','+y[i]+') returns +infinity' );
		} else {
			t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
		}
	}
	t.end();
});

tape( 'the function evaluates the exponential function (negative exponents; `x` small, `y` large)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = negative_exp_small_large.x;
	y = negative_exp_small_large.y;
	expected = negative_exp_small_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		if ( expected[i] === null ) {
			t.equal( actual, PINF, 'pow('+x[i]+','+y[i]+') returns +infinity' );
		} else {
			t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
		}
	}
	t.end();
});

tape( 'the function evaluates the exponential function (negative exponents; `x` large, `y` small)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = negative_exp_large_small.x;
	y = negative_exp_large_small.y;
	expected = negative_exp_large_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		if ( expected[i] === null ) {
			t.equal( actual, PINF, 'pow('+x[i]+','+y[i]+') returns +infinity' );
		}
		else if ( expected[i] === 5.0e-324 ) {
			// Julia, Python, and R occasionally return the min subnormal value, when, in fact, the result should underflow; e.g., `pow(571413458040000, -21.92803603935001)` returns `0` for this implementation, and `5.0e-324` on other platforms. The answer checked on Wolfram Alpha is `2.564828778186e-324`, which is less than the min subnormal. This discrepancy arises, at least when compared to Julia's Openlibm, due to differences in our `ldexp` and their `scalbn`.
			t.equal( actual === expected[i] || actual === 0.0, true, 'pow('+x[i]+','+y[i]+') returns '+expected[i]+' or 0' );
		}
		else {
			t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
		}
	}
	t.end();
});

tape( 'the function evaluates the exponential function (negative exponents; `x` large, `y` large)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = negative_exp_large_large.x;
	y = negative_exp_large_large.y;
	expected = negative_exp_large_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		if ( expected[i] === null ) {
			t.equal( actual, PINF, 'pow('+x[i]+','+y[i]+') returns +infinity' );
		} else {
			t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
		}
	}
	t.end();
});

tape( 'the function evaluates the exponential function (near overflow)', function test( t ) {
	var x;
	var y;
	var v;

	x = 2.0;
	y = 1024;
	v = pow( x, y );
	t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

	x = 2.0;
	y = 1023;
	v = pow( x, y );
	t.equal( v, 8.98846567431158e307, 'pow('+x+','+y+') returns 8.98846567431158e307' );

	x = 2.001355585648339;
	y = 1023;
	v = pow( x, y );
	t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

	x = 2.0;
	y = 1025;
	v = pow( x, y );
	t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

	x = 1.998647974895499;
	y = 1025;
	v = pow( x, y );
	t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

	x = 2.0 + EPS*2.0;
	y = 1024;
	v = pow( x, y );
	t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

	t.end();
});

tape( 'the function evaluates the exponential function (near underflow)', function test( t ) {
	var x;
	var y;
	var v;

	x = 2.0;
	y = -1075;
	v = pow( x, y );
	t.equal( v, 0.0, 'pow('+x+','+y+') returns 0' );

	x = 1.9987108395124398;
	y = -1075;
	v = pow( x, y );
	t.equal( v, 5.0e-324, 'pow('+x+','+y+') returns 5e-324' );

	// Wolfram Alpha: 2.47032822920649828116748364864574508116622553173015e-324
	x = 1.9999999999999998;
	y = -1075;
	v = pow( x, y );
	t.equal( v, 0.0, 'pow('+x+','+y+') returns 0' );

	x = 1.9999999999999999;
	y = -1075;
	v = pow( x, y );
	t.equal( v, 0.0, 'pow('+x+','+y+') returns 0' );

	t.end();
});

tape( 'the function evaluates the exponential function (small `x`, large `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = small_large.x;
	y = small_large.y;
	expected = small_large.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		if ( expected[i] === 5.0e-324 ) {
			t.equal( actual === expected[i] || actual === 0.0, true, 'pow('+x[i]+','+y[i]+') returns 5e-324 or 0' );
		} else {
			t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
		}
	}
	t.end();
});

tape( 'the function evaluates the exponential function (large `x`, small `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = large_small.x;
	y = large_small.y;
	expected = large_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (small `x`, small `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = small_small.x;
	y = small_small.y;
	expected = small_small.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (decimal `x`, decimal `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = decimal_decimal.x;
	y = decimal_decimal.y;
	expected = decimal_decimal.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (decimal `x`, integer `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = decimal_integer.x;
	y = decimal_integer.y;
	expected = decimal_integer.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (integer `x`, decimal `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = integer_decimal.x;
	y = integer_decimal.y;
	expected = integer_decimal.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function evaluates the exponential function (integer `x`, integer `y`)', function test( t ) {
	var expected;
	var actual;
	var x;
	var y;
	var i;

	x = integer_integer.x;
	y = integer_integer.y;
	expected = integer_integer.expected;
	for ( i = 0; i < x.length; i++ ) {
		actual = pow( x[i], y[i] );
		t.equal( actual, expected[i], 'pow('+x[i]+','+y[i]+') returns '+expected[i] );
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for the exponent', function test( t ) {
	var v;

	v = pow( -3.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( 0.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for the base', function test( t ) {
	var v;

	v = pow( NaN, 5.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( NaN, 1.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( NaN, 0.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'any number raised to the zero power is `1`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = Math.random()*1.0e6 - 5.0e5;
		v = pow( x, 0.0 );
		t.equal( v, 1.0, 'pow('+x+',0.0) returns 1' );
	}
	t.equal( pow( PINF, 0.0 ), 1.0, 'inf^0 = 1' );
	t.equal( pow( NINF, 0.0 ), 1.0, '(-inf)^0 = 1' );
	t.equal( pow( 0.0, 0.0 ), 1.0, '0^0 = 1' );
	t.end();
});

tape( 'any number raised to the `-1` power is the reciprocal of that number', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = Math.random()*1.0e6 - 5.0e5;
		v = pow( x, -1.0 );
		t.equal( v, 1/x, 'pow('+x+',0.0) returns '+(1/x) );
	}
	t.equal( isPositiveZero( pow( PINF, -1.0 ) ), true, 'inf^-1 = 0' );
	t.equal( isNegativeZero( pow( NINF, -1.0 ) ), true, '(-inf)^0 = -0' );
	t.equal( pow( 0.0, -1.0 ), PINF, '0^-1 = +infinity' );
	t.equal( pow( -0.0, -1.0 ), NINF, '(-0)^-1 = -infinity' );
	t.end();
});

tape( 'unity raised to any power is `1`', function test( t ) {
	var y;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		y = Math.random()*1.0e6 - 5.0e5;
		v = pow( 1.0, y );
		t.equal( v, 1.0, 'pow(1.0,'+y+') returns 1' );
	}
	t.equal( pow( 1.0, PINF ), 1.0, '1^inf = 1' );
	t.equal( pow( 1.0, NINF ), 1.0, '1^(-inf) = 1' );
	t.equal( pow( 1.0, 0.0 ), 1.0, '1^0 = 1' );
	t.end();
});

tape( '`-1` raised to any odd integer is `-1`', function test( t ) {
	var v;
	var i;
	for ( i = -51; i < 53; i += 2 ) {
		v = pow( -1.0, i );
		t.equal( v, -1.0, 'pow(1.0,'+i+') returns -1' );
	}
	t.end();
});

tape( '`+-0` raised to `-infinity` is `+infinity`', function test( t ) {
	var v;

	v = pow( +0.0, NINF );
	t.equal( v, PINF, 'returns +infinity' );

	v = pow( -0.0, NINF );
	t.equal( v, PINF, 'returns +infinity' );

	t.end();
});

tape( '`+-0` raised to `+infinity` is `0`', function test( t ) {
	var v;

	v = pow( +0.0, PINF );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	v = pow( -0.0, PINF );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	t.end();
});

tape( '`+-0` raised to any positive finite number which is not an odd integer is `0`', function test( t ) {
	var y;
	var i;
	var v;

	y = [
		2,
		3.14,
		1.0e5,
		5.1,
		9.999999
	];

	for ( i = 0; i < y.length; i++ ) {
		v = pow( +0.0, y[ i ] );
		t.equal( isPositiveZero( v ), true, 'pow(0,'+y[i]+') returns +0' );

		v = pow( -0.0, y[ i ] );
		t.equal( isPositiveZero( v ), true, 'pow(-0,'+y[i]+') returns +0' );
	}
	t.end();
});

tape( '`+-0` raised to any positive odd integer is `+-0`', function test( t ) {
	var i;
	var v;

	for ( i = 1; i < 101; i += 2 ) {
		v = pow( +0.0, i );
		t.equal( isPositiveZero( v ), true, 'pow(0,'+i+') returns +0' );

		v = pow( -0.0, i );
		t.equal( isNegativeZero( v ), true, 'pow(-0,'+i+') returns -0' );
	}
	t.end();
});

tape( '`+-0` raised to any negative finite number which is not an odd integer is `+infinity`', function test( t ) {
	var y;
	var i;
	var v;

	y = [
		-2,
		-3.14,
		-1.0e5,
		-5.1,
		-9.999999
	];

	for ( i = 0; i < y.length; i++ ) {
		v = pow( +0.0, y[ i ] );
		t.equal( v, PINF, 'pow(0,'+y[i]+') returns +infinity' );

		v = pow( -0.0, y[ i ] );
		t.equal( v, PINF, 'pow(-0,'+y[i]+') returns +infinity' );
	}
	t.end();
});

tape( '`+-0` raised to any negative odd integer is `+-infinity`', function test( t ) {
	var i;
	var v;

	for ( i = -101; i < 0; i += 2 ) {
		v = pow( +0.0, i );
		t.equal( v, PINF, 'pow(0,'+i+') returns +infinity' );

		v = pow( -0.0, i );
		t.equal( v, NINF, 'pow(-0,'+i+') returns -infinity' );
	}
	t.end();
});

tape( '`-1` raised to `+-infinity` is indeterminate and the function returns `NaN`', function test( t ) {
	var v;

	v = pow( -1.0, PINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = pow( -1.0, NINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'raising any number to the `1/2` power returns the same results as evaluating the principal square root', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 500; i++ ) {
		x = Math.random()*1.0e5;
		v = pow( x, 0.5 );
		t.equal( v, sqrt( x ), 'returns sqrt('+x+')' );
	}
	t.end();
});

tape( 'raising any number to the `-1/2` power returns the same results as evaluating the inverse of the principal square root', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 500; i++ ) {
		x = Math.random()*1.0e5;
		v = pow( x, -0.5 );
		t.equal( v, 1.0/sqrt( x ), 'returns sqrt('+x+')' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if a positive number greater than `1` is raised to `+infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = 1.0 + Math.random()*1.0e5;
		v = pow( x, PINF );
		t.equal( v, PINF, 'pow('+x+',+infinity) returns +infinity' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if a negative number less than `-1` is raised to `+infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = -Math.random()*1.0e5 - 1.0;
		v = pow( x, PINF );
		t.equal( v, PINF, 'pow('+x+',+infinity) returns +infinity' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if `-infinity` is raised to `+infinity`', function test( t ) {
	var v = pow( NINF, PINF );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `(-0)^y` if `-infinity` is raised to a numeric `y` power', function test( t ) {
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		y = Math.random()*100.0 - 50.0;
		v = pow( NINF, y );
		t.equal( v, pow( -0.0, -y ), 'pow(-infinity,'+y+') returns pow(-0,-'+y+')' );
	}
	v = pow( NINF, NINF );
	t.equal( v, pow( -0.0, PINF ), 'pow(-infinity,-infinity) returns pow(-0,+infinity)' );

	v = pow( NINF, PINF );
	t.equal( v, pow( -0.0, NINF ), 'pow(-infinity,+infinity) returns pow(-0,-infinity)' );

	v = pow( NINF, 5.0 );
	t.equal( v, pow( -0.0, -5.0 ), 'pow(-infinity,5) returns pow(-0,-5)' );

	v = pow( NINF, 2.0 );
	t.equal( v, pow( -0.0, -2.0 ), 'pow(-infinity,2) returns pow(-0,-2)' );

	v = pow( NINF, -5.0 );
	t.equal( v, pow( -0.0, 5.0 ), 'pow(-infinity,-5) returns pow(-0,5)' );

	v = pow( NINF, -2.0 );
	t.equal( v, pow( -0.0, 2.0 ), 'pow(-infinity,-2) returns pow(-0,2)' );

	t.end();
});

tape( 'the function returns `0` if a positive number greater than `1` is raised to `-infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = 1.0 + Math.random()*1.0e5;
		v = pow( x, NINF );
		t.equal( v, 0.0, 'pow('+x+',-infinity) returns 0' );
	}
	t.end();
});

tape( 'the function returns `0` if `+infinity` is raised to `-infinity`', function test( t ) {
	var v = pow( PINF, NINF );
	t.equal( v, 0.0, 'returns 0' );
	t.end();
});

tape( 'the function returns `0` if `+infinity` is raised to any negative finite number', function test( t ) {
	var y;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		y = -(Math.random() * 1.0e5) - EPS;
		v = pow( PINF, y );
		t.equal( isPositiveZero( v ), true, 'returns 0' );
	}
	t.end();
});

tape( 'the function returns `+infinity` if `+infinity` is raised to any positive finite number', function test( t ) {
	var y;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		y = Math.random()*1.0e5 + EPS;
		v = pow( PINF, y );
		t.equal( v, PINF, 'returns +infinity' );
	}
	t.end();
});

tape( 'the function returns `0` if a negative number less than `-1` is raised to `-infinity`', function test( t ) {
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		x = -Math.random()*1.0e5 - 1.0;
		v = pow( x, NINF );
		t.equal( v, 0.0, 'pow('+x+',-infinity) returns 0' );
	}
	t.end();
});

tape( 'the function returns `NaN` if asked to raise a negative number to an exponent whose absolute value is greater than 0 but less than 1', function test( t ) {
	var x;
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		x = -Math.random()*1.0e5 - EPS;
		y = Math.random();
		if ( y === 0.0 || y === 1.0 ) {
			continue;
		}
		v = pow( x, y );
		t.equal( isnan( v ), true, 'pow('+x+','+y+') returns NaN' );
	}
	t.end();
});

tape( 'if `y > 2^64` and `x` is greater than `1`, the function overflows', function test( t ) {
	var x;
	var y;
	var v;

	x = 1.0 + EPS; // smallest value greater than 1.0
	y = 3.6893488147419103e19; // 2.0^65
	v = pow( x, y );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'if `y < -(2^64)` and `x` is greater than `1`, the function underflows', function test( t ) {
	var x;
	var y;
	var v;

	x = 1.0 + EPS; // smallest value greater than 1.0
	y = -3.6893488147419103e19; // -(2.0)^65
	v = pow( x, y );
	t.equal( v, 0.0, 'returns 0' );
	t.end();
});

tape( 'if `y > 2^64` and `x` is less than `1`, the function underflows', function test( t ) {
	var x;
	var y;
	var v;

	x = 1.0 - EPS; // greatest value less than 1.0
	y = 3.6893488147419103e19; // 2.0^65
	v = pow( x, y );
	t.equal( v, 0.0, 'returns 0' );
	t.end();
});

tape( 'if `y < -(2^64)` and `x` is less than `1`, the function overflows', function test( t ) {
	var x;
	var y;
	var v;

	x = 1.0 - EPS; // greatest value less than 1.0
	y = -3.6893488147419103e19; // -(2.0^65)
	v = pow( x, y );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'if `y > 2^31` and `|x|` significantly less than unity, the function underflows', function test( t ) {
	var exp;
	var x;
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		x = 0.5 * Math.random();

		exp = round( Math.random()*32.0 ) + 32;
		y = pow( 2.0, exp );

		v = pow( x, y );
		t.equal( isPositiveZero( v ), true, 'pow('+x+','+y+') returns +0' );

		if ( y < MAX_SAFE_INTEGER ) {
			y += 1;
			v = pow( -x, y );
			t.equal( isNegativeZero( v ), true, 'pow(-'+x+','+y+') returns -0' );
		}
	}
	t.end();
});

tape( 'if `y < -(2^31)` and `|x|` significantly less than unity, the function overflows', function test( t ) {
	var exp;
	var x;
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		x = 0.5 * Math.random();

		exp = round( Math.random()*32.0 ) + 32;
		y = -pow( 2.0, exp );

		v = pow( x, y );
		t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

		if ( abs(y) < MAX_SAFE_INTEGER ) {
			y -= 1;
			v = pow( -x, y );
			t.equal( v, NINF, 'pow(-'+x+','+y+') returns -infinity' );
		}
	}
	t.end();
});

tape( 'if `y < -(2^31)` and `|x|` significantly greater than unity, the function underflows', function test( t ) {
	var exp;
	var x;
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		x = 2.0 + Math.random()*1.0e5;

		exp = round( Math.random()*32.0 ) + 32;
		y = -pow( 2.0, exp );

		v = pow( x, y );
		t.equal( isPositiveZero( v ), true, 'pow('+x+','+y+') returns +0' );

		if ( abs(y) < MAX_SAFE_INTEGER ) {
			y -= 1;
			v = pow( -x, y );
			t.equal( isNegativeZero( v ), true, 'pow(-'+x+','+y+') returns -0' );
		}
	}
	t.end();
});

tape( 'if `y > 2^31` and `|x|` significantly greater than unity, the function overflows', function test( t ) {
	var exp;
	var x;
	var y;
	var v;
	var i;

	for ( i = 0; i < 100; i++ ) {
		x = 2.0 + Math.random()*1.0e5;

		exp = round( Math.random()*32.0 ) + 32;
		y = pow( 2.0, exp );

		v = pow( x, y );
		t.equal( v, PINF, 'pow('+x+','+y+') returns +infinity' );

		if ( y < MAX_SAFE_INTEGER ) {
			y += 1;
			v = pow( -x, y );
			t.equal( v, NINF, 'pow(-'+x+','+y+') returns -infinity' );
		}
	}
	t.end();
});
