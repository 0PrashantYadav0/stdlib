'use strict';

// MODULES //

var tape = require( 'tape' );
var abs = require( '@stdlib/math/base/special/abs' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pow = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof pow, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function accepts two parameters: a base and an exponent', function test( t ) {
	t.equal( pow.length, 2.0, 'arity is 2' );
	t.end();
});

tape( 'the function evaluates the exponential function', function test( t ) {
	var delta;

	t.equal( pow( 2.0, 3.0 ), 8.0, '2^3 = 8' );
	t.equal( pow( -5.0, 3.0 ), -125.0, '(-5)^3 = -125' );

	// Compared against Julia:
	delta = abs( pow( Math.PI, 5.0 ) - 306.0196847852814 );
	t.ok( delta < 1.0e-14, 'pi^5 ~ 306.0196847852814' );

	t.end();
});

tape( 'the function evaluates the exponential function when provided fractional exponents', function test( t ) {
	var delta;

	t.equal( pow( 16.0, 0.5 ), 4.0, '16^0.5 = 4' );

	delta = abs( pow( 125.0, 1.0/3.0 ) - 5.0 );
	t.ok( delta < 1.0e-14, '125^1/3 ~= 5' );

	// Compared against Julia:
	delta = abs( pow( PI, -0.2 ) - 0.7953715005639397 );
	t.ok( delta < 1.0e-14, 'pi^0.2 ~ 0.7953715005639397' );

	t.end();
});

tape( 'anything raised to the zero power is `1`', function test( t ) {
	t.equal( pow( PINF, 0.0 ), 1.0, 'inf^0 = 1' );
	t.equal( pow( NINF, 0.0 ), 1.0, '(-inf)^0 = 1' );
	t.equal( pow( 0.0, 0.0 ), 1.0, '0^0 = 1' );
	t.equal( pow( 100.0, 0.0 ), 1.0, '100^0 = 1' );
	t.end();
});

tape( 'one raised to any power is `1`', function test( t ) {
	// FIXME: pow implementation is wrong
	// t.equal( pow( 1.0, PINF ), 1.0, '1^inf = 1' );

	// FIXME: pow implementation is wrong
	// t.equal( pow( 1.0, NINF ), 1.0, '1^(-inf) = 1' );

	t.equal( pow( 1.0, 0.0 ), 1.0, '1^0 = 1' );
	t.equal( pow( 1.0, 1000.0 ), 1.0, '1^100 = 1' );
	t.end();
});

tape( 'the function returns `+infinity` if a positive number is raised to `+infinity`', function test( t ) {
	var val = pow( 5.0, PINF );
	t.equal( val, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `+infinity` if a negative number is raised to `+infinity`', function test( t ) {
	var val = pow( -5.0, PINF );
	t.equal( val, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `+infinity` if `-infinity` is raised to `+infinity`', function test( t ) {
	var val = pow( NINF, PINF );
	t.equal( val, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `0` if a positive number is raised to `-infinity`', function test( t ) {
	var val = pow( 5.0, NINF );
	t.equal( val, 0.0, 'returns 0' );
	t.end();
});

tape( 'the function returns `0` if `+infinity` is raised to `-infinity`', function test( t ) {
	var val = pow( PINF, NINF );
	t.equal( val, 0.0, 'returns 0' );
	t.end();
});

tape( 'the function returns `0` if a negative number is raised to `-infinity`', function test( t ) {
	var val = pow( -5.0, NINF );
	t.equal( val, 0.0, 'returns 0' );
	t.end();
});

tape( 'the function returns `NaN` if asked to raise a negative number to a exponent whose absolute value is greater than 0 but less than 1', function test( t ) {
	var val;

	val = pow( -125.0, 1.0/3.0 );
	t.equal( isnan( val ), true, 'returns NaN' );

	val = pow( -16.0, -0.5 );
	t.equal( isnan( val ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for the exponent', function test( t ) {
	var val = pow( -3.0, NaN );
	t.equal( isnan( val ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for the base', function test( t ) {
	var val = pow( NaN, 5.0 );
	t.equal( isnan( val ), true, 'returns NaN' );
	t.end();
});
