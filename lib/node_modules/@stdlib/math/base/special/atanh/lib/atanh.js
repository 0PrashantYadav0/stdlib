'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_atanh.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// CONSTANTS //

var NEAR_ZERO = 1.0 / (1 << 28); // 2**-28


// ATANH //

/**
* Computes the hyperbolic arctangent of a number.
*
* #### Method
*
* #### Notes
*
* * Relative error:
*
* @param {number} x - input value
* @returns {number} hyperbolic arctangent (in radians)
*
* @example
* var v = atanh(  );
* // returns
* @example
* var v = atanh(  );
* // returns
* @example
* var v = atanh(  );
* // returns
* @example
* var v = atanh( NaN );
* // returns NaN
*/
function atanh( x ) {
	var sgn;
	var t;
	// Special Cases:
	if ( isnan( x ) ||  x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return PINF;
	}
	if ( x === -1.0 ) {
		return NINF;
	}
	sgn = false;
	if ( x < 0.0 ) {
		x = -x;
		sgn = true;
	}
	if ( x < NEAR_ZERO ) {
		// Case: |x| < 2**-28
		return sgn ? -x : x;
	}
	if ( x < 0.5 ) {
		t = x+x;
		t = 0.5 * log1p( t + t*x/(1-x) );
	} else {
		t = 0.5 * log1p( (x+x) / (1-x) );
	}
	return sgn ? -t : t;
} // end FUNCTION atanh()


// EXPORTS //

module.exports = atanh;
