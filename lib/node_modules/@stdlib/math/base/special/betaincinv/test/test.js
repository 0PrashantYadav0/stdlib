'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var betaincinv = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof betaincinv, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var y = betaincinv( NaN, 1.0, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.2, NaN, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.2, 1.0, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if `p` is outside the interval `[0,1]`', function test( t ) {
	var y = betaincinv( 1.5, 1.0, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( -0.5, 1.0, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a nonpositive `a`, the function returns `NaN`', function test( t ) {
	var y;

	y = betaincinv( 0.5, 0.0, 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, -1.0, 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, -1.0, 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, NINF, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, NINF, PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, NINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, NINF, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a nonpositive `b`, the function returns `NaN`', function test( t ) {
	var y;

	y = betaincinv( 0.5, 2.0, 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, 2.0, -1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, 2.0, -1/0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, 1.0, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, PINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, NINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = betaincinv( 0.5, NaN, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});
