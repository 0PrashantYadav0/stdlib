'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

function temme_root_finder( t, a ) {
	return function roots( x ) {
		var big;
		var f1;
		var f;
		var y;

		y = 1 - x;
		if ( y === 0.0 ) {
			big = Number.MAX_VALUE / 4.0;
			return [ -big, -big ];
		}
		if ( x === 0.0 ) {
			big = Number.MAX_VALUE / 4.0;
			return [ -big, -big ];
		}
		f = ln( x ) + a * ln( y ) + t;
		f1 = ( 1.0 / x ) - ( a / y );
		return [ f, f1 ];
	};
} // end FUNCTION temme_root_finder()


// EXPORTS //

module.exports = temme_root_finder;
