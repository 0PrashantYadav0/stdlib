'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var binomcoef = require( './../lib' );


// FIXTURES //

var integers = require( './fixtures/julia/integers.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof binomcoef, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for any parameter', function test( t ) {
	var v = binomcoef( 3, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = binomcoef( NaN, 2 );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function evaluates the binomial coefficient for integers `m` and `k`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var m;
	var k;
	var v;
	var i;

	m = integers.m;
	k = integers.k;
	expected = integers.expected;
	for ( i = 0; i < m.length; i++ ) {
		v = binomcoef( m[ i ], k[ i ] );
		if ( v === expected[ i ] ) {
			t.equal( v, expected[ i ], 'returns '+expected[i]+' when provided m: '+m[i]+' and k: '+k[i] );
		} else {
			delta = abs( v - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. m: ' + m[ i ] + ' k: ' + k[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
		}
	}
	t.end();
});

tape( 'the function throws an error if the `n` value is not an integer or `NaN`', function test( t ) {
	var values;
	var i;

	values = [
		2.5,
		'5',
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			binomcoef( value, 2 );
		};
	}
});

tape( 'the function throws an error if the `k` value is not an integer or `NaN`', function test( t ) {
	var values;
	var i;

	values = [
		2.5,
		'5',
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			binomcoef( 2, value );
		};
	}
});
