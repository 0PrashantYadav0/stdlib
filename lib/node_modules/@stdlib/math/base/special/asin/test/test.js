'use strict';

// MODULES //

var tape = require( 'tape' );
var incrspace = require( '@stdlib/math/generics/utils/incrspace' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var asin = require( './../lib' );


// FIXTURES //

var data = require( './fixtures/julia/data.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof asin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the arcsine', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = data.x;
	expected = data.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = asin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. Tolerance: '+tol+'.' );
		}
	}

	t.end();
});


tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = asin( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided a value outside the interval [-1,1]', function test( t ) {
	var negative = incrspace( -100.0, -0.5, 0.5 );
	var positive = incrspace( 1.5, 100, 0.5 );
	var len = positive.length;
	var v;
	var i;

	for ( i = 0; i < len; i++ ) {
		v = asin( positive[ i ] );
		t.equal( isnan( v ), true, 'returns NaN' );
		v = asin( negative[ i ] );
		t.equal( isnan( v ), true, 'returns NaN' );
	}
	t.end();
});
