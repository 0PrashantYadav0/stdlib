#include <random>
#include <algorithm>
#include <iterator>
#include <vector>
#include <iostream>
#include <boost/math/special_functions/sqrt1pm1.hpp>

using namespace std;

/**
* Generates a linearly spaced numeric array.
*
* @param start   first array value
* @param end     last array value
* @param num     length of output array
* @return        linearly spaced numeric array
*/
vector<double> linspace( double start, double end, int num ) {
	double delta = (end - start) / (num - 1);
	vector<double> arr( num - 1 );
	for ( int i = 0; i < num - 1; ++i ){
		arr[ i ] = start + delta * i;
	}
	arr.push_back( end );
	return arr;
}

/**
* Prints the elements of a vector as JSON.
*
* @param vec    input vector
* @param last   boolean indicating whether last vector in JSON object
* @return       string representation of vector for JSON output
*/
void print_vector( vector<double> vec, bool last = false ) {
	cout << "[";
	for ( vector<double>::iterator it = vec.begin(); it != vec.end(); ++it ) {
		if ( vec.end() != it+1 ) {
			printf( "%0.16f", *it );
			cout << ",";
		} else {
			printf( "%0.16f", *it );
			cout << "]";
			if ( last == false ) {
				cout << ",";
			}
		}
	}
	return;
}

/**
* Prints the results as JSON.
*
* @param x          input values
* @param expected   expected values
* @return           JSON string
*/
void print_results(
	vector<double> x,
	vector<double> expected
) {
	cout << "{" << endl;
	cout << "  \"x\": ";
	print_vector( x );
	cout << "  \"expected\": ";
	print_vector( expected, true );
	cout << "}" << endl;
	return;
}

/**
* Main execution sequence.
*/
int main() {
	random_device rd;
	mt19937 g(rd());

	vector<double> x = linspace( -0.75, 0.75, 1000 );
	vector<double> expected;

	for ( int i = 0; i < 1000; i++ ) {
		double arg = x[ i ];
		expected.push_back( boost::math::sqrt1pm1( arg ) );
	}

	print_results( x, expected );
	return 0;
}
