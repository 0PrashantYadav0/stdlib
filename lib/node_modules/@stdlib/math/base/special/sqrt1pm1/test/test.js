'use strict';

// MODULES //

var tape = require( 'tape' );
var linspace = require( '@stdlib/math/utils/linspace' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var sqrt1pm1 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof sqrt1pm1, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = sqrt1pm1( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	var v = sqrt1pm1( PINF );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `0` if provided `0`', function test( t ) {
	var v = sqrt1pm1( 0.0 );
	t.equal( v, 0.0, 'returns zero' );
	t.end();
});

tape( 'the function returns `-1` if provided `-1`', function test( t ) {
	var v = sqrt1pm1( -1.0 );
	t.equal( v, -1.0, 'returns negative one' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `x < -1`', function test( t ) {
	var v = sqrt1pm1( -1.5 );
	t.equal( isnan( v ), true, 'returns NaN' );
	sqrt1pm1( -2.0 );
	t.equal( isnan( v ), true, 'returns NaN' );
	sqrt1pm1( -3.0 );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function handles large `x` values (|x| > 0.75)', function test( t ) {
	var arr;
	var v;
	var i;

	// TODO: Compare results against Boost
	arr = linspace( 0.76, 100.0, 100 );
	for ( i = 0; i < arr.length; i++ ) {
		v = sqrt1pm1( arr[ i ] );
		t.equal( v, sqrt( 1.0 + arr[i] ) - 1.0, 'x: '+arr[i]+'. y: '+v );
	}
	t.end();
});

tape( 'the function handles small `x` values (|x| <= 0.75)', function test( t ) {
	var arr;
	var v;
	var i;

	// TODO: Compare results against Boost
	arr = linspace( -0.75, 0.75, 100 );
	for ( i = 0; i < arr.length; i++ ) {
		v = sqrt1pm1( arr[ i ] );
		t.equal( v, expm1( log1p( arr[i] ) / 2.0 ), 'x: '+arr[i]+'. y: '+v );
	}
	t.end();
});
