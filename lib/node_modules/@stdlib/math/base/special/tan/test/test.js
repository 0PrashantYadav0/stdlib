'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var tan = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.true( typeof tan, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the tangent', function test( t ) {
	var delta;

	// TODO: more extensive tests against other platforms

	// Tested on Wolfram Alpha...
	delta = abs( tan( 0.0 ) - 0.0 );
	t.ok( delta < 1.0e-14, 'approx 0' );

	delta = abs( tan( PI ) - 0.0 );
	t.ok( delta < 1.0e-14, 'approx 0' );

	delta = abs( tan( PI/4.0 ) - 1.0 );
	t.ok( delta < 1.0e-14, 'approx 1' );

	delta = abs( tan( -PI/4.0 ) + 1.0 );
	t.ok( delta, 'approx -1' );

	delta = abs( tan( PI/8.0 ) - 0.414213562373095048801688724209698078569671875376948073176679 );
	t.ok( delta < 1.0e-14, 'equals ~0.4142' );

	delta = abs( tan( -PI/8.0 ) + 0.414213562373095048801688724209698078569671875376948073176679 );
	t.ok( delta < 1.0e-14, 'equals ~0.4142' );

	t.end();
});

tape( 'the function returns `-infinity` if provided a multiple of `-pi/2`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;

	// NOTE: Node v0.10.x uses a different algo, giving very different results. The algo has since been made more accurate.
	if ( process && process.version && /^v0\.10/.test( process.version ) ) {
		return t.end();
	}

	// t.equal( tan( -PI/2 ), Number.NEGATIVE_INFINITY, 'equals -infinity' );

	// FIXME: does not equal -inf due to approx errors. Comparing to Julia: -1.633123935319537e16
	x = -PI / 2.0;
	v = tan( x );
	expected = -1.633123935319537e16;

	delta = abs( v - expected );
	tol = EPS * abs( expected );

	t.ok( delta <= tol, 'within tolerance. x: '+x+'. v: '+v+'. E: '+expected+'. Δ: '+delta+'. tol: '+tol+'.' );
	t.end();
});

tape( 'the function returns `+infinity` if provided a multiple of `pi/2`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;

	// NOTE: Node v0.10.x uses a different algo, giving very different results. The algo has since been made more accurate.
	if ( process && process.version && /^v0\.10/.test( process.version ) ) {
		return t.end();
	}

	// t.equal( tan( PI/2 ), Number.POSITIVE_INFINITY, 'equals +infinity' );

	// FIXME: does not equal +inf due to approx errors. Comparing to Julia: +1.633123935319537e16
	x = PI / 2.0;
	v = tan( x );
	expected = 1.633123935319537e16;

	delta = abs( v - expected );
	tol = EPS * abs( expected );

	t.ok( delta <= tol, 'within tolerance. x: '+x+'. v: '+v+'. E: '+expected+'. Δ: '+delta+'. tol: '+tol+'.' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = tan( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

// TODO: test +-infinity special cases
