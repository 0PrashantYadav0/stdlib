#!/usr/bin/env julia

import JSON

"""
    gen( x, filepath )

Generate fixture data and write to file.

# Arguments

* `x`: domain
* `filepath::AbstractString`: filepath of the output file

# Examples

``` julia
julia> x = linspace( -1000, 1000, 2001 );
julia> gen( x, \"./data.json\" );
```
"""
function gen( x, filepath )
	y = tan( x );
	data = Dict([
		("x", x),
		("expected", y)
	]);
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Subnormal values:
x = linspace( 1e-309, 1e-324, 500 );
out = joinpath( dir, "subnormal.json" );
gen( x, out );

# Negative tiny values:
x = linspace( -1e-300, -1e-308, 500 );
out = joinpath( dir, "tiny_negative.json" );
gen( x, out );

# Positive tiny values:
x = linspace( 1e-300, 1e-308, 500 );
out = joinpath( dir, "tiny_positive.json" );
gen( x, out );

# Small(er) values:
x = linspace( -pi, pi, 2000 );
out = joinpath( dir, "smaller.json" );
gen( x, out );

# Negative small values:
x = linspace( -4*pi, -pi, 1000 );
out = joinpath( dir, "small_negative.json" );
gen( x, out );

# Positive small values:
x = linspace( pi, 4*pi, 1000 );
out = joinpath( dir, "small_positive.json" );
gen( x, out );

# Negative medium values:
x = linspace( -4*pi, 12*pi, 1000 );
out = joinpath( dir, "medium_negative.json" );
gen( x, out );

# Positive medium values:
x = linspace( 4*pi, 12*pi, 1000 );
out = joinpath( dir, "medium_positive.json" );
gen( x, out );

# Large negative values:
x = linspace( -12*pi, -64*pi, 1000 );
out = joinpath( dir, "large_negative.json" );
gen( x, out );

# Large positive values:
x = linspace( 12*pi, 64*pi, 1000 );
out = joinpath( dir, "large_positive.json" );
gen( x, out );

# Very large negative values:
x = linspace( -64*pi, -256*pi, 500 );
out = joinpath( dir, "very_large_negative.json" );
gen( x, out );

# Very large positive values:
x = linspace( 64*pi, -256*pi, 500 );
out = joinpath( dir, "very_large_positive.json" );
gen( x, out );
