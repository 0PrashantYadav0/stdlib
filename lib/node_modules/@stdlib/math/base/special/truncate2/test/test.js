'use strict';

// MODULES //

var tape = require( 'tape' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var SMALLEST_SUBNORMAL = require( '@stdlib/math/constants/float64-smallest-subnormal' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var isPositiveZero = require( '@stdlib/math/base/utils/is-positive-zero' );
var exp2 = require( '@stdlib/math/base/special/exp2' );
var truncate2 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof truncate2, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `+0` if provided `+0`', function test( t ) {
	var v;

	v = truncate2( 0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = truncate2( +0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	t.end();
});

tape( 'the function returns `-0` if provided `-0`', function test( t ) {
	var v = truncate2( -0.0 );
	t.strictEqual( isNegativeZero( v ), true, 'returns -0' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = truncate2( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `+infinity` if provided a `+infinity`', function test( t ) {
	var v = truncate2( PINF );
	t.strictEqual( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided a `-infinity`', function test( t ) {
	var v = truncate2( NINF );
	t.strictEqual( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns the minimum double-precision floating-point value if provided the minimum double-precision floating-point value', function test( t ) {
	var v;

	v = truncate2( SMALLEST_SUBNORMAL );
	t.strictEqual( v, SMALLEST_SUBNORMAL, 'returns smallest subnormal' );

	v = truncate2( -SMALLEST_SUBNORMAL );
	t.strictEqual( v, -SMALLEST_SUBNORMAL, 'returns smallest subnormal' );

	t.end();
});

tape( 'the function supports rounding large values', function test( t ) {
	var x;
	var v;

	x = exp2( 1023 );
	v = truncate2( x + (x/2.0) );
	t.strictEqual( v, x, 'returns expected value' );

	x = exp2( 1023 );
	v = truncate2( x + (x/3.0) );
	t.strictEqual( v, x, 'returns expected value' );

	x = -exp2( 1023 );
	v = truncate2( x + (x/2.0) );
	t.strictEqual( v, x, 'returns expected value' );

	x = -exp2( 1023 );
	v = truncate2( x + (x/3.0) );
	t.strictEqual( v, x, 'returns expected value' );

	t.end();
});

tape( 'the function rounds a numeric value to the nearest multiple of two toward zero', function test( t ) {
	t.strictEqual( truncate2( -4.2 ), -4.0, 'returns expected value' );
	t.strictEqual( truncate2( -4.5 ), -4.0, 'returns expected value' );
	t.strictEqual( truncate2( -4.8 ), -4.0, 'returns expected value' );
	t.strictEqual( truncate2( 4.2 ), 4.0, 'returns expected value' );
	t.strictEqual( truncate2( 9.99999 ), 8.0, 'returns expected value' );
	t.strictEqual( truncate2( 9.5 ), 8.0, 'returns expected value' );
	t.strictEqual( truncate2( 9.4 ), 8.0, 'returns expected value' );
	t.strictEqual( truncate2( 12.0 ), 8.0, 'returns expected value' );
	t.strictEqual( truncate2( -12.0 ), -8.0, 'returns expected value' );
	t.strictEqual( truncate2( 13.0 ), 8.0, 'returns expected value' );
	t.strictEqual( truncate2( -13.0 ), -8.0, 'returns expected value' );
	t.strictEqual( truncate2( 23.0 ), 16.0, 'returns expected value' );
	t.strictEqual( truncate2( -23.0 ), -16.0, 'returns expected value' );
	t.strictEqual( truncate2( 0.0 ), 0.0, 'returns expected value' );
	t.strictEqual( truncate2( 27.0 ), 16.0, 'returns expected value' );
	t.strictEqual( truncate2( -27.0 ), -16.0, 'returns expected value' );
	t.strictEqual( truncate2( 48.1 ), 32.0, 'returns expected value' );
	t.strictEqual( truncate2( -48.1 ), -32.0, 'returns expected value' );
	t.strictEqual( truncate2( 0.3 ), 0.25, 'returns expected value' );
	t.strictEqual( truncate2( -0.3 ), -0.25, 'returns expected value' );
	t.strictEqual( truncate2( 0.45 ), 0.25, 'returns expected value' );
	t.strictEqual( truncate2( -0.45 ), -0.25, 'returns expected value' );
	t.end();
});
