'use strict';

// MODULES //

var tape = require( 'tape' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var roundn = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof roundn, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function supports rounding a numeric value to a desired number of decimals', function test( t ) {
	t.equal( roundn( PI, -2 ), 3.14, 'equals 3.14' );
	t.equal( roundn( 9.99999, -2 ), 10.0, 'equals 10' );
	t.equal( roundn( 0.0, 2 ), 0.0, 'equals 0' );
	t.equal( roundn( 12368.0, -3 ), 12368.0, 'equals 12368' );
	t.end();
});

tape( 'the function supports rounding a numeric value to a desired number of digits', function test( t ) {
	t.equal( roundn( PI, 3 ), 0.0, 'equals 0' );
	t.equal( roundn( 12368.0, 3 ), 12000.0, 'equals 12000' );
	t.equal( roundn( 12368.0, 1 ), 12370.0, 'equals 12370' );
	t.end();
});

tape( 'the function returns `-0` if provided `-0` and `0`', function test( t ) {
	var v = roundn( -0.0, 0 );
	t.equal( isNegativeZero( v ), true, 'returns -0' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v;

	v = roundn( NaN, -2 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = roundn( 12368.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = roundn( NaN, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	var v = roundn( PINF, 5 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-infinity`', function test( t ) {
	var v = roundn( NINF, -3 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});
