'use strict';

// MODULES //

var tape = require( 'tape' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var round = require( '@stdlib/math/base/special/round' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var isPositiveZero = require( '@stdlib/math/base/utils/is-positive-zero' );
var roundn = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof roundn, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v;

	v = roundn( NaN, -2 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = roundn( 12368.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = roundn( NaN, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if provided `n = +-infinity`', function test( t ) {
	var v;

	v = roundn( PI, PINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = roundn( PI, NINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	var v = roundn( PINF, 5 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-infinity`', function test( t ) {
	var v = roundn( NINF, -3 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `-0` if provided `-0`', function test( t ) {
	var v;

	v = roundn( -0.0, 0 );
	t.equal( isNegativeZero( v ), true, 'returns -0' );

	v = roundn( -0.0, -2 );
	t.equal( isNegativeZero( v ), true, 'returns -0' );

	v = roundn( -0.0, 2 );
	t.equal( isNegativeZero( v ), true, 'returns -0' );

	t.end();
});

tape( 'the function returns `+0` if provided `+0`', function test( t ) {
	var v;

	v = roundn( 0.0, 0 );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	v = roundn( +0.0, -2 );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	v = roundn( +0.0, 2 );
	t.equal( isPositiveZero( v ), true, 'returns +0' );

	t.end();
});

tape( 'the function supports rounding a numeric value to a desired number of decimals', function test( t ) {
	t.equal( roundn( PI, -2 ), 3.14, 'equals 3.14' );
	t.equal( roundn( -PI, -2 ), -3.14, 'equals -3.14' );
	t.equal( roundn( 9.99999, -2 ), 10.0, 'equals 10' );
	t.equal( roundn( -9.99999, -2 ), -10.0, 'equals -10' );
	t.equal( roundn( 0.0, 2 ), 0.0, 'equals 0' );
	t.equal( roundn( 12368.0, -3 ), 12368.0, 'equals 12368' );
	t.equal( roundn( -12368.0, -3 ), -12368.0, 'equals -12368' );
	t.end();
});

tape( 'rounding a numeric value to a desired number of decimals can result in unexpected behavior', function test( t ) {
	var x = 0.2 + 0.1; // => 0.30000000000000004
	t.equal( roundn( x, -16 ), 0.3000000000000001, 'equals 0.3000000000000001 and not 0.3' );
	t.end();
});

tape( 'the function supports rounding a numeric value to a desired number of digits', function test( t ) {
	t.equal( roundn( PI, 3 ), 0.0, 'equals 0' );
	t.equal( roundn( 12368.0, 3 ), 12000.0, 'equals 12000' );
	t.equal( roundn( 12368.0, 1 ), 12370.0, 'equals 12370' );
	t.equal( isNegativeZero( roundn( -PI, 3 ) ), true, 'equals -0' );
	t.equal( roundn( -12368.0, 3 ), -12000.0, 'equals -12000' );
	t.equal( roundn( -12368.0, 1 ), -12370.0, 'equals -12370' );
	t.end();
});

// TODO: include "failing" test to highlight issues regarding floating-point arithmetic

tape( 'the function returns the input value if provided an `n` which is less than the minimum decimal exponential (-324)', function test( t ) {
	var exp;
	var n;
	var x;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		exp = round( Math.random()*616.0 ) - 308;
		x = (1.0+Math.random()) * pow( 10.0, exp );
		n = -(round( Math.random()*1000.0 ) + 325);
		v = roundn( x, n );
		t.equal( v, x, 'returns input value when provided x='+x+', n='+n+'.' );
	}
	t.end();
});

tape( 'if `x` is too large a double to have decimals and `n < 0`, the input value is returned', function test( t ) {
	var sign;
	var exp;
	var x;
	var n;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		sign = ( Math.random()<0.5 ) ? -1.0 : 1.0;
		exp = 54 + round( Math.random()*254.0 );
		x = sign * (1.0+Math.random()) * pow( 10.0, exp );
		n = -( round( Math.random()*324.0) );
		v = roundn( x, n );
		t.equal( x, v, ' returns input value when provided x='+x+', n='+n+'.' );
	}
	t.end();
});

tape( 'if `n > 308`, the function returns `+-0` (sign preserving)', function test( t ) {
	var sign;
	var exp;
	var x;
	var n;
	var v;
	var i;
	for ( i = 0; i < 100; i++ ) {
		sign = ( Math.random()<0.5 ) ? -1.0 : 1.0;
		exp = round( Math.random()*307.0 );
		x = sign * (1.0+Math.random()) * pow( 10.0, exp );
		n = round( Math.random()*100.0 ) + 309;
		v = roundn( x, n );
		if ( sign === -1.0 ) {
			t.equal( isNegativeZero( v ), true, ' returns -0 when provided x='+x+', n='+n+'.' );
		} else {
			t.equal( isPositiveZero( v ), true, ' returns +0 when provided x='+x+', n='+n+'.' );
		}
	}
	t.end();
});

tape( 'the function supports rounding very small numbers (including subnormals)', function test( t ) {
	var expected;
	var x;
	var n;
	var v;
	var i;

	x = 3.1468234343023397 * pow( 10.0, -308 );

	n = [];
	for ( i = -308; i > -325; i-- ) {
		n.push( i );
	}
	expected = [
		3e-308,
		3.1e-308,
		3.15e-308,
		3.147e-308,
		3.1468e-308,
		3.14682e-308,
		3.146823e-308,
		3.1468234e-308,
		3.14682343e-308,
		3.146823434e-308,
		3.1468234343e-308,
		3.14682343430e-308,
		3.146823434302e-308,
		3.1468234343023e-308,
		3.14682343430234e-308,
		3.146823434302340e-308,
		3.1468234343023397e-308
	];

	for ( i = 0; i < n.length; i++ ) {
		v = roundn( x, n[i] );
		t.equal( v, expected[ i ], 'returns '+expected[i]+' when provided x='+x+' and n='+n[i]+'.' );
	}
	t.end();
});

tape( 'if the function encounters overflow, the function returns the input value', function test( t ) {
	var x;
	var v;

	x = 3.1468234343023397;
	v = roundn( x, -314 );
	t.equal( v, x, 'returns the input value' );

	x = -3.1468234343023397;
	v = roundn( x, -314 );
	t.equal( v, x, 'returns the input value' );

	x = 9007199254740000;
	v = roundn( x, -300 );
	t.equal( v, x, 'returns the input value' );

	x = -9007199254740000;
	v = roundn( x, -300 );
	t.equal( v, x, 'returns the input value' );

	t.end();
});
