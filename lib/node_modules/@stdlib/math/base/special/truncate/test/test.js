'use strict';

// MODULES //

var tape = require( 'tape' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/base/constants/float64-pinf' );
var NINF = require( '@stdlib/math/base/constants/float64-ninf' );
var truncate = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.true( typeof truncate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function rounds a numeric value toward 0', function test( t ) {
	t.equal( truncate( -4.2 ), -4, 'equals -4' );
	t.equal( truncate( 9.99999 ), 9, 'equals 9' );
	t.equal( truncate( 0 ), 0, 'equals 0' );
	t.end();
});

tape( 'if provided `-0`, the function returns `-0`', function test( t ) {
	var v = truncate( -0 );
	t.equal( isNegativeZero( v ), true, 'returns -0' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = truncate( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `+infinity` if provided a `+infinity`', function test( t ) {
	var v = truncate( PINF );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided a `-infinity`', function test( t ) {
	var v = truncate( NINF );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});
