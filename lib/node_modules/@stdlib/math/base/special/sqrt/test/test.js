'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var sqrt = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof sqrt, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the principal square root of a nonnegative number', function test( t ) {

	// TODO: extensive tests against other platforms

	t.equal( sqrt( 4.0 ), 2.0, 'equals 2' );
	t.equal( sqrt( 9.0 ), 3.0, 'equals 3' );
	t.equal( sqrt( 0.0 ), 0.0, 'equals 0' );
	t.end();
});

tape( 'the function returns `NaN` if provided a negative number', function test( t ) {
	var v = sqrt( -4.0 );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = sqrt( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = sqrt( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	var v = sqrt( PINF );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});
