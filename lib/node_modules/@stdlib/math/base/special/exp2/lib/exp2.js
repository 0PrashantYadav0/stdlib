'use strict';


// MODULES //

var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var round = require( '@stdlib/math/base/special/round' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// CONSTANTS //

var P = [
	1.51390680115615096133e3,
	2.02020656693165307700e1,
	2.30933477057345225087e-2
];
var Q = [
	4.36821166879210612817E3,
	2.33184211722314911771E2,
	1.0
];

// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalP = evalpoly( P );
var polyvalQ = evalpoly( Q );


// EXP2 //

/**
* Evaluates the base 2 exponential function.

* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 3.0 );
* // returns 8.0
* @example
* var v = exp( -9.0 );
* // returns ~0.002
* @example
* var v = exp( 0.0 );
* // returns 1.0
* @example
* var v = exp( NaN );
* // returns NaN
*/
function exp2( x ) {
	var px;
	var xx;
	var n;

	if ( isnan( x ) ) {
		return x;
	}
	if ( x > FLOAT64_MAX_BASE2_EXPONENT ) {
		return PINF;
	}
	if ( x < FLOAT64_MIN_BASE2_EXPONENT ) {
		return 0.0;
	}

	xx = x;
	// Separate into integer and fractional parts...
	px = round( x );
	n = px;
	x = x - px;

	xx = x * x;
	px = x * polyvalP( xx );
	x =  px / ( polyvalQ( xx ) - px );
	x = 1.0 + ldexp( x, 1 );

	// Scale by power of 2:
	x = ldexp( x, n );
	return x;
} // end FUNCTION exp2()


// EXPORTS //

module.exports = exp2;
