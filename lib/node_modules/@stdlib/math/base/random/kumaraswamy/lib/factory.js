'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var validate = require( './validate.js' );
var kumaraswamy0 = require( './_kumaraswamy.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating Kumaraswamy's double bounded distributed random numbers.
*
* @param {PositiveNumber} [a] - first shape parameter
* @param {PositiveNumber} [b] - second shape parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `a` must be a positive number
* @throws {TypeError} `b` must be a positive number
* @throws {TypeError} `options` must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var kumaraswamy = factory( 2.0, 1.0 );
* var v = kumaraswamy();
* // returns <number>
*
* @example
* var kumaraswamy = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = kumaraswamy();
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = randu( opts );
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = validate( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( a === void 0 ) {
		prng = kumaraswamy2;
	} else {
		prng = kumaraswamy1;
	}
	setReadOnly( prng, 'NAME', 'kumaraswamy' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a random number drawn from a Kumaraswamy's double bounded distribution with bound parameter values.
	*
	* @private
	* @returns {Probability} pseudorandom number
	*
	* @example
	* var v = beta1();
	* // returns <number>
	*/
	function kumaraswamy1() {
		return kumaraswamy0( rand, a, b );
	} // end FUNCTION kumaraswamy1()

	/**
	* Returns a random number drawn from a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {PositiveNumber} a - first shape parameter
	* @param {PositiveNumber} b - second shape parameter
	* @returns {Probability} pseudorandom number
	*
	* @example
	* var v = kumaraswamy2( 2.0, 3.0 );
	* // returns <number>
	*/
	function kumaraswamy2( a, b ) {
		if (
			isnan( a ) ||
			isnan( b ) ||
			a <= 0.0 ||
			b <= 0.0
		) {
			return NaN;
		}
		return kumaraswamy0( rand, a, b );
	} // end FUNCTION kumaraswamy2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
