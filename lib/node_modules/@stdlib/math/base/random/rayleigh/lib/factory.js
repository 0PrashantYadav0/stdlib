'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var rayleigh0 = require( './_rayleigh.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating Rayleigh distributed random numbers.
*
* @param {PositiveNumber} [sigma] - scale parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var rayleigh = factory( 1.0 );
* var v = rayleigh();
* // returns <number>
*
* @example
* var rayleigh = factory( 0.5, {
*     'seed': 297
* });
* var v = rayleigh();
* // returns <number>
*
* @example
* var rayleigh = factory()
* var v = rayleigh( 0.5 );
* // returns <number>
*/
function factory() {
	var sigma;
	var opts;
	var rand;
	var prng;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		rand = randu( arguments[ 0 ] );
	} else {
		sigma = arguments[ 0 ];
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a positive number. Value: `' + sigma + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( sigma === void 0 ) {
		prng = rayleigh2;
	} else {
		prng = rayleigh1;
	}
	setReadOnly( prng, 'NAME', 'rayleigh' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a pseudorandom number from a Rayleigh distribution with bound scale parameter `sigma`.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = rayleigh1();
	* // returns <number>
	*/
	function rayleigh1() {
		return rayleigh0( rand, sigma );
	} // end FUNCTION rayleigh1()

	/**
	* Returns a pseudorandom number from a Rayleigh distribution with scale parameter `sigma`.
	*
	* @private
	* @param {PositiveNumber} sigma - scale parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = rayleigh2( 3.0 );
	* // returns <number>
	*/
	function rayleigh2( sigma ) {
		if (
			isnan( sigma ) ||
			sigma <= 0.0
		) {
			return NaN;
		}
		return rayleigh0( rand, sigma );
	} // end FUNCTION rayleigh2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
