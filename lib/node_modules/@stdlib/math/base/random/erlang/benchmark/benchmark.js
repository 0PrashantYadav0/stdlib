'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var pkg = require( './../package.json' ).name;
var erlang = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var lambda;
	var k;
	var z;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		k = ceil( randu()*100.0 );
		lambda = ( randu()*20.0 ) + EPS;
		z = erlang( k, lambda );
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( z ) ) {
		b.fail( 'should not return NaN' );
	} else {
		b.pass( 'benchmark finished' );
	}
	b.end();
});

bench( pkg+':factory', function benchmark( b ) {
	var lambda;
	var rand;
	var k;
	var z;
	var i;

	k = 2;
	lambda = 1.5;
	rand = erlang.factory( k, lambda );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		z = rand();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( z ) ) {
		b.fail( 'should not return NaN' );
	} else {
		b.pass( 'benchmark finished' );
	}
	b.end();
});
