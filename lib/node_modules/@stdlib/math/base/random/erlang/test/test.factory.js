'use strict';

// MODULES //

var tape = require( 'tape' );
var kstest = require( '@stdlib/math/generics/statistics/kstest' );
var round = require( '@stdlib/math/base/special/round' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( process.env.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var erlang;
	var r;
	var i;

	// When binding distribution parameters...
	erlang = factory( 2, 2.0 );
	for ( i = 0; i < 100; i++ ) {
		r = erlang();
		t.equal( typeof r, 'number', 'returns a number' );
	}

	// Without binding distribution parameters...
	erlang = factory();
	for ( i = 0; i < 100; i++ ) {
		r = erlang( 2, 2.5 );
		t.equal( typeof r, 'number', 'returns a number' );
	}

	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var erlang1;
	var erlang2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = round( Date.now() / 1000 );

	erlang1 = factory( 1.0, 1.0, {
		'seed': seed
	});
	erlang2 = factory( 1.0, 1.0, {
		'seed': seed
	});

	t.notEqual( erlang1, erlang2, 'separate generators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = erlang1();
		r2 = erlang2();
		t.equal( r1, r2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var erlang = factory();
	t.equal( erlang.NAME, 'erlang', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var erlang = factory();
	t.equal( typeof erlang.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var erlang = factory({
		'seed': 12345
	});
	t.equal( typeof erlang.SEED, 'number', 'has `SEED` property' );
	t.equal( erlang.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function throws an error if provided a `k` argument which is not a positive integer', function test( t ) {
	var values;
	var i;

	values = [
		-2.0,
		0.0,
		0.5,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value, 2.0 );
		};
	}
});

tape( 'the function throws an error if provided a `lambda` argument which is not a positive number', function test( t ) {
	var values;
	var i;

	values = [
		-2.0,
		0.0,
		NaN,
		'5',
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 2, value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (when `k` and `lambda` are not supplied)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (when `k` and `lambda` are supplied)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 1, 1.0, value );
		};
	}
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a first argument equal to `NaN`', function test( t ) {
	var erlang;
	var r;

	erlang = factory();
	r = erlang( NaN, 1.0 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a second argument equal to `NaN`', function test( t ) {
	var erlang;
	var r;

	erlang = factory();
	r = erlang( 1, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided `NaNs`', function test( t ) {
	var erlang;
	var r;

	erlang = factory();
	r = erlang( NaN, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without parameters, the function returns a PRNG that returns `NaN` when provided a first argument which is not a positive integer', function test( t ) {
	var erlang;
	var r;

	erlang = factory();

	r = erlang( 0, 1.0 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = erlang( -1, 1.0 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	t.end();
});

tape( 'when called without parameters, the function returns a PRNG that returns `NaN` when provided a nonpositive second argument', function test( t ) {
	var erlang;
	var r;

	erlang = factory();

	r = erlang( 1, 0.0 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = erlang( 1, -3.14 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns a generator for creating random numbers from the specified Erlang distribution', opts, function test( t ) {
	var rejected;
	var pValue;
	var erlang;
	var lambda;
	var N;
	var k;
	var i;
	var j;
	var x;

	k = 2;
	lambda = 4.0;

	x = new Array( 1e3 );
	rejected = 0;
	N = 300;
	for ( i = 0; i < N; i++ ) {
		erlang = factory( k, lambda );
		t.ok( true, 'seed: '+erlang.SEED );
		for ( j = 0; j < x.length; j++ ) {
			x[ j ] = erlang();
		}
		// Test using Kolmogorov-Smirnov goodness-of-fit test:
		pValue = kstest( x, 'erlang', k, lambda ).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	// Account for small sample sizes and few repeats...
	t.ok( rejected / N < 0.10, 'null hypothesis (i.e., that numbers are drawn from Erlang('+k+','+lambda+') is rejected in less than 10% of cases ('+rejected+' of '+N+')' );
	t.end();
});
