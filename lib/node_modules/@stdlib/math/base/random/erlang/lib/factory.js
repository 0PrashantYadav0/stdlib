'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isPositiveInteger = require( '@stdlib/math/base/utils/is-positive-integer' );
var validate = require( './validate.js' );
var erlang0 = require( './_erlang.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating Erlang distributed random numbers.
*
* @param {PositiveInteger} [k] - shape parameter
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `k` must be a positive integer
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var erlang = factory( 2, 1.0 );
* var v = erlang();
* // returns <number>
*
* @example
* var erlang = factory( 2, 2.0, {
*     'seed': 297
* });
* var v = erlang();
* // returns <number>
*/
function factory() {
	var lambda;
	var rand;
	var opts;
	var prng;
	var err;
	var k;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = randu( opts );
	} else {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		err = validate( k, lambda );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( k === void 0 ) {
		prng = erlang2;
	} else {
		prng = erlang1;
	}
	setReadOnly( prng, 'NAME', 'erlang' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a pseudorandom number drawn from an Erlang distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = erlang1();
	* // returns <number>
	*/
	function erlang1() {
		return erlang0( rand, k, lambda );
	} // end FUNCTION erlang1()

	/**
	* Returns a pseudorandom number drawn from an Erlang distribution.
	*
	* @private
	* @param {PositiveInteger} k - shape parameter
	* @param {PositiveNumber} lambda - rate parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = erlang2( 2, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = erlang2( NaN, 1.0 );
	* // returns NaN
	*
	* v = erlang2( 2, NaN );
	* // returns NaN
	*
	* v = erlang2( 3.14, 1.0 );
	* // returns NaN
	*
	* v = erlang2( 2, 0.0 );
	* // returns NaN
	*/
	function erlang2( k, lambda ) {
		if (
			isnan( k ) ||
			isnan( lambda ) ||
			!isPositiveInteger( k ) ||
			lambda <= 0.0
		) {
			return NaN;
		}
		return erlang0( rand, k, lambda );
	} // end FUNCTION erlang2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
