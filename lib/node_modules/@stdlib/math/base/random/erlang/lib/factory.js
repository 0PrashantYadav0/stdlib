'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' );
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating Erlang distributed random numbers.
*
* @param {PositiveInteger} [k] - shape parameter
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} k argument must be a positive integer
* @throws {TypeError} lambda argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var erlang = factory( 2, 1.0 );
* var v = erlang();
* // returns <number>
*
* @example
* var erlang = factory( 2, 2.0, {
* 	'seed': 297
* });
* var v = erlang();
* // returns <number>
*/
function factory() {
	var lambda;
	var nargs;
	var opts;
	var rand;
	var ret;
	var k;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( arguments[ 0 ] ) ) {
			opts = arguments[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			k = arguments[ 0 ];
			lambda = arguments[ 1 ];
			if ( !isPositiveInteger( k ) ) {
				throw new TypeError( 'invalid input argument. First argument `k` must be a positive integer. Value: `' + k + '`.' );
			}
			if ( !isPositive( lambda ) ) {
				throw new TypeError( 'invalid input argument. Second argument `lambda` must be a positive number. Value: `' + lambda + '`.' );
			}
			if ( nargs > 2 ) {
				opts = arguments[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	if ( k !== void 0 ) {
		ret = erlang1;
	} else {
		ret = erlang2;
	}
	setReadOnly( ret, 'NAME', 'erlang' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a random number drawn from an Erlang distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = erlang1();
	* // returns <number>
	*/
	function erlang1() {
		var uprod;
		var i;
		uprod = 1.0;
		for ( i = 0; i < k; i++ ) {
			uprod *= rand();
		}
		return -(1.0/lambda) * ln( uprod );
	} // end FUNCTION erlang1()

	/**
	* Returns a random number drawn from an Erlang distribution.
	*
	* @private
	* @param {PositiveInteger} k - shape parameter
	* @param {PositiveNumber} lambda - rate parameter
	* @throws {TypeError} k argument must be a positive integer
	* @throws {TypeError} lambda argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = erlang2( 2, 1.0 );
	* // returns <number>
	*/
	function erlang2( k, lambda ) {
		var uprod;
		var i;
		if ( !isPositiveInteger( k ) ) {
			throw new TypeError( 'invalid input argument. First argument `k` must be a positive integer. Value: `' + k + '`.' );
		}
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Second argument `lambda` must be a positive number. Value: `' + lambda + '`.' );
		}
		uprod = 1.0;
		for ( i = 0; i < k; i++ ) {
			uprod *= rand();
		}
		return -(1.0/lambda) * ln( uprod );
	} // end FUNCTION erlang2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
