'use strict';

// MODULES //

var tape = require( 'tape' );
var round = require( '@stdlib/math/base/special/round' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a value which is not an object, the factory function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		3.14,
		NaN,
		true,
		null,
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an unrecognized/unsupported PRNG name', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		'boop',
		'foo',
		'bar'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory({
				'name': value
			});
		};
	}
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var randn;
	var v;
	var i;

	randn = factory();
	for ( i = 0; i < 1e3; i++ ) {
		v = randn();
		t.equal( typeof v, 'number', 'returns a number' );
	}
	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var randu1;
	var randu2;
	var seed;
	var v1;
	var v2;
	var i;

	seed = round( Date.now() / 1000 );

	randu1 = factory({
		'seed': seed
	});
	randu2 = factory({
		'seed': seed
	});

	t.notEqual( randu1, randu2, 'separate generators' );

	for ( i = 0; i < 1e3; i++ ) {
		v1 = randu1();
		v2 = randu2();
		t.equal( v1, v2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var randn = factory();
	t.equal( randn.NAME, 'normal', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var randn = factory({
		'seed': 12345
	});
	t.equal( typeof randn.SEED, 'number', 'has `SEED` property' );
	t.equal( randn.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'attached to the returned function is the minimum possible generated number', function test( t ) {
	var randn = factory();
	t.equal( typeof randn.MIN, 'number', 'has `MIN` property' );
	t.end();
});

tape( 'attached to the returned function is the maximum possible generated number', function test( t ) {
	var randn = factory();
	t.equal( typeof randn.MAX, 'number', 'has `MAX` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var randn = factory();
	t.equal( typeof randn.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'the function supports specifying the underlying PRNG', function test( t ) {
	var randn;
	var v;
	var i;

	randn = factory({
		'name': 'box-muller'
	});

	t.equal( randn.PRNG.NAME, 'box-muller', 'expected `PRNG` value' );

	for ( i = 0; i < 1e3; i++ ) {
		v = randn();
		t.equal( typeof v, 'number', 'returns a number' );
	}
	t.end();
});
