'use strict';

// MODULES //

var tape = require( 'tape' );
var pow = require( '@stdlib/math/base/special/pow' );
var fc = require( './../lib/fc.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof fc, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns the Stirling correction term for a given non-negative integer <= 9', function test( t ) {
	var expected;
	var val;
	var len;
	var k;

	expected = [
		0.08106146679532726,
		0.04134069595540929,
		0.02767792568499834,
		0.02079067210376509,
		0.01664469118982119,
		0.01387612882307075,
		0.01189670994589177,
		0.01041126526197209,
		0.009255462182712733,
		0.008330563433362871
	];

	len = expected.length;
	for ( k = 0; k < len; k++ ) {
		val = fc( k );
		t.equal( val, expected[ k ], 'returns correct correction term' );
	}

	t.end();
});

tape( 'the function calculates the Stirling correction term for non-negative integers > 9', function test( t ) {
	var expected;
	var val;
	var k;

	for ( k = 10; k < 100; k++ ) {
		val = fc( k );
		expected = (1/12 - (1/360 -1/1260/pow( k + 1, 2 ) ) / ( pow( k + 1, 2 ) ) ) / ( k + 1 );
		t.equal( val, expected, 'returns correct correction term' );
	}

	t.end();
});
