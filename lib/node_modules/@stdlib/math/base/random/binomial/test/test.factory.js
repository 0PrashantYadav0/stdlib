'use strict';

// MODULES //

var tape = require( 'tape' );
var round = require( '@stdlib/math/base/special/round' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var binomial;
	var r;
	var i;

	// When binding distribution parameters...
	binomial = factory( 80, 0.05 );
	for ( i = 0; i < 100; i++ ) {
		r = binomial();
		t.equal( typeof r, 'number', 'returns a number' );
	}

	// Without binding distribution parameters...
	binomial = factory();
	for ( i = 0; i < 100; i++ ) {
		r = binomial( 120, 0.75 );
		t.equal( typeof r, 'number', 'returns a number' );
	}

	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var binomial1;
	var binomial2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = round( Date.now() / 1000 );

	binomial1 = factory( 20, 0.3, {
		'seed': seed
	});
	binomial2 = factory( 20, 0.3, {
		'seed': seed
	});

	t.notEqual( binomial1, binomial2, 'separate generators' );

	for ( i = 0; i < 200; i++ ) {
		r1 = binomial1();
		r2 = binomial2();
		t.equal( r1, r2, 'both return same number: '+r1 );
	}
	seed = round( Date.now() / 1000 );

	binomial1 = factory( 100, 0.9, {
		'seed': seed
	});
	binomial2 = factory( 100, 0.9, {
		'seed': seed
	});

	t.notEqual( binomial1, binomial2, 'separate generators' );

	for ( i = 0; i < 200; i++ ) {
		r1 = binomial1();
		r2 = binomial2();
		t.equal( r1, r2, 'both return same number: '+r1 );
	}
	seed = round( Date.now() / 1000 );

	binomial1 = factory( 900, 0.01, {
		'seed': seed
	});
	binomial2 = factory( 900, 0.01, {
		'seed': seed
	});

	t.notEqual( binomial1, binomial2, 'separate generators' );

	for ( i = 0; i < 200; i++ ) {
		r1 = binomial1();
		r2 = binomial2();
		t.equal( r1, r2, 'both return same number: '+r1 );
	}

	seed = round( Date.now() / 1000 );

	binomial1 = factory( 900, 0.5, {
		'seed': seed
	});
	binomial2 = factory( 900, 0.5, {
		'seed': seed
	});

	t.notEqual( binomial1, binomial2, 'separate generators' );

	for ( i = 0; i < 200; i++ ) {
		r1 = binomial1();
		r2 = binomial2();
		t.equal( r1, r2, 'both return same number: '+r1 );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var binomial = factory();
	t.equal( binomial.NAME, 'binomial', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var binomial = factory();
	t.equal( typeof binomial.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var binomial = factory({
		'seed': 12345
	});
	t.equal( typeof binomial.SEED, 'number', 'has `SEED` property' );
	t.equal( binomial.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function throws an error if the `n` value is not a positive integer', function test( t ) {
	var values;
	var i;

	values = [
		-1.0,
		-0.5,
		0.0,
		0.5,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value, 0.5 );
		};
	}
});

tape( 'the function throws an error if the `p` value is not a probability', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-1.0,
		3.14,
		2,
		NaN,
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 10, value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (when `n` and `p` are not supplied)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (when `n` and `p` are supplied)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 10, 0.3, value );
		};
	}
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` if provided a first argument which is `NaN`', function test( t ) {
	var binomial;
	var r;

	binomial = factory();
	r = binomial( NaN, 0.5 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` if provided a second argument which is `NaN`', function test( t ) {
	var binomial;
	var r;

	binomial = factory();
	r = binomial( 2, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` if provided `NaNs`', function test( t ) {
	var binomial;
	var r;

	binomial = factory();
	r = binomial( NaN, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` if provided a first argument which is not a positive integer', function test( t ) {
	var binomial;
	var r;

	binomial = factory();

	r = binomial( 3.14, 0.5 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = binomial( 0.0, 0.5 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = binomial( -1.0, 0.5 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` if provided a second argument which is not a probability', function test( t ) {
	var binomial;
	var r;

	binomial = factory();

	r = binomial( 2, 3.14 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = binomial( 2, -1.0 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = binomial( 2, 1.5 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	t.end();
});

// FIXME: chi2gof
tape( 'the function returns a PRNG for generating random numbers from a specified binomial distribution', opts, function test( t ) {
	var binomial;
	var n;
	var p;
	var i;
	var r;

	n = 20;
	p = 0.67;
	binomial = factory( n, p, {
		'seed': 12345
	});

	for ( i = 0; i < 1e3; i++ ) {
		r = binomial();
		t.strictEqual( isNonNegativeInteger( r ), true, 'returns a nonnegative integer' );
	}
	t.end();
});

// FIXME: chi2gof
tape( 'the function returns a PRNG for generating random numbers from a specified binomial distribution', opts, function test( t ) {
	var binomial;
	var n;
	var p;
	var i;
	var r;

	n = 8;
	p = 0.39;
	binomial = factory( n, p, {
		'seed': 12345
	});

	for ( i = 0; i < 1e3; i++ ) {
		r = binomial();
		t.strictEqual( isNonNegativeInteger( r ), true, 'returns a nonnegative integer' );
	}
	t.end();
});
