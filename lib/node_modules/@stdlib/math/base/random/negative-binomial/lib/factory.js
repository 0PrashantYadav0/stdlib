'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var poisson = require( '@stdlib/math/base/random/poisson' ).factory;
var minstd = require( '@stdlib/math/base/random/minstd' ).factory;
var gamma = require( '@stdlib/math/base/random/gamma' ).factory;
var validate = require( './validate.js' );
var negativeBinomial0 = require( './_negative_binomial.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.
*
* @param {PositiveNumber} [r] - number of failures until experiment is stopped
* @param {number} [p] - success probability
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `r` must be a positive number
* @throws {TypeError} `p` must be number
* @throws {RangeError} `p` must be a number on the interval `(0,1)`
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var negativeBinomial = factory( 10, 0.5 );
* var v = negativeBinomial();
* // returns <number>
*
* @example
* var negativeBinomial = factory( 10, 0.8, {
*     'seed': 297
* });
* var v = negativeBinomial();
* // returns <number>
*
* @example
* var negativeBinomial = factory()
* var v = negativeBinomial( 10, 0.5 );
* // returns <number>
*/
function factory() {
	var rgamma;
	var randi;
	var rpois;
	var opts;
	var prng;
	var err;
	var p;
	var r;

	if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
	} else if ( arguments.length > 1 ) {
		r = arguments[ 0 ];
		p = arguments[ 1 ];
		err = validate( r, p );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
		}
	}
	if ( opts && hasOwnProp( opts, 'seed' ) ) {
		randi = minstd( opts.seed );
	} else {
		randi = minstd();
	}
	rpois = poisson({
		'seed': randi()
	});
	rgamma = gamma({
		'seed': randi()
	});
	if ( r === void 0 ) {
		prng = negativeBinomial2;
	}
	else {
		prng = negativeBinomial1;
	}
	setReadOnly( prng, 'NAME', 'negative-binomial' );
	setReadOnly( prng, 'SEED', randi.SEED );
	setReadOnly( prng, 'PRNG', randi );

	return prng;

	/**
	* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = negativeBinomial1();
	* // returns <number>
	*/
	function negativeBinomial1() {
		return negativeBinomial0( rpois, rgamma, r, p );
	} // end FUNCTION negativeBinomial1()

	/**
	* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.
	*
	* @private
	* @param {PositiveNumber} r - number of failures until experiment is stopped
	* @param {number} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = negativeBinomial2( 10, 0.5 );
	* // returns <number>
	*/
	function negativeBinomial2( r, p ) {
		if (
			isnan( r ) ||
			isnan( p ) ||
			p <= 0.0 ||
			p >= 1.0
		) {
			return NaN;
		}
		return negativeBinomial0( rpois, rgamma, r, p );
	} // end FUNCTION negativeBinomial2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
