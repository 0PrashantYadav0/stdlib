'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-object' );
var poisson = require( '@stdlib/math/base/random/poisson' ).factory;
var minstd = require( '@stdlib/math/base/random/minstd' ).factory;
var gamma = require( '@stdlib/math/base/random/gamma' ).factory;
var isnan = require( '@stdlib/utils/is-nan' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;


// FACTORY //

/**
* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.
*
* @param {PositiveNumber} [r] - number of failures until experiment is stopped
* @param {Probability} [p] - success probability
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} r argument must be a positive number
* @throws {TypeError} p argument must be numeric
* @throws {RangeError} p argument must be a number between 0 and 1
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var rnbinom = factory( 10, 0.5 );
* var v = rnbinom();
* // returns <number>
*
* @example
* var rnbinom = factory( 10, 0.8, {
* 	'seed': 297
* });
* var v = rnbinom();
* // returns <number>
*
* @example
* var rnbinom = factory()
* var v = rnbinom( 10, 0.5 );
* // returns <number>
*/
function factory() {
	var createRandomInt;
	var rgamma;
	var nargs;
	var rpois;
	var seed1;
	var seed2;
	var args;
	var opts;
	var rand;
	var ret;
	var p;
	var r;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu( opts );
		} else {
			r = args[ 0 ];
			p = args[ 1 ];
			if ( !isPositive( r ) ) {
				throw new TypeError( 'invalid input argument. First argument `r` must be a positive number. Value: `' + p + '`.' );
			}
			if ( !isNumber( p ) || isnan( p ) ) {
				throw new TypeError( 'invalid input argument. Second argument `p` must be a number primitive. Value: `' + p + '`.' );
			}
			if ( p < 0.0 || p > 1.0 ) {
				throw new RangeError( 'invalid input argument. Second argument `p` must be a probability. Value: `' + p + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu( opts );
			} else {
				rand = randu();
			}
		}
	}

	createRandomInt = minstd( rand.SEED );
	seed1 = createRandomInt();
	seed2 = createRandomInt();
	rpois = poisson({
		'seed': seed1
	});
	rgamma = gamma({
		'seed': seed2
	});

	if ( r !== void 0 ) {
		ret = rnbinom1;
	}
	else {
		ret = rnbinom2;
	}
	setReadOnly( ret, 'NAME', 'negative-binomial' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand.PRNG );
	return ret;

	/**
	* Returns a random number drawn from a negative binomial distribution with bound parameters `r` and `p`.
	*
	* @private
	* @returns {number} pseudorandom number
	*/
	function rnbinom1() {
		var beta = ( 1.0 - p ) / p;
		return rpois( rgamma( r, beta ) );
	} // end FUNCTION rnbinom1()

	/**
	* Returns a random number drawn from a negative binomial distribution with parameters `r` and `p`.
	*
	* @private
	* @param {PositiveNumber} r - number of failures until experiment is stopped
	* @param {Probability} p - success probability
	* @throws {TypeError} r argument must be a positive integer
	* @throws {TypeError} p argument must be numeric
	* @throws {RangeError} p argument must be a number between 0 and 1
	* @returns {number} pseudorandom number
	*/
	function rnbinom2( r, p ) {
		var beta;
		if ( !isPositive( r ) ) {
			throw new TypeError( 'invalid input argument. First argument `r` must be a positive number. Value: `' + p + '`.' );
		}
		if ( !isNumber( p ) || isnan( p ) ) {
			throw new TypeError( 'invalid input argument. Second argument `p` must be a number primitive. Value: `' + p + '`.' );
		}
		if ( p < 0.0 || p > 1.0 ) {
			throw new RangeError( 'invalid input argument. Second argument `p` must be a probability. Value: `' + p + '`.' );
		}
		beta = ( 1.0 - p ) / p;
		return rpois( rgamma( r, beta ) );
	} // end FUNCTION rnbinom2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
