'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var isnan = require( '@stdlib/utils/is-nan' );
var randn = require( '@stdlib/math/base/random/randn' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating normally distributed random numbers.
*
* @param {number} [mu] - mean parameter
* @param {PositiveNumber} [sigma] - standard deviation
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} mu argument must be a number primitive
* @throws {TypeError} sigma argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var normal = factory( 0.0, 1.0 );
* var v = normal();
* // returns <number>
*
* @example
* var normal = factory( -3.0, 0.5, {
* 	'seed': 297
* });
* var v = normal();
* // returns <number>
*/
function factory() {
	var nargs;
	var sigma;
	var args;
	var opts;
	var rand;
	var ret;
	var mu;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randn.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randn.factory( opts );
		} else {
			mu = args[ 0 ];
			sigma = args[ 1 ];
			if ( !isNumber( mu ) || isnan( mu ) ) {
				throw new TypeError( 'invalid input argument. `mu` must be a number primitive. Value: `' + mu + '`.' );
			}
			if ( !isPositive( sigma ) ) {
				throw new TypeError( 'invalid input argument. `sigma` must be a positive number. Value: `' + sigma + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randn.factory( opts );
			} else {
				rand = randn.factory();
			}
		}
	}

	if ( mu !== void 0 ) {
		ret = normal1;
	} else {
		ret = normal2;
	}
	setReadOnly( ret, 'NAME', 'normal' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a pseudorandom number from a normal distribution with bound parameters `mu` and `sigma`.
	*
	* @private
	* @returns {number} pseudorandom number
	*/
	function normal1() {
		return mu + sigma * rand();
	} // end FUNCTION normal1()

	/**
	* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.
	*
	* @private
	* @param {number} mu - mean parameter
	* @param {PositiveNumber} sigma - standard deviation
	* @throws {TypeError} mu argument must be a number primitive
	* @throws {TypeError} sigma argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normal2( 0.0, 1.0 );
	* // returns <number>
	*/
	function normal2( mu, sigma ) {
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. `mu` must be a number primitive. Value: `' + mu + '`.' );
		}
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. `sigma` must be a positive number. Value: `' + sigma + '`.' );
		}
		return mu + sigma * rand();
	} // end FUNCTION normal2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
