'use strict';

// MODULES //

var tape = require( 'tape' );
var kstest = require( '@stdlib/math/generics/statistics/kstest' );
var round = require( '@stdlib/math/base/special/round' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var rnorm;
	var r;
	var i;

	// When binding distribution parameters...
	rnorm = factory( 0.0, 2.0 );
	for ( i = 0; i < 100; i++ ) {
		r = rnorm();
		t.equal( typeof r, 'number', 'returns a number' );
	}

	// Without binding distribution parameters...
	rnorm = factory();
	for ( i = 0; i < 100; i++ ) {
		r = rnorm( 2.5, 2.0 );
		t.equal( typeof r, 'number', 'returns a number' );
	}

	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var rnorm1;
	var rnorm2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = round( Date.now() / 1000 );

	rnorm1 = factory( 0.0, 1.0, {
		'seed': seed
	});
	rnorm2 = factory( 0.0, 1.0, {
		'seed': seed
	});

	t.notEqual( rnorm1, rnorm2, 'separate generators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = rnorm1();
		r2 = rnorm2();
		t.equal( r1, r2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var rnorm = factory();
	t.equal( rnorm.NAME, 'normal', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var rnorm = factory({
		'seed': 12345
	});
	t.equal( typeof rnorm.SEED, 'number', 'has `SEED` property' );
	t.equal( rnorm.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function throws an error if the `sigma` value is not a positive number value', function test( t ) {
	var values;
	var i;

	values = [
		-2.0,
		0.0,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 0.0, value );
		};
	}
});

tape( 'the function throws an error if the `mu` value is not a number primitive', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value, 1.0 );
		};
	}
});

tape( 'the function throws an error if the `options` is not a simple object (when `mu` and `sigma` are not supplied)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if the `options` is not a simple object (when `mu` and `sigma` are supplied)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 0.0, 1.0, value );
		};
	}
});

tape( 'when called without parameters, the function returns a generator that throws an error if the `mu` value is not a number primitive', function test( t ) {
	var values;
	var rnorm;
	var i;

	rnorm = factory();
	values = [
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			rnorm( value, 1.0 );
		};
	}
});

tape( 'when called without parameters, the function returns a generator that throws an error if the `sigma` value is not a positive number', function test( t ) {
	var values;
	var rnorm;
	var i;

	rnorm = factory();
	values = [
		-2.0,
		0.0,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			rnorm( 0.0, value );
		};
	}
});

// FIXME //

/*
tape( 'the function returns a generator for creating random numbers from the specified normal distribution', function test( t ) {
	var rejected;
	var pValue;
	var rnorm;
	var i;
	var j;
	var x;

	rnorm = factory( 0.0, 4.0, {
		'seed': 12345
	});

	rejected = 0;
	for ( i = 0; i < 100; i++ ) {
		x = new Array( 1e3 );
		for ( j = 0; j < x.length; j++ ) {
			x[ j ] = rnorm();
		}
		// Test using Kolmogorov-Smirnov goodness-of-fit test:
		pValue = kstest( x, 'normal', 0.0, 4.0 ).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value' );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	t.ok( rejected / 100 < 0.05, 'null hypothesis (i.e. that numbers are drawn from Normal(0,4)) is rejected in less than 5% of cases' );
	t.end();
});
*/
