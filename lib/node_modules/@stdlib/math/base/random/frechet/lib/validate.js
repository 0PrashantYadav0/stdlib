'use strict';

// MODULES //

var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0, 1.3 );
* if ( err ) {
*     throw err;
* }
*/
function validate( alpha, s, m ) {
	if ( !isPositiveNumber( alpha ) || isnan( alpha ) ) {
		return new TypeError( 'invalid input argument. First argument must be a number primitive and not `NaN`. Value: `'+alpha+'`.' );
	}
	if ( !isPositiveNumber( s ) || isnan( s ) ) {
		return new TypeError( 'invalid input argument. Second argument must be a number primitive and not `NaN`. Value: `'+s+'`.' );
	}
	if ( !isNumber( m ) || isnan( m ) ) {
		return new TypeError( 'invalid input argument. Third argument must be a number primitive and not `NaN`. Value: `'+m+'`.' );
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
