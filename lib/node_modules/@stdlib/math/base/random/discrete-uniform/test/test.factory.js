'use strict';

// MODULES //

var tape = require( 'tape' );
var ENV = require( '@stdlib/utils/env' );
var round = require( '@stdlib/math/base/special/round' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( ENV.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var discreteUniform;
	var r;
	var i;

	// When binding distribution parameters...
	discreteUniform = factory( -100, 100 );
	for ( i = 0; i < 100; i++ ) {
		r = discreteUniform();
		t.equal( typeof r, 'number', 'returns a number' );
		t.equal( isInteger( r ), true, 'returns an integer' );
	}

	// Without binding distribution parameters...
	discreteUniform = factory();
	for ( i = 0; i < 100; i++ ) {
		r = discreteUniform( -100, 100 );
		t.equal( typeof r, 'number', 'returns a number' );
		t.equal( isInteger( r ), true, 'returns an integer' );
	}
	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var discreteUniform1;
	var discreteUniform2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = round( Date.now() / 1000 );

	discreteUniform1 = factory( 0, 40, {
		'seed': seed
	});
	discreteUniform2 = factory( 0, 40, {
		'seed': seed
	});

	t.notEqual( discreteUniform1, discreteUniform2, 'separate generators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = discreteUniform1();
		r2 = discreteUniform2();
		t.equal( r1, r2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var discreteUniform = factory();
	t.equal( discreteUniform.NAME, 'discrete-uniform', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var discreteUniform = factory();
	t.equal( typeof discreteUniform.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var discreteUniform = factory({
		'seed': 12345
	});
	t.equal( typeof discreteUniform.SEED, 'number', 'has `SEED` property' );
	t.equal( discreteUniform.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function throws an error if minimum support `a` is not an integer primitive', function test( t ) {
	var values;
	var i;

	values = [
		3.14,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value, 20 );
		};
	}
});

tape( 'the function throws an error if maximum support `b` is not an integer primitive', function test( t ) {
	var values;
	var i;

	values = [
		30.14,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( 20, value );
		};
	}
});

tape( 'the function throws an error if minimum support `a` is not less than or equal to maximum support `b`', function test( t ) {
	var values;
	var i;

	values = [
		[ 0, -1 ],
		[ -20, -40 ],
		[ 20, 10 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( arr ) {
		return function badValue() {
			factory( arr[0], arr[1] );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (no other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( 0, 10, value );
		};
	}
});

tape( 'when called without arguments, the function returns a function that returns `NaN` if `a` is `NaN`', function test( t ) {
	var discreteUniform;
	var r;

	discreteUniform = factory();
	r = discreteUniform( NaN, 50 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a function that returns `NaN` if `b` is `NaN`', function test( t ) {
	var discreteUniform;
	var r;

	discreteUniform = factory();
	r = discreteUniform( 0, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a function that returns `NaN` if both `a` and `b` are `NaN`', function test( t ) {
	var discreteUniform;
	var r;

	discreteUniform = factory();
	r = discreteUniform( NaN, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a function that returns `NaN` if minimum support `a` is not less than or equal to maximum support `b`', function test( t ) {
	var discreteUniform;
	var values;
	var r;
	var i;

	discreteUniform = factory();
	values = [
		[ 20, 10 ],
		[ -30, -40 ],
		[ 0, -1 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		r = discreteUniform( values[ i ][ 0 ], values[ i ][ 1 ] );
		t.strictEqual( isnan( r ), true, 'returns `NaN` when provided '+values[ i ] );
	}
	t.end();
});

tape( 'if provided a maximum support equal to the minimum support, the function returns a function that returns the minimum support', function test( t ) {
	var discreteUniform;
	var r;

	discreteUniform = factory( 12, 12 );
	r = discreteUniform();
	t.strictEqual( r, 12, 'returns minimum support' );

	r = discreteUniform();
	t.strictEqual( r, 12, 'returns minimum support' );

	r = discreteUniform();
	t.strictEqual( r, 12, 'returns minimum support' );

	discreteUniform = factory( -10, -10 );
	r = discreteUniform();
	t.strictEqual( r, -10, 'returns minimum support' );

	r = discreteUniform();
	t.strictEqual( r, -10, 'returns minimum support' );

	r = discreteUniform();
	t.strictEqual( r, -10, 'returns minimum support' );

	t.end();
});

opts.skip = true;
tape( 'the function returns a PRNG for generating random numbers from a discrete uniform distribution', opts, function test( t ) {
	// TODO: statistical tests (depends on discrete uniform support being added to dists)

	t.end();
});
