'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating exponentially distributed random numbers.
*
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @returns {Function} pseudorandom number generator
* @throws {TypeError} argument lambda must be a positive number
* @throws {TypeError} options must be an object
*
* @example
* var rexp = factory( 0.5 );
* var v = rexp();
* // returns <number>
*
* @example
* var rexp = factory( 0.8, {
* 	'seed': 297
* });
* var v = rexp();
* // returns <number>
*
* @example
* var rexp = factory()
* var v = rexp( 0.5 );
* // returns <number>
*/
function factory() {
	var lambda;
	var nargs;
	var args;
	var opts;
	var rand;
	var ret;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu();
	}
	else if ( nargs > 0 ) {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu( opts );
		} else {
			lambda = args[ 0 ];
			if ( !isPositive( lambda ) ) {
				throw new TypeError( 'invalid input argument. First argument `lambda` must be a positive number. Value: `' + lambda + '`.' );
			}
			if ( nargs > 1 ) {
				opts = args[ 1 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, second argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu( opts );
			} else {
				rand = randu();
			}
		}
	}

	if ( lambda !== void 0 ) {
		ret = getFcn( lambda );
	}
	else {
		ret = rexp;
	}
	setReadOnly( ret, 'NAME', 'exponential' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand.PRNG );
	return ret;

	/**
	* Binds `lambda` parameter and returns generator for exponential random variates.
	*
	* @private
	* @param {PositiveNumber} lambda - mean parameter
	* @returns {Function} pseudorandom number generator
	*/
	function getFcn( lambda ) {
		return function rexp() {
			return sampler( lambda );
		};
	} // end FUNCTION getFcn()

	/**
	* Performs type-checking and then calls sampler function to generate random number.
	*
	* @private
	* @param {PositiveNumber} lambda - rate parameter
	* @throws {TypeError} must provide a positive number
	* @returns {number} pseudorandom number
	*/
	function rexp( lambda ) {
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. First argument `lambda` must be a positive number. Value: `' + lambda + '`.' );
		}
		return sampler( lambda );
	} // end FUNCTION rexp()

	/**
	* Returns a random number drawn from an exponential distribution with parameter `lambda`.
	*
	* @private
	* @param {PositiveNumber} lambda - mean parameter
	* @returns {number} pseudorandom number
	*/
	function sampler( lambda ) {
		var u = rand();
		return -ln( 1.0 - u ) / lambda;
	} // end FUNCTION sampler()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
