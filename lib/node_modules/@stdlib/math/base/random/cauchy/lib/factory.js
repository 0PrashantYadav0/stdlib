'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-object' );
var randn = require( '@stdlib/math/base/random/randn' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating random numbers from a Cauchy distribution.
*
* @param {number} [x0] - location parameter
* @param {PositiveNumber} [gamma] - scale parameter
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} x0 argument must be a number primitive
* @throws {TypeError} gamma argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var rcauchy = factory( 0.0, 1.0 );
* var v = rcauchy();
* // returns <number>
*
* @example
* var rcauchy = factory( -3.0, 0.5, {
* 	'seed': 297
* });
* var v = rcauchy();
* // returns <number>
*/
function factory() {
	var nargs;
	var gamma;
	var args;
	var opts;
	var rand;
	var ret;
	var x0;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randn.factory();
	}
	else if ( nargs > 0 ) {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randn.factory( opts );
		}
		else {
			x0 = args[ 0 ];
			gamma = args[ 1 ];
			if ( !isNumber( x0 ) ) {
				throw new TypeError( 'invalid input argument. `x0` must be a number primitive. Value: `' + x0 + '`.' );
			}
			if ( !isPositive( gamma ) ) {
				throw new TypeError( 'invalid input argument. `gamma` must be a positive number. Value: `' + gamma + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randn.factory( opts );
			} else {
				rand = randn.factory();
			}
		}
	}

	if ( x0 !== void 0 ) {
		ret = getFcn( x0, gamma );
	} else {
		ret = rcauchy;
	}
	setReadOnly( ret, 'NAME', 'cauchy' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Binds parameters `x0` and `gamma` and returns generator for Cauchy random variates.
	*
	* @private
	* @param {number} x0 - location parameter
	* @param {PositiveNumber} gamma - scale parameter
	* @returns {Function} pseudorandom number generator
	*/
	function getFcn( x0, gamma ) {
		return function rcauchy() {
			return sampler( x0, gamma );
		};
	} // end FUNCTION getFcn()

	/**
	* Performs type-checking and then calls sampler function to generate beta random number.
	*
	* @private
	* @param {number} x0 - location parameter
	* @param {PositiveNumber} gamma - scale parameter
	* @throws {TypeError} x0 argument must be a number primitive
	* @throws {TypeError} gamma argument must be a positive number
	* @returns {number} pseudorandom number
	*/
	function rcauchy( x0, gamma ) {
		if ( !isNumber( x0 ) ) {
			throw new TypeError( 'invalid input argument. `x0` must be a number primitive. Value: `' + x0 + '`.' );
		}
		if ( !isPositive( gamma ) ) {
			throw new TypeError( 'invalid input argument. `gamma` must be a positive number. Value: `' + gamma + '`.' );
		}
		return sampler( x0, gamma );
	} // end FUNCTION rcauchy()

	/**
	* Returns pseudorandom number drawn from a Cauchy distribution.
	*
	* @param {number} x0 - location parameter
	* @param {PositiveNumber} gamma - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = sampler( 0.0, 2.0 );
	* // returns <number>
	*/
	function sampler( x0, gamma ) {
		var u = rand();
		return x0 + gamma * tan( PI * ( u - 0.5 ) );
	} // end FUNCTION sampler()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
