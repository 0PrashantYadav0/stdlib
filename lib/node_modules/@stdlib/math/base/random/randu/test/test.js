'use strict';

// MODULES //

var tape = require( 'tape' );
var kstest = require( '@stdlib/math/generics/statistics/kstest' );
var randu = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': ( process.env.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof randu, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to generate pseudorandom number generators', function test( t ) {
	t.equal( typeof randu.factory, 'function', 'has `factory` method' );
	t.end();
});

tape( 'attached to the main export is the generator name', function test( t ) {
	t.equal( randu.NAME, 'uniform', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the main export is the generator seed', function test( t ) {
	t.equal( typeof randu.SEED, 'number', 'has `SEED` property' );
	t.end();
});

tape( 'attached to the main export is the minimum possible generated number', function test( t ) {
	t.equal( typeof randu.MIN, 'number', 'has `MIN` property' );
	t.equal( randu.MIN, 0.0, 'equals 0.0' );
	t.end();
});

tape( 'attached to the main export is the maximum possible generated number', function test( t ) {
	t.equal( typeof randu.MAX, 'number', 'has `MAX` property' );
	t.end();
});

tape( 'attached to the main export is the underlying PRNG', function test( t ) {
	t.equal( typeof randu.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'the function returns pseudorandom numbers between 0 (inclusive) and 1 (exclusive)', function test( t ) {
	var v;
	var i;
	for ( i = 0; i < 1e4; i++ ) {
		v = randu();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( v >= 0.0 && v < 1.0, true, 'returns a number between 0 (inclusive) and 1 (exclusive)' );
	}
	t.end();
});

tape( 'the function returns pseudorandom numbers from a uniform distribution', opts, function test( t ) {
	var rejected;
	var pValue;
	var N;
	var i;
	var j;
	var x;

	rejected = 0;
	x = new Array( 1e3 );
	N = 500;
	for ( i = 0; i < N; i++ ) {
		for ( j = 0; j < x.length; j++ ) {
			x[ j ] = randu();
			if ( x[ j ] < 0.0 || x[ j ] > 1.0 ) {
				t.ok( false, 'returned a number outside support: '+x[ j ] );
			}
		}
		// Test using Kolmogorov-Smirnov goodness-of-fit test:
		pValue = kstest( x, 'uniform', 0.0, 1.0 ).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value' );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	// Account for small sample sizes and few repeats...
	t.ok( rejected / N < 0.10, 'null hypothesis (i.e., that numbers are drawn from Uniform(0,1)) is rejected in less than 10% of cases ('+rejected+' of '+N+')' );
	t.end();
});
