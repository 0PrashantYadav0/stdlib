'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var minstd = require( '@stdlib/math/base/random/minstd-shuffle' ).factory;
var normal = require( '@stdlib/math/base/random/normal' ).factory;
var gamma = require( '@stdlib/math/base/random/gamma' ).factory;
var randu = require( '@stdlib/math/base/random/randu' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating beta distributed random numbers.
*
* #### References
* * Ahrens, J. H., & Dieter, U. (1974). Computer methods for sampling from gamma, beta, poisson and bionomial distributions. Computing, 12(3), 223â€“246. doi:10.1007/BF02293108
*
* @param {PositiveNumber} [alpha] - first shape parameter
* @param {PositiveNumber} [beta] - second shape parameter
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} alpha argument must be a positive number
* @throws {TypeError} beta argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var beta = factory( 2.0, 1.0 );
* var v = beta();
* // returns <number>
*
* @example
* var beta = factory( 2.0, 2.0, {
* 	'seed': 297
* });
* var v = beta();
* // returns <number>
*
*/
function factory() {
	var createRandomInt;
	var rgamma;
	var alpha;
	var nargs;
	var rnorm;
	var seed1;
	var seed2;
	var args;
	var beta;
	var opts;
	var rand;
	var ret;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			alpha = args[ 0 ];
			beta = args[ 1 ];
			if ( !isPositive( alpha ) ) {
				throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
			}
			if ( !isPositive( beta ) ) {
				throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	createRandomInt = minstd( rand.SEED );
	seed1 = createRandomInt();
	seed2 = createRandomInt();
	rgamma = gamma({
		'seed': seed1
	});
	rnorm = normal({
		'seed': seed2
	});

	if ( alpha !== void 0 ) {
		ret = beta1;
	} else {
		ret = beta2;
	}
	setReadOnly( ret, 'NAME', 'beta' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a random number drawn from a beta distribution with bound parameter values.
	*
	* @private
	* @returns {Probability} pseudorandom number
	*/
	function beta1() {
		return sampler( alpha, beta );
	} // end FUNCTION beta1()

	/**
	* Performs type-checking and then calls sampler function to generate beta random number.
	*
	* @private
	* @param {PositiveNumber} alpha - first shape parameter
	* @param {PositiveNumber} beta - second shape parameter
	* @throws {TypeError} alpha argument must be a positive number
	* @throws {TypeError} beta argument must be a positive number
	* @returns {Probability} pseudorandom number
	*/
	function beta2( alpha, beta ) {
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
		}
		return sampler( alpha, beta );
	} // end FUNCTION beta2()

	/**
	* Returns a random number drawn from a beta distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - first shape parameter
	* @param {PositiveNumber} beta - second shape parameter
	* @returns {Probability} pseudorandom number
	*/
	function sampler( alpha, beta ) {
		var sigma;
		var mu;
		var s4;
		var B;
		var s;
		var A;
		var t;
		var C;
		var L;
		var u;
		var x;
		var y;

		if ( alpha === beta && alpha > 1.5 ) {
			A = alpha - 1.0;
			t = pow( A + A, 0.5 );
			bs: while ( true ) {
				s = rnorm( 0.0, 1.0, rand );
				x =  0.5 * ( 1.0 + s/t );
				if ( x < 0.0 || x > 1.0 ) {
					continue bs;
				}
				u = randu();
				s4 = pow( s, 4.0 );
				if ( u <= 1.0 - s4 / ( 8.0*alpha - 12.0 ) ) {
					return x;
				}
				if ( u >= 1.0 - s4 / (8.0*alpha-12.0) + 0.5 * pow( s4/(8.0*alpha-8.0), 2.0 ) ) {
					continue bs;
				}
				if ( ln(u) > A * ln( 4.0 * x * (1.0-x) ) + s*s / 2.0 ) {
					continue bs;
				}
				return x;
			}
		}
		else if ( alpha > 1.0 && beta > 1.0 ) {
			A = alpha - 1.0;
			B = beta - 1.0;
			C = A + B;
			L = C * ln( C );
			mu = A / C;
			sigma = 0.5 / pow( C, 0.5 );
			bn: while ( true ) {
				s = rnorm( 0.0, 1.0, rand );
				x = mu + sigma * s;
				if ( x < 0.0 || x > 1.0 ) {
					continue bn;
				}
				u = randu();
				if ( ln( u ) > A * ln(x/A) + B * ln((1.0-x)/B) + L + 0.5*s*s ) {
					continue bn;
				}
				return x;
			}
		}
		// General case:
		x = rgamma( alpha, beta );
		y = rgamma( alpha, beta );
		return x / ( x + y );
	} // end FUNCTION sampler()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
