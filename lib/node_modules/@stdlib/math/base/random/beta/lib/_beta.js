'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a random number drawn from a beta distribution.
*
* @private
* @param {Function} rand - pseudorandom number generator for uniformly distributed numbers
* @param {Function} rgamma - pseudorandom number generator for gamma distributed numbers
* @param {Function} rnorm - pseudorandom number generator for normally distributed numbers
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} pseudorandom number
*/
function sample( rand, rgamma, rnorm, alpha, beta ) {
	var sigma;
	var s4;
	var mu;
	var A;
	var B;
	var C;
	var L;
	var s;
	var t;
	var u;
	var x;
	var y;

	if ( alpha === beta && alpha > 1.5 ) {
		A = alpha - 1.0;
		t = pow( A + A, 0.5 );
		while ( true ) {
			s = rnorm( 0.0, 1.0 );
			x =  0.5 * ( 1.0 + s/t );
			if ( x < 0.0 || x > 1.0 ) {
				continue;
			}
			u = rand();
			s4 = pow( s, 4.0 );
			y = 8.0*alpha - 12.0;
			y = 1.0 - s4 / y;
			if ( u <= y ) {
				return x;
			}
			y += 0.5 * pow( s4/(8.0*alpha-8.0), 2.0 );
			if ( u >= y ) {
				continue;
			}
			y = A * ln(4.0 * x * (1.0-x)) + s*s / 2.0;
			if ( ln( u ) > y ) {
				continue;
			}
			return x;
		}
	}
	if ( alpha > 1.0 && beta > 1.0 ) {
		A = alpha - 1.0;
		B = beta - 1.0;
		C = A + B;
		L = C * ln( C );
		mu = A / C;
		sigma = 0.5 / pow( C, 0.5 );
		while ( true ) {
			s = rnorm( 0.0, 1.0 );
			x = mu + s*sigma;
			if ( x < 0.0 || x > 1.0 ) {
				continue;
			}
			u = rand();
			y = A * ln(x/A) + B * ln((1.0-x)/B) + L + 0.5*s*s;
			if ( ln( u ) > y ) {
				continue;
			}
			return x;
		}
	}
	// General case:
	x = rgamma( alpha, beta );
	y = rgamma( alpha, beta );
	return x / ( x + y );
} // end FUNCTION sample()


// EXPORTS //

module.exports = sample;
