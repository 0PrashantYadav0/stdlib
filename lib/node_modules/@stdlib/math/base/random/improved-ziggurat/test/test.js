'use strict';

// MODULES //

var tape = require( 'tape' );
var randn = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof randn, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to generate pseudorandom number generators', function test( t ) {
	t.equal( typeof randn.factory, 'function', 'has `factory` method' );
	t.end();
});

tape( 'attached to the main export is the generator name', function test( t ) {
	t.equal( randn.NAME, 'improved-ziggurat', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the main export is the generator seed', function test( t ) {
	t.equal( typeof randn.SEED, 'number', 'has `SEED` property' );
	t.end();
});

// FIXME: Enable tests as soon `MIN` and `MAX` are exposed
/*
tape( 'attached to the main export is the minimum possible generated number', function test( t ) {
	t.equal( typeof randn.MIN, 'number', 'has `MIN` property' );
	t.equal( randn.MIN < 0.0, true, 'less than 0' );
	t.end();
});

tape( 'attached to the main export is the maximum possible generated number', function test( t ) {
	t.equal( typeof randn.MAX, 'number', 'has `MAX` property' );
	t.equal( randn.MAX > 0.0, true, 'greater than 0' );
	t.end();
});
*/

tape( 'the function returns pseudorandom numbers', function test( t ) {
	var r;
	var i;
	for ( i = 0; i < 1e4; i++ ) {
		r = randn();
		t.equal( typeof r, 'number', 'returns a number' );
	}
	t.end();
});

// TODO: statistical tests for normality, etc.
