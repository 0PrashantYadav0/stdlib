'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isFunction = require( '@stdlib/utils/is-function' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var randint = require( '@stdlib/math/base/random/minstd-shuffle' ).factory;
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var coordsArray = require( './coords_array.js' );
var ratioArray = require( './ratio_array.js' );
var sampleTail = require( './sample_tail.js' );


// VARIABLES //

// Number of blocks:
var NUM_BLOCKS = 128;

// Start of right tail (R):
var START_RIGHT_TAIL = 3.442619855899;

// `X` holds coordinates, such that each rectangle has same area:
var X = coordsArray( NUM_BLOCKS, START_RIGHT_TAIL );

// `R` holds `X[ i+1 ] / X[ i ]`:
var R = ratioArray( X );

// 127 => 0x7F => 01111111
var LAST_7_BITS_MASK = 127|0; // asm type annotation


// MAIN //

/**
* Returns a pseudorandom number generator which implements the improved Ziggurat method to generate normally distributed pseudorandom numbers.
*
* @param {Options} options - function options
* @param {Function} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @returns {Function} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var r = randn();
* // returns <number>
*
* @example
* // Return a seeded PRNG:
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/
function factory( options ) {
	var randi;
	var rand;
	var seed;
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'prng' ) ) {
			if ( !isFunction( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			rand = options.prng;
		}
		if ( hasOwnProp( options, 'seed' ) ) {
			seed = options.seed;
		}
	}
	if ( rand === void 0 ) {
		if ( seed === void 0 ) {
			rand = randu();
		} else {
			rand = randu({
				'seed': seed
			});
		}
	}
	if ( hasOwnProp( rand, 'SEED' ) ) {
		randi = randint( rand.SEED );
	} else {
		randi = randint();
	}
	setReadOnly( randn, 'NAME', 'improved-ziggurat' );
	setReadOnly( randn, 'PRNG', rand );

	if ( hasOwnProp( rand, 'SEED' ) ) {
		seed = rand.SEED;
	} else {
		seed = null;
	}
	setReadOnly( randn, 'SEED', seed );

	return randn;

	/**
	* Generates a normally distributed pseudorandom number.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = randn();
	* // returns <number>
	*/
	function randn() {
		var f0;
		var f1;
		var x2;
		var x;
		var u;
		var i;
		var j;
		while ( true ) {
			u = 2.0 * rand() - 1.0;
			i = randi() & LAST_7_BITS_MASK;

			// First try the rectangular boxes...
			if ( abs( u ) < R[ i ] ) {
				return u * X[ i ];
			}
			// If bottom box, sample from the tail...
			if ( i === 0 ) {
				return sampleTail( rand, START_RIGHT_TAIL, u < 0.0 );
			}
			// Is this a sample from the wedges?
			x = u * X[ i ];
			x2 = x * x;
			j = i + 1;
			f0 = exp( -0.5 * ( X[ i ]*X[ i ] - x2 ) );
			f1 = exp( -0.5 * ( X[ j ]*X[ j ] - x2 ) );
			if ( f1 + rand()*(f0-f1) < 1.0 ) {
				return x;
			}
		}
	} // end FUNCTION randn()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
