'use strict';

// MODULES //

var factory = require( './factory.js' );


// MAIN //

/**
* Generates a standard normally distributed random number.
*
* #### Method
*
* The basic Ziggurat method works as follows:
*
* * One partitions the standard normal density into \\( C \\) blocks of equal area. This partitioning is found by solving the following non-linear equation:
*
*   ``` tex
*   x_{C-1}(r) \left[ f(0) - f\left( x_{C-1}(r) \right) \right] - V(r) = 0
*   ```
*
*   where
*
*   ``` tex
*   V(r) = r \; f(r) + \int_r^\infty \; f(x) \; dx
*   ```
*
*   and \\( r \\) denotes the right-most \\( x_1 \\).
*
* * We then use the following rejection algorithm:
*
*   - Draw a box \\( B_i \\) at random with probability \\( \tfrac{1}{C} \\).
*   - Draw a random number from the box as \\( z = U_0 x_i \\) for \\( i > 0 \\) and \\( z = U_0 V / f(x_1) \\).
*   - If \\( z < x_{i+1} \\), accept \\( z \\).
*   - If \\( i = 0 \\), accept a \\( v \\) by transforming the tail of the normal distribution to the unit interval and then use rejection technique by Marsaglia, G. (1964) to generate a standard normal variable. Otherwise, if \\( i > 0 \\) and \\( U_1 \left[ f(x_i) - f(x_{i+1})\right] < f(z) - f(x_{i+1}) \\) accept \\( z \\).
*   - Go back to the first step.
*
*  * The improved version by Doornik (2005) changes step four in order to correct a deficiency of the original Ziggurat algorithm. The updated version requires the generation of two random numbers, a uniform variable drawn from \\( U(-1,1) \\) and the last seven bits of a random integer.
*
* #### References
*
* * Doornik, J. A. (2005). An Improved Ziggurat Method to Generate Normal Random Samples.
* * Marsaglia, G., and Tsang, W. W. (2000). The Ziggurat method for generating random variables. Journal of Statistical Software, 5, 1–7. doi:10.1145/355744.355749
* * Marsaglia, G. (1964). Generating a Variable from the Tail of the Normal Distribution. Technometrics, 6(1), 101–102. doi:10.1080/00401706.1964.10490150
*
*
* @function randn
* @type {Function}
* @returns {number} pseudorandom number
*
* @example
* var r = randn();
* // returns <number>
*/
var randn = factory();


// EXPORTS //

module.exports = randn;
