'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var isnan = require( '@stdlib/utils/is-nan' );
var randu = require( '@stdlib/math/base/random/randu' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating random numbers from a triangular distribution.
*
* @param {number} [a] - minimum support
* @param {number} [b] - maximum support
* @param {number} [c] - mode
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @returns {Function} pseudorandom number generator
*
* @example
* var rtriang = factory( 0.0, 1.0, 0.8 );
* var v = rtriang();
* // returns <number>
*
* @example
* var rtriang = factory( -3.0, -1.0, -2.0, {
* 	'seed': 297
* });
* var v = rtriang();
* // returns <number>
*/
function factory() {
	var nargs;
	var args;
	var opts;
	var rand;
	var ret;
	var a;
	var b;
	var c;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		} else {
			a = args[ 0 ];
			b = args[ 1 ];
			c = args[ 2 ];
			if ( !isNumber( a ) || isnan( a ) ) {
				throw new TypeError( 'invalid input argument. `a` must be a number primitive. Value: `' + a + '`.' );
			}
			if ( !isNumber( b ) || isnan( b ) ) {
				throw new TypeError( 'invalid input argument. `b` must be a number primitive. Value: `' + b + '`.' );
			}
			if ( !isNumber( c ) || isnan( c ) ) {
				throw new TypeError( 'invalid input argument. `c` must be a number primitive. Value: `' + c + '`.' );
			}
			if ( !( a <= c && c <= b ) ) {
				throw new RangeError( 'invalid input arguments. The conditions `a <= c` and `c <= b` have to be satisfied.' );
			}
			if ( nargs > 3 ) {
				opts = args[ 3 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	if ( a !== void 0 ) {
		ret = triangular1;
	} else {
		ret = triangular2;
	}
	setReadOnly( ret, 'NAME', 'triangular' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/*
	* Returns a pseudorandom number from a triangular distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = triangular1();
	* // returns <number>
	*/
	function triangular1() {
		var pInflection;
		var fact1;
		var fact2;
		var u;

		pInflection = ( c - a ) / ( b - a );
		fact1 = ( b - a ) * ( c - a );
		fact2 = ( b - a ) * ( b - c );

		u = rand();
		if ( u  < pInflection ) {
			return a + sqrt( fact1 * u );
		}
		// Case: u >= pInflection
		return b - sqrt( fact2 * ( 1.0 - u ) );
	} // end FUNCTION triangular1()

	/*
	* Returns a pseudorandom number from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.
	*
	* @private
	* @param {number} a - minimum support
	* @param {number} b - maximum support
	* @param {number} c - mode
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = triangular2( 0.0, 1.0, 0.5 );
	* // returns <number>
	*/
	function triangular2( a, b, c ) {
		var pInflection;
		var fact1;
		var fact2;
		var u;

		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. `a` must be a number primitive. Value: `' + a + '`.' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. `b` must be a number primitive. Value: `' + b + '`.' );
		}
		if ( !isNumber( c ) || isnan( c ) ) {
			throw new TypeError( 'invalid input argument. `c` must be a number primitive. Value: `' + c + '`.' );
		}
		if ( !( a <= c && c <= b ) ) {
			throw new RangeError( 'invalid input arguments. The conditions `a <= c` and `c <= b` have to be satisfied.' );
		}

		pInflection = ( c - a ) / ( b - a );
		fact1 = ( b - a ) * ( c - a );
		fact2 = ( b - a ) * ( b - c );

		u = rand();
		if ( u  < pInflection ) {
			return a + sqrt( fact1 * u );
		}
		// Case: u >= pInflection
		return b - sqrt( fact2 * ( 1.0 - u ) );
	} // end FUNCTION triangular2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
