'use strict';

// MODULES //

var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isnan = require( '@stdlib/utils/is-nan' );


// MAIN //

/**
* Validates parameters.
*
* @private
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0, 1.3 );
* if ( err ) {
*     throw err;
* }
*/
function validate( a, b, c ) {
	if ( !isNumber( a ) || isnan( a ) ) {
		return new TypeError( 'invalid input argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !isNumber( b ) || isnan( b ) ) {
		return new TypeError( 'invalid input argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( !isNumber( c ) || isnan( c ) ) {
		return new TypeError( 'invalid input argument. Third argument must be a number primitive and not `NaN`. Value: `'+c+'`.' );
	}
	if ( !(a <= c && c <= b) ) {
		return new RangeError( 'invalid input arguments. The condition `a <= c <= b` must be satisfied. Value: `['+a+','+b+','+c+']`.');
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
