'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var gamma = require( '@stdlib/math/base/random/gamma' ).factory;


// FACTORY //

/**
* Returns a pseudorandom number generator for generating chi-square distributed random numbers.
*
* @param {PositiveNumber} [k] - degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} k argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var chisquare = factory( 2.0 );
* var v = chisquare();
* // returns <number>
*
* @example
* var chisquare = factory( 2.0, {
*     'seed': 297
* });
* var v = chisquare();
* // returns <number>
*
*/
function factory() {
	var rgamma;
	var nargs;
	var args;
	var opts;
	var ret;
	var k;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rgamma = gamma();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rgamma = gamma( opts );
		} else {
			k = args[ 0 ];
			if ( !isPositive( k ) ) {
				throw new TypeError( 'invalid input argument. First argument `k` must be a positive number. Value: `' + k + '`.' );
			}
			if ( nargs > 1 ) {
				opts = args[ 1 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rgamma = gamma( k / 2.0, 0.5, opts );
			} else {
				rgamma = gamma( k / 2.0, 0.5 );
			}
		}
	}

	if ( k !== void 0 ) {
		ret = chisquare1;
	}
	else {
		ret = chisquare2;
	}
	setReadOnly( ret, 'NAME', 'chisquare' );
	setReadOnly( ret, 'SEED', rgamma.SEED );
	setReadOnly( ret, 'PRNG', rgamma.PRNG );
	return ret;

	/**
	* Returns a random number drawn from a chisquare distribution with bound `k`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare1();
	* // returns <number>
	*/
	function chisquare1() {
		return rgamma( k / 2.0, 0.5 );
	} // end FUNCTION chisquare1()

	/**
	* Returns a random number drawn from a chisquare distribution with degrees of freedom `k`.
	*
	* @private
	* @param {PositiveNumber} k - degrees of freedom
	* @throws {TypeError} k argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare2( 2.0 );
	* // returns <number>
	*/
	function chisquare2( k ) {
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Degrees of freedom `k` must be a positive number. Value: `' + k + '`.' );
		}
		return rgamma( k / 2.0, 0.5 );
	} // end FUNCTION chisquare2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
