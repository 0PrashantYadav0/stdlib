'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var rgamma = require( '@stdlib/math/base/random/gamma' ).factory;
var chisquare0 = require( './_chisquare.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating chi-square distributed random numbers.
*
* @param {PositiveNumber} [k] - degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var chisquare = factory( 2 );
* var v = chisquare();
* // returns <number>
*
* @example
* var chisquare = factory( 2, {
*     'seed': 297
* });
* var v = chisquare();
* // returns <number>
*/
function factory() {
	var rand;
	var opts;
	var prng;
	var k;
	if ( arguments.length === 0 ) {
		rand = rgamma();
	} else if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		rand = rgamma( arguments[ 0 ] );
	} else {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a positive number. Value: `' + k + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = rgamma( k/2.0, 0.5, opts );
		} else {
			rand = rgamma( k/2.0, 0.5 );
		}
	}
	if ( k === void 0 ) {
		prng = chisquare2;
	}
	else {
		prng = chisquare1;
	}
	/**
	* Returns a random number drawn from a chi-square distribution with bound `k`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare1();
	* // returns <number>
	*/
	function chisquare1() {
		return chisquare0( rand, k );
	} // end FUNCTION chisquare1()

	/**
	* Returns a random number drawn from a chi-square distribution with degrees of freedom `k`.
	*
	* @private
	* @param {PositiveNumber} k - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare2( 2 );
	* // returns <number>
	*/
	function chisquare2( k ) {
		if (
			isnan( k ) ||
			k <= 0
		) {
			return NaN;
		}
		return chisquare0( rand, k );
	} // end FUNCTION chisquare2()

	setReadOnly( prng, 'NAME', 'chisquare' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand.PRNG );

	return prng;
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
