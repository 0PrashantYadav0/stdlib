'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var chisquare = require( '@stdlib/math/base/random/chisquare' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var validate = require( './validate.js' );
var f0 = require( './_f.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating F distributed random numbers.
*
* @param {PositiveNumber} [d1] - degrees of freedom
* @param {PositiveNumber} [d2] - degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var f = factory( 1.0, 2.0 );
* var v = f();
* // returns <number>
*
* @example
* var f = factory( 0.5, 3.0, {
*     'seed': 297
* });
* var v = f();
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var err;
	var d1;
	var d2;

	if ( arguments.length === 0 ) {
		rand = chisquare();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = chisquare( opts );
	} else {
		d1 = arguments[ 0 ];
		d2 = arguments[ 1 ];
		err = validate( d1, d2 );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = chisquare( opts );
		} else {
			rand = chisquare();
		}
	}
	if ( d1 === void 0 ) {
		prng = f2;
	} else {
		prng = f1;
	}
	setReadOnly( prng, 'NAME', 'f' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a pseudorandom number from an F distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = f1();
	* // returns <number>
	*/
	function f1() {
		return f0( rand, d1, d2 );
	} // end FUNCTION f1()

	/**
	* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.
	*
	* @private
	* @param {PositiveNumber} d1 - degrees of freedom
	* @param {PositiveNumber} d2 - degrees of freedom
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = f2( 3.0, 2.0 );
	* // returns <number>
	*
	* @example
	* var v = f2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = f2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = f2( NaN, NaN );
	* // returns NaN
	*/
	function f2( d1, d2 ) {
		if (
			isnan( d1 ) ||
			isnan( d2 ) ||
			d1 <= 0.0 ||
			d2 <= 0.0
		) {
			return NaN;
		}
		return f0( rand, d1, d2 );
	} // end FUNCTION f2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
