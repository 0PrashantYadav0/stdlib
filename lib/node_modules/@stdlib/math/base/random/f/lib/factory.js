'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var chisquare = require( '@stdlib/math/base/random/chisquare' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating F distributed random numbers.
*
* @param {PositiveNumber} [d1] - numerator degrees of freedom
* @param {PositiveNumber} [d2] - denominator degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} d1 argument must be a positive number
* @throws {TypeError} d2 argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var f = factory( 1.0, 2.0 );
* var v = f();
* // returns <number>
*
* @example
* var f = factory( 0.5, 3.0, {
*     'seed': 297
* });
* var v = f();
* // returns <number>
*/
function factory() {
	var rchisq;
	var nargs;
	var args;
	var opts;
	var rand;
	var ret;
	var d1;
	var d2;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		} else {
			d1 = args[ 0 ];
			d2 = args[ 1 ];
			if ( !isPositive( d1 ) ) {
				throw new TypeError( 'invalid input argument. First argument `d1` must be a positive number. Value: `' + d1 + '`.' );
			}
			if ( !isPositive( d2 ) ) {
				throw new TypeError( 'invalid input argument. Second argument `d2` must be a positive number. Value: `' + d2 + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	rchisq = chisquare.factory({
		'seed': rand.SEED
	});

	if ( d1 !== void 0 ) {
		ret = f1;
	}
	else {
		ret = f2;
	}
	setReadOnly( ret, 'NAME', 'f' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a pseudorandom number from a F distribution with bound parameters `df1` and `df2`.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = f();
	* // returns <number>
	*/
	function f1() {
		var x1 = rchisq( d1 ) / d1;
		var x2 = rchisq( d2 ) / d2;
		return x1 / x2;
	} // end FUNCTION f1()

	/**
	* Returns a pseudorandom number from a F distribution with parameters `d1` and `d2`.
	*
	* @private
	* @param {PositiveNumber} d1 - numerator degrees of freedom
	* @param {PositiveNumber} d2 - denominator degrees of freedom
	* @throws {TypeError} d1 argument must be a positive number
	* @throws {TypeError} d2 argument must be a positive number
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = f( 3.0, 2.0 );
	* // returns <number>
	*/
	function f2( d1, d2 ) {
		var x1;
		var x2;
		if ( !isPositive( d1 ) ) {
			throw new TypeError( 'invalid input argument. First argument `d1` must be a positive number. Value: `' + d1 + '`.' );
		}
		if ( !isPositive( d2 ) ) {
			throw new TypeError( 'invalid input argument. Second argument `d2` must be a positive number. Value: `' + d2 + '`.' );
		}
		x1 = rchisq( d1 ) / d1;
		x2 = rchisq( d2 ) / d2;
		return x1 / x2;
	} // end FUNCTION f2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
