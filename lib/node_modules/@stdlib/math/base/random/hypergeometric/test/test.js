'use strict';

// MODULES //

var tape = require( 'tape' );
var uniform = require( '@stdlib/math/base/random/uniform' ).factory;
var round = require( '@stdlib/math/base/special/round' );
var hypergeometric = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof hypergeometric, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to generate pseudorandom number generators', function test( t ) {
	t.equal( typeof hypergeometric.factory, 'function', 'has `factory` method' );
	t.end();
});

tape( 'attached to the main export is the generator name', function test( t ) {
	t.equal( hypergeometric.NAME, 'hypergeometric', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the main export is the generator seed', function test( t ) {
	t.equal( typeof hypergeometric.SEED, 'number', 'has `SEED` property' );
	t.end();
});

tape( 'the function returns pseudorandom numbers', function test( t ) {
	var runif;
	var m;
	var n;
	var k;
	var r;
	var i;

	runif = uniform({
		'seed': 3893
	});
	for ( i = 0; i < 1e2; i++ ) {
		m = round( runif( 0.0, 100 ) );
		n = round( runif( 0.0, 100 ) );
		k = round( ( m + n ) * runif( 0.0, 1.0 ) );
		r = hypergeometric( m, n, k );
		t.equal( typeof r, 'number', 'returns a number' );
	}
	t.end();
});
