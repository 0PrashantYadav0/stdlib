'use strict';

// MODULES //

var tape = require( 'tape' );
var chi2gof = require( '@stdlib/math/generics/statistics/chi2gof' );
var round = require( '@stdlib/math/base/special/round' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' ).factory;
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( process.env.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var hypergeometric;
	var r;
	var i;

	// When binding distribution parameters...
	hypergeometric = factory( 80, 50, 30 );
	for ( i = 0; i < 100; i++ ) {
		r = hypergeometric();
		t.equal( typeof r, 'number', 'returns a number' );
	}

	// Without binding distribution parameters...
	hypergeometric = factory();
	for ( i = 0; i < 100; i++ ) {
		r = hypergeometric( 80, 50, 30 );
		t.equal( typeof r, 'number', 'returns a number' );
	}

	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var hypergeometric1;
	var hypergeometric2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = round( Date.now() / 1000 );

	hypergeometric1 = factory( 20, 10, 15, {
		'seed': seed
	});
	hypergeometric2 = factory( 20, 10, 15, {
		'seed': seed
	});

	t.notEqual( hypergeometric1, hypergeometric2, 'separate generators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = hypergeometric1();
		r2 = hypergeometric2();
		t.equal( r1, r2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var hypergeometric = factory();
	t.equal( hypergeometric.NAME, 'hypergeometric', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var hypergeometric = factory();
	t.equal( typeof hypergeometric.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var hypergeometric = factory({
		'seed': 12345
	});
	t.equal( typeof hypergeometric.SEED, 'number', 'has `SEED` property' );
	t.equal( hypergeometric.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function throws an error if provided a population size which is not a nonnegative integer', function test( t ) {
	var values;
	var i;

	values = [
		-1.0,
		-0.5,
		0.5,
		NaN,
		'5',
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value, 10, 5 );
		};
	}
});

tape( 'the function throws an error if provided a sub-population size which is not a nonnegative integer', function test( t ) {
	var values;
	var i;

	values = [
		-1.0,
		-0.5,
		0.5,
		NaN,
		'5',
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 10, value, 5 );
		};
	}
});

tape( 'the function throws an error if the number of draws is not a nonnegative integer', function test( t ) {
	var values;
	var i;

	values = [
		-1.0,
		-0.5,
		0.5,
		NaN,
		'5',
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 10, 5, value );
		};
	}
});

tape( 'the function throws an error if the number of draws exceeds the total population size', function test( t ) {
	var values;
	var i;

	values = [
		[ 2, 3, 6 ],
		[ 3, 1, 5 ],
		[ 10, 10, 21 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( arr ) {
		return function() {
			factory( arr[0], arr[1], arr[2] );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (only argument)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 10, 10, 5, value );
		};
	}
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a population size equal to `NaN`', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( NaN, 10, 5 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a subpopulation size equal to `NaN`', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( 10, NaN, 5 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when the number of draws is equal to `NaN`', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( 10, 10, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG provided all `NaNs`', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( NaN, NaN, NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a population size which is a nonnegative integer', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( 13.14, 10, 5 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a subpopulation size which is a nonnegative integer', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( 10, 9.99, 5 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when the number of draws is not a nonnegative integer', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( 10, 10, 3.5 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when the number of draws exceeds the population size', function test( t ) {
	var hypergeometric;
	var r;

	hypergeometric = factory();
	r = hypergeometric( 10, 10, 11 );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

// FIXME: enable once hypergeometric PMF pkg has been updated
opts.skip = true;
tape( 'the function returns a PRNG for generating random numbers from a hypergeometric distribution', opts, function test( t ) {
	var hypergeometric;
	var rejected;
	var repeats;
	var pValue;
	var probs;
	var freq;
	var hpmf;
	var T;
	var N;
	var K;
	var n;
	var i;
	var j;
	var x;

	N = 100;
	K = 25;
	n = 7;
	hpmf = pmf( N, K, n );

	freq = new Array( 30 );
	probs = new Array( freq.length );
	for ( j = 0; j < freq.length; j++ ) {
		probs[ j ] = hpmf( j );
	}
	repeats = 200;
	T = 1e3;
	rejected = 0;
	for ( i = 0; i < repeats; i++ ) {
		hypergeometric = factory( N, K, n );
		t.ok( true, 'seed: '+hypergeometric.SEED );

		// Reset the `freq` array...
		for ( j = 0; j < freq.length; j++ ) {
			freq[ j ] = 0;
		}
		for ( j = 0; j < T; j++ ) {
			x = hypergeometric();
			freq[ x ] += 1;
		}
		// Test using chi-square goodness-of-fit test:
		pValue = chi2gof( freq, probs, {
			'rescale': true,
			'simulate': true,
			'iterations': 500
		}).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	// Account for small sample sizes and few repeats...
	t.ok( rejected / repeats < 0.10, 'null hypothesis (i.e., that numbers are drawn from Hypergeometric('+N+','+K+','+n+') is rejected in less than 10% of cases ('+rejected+' of '+repeats+')' );
	t.end();
});
