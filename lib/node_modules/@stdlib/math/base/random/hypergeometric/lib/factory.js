'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/utils/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;


// FACTORY //

/**
* Returns a pseudorandom number generator for generating hypergeometric distributed random numbers.
*
* @param {NonNegativeInteger} [m] - number of white balls in urn
* @param {NonNegativeInteger} [n] - number of black balls in urn
* @param {NonNegativeInteger} [k] - number of draws
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} m argument must be a non-negative integer
* @throws {TypeError} n argument must be a non-negative integer
* @throws {TypeError} k argument must be a non-negative integer
* @throws {RangeError} k argument must not exceed m + n
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var rhypergeom = factory( 5, 3, 2 );
* var v = rhypergeom();
* // returns <number>
*
* @example
* var rhypergeom = factory( 10, 10, 10, {
* 	'seed': 297
* });
* var v = rhypergeom();
* // returns <number>
*
* @example
* var rhypergeom = factory()
* var v = rhypergeom( 5, 3, 2 );
* // returns <number>
*/
function factory() {
	var nargs;
	var args;
	var opts;
	var rand;
	var ret;
	var m;
	var n;
	var k;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu( opts );
		} else {
			m = args[ 0 ];
			n = args[ 1 ];
			k = args[ 2 ];
			if ( !isNonNegativeInteger( m ) ) {
				throw new TypeError( 'invalid input argument. First argument `m` must be a non-negative integer. Value: `' + m + '`.' );
			}
			if ( !isNonNegativeInteger( n ) ) {
				throw new TypeError( 'invalid input argument. Second argument `n` must be a non-negative integer. Value: `' + n + '`.' );
			}
			if ( !isNonNegativeInteger( k ) ) {
				throw new TypeError( 'invalid input argument. Third argument `k` must be a non-negative integer. Value: `' + k + '`.' );
			}
			if ( k > m + n ) {
				throw new RangeError( 'invalid input arguments. Third argument `k` must be smaller than or equal to `m+n`. Value: `' + k + '`.' );
			}
			if ( nargs > 3 ) {
				opts = args[ 3 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu( opts );
			} else {
				rand = randu();
			}
		}
	}

	if ( m !== void 0 ) {
		ret = hypergeometric1;
	}
	else {
		ret = hypergeometric2;
	}
	setReadOnly( ret, 'NAME', 'hypergeometric' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand.PRNG );
	return ret;

	/**
	* Returns a random number drawn from a hypergeometric distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*/
	function hypergeometric1() {
		return sampler( m, n, k );
	} // end FUNCTION hypergeometric1()

	/**
	* Returns a random number drawn from a hypergeometric distribution.
	*
	* @private
	* @param {NonNegativeInteger} m - number of white balls in urn
	* @param {NonNegativeInteger} n - number of black balls in urn
	* @param {NonNegativeInteger} k - number of draws
	* @throws {TypeError} m argument must be a non-negative integer
	* @throws {TypeError} n argument must be a non-negative integer
	* @throws {TypeError} k argument must be a non-negative integer
	* @throws {RangeError} k argument must not exceed m + n
	* @returns {NonNegativeInteger} pseudorandom number
	*/
	function hypergeometric2( m, n, k ) {
		if ( !isNonNegativeInteger( m ) ) {
			throw new TypeError( 'invalid input argument. First argument `m` must be a non-negative integer. Value: `' + m + '`.' );
		}
		if ( !isNonNegativeInteger( n ) ) {
			throw new TypeError( 'invalid input argument. Second argument `n` must be a non-negative integer. Value: `' + n + '`.' );
		}
		if ( !isNonNegativeInteger( k ) ) {
			throw new TypeError( 'invalid input argument. Third argument `k` must be a non-negative integer. Value: `' + k + '`.' );
		}
		if ( k > m + n ) {
			throw new RangeError( 'invalid input arguments. Third argument `k` must be smaller than or equal to `m+n`. Value: `' + k + '`.' );
		}
		return sampler( m, n, k );
	} // end FUNCTION hypergeometric2()

	/**
	* Returns a random number drawn from a hypergeometric distribution.
	*
	* #### Method
	* * Uses HBU algorithm by Kachitvichyanukul et al. given that the alternative HALIAS has a large initialization cost.
	*
	* #### References
	* * Kachitvichyanukul, V., & Schmeiser, B. (2007). Computer generation of hypergeometric random variates. Journal of Statistical Computation and Simulation, 22(2), 127â€“145. doi:10.1080/00949658508810839
	*
	* @private
	* @param {NonNegativeInteger} m - number of white balls in urn
	* @param {NonNegativeInteger} n - number of black balls in urn
	* @param {NonNegativeInteger} k - number of draws
	* @returns {NonNegativeInteger} pseudorandom number
	*/
	function sampler( m, n, k ) {
		var ntotal;
		var t1;
		var j;
		var t;
		var u;
		var x;

		x = 0;
		ntotal = m + n;
		t = ntotal;
		t1 = m;
		for ( j = 0; j <= k; j++ ) {
			u = rand();
			if ( u < t1/t ) {
				x += 1;
				if ( x === m ) {
					return x;
				}
				t1 -= 1;
			}
			t -= 1;
		}
		return x;
	} // end FUNCTION sampler()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
