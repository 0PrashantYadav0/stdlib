'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var isNonNegativeInteger = require( '@stdlib/math/base/utils/is-nonnegative-integer' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var validate = require( './validate.js' );
var hypergeometric0 = require( './_hypergeometric.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating hypergeometric distributed random numbers.
*
* @param {NonNegativeInteger} [N] - population size
* @param {NonNegativeInteger} [K] - subpopulation size
* @param {NonNegativeInteger} [n] - number of draws
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `N` must be a non-negative integer
* @throws {TypeError} `K` must be a non-negative integer
* @throws {TypeError} `n` must be a non-negative integer
* @throws {RangeError} `n` must be less than or equal to `N`
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var hypergeometric = factory( 5, 3, 2 );
* var v = hypergeometric();
* // returns <number>
*
* @example
* var hypergeometric = factory( 10, 10, 10, {
*     'seed': 297
* });
* var v = hypergeometric();
* // returns <number>
*
* @example
* var hypergeometric = factory();
* var v = hypergeometric( 5, 3, 2 );
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var err;
	var N;
	var K;
	var n;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = randu( opts );
	} else {
		N = arguments[ 0 ];
		K = arguments[ 1 ];
		n = arguments[ 2 ];
		err = validate( N, K, n );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 3 ) {
			opts = arguments[ 3 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( N === void 0 ) {
		prng = hypergeometric2;
	}
	else {
		prng = hypergeometric1;
	}
	setReadOnly( prng, 'NAME', 'hypergeometric' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand.PRNG );

	return prng;

	/**
	* Returns a random number drawn from a hypergeometric distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = hypergeometric1();
	* // returns <number>
	*/
	function hypergeometric1() {
		return hypergeometric0( rand, N, K, n );
	} // end FUNCTION hypergeometric1()

	/**
	* Returns a pseudorandom number drawn from a hypergeometric distribution.
	*
	* @private
	* @param {NonNegativeInteger} N - population size
	* @param {NonNegativeInteger} K - subpopulation size
	* @param {NonNegativeInteger} n - number of draws
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = hypergeometric2( 5, 3, 2 );
	* // returns <number>
	*
	* @example
	* var v = hypergeometric2( NaN, NaN, NaN );
	* // returns NaN
	*
	* @example
	* var v = hypergeometric2( 5.21, 3.14, 2.76 );
	* // returns NaN
	*/
	function hypergeometric2( N, K, n ) {
		if (
			N === PINF ||
			K === PINF ||
			!isNonNegativeInteger( N ) ||
			!isNonNegativeInteger( K ) ||
			!isNonNegativeInteger( n ) ||
			n > N
		) {
			return NaN;
		}
		return hypergeometric0( rand, N, K, n );
	} // end FUNCTION hypergeometric2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
