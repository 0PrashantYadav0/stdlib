'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var minstd = require( '@stdlib/math/base/random/minstd-shuffle' ).factory;
var chisquare = require( '@stdlib/math/base/random/chisquare' ).factory;
var randn = require( '@stdlib/math/base/random/randn' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var t0 = require( './_t.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating t-distributed random numbers.
*
* @param {PositiveNumber} [v] - degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `v` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var t = factory( 1.0 );
* var v = t();
* // returns <number>
*
* @example
* var t = factory( 0.5, {
*     'seed': 297
* });
* var v = t();
* // returns <number>
*
* @example
* var t = factory()
* var v = t( 0.5 );
* // returns <number>
*/
function factory() {
	var rchisq;
	var randi;
	var rnorm;
	var opts;
	var prng;
	var v;

	if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		opts = arguments[ 0 ];
	} else if ( arguments.length > 0 ) {
		v = arguments[ 0 ];
		if ( !isPositive( v ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a positive number. Value: `' + v + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
		}
	}
	if ( opts && hasOwnProp( opts, 'seed' ) ) {
		randi = minstd( opts.seed );
	} else {
		randi = minstd();
	}
	rnorm = randn({
		'seed': randi()
	});
	rchisq = chisquare({
		'seed': randi()
	});
	if ( v === void 0 ) {
		prng = t2;
	} else {
		prng = t1;
	}
	setReadOnly( prng, 'NAME', 't' );
	setReadOnly( prng, 'SEED', randi.SEED );
	setReadOnly( prng, 'PRNG', randi );

	return prng;

	/**
	* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = t1();
	* // returns <number>
	*/
	function t1() {
		return t0( rnorm, rchisq, v );
	} // end FUNCTION t1()

	/**
	* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.
	*
	* @private
	* @param {PositiveNumber} v - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = t2( 3.0 );
	* // returns <number>
	*
	* @example
	* var v = t2( 0.0 );
	* // returns NaN
	*
	* @example
	* var v = t2( -1.5 );
	* // returns NaN
	*/
	function t2( v ) {
		if (
			isnan( v ) ||
			v <= 0.0
		) {
			return NaN;
		}
		return t0( rnorm, rchisq, v );
	} // end FUNCTION t2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
