'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var chisquare = require( '@stdlib/math/base/random/chisquare' );
var isObject = require( '@stdlib/utils/is-object' );
var minstd = require( '@stdlib/math/base/random/minstd-shuffle' ).factory;
var normal = require( '@stdlib/math/base/random/normal' );
var randu = require( '@stdlib/math/base/random/randu' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating t distributed random numbers.
*
* @param {PositiveNumber} [v] - degrees of freedom
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} v argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var rt = factory( 1.0 );
* var v = rt();
* // returns <number>
*
* @example
* var rt = factory( 0.5, {
* 	'seed': 297
* });
* var v = rt();
* // returns <number>
*/
function factory() {
	var createRandomInt;
	var rchisq;
	var nargs;
	var rnorm;
	var seed1;
	var seed2;
	var args;
	var opts;
	var rand;
	var ret;
	var v;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		} else {
			v = args[ 0 ];
			if ( !isPositive( v ) ) {
				throw new TypeError( 'invalid input argument. First argument `v` must be a positive number. Value: `' + v + '`.' );
			}
			if ( nargs > 1 ) {
				opts = args[ 1 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	createRandomInt = minstd( rand.SEED );
	seed1 = createRandomInt();
	seed2 = createRandomInt();
	rnorm = normal.factory( 0.0, 1.0, {
		'seed': seed1
	});
	rchisq = chisquare.factory({
		'seed': seed2
	});

	if ( v !== void 0 ) {
		ret = randt1;
	}
	else {
		ret = randt2;
	}
	setReadOnly( ret, 'NAME', 't' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a pseudorandom number from a Student's t distribution with bound degrees of freedom `v`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = randt();
	* // returns <number>
	*/
	function randt1() {
		return rnorm() / sqrt( rchisq( v ) / v );
	} // end FUNCTION randt1()

	/**
	* Returns a pseudorandom number from a Student's t distribution with degrees of freedom `v`.
	*
	* @private
	* @param {PositiveNumber} v - degrees of freedom
	* @throws {TypeError} v argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = randt( 3.0 );
	* // returns <number>
	*/
	function randt2( v ) {
		if ( !isPositive( v ) ) {
			throw new TypeError( 'invalid input argument. Degrees of freedom `v` must be a positive number. Value: `' + v + '`.' );
		}
		return rnorm() / sqrt( rchisq( v ) / v );
	} // end FUNCTION randt2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
