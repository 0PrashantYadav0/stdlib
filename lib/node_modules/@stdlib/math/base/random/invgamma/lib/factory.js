'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var gamma = require( '@stdlib/math/base/random/gamma' ).factory;
var randu = require( '@stdlib/math/base/random/randu' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating inverse-gamma distributed random numbers.
*
* #### Method
* * When \\( X \sim \operatorname{Gamma}( \alpha, \beta ) \\), then \\( \frac{1}{X} \sim \operatorname{InvGamma}\left( \alpha, \tfrac{1}{beta} \right) \\).
* * Hence, to generate a draw from an inverse-gamma distribution with parameters \\( \alpha \\) and \\( \beta \\), sample `X` from a \\( \operatorname{Gamma}\left( \alpha, \tfrac{1}{\beta} \right) \\) distribution and return `1/X`.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - scale parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} alpha argument must be a positive number
* @throws {TypeError} beta argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var invgamma = factory( 2.0, 1.0 );
* var v = invgamma();
* // returns <number>
*
* @example
* var invgamma = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = invgamma();
* // returns <number>
*/
function factory() {
	var rgamma;
	var alpha;
	var nargs;
	var args;
	var beta;
	var opts;
	var rand;
	var ret;

	args = arguments;
	nargs = arguments.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			alpha = args[ 0 ];
			beta = args[ 1 ];
			if ( !isPositive( alpha ) ) {
				throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
			}
			if ( !isPositive( beta ) ) {
				throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	rgamma = gamma({
		'seed': rand.SEED
	});

	if ( alpha !== void 0 ) {
		ret = invgamma1;
	} else {
		ret = invgamma2;
	}
	setReadOnly( ret, 'NAME', 'invgamma' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a random number drawn from an inverse-gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - scale parameter
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = invgamma1();
	* // returns <number>
	*/
	function invgamma1() {
		var x = rgamma( alpha, 1.0/beta );
		return 1.0 / x;
	} // end FUNCTION invgamma1()

	/**
	* Returns a random number drawn from an inverse-gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - scale parameter
	* @throws {TypeError} alpha argument must be a positive number
	* @throws {TypeError} beta argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = invgamma2( 2.0, 1.0 );
	* // returns <number>
	*/
	function invgamma2( alpha,  beta ) {
		var x;
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
		}
		x = rgamma( alpha, 1.0/beta );
		return 1.0 / x;
	} // end FUNCTION invgamma2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
