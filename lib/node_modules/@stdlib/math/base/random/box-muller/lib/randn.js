'use strict';

// MODULES //

var factory = require( './factory.js' );


// MAIN //

/**
* Generates a standard normally distributed random number.
*
* #### Method
*
* * Given two independent uniformly distributed random variables \\( U_1 \\) and \\( U_2 \\) in the interval \\( [0,1) \\), let
*
* ``` tex
* \begin{align*}
* Z_1 &= R \cos(\theta) = \sqrt{-2 \ln(U_1)} \cos(2\pi U_2) \\
* Z_2 &= R \sin(\theta) = \sqrt{-2 \ln(U_1)} \sin(2\pi U_2)
* \end{align*}
* ```
*
* where \\( Z_1 \\) and \\( Z_2 \\) are independent random variables with a standard normal distribution.
*
* * As two uniform random variates are mapped to two standard normal random variates, one of the random variates is cached and returned upon the following invocation.
*
*
* #### Notes
*
* * The minimum and maximum pseudorandom numbers which can be generated are dependent on the number of bits an underlying uniform pseudorandom number generator (PRNG) uses. For instance, if a PRNG uses \\( 32 \\) bits, the smallest non-zero number that can be generated is \\( 2^{-32}). When \\( U_1 \\) equals this value and \\( U_2 \\) equals \\( 0 \\),
*
*   ``` tex
*   r = \sqrt{-2\ln(2^{-32})} \cos(2\pi) \approx 6.66
*   ```
*
*   which means that the algorithm cannot produce random variates more than \\( 6.66 \\) standard deviations from the mean.
*
*   <!-- <note> -->
*
*   This corresponds to a \\( 2.74 \times 10^{-11} \\) loss due to tail truncation.
*
*   <!-- </note> -->
*
*
* #### References
*
* * G. E. P. Box and Mervin E. Muller (1958). "A Note on the Generation of Random Normal Deviates". The Annals of Mathematical Statistics 29 (2): 610–611.
* * J. Bell (1968). "Algorithm 334: Normal random deviates". Communications of the ACM 11 (7).
* * R. Knopp (1969). "Remark on algorithm 334 [G5]: normal random deviates". Communications of the ACM 12 (5).
* * G. Marsaglia and T. A. Bray. "A convenient method for generating normal variables". SIAM Rev. 6: 260–264.
* * Thomas, D. B., Luk. W., Leong, P. H. W., and Villasenor, J. D. (2007). "Gaussian random number generators". ACM Comput Surv 39, 4, Article 11, 1-38. [DOI: 10.1145/1287620.1287622]{@link http://doi.acm.org/10.1145/1287620.1287622}.
*
*
* @function randn
* @type {Function}
* @returns {number} pseudorandom number
*
* @example
* var r = randn();
* // returns <number>
*/
var randn = factory();


// EXPORTS //

module.exports = randn;
