'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' );
var pow = require( '@stdlib/math/base/special/pow' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating Pareto (Type I) distributed random numbers.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - scale parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} alpha argument must be a positive number
* @throws {TypeError} beta argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var pareto = factory( 2.0, 1.0 );
* var v = pareto();
* // returns <number>
*
* @example
* var pareto = factory( 2.0, 2.0, {
* 	'seed': 297
* });
* var v = pareto();
* // returns <number>
*
*/
function factory() {
	var alpha;
	var nargs;
	var args;
	var beta;
	var opts;
	var rand;
	var ret;

	args = arguments;
	nargs = arguments.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			alpha = args[ 0 ];
			beta = args[ 1 ];
			if ( !isPositive( alpha ) ) {
				throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
			}
			if ( !isPositive( beta ) ) {
				throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	if ( alpha !== void 0 ) {
		ret = pareto1;
	} else {
		ret = pareto2;
	}
	setReadOnly( ret, 'NAME', 'paretoI' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a random number drawn from a Pareto (Type I) distribution with bound parameters.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = pareto1();
	* // returns <number>
	*/
	function pareto1() {
		var u = rand();
		return beta / pow( u, 1.0/alpha );
	} // end FUNCTION pareto1()

	/**
	* Returns a random number drawn from a Pareto (Type I) distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - scale parameter
	* @throws {TypeError} alpha argument must be a positive number
	* @throws {TypeError} beta argument must be a positive number
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = pareto2( 2.0, 3.0 );
	* // returns <number>
	*/
	function pareto2( alpha, beta ) {
		var u;
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
		}
		u = rand();
		return beta / pow( u, 1.0/alpha );
	} // end FUNCTION pareto2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
