'use strict';

// MODULES //

var tape = require( 'tape' );
var chi2gof = require( '@stdlib/math/generics/statistics/chi2gof' );
var round = require( '@stdlib/math/base/special/round' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pmf = require( '@stdlib/math/base/dist/poisson/pmf' ).factory;
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( process.env.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var poisson;
	var r;
	var i;

	// When binding distribution parameters...
	poisson = factory( 2.0 );
	for ( i = 0; i < 100; i++ ) {
		r = poisson();
		t.equal( typeof r, 'number', 'returns a number' );
	}

	// Without binding distribution parameters...
	poisson = factory();
	for ( i = 0; i < 100; i++ ) {
		r = poisson( 100.0 );
		t.equal( typeof r, 'number', 'returns a number' );
	}

	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var poisson1;
	var poisson2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = round( Date.now() / 1000 );

	poisson1 = factory( 35.0, {
		'seed': seed
	});
	poisson2 = factory( 35.0, {
		'seed': seed
	});

	t.notEqual( poisson1, poisson2, 'separate generators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = poisson1();
		r2 = poisson2();
		t.equal( r1, r2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var poisson = factory();
	t.equal( poisson.NAME, 'poisson', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var poisson = factory();
	t.equal( typeof poisson.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var poisson = factory({
		'seed': 12345
	});
	t.equal( typeof poisson.SEED, 'number', 'has `SEED` property' );
	t.equal( poisson.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function throws an error if provided a mean which is not a positive number (no options)', function test( t ) {
	var values;
	var i;

	values = [
		-2.0,
		0.0,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided a mean which is not a positive number (options)', function test( t ) {
	var values;
	var i;

	values = [
		-2.0,
		0.0,
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value, {} );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not object (no other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 10.0, value );
		};
	}
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a mean equal to `NaN`', function test( t ) {
	var poisson;
	var r;

	poisson = factory();
	r = poisson( NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a mean which is not a positive number', function test( t ) {
	var poisson;
	var r;

	poisson = factory();

	r = poisson( 0 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = poisson( -1 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = poisson( -3.14 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns a PRNG for generating random numbers from a Poisson distribution (lambda < 30)', opts, function test( t ) {
	var rejected;
	var repeats;
	var poisson;
	var lambda;
	var pValue;
	var probs;
	var freq;
	var ppmf;
	var N;
	var i;
	var j;
	var x;

	lambda = 0.73;
	ppmf = pmf( lambda );

	freq = new Array( 30 );
	probs = new Array( freq.length );
	for ( j = 0; j < freq.length; j++ ) {
		probs[ j ] = ppmf( j );
	}
	repeats = 200;
	N = 1e3;
	rejected = 0;
	for ( i = 0; i < repeats; i++ ) {
		poisson = factory( lambda );
		t.ok( true, 'seed: '+poisson.SEED );

		// Reset the `freq` array...
		for ( j = 0; j < freq.length; j++ ) {
			freq[ j ] = 0;
		}
		for ( j = 0; j < N; j++ ) {
			x = poisson();
			freq[ x ] += 1;
		}
		// Test using chi-square goodness-of-fit test:
		pValue = chi2gof( freq, probs, {
			'rescale': true,
			'simulate': true,
			'iterations': 500
		}).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	// Account for small sample sizes and few repeats...
	t.ok( rejected / repeats < 0.15, 'null hypothesis (i.e., that numbers are drawn from Poisson('+lambda+') is rejected in less than 15% of cases ('+rejected+' of '+repeats+')' );
	t.end();
});

tape( 'the function returns a PRNG for generating random numbers from a Poisson distribution (lambda > 30)', opts, function test( t ) {
	var rejected;
	var repeats;
	var poisson;
	var lambda;
	var pValue;
	var probs;
	var freq;
	var ppmf;
	var N;
	var i;
	var j;
	var x;

	lambda = 35.7;
	ppmf = pmf( lambda );

	freq = new Array( 300 );
	probs = new Array( freq.length );
	for ( j = 0; j < freq.length; j++ ) {
		probs[ j ] = ppmf( j );
	}
	repeats = 100;
	N = 1e3;
	rejected = 0;
	for ( i = 0; i < repeats; i++ ) {
		poisson = factory( lambda );
		t.ok( true, 'seed: '+poisson.SEED );

		// Reset the `freq` array...
		for ( j = 0; j < freq.length; j++ ) {
			freq[ j ] = 0;
		}
		for ( j = 0; j < N; j++ ) {
			x = poisson();
			freq[ x ] += 1;
		}
		// Test using chi-square goodness-of-fit test:
		pValue = chi2gof( freq, probs, {
			'rescale': true,
			'simulate': true,
			'iterations': 500
		}).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	// Account for small sample sizes and few repeats...
	t.ok( rejected / repeats < 0.15, 'null hypothesis (i.e., that numbers are drawn from Poisson('+lambda+') is rejected in less than 15% of cases ('+rejected+' of '+repeats+')' );
	t.end();
});
