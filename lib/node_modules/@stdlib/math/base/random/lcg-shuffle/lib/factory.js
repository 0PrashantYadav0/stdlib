'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;
var floor = require( '@stdlib/math/base/special/floor' );
var INT32_MAX = require( '@stdlib/math/constants/int32-max' );
var lcg = require( '@stdlib/math/base/random/lcg' ).factory;
var createTable = require( './create_table.js' );


// VARIABLES //

var MAX_SEED = INT32_MAX - 1;


// FACTORY //

/**
* Returns a linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @param {PositiveInteger} [seed] - pseudorandom number generator seed
* @throws {TypeError} must provide a positive integer
* @throws {RangeError} must provide a positive integer less than the maximum signed 32-bit integer
* @returns {Function} shuffled LCG
*
* @example
* var lcg = factory();
*
* var v = lcg();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var lcg = factory( 1234 );
*
* var v = lcg();
* // returns 0.6619843908874246
*/
function factory( seed ) {
	var table;
	var state;
	var rand;
	if ( arguments.length ) {
		if ( !isPositiveInteger( seed ) ) {
			throw new TypeError( 'invalid input argument. Must provide a positive integer. Value: `' + seed + '`.' );
		}
		if ( seed > MAX_SEED ) {
			throw new RangeError( 'invalid input argument. Must provide a positive integer less than the maximum signed 32-bit integer. Value: `' + seed + '`.' );
		}
		rand = lcg( seed );
	} else {
		rand = lcg();
	}
	table = createTable( rand );
	state = table[ 0 ];

	/**
	* Generates a pseudorandom number on the interval \\( (0,1) \\).
	*
	* #### Method
	*
	* This implementation shuffles the output of a linear congruential pseudorandom number generator (LCG) using a shuffle table in accordance with the Bays-Durham algorithm.
	*
	*
	* #### References
	*
	* * Bays, Carter, and Durham, S.D. (1976). "Improving a Poor Random Number Generator". 2 *ACM Transactions on Mathematical Software*. pp 59-64.
	* * Thomas N. Herzog and Graham Lord (2022). *Applications of Monte Carlo Methods to Finance and Insurance*. p 19. (portions available [online](http://books.google.com/books)).
	* * W. Press, et al (1992). *Numerical Recipes in C*, 2nd Edition. pp 280-81.
	*
	*
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = lcg();
	* // returns <number>
	*/
	return function lcgShuffle() {
		var i;

		i = floor( table.length * state );

		// Pull a state from the table and replace:
		state = table[ i ];
		table[ i ] = rand();

		return state;
	};
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
