'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var geometric0 = require( './_geometric.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating geometric distributed random numbers.
*
* @param {Probability} [p] - success probability
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `p` must be a probability
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var geometric = factory( 0.5 );
* var v = geometric();
* // returns <number>
*
* @example
* var geometric = factory( 0.8, {
*     'seed': 297
* });
* var v = geometric();
* // returns <number>
*
* @example
* var geometric = factory()
* var v = geometric( 0.5 );
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var p;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		rand = randu( arguments[ 0 ] );
	} else {
		p = arguments[ 0 ];
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a probability. Value: `' + p + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( p === void 0 ) {
		prng = geometric2;
	}
	else {
		prng = geometric1;
	}
	setReadOnly( prng, 'NAME', 'geometric' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand.PRNG );

	return prng;

	/**
	* Returns a pseudorandom number drawn from a geometric distribution with bound parameter `p`.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = geometric1();
	* // returns <number>
	*/
	function geometric1() {
		return geometric0( rand, p );
	} // end FUNCTION geometric1()

	/**
	* Returns a pseudorandom number drawn from a geometric distribution with parameter `p`.
	*
	* @private
	* @param {Probability} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var v = geometric2( 0.5 );
	* // returns <number>
	*/
	function geometric2( p ) {
		if (
			isnan( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		return geometric0( rand, p );
	} // end FUNCTION geometric2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
