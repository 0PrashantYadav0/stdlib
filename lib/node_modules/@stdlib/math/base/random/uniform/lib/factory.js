'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var isnan = require( '@stdlib/utils/is-nan' );
var randu = require( '@stdlib/math/base/random/randu' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating uniformly distributed random numbers.
*
* @param {number} [a] - minimum support
* @param {number} [b] - maximum support
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} a argument must be numeric
* @throws {TypeError} b argument must be numeric
* @throws {RangeError} minimum support a must be smaller then maximum support b
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var uniform = factory( 0.0, 1.0 );
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory( -3.0, -1.0, {
* 	'seed': 297
* });
* var v = uniform();
* // returns <number>
*/
function factory() {
	var nargs;
	var args;
	var opts;
	var rand;
	var ret;
	var a;
	var b;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		} else {
			a = args[ 0 ];
			b = args[ 1 ];
			if ( !isNumber( a ) || isnan( a ) ) {
				throw new TypeError( 'invalid input argument. `a` must be a number primitive. Value: `' + a + '`.' );
			}
			if ( !isNumber( b ) || isnan( b ) ) {
				throw new TypeError( 'invalid input argument. `b` must be a number primitive. Value: `' + b + '`.' );
			}
			if ( a >= b ) {
				throw new RangeError( 'invalid input argument. Minimum support `a` must be less than or equal to maximum support `b`. Value: `' + a + '`.');
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	if ( a !== void 0 ) {
		ret = uniform1;
	} else {
		ret = uniform2;
	}
	setReadOnly( ret, 'NAME', 'uniform' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a uniformly distributed pseudorandom number with bound minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform1();
	* // returns <number>
	*/
	function uniform1() {
		var u = rand();
		return ( b - a ) * u + a;
	} // end FUNCTION uniform1()


	/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {number} a - minimum support
	* @param {number} b - maximum supportn
	* @throws {TypeError} a argument must be numeric
	* @throws {TypeError} b argument must be numeric
	* @throws {RangeError} minimum support a must be smaller then maximum support b
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform2( 0.0, 1.0 );
	* // returns <number>
	*/
	function uniform2( a, b ) {
		var u;
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. `a` must be a number primitive. Value: `' + a + '`.' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. `b` must be a number primitive. Value: `' + b + '`.' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid input argument. Minimum support `a` must be less than or equal to maximum support `b`. Value: `' + a + '`.');
		}
		u = rand();
		return ( b - a ) * u + a;
	} // end FUNCTION uniform2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
