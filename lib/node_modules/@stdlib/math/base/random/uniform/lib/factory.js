'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' );
var validate = require( './validate.js' );
var uniform0 = require( './_uniform.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating uniformly distributed random numbers.
*
* @param {number} [a] - minimum support
* @param {number} [b] - maximum support
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} a argument must be a number
* @throws {TypeError} b argument must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} pseudorandom number generator
*
* @example
* var uniform = factory( 0.0, 1.0 );
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory( -3.0, -1.0, {
*     'seed': 297
* });
* var v = uniform();
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = randu.factory();
	} else if ( isObject( arguments[ 0 ] ) ) {
		rand = randu.factory( arguments[ 0 ] );
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = validate( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Third argument must be an options object. Value: `'+opts+'`.' );
			}
			rand = randu.factory( opts );
		} else {
			rand = randu.factory();
		}
	}
	if ( a === void 0 ) {
		prng = uniform2;
	} else {
		prng = uniform1;
	}
	/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform1();
	* // returns <number>
	*/
	function uniform1() {
		return uniform0( rand, a, b );
	} // end FUNCTION uniform1()

	/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {number} a - minimum support
	* @param {number} b - maximum support
	* @throws {TypeError} first argument must be a number
	* @throws {TypeError} second argument must be a number
	* @throws {RangeError} `a` must be less than `b`
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform2( 0.0, 1.0 );
	* // returns <number>
	*/
	function uniform2( a, b ) {
		var err = validate( a, b );
		if ( err ) {
			throw err;
		}
		return uniform0( rand, a, b );
	} // end FUNCTION uniform2()

	setReadOnly( prng, 'NAME', 'uniform' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
