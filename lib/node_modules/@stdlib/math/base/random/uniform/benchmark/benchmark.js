'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pkg = require( './../package.json' ).name;
var uniform = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( assert ) {
	var a;
	var b;
	var z;
	var i;

	assert.tic();
	for ( i = 0; i < assert.iterations; i++ ) {
		a = randu() * 100.0;
		b = ( randu()*100.0 ) + a;
		z = uniform( a, b );
		if ( isnan( z ) ) {
			assert.fail( 'should not return NaN' );
		}
	}
	assert.toc();
	if ( isnan( z ) ) {
		assert.fail( 'should not return NaN' );
	} else {
		assert.pass( 'benchmark finished' );
	}
	assert.end();
});

bench( pkg+':factory', function benchmark( assert ) {
	var rand;
	var a;
	var b;
	var z;
	var i;

	a = 0.0;
	b = 10.0;
	rand = uniform.factory( a, b );

	assert.tic();
	for ( i = 0; i < assert.iterations; i++ ) {
		z = rand();
		if ( isnan( z ) ) {
			assert.fail( 'should not return NaN' );
		}
	}
	assert.toc();
	if ( isnan( z ) ) {
		assert.fail( 'should not return NaN' );
	} else {
		assert.pass( 'benchmark finished' );
	}
	assert.end();
});
