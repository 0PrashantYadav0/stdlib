'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating Weibull distributed random numbers.
*
* @param {PositiveNumber} [lambda] - shape parameter
* @param {PositiveNumber} [k] - scale parameter
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} lambda argument must be a positive number
* @throws {TypeError} k argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var rweibull = factory( 2.0, 1.0 );
* var v = rweibull();
* // returns <number>
*
* @example
* var rweibull = factory( 2.0, 2.0, {
* 	'seed': 297
* });
* var v = rweibull();
* // returns <number>
*
*/
function factory() {
	var lambda;
	var nargs;
	var k;
	var opts;
	var rand;
	var ret;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( arguments[ 0 ] ) ) {
			opts = arguments[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			lambda = arguments[ 0 ];
			k = arguments[ 1 ];
			if ( !isPositive( lambda ) ) {
				throw new TypeError( 'invalid input argument. First argument `lambda` must be a positive number. Value: `' + lambda + '`.' );
			}
			if ( !isPositive( k ) ) {
				throw new TypeError( 'invalid input argument. Second argument `k` must be a positive number. Value: `' + k + '`.' );
			}
			if ( nargs > 2 ) {
				opts = arguments[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	if ( lambda !== void 0 ) {
		ret = weibull1;
	} else {
		ret = weibull2;
	}
	setReadOnly( ret, 'NAME', 'weibull' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a random number drawn from a Weibull distribution.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var y = weibull1();
	* // returns <number>
	*/
	function weibull1() {
		var u = rand();
		return lambda * pow( -ln( 1.0 - u ), 1.0/k );
	} // end FUNCTION weibull1()

	/**
	* Returns a random number drawn from a Weibull distribution.
	*
	* @private
	* @param {PositiveNumber} lambda - shape parameter
	* @param {PositiveNumber} k - scale parameter
	* @throws {TypeError} lambda argument must be a positive number
	* @throws {TypeError} k argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var y = weibull2( 2.0, 1.0 );
	* // returns <number>
	*/
	function weibull2( lambda, k ) {
		var u;
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. First argument `lambda` must be a positive number. Value: `' + lambda + '`.' );
		}
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Second argument `k` must be a positive number. Value: `' + k + '`.' );
		}
		u = rand();
		return lambda * pow( -ln( 1.0 - u ), 1.0/k );
	} // end FUNCTION weibull2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
