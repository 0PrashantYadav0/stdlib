'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var isnan = require( '@stdlib/utils/is-nan' );
var randu = require( '@stdlib/math/base/random/randu' );
var sign = require( '@stdlib/math/base/special/signum' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating random numbers from a Laplace (double exponential) distribution.
*
* @param {number} [mu] - mean parameter
* @param {PositiveNumber} [b] - scale parameter
* @param {Options} [opts] - function options
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} mu argument must be a number primitive
* @throws {TypeError} b argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var laplace = factory( 0.0, 1.0 );
* var v = laplace();
* // returns <number>
*
* @example
* var laplace = factory( -3.0, 0.5, {
* 	'seed': 297
* });
* var v = laplace();
* // returns <number>
*/
function factory() {
	var nargs;
	var args;
	var opts;
	var rand;
	var ret;
	var mu;
	var b;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			mu = args[ 0 ];
			b = args[ 1 ];
			if ( !isNumber( mu ) || isnan( mu ) ) {
				throw new TypeError( 'invalid input argument. `mu` must be a number primitive. Value: `' + mu + '`.' );
			}
			if ( !isPositive( b ) ) {
				throw new TypeError( 'invalid input argument. `b` must be a positive number. Value: `' + b + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	if ( mu !== void 0 ) {
		ret = laplace1;
	} else {
		ret = laplace2;
	}
	setReadOnly( ret, 'NAME', 'laplace' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution with bound parameters.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = laplace1();
	* // returns <number>
	*/
	function laplace1() {
		var u = rand();
		u -= 0.5;
		return mu - b * sign( u ) * ln( 1.0 - 2.0*abs(u) );
	} // end FUNCTION laplace1()

	/**
	* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.
	*
	* @private
	* @param {number} mu - mean parameter
	* @param {PositiveNumber} b - scale parameter
	* @throws {TypeError} mu argument must be a number primitive
	* @throws {TypeError} b argument must be a positive number
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = laplace2( 0.0, 2.0 );
	* // returns <number>
	*/
	function laplace2( mu, b ) {
		var u;
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. `mu` must be a number primitive. Value: `' + mu + '`.' );
		}
		if ( !isPositive( b ) ) {
			throw new TypeError( 'invalid input argument. `b` must be a positive number. Value: `' + b + '`.' );
		}
		u = rand();
		u -= 0.5;
		return mu - b * sign( u ) * ln( 1.0 - 2.0*abs(u) );
	} // end FUNCTION laplace2()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
