'use strict';

// MODULES //

var tape = require( 'tape' );
var INT32_MAX = require( '@stdlib/math/constants/int32-max' );
var isPositiveInteger = require( '@stdlib/math/base/utils/is-positive-integer' );
var minstd = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof minstd, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to generate uniformly distributed pseudorandom numbers', function test( t ) {
	t.equal( typeof minstd.uniform, 'function', 'has `uniform` method' );
	t.end();
});

tape( 'attached to the main export is a method to generate linear congruential pseudorandom number generator', function test( t ) {
	t.equal( typeof minstd.factory, 'function', 'has factory method' );
	t.end();
});

tape( 'attached to the main export is the generator name', function test( t ) {
	t.equal( minstd.NAME, 'minstd-shuffle', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the main export is the generator seed', function test( t ) {
	t.equal( typeof minstd.SEED, 'number', 'has `SEED` property' );
	t.end();
});

tape( 'attached to the main export is the minimum possible generated number', function test( t ) {
	t.equal( minstd.MIN, 1, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the main export is the maximum possible generated number', function test( t ) {
	t.equal( minstd.MAX, INT32_MAX-1, 'has `MAX` property' );
	t.end();
});

tape( 'the function returns pseudorandom integers strictly between 0 and 2^31-1', function test( t ) {
	var v;
	var i;
	for ( i = 0; i < 1e4; i++ ) {
		v = minstd();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( isPositiveInteger( v ), true, 'returns a positive integer' );
		t.equal( v >= 1 && v <= INT32_MAX-1, true, 'returns an integer between 1 and 2^31-1 (inclusive)' );
	}
	t.end();
});

tape( 'the `uniform` method returns pseudorandom numbers strictly between 0 and 1', function test( t ) {
	var v;
	var i;
	for ( i = 0; i < 1e4; i++ ) {
		v = minstd.uniform();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( v > 0.0 && v < 1.0, true, 'returns a number between 0 and 1 (exclusive)' );
	}
	t.end();
});
