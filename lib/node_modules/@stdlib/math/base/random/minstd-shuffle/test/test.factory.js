'use strict';

// MODULES //

var tape = require( 'tape' );
var INT32_MAX = require( '@stdlib/math/constants/int32-max' );
var round = require( '@stdlib/math/base/special/round' );
var isPositiveInteger = require( '@stdlib/math/base/utils/is-positive-integer' );
var kstest = require( '@stdlib/math/generics/statistics/kstest' );
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( process.env.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a value which is not a positive integer, the factory function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		3.14,
		0.0,
		-5.0,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws a range error if provided an integer greater than or equal to the maximum signed 32-bit integer', function test( t ) {
	var values;
	var i;

	values = [
		INT32_MAX,
		INT32_MAX + 1,
		INT32_MAX + 2
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws a range error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var minstd;
	var v;
	var i;

	minstd = factory();
	for ( i = 0; i < 1e4; i++ ) {
		v = minstd();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( isPositiveInteger( v ), true, 'returns a positive integer' );
		t.equal( v >= 1 && v <= INT32_MAX-1, true, 'returns an integer between 1 and 2^31-1 (inclusive)' );
	}
	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var minstd1;
	var minstd2;
	var seed;
	var v1;
	var v2;
	var i;

	seed = round( Date.now() / 1000 );

	minstd1 = factory( seed );
	minstd2 = factory( seed );

	t.notEqual( minstd1, minstd2, 'separate generators' );

	for ( i = 0; i < 1e3; i++ ) {
		v1 = minstd1();
		v2 = minstd2();
		t.equal( v1, v2, 'both return same number' );
	}
	t.end();
});

tape( 'the function returns a known sequence of pseudograndom integers', function test( t ) {
	var expected;
	var actual;
	var minstd;
	var seed;
	var i;

	// Seed: 1
	seed = 1;

	// From a C implementation based on Numerical Recipes in C, 2nd Ed.
	expected = [
		893351816,
		197493099,
		1624379149,
		1137522503,
		1998097157,
		823564440,
		1404280278,
		143542612
	];

	minstd = factory( seed );

	actual = new Array( expected.length );
	for ( i = 0; i < expected.length; i++ ) {
		actual[ i ] = minstd();
	}
	t.deepEqual( actual, expected, 'returns expected numbers' );

	// Seed: 123456789
	seed = 123456789;

	expected = [
		1958455755,
		132558215,
		852526260,
		755116797,
		1767137056,
		1620648971,
		3947872,
		397959036
	];

	minstd = factory( seed );

	actual = new Array( expected.length );
	for ( i = 0; i < expected.length; i++ ) {
		actual[ i ] = minstd();
	}
	t.deepEqual( actual, expected, 'returns expected numbers' );

	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var minstd = factory();
	t.equal( minstd.NAME, 'minstd-shuffle', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var minstd = factory( 12345 );
	t.equal( typeof minstd.SEED, 'number', 'has `SEED` property' );
	t.equal( minstd.SEED, 12345, 'equals provided seed' );
	t.end();
});

tape( 'attached to the returned function is the minimum possible generated number', function test( t ) {
	var minstd = factory();
	t.equal( minstd.MIN, 1, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the returned function is the maximum possible generated number', function test( t ) {
	var minstd = factory();
	t.equal( minstd.MAX, INT32_MAX-1, 'has `MAX` property' );
	t.end();
});

tape( 'attached to the returned function is a `normalized` method for generating pseudorandom numbers strictly between 0 (inclusive) and 1 (exclusive)', function test( t ) {
	var minstd;
	var v;
	var i;

	minstd = factory();
	for ( i = 0; i < 1e4; i++ ) {
		v = minstd.normalized();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( v >= 0.0 && v < 1.0, true, 'returns a number between 0 (inclusive) and 1 (exclusive)' );
	}
	t.end();
});

tape( 'attached to the `normalized` method is the generator name', function test( t ) {
	var minstd = factory();
	t.equal( minstd.normalized.NAME, 'minstd-shuffle', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the generator seed', function test( t ) {
	var minstd = factory( 12345 );
	t.equal( typeof minstd.normalized.SEED, 'number', 'has `SEED` property' );
	t.equal( minstd.normalized.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'attached to the `normalized` method is the minimum possible generated number', function test( t ) {
	var minstd = factory();
	t.equal( minstd.normalized.MIN, 0.0, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the maximum possible generated number', function test( t ) {
	var minstd = factory();
	t.equal( minstd.normalized.MAX, (INT32_MAX-2.0)/(INT32_MAX-1.0), 'has `MAX` property' );
	t.end();
});

tape( 'the `normalized` method returns pseudorandom numbers from a uniform distribution', opts, function test( t ) {
	var rejected;
	var pValue;
	var minstd;
	var N;
	var i;
	var j;
	var x;

	rejected = 0;
	x = new Array( 1e3 );
	N = 500;
	for ( i = 0; i < N; i++ ) {
		minstd = factory();
		t.ok( true, 'seed: '+minstd.SEED );
		for ( j = 0; j < x.length; j++ ) {
			x[ j ] = minstd.normalized();
			if ( x[ j ] < 0.0 || x[ j ] > 1.0 ) {
				t.ok( false, 'returned a number outside support: '+x[ j ] );
			}
		}
		// Test using Kolmogorov-Smirnov goodness-of-fit test:
		pValue = kstest( x, 'uniform', 0.0, 1.0 ).pValue;
		t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
		if ( pValue < 0.05 ) {
			rejected += 1;
		}
	}
	// Account for small sample sizes and few repeats...
	t.ok( rejected / N < 0.10, 'null hypothesis (i.e., that numbers are drawn from Uniform(0,1)) is rejected in less than 10% of cases ('+rejected+' of '+N+')' );
	t.end();
});
