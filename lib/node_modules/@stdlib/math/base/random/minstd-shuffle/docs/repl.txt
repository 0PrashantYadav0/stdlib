
{{alias}}()
    Returns a pseudorandom integer on the interval `[1, 2147483646]`.

    This pseudorandom number generator (PRNG) is a linear congruential
    pseudorandom number generator (LCG) whose output is shuffled using the Bays-
    Durham algorithm. The shuffle step considerably strengthens the "randomness
    quality" of a simple LCG's output.

    The generator has a period of approximately `2.1e9`.

    An LCG is fast and uses little memory. On the other hand, because the
    generator is a simple LCG, the generator has recognized shortcomings. By
    today's PRNG standards, the generator's period is relatively short. In
    general, this generator is unsuitable for Monte Carlo simulations and
    cryptographic applications.

    Returns
    -------
    r: integer
        Pseudorandom number.

    Examples
    --------
    > var r = {{alias}}();


{{alias}}.normalized()
    Returns a pseudorandom number on the interval `[0,1)`.

    Returns
    -------
    r: number
        Pseudorandom number.

    Examples
    --------
    > var r = {{alias}}.normalized();


{{alias}}.factory( [seed] )
    Returns a linear congruential pseudorandom number generator (LCG) whose
    output is shuffled.

    Parameters
    ----------
    seed: integer (optional)
        Pseudorandom number generator seed. Must be on the interval
        `[1, 2147483646]`.

    Returns
    -------
    rand: Function
        Pseudorandom number generator (PRNG).

    Examples
    --------
    // Basic usage:
    > var rand = {{alias}}.factory();
    > r = rand();
    > r = rand();

    // Provide a seed:
    > rand = {{alias}}.factory( 1234 );
    > r = rand()
    1421600654


{{alias}}.NAME
    Generator name.

    Examples
    --------
    > var name = {{alias}}.NAME
    'minstd-shuffle'


{{alias}}.SEED
    Pseudorandom number generator seed.

    Examples
    --------
    > var seed = {{alias}}.SEED;

    See Also
    --------

