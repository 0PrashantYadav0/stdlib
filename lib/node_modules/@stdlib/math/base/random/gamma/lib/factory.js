'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var randn = require( '@stdlib/math/base/random/randn' ).factory;
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var randint = require( '@stdlib/math/base/random/minstd-shuffle' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var validate = require( './validate.js' );
var gamma0 = require( './_gamma.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating gamma distributed random numbers.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - rate parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var gamma = factory( 2.0, 1.0 );
* var v = gamma();
* // returns <number>
*
* @example
* var gamma = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = gamma();
* // returns <number>
*/
function factory() {
	var alpha;
	var rnorm;
	var randi;
	var beta;
	var opts;
	var rand;
	var prng;
	var err;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = randu( opts );
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = validate( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	randi = randint( rand.SEED );
	rnorm = randn({
		'seed': randi()
	});
	if ( alpha === void 0 ) {
		prng = gamma2;
	} else {
		prng = alpha >= 1.0 ? gamma1a : gamma1b;
	}
	setReadOnly( prng, 'NAME', 'gamma' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha >= 1`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma1();
	* // returns <number>
	*/
	function gamma1a() {
		return gamma0( rand, rnorm, alpha, beta );
	} // end FUNCTION gamma1a()

	/**
	* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha < 1`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma1();
	* // returns <number>
	*/
	function gamma1b() {
		return gamma0( rand, rnorm, alpha + 1.0, beta ) *
			pow( rand(), 1.0/alpha );
	} // end FUNCTION gamma1b()


	/**
	* Returns a pseudorandom number drawn from a gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - rate parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma2( 2.0, 4.0 );
	* // returns <number>
	*
	* @example
	* var v = gamma2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = gamma2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = gamma2( NaN, NaN );
	* // returns NaN
	*/
	function gamma2( alpha, beta ) {
		if (
			isnan( alpha ) ||
			isnan( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		if ( alpha < 1.0 ) {
			return gamma0( rand, rnorm, alpha + 1.0, beta ) *
				pow( rand(), 1.0/alpha );
		}
		return gamma0( rand, rnorm, alpha, beta );
	} // end FUNCTION gamma2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
