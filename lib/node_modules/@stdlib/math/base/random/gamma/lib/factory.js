'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var normal = require( '@stdlib/math/base/random/normal' ).factory;
var randu = require( '@stdlib/math/base/random/randu' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );


// FACTORY //

/**
* Returns a pseudorandom number generator for generating gamma distributed random numbers.
*
* #### Method
*
* Implementation based on the method by Marsaglia & Tsang.
*
* #### References
* * Marsaglia, G., & Tsang, W. W. (2000). A simple method for generating gamma variables. ACM Transactions on Mathematical Software, 26(3), 363â€“372. doi:10.1145/358407.358414
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - rate parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} alpha argument must be a positive number
* @throws {TypeError} beta argument must be a positive number
* @throws {TypeError} options must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var gamma = factory( 2.0, 1.0 );
* var v = gamma();
* // returns <PositiveNumber>
*
* @example
* var gamma = factory( 2.0, 2.0, {
* 	'seed': 297
* });
* var v = gamma();
* // returns <PositiveNumber>
*/
function factory() {
	var alpha;
	var nargs;
	var rnorm;
	var args;
	var beta;
	var opts;
	var rand;
	var ret;

	args = arguments;
	nargs = args.length;
	if ( nargs === 0 ) {
		rand = randu.factory();
	}
	else {
		if ( isObject( args[ 0 ] ) ) {
			opts = args[ 0 ];
			rand = randu.factory( opts );
		}
		else {
			alpha = args[ 0 ];
			beta = args[ 1 ];
			if ( !isPositive( alpha ) ) {
				throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
			}
			if ( !isPositive( beta ) ) {
				throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
			}
			if ( nargs > 2 ) {
				opts = args[ 2 ];
				if ( !isObject( opts ) ) {
					throw new TypeError( 'invalid input argument. If supplied, third argument must be an options object. Value: `' + opts + '`.' );
				}
				rand = randu.factory( opts );
			} else {
				rand = randu.factory();
			}
		}
	}

	rnorm = normal( 0.0, 1.0, {
		'seed': rand.SEED
	});

	if ( alpha !== void 0 ) {
		ret = gamma1;
	} else {
		ret = gamma2;
	}
	setReadOnly( ret, 'NAME', 'gamma' );
	setReadOnly( ret, 'SEED', rand.SEED );
	setReadOnly( ret, 'PRNG', rand );
	return ret;

	/**
	* Returns a number drawn from a gamma distribution with bound parameters.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma();
	* // returns <PositiveNumber>
	*/
	function gamma1() {
		return sampler( alpha, beta );
	} // end FUNCTION gamma1()

	/**
	* Returns a number drawn from a gamma distribution with bound parameters.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - rate parameter
	* @throws {TypeError} alpha argument must be a positive number
	* @throws {TypeError} beta argument must be a positive number
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma( 2.0, 4.0 );
	* // returns <PositiveNumber>
	*/
	function gamma2( alpha, beta ) {
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First argument `alpha` must be a positive number. Value: `' + alpha + '`.' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second argument `beta` must be a positive number. Value: `' + beta + '`.' );
		}
		return sampler( alpha, beta );
	} // end FUNCTION gamma2()

	/**
	* Returns a random number drawn from a gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - rate parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma( 2.0, 4.0 );
	* // returns <PositiveNumber>
	*/
	function sampler( alpha, beta ) {
		var c;
		var d;
		var u;
		var v;
		var x;

		d = alpha - 1.0/3.0;
		c = 1.0 / sqrt( 9.0*d );
		while ( true ) {
			do {
				x = rnorm();
				v = 1.0 + c * x;
			} while( v <= 0.0 );
			v = v*v*v;
			u = rand();
			if ( u < 1.0 - 0.331 * (x*x) * (x*x) ) {
				return (1.0/beta) * d * v;
			}
			if ( ln( u ) < 0.5*x*x + d * ( 1.0 - v + ln( v ) ) ) {
				return (1.0/beta) * d * v;
			}
		}
	} // end FUNCTION sampler()

} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
