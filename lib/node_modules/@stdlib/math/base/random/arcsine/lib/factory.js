'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-plain-object' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var validate = require( './validate.js' );
var arcsine0 = require( './_arcsine.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating arcsine distributed random numbers.
*
* @param {number} [a] - minimum support
* @param {number} [b] - maximum support
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} pseudorandom number generator
*
* @example
* var arcsine = factory( 0.0, 1.0 );
* var v = arcsine();
* // returns <number>
*
* @example
* var arcsine = factory( -3.0, -1.0, {
*     'seed': 297
* });
* var v = arcsine();
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var err;
	var a;
	var b;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `'+opts+'`.' );
		}
		rand = randu( opts );
	} else {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		err = validate( a, b );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `'+opts+'`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( a === void 0 ) {
		prng = arcsine2;
	} else {
		prng = arcsine1;
	}
	setReadOnly( prng, 'NAME', 'arcsine' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = arcsine1();
	* // returns <number>
	*/
	function arcsine1() {
		return arcsine0( rand, a, b );
	} // end FUNCTION arcsine1()

	/**
	* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {number} a - minimum support
	* @param {number} b - maximum support
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = arcsine2( 0.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = arcsine2( 1.0, 0.0 );
	* // returns NaN
	*/
	function arcsine2( a, b ) {
		if (
			isnan( a ) ||
			isnan( b ) ||
			a >= b
		) {
			return NaN;
		}
		return arcsine0( rand, a, b );
	} // end FUNCTION arcsine2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
