'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var rchisq = require( '@stdlib/math/base/random/chisquare' ).factory;
var chi0 = require( './_chi.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating chi distributed random numbers.
*
* @param {PositiveNumber} [k] - degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var chi = factory( 2 );
* var v = chi();
* // returns <number>
*
* @example
* var chi = factory( 2, {
*     'seed': 297
* });
* var v = chi();
* // returns 1.1718506616891984
*/
function factory() {
	var rand;
	var opts;
	var prng;
	var k;
	if ( arguments.length === 0 ) {
		rand = rchisq();
	} else if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		rand = rchisq( arguments[ 0 ] );
	} else {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a positive number. Value: `' + k + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = rchisq( k, opts );
		} else {
			rand = rchisq( k );
		}
	}
	if ( k === void 0 ) {
		prng = chi2;
	} else {
		prng = chi1;
	}
	setReadOnly( prng, 'NAME', 'chi' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand.PRNG );

	return prng;

	/**
	* Returns a random number drawn from a chi distribution with bound `k`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chi1();
	* // returns <number>
	*/
	function chi1() {
		return chi0( rand, k );
	} // end FUNCTION chi1()

	/**
	* Returns a random number drawn from a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {PositiveNumber} k - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chi2( 2 );
	* // returns <number>
	*/
	function chi2( k ) {
		if (
			isnan( k ) ||
			k <= 0.0
		) {
			return NaN;
		}
		return chi0( rand, k );
	} // end FUNCTION chi2()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
