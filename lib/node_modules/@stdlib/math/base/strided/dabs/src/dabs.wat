(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i32 i32 i32 i32 i32)))
  (import "env" "memory" (memory (;0;) 256 256))
  (import "env" "STACKTOP" (global (;0;) i32))
  (func (;0;) (type 3) (param i32 i32 i32 i32 i32)
    (local i32 i32 i32 i32 i32 f64 f64)
    get_local 0
    i32.const 1
    i32.lt_s
    if  ;; label = @1
      return
    end
    get_local 2
    i32.const 1
    i32.eq
    get_local 4
    i32.const 1
    i32.eq
    i32.and
    i32.eqz
    if  ;; label = @1
      i32.const 1
      get_local 0
      i32.sub
      tee_local 5
      get_local 4
      i32.mul
      set_local 6
      get_local 5
      get_local 2
      i32.mul
      set_local 5
      get_local 4
      i32.const 0
      i32.ge_s
      if  ;; label = @2
        i32.const 0
        set_local 6
      end
      get_local 2
      i32.const 0
      i32.ge_s
      if  ;; label = @2
        i32.const 0
        set_local 5
      end
      loop  ;; label = @2
        get_local 3
        get_local 6
        i32.const 3
        i32.shl
        i32.add
        tee_local 7
        block (result f64)  ;; label = @3
          get_local 1
          get_local 5
          i32.const 3
          i32.shl
          i32.add
          f64.load
          tee_local 10
          f64.const 0x0p+0 (;=0;)
          f64.lt
          set_local 8
          get_local 10
          f64.neg
          set_local 11
          get_local 10
          f64.const 0x0p+0 (;=0;)
          f64.eq
          if  ;; label = @4
            f64.const 0x0p+0 (;=0;)
            set_local 10
          end
          get_local 8
          if (result f64)  ;; label = @4
            get_local 11
          else
            get_local 10
          end
          get_local 7
          f64.load
          f64.add
        end
        f64.store
        get_local 5
        get_local 2
        i32.add
        set_local 5
        get_local 6
        get_local 4
        i32.add
        set_local 6
        get_local 9
        i32.const 1
        i32.add
        tee_local 9
        get_local 0
        i32.ne
        br_if 0 (;@2;)
      end
      return
    end
    get_local 0
    i32.const 3
    i32.and
    tee_local 4
    if  ;; label = @1
      i32.const 0
      set_local 2
      loop  ;; label = @2
        get_local 3
        get_local 2
        i32.const 3
        i32.shl
        i32.add
        tee_local 6
        block (result f64)  ;; label = @3
          get_local 1
          get_local 2
          i32.const 3
          i32.shl
          i32.add
          f64.load
          tee_local 10
          f64.const 0x0p+0 (;=0;)
          f64.lt
          set_local 5
          get_local 10
          f64.neg
          set_local 11
          get_local 10
          f64.const 0x0p+0 (;=0;)
          f64.eq
          if  ;; label = @4
            f64.const 0x0p+0 (;=0;)
            set_local 10
          end
          get_local 5
          if (result f64)  ;; label = @4
            get_local 11
          else
            get_local 10
          end
          get_local 6
          f64.load
          f64.add
        end
        f64.store
        get_local 2
        i32.const 1
        i32.add
        tee_local 2
        get_local 4
        i32.ne
        br_if 0 (;@2;)
      end
      get_local 0
      i32.const 3
      i32.gt_s
      get_local 4
      get_local 0
      i32.lt_s
      i32.and
      if  ;; label = @2
        get_local 4
        set_local 2
      else
        return
      end
    else
      i32.const 0
      set_local 2
    end
    loop  ;; label = @1
      get_local 3
      get_local 2
      i32.const 3
      i32.shl
      i32.add
      tee_local 4
      block (result f64)  ;; label = @2
        get_local 1
        get_local 2
        i32.const 3
        i32.shl
        i32.add
        f64.load
        tee_local 10
        f64.const 0x0p+0 (;=0;)
        f64.lt
        set_local 5
        get_local 10
        f64.neg
        set_local 11
        get_local 10
        f64.const 0x0p+0 (;=0;)
        f64.eq
        if  ;; label = @3
          f64.const 0x0p+0 (;=0;)
          set_local 10
        end
        get_local 5
        if (result f64)  ;; label = @3
          get_local 11
        else
          get_local 10
        end
        get_local 4
        f64.load
        f64.add
      end
      f64.store
      get_local 1
      get_local 2
      i32.const 1
      i32.add
      tee_local 4
      i32.const 3
      i32.shl
      i32.add
      f64.load
      tee_local 10
      f64.const 0x0p+0 (;=0;)
      f64.lt
      set_local 5
      get_local 10
      f64.neg
      set_local 11
      get_local 10
      f64.const 0x0p+0 (;=0;)
      f64.eq
      if  ;; label = @2
        f64.const 0x0p+0 (;=0;)
        set_local 10
      end
      get_local 5
      if (result f64)  ;; label = @2
        get_local 11
      else
        get_local 10
      end
      set_local 10
      get_local 3
      get_local 4
      i32.const 3
      i32.shl
      i32.add
      tee_local 4
      get_local 10
      get_local 4
      f64.load
      f64.add
      f64.store
      get_local 1
      get_local 2
      i32.const 2
      i32.add
      tee_local 4
      i32.const 3
      i32.shl
      i32.add
      f64.load
      tee_local 10
      f64.const 0x0p+0 (;=0;)
      f64.lt
      set_local 5
      get_local 10
      f64.neg
      set_local 11
      get_local 10
      f64.const 0x0p+0 (;=0;)
      f64.eq
      if  ;; label = @2
        f64.const 0x0p+0 (;=0;)
        set_local 10
      end
      get_local 5
      if (result f64)  ;; label = @2
        get_local 11
      else
        get_local 10
      end
      set_local 10
      get_local 3
      get_local 4
      i32.const 3
      i32.shl
      i32.add
      tee_local 4
      get_local 10
      get_local 4
      f64.load
      f64.add
      f64.store
      get_local 1
      get_local 2
      i32.const 3
      i32.add
      tee_local 4
      i32.const 3
      i32.shl
      i32.add
      f64.load
      tee_local 10
      f64.const 0x0p+0 (;=0;)
      f64.lt
      set_local 5
      get_local 10
      f64.neg
      set_local 11
      get_local 10
      f64.const 0x0p+0 (;=0;)
      f64.eq
      if  ;; label = @2
        f64.const 0x0p+0 (;=0;)
        set_local 10
      end
      get_local 5
      if (result f64)  ;; label = @2
        get_local 11
      else
        get_local 10
      end
      set_local 10
      get_local 3
      get_local 4
      i32.const 3
      i32.shl
      i32.add
      tee_local 4
      get_local 10
      get_local 4
      f64.load
      f64.add
      f64.store
      get_local 2
      i32.const 4
      i32.add
      tee_local 2
      get_local 0
      i32.lt_s
      br_if 0 (;@1;)
    end)
  (func (;1;) (type 1) (param i32)
    get_local 0
    set_global 1)
  (func (;2;) (type 0) (result i32)
    get_global 1)
  (func (;3;) (type 2) (param i32) (result i32)
    (local i32)
    get_global 1
    set_local 1
    get_global 1
    get_local 0
    i32.add
    set_global 1
    get_global 1
    i32.const 15
    i32.add
    i32.const -16
    i32.and
    set_global 1
    get_local 1)
  (global (;1;) (mut i32) (get_global 0))
  (export "_stdlib_strided_dabs" (func 0))
  (export "stackAlloc" (func 3))
  (export "stackRestore" (func 1))
  (export "stackSave" (func 2)))
