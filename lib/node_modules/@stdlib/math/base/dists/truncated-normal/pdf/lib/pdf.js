'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var normalCDF = require( '@stdlib/math/base/dists/normal/cdf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*/
function pdf( x, a, b, mu, sigma ) {
	var s2x2;
	var A;
	var B;
	var C;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		sigma <= 0.0 ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	s2x2 = 2.0 * pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( s2x2 * PI ) );
	B = -1.0 / ( s2x2 );
	C = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );
	return A * exp( B * pow( x - mu, 2.0 ) ) / C;
}


// EXPORTS //

module.exports = pdf;
