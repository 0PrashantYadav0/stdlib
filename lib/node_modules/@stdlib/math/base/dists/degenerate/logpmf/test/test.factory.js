'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var logpmf = factory( 1.0 );
	t.equal( typeof logpmf, 'function', 'returns a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the created function returns `NaN`', function test( t ) {
	var logpmf;
	var y;

	logpmf = factory( 0.0 );
	y = logpmf( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	logpmf = factory( NaN );
	y = logpmf( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function returns `0.0` if provided `x` equal to `mu`', function test( t ) {
	var logpmf;
	var y;

	logpmf = factory( 2.0 );
	y = logpmf( 2.0 );
	t.equal( y, 0.0, 'returns 0.0' );

	logpmf = factory( 0.0 );
	y = logpmf( 0.0 );
	t.equal( y, 0.0, 'returns 0.0' );

	logpmf = factory( -3.0 );
	y = logpmf( -3.0 );
	t.equal( y, 0.0, 'returns 0.0' );

	t.end();
});

tape( 'the created function returns `-Infinity` if provided `x` not equal to `mu`', function test( t ) {
	var logpmf;
	var y;

	logpmf = factory( 3.0 );

	y = logpmf( 2.0 );
	t.equal( y, NINF, 'returns -Infinity' );

	y = logpmf( 4.0 );
	t.equal( y, NINF, 'returns -Infinity' );

	t.end();
});
