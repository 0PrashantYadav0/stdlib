/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/chisquare/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/chisquare/kurtosis' );
var mean = require( '@stdlib/math/base/dists/chisquare/mean' );
var mode = require( '@stdlib/math/base/dists/chisquare/mode' );
var skewness = require( '@stdlib/math/base/dists/chisquare/skewness' );
var stdev = require( '@stdlib/math/base/dists/chisquare/stdev' );
var variance = require( '@stdlib/math/base/dists/chisquare/variance' );
var cdf = require( '@stdlib/math/base/dists/chisquare/cdf' );
var mgf = require( '@stdlib/math/base/dists/chisquare/mgf' );
var pdf = require( '@stdlib/math/base/dists/chisquare/pdf' );
var quantile = require( '@stdlib/math/base/dists/chisquare/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chisquareCDF( x ) {
	return cdf( x, this.k );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function chisquareMGF( t ) {
	return mgf( t, this.k );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chisquarePDF( x ) {
	return pdf( x, this.k );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chisquareQuantile( p ) {
	return quantile( p, this.k );
}


// MAIN //

/**
* Chi-squared distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @returns {ChiSquare} distribution instance
*
* @example
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var mode = chisquare.mode;
* // returns 0.0
*/
function ChiSquare() {
	var k;
	if ( !(this instanceof ChiSquare) ) {
		if ( arguments.length === 0 ) {
			return new ChiSquare();
		}
		return new ChiSquare( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
}

/**
* Chi-squared distribution differential entropy.
*
* @memberof ChiSquare.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.entropy;
* // returns ~2.27
*/
Object.defineProperty( ChiSquare.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k );
	}
});

/**
* Chi-squared distribution excess kurtosis.
*
* @memberof ChiSquare.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.kurtosis;
* // returns 3.0
*/
Object.defineProperty( ChiSquare.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k );
	}
});

/**
* Chi-squared distribution expected value.
*
* @memberof ChiSquare.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mean;
* // returns 4.0
*/
Object.defineProperty( ChiSquare.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k );
	}
});

/**
* Chi-squared distribution mode.
*
* @memberof ChiSquare.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mode;
* // returns 2.0
*/
Object.defineProperty( ChiSquare.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k );
	}
});

/**
* Chi-squared distribution skewness.
*
* @memberof ChiSquare.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.skewness;
* // returns ~1.414
*/
Object.defineProperty( ChiSquare.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k );
	}
});

/**
* Chi-squared distribution standard deviation.
*
* @memberof ChiSquare.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.stdev;
* // returns ~2.828
*/
Object.defineProperty( ChiSquare.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k );
	}
});

/**
* Chi-squared distribution variance.
*
* @memberof ChiSquare.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.variance;
* // returns 8.0
*/
Object.defineProperty( ChiSquare.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof ChiSquare.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.cdf( 0.5 );
* // returns ~0.221
*/
setReadOnly( ChiSquare.prototype, 'cdf', chisquareCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof ChiSquare.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.mgf( 0.2 );
* // returns ~1.667
*/
setReadOnly( ChiSquare.prototype, 'mgf', chisquareMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof ChiSquare.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.pdf( 0.8 );
* // returns ~0.335
*/
setReadOnly( ChiSquare.prototype, 'pdf', chisquarePDF );

/**
* Evaluates the quantile function.
*
* @memberof ChiSquare.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.quantile( 0.5 );
* // returns ~1.386
*/
setReadOnly( ChiSquare.prototype, 'quantile', chisquareQuantile );


// EXPORTS //

module.exports = ChiSquare;
