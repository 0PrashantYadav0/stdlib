#!/usr/bin/env julia

import Distributions: logpdf, Binomial
import JSON

"""
	gen( x, n, p, name )

Generate fixture data and write to file.

# Arguments

* `x`: input value
* `n`: number of trials
* `p`: success probability
* `name::AbstractString`: output filename

# Examples

``` julia
julia> x = round( rand( 1000 ) * 15.0 );
julia> n = round( rand( 1000 ) * 20.0 );
julia> p = rand( 1000 );
julia> gen( x, n, p, \"data.json\" );
```
"""
function gen( x, n, p, name )
	z = Array( Float64, length(x) );
	for i in eachindex(x)
		z[ i ] = logpdf( Binomial( Int( n[i] ), p[i] ), x[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("x", x),
		("n", n),
		("p", p),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Random (small n, small p):
n = round( rand( 1000 ) * 20.0 );
x = round( rand( 1000 ) .* n );
p = rand( 1000 ) * 0.2;
gen( x, n, p, "small_small.json" );

# Random (small n, high p):
n = round( rand( 1000 ) * 20.0 );
x = round( rand( 1000 ) .* n );
p = ( rand( 1000 ) * 0.25 ) + 0.75;
gen( x, n, p, "small_high.json" );

# Random (high n, high p):
n = round( rand( 1000 ) * 100.0 );
x = round( rand( 1000 ) .* n );
p = ( rand( 1000 ) * 0.25 ) + 0.75;
gen( x, n, p, "high_high.json" );

# Random (high n, small p):
n = round( rand( 1000 ) * 100.0 );
x = round( rand( 1000 ) .* n );
p = rand( 1000 ) * 0.2;
gen( x, n, p, "high_small.json" );
