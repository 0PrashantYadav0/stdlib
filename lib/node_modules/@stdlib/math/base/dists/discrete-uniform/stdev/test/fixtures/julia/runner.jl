#!/usr/bin/env julia

import Distributions: var, DiscreteUniform
import JSON

"""
	gen( a, b, name )

Generate fixture data and write to file.

# Arguments

* `x`: input value
* `a`: minimum support
* `b`: maximum support
* `name::AbstractString`: output filename

# Examples

``` julia
julia> a = round( Int64, rand( 1000 ) * 10.0 );
julia> b = round( Int64, ( rand( 1000 ) * 10.0 ) + a );
julia> gen( a, b, \"data.json\" );
```
"""
function gen( a, b, name )
	z = Array( Float64, length(a) );
	for i in eachindex(a)
		z[ i ] = sqrt( var( DiscreteUniform( a[i], b[i] ) ) );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("a", a),
		("b", b),
		("expected", z)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Generate fixtures:
a = round( Int64, rand( 1000 ) * 10.0 );
b = round( Int64, rand( 1000 ) * 10.0 + a );
gen( a, b, "data.json" );

