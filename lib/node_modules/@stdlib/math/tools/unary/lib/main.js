/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isComplexLike = require( '@stdlib/assert/is-complex-like' );
var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
var isCollection = require( '@stdlib/assert/is-collection' );
var dtype = require( '@stdlib/ndarray/base/buffer-dtype' );
var ndarrayfcn = require( './ndarray.js' );
var arrayfcn = require( './array.js' );
var numberfcn = require( './number.js' );
var complexfcn = require( './complex.js' );
var odtype = require( './resolve_output_dtype.js' );
var defaults = require( './defaults.json' );
var validateTable = require( './validate_table.js' );
var validateOptions = require( './validate_options.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Returns a function which dispatches to specified functions based on input argument types.
*
* @param {Object} table - resolution table object
* @param {ArrayLikeObject} [table.scalar] - scalar look-up table
* @param {ArrayLikeObject} [table.array] - array look-up table
* @param {ArrayLikeObject} [table.ndarray] - ndarray look-up table
* @param {Options} [options] - options
* @param {string} [options.output_dtype_policy='float'] - policy for determining the output array dtype
* @throws {TypeError} first argument must be an object
* @throws {TypeError} first argument must have valid table fields
* @throws {Error} table field values must be array-like objects having an even number of elements
* @throws {TypeError} table field values must consist of dtype-function pairs
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} dispatch function
*
* @example
* var nabs = require( '@stdlib/math/base/special/abs' );
* var dabs = require( '@stdlib/math/strided/special/dabs' );
* var sabs = require( '@stdlib/math/strided/special/sabs' );
* var gabs = require( '@stdlib/math/strided/special/abs' );
* var dispatcher = require( '@stdlib/ndarray/dispatch' );
* var unary = require( '@stdlib/ndarray/base/unary' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var types = [
*     'float64', 'float64',
*     'float32', 'float32',
*     'generic', 'generic'
* ];
* var data = [
*     nabs,
*     nabs,
*     nabs
* ];
* var ndabs = dispatcher( unary, types, data, 2, 1, 1 );
*
* var table = {
*     'scalar': [
*         'number', nabs
*     ],
*     'array': [
*         'float64', dabs,
*         'float32', sabs,
*         'generic', gabs
*     ],
*     'ndarray': [
*         'generic', ndabs
*     ]
* };
*
* var abs = dispatch( table, {
*     'output_dtype_policy': 'same'
* });
*
* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );
*
* var y = abs( x );
* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]
*/
function dispatch( table, options ) {
	var OPTS;
	var err;
	var t;

	t = {
		'scalar': [],
		'array': [],
		'ndarray': []
	};
	err = validateTable( t, table );
	if ( err ) {
		throw err;
	}
	OPTS = {
		'policy': defaults.output_dtype_policy
	};
	if ( arguments.length > 1 ) {
		err = validateOptions( OPTS, options );
		if ( err ) {
			throw err;
		}
	}
	return dispatcher;

	/**
	* Function interface which performs dispatch.
	*
	* @private
	* @param {(ndarray|Collection|number|Complex)} x - input value
	* @param {Options} [options] - options
	* @param {string} [options.dtype] - output array data type
	* @param {string} [options.order] - output array order (row-major or column-major)
	* @throws {TypeError} first argument must have a supported data type
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @returns {(ndarray|Collection|number|Complex)} results
	*/
	function dispatcher( x, options ) {
		var opts;
		var xdt;
		var ydt;
		var err;
		if ( isNumber( x ) ) {
			return numberfcn( t.scalar, x );
		}
		if ( isComplexLike( x ) ) {
			return complexfcn( t.scalar, x );
		}
		opts = {};
		if ( arguments.length > 1 ) {
			err = validate( opts, options );
			if ( err ) {
				throw err;
			}
		}
		if ( isndarrayLike( x ) ) {
			xdt = x.dtype;
			ydt = opts.dtype || odtype( xdt, OPTS.policy );
			return ndarrayfcn( t.ndarray, xdt, x, ydt, opts.order || x.order );
		}
		if ( isCollection( x ) ) {
			xdt = dtype( x ) || 'generic';
			ydt = opts.dtype || odtype( xdt, OPTS.policy );
			return arrayfcn( t.array, xdt, x, ydt );
		}
		throw new TypeError( 'invalid argument. Must provide an argument having a supported data type. Value: `' + x + '`.' );
	}
}


// EXPORTS //

module.exports = dispatch;
