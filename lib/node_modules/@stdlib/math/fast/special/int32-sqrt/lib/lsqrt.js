'use strict';

// VARIABLES //

// Set the second most significant bit: 00100000000000000000000000000000 => 1<<30 = 1073741824
var BIT = 1073741824|0; // asm type annotation


// MAIN //

/**
* Returns an integer square root.
*
* @param {integer32} x - input value
* @returns {integer32} integer square root
*
* @example
* var v = lsqrt( 9 );
* // returns 3
*
* @example
* var v = lsqrt( 2 );
* // returns 1
*
* @example
* var v = lsqrt( 3 );
* // returns 1
*
* @example
* var v = lsqrt( 0 );
* // returns 0
*/
function lsqrt( x ) {
	var root;
	var bit;
	var sum;

	root = 0;
	bit = BIT;

	// `bit` should start as the highest power of `4` less than or equal to `x`:
	while ( bit > x ) {
		bit >>= 2;
	}
	// Perform a digit-by-digit/abacus computation...
	while ( bit !== 0 ) {
		sum = root + bit;
		root >>= 1;
		if ( x >= sum ) {
			x -= sum;
			root += bit;
		}
		bit >>= 2;
	}
	// Note: `x` is the remainder

	return root|0; // asm type annotation
} // end FUNCTION lsqrt()


// EXPORTS //

module.exports = lsqrt;
