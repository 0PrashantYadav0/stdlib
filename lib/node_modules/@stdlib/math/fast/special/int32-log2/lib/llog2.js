'use strict';

// VARIABLES //

// 4294901760 => 0xFFFF0000 => 11111111111111110000000000000000
var B4 = 0xFFFF0000 >>> 0; // asm type annotation

// 65280 => 0xFF00 => 00000000000000001111111100000000
var B3 = 0xFF00 >>> 0; // asm type annotation

// 240 => 0xF0 => 00000000000000000000000011110000
var B2 = 0xF0 >>> 0; // asm type annotation

// 12 => 0xC => 00000000000000000000000000001100
var B1 = 0xC >>> 0; // asm type annotation

// 2 => 0x2 => 00000000000000000000000000000010
var B0 = 0x2 >>> 0; // asm type annotation

// 16 => 00000000000000000000000000010000
var S4 = 16 >>> 0; // asm type annotation

// 8 => 00000000000000000000000000001000
var S3 = 8 >>> 0; // asm type annotation

// 4 => 00000000000000000000000000000100
var S2 = 4 >>> 0; // asm type annotation

// 2 => 00000000000000000000000000000010
var S1 = 2 >>> 0; // asm type annotation

// 1 => 00000000000000000000000000000001
var S0 = 1 >>> 0; // asm type annotation


// MAIN //

/**
* Computes an integer binary logarithm (base two).
*
* #### Method
*
* 1. Note that the largest signed 32-bit integer is `2147483647`, which is `2^{31}-1`. Hence, the integer binary logarithm cannot exceed `31` (i.e., `16 + 8 + 4 + 2 + 1`), which corresponds to the bit sequence
*
*   ``` binarystring
*   00000000000000000000000000011111
*   ```
*
* 2. Initialize a return variable with the value zero.
*
* 3. If at least one of the first sixteen most significant bits of the input 32-bit integer `x` is turned on, we know that the power to which the number `2` must be raised to obtain `x` is at least `16` (i.e., `x > 65536`). Hence, activate the corresponding bit of the return variable. Mutate `x` by shifting sixteen bits to the right, discarding the bits shifted off.
*
* 4. Carry out the following steps with `B` in `[ 8, 4, 2, 1 ]`:
*
*    - If at least one of the next `B` most significant bits of the current `x` is turned on, we know that the power to which the number `2` must be raised to obtain `x` has to be increased by `B`.
*    - Activate the bit of the return variable that corresponds to `B`.
*    - Mutate `x` by shifting `B` bits to the right, discarding the bits shifted off.
*
* 5. The final value of the return variable is the integer binary logarithm of `x`.
*
*
* @param {integer32} x - input value
* @returns {integer32} integer binary logarithm
*
* @example
* var v = llog2( 4 );
* // returns 2
* @example
* var v = llog2( 8 );
* // returns 3
* @example
* var v = llog2( 9 );
* // returns 3
*/
function llog2( x ) {
	var out = 0 >>> 0; // asm type annotation

	// `x >= 65536`:
	if ( x & B4 ) {
		x >>>= S4;
		out |= S4;
	}
	// `x >= 256`:
	if ( x & B3 ) {
		x >>>= S3;
		out |= S3;
	}
	// `x >= 16`:
	if ( x & B2 ) {
		x >>>= S2;
		out |= S2;
	}
	// `x >= 4`:
	if ( x & B1 ) {
		x >>>= S1;
		out |= S1;
	}
	// `x >= 2`:
	if ( x & B0 ) {
		x >>>= S0;
		out |= S0;
	}
	return out;
} // end FUNCTION llog2()


// EXPORTS //

module.exports = llog2;
