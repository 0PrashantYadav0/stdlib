'use strict';

// MODULES //

var incrcount = require( '@stdlib/math/statistics/incr/count' );
var incrmax = require( '@stdlib/math/statistics/incr/max' );
var incrmin = require( '@stdlib/math/statistics/incr/min' );
var incrrange = require( '@stdlib/math/statistics/incr/range' );
var incrmidrange = require( '@stdlib/math/statistics/incr/midrange' );
var incrsum = require( '@stdlib/math/statistics/incr/sum' );
var incrmean = require( '@stdlib/math/statistics/incr/mean' );
var incrvariance = require( '@stdlib/math/statistics/incr/variance' );
var incrstdev = require( '@stdlib/math/statistics/incr/stdev' );


// MAIN //

/**
* Returns an accumulator function which incrementally computes a statistical summary.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrsummary();
*/
function incrsummary() {
	var midrange = incrmidrange();
	var variance = incrvariance();
	var count = incrcount();
	var range = incrrange();
	var stdev = incrstdev();
	var mean = incrmean();
	var max = incrmax();
	var min = incrmin();
	var sum = incrsum();
	var summary = {};

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.
	*
	* @param {number} [x] - new value
	* @returns {Object} summary
	*
	* @example
	* var summary = accumulator();
	* // returns {}
	*
	* summary = accumulator( 2.0 );
	* // returns {...}
	*
	* summary = accumulator( -5.0 );
	* // returns {...}
	*
	* summary = accumulator();
	* // returns {...}
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return summary;
		}
		summary.count = count( x );
		summary.max = max( x );
		summary.min = min( x );
		summary.range = range( x );
		summary.midrange = midrange( x );
		summary.sum = sum( x );
		summary.mean = mean( x );
		summary.variance = variance( x );
		summary.stdev = stdev( x );
		return summary;
	}
} // end FUNCTION incrsummary()


// EXPORTS //

module.exports = incrsummary;
