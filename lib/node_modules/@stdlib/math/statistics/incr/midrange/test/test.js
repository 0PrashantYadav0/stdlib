'use strict';

// MODULES //

var tape = require( 'tape' );
var incrmidrange = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof incrmidrange, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an accumulator function', function test( t ) {
	t.equal( typeof incrmidrange(), 'function', 'returns a function' );
	t.end();
});

tape( 'if not provided any values, the initial returned mid-range is `null`', function test( t ) {
	var acc = incrmidrange();
	t.equal( acc(), null, 'returns null' );
	t.end();
});

tape( 'the accumulator function incrementally computes a mid-range', function test( t ) {
	var expected;
	var actual;
	var data;
	var acc;
	var max;
	var min;
	var N;
	var d;
	var i;

	data = [ 2.0, 3.0, -2.0, 4.0, -3.0, 4.0 ];
	N = data.length;

	expected = new Array( N );
	actual = new Array( N );

	acc = incrmidrange();

	max = data[ 0 ];
	min = data[ 0 ];
	for ( i = 0; i < N; i++ ) {
		d = data[ i ];
		if ( d > max ) {
			max = d;
		} else if ( d < min ) {
			min = d;
		}
		expected[ i ] = (max + min) / 2.0;
		actual[ i ] = acc( d );
	}
	t.deepEqual( actual, expected, 'returns expected incremental results' );
	t.end();
});

tape( 'if not provided an input value, the accumulator function returns the current mid-range', function test( t ) {
	var data;
	var acc;
	var i;

	data = [ -2.0, 3.0, 1.0 ];
	acc = incrmidrange();
	for ( i = 0; i < data.length; i++ ) {
		acc( data[ i ] );
	}
	t.equal( acc(), 0.5, 'returns the current accumulated mid-range' );
	t.end();
});
