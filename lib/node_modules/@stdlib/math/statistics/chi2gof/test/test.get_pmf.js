'use strict';

// MODULES //

var tape = require( 'tape' );
var binomialPMF = require( '@stdlib/math/base/dists/binomial/pmf' );
var geometricPMF = require( '@stdlib/math/base/dists/geometric/pmf' );
var hypergeometricPMF = require( '@stdlib/math/base/dists/hypergeometric/pmf' );
var negativeBinomialPMF = require( '@stdlib/math/base/dists/negative-binomial/pmf' );
var poissonPMF = require( '@stdlib/math/base/dists/poisson/pmf' );
var getPMF = require( './../lib/get_pmf.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof getPMF, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns the correct PMF if provided a valid input string', function test( t ) {
	t.equal( getPMF( 'binomial' ), binomialPMF );
	t.equal( getPMF( 'geometric' ), geometricPMF );
	t.equal( getPMF( 'hypergeometric' ), hypergeometricPMF );
	t.equal( getPMF( 'negative-binomial' ), negativeBinomialPMF );
	t.equal( getPMF( 'poisson' ), poissonPMF );
	t.end();
});

tape( 'the function throws an error if provided the name of a continuous distribution', function test( t ) {
	var values;
	var i;

	values = [
		'beta',
		'cauchy',
		'chisquare',
		'erlang',
		'exponential',
		'f',
		'gamma',
		'gumbel',
		'invgamma',
		'laplace',
		'logistic',
		'lognormal',
		'normal',
		'pareto-type1',
		'rayleigh',
		't',
		'triangular',
		'uniform',
		'weibull'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			getPMF( value );
		};
	}
});

tape( 'the function throws an error if the provided a name which does not match any distribution', function test( t ) {
	var values;
	var i;

	values = [
		'not_a_distribution',
		'5',
		5,
		true,
		undefined,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			getPMF( value );
		};
	}
});
