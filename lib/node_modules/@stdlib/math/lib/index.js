'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level math namespace.
*
* @namespace stdmath
*/
var stdmath = {};

/**
* Namespace for base functions.
*
* @namespace stdmath.base
* @memberof stdmath
* @readonly
* @type {Object}
*/
setReadOnly( stdmath, 'base', {} );


// Constants...

/**
* @name FLOAT64_PI
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-pi}
*/
setReadOnly( stdmath, 'FLOAT64_PI', require( '@stdlib/math/constants/float64-pi' ) );

/**
* @name FLOAT64_TWO_PI
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-two-pi}
*/
setReadOnly( stdmath, 'FLOAT64_TWO_PI', require( '@stdlib/math/constants/float64-two-pi' ) );

/**
* @name FLOAT64_PI_SQUARED
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-pi-squared}
*/
setReadOnly( stdmath, 'FLOAT64_PI_SQUARED', require( '@stdlib/math/constants/float64-pi-squared' ) );

/**
* @name FLOAT64_E
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-e}
*/
setReadOnly( stdmath, 'FLOAT64_E', require( '@stdlib/math/constants/float64-e' ) );

/**
* @name FLOAT64_PHI
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-phi}
*/
setReadOnly( stdmath, 'FLOAT64_PHI', require( '@stdlib/math/constants/float64-phi' ) );

/**
* @name FLOAT64_SQRT_PHI
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-sqrt-phi}
*/
setReadOnly( stdmath, 'FLOAT64_SQRT_PHI', require( '@stdlib/math/constants/float64-sqrt-phi' ) );

/**
* @name FLOAT64_EULERGAMMA
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-eulergamma}
*/
setReadOnly( stdmath, 'FLOAT64_EULERGAMMA', require( '@stdlib/math/constants/float64-eulergamma' ) );

/**
* @name FLOAT64_GLAISHER
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-glaisher-kinkelin}
*/
setReadOnly( stdmath, 'FLOAT64_GLAISHER', require( '@stdlib/math/constants/float64-glaisher-kinkelin' ) );

/**
* @name FLOAT64_CATALAN
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-catalan}
*/
setReadOnly( stdmath, 'FLOAT64_CATALAN', require( '@stdlib/math/constants/float64-catalan' ) );

/**
* @name FLOAT64_SQRT_TWO
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-sqrt-two}
*/
setReadOnly( stdmath, 'FLOAT64_SQRT_TWO', require( '@stdlib/math/constants/float64-sqrt-two' ) );

/**
* @name FLOAT64_SQRT_HALF
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-sqrt-half}
*/
setReadOnly( stdmath, 'FLOAT64_SQRT_HALF', require( '@stdlib/math/constants/float64-sqrt-half' ) );

/**
* @name FLOAT64_LN_TWO
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-ln-two}
*/
setReadOnly( stdmath, 'FLOAT64_LN_TWO', require( '@stdlib/math/constants/float64-ln-two' ) );

/**
* @name FLOAT64_LN_SQRT_TWO_PI
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-ln-sqrt-two-pi}
*/
setReadOnly( stdmath, 'FLOAT64_LN_SQRT_TWO_PI', require( '@stdlib/math/constants/float64-ln-sqrt-two-pi' ) );

/**
* @name FLOAT32_PINF
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float32-pinf}
*/
setReadOnly( stdmath, 'FLOAT32_PINF', require( '@stdlib/math/constants/float32-pinf' ) );

/**
* @name FLOAT32_NINF
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float32-ninf}
*/
setReadOnly( stdmath, 'FLOAT32_NINF', require( '@stdlib/math/constants/float32-ninf' ) );

/**
* @name FLOAT64_PINF
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-pinf}
*/
setReadOnly( stdmath, 'FLOAT64_PINF', require( '@stdlib/math/constants/float64-pinf' ) );

/**
* @name FLOAT64_NINF
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-ninf}
*/
setReadOnly( stdmath, 'FLOAT64_NINF', require( '@stdlib/math/constants/float64-ninf' ) );

/**
* @name INT8_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/int8-max}
*/
setReadOnly( stdmath, 'INT8_MAX', require( '@stdlib/math/constants/int8-max' ) );

/**
* @name INT8_MIN
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/int8-min}
*/
setReadOnly( stdmath, 'INT8_MIN', require( '@stdlib/math/constants/int8-min' ) );

/**
* @name INT16_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/int16-max}
*/
setReadOnly( stdmath, 'INT16_MAX', require( '@stdlib/math/constants/int16-max' ) );

/**
* @name INT16_MIN
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/int16-min}
*/
setReadOnly( stdmath, 'INT16_MIN', require( '@stdlib/math/constants/int16-min' ) );

/**
* @name INT32_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/int32-max}
*/
setReadOnly( stdmath, 'INT32_MAX', require( '@stdlib/math/constants/int32-max' ) );

/**
* @name INT32_MIN
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/int32-min}
*/
setReadOnly( stdmath, 'INT32_MIN', require( '@stdlib/math/constants/int32-min' ) );

/**
* @name UINT8_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/uint8-max}
*/
setReadOnly( stdmath, 'UINT8_MAX', require( '@stdlib/math/constants/uint8-max' ) );

/**
* @name UINT16_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/uint16-max}
*/
setReadOnly( stdmath, 'UINT16_MAX', require( '@stdlib/math/constants/uint16-max' ) );

/**
* @name UINT32_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/uint32-max}
*/
setReadOnly( stdmath, 'UINT32_MAX', require( '@stdlib/math/constants/uint32-max' ) );

/**
* @name FLOAT32_SMALLEST_NORMAL
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float32-smallest-normal}
*/
setReadOnly( stdmath, 'FLOAT32_SMALLEST_NORMAL', require( '@stdlib/math/constants/float32-smallest-normal' ) );

/**
* @name FLOAT32_SMALLEST_SUBNORMAL
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float32-smallest-subnormal}
*/
setReadOnly( stdmath, 'FLOAT32_SMALLEST_SUBNORMAL', require( '@stdlib/math/constants/float32-smallest-subnormal' ) );

/**
* @name FLOAT64_SMALLEST_NORMAL
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-smallest-normal}
*/
setReadOnly( stdmath, 'FLOAT64_SMALLEST_NORMAL', require( '@stdlib/math/constants/float64-smallest-normal' ) );

/**
* @name FLOAT64_SMALLEST_SUBNORMAL
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-smallest-subnormal}
*/
setReadOnly( stdmath, 'FLOAT64_SMALLEST_SUBNORMAL', require( '@stdlib/math/constants/float64-smallest-subnormal' ) );

/**
* @name FLOAT64_MAX
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-max}
*/
setReadOnly( stdmath, 'FLOAT64_MAX', require( '@stdlib/math/constants/float64-max' ) );

/**
* @name FLOAT64_MAX_SAFE_INTEGER
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-max-safe-integer}
*/
setReadOnly( stdmath, 'FLOAT64_MAX_SAFE_INTEGER', require( '@stdlib/math/constants/float64-max-safe-integer' ) );

/**
* @name FLOAT64_MIN_SAFE_INTEGER
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-min-safe-integer}
*/
setReadOnly( stdmath, 'FLOAT64_MIN_SAFE_INTEGER', require( '@stdlib/math/constants/float64-min-safe-integer' ) );

/**
* @name FLOAT64_EPSILON
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-eps}
*/
setReadOnly( stdmath, 'FLOAT64_EPSILON', require( '@stdlib/math/constants/float64-eps' ) );

/**
* @name FLOAT64_SQRT_EPSILON
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-sqrt-eps}
*/
setReadOnly( stdmath, 'FLOAT64_SQRT_EPSILON', require( '@stdlib/math/constants/float64-sqrt-eps' ) );

/**
* @name FLOAT16_PRECISION
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float16-precision}
*/
setReadOnly( stdmath, 'FLOAT16_PRECISION', require( '@stdlib/math/constants/float16-precision' ) );

/**
* @name FLOAT32_PRECISION
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float32-precision}
*/
setReadOnly( stdmath, 'FLOAT32_PRECISION', require( '@stdlib/math/constants/float32-precision' ) );

/**
* @name FLOAT64_PRECISION
* @memberof stdmath
* @readonly
* @constant
* @type {Number}
* @see {@link module:@stdlib/math/constants/float64-precision}
*/
setReadOnly( stdmath, 'FLOAT64_PRECISION', require( '@stdlib/math/constants/float64-precision' ) );


// Special functions (base)...

setReadOnly( stdmath.base, 'round', require( '@stdlib/math/base/special/round' ) );
setReadOnly( stdmath.base, 'roundn', require( '@stdlib/math/base/special/roundn' ) );
setReadOnly( stdmath.base, 'floor', require( '@stdlib/math/base/special/floor' ) );
setReadOnly( stdmath.base, 'ceil', require( '@stdlib/math/base/special/ceil' ) );
setReadOnly( stdmath.base, 'truncate', require( '@stdlib/math/base/special/truncate' ) );
setReadOnly( stdmath.base, 'abs', require( '@stdlib/math/base/special/abs' ) );
setReadOnly( stdmath.base, 'pow', require( '@stdlib/math/base/special/pow' ) );
setReadOnly( stdmath.base, 'sqrt', require( '@stdlib/math/base/special/sqrt' ) );
setReadOnly( stdmath.base, 'exp', require( '@stdlib/math/base/special/exp' ) );
setReadOnly( stdmath.base, 'ln', require( '@stdlib/math/base/special/ln' ) );
setReadOnly( stdmath.base, 'signum', require( '@stdlib/math/base/special/signum' ) );
setReadOnly( stdmath.base, 'copysign', require( '@stdlib/math/base/special/copysign' ) );
setReadOnly( stdmath.base, 'flipsign', require( '@stdlib/math/base/special/flipsign' ) );

// Utilities (base):
setReadOnly( stdmath.base, 'isNaN', require( '@stdlib/math/base/utils/is-nan' ) );
setReadOnly( stdmath.base, 'isFinite', require( '@stdlib/math/base/utils/is-finite' ) );
setReadOnly( stdmath.base, 'isInfinite', require( '@stdlib/math/base/utils/is-infinite' ) );
setReadOnly( stdmath.base, 'isNegativeZero', require( '@stdlib/math/base/utils/is-negative-zero' ) );
setReadOnly( stdmath.base, 'isPositiveZero', require( '@stdlib/math/base/utils/is-positive-zero' ) );
setReadOnly( stdmath.base, 'isInteger', require( '@stdlib/math/base/utils/is-integer' ) );
setReadOnly( stdmath.base, 'isPositiveInteger', require( '@stdlib/math/base/utils/is-positive-integer' ) );
setReadOnly( stdmath.base, 'isNonNegativeInteger', require( '@stdlib/math/base/utils/is-nonnegative-integer' ) );
setReadOnly( stdmath.base, 'isNegativeInteger', require( '@stdlib/math/base/utils/is-negative-integer' ) );
setReadOnly( stdmath.base, 'isNonPositiveInteger', require( '@stdlib/math/base/utils/is-nonpositive-integer' ) );

setReadOnly( stdmath.base, 'absoluteDifference', require( '@stdlib/math/base/utils/absolute-difference' ) );
setReadOnly( stdmath.base, 'relativeDifference', require( '@stdlib/math/base/utils/relative-difference' ) );

// Tools (base):
setReadOnly( stdmath.base, 'evalpoly', require( '@stdlib/math/base/tools/evalpoly' ) );
setReadOnly( stdmath.base, 'evalrational', require( '@stdlib/math/base/tools/evalrational' ) );

// Utilities (generics):
setReadOnly( stdmath, 'linspace', require( '@stdlib/math/generics/utils/linspace' ) );
setReadOnly( stdmath, 'logspace', require( '@stdlib/math/generics/utils/logspace' ) );
setReadOnly( stdmath, 'incrspace', require( '@stdlib/math/generics/utils/incrspace' ) );

// EXPORTS //

module.exports = stdmath;
