'use strict';


// MODULES //

var incrstdev = require( '@stdlib/math/stats/incr/stdev' );
var uniqueElems = require('./unique_elems.js');


// MAIN //

/**
* Computes the vector of means for each treatment.
*
* @param {NumericArray} x - Measured values
* @param {Array} factor - Array of treatments
* @returns {Object} An object containing various summary statistics for the categories.
*/
function meanTable(x, factor) {
	var tableOfMeans;
	var factorCount;
	var accumulator;
	var treatments;
	var newMean;
	var j;
	var i;
	var k;

	treatments = uniqueElems(factor);
	factorCount = treatments.length;

	/* Create object of:
	means = { factor1: {mean, sampleSize, SD, values, idNumber // index of it in names} }
	*/
	tableOfMeans = {};
	for (j = 0; j < factorCount; j++) {
		accumulator = incrstdev();
		tableOfMeans[treatments[j]] = {
			'mean': 0,
			'sampleSize': 0,
			'idNumber': j,
			'SD': accumulator
		};
		for (i = 0; i < x.length; i++) {
			if (factor[i] === treatments[j]) {
				tableOfMeans[treatments[j]]['SD'] = accumulator(x[i]);
			}
		}
	}
	// Go through, add to meanTable by indexing factor[i]
	// X[i] is the individual continuous
	for (i = 0; i < x.length; i++) {
		tableOfMeans[factor[i]]['mean'] += x[i];
		tableOfMeans[factor[i]]['sampleSize'] += 1;
	}

	// Now make the mean by dividing by the sample size
	// Get the standard deviation through the helper function
	for (k = 0; k < factorCount; k++) {
		newMean = tableOfMeans[treatments[k]]['mean'] / tableOfMeans[treatments[k]]['sampleSize'];
		tableOfMeans[treatments[k]]['mean'] = newMean;
	}

	// Now get the standard deviations
	return tableOfMeans;
}


// EXPORTS //

module.exports = meanTable;
