'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var roundn = require( '@stdlib/math/base/special/roundn' );
var isBoolean = require( '@stdlib/assert/is-boolean' );


// MAIN //

/**
* Returns a function to pretty print test results.
*
* @private
* @param {Object} results - test results
* @returns {Function} pretty print function
*/
function prettyPrint( results ) {
	return print;

	/**
	* Pretty-print output of ANOVA.
	*
	* @private
	* @param {Object} [opts] - options object
	* @param {PositiveInteger} [opts.numdigits=4] - number of digits after the decimal point
	* @param {boolean} [opts.decision=true] - Whether or not to print the decision
	* @returns {string} formatted results
	*/
	function print( opts ) {
		var decision;
		var dgts;
		var str;

		// Was unable to use the isObject method as it crashes on my installation. More information in the TODO

		dgts = 4;
		decision = true;
		if ( arguments.length > 0 ) {
			if ( hasOwnProp( opts, 'numdigits' ) ) {
				if ( !isPositiveInteger( opts.numdigits ) ) {
					throw new TypeError( 'invalid option. numdigits option must be a positive integer. Option: `' + opts.numdigits + '`.' );
				}
				dgts = opts.numdigits;
			}
			if ( hasOwnProp( opts, 'decision' ) ) {
				if ( !isBoolean( opts.decision ) ) {
					throw new TypeError( 'Decision option must be boolean: `' + opts.decision + '`.' );
				}
				decision = opts.decision;
			}
		}
		str = '';
		str += results.method;
		str += '\n\n';

		// Hypothesis
		str += 'Null Hypothesis: All Means Equal';
		str += '\n';
		str += 'Alternate Hypothesis: At Least one Mean not Equal';
		str += '\n\n';

		// Formatted table
		str += '\t\t';
		str += 'df';
		str += '\t';
		str += 'Sum Squares';
		str += '\t';
		str += 'Mean Sum Sq.';
		str += '\t';
		str += 'F Score';
		str += '\t';
		str += 'P Value';
		str += '\n';

		// Now start adding in values
		str += 'Treatment';
		str += '\t';
		str += results.treatmentDf;
		str += '\t';
		str += results.treatmentSS;
		str += '\t\t';
		str += roundn(results.treatmentMSS, -dgts);
		str += '\t\t';
		str += roundn(results.statistic, -dgts);
		str += '\t';
		str += roundn(results.pValue, -dgts);
		str += '\n';

		// Next line
		str += 'Errors';
		str += '\t\t';
		str += results.errorDf;
		str += '\t';
		str += roundn(results.errorSS, -dgts);
		str += '\t\t';
		str += roundn(results.errorMSS, -dgts);

		if ( decision ) {
			str += '\n\n';
			if (results.rejected) {
				str += 'Reject Null: ';
				str += roundn(results.pValue, -dgts);
				str += ' <= ';
				str += results.alpha;
			} else {
				str += 'Fail to Reject Null: ';
				str += roundn(results.pValue, -dgts);
				str += ' >= ';
				str += results.alpha;
			}
		}
		return str;
	} // End FUNCTION print()
} // End FUNCTION prettyPrint()


// EXPORTS //

module.exports = prettyPrint;
