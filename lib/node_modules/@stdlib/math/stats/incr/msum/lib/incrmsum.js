'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving sum.
*
* @param {PositiveInteger} W - window size
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmsum( 3 );
*/
function incrmsum( W ) {
	var buf;
	var sum;
	var N;
	var i;
	if ( !isPositiveInteger( W ) ) {
		throw new TypeError( 'invalid input argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	sum = 0.0;
	i = -1;
	N = 0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @param {number} [x] - input value
	* @returns {(number|null)} sum or null
	*
	* @example
	* var sum = accumulator();
	* // returns null
	*
	* sum = accumulator( 2.0 );
	* // returns 2.0
	*
	* sum = accumulator( -5.0 );
	* // returns -3.0
	*
	* sum = accumulator( 3.0 );
	* // returns 0.0
	*
	* sum = accumulator( 5.0 );
	* // returns 3.0
	*
	* sum = accumulator();
	* // returns 3.0
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return sum;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Determine if we should update the initial window...
		if ( N < W ) {
			N += 1;
			sum += x;
		}
		// Update existing window...
		else {
			sum += x - buf[ i ];
		}
		buf[ i ] = x;
		return sum;
	}
} // end FUNCTION incrmsum()


// EXPORTS //

module.exports = incrmsum;
