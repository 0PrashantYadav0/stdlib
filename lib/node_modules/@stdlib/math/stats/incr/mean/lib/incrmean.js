'use strict';

/**
* Returns an accumulator function which incrementally computes an arithmetic mean.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmean();
*/
function incrmean() {
	var mu = 0.0;
	var N = 0;
	var delta;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* #### Method
	*
	* * This implementation uses [Welford's method]{@link https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance} for efficient computation.
	*
	*
	* @param {number} [x] - new value
	* @returns {number} mean value
	*
	* @example
	* var mu = accumulator();
	* // returns 0.0
	*
	* mu = accumulator( 2.0 );
	* // returns 2.0
	*
	* mu = accumulator( -5.0 );
	* // returns -1.5
	*
	* mu = accumulator();
	* // returns -1.5
	*/
	function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return mu;
		}
		N += 1;
		delta = x - mu;
		mu += delta / N;
		return mu;
	}
} // end FUNCTION incrmean()


// EXPORTS //

module.exports = incrmean;
