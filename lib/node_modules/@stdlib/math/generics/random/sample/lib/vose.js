'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Samples with replacement and non-uniform probabilities using Vose's [alias method](http://keithschwarz.com/darts-dice-coins/).
*
* #### References
*
* * Vose, M. D. (1991). "A linear algorithm for generating random numbers with a given distribution." *IEEE Transactions on Software Engineering*, 17(9), 972â€“975. doi:10.1109/32.92917
*
* @private
* @param {ArrayLike} x - array-like object to sample from
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @param {ProbabilityArray} probabilities - element probabilities
* @returns {Array} sample
*/
function vose( x, size, rand, probabilities ) {
	var aliasArr;
	var probArr;
	var nElems;
	var small;
	var large;
	var probs;
	var pos;
	var ret;
	var g;
	var i;
	var l;

	nElems = x.length;
	small = [];
	large = [];
	probs = [];
	for ( i = 0; i < nElems; i++ ) {
		probs[ i ] = probabilities[ i ];
		probs[ i ] *= nElems;
		if ( probs[ i ] < 1.0 ) {
			small.push( i );
		} else {
			large.push( i );
		}
	}
	aliasArr = new Array( nElems );
	probArr = new Array( nElems );
	while ( small.length !== 0 && large.length !== 0 ) {
		l = small.shift();
		g = large.shift();
		probArr[ l ] = probs[ l ];
		aliasArr[ l ] = g;
		probs[ g ] = probs[ g ] + probs[ l ] - 1.0;
		if ( probs[ g ] < 1.0 ) {
			small.push( g );
		} else {
			large.push( g );
		}
	}
	while ( large.length !== 0 ) {
		g = large.shift();
		probArr[ g ] = 1.0;
	}
	while ( small.length !== 0 ) {
		l = small.shift();
		probArr[ l ] = 1.0;
	}
	ret = [];
	for ( i = 0; i < size; i++ ) {
		pos = floor( nElems * rand() );
		if ( rand() < probArr[ pos ] ) {
			ret[ i ] = x[ pos ];
		} else {
			ret[ i ] = x[ aliasArr[ pos ] ];
		}
	}
	return ret;
} // end FUNCTION vose()


// EXPORTS //

module.exports = vose;
