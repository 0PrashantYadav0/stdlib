'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/utils/is-nonnegative-integer' );
var isProbabilityArray = require( '@stdlib/utils/is-probability-array' );
var isBoolean = require( '@stdlib/utils/is-boolean').isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );


// VALIDATE //

/**
* Validates function options.
*
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.size] - sample size
* @param {ProbabilityArray} [options.probs] - element probabilities
* @param {boolean} [options.replace] - boolean indicating whether to sample with replacement
* @returns {(null|Error)} null or an error
*
* @example
* var opts = {};
* var options = {
*     'size': 10,
*     'replace': false,
*     'probs': [ 0.7, 0.3 ]
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( options.hasOwnProperty( 'size' ) ) {
		opts.size = options.size;
		if ( !isNonNegativeInteger( opts.size ) ) {
			return new TypeError( 'invalid option. `size` option must be a non-negative integer. Option: `' + opts.size + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'probs' ) ) {
		opts.probs = options.probs;
		if ( !isProbabilityArray( opts.probs ) ) {
			return new TypeError( 'invalid option. `probs` option must be a probability array. Option: `' + opts.probs + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'replace' ) ) {
		opts.replace = options.replace;
		if ( !isBoolean( opts.replace ) ) {
			return new TypeError( 'invalid option. `replace` option must be a boolean primitive. Option: `' + opts.replace + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
