'use strict';

/**
* Samples without replacement from a discrete set using custom probabilities.
*
* #### Notes
*
* * After each draw, the probabilities of the remaining observations are renormalized so that they sum to one.
*
* @private
* @param {ArrayLike} x - array-like object to sample from
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @param {ProbabilityArray} probabilities - element probabilities
* @returns {Array} sample
*/
function renormalizing( x, size, rand, probabilities ) {
	var nElems;
	var probs;
	var psum;
	var ret;
	var i;
	var j;
	var k;
	var u;

	nElems = x.length;
	probs = [];
	for ( i = 0; i < nElems; i++ ) {
		probs[ i ] = probabilities[ i ];
	}
	ret = [];
	for ( i = 0; i < size; i++ ) {
		u = rand();
		psum = 0;
		for ( j = 0; j < nElems; j++ ) {
			psum += probs[ j ];
			if ( u < psum ) {
				break;
			}
		}
		for ( k = 0; k < nElems; k++ ) {
			if ( k === j ) {
				continue;
			}
			probs[ k ] = probs[ k ] / ( 1.0 - probs[ j ] );
		}
		probs[ j ] = 0.0;
		ret.push( x[ j ] );
	}
	return ret;
} // end FUNCTION renormalizing()


// EXPORTS //

module.exports = renormalizing;
