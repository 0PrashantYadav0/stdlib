'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// FUNCTIONS //

var slice = Array.prototype.slice;


// MAIN //

/**
* Samples uniformly without replacement using the Fisher-Yates shuffle.
*
* #### References
*
* * Knuth, Donald E. 1997. *The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms*. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.
*
* @private
* @param {ArrayLike} x - array-like object to sample from
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @returns {Array} sample
*/
function fisherYates( x, size, rand ) {
	var nElems;
	var tmp;
	var j;
	var k;
	var u;

	nElems = x.length;
	for ( j = nElems - 1; j > 0; j-- ) {
		u = rand();
		k = floor( j * u );
		tmp = x[ j ];
		x[ j ] = x[ k ];
		x[ k ] = tmp;
	}
	return slice.call( x, 0, size );
} // end FUNCTION fisherYates()


// EXPORTS //

module.exports = fisherYates;
