'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if not provided an options object', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, values[ i ] );
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `probs` option which is not a probability array', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		-1,
		3.14,
		null,
		NaN,
		true,
		undefined,
		{},
		[],
		[ -1, 0.5, 0.5, 1 ],
		[ 1, 2, 3 ],
		[ 0.5, 0.5, null ],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'probs': values[ i ]
		});
		t.equal( err instanceof TypeError, true, 'returns a TypeError when provided '+values[ i ] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `size` option which is not a nonnegative integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		-1,
		3.14,
		null,
		NaN,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'size': values[ i ]
		});
		t.equal( err instanceof TypeError, true, 'returns a TypeError when provided '+values[ i ] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `replace` option which is not a boolean primitive', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		{},
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'replace': values[ i ]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var opts;
	var err;
	var obj;

	opts = {
		'replace': true,
		'size': 10,
		'probs': [ 0.5, 0.5 ]
	};
	obj = {};
	err = validate( obj, opts );
	t.equal( err, null, 'returns null' );
	t.strictEqual( obj.replace, opts.replace, 'sets replace option' );
	t.strictEqual( obj.size, opts.size, 'sets size option' );
	t.deepEqual( obj.probs, opts.probs, 'sets probs option' );
	t.end();
});

tape( 'the function ignores unrecognized options', function test( t ) {
	var opts;
	var err;
	var obj;

	opts = {
		'beep': 'boop',
		'a': 'b'
	};
	obj = {};
	err = validate( obj, opts );
	t.equal( err, null, 'returns null' );
	t.deepEqual( obj, {}, 'does not set any properties' );
	t.end();
});
