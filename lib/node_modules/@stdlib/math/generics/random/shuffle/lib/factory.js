'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isArrayLike = require( '@stdlib/utils/is-array-like' );
var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitive;
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var deepCopy = require( '@stdlib/utils/copy' );
var floor = require( '@stdlib/math/base/special/floor' );
var randu = require( '@stdlib/math/base/random/randu' ).factory;


// FACTORY //

/**
* Returns a function to create a random permutation of elements from an array-like object.
*
* @param {PositiveInteger} [seed] - integer-valued seed
* @returns {Function} shuffle function
*
* @example
* var shuffle = factory( 249 );
* var data = [ 3, 8, 4, 8 ];
* var out = shuffle( data );
* // returns [ 4, 3, 8, 8 ]
*/
function factory( seed ) {
	var rand;

	if ( !arguments.length ) {
		rand = randu();
	}
	else {
		rand = randu({
			'seed': seed
		});
	}

	/**
	* Generate a random permutation of elements in `arr`.
	*
	* @param {ArrayLike} arr - array-like object to shuffle
	* @param {boolean} [copy=true] - boolean indicating whether to return a new array-like object or mutate the existing one
	* @throws {TypeError} first argument must be array-like
	* @throws {TypeError} option `copy` must be a boolean primitive
	* @returns {ArrayLike} the shuffled array-like object
	*
	* @example
	* var data = [ 1, 2, 3 ];
	* var out = shuffle( data );
	* // e.g., returns [ 3, 1, 2 ]
	*
	* @example
	* var data = [ 1, 2, 3 ];
	* var out = shuffle( data, false );
	* var bool = ( data === out );
	* // returns true
	*/
	function shuffle( arr, copy ) {
		var strflg;
		var out;
		var tmp;
		var N;
		var i;
		var j;

		strflg = isString( arr );
		if ( strflg ) {
			arr = arr.split( '' );
			copy = false;
		}
		if ( !isArrayLike( arr ) ) {
			throw new TypeError( 'invalid input argument. First argument must be array-like. Value: `' + arr + '`.' );
		}
		if ( arguments.length > 1 ) {
			if ( !isBoolean( copy ) ) {
				throw new TypeError( 'invalid input argument. `copy` option must be a boolean primitive. Value: `' + copy + '`.' );
			}
		}

		if ( copy === undefined ) {
			copy = true;
		}
		N = arr.length;
		if ( copy ) {
			out = deepCopy( arr );
		} else {
			out = arr;
		}
		// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...
		for ( i = N - 1; i > 0; i-- ) {
			// Generate an integer index on the interval [0,i]:
			j = floor( rand() * (i+1.0) );
			// Swap elements:
			tmp = out[ i ];
			out[ i ] = out[ j ];
			out[ j ] = tmp;
		}

		if ( strflg ) {
			out = arr.join( '' );
		}
		return out;
	} // end FUNCTION shuffle()

	setReadOnly( shuffle, 'SEED', rand.SEED );
	setReadOnly( shuffle, 'PRNG', rand.PRNG );
	return shuffle;
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
