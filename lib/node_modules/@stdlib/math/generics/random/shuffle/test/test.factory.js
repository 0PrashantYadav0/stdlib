'use strict';

// MODULES //

var tape = require( 'tape' );
var constructorName = require( '@stdlib/utils/constructor-name' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory({
				'copy': value
			});
		};
	}
});

tape( 'the function allows setting a default `copy` option for created shuffle functions', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var arr;

	shuffle = factory({
		'copy': 'none',
		'seed': 867
	});

	// Created shuffle function mutates input array by default:
	arr = [ 1, 2, 3, 4, 5, 6 ];
	expected = [ 1, 3, 5, 4, 2, 6 ];
	actual = shuffle( arr );

	t.deepEqual( actual, expected, 'deep equal' );
	t.equal( arr, actual, 'mutates the input array' );

	arr = [ 'a', 'b', 'c' ];
	expected = [ 'b', 'a', 'c' ];
	actual = shuffle( arr );

	t.deepEqual( actual, expected, 'deep equal' );
	t.equal( arr, actual, 'mutates the input array' );

	// Default option can be overridden:
	arr = [ 1, 2, 3, 4 ];
	expected = [ 3, 1, 2, 4 ];
	actual = shuffle( arr, {
		'copy': 'shallow'
	});

	t.deepEqual( actual, expected, 'deep equal' );
	t.notEqual( arr, actual, 'creates a copy' );

	t.end();
});

tape( 'the returned function throws an error if not provided an array-like object', function test( t ) {
	var sample;
	var values;
	var i;

	sample = factory();

	values = [
		5,
		NaN,
		null,
		undefined,
		true,
		{},
		function(){}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			sample( value );
		};
	}
});

tape( 'the returned function throws an error if provided an invalid option', function test( t ) {
	var shuffle;
	var values;
	var i;

	shuffle = factory();

	values = [
		'abc',
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			shuffle( [ 1, 2, 3 ], {
				'copy': value
			});
		};
	}
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var shuffle = factory();
	t.equal( typeof shuffle.SEED, 'number', 'has `SEED` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var shuffle = factory();
	t.equal( typeof shuffle.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'the returned function shuffles the elements of an array (creating a shallow copy)', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var arr;

	shuffle = factory({
		'seed': 867
	});

	arr = [ 1, 2, 3, 4, 5, 6 ]
	expected = [ 1, 3, 5, 4, 2, 6 ];
	actual = shuffle( arr );

	t.deepEqual( actual, expected, 'deep equal' );
	t.notEqual( arr, actual, 'returns a copy' );

	arr = [ { 'a': 1 }, { 'b': new Number( 2 ) }, { 'c': [1,2,3] } ];
	expected = [ { 'b': new Number( 2 ) }, { 'a': 1 }, { 'c': [1,2,3] } ];
	actual = shuffle( arr, {
		'copy': 'shallow'
	});

	t.deepEqual( actual, expected, 'deep equal' );
	t.notEqual( arr, actual, 'returns a copy' );
	t.equal( arr[ 2 ], actual[ 2 ], 'returns a shallow copy' );

	t.end();
});

tape( 'the returned function shuffles the elements of an array (returning deep copy)', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var arr;

	shuffle = factory({
		'seed': 867
	});

	arr = [ { 'a': 1 }, { 'b': new Number( 2 ) }, { 'c': [1,2,3] } ];
	expected = [ { 'b': new Number( 2 ) }, { 'a': 1 }, { 'c': [1,2,3] } ];
	actual = shuffle( arr, {
		'copy': 'deep'
	});

	t.deepEqual( actual, expected, 'deep equal' );
	t.notEqual( arr, actual, 'returns a copy' );
	t.notEqual( arr[ 2 ], actual[ 2 ], 'returns a deep copy' );
	t.end();
});

tape( 'the returned function shuffles the elements of a string', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var str;

	shuffle = factory({
		'seed': 445
	});

	str = 'hello';
	expected = 'helol';
	actual = shuffle( str );

	t.deepEqual( actual, expected, 'deep equal' );
	t.notEqual( str, actual, 'returns a copy' );
	t.end();
});

tape( 'the returned function shuffles the elements of a typed array', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var arr;

	shuffle = factory({
		'seed': 867
	});

	arr = new Int32Array( [ 1, 2, 3, 4, 5, 6 ] );
	expected = new Int32Array( [ 1, 3, 5, 4, 2, 6 ] );
	actual = shuffle( arr );

	t.equal( constructorName( actual ), 'Int32Array', 'returns a typed array' );
	t.deepEqual( actual, expected, 'deep equal' );
	t.notEqual( arr, actual, 'returns a copy' );
	t.end();
});

tape( 'the returned function shuffles the elements of an array (in-place)', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var arr;

	shuffle = factory({
		'seed': 867
	});

	arr = [ 1, 2, 3, 4, 5, 6 ];
	expected = [ 1, 3, 5, 4, 2, 6 ];
	actual = shuffle( arr, {
		'copy': 'none'
	});

	t.deepEqual( actual, expected, 'deep equal' );
	t.equal( arr, actual, 'mutates the input array' );
	t.end();
});

tape( 'the returned function shuffles the elements of a typed array (in-place)', function test( t ) {
	var expected;
	var shuffle;
	var actual;
	var arr;

	shuffle = factory({
		'seed': 867
	});

	arr = new Int32Array( [ 1, 2, 3, 4, 5, 6 ] );
	expected = new Int32Array( [ 1, 3, 5, 4, 2, 6 ] );
	actual = shuffle( arr, {
		'copy': 'none'
	});

	t.equal( constructorName( actual ), 'Int32Array', 'returns a typed array' );
	t.deepEqual( actual, expected, 'deep equal' );
	t.equal( arr, actual, 'mutates the input array' );
	t.end();
});
