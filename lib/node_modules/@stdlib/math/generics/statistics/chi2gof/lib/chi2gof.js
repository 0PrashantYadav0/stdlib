'use strict';

// MODULES //

var isNonNegativeNumberArray = require( '@stdlib/utils/is-nonnegative-number-array' );
var isNonNegativeIntegerArray = require( '@stdlib/utils/is-nonnegative-integer-array' );
var isUnityProbabilityArray = require( '@stdlib/utils/is-unity-probability-array' );
var incrspace = require( '@stdlib/math/generics/utils/incrspace' );
var chisqCDF = require( '@stdlib/math/base/dist/chisquare/cdf' );
var sample = require( '@stdlib/math/generics/random/sample' );
var copy = require( '@stdlib/utils/copy' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var defaults = require( './defaults.json' );
var tabulate = require( './tabulate.js' );
var prettyPrint = require( './print.js' );
var sum = require( './sum.js' );
var div = require( './div.js' );
var mult = require( './mult.js' );
var testStatistic = require( './statistic.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Performs a chi-square goodness-of-fit test.
*
* @param {NonNegativeIntegerArray} x - observation frequencies
* @param {(NonNegativeNumericArray|ProbabilityArray)} p - probability array
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment
* @param {boolean} [options.rescale=false] - boolean indicating if `p` should be rescaled to sum to `1`
* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation
* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations
* @throws {TypeError} first argument must be an array of nonnegative integers
* @throws {TypeError} second argument must be an array of nonnegative numbers (when rescale = true)
* @throws {TypeError} second argument must be an array of probabilities summing to one (when rescale = false)
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `x` and `p` must have the same length
* @throws {Error} at least one element of `x` must be positive
* @throws {RangeError} alpha option must be a number in the interval `[0,1]`
* @returns {Object} test results
*
* @example
* var x = [ 89, 37, 30, 28, 2 ];
* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];
*
* var out = chi2gof( x, p );
* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }
*/
function chi2gof( x, p, options ) {
	var expected;
	var sfreq;
	var sstat;
	var draw;
	var opts;
	var psum;
	var pval;
	var stat;
	var err;
	var len;
	var seq;
	var geq;
	var out;
	var df;
	var i;
	var n;

	if ( !isNonNegativeIntegerArray( x ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an array of nonnegative integers. Value: `' + x + '`.' );
	}
	opts = copy( defaults );
	if ( arguments.length > 2 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.rescale ) {
		if ( !isNonNegativeNumberArray( p ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be an array of nonnegative numbers (when `rescaling = true`). Value: `' + p + '`.' );
		}
	} else {
		if ( !isUnityProbabilityArray( p ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be an array of probabilities summing to one (when `rescaling = false`). Value: `' + p + '`.' );
		}
	}
	len = x.length;
	if ( len !== p.length ) {
		throw new Error( 'invalid input arguments. `x` and `p` must have the same length.' );
	}
	n = sum( x );
	if ( n === 0.0 ) {
		throw new Error( 'invalid input argument. At least one element of `x` must be positive. Value: `' + x + '`.' );
	}
	psum = sum( p );
	if ( opts.rescale ) {
		p = div( p, p, psum );
	}
	expected = mult( new Array( len ), p, n );
	stat = testStatistic( x, expected );

	if ( opts.simulate ) {
		seq = incrspace( 0, len, 1 );
		geq = 1;
		for ( i = 0; i < opts.iterations; i++ ) {
			// TODO: use `sample.factory` method once sample pkg is updated.
			draw = sample( seq, {
				'size': n,
				'probs': p
			});
			sfreq = tabulate( draw );

			// Enlarge `sfreq` in case `expected` is longer...
			while ( sfreq.length < expected.length ) {
				sfreq.push( 0 );
			}
			sstat = testStatistic( sfreq, expected );
			if ( sstat >= stat ) {
				geq += 1;
			}
		}
		df = null;
		pval = geq / (opts.iterations + 1);
	} else {
		df = len - 1;
		if ( opts.ddof ) {
			df -= opts.ddof;
		}
		pval = 1.0 - chisqCDF( stat, df );
	}
	out = {};
	setReadOnly( out, 'rejected', pval <= opts.alpha );
	setReadOnly( out, 'alpha', opts.alpha );
	setReadOnly( out, 'pValue', pval );
	setReadOnly( out, 'df', df );
	setReadOnly( out, 'statistic', stat );
	setReadOnly( out, 'method', 'Chi-square goodness-of-fit test' );
	setReadOnly( out, 'print', prettyPrint( out ) );
	return out;
} // end FUNCTION chi2gof()


// EXPORTS //

module.exports = chi2gof;
