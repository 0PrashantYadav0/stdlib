'use strict';

// MODULES //

var isNonNegativeNumberArray = require( '@stdlib/utils/is-nonnegative-number-array' );
var isNonNegativeIntegerArray = require( '@stdlib/utils/is-nonnegative-integer-array' );
var isProbabilityArray = require( '@stdlib/utils/is-probability-array' );
var chisqCDF = require( '@stdlib/math/base/dist/chisquare/cdf' );
var pow = require( '@stdlib/math/base/special/pow' );
var print = require( './print.js' );
var sum = require( './sum.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Performs a chi-square goodness-of-fit test.
*
* @type {NonNegativeIntegerArray} x - array of values
* @type {(NonNegativeNumericArray|ProbabilityArray)} p - proability array
* @param {Object} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {Integer} [options.ddof=0] - degrees of freedom adjustment
* @param {boolean} [options.rescale=false] - boolean indicating if p should be rescaled to sum to 1
* @throws {TypeError} options has to be simple object
* @throws {TypeError} alpha option has to be a number primitive
* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`
* @throws {TypeError} rescale option has to be a boolean primitive
* @returns {Object} test result object
*
* @example
* var x = [ 89, 37, 30, 28, 2 ];
* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];
*
* var out = chi2gof( x, p );
* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }
*/
function chi2gof( x, p, options ) {
	var expected;
	var alpha;
	var opts;
	var psum;
	var pval;
	var stat;
	var err;
	var len;
	var df;
	var i;
	var n;

	if ( !isNonNegativeIntegerArray( x ) ) {
		throw new TypeError( 'invalid input argument. First argument `x` must be an array of nonnegative integers. Value: `' + x + '`.' );
	}

	opts = {};
	if ( arguments.length > 2 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}

	if ( opts.rescale ) {
		if ( !isNonNegativeNumberArray( p ) ) {
			throw new TypeError( 'invalid input argument. Second argument `p` must be an array of nonnegative numbers (when `rescaling = true`). Value: `' + p + '`.' );
		}
	}
	else {
		if ( !isProbabilityArray( p ) ) {
			throw new TypeError( 'invalid input argument. Second argument `p` must be an array of probabilities summing to one (when `rescaling = false`). Value: `' + p + '`.' );
		}
	}

	len = x.length;
	if ( len !== p.length ) {
		throw new Error( 'invalid input arguments. `x` and `p` must have the same length.' );
	}
	n = sum( x );
	if ( n === 0.0 ) {
		throw new Error( 'invalid input argument. At least one element of `x` must be positive. Value: `' + x + '`.' );
	}

	psum = sum( p );
	if ( opts.rescale ) {
		for ( i = 0; i < len; i++ ) {
			p[ i ] = p[ i ] / psum;
		}
	}
	alpha = opts.alpha !== void 0 ? opts.alpha : 0.05;
	if ( alpha < 0.0 || alpha > 1.0 ) {
		throw new RangeError( 'invalid input argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );
	}

	expected = new Array( len );
	stat = 0.0;
	for ( i = 0; i < len; i++ ) {
		expected[ i ] = n * p[ i ];
		stat += pow( x[ i ] - expected[ i ], 2 ) / expected[ i ];
	}
	df = opts.ddof ? ( len - 1 - opts.ddof ) : ( len - 1 );
	pval = 1.0 - chisqCDF( stat, df );

	return {
		'rejected': pval <= alpha,
		'alpha': alpha,
		'pValue': pval,
		'df': df,
		'statistic': stat,
		'method': 'Chi-square goodness-of-fit test',
		'print': print
	};
} // end FUNCTION chi2gof()


// EXPORTS //

module.exports = chi2gof;
