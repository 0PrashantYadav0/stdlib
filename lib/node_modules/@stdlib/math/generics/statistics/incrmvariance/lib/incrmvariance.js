'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;


// INCREMENTAL MOVING SAMPLE VARIANCE //

/**
* Returns an accumulator function which incrementally computes a moving unbiased sample variance.
*
* @param {PositiveInteger} W - window size
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmvariance( 3 );
*/
function incrmvariance( W ) {
	var delta;
	var buf;
	var tmp;
	var M2;
	var mu;
	var d1;
	var d2;
	var N;
	var n;
	var i;
	if ( !isPositiveInteger( W ) ) {
		throw new TypeError( 'invalid input argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	n = W - 1;
	M2 = 0.0;
	mu = 0.0;
	i = -1;
	N = 0;

	/**
	* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.
	*
	* @param {number} [x] - input value
	* @returns {(number|null)} unbiased sample variance or null
	*
	* @example
	* var s2 = accumulator();
	* // returns null
	*
	* s2 = accumulator( 2.0 );
	* // returns 0.0
	*
	* s2 = accumulator( -5.0 );
	* // returns 24.5
	*
	* s2 = accumulator( 3.0 );
	* // returns 19.0
	*
	* s2 = accumulator( 5.0 );
	* // returns 28.0
	*
	* s2 = accumulator();
	* // returns 28.0
	*/
	return function accumulator( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			if ( N === 1 ) {
				return 0.0;
			}
			if ( N < W ) {
				return M2 / (N-1);
			}
			return M2 / n;
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Determine if we should update the initial window...
		if ( N < W ) {
			buf[ i ] = x;
			N += 1;
			delta = x - mu;
			mu += delta / N;
			M2 += delta * (x - mu);
			if ( N === 1 ) {
				return 0.0;
			}
			return M2 / (N-1);
		}
		// N = W = 1
		if ( N === 1 ) {
			return 0.0;
		}
		// Update the existing window...
		tmp = buf[ i ];
		buf[ i ] = x;
		delta = x - tmp;
		d1 = tmp - mu;
		mu += delta / W;
		d2 = x - mu;
		M2 += delta * (d1 + d2);
		return M2 / n;
	};
} // end FUNCTION incrmvariance()


// EXPORTS //

module.exports = incrmvariance;
