'use strict';

// MODULES //

var tape = require( 'tape' );
var normal = require( '@stdlib/math/base/random/normal' ).factory;
var abs = require( '@stdlib/math/base/special/abs' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var ttest = require( './../lib' );


// FUNCTIONS //

function almostEqual( a, b, tol ) {
	var delta = abs( a - b );
	tol = tol * abs( b );
	return ( delta <= tol );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof ttest, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if the `x` argument is not a numeric array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		[ 1, 2, 'not a numeric array, hehe' ],
		true,
		undefined,
		null,
		NaN,
		function(){},
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			ttest( value );
		};
	}
});

tape( 'the function throws an error if the `x` array has less than two elements', function test( t ) {
	var values;
	var i;

	values = [
		[],
		[ 1 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			ttest( value );
		};
	}
});

tape( 'the function throws an error if the `y` argument is not a numeric array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		[ 1, 2, 'not a numeric array, hehe' ],
		true,
		undefined,
		null,
		NaN,
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			ttest( [1,2,3], value );
		};
	}
});

tape( 'the function throws an error if the `x` and `y` arguments are arrays of different length', function test( t ) {
	var values;
	var i;

	values = [
		[ [ 1, 2 ], [ 1, 2, 3 ] ],
		[ [ 1, 2, 3 ], [ 1, 2 ] ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			ttest( value[0], value[1] );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		true,
		undefined,
		null,
		NaN,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}

	t.throws(
		badValue( 'not one of less, greater or two-sided' ),
		Error,
		'throws an error when provided not less, greater or two-sided'
	);
	t.end();

	function badValue( value ) {
		return function() {
			ttest( [ 0.2, 0.5, 0.75 ], {
				'alternative': value
			});
		};
	}
});

tape( 'the function throws an error if the `alpha` option is a numeric value outside `[0,1]`', function test( t ) {
	var values;
	var i;

	values = [
		1.1,
		-0.1
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			ttest( [ 0.2, 0.5, 0.75 ], {
				'alpha': value
			});
		};
	}
});

tape( 'the function correctly computes a one-sample two-sided t-test', function test( t ) {
	var rnorm;
	var out;
	var i;
	var x;

	rnorm = normal({
		'seed': 338
	});

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rnorm( 0.0, 1.0 );
	}

	out = ttest( x );

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.7144684681793607, 3.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, 0.3669110253376274, 2.0 * EPS ), 'returns correct test statistic' );

	t.ok( almostEqual( out.ci[0], -0.1779172177107040, 2.0 * EPS ), 'returns correct lower bound of CI' );
	t.ok( almostEqual( out.ci[1], 0.2586437985213778, 2.0 * EPS ), 'returns correct upper bound of CI' );

	t.end();
});

tape( 'the function correctly computes a one-sample one-sided t-test', function test( t ) {
	var rnorm;
	var out;
	var i;
	var x;

	rnorm = normal({
		'seed': 338
	});

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rnorm( 0.0, 1.0 );
	}

	// Alternative: mu > 0.0
	out = ttest( x, {
		'alternative': 'greater'
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue,  0.3572342340896804, 4.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, 0.3669110253376274, 2.0 * EPS ), 'returns correct test statistic' );

	t.ok( almostEqual( out.ci[0], -0.1422936639750796, 2.0 * EPS ), 'returns correct lower bound of CI' );
	t.equal( out.ci[1], PINF, 'returns -Infinity as upper bound of CI' );

	// Alternative: mu < 0.0
	out = ttest( x, {
		'alternative': 'less'
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.6427657659103196, 3.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, 0.3669110253376274, 2.0 * EPS ), 'returns correct test statistic' );

	t.equal( out.ci[0], NINF, 'returns -Infinity as lower bound of CI' );
	t.ok( almostEqual( out.ci[1], 0.2230202447857534, 2.0 * EPS ), 'returns correct upper bound of CI' );

	t.end();
});

tape( 'the function correctly computes a one-sample two-sided t-test with a custom significance level', function test( t ) {
	var rnorm;
	var out;
	var i;
	var x;

	rnorm = normal({
		'seed': 383
	});

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rnorm( 0.0, 1.0 );
	}

	out = ttest( x, {
		'alpha': 0.1
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.9554819320365168, 2.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, -0.05596569277030142, 2.0 * EPS ), 'returns correct test statistic' );

	t.ok( almostEqual( out.ci[0], -0.1662199395096748, 2.0 * EPS ), 'returns correct lower bound of CI' );
	t.ok( almostEqual( out.ci[1], 0.1553799861824056, 2.0 * EPS ), 'returns correct upper bound of CI' );

	t.end();
});

tape( 'the function correctly computes a one-sample one-sided t-test with a custom significance level', function test( t ) {
	var rnorm;
	var out;
	var i;
	var x;

	rnorm = normal({
		'seed': 338
	});

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rnorm( 0.0, 1.0 );
	}

	// Alternative: mu > 0.0
	out = ttest( x, {
		'alternative': 'greater',
		'alpha': 0.1
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.35723423408968, 2.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, 0.366911025337627372, 2.0 * EPS ), 'returns correct test statistic' );

	t.ok( almostEqual( out.ci[0], -0.101565289981930096, 4e-15 ), 'returns correct lower bound of CI' );
	t.equal( out.ci[1], PINF, 'returns -Infinity as upper bound of CI' );

	// Alternative: mu < 0.0
	out = ttest( x, {
		'alternative': 'less',
		'alpha': 0.01
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.64276576591032, 2.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, 0.366911025337627372, 2.0 * EPS ), 'returns correct test statistic' );

	t.equal( out.ci[0], NINF, 'returns -Infinity as lower bound of CI' );
	t.ok( almostEqual( out.ci[1], 0.300489769312975274, 2.0 * EPS ), 'returns correct upper bound of CI' );

	t.end();
});

tape( 'the function correctly computes a paired t-test', function test( t ) {
	var rnorm;
	var out;
	var i;
	var x;
	var y;

	rnorm = normal( 1.0, 2.0, {
		'seed': 7867
	});

	x = new Array( 100 )	;
	y = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rnorm();
		y[ i ] = rnorm();
	}
	out = ttest( x, y );

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.3476115496274469, 4.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, 0.943717289454230612, 3.0 * EPS ), 'returns correct test statistic' );

	t.ok( almostEqual( out.ci[0], -0.313138299912085361, 4.0 * EPS ), 'returns correct lower bound of CI' );
	t.ok( almostEqual( out.ci[1], 0.881161603277265115, 2.0 * EPS ), 'returns correct upper bound of CI' );

	t.end();
});

tape( 'the function correctly computes a paired one-sided t-test', function test( t ) {
	var rnorm;
	var out;
	var i;
	var x;
	var y;

	rnorm = normal({
		'seed': 7867
	});

	x = new Array( 100 )	;
	y = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rnorm( 1.0, 2.0 );
		y[ i ] = rnorm( 2.0, 2.0 );
	}
	out = ttest( x, y, {
		'alternative': 'less'
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.00963633102035277, 8.0 * EPS ), 'returns correct p-value' );
	t.ok( almostEqual( out.statistic, -2.37909458767581317, 2.0 * EPS ), 'returns correct test statistic' );

	t.equal( out.ci[0], NINF, 'returns -Infinity as lower bound of CI' );
	t.ok( almostEqual( out.ci[1], -0.216293747053647872, 2.0 * EPS ), 'returns correct upper bound of CI' );

	t.end();
});

tape( 'the function returns an object with a .print() method for generating a formatted output of results of one-sample t-test', function test( t ) {
	var table;
	var out;
	var x;

	x = [ 0, 1, 2, 3, 4 ];
	out = ttest( x );
	table = out.print();
	/*
		One-sample t-test

		Alternative hypothesis: True mean is not equal to 0

			pValue: 0.0474
			statistic: 2.8284
			df: 4
			95% confidence interval: [0.0368,3.9632]

		Test Decision: Reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a pretty-printed table' );

	out = ttest( x, {
		'alternative': 'less'
	});
	table = out.print();
	/*
		One-sample t-test

		Alternative hypothesis: True mean is less than 0

			pValue: 0.9763
			statistic: 2.8284
			df: 4
			95% confidence interval: [-Infinity,3.5074]

		Test Decision: Fail to reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a pretty-printed table' );

	out = ttest( x, {
		'alternative': 'greater',
		'mu': 2
	});
	table = out.print();
	/*
		One-sample t-test

		Alternative hypothesis: True mean is greater than 2

			pValue: 0.5
			statistic: 0
			df: 4
			95% confidence interval: [0.4926,Infinity]

		Test Decision: Fail to reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a pretty-printed table' );
	t.end();
});

tape( 'the function returns an object with a .print() method for generating a formatted output of results of paired t-test', function test( t ) {
	var table;
	var out;
	var x;
	var y;

	x = [ 0, 1, 2, 3, 4 ];
	y = [ 1, 3, 4, 1, 5 ];
	out = ttest( x, y );
	table = out.print();
	/*
		Paired t-test

		Alternative hypothesis: True difference in means is not equal to 0

			pValue: 0.3375
			statistic: -1.0887
			df: 4
			95% confidence interval: [-2.8403,1.2403]

		Test Decision: Fail to reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a pretty-printed table' );
	t.end();
});

tape( 'the function returns an object with a .print() method that accepts a `numdigits` option to control the number of decimal degits displayed', function test( t ) {
	var table;
	var out;
	var x;

	x = [ 0, 1, 2, 3, 4 ];
	out = ttest( x );
	table = out.print({
		'numdigits': 6
	});
	/*
		One-sample t-test

		Alternative hypothesis: True mean is not equal to 0

			pValue: 0.047421
			statistic: 2.828427
			df: 4
			95% confidence interval: [0.036757,3.963243]

		Test Decision: Reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a pretty-printed table' );
	t.end();
});

tape( 'the function returns an object with a .print() method that accepts an `options` object', function test( t ) {
	var table;
	var out;
	var x;

	x = [ 0, 1, 2, 3, 4 ];
	out = ttest( x );
	table = out.print({});

	t.equal( typeof table, 'string', 'returns a pretty-printed table' );
	t.end();
});


tape( 'the function returns an object with a .print() method that throws an error if `options` is not a simple object', function test( t ) {
	var values;
	var out;
	var i;
	var x;

	x = [ 0, 1, 2, 3, 4 ];
	out = ttest( x );

	values = [
		'abc',
		4,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			out.print( value );
		};
	}
});

tape( 'the function returns an object with a .print() method that throws an error if the `numdigits` option is not a positive integer', function test( t ) {
	var values;
	var out;
	var i;
	var x;

	x = [ 0, 1, 2, 3, 4 ];
	out = ttest( x );

	values = [
		'abc',
		2.4,
		0.0,
		-1.0,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			out.print({
				'numdigits': value
			});
		};
	}
});
