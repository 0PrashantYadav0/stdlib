'use strict';

// MODULES //

var tape = require( 'tape' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var incrstdev = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof incrstdev, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an accumulator function', function test( t ) {
	t.equal( typeof incrstdev(), 'function', 'returns a function' );
	t.end();
});

tape( 'the accumulator function incrementally computes a corrected sample standard deviation', function test( t ) {
	var expected;
	var actual;
	var data;
	var acc;
	var i;

	data = [ 2.0, 3.0, 2.0, 4.0, 3.0, 4.0 ];

	// Check against Julia:
	expected = [
		0.0,
		sqrt( 0.5 ),
		sqrt( 0.33333333333333337 ),
		sqrt( 0.9166666666666666 ),
		sqrt( 0.7 ),
		sqrt( 0.8 )
	];

	acc = incrstdev();

	actual = new Array( data.length );
	for ( i = 0; i < data.length; i++ ) {
		actual[ i ] = acc( data[ i ] );
	}
	t.deepEqual( actual, expected, 'returns expected incremental results' );
	t.end();
});

tape( 'if not provided an input value, the accumulator function returns the current corrected sample sample deviation', function test( t ) {
	var data;
	var acc;
	var i;

	data = [ 2.0, 3.0, 1.0 ];
	acc = incrstdev();
	for ( i = 0; i < data.length; i++ ) {
		acc( data[ i ] );
	}
	t.equal( acc(), 1.0, 'returns the current accumulated corrected sample standard deviation' );
	t.end();
});

tape( 'the corrected sample standard deviation is `0` until at least 2 datums have been provided', function test( t ) {
	var acc;
	var s;

	acc = incrstdev();

	s = acc();
	t.equal( s, 0.0, 'returns 0' );

	s = acc( 2.0 );
	t.equal( s, 0.0, 'returns 0' );

	s = acc( 3.0 );
	t.notEqual( s, 0.0, 'does not return 0' );

	t.end();
});
