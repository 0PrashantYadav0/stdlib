'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// INCRSTDEV //

/**
* Returns an accumulator function which incrementally computes a sample standard deviation.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrstdev();
*/
function incrstdev() {
	var mu = 0.0;
	var M2 = 0.0;
	var N = 0;
	var delta;

	/**
	* If provided a value, the accumulator function returns an updated sample standard deviation. If not provided a value, the accumulator function returns the current sample standard deviation.
	*
	* #### Method
	*
	* * This implementation uses [Welford's method]{@link https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance} for efficient computation.
	*
	*
	* @param {number} [x] - new value
	* @returns {number} sample standard deviation
	*
	* @example
	* var s = accumulator();
	* // returns 0.0
	*
	* s = accumulator( 2.0 );
	* // returns 0.0
	*
	* s = accumulator( -5.0 );
	* // returns ~4.95
	*
	* s = accumulator();
	* // returns ~4.95
	*/
	return function accumulator( x ) {
		if ( arguments.length === 0 ) {
			if ( N < 2 ) {
				return 0.0;
			}
			return sqrt( M2 / (N-1) );
		}
		N += 1;
		delta = x - mu;
		mu += delta / N;
		M2 += delta * ( x - mu );
		if ( N < 2 ) {
			return 0.0;
		}
		return sqrt( M2 / (N-1) );
	};
} // end FUNCTION incrstdev()


// EXPORTS //

module.exports = incrstdev;
