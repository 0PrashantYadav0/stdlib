'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;
var incrmsum = require( '@stdlib/math/generics/statistics/incrmsum' );
var incrmmean = require( '@stdlib/math/generics/statistics/incrmmean' );
var incrmvariance = require( '@stdlib/math/generics/statistics/incrmvariance' );
var incrmstdev = require( '@stdlib/math/generics/statistics/incrmstdev' );


// INCREMENTAL MOVING SUMMARY //

/**
* Returns an accumulator function which incrementally computes a moving statistical summary.
*
* @param {PositiveInteger} W - window size
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmsummary( 3 );
*/
function incrmsummary( W ) {
	var mvariance;
	var summary;
	var mstdev;
	var mmean;
	var msum;
	if ( !isPositiveInteger( W ) ) {
		throw new TypeError( 'invalid input argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	mvariance = incrmvariance( W );
	mstdev = incrmstdev( W );
	mmean = incrmmean( W );
	msum = incrmsum( W );
	summary = {};

	/**
	* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.
	*
	* @param {number} [x] - new value
	* @returns {Object} summary
	*
	* @example
	* var summary = accumulator();
	* // returns {}
	*
	* summary = accumulator( 2.0 );
	* // returns {...}
	*
	* summary = accumulator( -5.0 );
	* // returns {...}
	*
	* summary = accumulator();
	* // returns {...}
	*/
	return function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return summary;
		}
		summary.window = W;
		summary.sum = msum( x );
		summary.mean = mmean( x );
		summary.variance = mvariance( x );
		summary.stdev = mstdev( x );
		return summary;
	};
} // end FUNCTION incrmsummary()


// EXPORTS //

module.exports = incrmsummary;
