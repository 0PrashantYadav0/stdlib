'use strict';

// MODULES //

var tape = require( 'tape' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var incrkurtosis = require( './../lib' );


// FUNCTIONS //

function almostEqual( a, b, tol ) {
	var delta = abs( a - b );
	tol = tol * Math.max( 1.0, abs( a ), abs( b ) );
	return ( delta <= tol );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof incrkurtosis, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an accumulator function', function test( t ) {
	t.equal( typeof incrkurtosis(), 'function', 'returns a function' );
	t.end();
});

tape( 'the accumulator function incrementally computes a corrected sample excess kurtosis', function test( t ) {
	var expected;
	var actual;
	var bool;
	var data;
	var tol;
	var acc;
	var i;

	tol = 1.5 * EPS;
	data = [ 2.0, 2.0, -4.0, -4.0, 1.5, -10 ];

	// Check against the kurtosis function of the `e1071` R package:
	expected = [
		null,
		null,
		null,
		-6,
		-3.309339678762642,
		-0.1906596382525679
	];

	acc = incrkurtosis();

	for ( i = 0; i < data.length; i++ ) {
		actual = acc( data[ i ] );
		bool = almostEqual( expected[ i ], actual, tol );
		t.ok( bool, 'returns expected incremental result' );
	}

	t.end();
});

tape( 'if not provided an input value, the accumulator function returns the current corrected sample excess kurtosis', function test( t ) {
	var data;
	var acc;
	var i;

	data = [ -10, -10, 10, 10 ];
	acc = incrkurtosis();
	for ( i = 0; i < data.length; i++ ) {
		acc( data[ i ] );
	}

	t.equal( acc(), -6, 'returns the current accumulated corrected sample excess kurtosis' );
	t.end();
});

tape( 'the corrected sample excess kurtosis is `null` until at least 4 datums have been provided', function test( t ) {
	var acc;
	var s;

	acc = incrkurtosis();

	s = acc();
	t.equal( s, null, 'returns null' );

	s = acc( 2.0 );
	t.equal( s, null, 'returns null' );

	s = acc( 8.0 );
	t.equal( s, null, 'returns null' );

	s = acc( -4.0 );
	t.equal( s, null, 'returns null' );

	s = acc( 3.0 );
	t.notEqual( s, null, 'does not return null' );

	t.end();
});
