'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Returns an accumulator function which incrementally computes a range.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrrange();
*/
function incrrange() {
	var range = 0.0;
	var max = NINF;
	var min = PINF;

	/**
	* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.
	*
	* @param {number} [x] - new value
	* @returns {number} range
	*
	* @example
	* var range = accumulator();
	* // returns 0.0
	*
	* range = accumulator( 3.14 );
	* // returns 0.0
	*
	* range = accumulator( -5.0 );
	* // returns 8.14
	*
	* range = accumulator( 10.1 );
	* // returns 15.1
	*
	* range = accumulator();
	* // returns 15.1
	*/
	return function accumulator( x ) {
		if ( arguments.length === 0 ) {
			return range;
		}
		if ( x > max ) {
			max = x;
		}
		if ( x < min ) {
			min = x;
		}
		range = max - min;
		return range;
	};
} // end FUNCTION incrrange()


// EXPORTS //

module.exports = incrrange;
