'use strict';

// MODULES //

var tape = require( 'tape' );
var uniform = require( '@stdlib/math/base/random/uniform' ).factory;
var uniformCDF = require( '@stdlib/math/base/dist/uniform/cdf' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var kstest = require( './../lib' );


// FUNCTIONS //

function almostEqual( a, b, tol ) {
	var delta = abs( a - b );
	tol = tol * abs( b );
	return ( delta <= tol );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof kstest, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if the `x` argument is not a numeric array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		[ 1, 2, '5' ],
		true,
		undefined,
		null,
		NaN,
		function(){},
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			kstest( value, 'normal', 0.0, 1.0 );
		};
	}
});

tape( 'the function throws an error if the `y` argument is not a string or function', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			kstest( [ 0.25, 0.5, 0.75 ], value, 0.0, 1.0 );
		};
	}
});

tape( 'the function throws an error if the supplied distribution parameter(s) are not numeric values', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			kstest( [0.2,0.8,0.7], 'exponential', value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		true,
		undefined,
		null,
		NaN,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}

	t.throws(
		badValue( 'not one of less, greater or two-sided' ),
		Error,
		'throws an error when provided not less, greater or two-sided'
	);
	t.end();

	function badValue( value ) {
		return function() {
			kstest( [ 0.2, 0.5, 0.75 ], 'uniform', 0.0, 1.0, {
				'alternative': value
			});
		};
	}
});

tape( 'the function throws an error if the `alpha` option is a numeric value outside `[0,1]`', function test( t ) {
	var values;
	var i;

	values = [
		1.1,
		-0.1
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			kstest( [ 0.2, 0.5, 0.75 ], 'uniform', 0.0, 1.0, {
				'alpha': value
			});
		};
	}
});

tape( 'the function correctly computes the two-sided Kolmogorov-Smirnov test', function test( t ) {
	var expected;
	var delta;
	var rand;
	var out;
	var tol;
	var x;
	var i;

	rand = uniform({
		'seed': 338
	});

	// FIXME: we should be testing against fixtures here, not repeatedly generating data which may change due to changes in the underlying PRNG implementation.

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rand( 0.0, 1.0 );
	}
	// Choosing the CDF via a string...
	out = kstest( x, 'uniform', 0.0, 1.0 );

	// Tested against R:
	expected = 0.3741044096613068;
	delta = abs( out.pValue - expected );
	tol = EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. p-value: '+out.pValue+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	expected = 0.08974063367558702;
	delta = abs( out.statistic - expected );
	tol = EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. test statistic: '+out.statistic+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	// Directly passing the CDF...
	out = kstest( x, uniformCDF, 0.0, 1.0 );

	// Tested against R:
	expected = 0.3741044096613068;
	delta = abs( out.pValue - expected );
	tol = EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. p-value: '+out.pValue+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	expected = 0.08974063367558702;
	delta = abs( out.statistic - expected );
	tol = EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. test statistic: '+out.statistic+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	t.end();
});

tape( 'the function correctly computes the two-sided Kolmogorov-Smirnov test for an already sorted array', function test( t ) {
	var out;
	var x;

	x = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.8, 0.9 ];
	out = kstest( x, 'uniform', 0.0, 1.0, {
		'sorted': true
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.99963712, EPS ), 'returns correct value' );
	t.ok( almostEqual( out.statistic, 0.10000000000000009, EPS ), 'returns correct value' );

	t.end();
});

tape( 'the function correctly computes the two-sided Kolmogorov-Smirnov test for an already sorted typed array', function test( t ) {
	var out;
	var x;

	x = new Float64Array( [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.8, 0.9 ] );
	out = kstest( x, 'uniform', 0.0, 1.0, {
		'sorted': true
	});

	// Tested against R:
	t.ok( almostEqual( out.pValue, 0.99963712, EPS ), 'returns correct value' );
	t.ok( almostEqual( out.statistic, 0.10000000000000009, EPS ), 'returns correct value' );

	t.end();
});

tape( 'the function correctly computes a one-sided Kolmogorov-Smirnov test', function test( t ) {
	var expected;
	var delta;
	var rand;
	var out;
	var tol;
	var x;
	var i;

	rand = uniform({
		'seed': 338
	});

	// FIXME: we should be testing against fixtures here, not repeatedly generating data which may change due to changes in the underlying PRNG implementation.

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = rand( 0.0, 1.0 );
	}
	out = kstest( x, 'uniform', 0.0, 1.0, {
		'alternative': 'less'
	});

	// Tested against R:
	expected = 0.7829911238241269;
	delta = abs( out.pValue - expected );
	tol = 2.0 * EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. p-value: '+out.pValue+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	expected = 0.03338006420375783;
	delta = abs( out.statistic - expected );
	tol = EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. test statistic: '+out.statistic+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	out = kstest( x, 'uniform', 0.0, 1.0, {
		'alternative': 'greater'
	});

	// Tested against R:
	expected = 0.188269080012118;
	delta = abs( out.pValue - expected );
	tol = 4.0 * EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. p-value: '+out.pValue+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	expected = 0.08974063367558702;
	delta = abs( out.statistic - expected );
	tol = EPS * abs( expected );
	t.ok( delta <= tol, 'within tolerance. test statistic: '+out.statistic+'. E: '+expected+' Δ: '+delta+'. tol: '+tol );

	t.end();
});

tape( 'the .print() method allows printing a formatted output table', function test( t ) {
	var actual;
	var table;

	actual = kstest( [ 0.25, 0.5, 0.75 ], 'uniform', 0.0, 1.0 );
	table = actual.print();
	/*
		Kolmogorov-Smirnov goodness-of-fit test

		Null hypothesis: the CDF of `x` is equal to the reference CDF

			pValue: 0.9722
			statistic: 0.25

		Test Decision: Fail to reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a string' );
	t.end();
});

tape( 'the .print() method allows printing a formatted output table for a one-sided Kolmogorov-Smirnov test', function test( t ) {
	var table;
	var runif;
	var out;
	var i;
	var x;

	runif = uniform( 0.0, 1.0, {
		'seed': 338
	});

	x = new Array( 100 );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = runif();
	}
	out = kstest( x, 'uniform', 0.0, 1.0, {
		'alternative': 'less'
	});
	table = out.print();
	/*
		Kolmogorov-Smirnov goodness-of-fit test

		Null hypothesis: the CDF of `x` is greater than or equal to the reference CDF

			pValue: 0.783
			statistic: 0.0334

		Test Decision: Fail to reject null in favor of alternative at 5% significance level
	*/

	out = kstest( x, 'uniform', 1.0, 2.0, {
		'alternative': 'greater'
	});
	table = out.print();
	/*
		Kolmogorov-Smirnov goodness-of-fit test

		Null hypothesis: the CDF of `x` is less than or equal to the reference CDF

			pValue: 0
			statistic: 1

		Test Decision: Reject null in favor of alternative at 5% significance level
	*/

	t.equal( typeof table, 'string', 'returns a string' );
	t.end();
});

tape( 'the function returns an object with a .print() method that accepts a `numdigits` option to control the number of decimal degits displayed', function test( t ) {
	var table;
	var out;

	out = kstest( [ 0.25, 0.5, 0.75 ], 'uniform', 0.0, 1.0 );
	table = out.print({
		'numdigits': 6
	});
	/*
		Kolmogorov-Smirnov goodness-of-fit test

		Null hypothesis: the CDF of `x` is equal to the reference CDF

			pValue: 0.972222
			statistic: 0.25

		Test Decision: Fail to reject null in favor of alternative at 5% significance level
	*/
	t.equal( typeof table, 'string', 'returns a pretty-printed table' );
	t.end();
});

tape( 'the function returns an object with a .print() method that accepts an `options` object', function test( t ) {
	var table;
	var out;

	out = kstest( [ 0.25, 0.5, 0.75 ], 'uniform', 0.0, 1.0 );
	table = out.print({});

	t.equal( typeof table, 'string', 'returns a pretty-printed table' );
	t.end();
});


tape( 'the function returns an object with a .print() method that throws an error if `options` is not a simple object', function test( t ) {
	var values;
	var out;
	var i;

	out = kstest( [ 0.25, 0.5, 0.75 ], 'uniform', 0.0, 1.0 );

	values = [
		'abc',
		4,
		null,
		true,
		undefined,
		NaN,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			out.print( value );
		};
	}
});

tape( 'the function returns an object with a .print() method that throws an error if the `numdigits` option is not a positive integer', function test( t ) {
	var values;
	var out;
	var i;

	out = kstest( [ 0.25, 0.5, 0.75 ], 'uniform', 0.0, 1.0 );

	values = [
		'abc',
		2.4,
		0.0,
		-1.0,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			out.print({
				'numdigits': value
			});
		};
	}
});
