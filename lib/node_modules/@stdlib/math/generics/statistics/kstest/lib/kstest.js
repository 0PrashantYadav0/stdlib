'use strict';

// MODULES //

var isTypedArrayLike = require( '@stdlib/utils/is-typed-array-like' );
var isNumber = require( '@stdlib/utils/is-number' );
var isNumberArray = isNumber.isNumberArray;
var isFunction = require( '@stdlib/utils/is-function' );
var incrspace = require( '@stdlib/math/generics/utils/incrspace' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var roundn = require( '@stdlib/math/base/special/roundn' );
var isnan = require( '@stdlib/utils/is-nan' );
var pKolmogorov1 = require( './smirnov.js');
var pKolmogorov = require( './marsaglia.js' );
var ascending = require( './ascending.js' );
var subtract = require( './subtract.js' );
var validate = require( './validate.js' );
var getCDF = require( './get_cdf.js' );
var max = require( './max.js' );


// KOLMOGOROV SMIRNOV TEST //

/**
* Computes a Kolmogorov-Smirnov goodness-of-fit test.
*
* @param {NumericArray} x - input array holding numeric values
* @param {Function|string} y - either a CDF function or a string denoting the name of a distribution
* @param {...number} params - distribution parameters passed to reference CDF
* @param {Object} [opts] - function options
* @param {boolean} [opts.sorted=false] - boolean indicating if the input array is already in sorted order
* @param {string} [opts.alternative="two-sided"] - string indicating whether to conduct two-sided or one-sided hypothesis test (other options: `less`, `greater`)
* @throws {TypeError} argument x has to be a typed array or array of numbers
* @throws {TypeError} argument y has to be a CDF function or string
* @throws {TypeError} alternative option has to be a string primitive
* @throws {Error} alternative option must be `two-sided`, `less` or `greater`
* @throws {TypeError} sorted option has to be a boolean primitive
* @returns {Object} result object with properties `T` and `pValue`, the test statistic and p-value.

* @example
* var out = kstest( [ 2.0, 1.0, 5.0, -5.0, 3.0, 0.5, 6.0 ], 'normal', 0.0, 1.0 );
* // returns { pValue: ~0.015, T: ~0.556 },
*/
function kstest() {
	var nullHypothesis;
	var nDistParams;
	var distParams;
	var distArgs;
	var options;
	var args;
	var opts;
	var pval;
	var stat;
	var yVal;
	var alt;
	var err;
	var idx;
	var str;
	var val;
	var i;
	var n;
	var x;
	var y;

	args = arguments;
	x = args[ 0 ];
	y = args[ 1 ];
	if ( !isNumberArray( x ) && !isTypedArrayLike( x ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a typed array or number array. Value: `' + x + '`.' );
	}
	if ( !isFunction( y ) && !isString( y ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be either a CDF function or a string primitive. Value: `' + y + '`' );
	}
	if ( isString( y ) ) {
		y = getCDF( y );
	}
	nDistParams = y.length - 1.0;
	n = x.length;

	distParams = new Array( nDistParams );
	for ( i = 0; i < nDistParams; i++ ) {
		idx = i + 2;
		val = args[ idx ];
		if ( !isNumber( val ) || isnan( val ) ) {
			throw new TypeError( 'invalid input argument. Distribution parameter must be a number primitive. Value: `' + val + '`.' );
		}
		distParams[ i ] = args[ idx ];
	}

	opts = {};
	if ( args.length > 2 + nDistParams ) {
		options = args[ 2 + nDistParams ];
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Make a copy to prevent mutation of x:
	x = Array.prototype.slice.call( x );

	// Input data has to be sorted:
	if ( opts.sorted !== true ) {
		x.sort( ascending );
	}
	distArgs = [ null ].concat( distParams );
	for ( i = 0; i < n; i++ ) {
		distArgs[ 0 ] = x[ i ];
		yVal = y.apply( null, distArgs );
		x[ i ] = yVal - i / n;
	}

	alt = opts.alternative || 'two-sided';
	switch( alt ) {
	case 'two-sided':
		stat = max(
			[ max( x ), max( subtract( 1/n, x ) ) ]
		);
	break;
	case 'greater':
		stat = max( subtract( 1/n, x ) );
	break;
	case 'less':
		stat = max( x );
	break;
	default:
		throw new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );
	}
	if ( alt === 'two-sided' ) {
		pval = 1.0 - pKolmogorov( stat, n );
		nullHypothesis = 'equal';
	} else {
		pval = 1.0 - pKolmogorov1( stat, n );
		nullHypothesis = alt;
	}
	return {
		'pValue': pval,
		'T': stat,
		'toString': function toString() {
			str = 'Kolmogorov-Smirnov goodness-of-fit test.\n';
			str += '\tnull hypothesis: the CDF of `x` is ' + nullHypothesis + ' equal to the reference CDF.\n';
			str += '\ttest statistic: ' + roundn( stat, -4 ) + '\n';
			str += '\tp-value: ' + roundn( pval, -4 );
			str += '\n';
			return str;
		}
	};
} // end FUNCTION kstest()


// EXPORTS //

module.exports = kstest;
