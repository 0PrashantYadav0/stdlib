'use strict';

// MODULES //

var betaCDF = require( '@stdlib/math/base/dist/beta/cdf' );
var cauchyCDF = require( '@stdlib/math/base/dist/cauchy/cdf' );
var chisquareCDF = require( '@stdlib/math/base/dist/chisquare/cdf' );
var erlangCDF = require( '@stdlib/math/base/dist/erlang/cdf' );
var exponentialCDF = require( '@stdlib/math/base/dist/exponential/cdf' );
var fCDF = require( '@stdlib/math/base/dist/f/cdf' );
var gammaCDF = require( '@stdlib/math/base/dist/gamma/cdf' );
var gumbelCDF = require( '@stdlib/math/base/dist/gumbel/cdf' );
var invgammaCDF = require( '@stdlib/math/base/dist/invgamma/cdf' );
var laplaceCDF = require( '@stdlib/math/base/dist/laplace/cdf' );
var logisticCDF = require( '@stdlib/math/base/dist/logistic/cdf' );
var lognormalCDF = require( '@stdlib/math/base/dist/lognormal/cdf' );
var rayleighCDF = require( '@stdlib/math/base/dist/rayleigh/cdf' );
var tCDF = require( '@stdlib/math/base/dist/t/cdf' );
var uniformCDF = require( '@stdlib/math/base/dist/uniform/cdf' );
var normalCDF = require( '@stdlib/math/base/dist/normal/cdf' );
var paretoType1CDF = require( '@stdlib/math/base/dist/pareto-type1/cdf' );
var triangularCDF = require( '@stdlib/math/base/dist/triangular/cdf' );
var weibullCDF = require( '@stdlib/math/base/dist/weibull/cdf' );


// GET CDF //

/**
* Returns the corresponding CDF function for an input string.
*
* @param {string} name - distribution name
* @returns {Function} cumulative distribution function (CDF)
*/
function getCDF( name ) {
	switch ( name ) {
	case 'beta':
		return betaCDF;
	case 'cauchy':
		return cauchyCDF;
	case 'chisquare':
	case 'chi-square':
	case 'chisquared':
	case 'chi-squared':
		return chisquareCDF;
	case 'erlang':
		return erlangCDF;
	case 'exponential':
		return exponentialCDF;
	case 'f':
		return fCDF;
	case 'gamma':
		return gammaCDF;
	case 'gumbel':
		return gumbelCDF;
	case 'invgamma':
	case 'inv-gamma':
	case 'inverse-gamma':
		return invgammaCDF;
	case 'laplace':
		return laplaceCDF;
	case 'logistic':
		return logisticCDF;
	case 'log-normal':
	case 'lognormal':
		return lognormalCDF;
	case 'rayleigh':
		return rayleighCDF;
	case 't':
		return tCDF;
	case 'uniform':
		return uniformCDF;
	case 'gaussian':
	case 'normal':
		return normalCDF;
	case 'pareto-type-1':
	case 'pareto-type1':
	case 'paretoI':
		return paretoType1CDF;
	case 'triangular':
		return triangularCDF;
	case 'weibull':
		return weibullCDF;
	case 'binomial':
	case 'geometric':
	case 'hypergeometric':
	case 'negative-binomial':
	case 'poisson':
		throw new Error( 'invalid input argument. The Kolmogorov-Smirnov test cannot be used to test discrete distributions. Use a chi-square test instead. Value: `' + name + '`' );
	default:
		throw new Error( 'invalid input argument. Second input argument does not match a probability distribution. Value: `' + name + '`' );
	}
} // end FUNCTION getCDF()

// EXPORTS //

module.exports = getCDF;
