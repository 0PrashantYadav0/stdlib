'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isNonNegativeInteger = require( '@stdlib/utils/is-nonnegative-integer' ).isPrimitive;
var isnan = require( '@stdlib/math/base/utils/is-nan' );


// MAIN //

/**
* Generates a logarithmically spaced numeric array.
*
* @param {number} a - exponent of start value
* @param {number} b - exponent of end value
* @param {NonNegativeInteger} [length=10] - length of output array
* @throws {TypeError} first argument must be numeric
* @throws {TypeError} second argument must be numeric
* @throws {TypeError} third argument must be a nonnegative integer
* @returns {Array} logarithmically spaced numeric array
*
* @example
* var arr = logspace( 0, 2, 6 );
* // returns [ 1, ~2.5, ~6.31, ~15.85, ~39.81, 100 ]
*/
function logspace( a, b, len ) {
	var arr;
	var end;
	var tmp;
	var d;
	var i;
	if ( !isNumber( a ) || isnan( a ) ) {
		throw new TypeError( 'invalid input argument. Exponent of start value must be numeric. Value: `' + a + '`.' );
	}
	if ( !isNumber( b ) || isnan( b ) ) {
		throw new TypeError( 'invalid input argument. Exponent of stop value must be numeric. Value: `' + b + '`.' );
	}
	if ( arguments.length < 3 ) {
		len = 10;
	} else {
		if ( !isNonNegativeInteger( len ) ) {
			throw new TypeError( 'invalid input argument. Length must be a nonnegative integer. Value: `' + len + '`.' );
		}
		if ( len === 0 ) {
			return [];
		}
	}
	// Calculate the increment:
	end = len - 1;
	d = ( b-a ) / end;

	// Build the output array...
	arr = new Array( len );
	tmp = a;
	arr[ 0 ] = pow( 10, tmp );
	for ( i = 1; i < end; i++ ) {
		tmp += d;
		arr[ i ] = pow( 10, tmp );
	}
	arr[ end ] = pow( 10, b );
	return arr;
} // end FUNCTION logspace()


// EXPORTS //

module.exports = logspace;
