'use strict';

// MODULES //

var tape = require( 'tape' );
var logspace = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof logspace, 'function', 'main export is a function' );
	t.end();
});

tape( 'function throws an error if the first argument is not a numeric value', function test( t ) {
	var values = [
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( var i = 0; i < values.length; i++ ) {
			t.throws( badValue( values[i] ), TypeError, 'invalid start value' );
	}
	t.end();

	function badValue( value ) {
		return function() {
			logspace( value, 10 );
		};
	}
});

tape( 'function throws an error if the second argument is not a numeric value', function test( t ) {
	var values = [
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( var i = 0; i < values.length; i++ ) {
			t.throws( badValue( values[i] ), TypeError, 'invalid stop value' );
	}
	t.end();

	function badValue( value ) {
		return function() {
			logspace( 0, value );
		};
	}
});

tape( 'function throws an error if the `length` value is not a numeric value', function test( t ) {
	var values = [
		'5',
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( var i = 0; i < values.length; i++ ) {
			t.throws( badValue( values[i] ), TypeError, 'invalid length value' );
	}
	t.end();

	function badValue( value ) {
		return function() {
			logspace( 0, 10, value );
		};
	}
});

tape( 'function should return a logarithmically spaced array', function test( t ) {
	var a, b, expected, actual;

	a = 0;
	b = 3;

	// Default behavior:
	actual = logspace( a, b );
	t.strictEqual( actual.length, 10 );
	t.strictEqual( actual[0], 1 );
	t.strictEqual( actual[actual.length-1], 1000 );

	// Specify the length:
	actual = logspace( a, b, 10 );
	t.strictEqual( actual.length, 10 );
	t.strictEqual( actual[0], 1 );
	t.strictEqual( actual[actual.length-1], 1000 );

	// Verify correct values:
	actual = logspace( a, b, 4 );
	expected = [ 1, 10, 100, 1000 ];

	t.deepEqual( actual, expected );

	// Decrement:
	actual = logspace( b, a, 4 );
	expected = [ 1000, 100, 10, 1 ];

	t.deepEqual( actual, expected );
	t.end();
});


tape( 'function should return an empty array is length is set to 0', function test( t ) {
	t.deepEqual( logspace(0,10,0), [] );
	t.end();
});
