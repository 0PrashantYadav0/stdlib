'use strict';

// MODULES //

var regularize = require( './../regularize.js' );


// MAIN //

/**
* Given a new observation `(x,y)`, updates the weights using the modified Huber loss.
*
* #### Notes
*
* The modified Huber loss is defined as
*
* ``` tex
* \begin{cases}
*     \max(0,1-y\,f(x))^{2} & {\textrm{for}}\,\,y\,f(x)\geq -1,\\
*     -4y\,f(x) & {\textrm{otherwise.}}
* \end{cases}
* ```
*
* @private
* @param {WeightVector} weights - current model coefficients
* @param {NumericArray} x - feature vector
* @param {number} y - response value
* @param {PositiveNumber} eta - current learning rate
* @param {NonNegativeNumber} lambda - regularization parameter
*/
function modifiedHuber( weights, x, y, eta, lambda ) {
	var p = y * weights.innerProduct( x );

	// Perform L2 regularization...
	regularize( weights, lambda, eta );

	if ( y !== 0.0 ) {
		if ( p < -1.0 ) {
			weights.add( x, ( eta * 4.0 * y ) );
		} else if ( p < 1.0 ) {
			weights.add( x, eta * ( y - (p*y) ) );
		}
	}
} // end FUNCTION modifiedHuber()


// EXPORTS //

module.exports = modifiedHuber;
