/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/* tslint:disable:max-line-length */
/* tslint:disable:max-file-line-count */

import incrkmeans = require( '@stdlib/ml/incr/kmeans' );

/**
* Interface describing the `incr` namespace.
*/
interface Namespace {
	/**
	* Returns an accumulator function which incrementally partitions data into `k` clusters.
	*
	* @param k - number of clusters or a `k x ndims` matrix containing initial centroids
	* @param ndims - number of dimensions (should only be provided if provided a numeric `k` argument)
	* @param options - function options
	* @param options.metric - distance metric (default: 'euclidean')
	* @param options.init - method for determining initial centroids
	* @param options.normalize - boolean indicating whether to normalize incoming data (only relevant for non-Euclidean distance metrics) (default: true)
	* @param options.copy - boolean indicating whether to copy incoming data to prevent mutation during normalization (default: true)
	* @param options.seed - PRNG seed
	* @throws must provide valid options
	* @throws when using sampling to generate initial centroids, the sample size must be greater than or equal to the number of clusters
	* @returns accumulator function
	*
	* @example
	* var Float64Array = require( `@stdlib/array/float64` );
	* var ndarray = require( `@stdlib/ndarray/ctor` );
	*
	* // Define initial centroid locations:
	* var buffer = [
	*     0.0, 0.0,
	*     1.0, 1.0,
	*     1.0, -1.0,
	*     -1.0, -1.0,
	*     -1.0, 1.0
	* ];
	* var shape = [ 5, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	* var order = 'row-major';
	*
	* var centroids = ndarray( 'float64', buffer, shape, strides, offset, order );
	*
	* // Create a k-means accumulator:
	* var accumulator = ns.incrkmeans( centroids );
	*
	* var out = accumulator();
	* // returns {...}
	*
	* // Create a data vector:
	* buffer = new Float64Array( 2 );
	* shape = [ 2 ];
	* strides = [ 1 ];
	*
	* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );
	*
	* // Provide data to the accumulator:
	* vec.set( 0, 2.0 );
	* vec.set( 1, 1.0 );
	*
	* out = accumulator( vec );
	* // returns {...}
	*
	* vec.set( 0, -5.0 );
	* vec.set( 1, 3.14 );
	*
	* out = accumulator( vec );
	* // returns {...}
	*
	* // Retrieve the current cluster results:
	* out = accumulator();
	* // returns {...}
	*/
	incrkmeans: typeof incrkmeans;
}

/**
* Standard library incremental machine learning algorithms.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
