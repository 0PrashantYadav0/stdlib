/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var incrmean = require( '@stdlib/stats/incr/mean' );
var incrstdev = require( '@stdlib/stats/incr/stdev' );


// MAIN //

/**
* Normalizes matrix elements by standardization.
*
* @private
* @param {ndarray} mat - matrix to normalize
* @returns {ndarray} input matrix
*/
function standardize( mat ) { // TODO: eventually remove this function once project has implemented comparable functionality as a standalone package
	var stdevs;
	var means;
	var M;
	var N;
	var i;
	var j;
	var v;

	M = mat.shape[ 0 ];
	N = mat.shape[ 1 ];

	// TODO: remove use of accumulators once we have statistical functions which can operate over ndarray axes
	means = [];
	stdevs = [];

	// Initialize accumulators...
	for ( i = 0; i < N; i++ ) {
		means.push( incrmean() );
		stdevs.push( incrstdev() );
	}
	// Update accumulators...
	for ( i = 0; i < M; i++ ) {
		for ( j = 0; j < N; j++ ) {
			means[ j ]( mat.get( i, j ) );
			stdevs[ j ]( mat.get( i, j ) );
		}
	}
	// Replace accumulators with accumulated values...
	for ( i = 0; i < N; i++ ) {
		means[ j ] = means[ j ]();
		stdevs[ j ] = stdevs[ j ]();
	}
	// Normalize each data vector...
	for ( i = 0; i < M; i++ ) {
		for ( j = 0; j < N; j++ ) {
			v = ( mat.get( i, j ) - means[j] ) / stdevs[j];
			mat.set( i, j, v );
		}
	}
	return mat;
}


// EXPORTS //

module.exports = standardize;
