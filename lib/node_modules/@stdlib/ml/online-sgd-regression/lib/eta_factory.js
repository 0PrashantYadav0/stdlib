'use strict';

/**
* Returns a function to retrieve the current learning rate.
*
* @param {string} type - string denoting the learning rate to use. Can be `constant`, `pegasos` or `basic`.
* @param {PositiveNumber} eta0 - constant learning rate
* @param {NonNegativeNumber} lambda - regularization parameter
* @throws {Error} first argument must be `basic`, `constant` or `pegasos`
* @returns {Function} getEta function
*/
function closure( type, eta0, lambda ) {
	var ret;
	var _it;

	_it = 1;

	switch ( type ) {
	case 'basic':
		// Default case: 'basic'
		ret = function getEta() {
			var eta = 1000.0 / ( _it + 1000.0 );
			_it += 1;
			return eta;
		};
	break;
	case 'constant':
		ret = function getEta() {
			_it += 1;
			return eta0;
		};
	break;
	case 'pegasos':
		ret = function getEta() {
			var eta = 1.0 / ( lambda * _it );
			_it += 1;
			return eta;
		};
	break;
	default:
		throw Error( 'invalid input value. `learningRate` must be either `basic`, `constant` or `pegasos`. Value: `' + type + '`' );
	}

	return ret;
} // end FUNCTION closure()


// EXPORTS //

module.exports = closure;
