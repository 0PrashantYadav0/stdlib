'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var existsSync = require( '@stdlib/fs/exists' ).sync;
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var unlink = require( './../lib/sync.js' );


// VARIABLES //

// Don't run tests in the browser...for now...
var opts = {
	'skip': IS_BROWSER // FIXME
};
var fpath = join( __dirname, 'fixtures', 'file.txt' );
var DATA = readFile( fpath, 'utf8' );


// FUNCTIONS //

/**
* Restores a fixture file.
*
* ## Notes
*
* -   Every function which has the **potential** to affect the fixture file should invoke this function immediately before calling `t.end()`.
*
* @private
*/
function restore() {
	writeFile( fpath, DATA );
} // end FUNCTION restore()


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof unlink, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function removes a directory entry', opts, function test( t ) {
	unlink( fpath );

	t.strictEqual( existsSync( fpath ), false, 'removes file' );

	restore();
	t.strictEqual( existsSync( fpath ), true, 'file restored' );

	t.end();
});

tape( 'if the function encounters an error, the function returns the error', opts, function test( t ) {
	var file;
	var err;

	file = 'beepboopbapbop/dkfjldjfaklsjf/bdlfalfas/bkldflakfjas'; // non-existent directory path
	err = unlink( file );

	t.strictEqual( err instanceof Error, true, err.message );
	t.strictEqual( existsSync( fpath ), true, 'file not removed' );

	restore();
	t.strictEqual( existsSync( fpath ), true, 'file restored' );

	t.end();
});
