'use strict';

// MODULES //

var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-plain-object' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var removeBOM = require( '@stdlib/string/remove-utf-8-bom' );
var parseJSON = require( '@stdlib/utils/parse-json' );


// READ JSON //

/**
* Synchronously reads a file as JSON.
*
* @param {(string|Buffer|Integer)} path - file path or file descriptor
* @param {(Options|string)} [options] - options
* @param {(string|null)} [options.encoding] - file encoding
* @param {string} [options.flag] - file status flag
* @param {Function} [options.reviver] - JSON reviver
* @throws {TypeError} options argument must be an object
* @returns {(JSON|Error)} JSON or an error
*
* @example
* var resolve = require( 'path' ).resolve;
*
* var out = readJSONSync( resolve( __dirname, '../package.json' ) );
* if ( out instanceof Error ) {
*     throw out;
* }
* console.dir( out );
*/
function readJSONSync( path, options ) {
	var file;
	var opts;
	if ( arguments.length > 1 ) {
		if ( isString( options ) ) {
			opts = {
				'encoding': options
			};
		} else {
			if ( !isObject( options ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be either a string or an object. Value: `' + options + '`.' );
			}
			opts = options;
		}
	} else {
		opts = {};
	}
	file = readFile( path, opts );
	if ( file instanceof Error ) {
		return file;
	}
	file = file.toString();
	if ( opts.encoding === 'utf8' ) {
		file = removeBOM( file );
	}
	if ( opts.reviver ) {
		return parseJSON( file, opts.reviver );
	}
	return parseJSON( file );
} // end FUNCTION readJSONSync()


// EXPORTS //

module.exports = readJSONSync;
