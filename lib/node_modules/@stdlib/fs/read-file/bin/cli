#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var cwd = require( '@stdlib/utils/cwd' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var readFile = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Callback invoked upon reading the contents of a file.
*
* @private
* @param {(Error|null)} error - error object
* @param {(Buffer|string)} file - file contents
*/
function onFile( error, file ) {
	if ( error ) {
		process.stderr.write( error.message + '\n', 'utf8' );
		return process.exit( 1 );
	}
	// Cannot write to `stdout` directly and then `exit` due to https://github.com/nodejs/node/issues/6456.
	// process.stdout.write( file );
	// process.exit( 0 );

	// HACK: workaround is to use `console.log` and no exit:
	console.log( file.toString() );
} // end FUNCTION onFile()


// VARIABLES //

var fpath;
var args;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}

opts = {};
if ( args.encoding ) {
	opts.encoding = args.encoding;
}
if ( args.flag ) {
	opts.flag = args.flag;
}


// READ FILE //

fpath = path.resolve( cwd(), args._[0] );
readFile( fpath, opts, onFile );
