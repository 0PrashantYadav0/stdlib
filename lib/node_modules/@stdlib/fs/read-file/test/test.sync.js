'use strict';

// MODULES //

var tape = require( 'tape' );
var fs = require( 'fs' );
var isBrowser = require( '@stdlib/assert/is-browser' );
var readFile = require( './../lib/sync.js' );


// VARIABLES //

// Don't run tests in the browser...for now...
var opts = {
	'skip': isBrowser // FIXME
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof readFile, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function reads the entire contents of a file', opts, function test( t ) {
	var expected;
	var actual;

	expected = fs.readFileSync( __filename );
	actual = readFile( __filename );

	t.deepEqual( actual, expected, 'returns file contents' );

	t.end();
});

tape( 'the function reads the contents of a file using provided options', opts, function test( t ) {
	var expected;
	var actual;

	// String options:
	expected = fs.readFileSync( __filename, 'utf8' );
	actual = readFile( __filename, 'utf8' );

	t.strictEqual( actual, expected, 'returns file contents' );

	// Object options:
	expected = fs.readFileSync( __filename, {
		'encoding': 'utf8'
	});
	actual = readFile( __filename, {
		'encoding': 'utf8'
	});

	t.strictEqual( actual, expected, 'returns file contents' );

	t.end();
});

tape( 'if the function encounters an error, the function returns the error', opts, function test( t ) {
	var out = readFile( 'beepboopbapbop' );

	t.equal( out instanceof Error, true, 'returns an error' );

	t.end();
});

tape( 'if the function encounters an error, the function returns the error (options)', opts, function test( t ) {
	var out;

	out = readFile( 'beepboopbapbop', 'utf8' );
	t.equal( out instanceof Error, true, 'returns an error' );


	out = readFile( 'beepboopbapbop', {
		'encoding': 'utf8'
	});
	t.equal( out instanceof Error, true, 'returns an error' );

	t.end();
});
