'use strict';

// MODULES //

var debug = require( 'debug' )( 'simple-http-server' );
var path = require( 'path' );
var cwd = require( '@stdlib/utils/cwd' );
var createServer = require( '@stdlib/tools/http-server' );
var readFileSync = require( '@stdlib/utils/fs/read-file' ).sync;
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/utils/is-function' );
var openURL = require( '@stdlib/utils/open-url' );
var noop = require( '@stdlib/utils/noop' );
var validate = require( './validate.js' );
var serverOpts = require( './opts.js' );
var serveContent = require( './request-listeners/content' );
var serveDir = require( './request-listeners/directory' );


// SIMPLE HTTP SERVER //

/**
* Creates a simple HTTP server. The implementation takes inspiration from Python's [SimpleHTTPServer]{@link https://docs.python.org/2/library/simplehttpserver.html}.
*
* @param {Object} [options] - server options
* @param {Buffer|string} [options.html] - HTML content to serve
* @param {Buffer|string} [options.javascript] - JavaScript to serve
* @param {string} [options.dir] - directory from which to serve files
* @param {number} [options.port=0] - server port
* @param {number} [options.maxport] - max server port
* @param {string} [options.hostname] - server hostname
* @param {string} [options.address="0.0.0.0"] - server address
* @param {boolean} [options.open=false] - indicates whether to launch a web browser
* @param {Function} [clbk] - callback to invoke upon creating a server
* @throws {TypeError} must provide valid options
* @throws {Error} error encountered when starting server
*
* @example
* var opts = {
*     'html': '<h1>Beep</h1>'
* };
* httpServer( opts, onReady );
*
* function onReady( error, server ) {
*     if ( error ) {
*         throw error;
*     }
*     server.close();
* }
*
* @example
* var opts = {
*     'dir': './',
*     'port': 7331,
*     'hostname': 'localhost',
*     'open': false
* };
* httpServer( opts, onReady );
*
* function onReady( error, server ) {
*     if ( error ) {
*         throw error;
*     }
*     server.close();
* }
*/
function httpServer() {
	var onRequest;
	var options;
	var server;
	var sopts;
	var fpath;
	var clbk;
	var boot;
	var opts;
	var err;

	opts = {};
	if ( arguments.length === 1 ) {
		if ( isFunction( arguments[0] ) ) {
			clbk = arguments[ 0 ];
		} else {
			options = arguments[ 0 ];
			err = validate( opts, options );
		}
	} else if ( arguments.length > 1 ) {
		options = arguments[ 0 ];
		clbk = arguments[ 1 ];
		if ( !isFunction( clbk ) ) {
			throw new TypeError( 'invalid input argument. Callback argument must be a function. Value: `' + clbk + '`.' );
		}
		err = validate( opts, options );
	}
	if ( err ) {
		throw err;
	}
	if ( clbk === void 0 ) {
		clbk = noop;
	}
	// If provided HTML and/or JavaScript as `strings`, convert to `buffers`...
	if (
		opts.html &&
		isString( opts.html )
	) {
		opts.html = new Buffer( opts.html );
	}
	if (
		opts.javascript &&
		isString( opts.javascript )
	) {
		opts.javascript = new Buffer( opts.javascript );
	}
	// Extract server options:
	sopts = serverOpts( options );

	// Generate a request listener...
	if ( opts.dir ) {
		opts.dir = path.resolve( cwd(), opts.dir );
		debug( 'Serving directory: %s', opts.dir );
		onRequest = serveDir( opts );
	} else {
		debug( 'Serving provided content.' );
		if ( !opts.html ) {
			debug( 'No HTML content provided.' );
			debug( 'Loading a boilerplate HTML page...' );
			fpath = path.resolve( __dirname, '../static/index.html' );
			opts.html = readFileSync( fpath );
		}
		onRequest = serveContent( opts.html, opts.javascript );
	}
	// Create a function to boot a server...
	boot = createServer( sopts, onRequest );

	debug( 'Starting server...' );
	boot( onServer );

	/**
	* Callback invoked upon creating a server.
	*
	* @private
	* @param {Error|null} error - error object
	* @param {Server} server - server instance
	* @throws {Error} error encountered when starting server
	*/
	function onServer( error, _server ) {
		var addr;
		if ( error ) {
			throw error;
		}
		debug( 'Server started.' );
		server = _server;
		if ( opts.open ) {
			addr = server.address();
			openURL( 'http://'+addr.address+':'+addr.port );
		}
		clbk( null, server );
	} // end FUNCTION onServer()
} // end FUNCTION httpServer()


// EXPORTS //

module.exports = httpServer;
