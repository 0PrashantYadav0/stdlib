#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var cwd = require( '@stdlib/utils/cwd' );
var stdin = require( '@stdlib/utils/read-stdin' );
var readFileSync = require( '@stdlib/utils/fs/read-file' ).sync;
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var httpServer = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var ipath;
var file;
var opts;
var args;
var v;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
    return help();
}
if ( args.version ) {
	return version();
}

opts = {};

v = args.port || process.env.PORT;
if ( v ) {
	opts.port = parseInt( v, 10 );
}
v = args.maxport || process.env.MAXPORT;
if ( v ) {
	opts.maxport = parseInt( v, 10 );
}
v = args.hostname || process.env.HOSTNAME;
if ( v ) {
	opts.hostname = v;
}
v = args.address || process.env.ADDRESS;
if ( v ) {
	opts.address = v;
}
if ( args.open ) {
	opts.open = true;
}


// RUN //

ipath = args._[ 0 ] || '';

// If the `--html` flag is set, load the provided HTML and serve...
if ( args.html ) {
	if ( ipath ) {
		// Load an HTML file...
		ipath = path.resolve( cwd(), ipath );
		file = readFileSync( ipath );
		if ( file instanceof Error ) {
			process.stderr.write( file.message+'\n', 'utf8' );
			return process.exit( 1 );
		}
		opts.html = file;

		// If the `--javascript` flag is set, load JavaScript from `stdin`...
		if ( args.javascript ) {
			return stdin( javascript );
		}
		return process.nextTick( next );
	}
	return stdin( html );
}

// If the `--javascript` flag is set, load the provided JavaScript, and serve...
if ( args.javascript ) {
	if ( ipath ) {
		ipath = path.resolve( cwd(), ipath );
		file = readFileSync( ipath );
		if ( file instanceof Error ) {
			process.stderr.write( file.message+'\n', 'utf8' );
			return process.exit( 1 );
		}
		opts.javascript = file;
		return process.nextTick( next );
	}
	return stdin( javascript );
}

// Fall back to serving a directory:
opts.dir = ipath || cwd();
process.nextTick( next );

/**
* Callback invoked after attempting to read HTML from `stdin`.
*
* @private
* @param {Error|null} error - error object
* @param {Buffer} data - `stdin` data
*/
function html( error, data ) {
	if ( error ) {
		process.stderr.write( error.message+'\n', 'utf8' );
		return process.exit( 1 );
	}
	if ( data.toString() === '' ) {
		process.stderr.write( 'Error: no input data. Provide either a path to an HTML file or provide HTML via `stdin`.\n', 'utf8' );
		return process.exit( 1 );
	}
	opts.html = data;
	next();
} // end FUNCTION html()

/**
* Callback invoked after attempting to read JavaScript from `stdin`.
*
* @private
* @param {Error|null} error - error object
* @param {Buffer} data - `stdin` data
*/
function javascript( error, data ) {
	if ( error ) {
		process.stderr.write( error.message+'\n', 'utf8' );
		return process.exit( 1 );
	}
	if ( data.toString() === '' ) {
		process.stderr.write( 'Error: no input data. Provide either a path to a JavaScript file or provide JavaScript via `stdin`.\n', 'utf8' );
		return process.exit( 1 );
	}
	opts.javascript = data;
	next();
} // end FUNCTION javascript()

/**
* Callback invoked once ready to run an HTTP server.
*
* @private
*/
function next() {
	httpServer( opts );
} // end FUNCTION next()


// TODO
//
// [3] Accept a `directory`
//   => behave like Python SimpleHTTPServer (https://docs.python.org/2/library/simplehttpserver.html)
//   => when receiving a request matching the directory path or a subdirectory, look for either an `index.html`, an `index.htm`, a `default.html`, or a `default.htm` in that order
//   => if an index HTML file is found, return that file
//   => if a request is received for a file ending in `*.js`, if that file is named `bundle.js`, return a browserified bundle using `index.js` located in the same directory (cache the bundle for future requests; make the name of this file (index.js) configurable [e.g., allows a browser example to coexist alongside a normal `index.js` file]); otherwise, return the requested file
//   => for any other file, return the file
//   => if no file is requested, return a file/directory (only non-hidden) map (hyperlinked)

// when listing directory contents, give stats, like size?
