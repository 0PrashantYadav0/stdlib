'use strict';

// MODULES //

var isObject = require( '@stdlib/utils/is-plain-object' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.basedir] - base search directory
* @param {string} [options.paths] - path convention
* @returns {Error|null} error or null
*
* @example
* var options = {
*     'basedir': '/beep/boop/foo/bar',
*     'paths': 'win32'
* };
* var opts = {};
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'basedir' ) ) {
		opts.basedir = options.basedir;
		if ( !isString( opts.basedir ) ) {
			return new TypeError( 'invalid option. `basedir` option must be a primitive string. Option: `' + opts.basedir + '`.' );
		}
	}
	if ( hasOwnProp( options, 'paths' ) ) {
		opts.paths = options.paths;
		if ( !isString( opts.paths ) ) {
			return new TypeError( 'invalid option. `paths` option must be a primitive string. Option: `' + opts.paths + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
