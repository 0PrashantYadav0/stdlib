'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var getKeys = require( 'object-keys' ).shim();
var isObject = require( '@stdlib/utils/is-plain-object' );
var manifest = require( './../lib' );


// FIXTURES //

var fixture = join( __dirname, 'fixtures', 'manifest.json' );
var extraFields = join( __dirname, 'fixtures', 'extra_fields.json' );
var extraFieldsAndDeps = join( __dirname, 'fixtures', 'extra_fields_and_deps.json' );
var badDependency = join( __dirname, 'fixtures', 'bad_dependency.json' );
var dependency = join( __dirname, 'fixtures', 'dependency.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof manifest, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided a first argument which is not a string (no options)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		undefined,
		function noop() {},
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			manifest( value, {} );
		};
	}
});

tape( 'the function throws an error if provided a first argument which is not a string (options)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		undefined,
		function noop() {},
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			manifest( value, {}, {} );
		};
	}
});

tape( 'the function throws an error if provided a second argument which is not an object (no options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		function noop() {},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			manifest( fixture, value );
		};
	}
});

tape( 'the function throws an error if provided a second argument which is not an object (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		function noop() {},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			manifest( fixture, value, {} );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		function noop() {},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			manifest( fixture, {}, value );
		};
	}
});

tape( 'the function throws if unable to read a manifest file', function test( t ) {
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		manifest( 'dkjafljdafjdf.ajldjfasjfljs', {} );
	}
});

tape( 'the function throws if unable to resolve a manifest for a stated dependency', function test( t ) {
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var conditions;
		var opts;

		conditions = {
			'os': 'mac'
		};
		opts = {
			'basedir': __dirname
		};
		manifest( badDependency, conditions, opts );
	}
});

tape( 'the function returns an object if able to resolve a configuration', function test( t ) {
	var conditions;
	var expected;
	var conf;
	var opts;

	expected = {
		'os': 'mac',
		'src': [
			join( __dirname, 'fixtures', 'src', 'foo_mac.f' ),
			join( __dirname, 'fixtures', 'src', 'foo_mac_f.c' )
		],
		'include': [
			join( __dirname, 'fixtures', 'include' )
		],
		'libraries': [],
		'libpath': [],
		'dependencies': []
	};

	conditions = {
		'os': 'mac'
	};
	opts = {
		'basedir': __dirname
	};
	conf = manifest( fixture, conditions, opts );

	t.strictEqual( isObject( conf ), true, 'returns an object' );
	t.strictEqual( getKeys( conf ).length > 0, true, 'returns a non-empty object' );
	t.deepEqual( conf, expected, 'returns expected configuration' );

	t.end();
});

tape( 'the function returns an empty object if unable to resolve a configuration (no matching value)', function test( t ) {
	var conditions;
	var opts;
	var conf;

	conditions = {
		'os': 'beep-boop-bop-foo-bar'
	};
	opts = {
		'basedir': __dirname
	};
	conf = manifest( fixture, conditions, opts );
	t.strictEqual( isObject( conf ), true, 'returns an object' );
	t.strictEqual( getKeys( conf ).length, 0, 'returns an empty object' );
	t.end();
});

tape( 'if provided conditions without matching fields, the function returns a configuration based on default values', function test( t ) {
	var expected;
	var conditions;
	var opts;
	var conf;

	expected = {
		'os': 'linux',
		'src': [
			join( __dirname, 'fixtures', 'src', 'foo_linux.f' ),
			join( __dirname, 'fixtures', 'src', 'foo_linux.c' )
		],
		'include': [
			join( __dirname, 'fixtures', 'include' )
		],
		'libraries': [],
		'libpath': [],
		'dependencies': []
	};

	conditions = {
		'bar': 'foo'
	};
	opts = {
		'basedir': __dirname
	};
	conf = manifest( fixture, conditions, opts );

	t.strictEqual( isObject( conf ), true, 'returns an object' );
	t.strictEqual( getKeys( conf ).length > 0, true, 'returns a non-empty object' );
	t.deepEqual( conf, expected, 'returns expected configuration' );

	t.end();
});

tape( 'the function supports processing manifests which specify additional fields', function test( t ) {
	var conditions;
	var expected;
	var conf;
	var opts;

	expected = {
		'os': 'win',
		'src': [
			join( __dirname, 'fixtures', 'src', 'foo_win.c' )
		],
		'include': [
			join( __dirname, 'fixtures', 'include' )
		],
		'libraries': [],
		'libpath': [],
		'dependencies': [],
		'foo': 'bat'
	};

	conditions = {
		'os': 'win'
	};
	opts = {
		'basedir': __dirname
	};
	conf = manifest( extraFields, conditions, opts );

	t.strictEqual( isObject( conf ), true, 'returns an object' );
	t.strictEqual( getKeys( conf ).length > 0, true, 'returns a non-empty object' );
	t.deepEqual( conf, expected, 'returns expected configuration' );

	t.end();
});

tape( 'the function supports resolving dependencies', function test( t ) {
	var conditions;
	var expected;
	var conf;
	var opts;

	expected = {
		'os': 'linux',
		'src': [
			join( __dirname, 'fixtures', 'src', 'foo_linux.f' ),
			join( __dirname, 'fixtures', 'src', 'foo_linux.c' ),
			join( __dirname, 'fixtures', 'node_modules', 'beep', 'src', 'foo_linux.f' ),
			join( __dirname, 'fixtures', 'node_modules', 'beep', 'src', 'foo_linux.c' )
		],
		'include': [
			join( __dirname, 'fixtures', 'include' ),
			join( __dirname, 'fixtures', 'node_modules', 'beep', 'include' )
		],
		'libraries': [
			'-lblas'
		],
		'libpath': [
			'/usr/local'
		],
		'dependencies': [
			'beep'
		]
	};

	conditions = {
		'os': 'linux'
	};
	opts = {
		'basedir': join( __dirname, 'fixtures' )
	};
	conf = manifest( dependency, conditions, opts );

	t.strictEqual( isObject( conf ), true, 'returns an object' );
	t.strictEqual( getKeys( conf ).length > 0, true, 'returns a non-empty object' );
	t.deepEqual( conf, expected, 'returns expected configuration' );

	t.end();
});

tape( 'the function supports processing manifests which specify additional fields (dependencies)', function test( t ) {
	var conditions;
	var expected;
	var conf;
	var opts;

	expected = {
		'os': 'win',
		'src': [
			join( __dirname, 'fixtures', 'src', 'foo_win.c' ),
			join( __dirname, 'fixtures', 'node_modules', 'beep', 'src', 'foo_win.c' )
		],
		'include': [
			join( __dirname, 'fixtures', 'include' ),
			join( __dirname, 'fixtures', 'node_modules', 'beep', 'include' )
		],
		'libraries': [],
		'libpath': [],
		'dependencies': [
			'beep'
		],
		'foo': 'bat'
	};

	conditions = {
		'os': 'win'
	};
	opts = {
		'basedir': join( __dirname, 'fixtures' )
	};
	conf = manifest( extraFieldsAndDeps, conditions, opts );

	t.strictEqual( isObject( conf ), true, 'returns an object' );
	t.strictEqual( getKeys( conf ).length > 0, true, 'returns a non-empty object' );
	t.deepEqual( conf, expected, 'returns expected configuration' );

	t.end();
});
