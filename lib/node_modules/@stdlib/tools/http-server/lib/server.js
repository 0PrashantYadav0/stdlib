'use strict';

// MODULES //

var http = require( 'http' );
var debug = require( 'debug' )( '@stdlib/tools/http-server');
var isFunction = require( '@stdlib/utils/is-function' );
var validate = require( './validate.js' );


// HTTP SERVER //

/**
* Returns a function which creates an HTTP server.
*
* @param {Object} options - server options
* @param {number} [options.port=0] - server port
* @param {number} [options.maxport] - max server port
* @param {string} [options.hostname] - server hostname
* @param {string} [options.address="0.0.0.0"] - server address
* @param {Function} [requestListener] - callback invoked upon receiving an HTTP request
* @throws {TypeError} `requestListener` must be a function
* @throws {TypeError} must provide valid options
* @returns {Function} function which creates an HTTP server
*
* @example
* var opts = {
*     'port': 7331,
*     'address': '127.0.0.1'
* };
* var createServer = httpServer( opts );
* @example
* var opts = {
*     'port': 7331,
*     'address': '127.0.0.1'
* };
* function onRequest( request, response ) {
*     console.log( request.url );
*     response.end( 'OK' );
* }
* var createServer = httpServer( opts, onRequest );
*/
function httpServer( options, requestListener ) {
	var hostname;
	var opts;
	var port;
	var max;
	var err;
	if (
		arguments.length > 1 &&
		!isFunction( requestListener )
	) {
		throw new TypeError( 'invalid input argument. Request listener must be a function. Value: `' + requestListener + '`.' );
	}
	opts = {};
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	if ( opts.port === void 0 ) {
		port = 0;
	} else {
		port = opts.port;
	}
	debug( 'Server port: %d', port );

	if ( opts.maxport === void 0 ) {
		max = port;
	} else {
		max = opts.maxport;
	}
	debug( 'Max server port: %d', max );

	if ( opts.hostname ) {
		hostname = opts.hostname;
	}
	else if ( opts.address ) {
		hostname = opts.address;
	}
	else {
		hostname = '0.0.0.0';
	}
	debug( 'Server hostname: %s', hostname );
	/**
	* Creates an HTTP server.
	*
	* @param {Function} done - function to invoke after creating a server
	* @throws {TypeError} must provide a function
	*
	* @example
	* function done( error, server ) {
	*     if ( error ) {
	*         throw error;
	*     }
	*     console.log( 'Success!' );
	*     server.close();
	* }
	* createServer( done );
	*/
	return function createServer( done ) {
		var server;
		if ( !isFunction( done ) ) {
			throw new TypeError( 'invalid input argument. Callback must be a function. Value: `' + done + '`.' );
		}
		if ( requestListener ) {
			server = http.createServer( requestListener );
		} else {
			server = http.createServer();
		}
		server.on( 'error', errorListener );
		server.once( 'listening', onListen );

		debug( 'Attempting to listen on %s:%d.', hostname, port );
		server.listen( port, hostname );

		/**
		* Server error event handler.
		*
		* @private
		* @param {Error} error - server error
		*/
		function errorListener( error ) {
			if ( error.code === 'EADDRINUSE' ) {
				debug( 'Server address already in use: %s:%d.', hostname, port );
				port += 1;
				if ( port <= max ) {
					debug( 'Attempting to listen on %s:%d.', hostname, port );
					server.listen( port, hostname );
					return;
				}
			}
			// FIXME: don't throw; return an error
			throw error;
		} // end FUNCTION errorListener()

		/**
		* Callback invoked once a server is listening and ready to handle requests.
		*
		* @private
		*/
		function onListen() {
			var addr = server.address();
			debug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );
			done( null, server );
		} // end FUNCTION onListen()
	}; // end FUNCTION createServer()
} // end FUNCTION httpServer()


// EXPORTS //

module.exports = httpServer;
