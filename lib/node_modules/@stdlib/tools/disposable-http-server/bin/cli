#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var cwd = require( '@stdlib/utils/cwd' );
var stdin = require( '@stdlib/utils/read-stdin' );
var readFileSync = require( '@stdlib/utils/fs/read-file' ).sync;
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var httpServer = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Writes an error message to `stderr` and then exits.
*
* @private
* @param {string} msg - error message
*/
function exit( msg ) {
	process.stderr.write( msg+'\n', 'utf8' );
	process.exit( 1 );
} // end FUNCTION exit()


// VARIABLES //

var fpath;
var file;
var args;
var err;
var v;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
    return help();
}
if ( args.version ) {
	return version();
}

opts = {};

v = args.port || process.env.PORT;
if ( v ) {
	opts.port = parseInt( v, 10 );
}
v = args.maxport || process.env.MAXPORT;
if ( v ) {
	opts.maxport = parseInt( v, 10 );
}
v = args.hostname || process.env.HOSTNAME;
if ( v ) {
	opts.hostname = v;
}
v = args.address || process.env.ADDRESS;
if ( v ) {
	opts.address = v;
}
if ( args.open ) {
	opts.open = true;
}


// RUN //

// Load an HTML file...
if ( args.html ) {
	fpath = path.resolve( cwd(), args.html );
	file = readFileSync( fpath );
	if ( file instanceof Error ) {
		return exit( file.message );
	}
	opts.html = file;
}
// Load a JavaScript file...
if ( args.javascript ) {
	fpath = path.resolve( cwd(), args.javascript );
	file = readFileSync( fpath );
	if ( file instanceof Error ) {
		return exit( file.message );
	}
	opts.javascript = file;
}
// Determine if we need to read data from `stdin`...
if ( args.stdin ) {
	if ( args.stdin === 'html' ) {
		return stdin( html );
	} else if (
		args.stdin === 'javascript' ||
		args.stdin === 'js'
	) {
		return stdin( javascript );
	}
	err = new Error( 'invalid flag. Unrecognized/unsupported `stdin` type: '+args.stdin+'.' );
	return exit( err.message );
}
// If the `stdin` flag has not been set and we're receiving data (i.e., not running in a terminal context), assume a content type based on either an `--html` or `--javascript` flag being set...
else if ( !process.stdin.isTTY ) {
	if ( args.html ) {
		return stdin( javascript );
	} else if ( args.javascript ) {
		return stdin( html );
	}
	// Neither `--html` or `--javascript` was set...
	err = new Error( 'invalid invocation. Must specify a `stdin` content type.' );
	return exit( err.message );
}

return process.nextTick( next );

/**
* Callback invoked after attempting to read HTML from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - `stdin` data
*/
function html( error, data ) {
	if ( error ) {
		return exit( error.message );
	}
	if ( data.toString() === '' ) {
		error = new Error( 'no input data. Provide either a path to an HTML file or provide HTML via `stdin`.' );
		return exit( error.message );
	}
	opts.html = data;
	next();
} // end FUNCTION html()

/**
* Callback invoked after attempting to read JavaScript from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - `stdin` data
*/
function javascript( error, data ) {
	if ( error ) {
		return exit( error.message );
	}
	if ( data.toString() === '' ) {
		error = new Error( 'no input data. Provide either a path to a JavaScript file or provide JavaScript via `stdin`.' );
		return exit( error.message );
	}
	opts.javascript = data;
	next();
} // end FUNCTION javascript()

/**
* Callback invoked once ready to run an HTTP server.
*
* @private
*/
function next() {
	httpServer( opts );
} // end FUNCTION next()
