'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isArray = require( '@stdlib/assert/is-array' );
var afinn96 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof afinn96, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (browser)', function test( t ) {
	var afinn96 = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});
	t.strictEqual( typeof afinn96, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (non-browser)', function test( t ) {
	var afinn96 = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});
	t.strictEqual( typeof afinn96, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an array of 2-element arrays', function test( t ) {
	var list;
	var i;
	list = afinn96();
	t.equal( isArray( list ), true, 'returns an array' );
	for ( i = 0; i < list.length; i++ ) {
		t.equal( isArray( list[i] ), true, 'element '+i+' is an array' );
		t.equal( list[i].length, 2, 'element '+i+' is a 2-element array' );
	}
	t.end();
});

tape( 'the function returns an array of 2-element arrays (browser)', function test( t ) {
	var afinn96;
	var list;
	var i;

	afinn96 = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	list = afinn96();
	t.strictEqual( isArray( list ), true, 'returns an array' );
	for ( i = 0; i < list.length; i++ ) {
		t.strictEqual( isArray( list[i] ), true, 'element '+i+' is an array' );
		t.strictEqual( list[i].length, 2, 'element '+i+' is a 2-element array' );
	}
	t.end();
});

tape( 'the function returns an array of 2-element arrays (non-browser)', function test( t ) {
	var afinn96;
	var list;
	var i;

	afinn96 = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	list = afinn96();
	t.strictEqual( isArray( list ), true, 'returns an array' );
	for ( i = 0; i < list.length; i++ ) {
		t.strictEqual( isArray( list[i] ), true, 'element '+i+' is an array' );
		t.strictEqual( list[i].length, 2, 'element '+i+' is a 2-element array' );
	}
	t.end();
});

tape( 'the function returns a deep copy', function test( t ) {
	var d1;
	var d2;
	var v;

	d1 = afinn96();
	d2 = afinn96();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ][ 0 ];
	d1[ 5 ][ 0 ] = 'beep';

	t.equal( d1[ 5 ][ 0 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ][ 0 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a deep copy (browser)', function test( t ) {
	var afinn96;
	var d1;
	var d2;
	var v;

	afinn96 = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	d1 = afinn96();
	d2 = afinn96();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ][ 0 ];
	d1[ 5 ][ 0 ] = 'beep';

	t.strictEqual( d1[ 5 ][ 0 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.strictEqual( d2[ 5 ][ 0 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a deep copy (non-browser)', function test( t ) {
	var afinn96;
	var d1;
	var d2;
	var v;

	afinn96 = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	d1 = afinn96();
	d2 = afinn96();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ][ 0 ];
	d1[ 5 ][ 0 ] = 'beep';

	t.strictEqual( d1[ 5 ][ 0 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.strictEqual( d2[ 5 ][ 0 ], v, 'expected element' );

	t.end();
});
