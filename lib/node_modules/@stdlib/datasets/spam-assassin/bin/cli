#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Prints data as newline-delimited JSON (ndjson).
*
* @private
*/
function ndjson() {
	var data;
	var i;

	data = require( './../lib' )();
	for ( i = 0; i < data.length; i++ ) {
		console.log( JSON.stringify( data[i] ) );
	}
} // end FUNCTION ndjson()

/**
* Prints data as lines of text.
*
* @private
*/
function txt() {
	var FILE_LIST;
	var i;

	FILE_LIST = require( './../data/file_list.json' );
	i = 0;

	next();

	/**
	* Callback which processes the next file.
	*
	* @private
	*/
	function next() {
		var fstream;
		var fpath;

		fpath = path.resolve( __dirname, '..', 'data', FILE_LIST[ i ] );
		fstream = fs.createReadStream( fpath );
		fstream.on( 'close', onClose );
		fstream.pipe( process.stdout );
	} // end FUNCTION next()

	/**
	* Callback invoked upon a stream close.
	*
	* @private
	* @returns {void}
	*/
	function onClose() {
		i += 1;
		if ( i === FILE_LIST.length ) {
			return process.exit( 0 );
		}
		console.log( '\n' );
		next();
	} // end FUNCTION onClose()
} // end FUNCTION txt()


// VARIABLES //

var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
if ( args.format === 'ndjson' ) {
	ndjson();
} else {
	txt();
}
