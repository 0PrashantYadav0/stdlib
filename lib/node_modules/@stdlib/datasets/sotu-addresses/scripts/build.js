'use strict';

// MODULES //

var debug = require( 'debug' )( 'sotu-addresses:build' );
var fs = require( 'fs' );
var join = require( 'path' ).join;
var readDir = require( '@stdlib/fs/read-dir' );
var readFile = require( '@stdlib/fs/read-file' );
var extname = require( '@stdlib/utils/extname' );
var replace = require( '@stdlib/string/replace' );
var dataDir = require( './../lib/data_dir.js' );
var unsnakecase = require( './../lib/unsnakecase.js' );
var PARTY = require( './../lib/party.json' );
var RE = require( './../lib/re_filename.js' );


// VARIABLES //

var RAW_EXTNAME = '.txt';
var NUM_FILES = 0;
var COUNT = 0;
var opts = {
	'encoding': 'utf8'
};


// FUNCTIONS //

/**
* Callback invoked upon reading a directory.
*
* @private
* @param {(Error|null)} error - error object
* @returns {StringArray} directory contents
*/
function onDir( error, files ) {
	var fpath;
	var stats;
	var f;
	var i;
	if ( error ) {
		debug( 'Encountered an error when attempting to read directory contents: %s', error.message );
		throw error;
	}
	debug( 'Successfully read directory contents: %s', files.join( ' ' ) );
	NUM_FILES = files.length;
	for ( i = 0; i < files.length; i++ ) {
		f = files[ i ];
		if ( extname( f ) === RAW_EXTNAME && RE.test( f ) ) {
			fpath = join( dataDir, f );
			debug( 'Possible raw data file: %s', fpath );
			stats = fs.stat( fpath, onStat( files[ i ] ) );
		} else {
			NUM_FILES -= 1;
		}
	}
} // end FUNCTION onDir()

/**
* Returns a callback to be invoked upon reading file stats.
*
* @private
* @param {string} file - file name
* @returns {Callback} callback
*/
function onStat( file ) {
	/**
	* Callback invoked upon reading file stats.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} stats object
	*/
	return function onStat( error, stats ) {
		var fpath;
		if ( error ) {
			debug( 'Encountered an error when attempting to read file stats: %s', error.message );
			throw error;
		}
		if ( stats.isFile() ) {
			fpath = join( dataDir, file );
			debug( 'Found a raw data file: %s', file );
			readFile( fpath, opts, onFile( file ) );
		} else {
			NUM_FILES -= 1;
		}
	}; // end FUNCTION onStat()
} // end FUNCTION onStat()

/**
* Returns a callback to be invoked upon reading a file.
*
* @private
* @param {string} file - file name
* @returns {Callback} callback
*/
function onFile( file ) {
	/**
	* Callback invoked upon reading a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(Buffer|string)} data - file data
	*/
	return function onFile( error, data ) {
		if ( error ) {
			debug( 'Encountered an error when attempting to read file contents: %s', error.message );
			throw error;
		}
		debug( 'Successfully read file: %s', file );
		data = data.toString();

		debug( 'Converting file data to JSON.' );
		data = toJSON( file, data );

		writeFile( file, data );
	}; // end FUNCTION onFile()
} // end FUNCTION onFile()

/**
* Converts file data to JSON.
*
* @private
* @param {string} file - file name
* @param {string} data - file data
* @returns {string} data as JSON
*/
function toJSON( file, data ) {
	var parts;
	var out;
	var v;

	parts = file.match( RE );
	out = {};

	v = parseInt( parts[ 1 ], 10 );
	debug( 'Year: %d', v );
	out.year = v;

	v = unsnakecase( parts[ 2 ] );
	debug( 'Name: %s', v );
	out.name = v;

	v = PARTY[ parts[ 3 ] ];
	debug( 'Party: %s', v );
	out.party = v;

	out.text = data;

	return JSON.stringify( out );
} // end FUNCTION toJSON()

/**
* Writes JSON data to file.
*
* @private
* @param {string} file - file name
* @param {string} data - JSON data to write
*/
function writeFile( file, data ) {
	var fpath;
	var ext;
	var f;

	ext = extname( file );
	f = file.substring( 0, file.length-ext.length );
	f += '.json';
	fpath = join( dataDir, f );

	debug( 'Writing data to file: %s', f );
	fs.writeFile( fpath, data, opts, onWrite( f ) );
} // end FUNCTION writeFile()

/**
* Returns a callback to be invoked after writing data to file.
*
* @private
* @param {string} file - file name
* @returns {Callback} callback
*/
function onWrite( file ) {
	/**
	* Callback invoked after writing data to file.
	*
	* @private
	* @param {(Error|null)} error - error object
	*/
	return function onWrite( error ) {
		if ( error ) {
			debug( 'Encountered an error when attempting to write data to file: %s', error.message );
			throw error;
		}
		debug( 'Successfully wrote data to file: %s', file );
		COUNT += 1;
		if ( COUNT === NUM_FILES ) {
			debug( 'Successfully converted all data files.' );
			debug( 'Reading directory contents: %s', dataDir );
			readDir( dataDir, onDir2 );
		}
	};
} // end FUNCTION onWrite()

/**
* Callback invoked upon reading the contents of a directory.
*
* @private
* @param {(Error|null)} error - error object
* @param {StringArray} files - directory contents
*/
function onDir2( error, files ) {
	if ( error ) {
		debug( 'Encountered an error when attempting to read directory contents: %s', error.message );
		throw error;
	}
	debug( 'Successfully read directory contents: %s', files.join( ' ' ) );
	findJSON( files );
	findData( files );
} // end FUNCTION onDir2()

/**
* Finds JSON files.
*
* @private
* @param {StringArray} files - file names
*/
function findJSON( files ) {
	var total;
	var count;
	var fpath;
	var stats;
	var out;
	var f;
	var i;

	total = files.length;
	count = 0;
	out = [];
	for ( i = 0; i < files.length; i++ ) {
		f = files[ i ];
		if ( extname( f ) === '.json' && RE.test( f ) ) {
			fpath = join( dataDir, f );
			debug( 'Possible JSON data file: %s', f );
			stats = fs.stat( fpath, onStats( f ) );
		} else {
			total -= 1;
		}
	}
	/**
	* Returns a callback to be invoked upon reading file stats.
	*
	* @private
	* @param {string} file - file name
	* @returns {Callback} callback
	*/
	function onStats( file ) {
		/**
		* Callback invoked upon reading file stats.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {Object} stats - file stats
		*/
		return function onStats( error, stats ) {
			if ( error ) {
				debug( 'Encountered an error when attempting to read file stats: %s', error.message );
				throw error;
			}
			if ( stats.isFile() ) {
				count += 1;
				debug( 'Found JSON data file: %s', file );
				out.push( file );
			} else {
				total -= 1;
			}
			if ( count === total ) {
				debug( 'Finished analyzing directory contents.' );
				browserScript( out.sort() );
			}
		}; // end FUNCTION onStats()
	} // end FUNCTION onStats()
} // end FUNCTION findJSON()

/**
* Generates a browser script.
*
* @private
* @param {StringArray} files - data files
*/
function browserScript( files ) {
	var opath;
	var fpath;
	var opts;
	var str;
	var i;

	debug( 'Generating browser script...' );

	str = '// This file is generated using `scripts/build.js`.\n';
	str += '\'use strict\'\n';
	str += '\n';
	str += 'var db = new Array( '+files.length+' );\n';
	for ( i = 0; i < files.length; i++ ) {
		fpath = './../data/'+files[ i ]; // relative path
		str += 'db[ '+i+' ] = require( \''+fpath+'\' );\n';
	}
	str += '\n';
	str += '\n';
	str += '// EXPORTS //\n';
	str += '\n';
	str += 'module.exports = db;\n';

	opts = {
		'encoding': 'utf8'
	};

	opath = join( __dirname, '..', 'lib', 'browser_db.js' );
	debug( 'Writing script to file: %s', opath );
	fs.writeFile( opath, str, opts, onWriteScript );

	opath = join( __dirname, '..', 'lib', 'browser_file_list.json' );
	debug( 'Writing file list to file: %s' );
	fs.writeFile( opath, JSON.stringify( files ), opts, onWriteList );
} // end FUNCTION browserScript()

/**
* Callback invoked upon writing a script to file.
*
* @private
* @param {(Error|null)} error - error object
*/
function onWriteScript( error ) {
	if ( error ) {
		debug( 'Encountered an error when attempting to write browser script to file: %s', error.message );
		throw error;
	}
	debug( 'Successfully wrote browser script to file.' );
} // end FUNCTION onWriteScript()

/**
* Callback invoked upon writing a file list to file.
*
* @private
* @param {(Error|null)} error - error object
*/
function onWriteList( error ) {
	if ( error ) {
		debug( 'Encountered an error when attempting to write browser file list to file: %s', error.message );
		throw error;
	}
	debug( 'Successfully wrote browser file list to file.' );
} // end FUNCTION onWriteList()

/**
* Finds data files.
*
* @private
* @param {StringArray} files - file names
*/
function findData( files ) {
	var total;
	var count;
	var fpath;
	var stats;
	var out;
	var ext;
	var f;
	var i;

	total = files.length;
	count = 0;
	out = [];
	for ( i = 0; i < files.length; i++ ) {
		f = files[ i ];
		ext = extname( f );
		if (
			(
				ext === '.json' ||
				ext === '.txt'
			) &&
			RE.test( f )
		) {
			fpath = join( dataDir, f );
			debug( 'Possible data file: %s', f );
			stats = fs.stat( fpath, onStats( f ) );
		} else {
			total -= 1;
		}
	}
	/**
	* Returns a callback to be invoked upon reading file stats.
	*
	* @private
	* @param {string} file - file name
	* @returns {Callback} callback
	*/
	function onStats( file ) {
		/**
		* Callback invoked upon reading file stats.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {Object} stats - file stats
		*/
		return function onStats( error, stats ) {
			if ( error ) {
				debug( 'Encountered an error when attempting to read file stats: %s', error.message );
				throw error;
			}
			if ( stats.isFile() ) {
				count += 1;
				debug( 'Found data file: %s', file );
				out.push( file );
			} else {
				total -= 1;
			}
			if ( count === total ) {
				debug( 'Finished analyzing directory contents.' );
				datapackage( out.sort() );
			}
		}; // end FUNCTION onStats()
	} // end FUNCTION onStats()
} // end FUNCTION findData()

/**
* Updates a `datapackage.json` file.
*
* @private
* @param {StringArray} files - file names
*/
function datapackage( files ) {
	var fpath;
	var parts;
	var name;
	var opts;
	var obj;
	var pkg;
	var arr;
	var ext;
	var re;
	var yr;
	var i;

	fpath = join( __dirname, '..', 'datapackage.json' );
	pkg = require( fpath );

	re = /[_\.]/g;

	arr = new Array( files.length );
	for ( i = 0; i < files.length; i++ ) {
		ext = extname( files[ i ] );
		parts = files[ i ].match( RE );
		yr = parseInt( parts[ 1 ], 10 );
		name = unsnakecase( parts[ 2 ] );
		obj = {
			'name': replace( files[ i ], re, '-' ),
			'title': 'State of the Union Address',
			'description': 'State of the Union address given by '+name+' in '+yr+'.',
			'format': '',
			'mediatype': '',
			'encoding': 'UTF-8',
			'hash': '',
			'path': './data/'+files[ i ]
		};
		if ( ext === '.txt' ) {
			obj.format = 'text';
			obj.mediatype = 'plain/text';
		} else if ( ext === '.json' ) {
			obj.format = 'json';
			obj.mediatype = 'application/json';
		}
		arr[ i ] = obj;
	}
	pkg.resources = arr;
	pkg = JSON.stringify( pkg, null, '  ' );

	opts = {
		'encoding': 'utf8'
	};
	debug( 'Writing data package to file: %s', fpath );
	fs.writeFile( fpath, pkg, opts, onWritePkg );
} // end FUNCTION datapackage()

/**
* Callback invoked upon writing a data package to file.
*
* @private
* @param {(Error|null)} error - error object
*/
function onWritePkg( error ) {
	if ( error ) {
		debug( 'Encountered an error when attempting to write data package to file: %s', error.message );
		throw error;
	}
	debug( 'Successfully wrote data package to file.' );
} // end FUNCTION onWritePkg()

/**
* Main execution sequence.
*
* @private
*/
function main() {
	debug( 'Reading directory contents: %s', dataDir );
	readDir( dataDir, onDir );
} // end FUNCTION main()


// MAIN //

main();
