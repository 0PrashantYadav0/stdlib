'use strict';

// MODULES //

var debug = require( 'debug' )( 'sotu-addresses:build' );
var fs = require( 'fs' );
var join = require( 'path' ).join;
var readDir = require( '@stdlib/fs/read-dir' );
var readFile = require( '@stdlib/fs/read-file' );
var extname = require( '@stdlib/utils/extname' );
var dataDir = require( './../lib/data_dir.js' );
var unsnakecase = require( './../lib/unsnakecase.js' );
var PARTY = require( './../lib/party.json' );
var RE = require( './../lib/re_filename.js' );


// VARIABLES //

var RAW_EXTNAME = '.txt';
var opts = {
	'encoding': 'utf8'
};


// FUNCTIONS //

/**
* Callback invoked upon reading a directory.
*
* @private
* @param {(Error|null)} error - error object
* @returns {StringArray} directory contents
*/
function onDir( error, files ) {
	var fpath;
	var stats;
	var f;
	var i;
	if ( error ) {
		debug( 'Encountered an error when attempting to read directory contents: %s', error.message );
		throw error;
	}
	debug( 'Successfully read directory contents: %s', files.join( ' ' ) );
	for ( i = 0; i < files.length; i++ ) {
		f = files[ i ];
		if ( extname( f ) === RAW_EXTNAME && RE.test( f ) ) {
			fpath = join( dataDir, f );
			debug( 'Possible raw data file: %s', fpath );
			stats = fs.stat( fpath, onStat( files[ i ] ) );
		}
	}
} // end FUNCTION onDir()

/**
* Returns a callback to be invoked upon reading file stats.
*
* @private
* @param {string} file - file name
* @returns {Callback} callback
*/
function onStat( file ) {
	/**
	* Callback invoked upon reading file stats.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} stats object
	*/
	return function onStat( error, stats ) {
		var fpath;
		if ( error ) {
			debug( 'Encountered an error when attempting to read file stats: %s', error.message );
			throw error;
		}
		if ( stats.isFile() ) {
			fpath = join( dataDir, file );
			debug( 'Found a raw data file: %s', file );
			readFile( fpath, opts, onFile( file ) );
		}
	}; // end FUNCTION onStat()
} // end FUNCTION onStat()

/**
* Returns a callback to be invoked upon reading a file.
*
* @private
* @param {string} file - file name
* @returns {Callback} callback
*/
function onFile( file ) {
	/**
	* Callback invoked upon reading a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(Buffer|string)} data - file data
	*/
	return function onFile( error, data ) {
		if ( error ) {
			debug( 'Encountered an error when attempting to read file contents: %s', error.message );
			throw error;
		}
		debug( 'Successfully read file: %s', file );
		data = data.toString();

		debug( 'Converting file data to JSON.' );
		data = toJSON( file, data );

		writeFile( file, data );
	}; // end FUNCTION onFile()
} // end FUNCTION onFile()

/**
* Converts file data to JSON.
*
* @private
* @param {string} file - file name
* @param {string} data - file data
* @returns {Object} data as JSON
*/
function toJSON( file, data ) {
	var parts;
	var out;
	var v;

	parts = file.match( RE );
	out = {};

	v = parseInt( parts[ 1 ], 10 );
	debug( 'Year: %d', v );
	out.year = v;

	v = unsnakecase( parts[ 2 ] );
	debug( 'Name: %s', v );
	out.name = v;

	v = PARTY[ parts[ 3 ] ];
	debug( 'Party: %s', v );
	out.party = v;

	out.text = data;

	return out;
} // end FUNCTION toJSON()

/**
* Writes JSON data to file.
*
* @private
* @param {string} file - file name
* @param {Object} data - JSON data to write
*/
function writeFile( file, data ) {
	var fpath;
	var ext;
	var f;

	ext = extname( file );
	f = file.substring( 0, file.length-ext.length );
	f += '.json';
	fpath = join( dataDir, f );

	data = JSON.stringify( data );
	fs.writeFile( fpath, data, opts, onWrite( f ) );
} // end FUNCTION writeFile()

/**
* Returns a callback to be invoked after writing data to file.
*
* @private
* @param {string} file - file name
* @returns {Callback} callback
*/
function onWrite( file ) {
	/**
	* Callback invoked after writing data to file.
	*
	* @private
	* @param {(Error|null)} error - error object
	*/
	return function onWrite( error ) {
		if ( error ) {
			debug( 'Encountered an error when attempting to write data to file: %s', error.message );
			throw error;
		}
		debug( 'Successfully wrote data to file: %s', file );
	};
} // end FUNCTION onWrite()

/**
* Main execution sequence.
*
* @private
*/
function main() {
	readDir( dataDir, onDir );
} // end FUNCTION main()


// MAIN //

main();
