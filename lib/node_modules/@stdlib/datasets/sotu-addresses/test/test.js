'use strict';

// MODULES //

var tape = require( 'tape' );
var isObjectArray = require( '@stdlib/utils/is-object' ).isObjectArray; // TODO: plain object
var sotu = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof sotu, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an object array', function test( t ) {
	var out = sotu();
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.end();
});

tape( 'the function throws an error if the provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			sotu({
				'name': value
			});
		};
	}
});

tape( 'the `name` option can be used to retrieve addresses by specific presidents', function test( t ) {
	var bool;
	var out;
	var i;

	out = sotu({
		'name': 'Barack Obama'
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.equal( out.length, 8, 'returns selected speeches' );

	for ( i = 0; i < out.length; i++ ) {
		t.equal( out[ i ].name, 'Barack Obama', 'speech is from expected President' );
	}

	out = sotu({
		'name': [ 'George Bush', 'George W. Bush' ]
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.equal( out.length, 12, 'returns selected speeches' );

	for ( i = 0; i < out.length; i++ ) {
		bool = ( out[ i ].name === 'George Bush' || out[ i ].name === 'George W Bush' );
		t.equal( bool, true, 'speech is from one of the Bushes' );
	}
	t.end();
});

tape( 'the `party` option can be used to retrieve addresses from presidents belonging to particular political parties', function test( t ) {
	var bool;
	var out;
	var i;

	out = sotu({
		'party': 'Democratic'
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );

	for ( i = 0; i < out.length; i++ ) {
		t.equal( out[ i ].party, 'Democratic', 'speech is from a Democratic President' );
	}

	out = sotu({
		'party': [ 'Democratic', 'Republican' ]
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );

	for ( i = 0; i < out.length; i++ ) {
		bool = ( out[ i ].party === 'Democratic' || out[ i ].party === 'Republican' );
		t.equal( bool, true, 'speech is from a Democratic or Republican President' );
	}
	t.end();
});

tape( 'the `range` option can be used to retrieve addresses of a given time period', function test( t ) {
	var out;

	out = sotu({
		'range': [ 1980, 1995 ]
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.equal( out.length, 16, 'returns speeches from 1980 to 1995' );

	out = sotu({
		'range': [ 1880, 1920 ]
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.equal( out.length, 41, 'returns speeches from 1880 to 1920' );

	out = sotu({
		'range': [ 1920, 1970 ]
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.equal( out.length, 52, 'returns speeches from 1920 to 1970' );

	out = sotu({
		'range': [ 1935, 1960 ]
	});
	t.equal( isObjectArray( out ), true, 'returns an object array' );
	t.equal( out.length, 27, 'returns speeches from 1935 to 1960' );

	t.end();
});
