'use strict';

// MODULES //

var tape = require( 'tape' );
var isArray = require( '@stdlib/utils/is-array' );
var getSpeeches = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof getSpeeches, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an array of all SOTU addresses', function test( t ) {
	var out = getSpeeches();
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 228, 'returns all speeches' );
	t.end();
});

tape( 'the function throws an error if the provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		'abc',
		undefined,
		NaN,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function() {
			getSpeeches({
				'lazy': value
			});
		};
	}
});

tape( 'the `president` option can be used to only retrieve addresses by specific presidents', function test( t ) {
	var out;
	var i;

	out = getSpeeches({
		'president': 'Barack Obama'
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 8, 'returns selected speeches' );

	for ( i = 0; i < out.length; i++ ) {
		t.equal(
			out[ i ].president === 'Barack Obama',
			true,
			'speech is from Barack Obama'
		);
	}

	out = getSpeeches({
		'president': [ 'George Bush', 'George W. Bush' ]
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 12, 'returns selected speeches' );

	for ( i = 0; i < out.length; i++ ) {
		t.equal(
			out[ i ].president === 'George Bush' || out[ i ].president === 'George W Bush',
			true,
			'speech is from one of the Bushes'
		);
	}
	t.end();
});

tape( 'the `party` option can be used to only retrieve addresses from presidents belonging to particular political parties', function test( t ) {
	var out;
	var i;

	out = getSpeeches({
		'party': 'Democratic'
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 89, 'returns selected speeches' );

	for ( i = 0; i < out.length; i++ ) {
		t.equal(
			out[ i ].party === 'Democratic',
			true,
			'speech is from a democratic president'
		);
	}

	out = getSpeeches({
		'party': [ 'Democratic', 'Republican' ]
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 177, 'returns selected speeches' );

	for ( i = 0; i < out.length; i++ ) {
		t.equal(
			out[ i ].party === 'Democratic' || out[ i ].party === 'Republican',
			true,
			'speech is from a democratic or republican president'
		);
	}
	t.end();
});

tape( 'the `range` option can be used to only retrieve addresses of a given time period', function test( t ) {
	var out;

	out = getSpeeches({
		'range': [ 1980, 1995 ]
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 16, 'returns speeches from 1980 to 1995' );

	out = getSpeeches({
		'range': [ 1880, 1920 ]
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 41, 'returns speeches from 1880 to 1920' );

	out = getSpeeches({
		'range': [ 1920, 1970 ]
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 52, 'returns speeches from 1920 to 1970' );

	out = getSpeeches({
		'range': [ 1935, 1960 ]
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.equal( out.length, 27, 'returns speeches from 1935 to 1960' );

	t.end();
});

tape( 'when the `lazy` option is set to false, all speeches are laoded into the cache no matter the query', function test( t ) {
	var out = getSpeeches({
		'range': [ 1980, 1995 ],
		'president': 'George Bush',
		'lazy': false
	});
	t.equal( isArray( out ), true, 'returns an array' );
	t.end();
});
