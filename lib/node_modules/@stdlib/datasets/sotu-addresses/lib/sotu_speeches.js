'use strict';

// MODULES //

var removePunctuation = require( '@stdlib/string/remove-punctuation' );
var contains = require( '@stdlib/utils/contains' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var copy = require( '@stdlib/utils/copy' );
var partyDict = require( './dict.js' );
var validate = require( './validate.js' );
var cache = require( './cache.js' );


// FUNCTIONS //

/**
* Calculate the index of FILES corresponding to the given year.
*
* @private
* @param {Integer} year - input year
* @returns {PositiveInteger} index of FILES
*
* @example
* var year = 1980;
* var out = getIndex( year );
* // returns 191
*/
function getIndex( year ) {
	// Adjust index due to fact that two SOTU addresses were given in 1961 and 1953 and none in 1933...
	if ( year > 1961 ) {
		year += 1;
	}
	else if ( year > 1953 ) {
		year += 0;
	}
	else if ( year > 1933 ) {
		year += -1;
	}
	year -= 1790;
	return year;
} // end FUNCTION getIndex()

/**
* Verifies whether the input file corresponds to an address by a president from the chosen political parties.
*
* @private
* @param {string} fname - file name
* @param {(string|StringArray)} party - string or string array of political parties
* @returns {boolean} boolean indicating whether file corresponds to address from president of one of the supplied parties
*
* @example
* var file = '2016_barack_obama_d.txt';
* var party = 'Democratic';
* var bool = checkParty( file, party );
* // returns true
*
* @example
* var file = '2016_barack_obama_d.txt';
* var parties = [ 'Democratic', 'Republican' ];
* var bool = checkParty( file, parties );
* // returns true
*
* file = '2014_george_w_bush_r.txt';
* bool = checkParty( file, parties );
* // returns true
*
* file = '1790_george_washington_n.txt';
* bool = checkParty( file, parties );
* // returns false
*/
function checkParty( fname, party ) {
	var abbr;
	var i;
	if ( !party ) {
		return true;
	}
	if ( isString( party ) ) {
		abbr = fname.match( /_([a-z]*).txt/ )[ 1 ];
		return abbr === partyDict.abbreviation[ party ];
	}
	// Case: `party` is a string array
	i = 0;
	do {
		abbr = fname.match( /_([a-z]*).txt/ )[ 1 ];
		if ( abbr === partyDict.abbreviation[ party[ i ] ] ) {
			return true;
		}
		i += 1;
	} while ( i < party.length );
	return false;
} // end FUNCTION checkParty()

/**
* Verifies whether the input file corresponds to an address by one of the supplied presidents.
*
* @private
* @param {string} fname - file name
* @param {(string|StringArray)} president - string or string array of president(s)
* @returns {boolean} boolean indicating whether file corresponds to address from one of the supplied presidents
*
* @example
* var file = '2016_barack_obama_d.txt';
* var president = 'Barack Obama';
* var bool = checkPresident( file, president );
* // returns true
*
* @example
* var file = '2016_barack_obama_d.txt';
* var presidents = [ 'Barack Obama', 'George Washington' ];
* var bool = checkPresident( file, presidents );
* // returns true
*
* file = '2014_george_w_bush_r.txt';
* bool = checkPresident( file, presidents );
* // returns false
*
* file = '1790_george_washington_n.txt';
* bool = checkPresident( file, presidents );
* // returns true
*/
function checkPresident( fname, president ) {
	var str;
	var i;
	if ( !president ) {
		return true;
	}
	if ( isString( president ) ) {
		str = removePunctuation( president.toLowerCase().split( ' ' ).join( '_' ) );
		return contains( fname, str );
	}
	// Case: `president` is a string array
	for ( i = 0; i < president.length; i++ ) {
		str = removePunctuation( president[ i ].toLowerCase().split( ' ' ).join( '_' ) );
		if ( contains( fname, str ) ) {
			return true;
		}
	}
	return false;
} // end FUNCTION checkPresident()


// SOTU ADDRESSES //

/**
* Load "State of the Union" addresses by U.S. presidents.
*
* @param {Options} [options] - options object
* @param {(string|StringArray)} [options.president] - name of president
* @param {PositiveIntegerArray} [options.range] - year range for SOTU addresses
* @param {(string|StringArray)} [options.party] - political party
* @param {boolean} [options.lazy=true] - specifies whether data should be loaded lazily
* @returns {Array} object array holding the SOTU addresses
*
* @example
* var out = getSpeeches();
* // returns <Array>
* @example
* out = getSpeeches({
*	'president': [ 'Ronald Reagan', 'William J. Clinton' ]
* });
* // returns <Array>
*/
function getSpeeches( options ) {
	var lazyLoading;
	var president;
	var nFiles;
	var files;
	var party;
	var start;
	var opts;
	var end;
	var err;
	var ret;
	var val;
	var i;

	opts = {};
	if ( arguments.length > 0 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	lazyLoading = opts.lazy !== void 0 ? opts.lazy : true;
	party = opts.party;
	president = opts.president;
	files = [];

	if ( !lazyLoading ) {
		// Load all files into cache if lazy-loading is disabled:
		cache.loadAll();
	}
	if ( opts.range ) {
		start = getIndex( opts.range[ 0 ] );
		end = getIndex( opts.range[ 1 ] );
		for ( i = start; i <= end; i++ ) {
			if (
				checkParty( cache.filelist[ i ], party ) &&
				checkPresident( cache.filelist[ i ], president )
			) {
				files.push( cache.filelist[ i ] );
			}
		}
	}
	else {
		for ( i = 0; i < cache.filelist.length; i++ ) {
			if (
				checkParty( cache.filelist[ i ], party ) &&
				checkPresident( cache.filelist[ i ], president )
			) {
				files.push( cache.filelist[ i ] );
			}
		}
	}
	nFiles = files.length;
	ret = new Array( nFiles );
	for ( i = 0; i < nFiles; i++ ) {
		val = cache.get( files[ i ] );
		ret[ i ] = copy( val );
	}
	return ret;
} // end FUNCTION getSpeeches()


// EXPORTS //

module.exports = getSpeeches;
