'use strict';

// MODULES //

var capitalize = require( '@stdlib/utils/capitalize-string' );
var path = require( 'path' );
var fs = require( 'fs' );
var partyDict = require( './dict.js' );


// CONSTANTS //

var REGEX_FILE_NAME_SPLITTER = /^([0-9]{4})_([\S\s]*)_([a-z]*)\.txt/;
var FILES = fs.readdirSync( path.join( __dirname, '..', 'data' ) ).sort();


// FUNCTIONS //

/**
* Parses president name from file path part.
*
* @private
* @param {string} str - input string
* @returns {string} name of president
*
* @example
* var str = 'william_j_clinton';
* var out = parsePresident( str );
* // return William J Clinton
*/
function parsePresident( str ) {
	var arr;
	var res;
	var i;

	res = '';
	arr = str.split( '_' );
	res += capitalize( arr[ 0 ] );
	for ( i = 1; i < arr.length; i++ ) {
		res += ' ' + capitalize( arr[ i ] );
	}
	return res;
} // end FUNCTION parsePresident()


// CACHE //

var cache = {
	'filelist': FILES
};

/**
* Load all SOTU addresses into cache.
*
* @private
*
* @example
* cache.loadAll();
*/
cache.loadAll = function loadAll() {
	var fpath;
	var match;
	var file;
	var i;
	for ( i = 0; i < FILES.length; i++ ) {
		file = FILES[ i ];
		match = file.match( REGEX_FILE_NAME_SPLITTER );
		fpath = path.join( __dirname, '..', 'data', file );
		this[ file ] = {
			'text': fs.readFileSync( fpath ).toString(),
			'year': parseFloat( match[ 1 ] ),
			'president': parsePresident( match[ 2 ] ),
			'party': partyDict.fullName[ match[ 3 ] ]
		};
	}
}; // end METHOD loadAll()


/**
* Return the SOTU address object corresponding to the supplied file name.
*
* @private
* @returns {Object} SOTU address object
*
* @example
* var file = '2000_william_j_clinton_d.txt';
* var obj = cache.get( file );
* // returns <Object>
*/
cache.get = function get( file ) {
	var fpath;
	var match;
	// Add SOTU address to cache if not already existing:
	if ( !this.hasOwnProperty( file  ) ) {
		match = file.match( REGEX_FILE_NAME_SPLITTER );
		fpath = path.join( __dirname, '..', 'data', file );
		this[ file ] = {
			'text': fs.readFileSync( fpath ).toString(),
			'year': parseFloat( match[ 1 ] ),
			'president': parsePresident( match[ 2 ] ),
			'party': partyDict.fullName[ match[ 3 ] ]
		};
	}
	return this[ file ];
}; // end METHOD get()


// EXPORTS //

module.exports = cache;
