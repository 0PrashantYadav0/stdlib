'use strict';

// MODULES //

var isPositiveIntegerArray = require( '@stdlib/utils/is-positive-integer' ).isPositiveIntegerArray;
var isPrimitiveStringArray = require( '@stdlib/utils/is-string' ).isPrimitiveStringArray;
var isObject = require( '@stdlib/utils/is-object' ); // TODO: is-plain-object
var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitive;
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {(string|StringArray)} [options.president] - name of president
* @param {PositiveIntegerArray} [options.range] - year range of speeches
* @param {(string|StringArray)} [options.party] - political party
* @param {boolean} [options.lazy] - specifies whether data should be loaded lazily
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {};
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( options.hasOwnProperty( 'president' ) ) {
		opts.president = options.president;
		if ( !isString( opts.president ) && !isPrimitiveStringArray( opts.president ) ) {
			return new TypeError( 'invalid option. `president` option must be a string primitive or an array of strings. Option: `' + opts.president + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'range' ) ) {
		opts.range = options.range;
		if ( !isPositiveIntegerArray( opts.range ) || opts.range.length !== 2 ) {
			return new TypeError( 'invalid option. `range` option must be an integer array of length two. Option: `' + opts.range + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'party' ) ) {
		opts.party = options.party;
		if ( !isString( opts.party ) && !isPrimitiveStringArray( opts.party ) ) {
			return new TypeError( 'invalid option. `party` option must be a primitive string or an array of strings. Option: `' + opts.party + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'lazy' ) ) {
		opts.lazy = options.lazy;
		if ( !isBoolean( opts.lazy ) ) {
			return new TypeError( 'invalid option. `lazy` option must be a primitive boolean. Option: `' + opts.lazy + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
