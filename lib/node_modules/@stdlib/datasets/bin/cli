#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var pkg = require( './../package.json' );
var NAMES = require( './../lib/names.json' );
var opts = require( './opts.json' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var dataset;
var args;
var cli;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
if ( hasOwnProp( NAMES, args.name ) ) {
	dataset = NAMES[ args.name ];
} else {
	throw new Error( 'invalid option. Unrecognized/unsupported dataset name. Option: `' + args.name + '`.' );
}
args = args._.slice();


// MAIN //

process.argv = process.argv.slice( 0, 2 ).concat( args );
cli = path.resolve( __dirname, '../'+dataset+'/bin/cli' );
require( cli );
