'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isArray = require( '@stdlib/assert/is-array' );
var data = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof data, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (browser)', function test( t ) {
	var data = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});
	t.strictEqual( typeof data, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (non-browser)', function test( t ) {
	var data = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});
	t.strictEqual( typeof data, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an array of arrays of 2-element arrays', function test( t ) {
	var d;
	var i;
	var j;

	d = data();
	t.strictEqual( isArray( d ), true, 'returns an array' );
	for ( i = 0; i < d.length; i++ ) {
		t.strictEqual( isArray( d[i] ), true, 'element '+i+' is an array' );
		for ( j = 0; j < d[i].length; j++ ) {
			t.strictEqual( isArray( d[i][j] ), true, 'element ('+i+','+j+') is an array' );
			t.strictEqual( d[i][j].length, 2, 'element ('+i+','+j+') is a 2-element array' );
		}
	}
	t.end();
});

tape( 'the function returns an array of 2-element arrays (browser)', function test( t ) {
	var data;
	var d;
	var i;
	var j;

	data = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	d = data();
	t.strictEqual( isArray( d ), true, 'returns an array' );
	for ( i = 0; i < d.length; i++ ) {
		t.strictEqual( isArray( d[i] ), true, 'element '+i+' is an array' );
		for ( j = 0; j < d[i].length; j++ ) {
			t.strictEqual( isArray( d[i][j] ), true, 'element ('+i+','+j+') is an array' );
			t.strictEqual( d[i][j].length, 2, 'element ('+i+','+j+') is a 2-element array' );
		}
	}
	t.end();
});

tape( 'the function returns an array of 2-element arrays (non-browser)', function test( t ) {
	var data;
	var d;
	var i;
	var j;

	data = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	d = data();
	t.strictEqual( isArray( d ), true, 'returns an array' );
	for ( i = 0; i < d.length; i++ ) {
		t.strictEqual( isArray( d[i] ), true, 'element '+i+' is an array' );
		for ( j = 0; j < d[i].length; j++ ) {
			t.strictEqual( isArray( d[i][j] ), true, 'element ('+i+','+j+') is an array' );
			t.strictEqual( d[i][j].length, 2, 'element ('+i+','+j+') is a 2-element array' );
		}
	}
	t.end();
});

tape( 'the function returns a deep copy', function test( t ) {
	var d1;
	var d2;
	var v;

	d1 = data();
	d2 = data();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 1 ][ 0 ];
	d1[ 1 ][ 0 ] = 'beep';

	t.strictEqual( d1[ 1 ][ 0 ], 'beep', 'expected element' );
	t.notEqual( d1[ 1 ], d2[ 1 ], 'no shared state' );
	t.strictEqual( d2[ 1 ][ 0 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a deep copy (browser)', function test( t ) {
	var data;
	var d1;
	var d2;
	var v;

	data = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	d1 = data();
	d2 = data();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 1 ][ 0 ];
	d1[ 1 ][ 0 ] = 'beep';

	t.strictEqual( d1[ 1 ][ 0 ], 'beep', 'expected element' );
	t.notEqual( d1[ 1 ], d2[ 1 ], 'no shared state' );
	t.strictEqual( d2[ 1 ][ 0 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a deep copy (non-browser)', function test( t ) {
	var data;
	var d1;
	var d2;
	var v;

	data = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	d1 = data();
	d2 = data();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 1 ][ 0 ];
	d1[ 1 ][ 0 ] = 'beep';

	t.strictEqual( d1[ 1 ][ 0 ], 'beep', 'expected element' );
	t.notEqual( d1[ 1 ], d2[ 1 ], 'no shared state' );
	t.strictEqual( d2[ 1 ][ 0 ], v, 'expected element' );

	t.end();
});
