'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var words = require( './../lib/liu_positive_opinion_words_en.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof words, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if unable to load data', function test( t ) {
	var words = proxyquire( './../lib/liu_positive_opinion_words_en.js', {
		'@stdlib/fs/read-json': {
			'sync': readJSON
		}
	});
	t.throws( words, Error, 'throws an error' );
	t.end();

	function readJSON() {
		return new Error( 'unable to read data' );
	}
});

tape( 'the function returns a copy', function test( t ) {
	var d1;
	var d2;
	var v;

	d1 = words();
	d2 = words();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ];
	d1[ 5 ] = 'beep';

	t.equal( d1[ 5 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a copy (browser)', function test( t ) {
	var words;
	var d1;
	var d2;
	var v;

	words = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	d1 = words();
	d2 = words();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ];
	d1[ 5 ] = 'beep';

	t.equal( d1[ 5 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a copy (non-browser)', function test( t ) {
	var words;
	var d1;
	var d2;
	var v;

	words = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	d1 = words();
	d2 = words();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ];
	d1[ 5 ] = 'beep';

	t.equal( d1[ 5 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ], v, 'expected element' );

	t.end();
});
