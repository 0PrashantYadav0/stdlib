'use strict';

// MODULES //

var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var readJSON = require( '@stdlib/fs/read-json' ).sync;


// VARIABLES //

var dataPath = resolve( __dirname, '..', 'data' );
var fileList = [
	'./contents.json',
	'./etymology.json',
	'./extracts.json',
	'./chapter_1.json',
	'./chapter_2.json',
	'./chapter_3.json',
	'./chapter_4.json',
	'./chapter_5.json',
	'./chapter_6.json',
	'./chapter_7.json',
	'./chapter_8.json',
	'./chapter_9.json',
	'./chapter_10.json',
	'./chapter_11.json',
	'./chapter_12.json',
	'./chapter_13.json',
	'./chapter_14.json',
	'./chapter_15.json',
	'./chapter_16.json',
	'./chapter_17.json',
	'./chapter_18.json',
	'./chapter_19.json',
	'./chapter_20.json',
	'./chapter_21.json',
	'./chapter_22.json',
	'./chapter_23.json',
	'./chapter_24.json',
	'./chapter_25.json',
	'./chapter_26.json',
	'./chapter_27.json',
	'./chapter_28.json',
	'./chapter_29.json',
	'./chapter_30.json',
	'./chapter_31.json',
	'./chapter_32.json',
	'./chapter_33.json',
	'./chapter_34.json',
	'./chapter_35.json',
	'./chapter_36.json',
	'./chapter_37.json',
	'./chapter_38.json',
	'./chapter_39.json',
	'./chapter_40.json',
	'./chapter_41.json',
	'./chapter_42.json',
	'./chapter_43.json',
	'./chapter_44.json',
	'./chapter_45.json',
	'./chapter_46.json',
	'./chapter_47.json',
	'./chapter_48.json',
	'./chapter_49.json',
	'./chapter_50.json',
	'./chapter_51.json',
	'./chapter_52.json',
	'./chapter_53.json',
	'./chapter_54.json',
	'./chapter_55.json',
	'./chapter_56.json',
	'./chapter_57.json',
	'./chapter_58.json',
	'./chapter_59.json',
	'./chapter_60.json',
	'./chapter_61.json',
	'./chapter_62.json',
	'./chapter_63.json',
	'./chapter_64.json',
	'./chapter_65.json',
	'./chapter_66.json',
	'./chapter_67.json',
	'./chapter_68.json',
	'./chapter_69.json',
	'./chapter_70.json',
	'./chapter_71.json',
	'./chapter_72.json',
	'./chapter_73.json',
	'./chapter_74.json',
	'./chapter_75.json',
	'./chapter_76.json',
	'./chapter_77.json',
	'./chapter_78.json',
	'./chapter_79.json',
	'./chapter_80.json',
	'./chapter_81.json',
	'./chapter_82.json',
	'./chapter_83.json',
	'./chapter_84.json',
	'./chapter_85.json',
	'./chapter_86.json',
	'./chapter_87.json',
	'./chapter_88.json',
	'./chapter_89.json',
	'./chapter_90.json',
	'./chapter_91.json',
	'./chapter_92.json',
	'./chapter_93.json',
	'./chapter_94.json',
	'./chapter_95.json',
	'./chapter_96.json',
	'./chapter_97.json',
	'./chapter_98.json',
	'./chapter_99.json',
	'./chapter_100.json',
	'./chapter_101.json',
	'./chapter_102.json',
	'./chapter_103.json',
	'./chapter_104.json',
	'./chapter_105.json',
	'./chapter_106.json',
	'./chapter_107.json',
	'./chapter_108.json',
	'./chapter_109.json',
	'./chapter_110.json',
	'./chapter_111.json',
	'./chapter_112.json',
	'./chapter_113.json',
	'./chapter_114.json',
	'./chapter_115.json',
	'./chapter_116.json',
	'./chapter_117.json',
	'./chapter_118.json',
	'./chapter_119.json',
	'./chapter_120.json',
	'./chapter_121.json',
	'./chapter_122.json',
	'./chapter_123.json',
	'./chapter_124.json',
	'./chapter_125.json',
	'./chapter_126.json',
	'./chapter_127.json',
	'./chapter_128.json',
	'./chapter_129.json',
	'./chapter_130.json',
	'./chapter_131.json',
	'./chapter_132.json',
	'./chapter_133.json',
	'./chapter_134.json',
	'./chapter_135.json',
	'./epilogue.json'
];
var opts = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Returns the text of Moby Dick.
*
* ## Notes
*
* * This function synchronously reads data from disk for each invocation. Such behavior is intentional and so is the avoidance of `require`. We assume that invocations are infrequent, and we want to avoid the `require` cache. This means that we allow data to be garbage collected and a user is responsible for explicitly caching data.
*
*
* @throws {Error} unable to read data
* @returns {ObjectArray} data
*
* @example
* var data = text();
* // returns [{...},{...},...]
*/
function text() {
	var fpath;
	var data;
	var text;
	var i;

	data = new Array( 139 );
	for ( i = 0; i < data.length; i++ ) {
		fpath = join( dataPath, fileList[ i ] );
		text = readJSON( fpath, opts );
		if ( text instanceof Error ) {
			throw text;
		}
		data[ i ] = text;
	}
	return data;
} // end FUNCTION text()


// EXPORTS //

module.exports = text;
