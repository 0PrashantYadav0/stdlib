'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var months = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof months, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (browser)', function test( t ) {
	var months = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});
	t.equal( typeof months, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (non-browser)', function test( t ) {
	var months = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});
	t.equal( typeof months, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an array of string primitives', function test( t ) {
	var list = months();
	t.equal( isStringArray( list ), true, 'returns an array of string primitives' );
	t.equal( list.length, 12, 'has length of 12' );
	t.end();
});

tape( 'the function returns an array of string primitives (browser)', function test( t ) {
	var months;
	var list;

	months = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	list = months();
	t.equal( isStringArray( list ), true, 'returns an array of string primitives' );
	t.equal( list.length, 12, 'has length of 12' );
	t.end();
});

tape( 'the function returns an array of string primitives (non-browser)', function test( t ) {
	var months;
	var list;

	months = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	list = months();
	t.equal( isStringArray( list ), true, 'returns an array of string primitives' );
	t.equal( list.length, 12, 'has length of 12' );
	t.end();
});

tape( 'the function returns a copy', function test( t ) {
	var l1;
	var l2;

	l1 = months();
	l2 = months();

	t.notEqual( l1, l2, 'different references' );

	l1[ 5 ] = 'beep';

	t.equal( l1[ 5 ], 'beep', 'expected element' );
	t.notEqual( l1[ 5 ], l2[ 5 ], 'no shared state' );
	t.equal( l2[ 5 ], 'June', 'expected element' );

	t.end();
});

tape( 'the function returns a copy (browser)', function test( t ) {
	var months;
	var l1;
	var l2;

	months = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	l1 = months();
	l2 = months();

	t.notEqual( l1, l2, 'different references' );

	l1[ 5 ] = 'beep';

	t.equal( l1[ 5 ], 'beep', 'expected element' );
	t.notEqual( l1[ 5 ], l2[ 5 ], 'no shared state' );
	t.equal( l2[ 5 ], 'June', 'expected element' );

	t.end();
});

tape( 'the function returns a copy (non-browser)', function test( t ) {
	var months;
	var l1;
	var l2;

	months = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	l1 = months();
	l2 = months();

	t.notEqual( l1, l2, 'different references' );

	l1[ 5 ] = 'beep';

	t.equal( l1[ 5 ], 'beep', 'expected element' );
	t.notEqual( l1[ 5 ], l2[ 5 ], 'no shared state' );
	t.equal( l2[ 5 ], 'June', 'expected element' );

	t.end();
});
