'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var isObject = require( '@stdlib/utils/is-object' ); // TODO: is-plain-object
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.data] - dataset name
* @param {(PositiveInteger|PositiveIntegerArray)}
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'data': 'army
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'data' ) ) {
		opts.data = options.data;
		if ( !isString( opts.data ) ) {
			return new TypeError( 'invalid option. `data` option must be a string primitive. Option: `' + opts.data + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
