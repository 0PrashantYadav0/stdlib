#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var getKeys = require( 'object-keys' ).shim();
var indexOf = require( '@stdlib/utils/index-of' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Prints data as CSV.
*
* @private
* @param {string} filename - file name (no extension)
*/
function csv( filename ) {
	var fpath = path.resolve( __dirname, '../data/'+filename+'.csv' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION csv()


// VARIABLES //

var names;
var data;
var keys;
var args;
var i;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.data ) {
	opts.data = args.data;
}
names = [ 'army', 'cities', 'temperature' ];
if ( indexOf( names, opts.data ) !== -1 ) {
	return csv( opts.data );
}


// MAIN //

data = require( './../lib' )( opts );
keys = getKeys( data );
for ( i = 0; i < keys.length; i++ ) {
	console.log( JSON.stringify( data[ keys[i] ] ) );
}
