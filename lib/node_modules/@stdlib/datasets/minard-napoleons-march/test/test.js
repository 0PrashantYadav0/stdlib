'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isObjectArray = require( '@stdlib/assert/is-plain-object-array' );
var minard = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof minard, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (browser)', function test( t ) {
	var minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});
	t.equal( typeof minard, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (non-browser)', function test( t ) {
	var minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});
	t.equal( typeof minard, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if the provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			minard( value );
		};
	}
});

tape( 'the function throws an error if the provided an options argument which is not an object (browser)', function test( t ) {
	var minard;
	var values;
	var i;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	values = [
		'5',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			minard( value );
		};
	}
});

tape( 'the function throws an error if the provided an options argument which is not an object (non-browser)', function test( t ) {
	var minard;
	var values;
	var i;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	values = [
		'5',
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			minard( value );
		};
	}
});

tape( 'the function throws an error if the provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			minard({
				'data': value
			});
		};
	}
});

tape( 'the function throws an error if the provided an invalid option (browser)', function test( t ) {
	var minard;
	var values;
	var i;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			minard({
				'data': value
			});
		};
	}
});

tape( 'the function throws an error if the provided an invalid option (non-browser)', function test( t ) {
	var minard;
	var values;
	var i;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			minard({
				'data': value
			});
		};
	}
});

tape( 'the function throws an error if provided an unrecognized `data` value', function test( t ) {
	t.throws( foo, RangeError, 'throws a range error' );
	t.end();

	function foo() {
		minard({
			'data': 'beep Boop bop'
		});
	}
});

tape( 'the function throws an error if provided an unrecognized `data` value (browser)', function test( t ) {
	var minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	t.throws( foo, RangeError, 'throws a range error' );
	t.end();

	function foo() {
		minard({
			'data': 'beep Boop bop'
		});
	}
});

tape( 'the function throws an error if provided an unrecognized `data` value (non-browser)', function test( t ) {
	var minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	t.throws( foo, RangeError, 'throws a range error' );
	t.end();

	function foo() {
		minard({
			'data': 'beep Boop bop'
		});
	}
});

tape( 'if not provided a `data` option, the function returns an `object`', function test( t ) {
	var data;
	var d2;

	data = minard();
	t.equal( isObject( data ), true, 'returns an object' );
	t.equal( hasOwnProp( data, 'army' ), true, 'has `army` property' );
	t.equal( hasOwnProp( data, 'cities' ), true, 'has `cities` property' );
	t.equal( hasOwnProp( data, 'labels' ), true, 'has `labels` property' );
	t.equal( hasOwnProp( data, 'rivers' ), true, 'has `rivers` property' );
	t.equal( hasOwnProp( data, 'temperature' ), true, 'has `temperature` property' );

	// Should return a deep copy...
	d2 = minard();
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.army, d2.army, 'different reference' );
	t.notEqual( data.cities, d2.cities, 'different reference' );
	t.notEqual( data.labels, d2.labels, 'different reference' );
	t.notEqual( data.rivers, d2.rivers, 'different reference' );
	t.notEqual( data.temperature, d2.temperature, 'different reference' );

	t.end();
});

tape( 'if not provided a `data` option, the function returns an `object` (options)', function test( t ) {
	var data;
	var d2;

	data = minard( {} );
	t.equal( isObject( data ), true, 'returns an object' );
	t.equal( hasOwnProp( data, 'army' ), true, 'has `army` property' );
	t.equal( hasOwnProp( data, 'cities' ), true, 'has `cities` property' );
	t.equal( hasOwnProp( data, 'labels' ), true, 'has `labels` property' );
	t.equal( hasOwnProp( data, 'rivers' ), true, 'has `rivers` property' );
	t.equal( hasOwnProp( data, 'temperature' ), true, 'has `temperature` property' );

	// Should return a deep copy...
	d2 = minard( {} );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.army, d2.army, 'different reference' );
	t.notEqual( data.cities, d2.cities, 'different reference' );
	t.notEqual( data.labels, d2.labels, 'different reference' );
	t.notEqual( data.rivers, d2.rivers, 'different reference' );
	t.notEqual( data.temperature, d2.temperature, 'different reference' );

	t.end();
});

tape( 'if not provided a `data` option, the function returns an `object` (browser)', function test( t ) {
	var minard;
	var data;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	data = minard();
	t.equal( isObject( data ), true, 'returns an object' );
	t.equal( hasOwnProp( data, 'army' ), true, 'has `army` property' );
	t.equal( hasOwnProp( data, 'cities' ), true, 'has `cities` property' );
	t.equal( hasOwnProp( data, 'labels' ), true, 'has `labels` property' );
	t.equal( hasOwnProp( data, 'rivers' ), true, 'has `rivers` property' );
	t.equal( hasOwnProp( data, 'temperature' ), true, 'has `temperature` property' );

	// Should return a deep copy...
	d2 = minard();
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.army, d2.army, 'different reference' );
	t.notEqual( data.cities, d2.cities, 'different reference' );
	t.notEqual( data.labels, d2.labels, 'different reference' );
	t.notEqual( data.rivers, d2.rivers, 'different reference' );
	t.notEqual( data.temperature, d2.temperature, 'different reference' );

	t.end();
});

tape( 'if not provided a `data` option, the function returns an `object` (browser; options)', function test( t ) {
	var minard;
	var data;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	data = minard( {} );
	t.equal( isObject( data ), true, 'returns an object' );
	t.equal( hasOwnProp( data, 'army' ), true, 'has `army` property' );
	t.equal( hasOwnProp( data, 'cities' ), true, 'has `cities` property' );
	t.equal( hasOwnProp( data, 'labels' ), true, 'has `labels` property' );
	t.equal( hasOwnProp( data, 'rivers' ), true, 'has `rivers` property' );
	t.equal( hasOwnProp( data, 'temperature' ), true, 'has `temperature` property' );

	// Should return a deep copy...
	d2 = minard( {} );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.army, d2.army, 'different reference' );
	t.notEqual( data.cities, d2.cities, 'different reference' );
	t.notEqual( data.labels, d2.labels, 'different reference' );
	t.notEqual( data.rivers, d2.rivers, 'different reference' );
	t.notEqual( data.temperature, d2.temperature, 'different reference' );

	t.end();
});

tape( 'if not provided a `data` option, the function returns an `object` (non-browser)', function test( t ) {
	var minard;
	var data;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	data = minard();
	t.equal( isObject( data ), true, 'returns an object' );
	t.equal( hasOwnProp( data, 'army' ), true, 'has `army` property' );
	t.equal( hasOwnProp( data, 'cities' ), true, 'has `cities` property' );
	t.equal( hasOwnProp( data, 'labels' ), true, 'has `labels` property' );
	t.equal( hasOwnProp( data, 'rivers' ), true, 'has `rivers` property' );
	t.equal( hasOwnProp( data, 'temperature' ), true, 'has `temperature` property' );

	// Should return a deep copy...
	d2 = minard();
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.army, d2.army, 'different reference' );
	t.notEqual( data.cities, d2.cities, 'different reference' );
	t.notEqual( data.labels, d2.labels, 'different reference' );
	t.notEqual( data.rivers, d2.rivers, 'different reference' );
	t.notEqual( data.temperature, d2.temperature, 'different reference' );

	t.end();
});

tape( 'if not provided a `data` option, the function returns an `object` (non-browser; options)', function test( t ) {
	var minard;
	var data;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	data = minard( {} );
	t.equal( isObject( data ), true, 'returns an object' );
	t.equal( hasOwnProp( data, 'army' ), true, 'has `army` property' );
	t.equal( hasOwnProp( data, 'cities' ), true, 'has `cities` property' );
	t.equal( hasOwnProp( data, 'labels' ), true, 'has `labels` property' );
	t.equal( hasOwnProp( data, 'rivers' ), true, 'has `rivers` property' );
	t.equal( hasOwnProp( data, 'temperature' ), true, 'has `temperature` property' );

	// Should return a deep copy...
	d2 = minard( {} );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.army, d2.army, 'different reference' );
	t.notEqual( data.cities, d2.cities, 'different reference' );
	t.notEqual( data.labels, d2.labels, 'different reference' );
	t.notEqual( data.rivers, d2.rivers, 'different reference' );
	t.notEqual( data.temperature, d2.temperature, 'different reference' );

	t.end();
});

tape( 'if the `data` option is `army`, the function returns an array of objects', function test( t ) {
	var data;
	var opts;
	var d2;

	opts = {
		'data': 'army'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `army`, the function returns an array of objects (browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	opts = {
		'data': 'army'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `army`, the function returns an array of objects (non-browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	opts = {
		'data': 'army'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `cities`, the function returns an array of objects', function test( t ) {
	var data;
	var opts;
	var d2;

	opts = {
		'data': 'cities'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `cities`, the function returns an array of objects (browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	opts = {
		'data': 'cities'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `cities`, the function returns an array of objects (non-browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	opts = {
		'data': 'cities'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `labels`, the function returns an array of objects', function test( t ) {
	var data;
	var opts;
	var d2;

	opts = {
		'data': 'labels'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `labels`, the function returns an array of objects (browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	opts = {
		'data': 'labels'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `labels`, the function returns an array of objects (non-browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	opts = {
		'data': 'labels'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `rivers`, the function returns an object', function test( t ) {
	var data;
	var opts;
	var d2;

	opts = {
		'data': 'rivers'
	};
	data = minard( opts );

	t.equal( isObject( data ), true, 'returns an object' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.features, d2.features, 'different reference' );

	t.end();
});

tape( 'if the `data` option is `rivers`, the function returns an object (browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	opts = {
		'data': 'rivers'
	};
	data = minard( opts );

	t.equal( isObject( data ), true, 'returns an object' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.features, d2.features, 'different reference' );

	t.end();
});

tape( 'if the `data` option is `rivers`, the function returns an object (non-browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	opts = {
		'data': 'rivers'
	};
	data = minard( opts );

	t.equal( isObject( data ), true, 'returns an object' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data.features, d2.features, 'different reference' );

	t.end();
});

tape( 'if the `data` option is `temperature`, the function returns an array of objects', function test( t ) {
	var data;
	var opts;
	var d2;

	opts = {
		'data': 'temperature'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `temperature`, the function returns an array of objects (browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	opts = {
		'data': 'temperature'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});

tape( 'if the `data` option is `temperature`, the function returns an array of objects (non-browser)', function test( t ) {
	var minard;
	var data;
	var opts;
	var d2;

	minard = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	opts = {
		'data': 'temperature'
	};
	data = minard( opts );

	t.equal( isObjectArray( data ), true, 'returns an object array' );

	// Should return a deep copy...
	d2 = minard( opts );
	t.notEqual( data, d2, 'returns new reference' );
	t.notEqual( data[0], d2[0], 'different reference' );

	t.end();
});
