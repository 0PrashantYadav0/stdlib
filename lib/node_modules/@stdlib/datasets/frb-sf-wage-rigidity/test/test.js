'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isObjectArray = require( '@stdlib/assert/is-plain-object-array' );
var wages = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof wages, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (browser)', function test( t ) {
	var wages = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});
	t.strictEqual( typeof wages, 'function', 'main export is a function' );
	t.end();
});

tape( 'main export is a function (non-browser)', function test( t ) {
	var wages = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});
	t.strictEqual( typeof wages, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an array of objects', function test( t ) {
	var data = wages();
	t.equal( isObjectArray( data ), true, 'returns an array of objects' );
	t.end();
});

tape( 'the function returns an array of objects (browser)', function test( t ) {
	var wages;
	var data;

	wages = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	data = wages();
	t.equal( isObjectArray( data ), true, 'returns an array of objects' );
	t.end();
});

tape( 'the function returns an array of objects (non-browser)', function test( t ) {
	var wages;
	var data;

	wages = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	data = wages();
	t.equal( isObjectArray( data ), true, 'returns an array of objects' );
	t.end();
});

tape( 'the function returns a copy', function test( t ) {
	var d1;
	var d2;
	var v;

	d1 = wages();
	d2 = wages();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ];
	d1[ 5 ] = 'beep';

	t.equal( d1[ 5 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a copy (browser)', function test( t ) {
	var wages;
	var d1;
	var d2;
	var v;

	wages = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': true
	});

	d1 = wages();
	d2 = wages();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ];
	d1[ 5 ] = 'beep';

	t.equal( d1[ 5 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ], v, 'expected element' );

	t.end();
});

tape( 'the function returns a copy (non-browser)', function test( t ) {
	var wages;
	var d1;
	var d2;
	var v;

	wages = proxyquire( './../lib', {
		'@stdlib/assert/is-browser': false
	});

	d1 = wages();
	d2 = wages();

	t.notEqual( d1, d2, 'different references' );

	v = d2[ 5 ];
	d1[ 5 ] = 'beep';

	t.equal( d1[ 5 ], 'beep', 'expected element' );
	t.notEqual( d1[ 5 ], d2[ 5 ], 'no shared state' );
	t.equal( d2[ 5 ], v, 'expected element' );

	t.end();
});
