'use strict';

// MODULES //

var isDateObject = require( '@stdlib/assert/is-date-object' );
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var floor = require( '@stdlib/math/base/special/floor' );


// VARIABLES //

var SHORT_YEAR = 52;
var LONG_YEAR = 53;


// FUNCTIONS //

/**
* Formula for determining if a year is "long" or "short".
*
* @private
* @param {integer} yr - year
* @returns {integer} result
*/
function p( yr ) {
	var v = yr + floor( yr/4 ) - floor( yr/100 ) + floor( yr/400 );
	return v % 7;
} // end FUNCTION p()


// MAIN //

/**
* Returns the number of ISO weeks in a year.
*
* @param {(integer|Date)} value - year or `Date` object
* @throws {TypeError} must provide either an integer or a `Date` object
* @returns {integer} number of ISO weeks in a year
*
* @example
* var num = isoWeeksInYear();
* // returns <number>
*
* @example
* var num = isoWeeksInYear( 2015 );
* // returns 53
*
* @example
* var num = isoWeeksInYear( 2017 );
* // returns 52
*/
function isoWeeksInYear( value ) {
	var yr;
	if ( arguments.length ) {
		if ( isDateObject( value ) ) {
			yr = value.getFullYear();
		} else if ( isInteger( value ) ) {
			yr = value;
		} else {
			throw new TypeError( 'invalid input argument. Must provide either an integer or a `Date` object. Value: `'+value+'`.' );
		}
	} else {
		// Note: cannot cache as application could cross over into a new year:
		yr = ( new Date() ).getFullYear();
	}
	if ( p( yr ) === 4 || p( yr-1 ) === 3 ) {
		return LONG_YEAR;
	}
	return SHORT_YEAR;
} // end FUNCTION isoWeeksInYear()


// EXPORTS //

module.exports = isoWeeksInYear;
