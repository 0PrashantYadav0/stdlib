'use strict';

/**
* Transform stream which inspects streamed data.
*
* @module @stdlib/streams/utils/inspect
*
* @example
* var inspectStream = require( '@stdlib/streams/utils/inspect' );
*
* function log( chunk, idx ) {
*     console.log( 'index: %d', idx );
*     console.log( chunk );
* }
*
* var stream = inspectStream( log );
*
* stream.write( 'a' );
* stream.write( 'b' );
* stream.write( 'c' );
*
* stream.end();
* // 'index: 0'
* // 'a'
* // 'index: 1'
* // 'b'
* // 'index: 2'
* // 'c'
*
*
* @example
* var inspectStream = require( '@stdlib/streams/utils/inspect' );
*
* function log( chunk, idx ) {
*     console.log( 'index: %d', idx );
*     console.log( chunk );
* }
*
* var stream = inspectStream.objectMode( log );
*
* stream.write( {'value': 'a'} );
* stream.write( {'value': 'b'} );
* stream.write( {'value': 'c'} );
*
* stream.end();
* // 'index: 0'
* // {'value': 'a'}
* // 'index: 1'
* // {'value': 'b'}
* // 'index: 2'
* // {'value': 'c'}
*
*
* @example
* var inspectStream = require( '@stdlib/streams/utils/inspect' );
*
* function log( chunk, idx ) {
*     console.log( 'index: %d', idx );
*     console.log( chunk );
* }
*
* var opts = {
*     'objectMode': true,
*     'highWaterMark': 64
* };
*
* var factory = inspectStream.factory( opts );
*
* // Create 10 identically configured streams...
* var streams = [];
* var i;
* for ( i = 0; i < 10; i++ ) {
*     streams.push( factory( log ) );
* }
*/


// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var stream = require( './stream.js' );
var objectMode = require( './object_mode.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( stream, 'objectMode', objectMode );
setReadOnly( stream, 'factory', factory );


// EXPORTS //

module.exports = stream;
