'use strict';

// MODULES //

var logger = require( 'debug' );
var Buffer = require( 'buffer' ).Buffer; // eslint-disable-line stdlib/no-redeclare
var Transform = require( 'readable-stream' ).Transform;
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );


// VARIABLES //

var debug = logger( 'join-stream' );


// MAIN //

/**
* Join stream constructor.
*
* @constructor
* @param {Options} [options] - stream options
* @param {string} [options.sep='\n'] - separator used to join streamed data
* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode
* @throws {TypeError} must provide valid options
* @returns {JoinStream} join stream
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
*
* var stream = new JoinStream();
*
* stream.pipe( stdout );
*
* stream.write( '1' );
* stream.write( '2' );
* stream.write( '3' );
*
* stream.end();
* // => '1\n2\n3'
*/
function JoinStream( options ) {
	var opts;
	var err;
	if ( !( this instanceof JoinStream ) ) {
		if ( arguments.length ) {
			return new JoinStream( options );
		}
		return new JoinStream();
	}
	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// The stream's writable state should always be in object mode to prevent incoming data from being buffered (concatenated) and thus lose separation...
	opts.writableObjectMode = true;

	// The stream converts each chunk into a string so no need to encode strings written to the join stream as Buffer objects:
	opts.decodeStrings = false;

	// Make the stream a Transform stream:
	debug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );
	Transform.call( this, opts );

	// The destruction state:
	this._destroyed = false;

	// Cache the encoding...
	this._encoding = ( opts.encoding === null ) ? 'utf8' : opts.encoding;

	// Cache the separator...
	if ( this._encoding === 'utf8' ) {
		this._sep = opts.sep;
	} else {
		this._sep = new Buffer( opts.sep, this._encoding );
	}
	// Flag indicating if the stream has received streamed data:
	this._init = false;

	// Chunk counter:
	this._idx = -1;

	return this;
} // end FUNCTION JoinStream()

/*
* Create a prototype which inherits from the parent prototype.
*/
JoinStream.prototype = Object.create( Transform.prototype );

/*
* Set the constructor.
*/
JoinStream.prototype.constructor = JoinStream;

/**
* Implements the `_transform` method.
*
* @private
* @memberof JoinStream.prototype
* @function _transform
* @param {(Buffer|string)} chunk - streamed chunk
* @param {string} encoding - Buffer encoding
* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
*/
JoinStream.prototype._transform = require( './_transform.js' ); // eslint-disable-line no-underscore-dangle

/**
* Implements the `_flush` method.
*
* @private
* @memberof JoinStream.prototype
* @function _flush
* @param {Callback} clbk - callback to invoke after performing flush tasks
*/
JoinStream.prototype._flush = require( './_flush.js' ); // eslint-disable-line no-underscore-dangle

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @memberof JoinStream.prototype
* @function destroy
* @param {Object} [error] - optional error message
* @returns {JoinStream} Stream instance
*/
JoinStream.prototype.destroy = require( './destroy.js' );


// EXPORTS //

module.exports = JoinStream;
