'use strict';

/**
* Transform stream which joins streamed data.
*
* @module @stdlib/streams/utils/join
*
* @example
* var joinStream = require( '@stdlib/streams/utils/join' );
*
* var stream = joinStream();
*
* stream.pipe( process.stdout );
* stream.write( '1' );
* // => '1'
*
* stream.write( '2' );
* // => '\n2'
*
* stream.write( '3' );
* // => '\n3'
*
* stream.end();
*
* @example
* var joinStream = require( '@stdlib/streams/utils/join' );
*
* var opts = {
*     'sep': '\t',
*     'objectMode': true,
*     'encoding': 'utf8',
*     'highWaterMark': 64
* };
*
* var factory = joinStream.factory( opts );
*
* // Create 10 identically configured streams...
* var streams = [];
* var i;
* for ( i = 0; i < 10; i++ ) {
*     streams.push( factory() );
* }
*
* @example
* var joinStream = require( '@stdlib/streams/utils/join' );
*
* var stream = joinStream.objectMode({
*     'sep': ','
* });
*
* stream.pipe( process.stdout );
* stream.write( 'a' );
* // => 'a'
*
* stream.write( 'b' );
* // => ',b'
*
* stream.write( 'c' );
* // => ',c'
*
* stream.end();
*/


// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var stream = require( './stream.js' );
var objectMode = require( './object_mode.js' );
var factory = require( './factory.js' );


// METHODS //

setReadOnly( stream, 'objectMode', objectMode );
setReadOnly( stream, 'factory', factory );


// EXPORTS //

module.exports = stream;
