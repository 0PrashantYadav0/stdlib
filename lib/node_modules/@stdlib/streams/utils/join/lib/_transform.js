/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Buffer = require( '@stdlib/buffer/ctor' );
var debug = require( './debug.js' );


// MAIN //

/**
* Implements the `_transform` method.
*
* @private
* @param {(Buffer|string)} chunk - streamed chunk
* @param {string} encoding - Buffer encoding
* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
*/
function transform( chunk, encoding, clbk ) {
	/* eslint-disable no-invalid-this */
	var len;

	this._idx += 1;
	debug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );
	if ( this._encoding === 'utf8' ) {
		if ( this._init ) {
			chunk = this._sep + chunk;
		} else {
			this._init = true;
		}
	} else if ( this._init ) {
		chunk = new Buffer( chunk, encoding );
		len = this._sep.length + chunk.length;
		chunk = Buffer.concat( [ this._sep, chunk ], len );
		chunk = chunk.toString( this._encoding );
	} else {
		this._init = true;
	}
	this.push( chunk, this._encoding );
	clbk();
}


// EXPORTS //

module.exports = transform;
