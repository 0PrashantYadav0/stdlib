'use strict';

// MODULES //

var Transform = require( 'readable-stream' ).Transform;


// INSPECT STREAM //

/**
* Stream constructor.
*
* @private
* @constructor
* @param {Callback} transform - callback to be invoked upon receiving data
* @returns {InspectStream} inspect stream
*/
function InspectStream( transform ) {
	var opts;
	if ( !(this instanceof InspectStream) ) {
		return new InspectStream( transform );
	}
	opts = {};
	opts.objectMode = true;
	Transform.call( this, opts );
	this.destroyed = false;
	this._clbk = transform;
	return this;
} // end FUNCTION InspectStream()

/*
* Create a prototype which inherits from the parent prototype.
*/
InspectStream.prototype = Object.create( Transform.prototype );

/*
* Set the constructor.
*/
InspectStream.prototype.constructor = InspectStream;

/**
* Implements the `_transform` method.
*
* @private
* @memberof InspectStream.prototype
* @function _transform
* @param {(Buffer|string)} chunk - streamed chunk
* @param {string} encoding - Buffer encoding
* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
*/
InspectStream.prototype._transform = function _transform( chunk, encoding, clbk ) {
	this._clbk( chunk, encoding );
	clbk();
}; // end METHOD _transform()

/**
* Implements the `_flush` method.
*
* @private
* @memberof InspectStream.prototype
* @function _flush
* @param {Callback} callback to invoke after performing flush tasks
*/
InspectStream.prototype._flush = function _flush( clbk ) {
	clbk();
}; // end METHOD _flush()

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @private
* @memberof InspectStream.prototype
* @function destroy
* @param {Object} [error] - optional error message
* @returns {InspectStream} Stream instance
*/
InspectStream.prototype.destroy = function destroy( error ) {
	var self;
	if ( this._destroyed ) {
		return;
	}
	self = this;
	this._destroyed = true;
	process.nextTick( close );

	return this;

	/**
	* Closes a stream.
	*
	* @private
	*/
	function close() {
		if ( error ) {
			self.emit( 'error', error );
		}
		self.emit( 'close' );
	}
}; // end METHOD destroy()


// EXPORTS //

module.exports = InspectStream;
