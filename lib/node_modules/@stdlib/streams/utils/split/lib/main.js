/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Transform = require( 'readable-stream' ).Transform;
var copy = require( '@stdlib/utils/copy' );
var inherit = require( '@stdlib/utils/inherit' );
var setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );
var debug = require( './debug.js' );


// VARIABLES //

var RE = /\r?\n/;


// MAIN //

/**
* Split stream constructor.
*
* @constructor
* @param {Options} [options] - stream options
* @param {(string|RegExp)} [options.sep=/\r?\n/] - separator used to split streamed data
* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode
* @returns {SplitStream} split stream
*
* @example
* var stream = new SplitStream();
*
* stream.write( '1\n2\n3' );
* stream.end();
*/
function SplitStream( options ) {
	var opts;
	var err;
	if ( !( this instanceof SplitStream ) ) {
		if ( arguments.length ) {
			return new SplitStream( options );
		}
		return new SplitStream();
	}
	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// The stream's readable state should always be in object mode to prevent split data from being buffered (concatenated) and no longer being separated...
	opts.readableObjectMode = true;

	// The stream converts each chunk into a string so no need to encode strings written to the split stream as Buffer objects:
	opts.decodeStrings = false;

	// Make the stream a Transform stream:
	debug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );
	Transform.call( this, opts );

	// Cache the separator:
	setNonEnumerableReadOnly( this, '_sep', ( opts.sep === null ) ? RE : opts.sep );

	// The destruction state:
	setNonEnumerable( this, '_destroyed', false );

	// Cache the encoding:
	setNonEnumerableReadOnly( this, '_encoding', opts.encoding );

	// Buffer for storing partial splits:
	setNonEnumerable( this, '_buffer', '' );

	// Chunk counter:
	setNonEnumerable( this, '_idx', -1 );

	return this;
}

/*
* Inherit from the `Transform` prototype.
*/
inherit( SplitStream, Transform );

/**
* Implements the `_transform` method.
*
* @private
* @memberof SplitStream.prototype
* @function _transform
* @param {(Buffer|string)} chunk - streamed chunk
* @param {string} encoding - Buffer encoding
* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
*/
SplitStream.prototype._transform = require( './_transform.js' ); // eslint-disable-line no-underscore-dangle

/**
* Implements the `_flush` method.
*
* @private
* @memberof SplitStream.prototype
* @function _flush
* @param {Callback} clbk - callback to invoke after any final processing
*/
SplitStream.prototype._flush = require( './_flush.js' ); // eslint-disable-line no-underscore-dangle

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @memberof SplitStream.prototype
* @function destroy
* @param {Object} [error] - optional error message
* @returns {SplitStream} Stream instance
*/
SplitStream.prototype.destroy = require( './destroy.js' );


// EXPORTS //

module.exports = SplitStream;
