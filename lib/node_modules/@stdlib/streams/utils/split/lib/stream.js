'use strict';

// MODULES //

var debug = require( 'debug' )( 'split-stream' );
var Transform = require( 'readable-stream' ).Transform;
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );


// VARIABLES //

var RE = /\r?\n/;


// MAIN //

/**
* Split stream constructor.
*
* @constructor
* @param {Options} [options] - stream options
* @param {(string|RegExp)} [options.sep=/\r?\n/] - separator used to split streamed data
* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode
* @returns {SplitStream} split stream
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
*
* var stream = new SplitStream();
*
* stream.pipe( stdout );
*
* stream.write( '1\n2\n3' );
* stream.end();
* // => '1' => '2' => '3'
*/
function SplitStream( options ) {
	var opts;
	var err;
	if ( !( this instanceof SplitStream ) ) {
		if ( arguments.length ) {
			return new SplitStream( options );
		}
		return new SplitStream();
	}
	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.sep === null ) {
		this._sep = RE;
	} else {
		this._sep = opts.sep;
	}
	// The stream's readable state should always be in object mode to prevent split data from being buffered (concatenated) and no longer being separated...
	opts.readableObjectMode = true;

	// The stream converts each chunk into a string so no need to encode strings written to the split stream as Buffer objects:
	opts.decodeStrings = false;

	// Make the stream a Transform stream:
	debug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );
	Transform.call( this, opts );

	// The destruction state:
	this._destroyed = false;

	// Cache the encoding:
	this._encoding = opts.encoding;

	// Buffer for storing partial splits:
	this._buffer = '';

	// Chunk counter:
	this._idx = -1;

	return this;
} // end FUNCTION SplitStream()

/**
* Create a prototype which inherits from the parent prototype.
*/
SplitStream.prototype = Object.create( Transform.prototype );

/**
* Set the constructor.
*/
SplitStream.prototype.constructor = SplitStream;

/**
* Implements the `_transform` method.
*
* @private
* @memberof SplitStream.prototype
* @function _transform
* @param {(Buffer|string)} chunk - streamed chunk
* @param {string} encoding - Buffer encoding
* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
*/
SplitStream.prototype._transform = require( './_transform.js' ); // eslint-disable-line no-underscore-dangle

/**
* Implements the `_flush` method.
*
* @private
* @memberof SplitStream.prototype
* @function _flush
* @param {Callback} clbk - callback to invoke after any final processing
*/
SplitStream.prototype._flush = require( './_flush.js' ); // eslint-disable-line no-underscore-dangle

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @memberof SplitStream.prototype
* @function destroy
* @param {Object} [error] - optional error message
* @returns {SplitStream} Stream instance
*/
SplitStream.prototype.destroy = require( './destroy.js' );


// EXPORTS //

module.exports = SplitStream;
