'use strict';

// MODULES //

var copy = require( '@stdlib/utils/copy' );
var Stream = require( './stream.js' );


// MAIN //

/**
* Creates a reusable stream factory.
*
* @param {Options} [options] - stream options
* @param {(string|RegExp)} [options.sep=/\r?\n/] - separator used to split streamed data
* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode
* @returns {Function} stream factory
*
* @example
* var opts = {
*     'sep': '\t',
*     'objectMode': true,
*     'encoding': 'utf8'
* };
*
* var factory = streamFactory( opts );
*
* // Create 10 identically configured streams...
* var streams = [];
* var i;
* for ( i = 0; i < 10; i++ ) {
*     streams.push( factory() );
* }
*/
function streamFactory( options ) {
	var opts;
	if ( arguments.length ) {
		opts = copy( options );
	} else {
		opts = {};
	}
	return splitStream;

	/**
	* Creates a transform stream for splitting streamed data.
	*
	* @private
	* @throws {TypeError} must provide valid options
	* @returns {SplitStream} split stream
	*/
	function splitStream() {
		return new Stream( opts );
	} // end FUNCTION splitStream()
} // end METHOD streamFactory()


// EXPORTS //

module.exports = streamFactory;
