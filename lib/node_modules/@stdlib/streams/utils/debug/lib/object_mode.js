'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var Stream = require( './stream.js' );


// MAIN //

/**
* Returns a debug stream with `objectMode` set to `true`.
*
* @param {Options} [options] - stream options
* @param {string} [options.name] - debug namespace
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode
* @param {Callback} [clbk] - callback to invoke upon receiving data
* @throws {TypeError} must provide valid options
* @throws {TypeError} must provide a valid callback argument
* @returns {DebugStream} debug stream
*
* @example
* var stream = objectMode({
*     'name': 'my-stream'
* });
*
* stream.write( {'value': 'a'} );
* stream.write( {'value': 'b'} );
* stream.write( {'value': 'c'} );
* stream.end();
*/
function objectMode( options, clbk ) {
	var opts;
	var cb;
	if ( arguments.length > 1 ) {
		opts = options;
		cb = clbk;
		if ( !isFunction( clbk ) ) {
			throw new TypeError( 'invalid input argument. Callback argument must be a function. Value: `' + clbk + '`.' );
		}
	} else if ( arguments.length ) {
		if ( isFunction( options ) ) {
			opts = {};
			cb = options;
		} else {
			opts = options;
		}
	} else {
		opts = {};
	}
	opts.objectMode = true;
	if ( cb === void 0 ) {
		return new Stream( opts );
	}
	return new Stream( opts, cb );
}


// EXPORTS //

module.exports = objectMode;
