'use strict';

// MODULES //

var debug = require( 'debug' );
var InspectStream = require( '@stdlib/streams/utils/inspect' );
var isFunction = require( '@stdlib/utils/is-function' );
var isBuffer = require( '@stdlib/utils/is-buffer' );
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './defaults.json' );
var NAMESPACE = require( './namespace.js' );
var validate = require( './validate.js' );


// DEBUG STREAM //

/**
* Debug stream constructor.
*
* @constructor
* @param {Options} [options] - stream options
* @param {string} [options.name] - debug namespace
* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode
* @param {Callback} [clbk] - callback to invoke upon receiving data
* @throws {TypeError} must provide valid options
* @throws {TypeError} must a valid callback argument
* @returns {DebugStream} debug stream
*
* @example
* var stream = new DebugStream();
*
* stream.write( 'a' );
* stream.write( 'b' );
* stream.write( 'c' );
* stream.end();
*/
function DebugStream( options, clbk ) {
	var opts;
	var name;
	var log;
	var err;
	var cb;
	if ( !(this instanceof DebugStream) ) {
		if ( arguments.length > 1 ) {
			return new DebugStream( options, clbk );
		}
		if ( arguments.length === 1 ) {
			return new DebugStream( options );
		}
		return new DebugStream();
	}
	opts = copy( DEFAULTS );
	if ( arguments.length > 1 ) {
		if ( !isFunction( clbk ) ) {
			throw new TypeError( 'invalid input argument. Callback argument must be a function. Value: `' + clbk + '`.' );
		}
		cb = clbk;
		err = validate( opts, options );
	} else if ( arguments.length ) {
		if ( isFunction( options ) ) {
			cb = options;
		} else {
			err = validate( opts, options );
		}
	}
	if ( err ) {
		throw err;
	}
	if ( opts.name ) {
		name = NAMESPACE + ':' + opts.name;
	} else {
		name = NAMESPACE;
	}
	log = debug( name );

	InspectStream.call( this, opts, inspect );

	return this;

	/**
	* Callback invoked upon receiving a new chunk.
	*
	* @private
	* @param {*} chunk - received chunk
	* @param {NonNegativeInteger} idx - chunk index
	*/
	function inspect( chunk, idx ) {
		if ( cb ) {
			cb( log, chunk, idx );
		} else {
			if ( isBuffer( chunk ) ) {
				chunk = chunk.toString();
			}
			log( 'Chunk: %s. Index: %d.', JSON.stringify( chunk ), idx );
		}
	}
} // end FUNCTION DebugStream()

/*
* Create a prototype which inherits from the parent prototype.
*/
DebugStream.prototype = Object.create( InspectStream.prototype );

/*
* Set the constructor.
*/
DebugStream.prototype.constructor = DebugStream;


// EXPORTS //

module.exports = DebugStream;
