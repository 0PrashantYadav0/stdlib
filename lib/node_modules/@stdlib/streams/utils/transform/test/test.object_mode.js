/* eslint-disable no-new-wrappers */
'use strict';

// MODULES //

var tape = require( 'tape' );
var TransformStream = require( './../lib/stream.js' );
var objectMode = require( './../lib/object_mode.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof objectMode, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		true,
		undefined,
		null,
		NaN,
		function noop() {},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			objectMode( value );
		};
	}
});

tape( 'the function returns a stream instance', function test( t ) {
	var stream = objectMode();
	t.equal( stream instanceof TransformStream, true, 'returns a stream instance' );
	t.end();
});

tape( 'the function returns a stream which allows writing objects', function test( t ) {
	var stream;

	stream = objectMode();
	stream.write( new String( 'beep' ) );
	stream.end();
	t.ok( true, 'did not error when writing an object' );

	// Attempt to override should not work...
	stream = objectMode({
		// Option should be overridden...
		'objectMode': false
	});

	stream.write( new String( 'beep' ) );
	stream.end();
	t.ok( true, 'did not error when writing an object' );

	t.end();
});
