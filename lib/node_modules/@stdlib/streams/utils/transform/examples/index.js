'use strict';

var stdout = require( '@stdlib/streams/base/stdout' );
var factory = require( './../lib' ).factory;

function parse( chunk, enc, clbk ) {
	clbk( null, JSON.parse( chunk ) );
}

function pluck( chunk, enc, clbk ) {
	clbk( null, chunk.value );
}

function square( chunk, enc, clbk ) {
	var v = +chunk;
	clbk( null, v*v );
}

function toString( chunk, enc, clbk ) {
	clbk( null, chunk.toString() );
}

function join( chunk, enc, clbk ) {
	clbk( null, chunk+'\n' );
}

// Create a factory which generates streams running in `object` mode:
var tStream = factory({
	'objectMode': true
});

// Create streams for each transform:
var s1 = tStream( parse );
var s2 = tStream( pluck );
var s3 = tStream( square );
var s4 = tStream( toString );
var s5 = tStream( join );

// Create the pipeline:
s1.pipe( s2 )
	.pipe( s3 )
	.pipe( s4 )
	.pipe( s5 )
	.pipe( stdout );

// Write data to the pipeline...
var v;
var i;
for ( i = 0; i < 100; i++ ) {
	v = '{"value":'+i+'}';
	s1.write( v, 'utf8' );
}
s1.end();

