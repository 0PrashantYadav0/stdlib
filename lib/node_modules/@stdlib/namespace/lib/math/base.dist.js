'use strict';

var DIST = {};


// MODULES //

// DISCRETE DISTRIBUTIONS //

DIST.binomial = {
	'cdf': require( '@stdlib/math/base/dist/binomial/cdf' ),
	'pmf': require( '@stdlib/math/base/dist/binomial/pmf' ),
	'quantile': require( '@stdlib/math/base/dist/binomial/quantile' )
};
DIST.geometric = {
	'cdf': require( '@stdlib/math/base/dist/geometric/cdf' ),
	'pmf': require( '@stdlib/math/base/dist/geometric/pmf' ),
	'quantile': require( '@stdlib/math/base/dist/geometric/quantile' )
};
DIST.hypergeometric = {
	'cdf': require( '@stdlib/math/base/dist/hypergeometric/cdf' ),
	'pmf': require( '@stdlib/math/base/dist/hypergeometric/pmf' ),
	'quantile': require( '@stdlib/math/base/dist/hypergeometric/quantile' )
};
DIST.negativeBinomial = {
	'cdf': require( '@stdlib/math/base/dist/negative-binomial/cdf' ),
	'pmf': require( '@stdlib/math/base/dist/negative-binomial/pmf' ),
	'quantile': require( '@stdlib/math/base/dist/negative-binomial/quantile' )
};
DIST.poisson = {
	'cdf': require( '@stdlib/math/base/dist/poisson/cdf' ),
	'pmf': require( '@stdlib/math/base/dist/poisson/pmf' ),
	'quantile': require( '@stdlib/math/base/dist/poisson/quantile' )
};

// CONTINUOUS DISTRIBUTIONS //

DIST.beta = {
	'cdf': require( '@stdlib/math/base/dist/beta/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/beta/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/beta/quantile' )
};
DIST.cauchy = {
	'cdf': require( '@stdlib/math/base/dist/cauchy/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/cauchy/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/cauchy/quantile' )
};
DIST.chisquare = {
	'cdf': require( '@stdlib/math/base/dist/chisquare/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/chisquare/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/chisquare/quantile' )
};
DIST.degenerate = {
	'cdf': require( '@stdlib/math/base/dist/degenerate/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/degenerate/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/degenerate/quantile' )
};
DIST.erlang = {
	'cdf': require( '@stdlib/math/base/dist/erlang/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/erlang/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/erlang/quantile' )
};
DIST.exponential = {
	'cdf': require( '@stdlib/math/base/dist/exponential/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/exponential/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/exponential/quantile' )
};
DIST.f = {
	'cdf': require( '@stdlib/math/base/dist/f/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/f/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/f/quantile' )
};
DIST.gamma = {
	'cdf': require( '@stdlib/math/base/dist/gamma/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/gamma/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/gamma/quantile' )
};
DIST.gumbel = {
	'cdf': require( '@stdlib/math/base/dist/gumbel/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/gumbel/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/gumbel/quantile' )
};
DIST.invgamma = {
	'cdf': require( '@stdlib/math/base/dist/invgamma/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/invgamma/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/invgamma/quantile' )
};
DIST.laplace = {
	'cdf': require( '@stdlib/math/base/dist/laplace/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/laplace/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/laplace/quantile' )
};
DIST.logistic = {
	'cdf': require( '@stdlib/math/base/dist/logistic/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/logistic/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/logistic/quantile' )
};
DIST.lognormal = {
	'cdf': require( '@stdlib/math/base/dist/lognormal/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/lognormal/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/lognormal/quantile' )
};
DIST.normal = {
	'cdf': require( '@stdlib/math/base/dist/normal/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/normal/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/normal/quantile' )
};
DIST.paretoI = {
	'cdf': require( '@stdlib/math/base/dist/pareto-type1/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/pareto-type1/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/pareto-type1/quantile' )
};
DIST.rayleigh = {
	'cdf': require( '@stdlib/math/base/dist/rayleigh/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/rayleigh/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/rayleigh/quantile' )
};
DIST.t = {
	'cdf': require( '@stdlib/math/base/dist/t/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/t/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/t/quantile' )
};
DIST.triangular = {
	'cdf': require( '@stdlib/math/base/dist/triangular/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/triangular/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/triangular/quantile' )
};
DIST.uniform = {
	'cdf': require( '@stdlib/math/base/dist/uniform/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/uniform/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/uniform/quantile' )
};
DIST.weibull = {
	'cdf': require( '@stdlib/math/base/dist/weibull/cdf' ),
	'pdf': require( '@stdlib/math/base/dist/weibull/pdf' ),
	'quantile': require( '@stdlib/math/base/dist/weibull/quantile' )
};


// ASSIGN //

/**
* Assign distributions object to a namespace.
*
* @private
* @param {Object} ns - namespace
* @returns {Object} input namespace
*
* @example
* var ns = {};
* assign( ns );
* // ns => {...}
*/
function assign( ns ) {
	ns.dist = DIST;
	return ns;
} // end FUNCTION assign()


// EXPORTS //

module.exports = assign;
