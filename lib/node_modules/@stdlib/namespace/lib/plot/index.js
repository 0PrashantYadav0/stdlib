'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isObject = require( '@stdlib/utils/is-plain-object' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var copy = require( '@stdlib/utils/copy' );
var Plot = require( '@stdlib/plot/plot' );
var Sparkline = require( '@stdlib/plot/sparklines/unicode/column' ); // FIXME: should be abstract interface


// VARIABLES //

var NS = {};
var KEYS;


// FUNCTIONS //

/**
* Wraps the plot API to provide a REPL specific `plot` function.
*
* @private
* @returns {Plot} Plot instance
*/
function plot() {
	var opts;
	var x;
	var y;
	var h;

	// Check for an `options` argument...
	if ( arguments.length === 0 ) {
		x = [];
		y = [];
	}
	else if ( arguments.length === 1 ) {
		x = [];
		y = [];
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. `options` argument must be an object. Value: `' + opts + '`.' );
		}
	}
	else if ( arguments.length === 2 ) {
		x = arguments[ 0 ];
		y = arguments[ 1 ];
	}
	else {
		x = arguments[ 0 ];
		y = arguments[ 1 ];
		opts = arguments[ 2 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. `options` argument must be an object. Value: `' + opts + '`.' );
		}
	}
	// Check for rendering and view options; if not set, set to REPL defaults...
	if ( opts ) {
		opts = copy( opts );
		if ( !hasOwnProp( opts, 'autoRender' ) ) {
			opts.autoRender = false;
		}
		if ( !hasOwnProp( opts, 'autoView' ) ) {
			opts.autoView = false;
		}
		if ( !hasOwnProp( opts, 'viewer' ) ) {
			opts.viewer = 'window';
		}
		h = new Plot( x, y, opts );
	} else {
		opts = {
			'autoRender': false,
			'autoView': false,
			'viewer': 'window'
		};
		h = new Plot( x, y, opts );
	}
	return h;
} // end FUNCTION plot()


// MAIN //

NS.plot = plot;
NS.Plot = Plot;
NS.Sparkline = Sparkline; // TODO: move under abstract interface

KEYS = getKeys( NS );

/**
* Assigns modules to a namespace.
*
* @private
* @param {Object} ns - namespace
* @returns {Object} input namespace
*
* @example
* var ns = {};
* assign( ns );
* // ns => {...}
*/
function assign( ns ) {
	var key;
	var i;
	for ( i = 0; i < KEYS.length; i++ ) {
		key = KEYS[ i ];
		ns[ key ] = NS[ key ];
	}
	return ns;
} // end FUNCTION assign()


// EXPORTS //

module.exports = assign;
