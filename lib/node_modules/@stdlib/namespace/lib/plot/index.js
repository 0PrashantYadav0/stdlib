'use strict';

var NS = {};


// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isObject = require( '@stdlib/utils/is-object' ); // TODO: plain object
var plot = require( '@stdlib/plot/plot' );


// FUNCTIONS //

/**
* Wraps the plot API to provide a REPL specific `plot` function.
*
* @private
* @returns {Plot} Plot instance
*/
function wrapper() {
	var opts;
	var args;
	var h;
	var i;

	// Copy the input arguments...
	args = new Array( arguments.length );
	for ( i = 0; i < args.length; i++ ) {
		args[ i ] = arguments[ i ];
		if ( isObject( args[i] ) ) {
			opts = args[ i ];
		}
	}
	// Create a new plot:
	h = plot.apply( null, args );

	// Check for rendering and view options; if not set, set to REPL defaults...
	if ( opts ) {
		if ( !opts.hasOwnProperty( 'autoRender' ) ) {
			h.autoRender = false;
		}
		if ( !opts.hasOwnProperty( 'autoView' ) ) {
			h.autoView = false;
		}
		if ( !opts.hasOwnProperty( 'viewer' ) ) {
			h.viewer = 'window';
		}
	} else {
		h.autoRender = false;
		h.autoView = false;
		h.viewer = 'window';
	}
	return h;
} // end FUNCTION wrapper()


// NAMESPACE //

NS.plot = wrapper;
NS.Plot = plot;


// VARIABLES //

var KEYS = getKeys( NS );


// ASSIGN //

/**
* Assigns modules to a namespace.
*
* @private
* @param {Object} ns - namespace
* @returns {Object} input namespace
*
* @example
* var ns = {};
* assign( ns );
* // ns => {...}
*/
function assign( ns ) {
	var key;
	var i;
	for ( i = 0; i < KEYS.length; i++ ) {
		key = KEYS[ i ];
		ns[ key ] = NS[ key ];
	}
	return ns;
} // end FUNCTION assign()


// EXPORTS //

module.exports = assign;
