'use strict';

// MODULES //

var tape = require( 'tape' );
var umask = require( './../lib' );


// VARIABLES //

var MASK = umask();


// FUNCTIONS //

/**
* Restores the process mask.
*
* @private
*/
function restore() {
	umask( MASK );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof umask, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided only one argument, the function throws an error if not provided either a string, nonnegative integer, or options object', function test( t ) {
	var values;
	var i;

	values = [
		3.14,
		-1,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			umask( value );
		};
	}
});

tape( 'if provided only one argument, the function throws an error if provided a `symbolic` option which is not a boolean', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'symbolic': value
			};
			umask( opts );
		};
	}
});

tape( 'if provided more than one argument, the function throws an error if the first argument is neither a string nor nonnegative integer', function test( t ) {
	var values;
	var i;

	values = [
		3.14,
		-1,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			umask( value, {} );
		};
	}
});

tape( 'if provided more than one argument, the function throws an error if the second argument is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	restore();
	t.end();

	function badValue( value ) {
		return function badValue() {
			umask( MASK, value );
		};
	}
});

tape( 'if provided more than one argument, the function throws an error if provided a `symbolic` option which is not a boolean', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	restore();
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'symbolic': value
			};
			umask( MASK, opts );
		};
	}
});

tape( 'if provided an expression mask, the function throws an error if unable to parse the value', function test( t ) {
	var values;
	var i;

	values = [
		'u=rwx,,g=',
		'b=rwx',
		'u^rwx',
		'u=rwx,g=rx,o=rx,t=rx',
		'u=rwx,g=rx;o=rx',
		'u=rwxvz',
		'beep',
		'boop'
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	restore();
	t.end();

	function badValue( value ) {
		return function badValue() {
			umask( value );
		};
	}
});

tape( 'if provided an expression mask, the function throws an error if unable to parse the value (options)', function test( t ) {
	var values;
	var i;

	values = [
		'u=rwx,,g=',
		'b=rwx',
		'u^rwx',
		'u=rwx,g=rx,o=rx,t=rx',
		'u=rwx,g=rx;o=rx',
		'u=rwxvz',
		'beep',
		'boop'
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	restore();
	t.end();

	function badValue( value ) {
		return function badValue() {
			umask( value, {} );
		};
	}
});

tape( 'if not provided any arguments, the function returns the process mask', function test( t ) {
	t.equal( umask(), process.umask(), 'returns expected value' );
	t.end();
});
