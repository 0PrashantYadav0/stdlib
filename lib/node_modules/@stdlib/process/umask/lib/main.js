'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toSymbolic = require( './to_symbolic.js' );
var fromSymbolic = require( './from_symbolic.js' );


// MAIN //

/**
* Get/set the process mask.
*
* ## Notes
*
* -   If provided a mask, the function sets the current mask and returns the previous process mask. Otherwise, the function returns the current process mask.
*
*
* @param {(NonNegativeInteger|string)} [mask] - mask
* @param {Object} [options] - options
* @param {boolean} [options.symbolic] - boolean indicating whether to return a mask using symbolic notation
* @throws {TypeError} must provide either a string, nonnegative integer, or an options object
* @throws {TypeError} must provide valid options
* @returns {(NonNegativeInteger|string)} process mask
*
* @example
* var mask = umask();
* // returns <number>
*/
function umask() {
	var options;
	var nargs;
	var mask;
	var opts;
	var arg;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return process.umask();
	}
	opts = {};
	arg = arguments[ 0 ];
	if ( nargs === 1 ) {
		if ( isString( arg ) ) {
			mask = fromSymbolic( process.umask(), arg );
			return process.umask( mask );
		}
		if ( isNonNegativeInteger( arg ) ) {
			// Easy case where we use the built-in function to set the mask and return its return value:
			return process.umask( arg );
		}
		if ( isObject( arg ) ) {
			if ( hasOwnProp( arg, 'symbolic' ) ) {
				opts.symbolic = arg.symbolic;
				if ( !isBoolean( opts.symbolic ) ) {
					throw new TypeError( 'invalid option. `symbolic` option must be a boolean. Option: `' + opts.symbolic + '`.' );
				}
			}
			mask = process.umask();
			if ( opts.symbolic ) {
				mask = toSymbolic( mask );
			}
			return mask;
		}
		throw new TypeError( 'invalid input argument. Must provide either a string, nonnegative integer, or an options object. Value: `' + arg + '`.' );
	}
	options = arguments[ 1 ];
	if ( !isObject( options ) ) {
		throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'symbolic' ) ) {
		opts.symbolic = options.symbolic;
		if ( !isBoolean( opts.symbolic ) ) {
			throw new TypeError( 'invalid option. `symbolic` option must be a boolean. Option: `' + opts.symbolic + '`.' );
		}
	}
	if ( isString( arg ) ) {
		mask = fromSymbolic( process.mask(), arg );
	} else if ( !isNonNegativeInteger( arg ) ) {
		throw new TypeError( 'invalid input argument. First argument must be either a string or nonnegative integer. Value: `' + arg + '`.' );
	}
	// Set the mask:
	mask = process.umask( mask );

	// Determine how to format the output value:
	if ( opts.symbolic ) {
		mask = toSymbolic( mask );
	}
	return mask;
}


// EXPORTS //

module.exports = umask;
