#!/usr/bin/env node
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var cwd = require( '@stdlib/process/cwd' );
var CLI = require( '@stdlib/tools/cli' );
var makie = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var dirpath;
	var flags;
	var args;
	var opts;
	var cli;
	var dir;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line options:
	flags = cli.flags();

	dir = cwd();
	if ( flags.dir ) {
		dirpath = resolve( dir, flags.dir );
	} else {
		// FIXME: this is fragile, as will break if the location of this file changes. Maybe search for first Makefile in a parent dir of `makie`? (similar to a package.json search; can use fs/resolve-parent-path stdlib pkg)
		dirpath = resolve( __dirname, '../../../../../../../' );
	}
	if ( flags.config ) {
		opts = require( resolve( dir, flags.config ) ); // eslint-disable-line stdlib/no-dynamic-require
	} else {
		opts = {};
	}
	makie( dirpath, opts, args[ 0 ] );
}

main();
