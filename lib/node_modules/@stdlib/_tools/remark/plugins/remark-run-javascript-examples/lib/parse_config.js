'use strict';

// MODULES //

var trim = require( '@stdlib/string/trim' );


// MAIN //

/**
* Parses a code block configuration.
*
* @private
* @param {string} str - configuration string
* @returns {(Error|Object)} configuration object or an error
*/
function parse( str ) {
	var conf;
	var out;
	var i;

	out = {};

	// Split the string into key-value pairs:
	conf = str.split( ',' );

	// Process each key-value pair...
	for ( i = 0; i < conf.length; i++ ) {
		// Split into "key" and "value" (NOTE: we assume that a `value` is not object literal syntax; e.g., `foo:{"a":"b"}`. We further assume that a `value` is not a string containing a `:` character; e.g. `foo:"a:b"`.):
		conf[ i ] = conf[ i ].split( ':' );

		// Validate that a key-value pair has been provided:
		if ( conf[ i ].length !== 2 ) {
			return new Error( 'invalid configuration. Code block configuration settings should be provided as comma-separated `key:value` pairs; e.g., `foo:true, bar:"string", baz:["error",2]`. Value: `' + str + '`.' );
		}
		// Trim any excess leading or trailing whitespace before adding to the output object:
		out[ trim( conf[i][0] ) ] = trim( conf[i][1] );
	}
	return out;
} // end FUNCTION parse()


// EXPORTS //

module.exports = parse;
