'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var transformer = require( './transformer.js' );


// MAIN //

/**
* Attaches a plugin to a remark processor in order to run JavaScript examples.
*
* @param {(void|Options)} [options] - plugin options
* @param {string} [options.cwd] - current working directory of the child process
* @param {boolean} [options.quiet=false] - boolean indicating whether to silence examples writing to `stdout`, but allow writing to `stderr`
* @param {boolean} [options.silent=false] - boolean indicating whether to silence examples writing to both `stdout` and `stderr`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} transformer
*
* @example
* var remark = require( 'remark' );
*
* var str = [
*     '<section class="usage">',
*     '',
*     '## Usage',
*     '',
*     '```javascript',
*     'var path = require( "path" );',
*     '```',
*     '',
*     '#### path.posix.join( [...paths] )',
*     '',
*     '```javascript',
*     'var p = path.posix.join( "foo", "bar" );',
*     '```',
*     '',
*     '</section>',
*     '',
*     '<!-- /.usage -->',
*     '',
*     '<section class="examples">',
*     '',
*     '## Examples',
*     '',
*     '```javascript',
*     'console.log( "HELLO WORLD!" );',
*     '```',
*     '</section>',
*     '',
*     '<!-- /.examples -->',
*     ''
* ];
*
* remark.use( run ).process( str.join( '\n' ), done );
* // => 'HELLO WORLD'
*
* function done( error ) {
*     if ( error ) {
*         throw error;
*     }
* }
*/
function attacher( options ) {
	var opts = {};

	// NOTE: cannot use `arguments.length` check, as `options` may be explicitly passed as `undefined`
	if ( options !== void 0 ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'cwd' ) ) {
			if ( !isString( options.cwd ) ) {
				throw new TypeError( 'invalid option. `cwd` option must be a string primitive. Option: `' + options.cwd + '`.' );
			}
			opts.cwd = options.cwd;
		}
		if ( hasOwnProp( options, 'quiet' ) ) {
			if ( !isBoolean( options.quiet ) ) {
				throw new TypeError( 'invalid option. `quiet` option must be a boolean primitive. Option: `' + options.quiet + '`.' );
			}
			opts.quiet = options.quiet;
		}
		if ( hasOwnProp( options, 'silent' ) ) {
			if ( !isBoolean( options.silent ) ) {
				throw new TypeError( 'invalid option. `silent` option must be a boolean primitive. Option: `' + options.silent + '`.' );
			}
			opts.silent = options.silent;
		}
	}
	return transformer( opts );
} // end FUNCTION attacher()


// EXPORTS //

module.exports = attacher;
