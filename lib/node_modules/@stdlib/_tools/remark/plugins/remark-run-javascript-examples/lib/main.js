'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var transformer = require( './transformer.js' );


// MAIN //

/**
* Attaches a plugin to a remark processor in order to run JavaScript examples.
*
* @param {(void|Options)} [options] - plugin options
* @param {string} [options.cwd] - current working directory of the child process
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} transformer
*
* @example
* var remark = require( 'remark' );
*
* var str = '<section class="examples">\n\n## Examples\n\n```javascript\nconsole.log( "HELLO WORLD!" );\n```\n\n</section>\n\n<!-- /.examples -->';
*
* remark.use( attacher ).process( str, done );
* // => 'HELLO WORLD'
*
* function done( error ) {
*     if ( error ) {
*         throw error;
*     }
* }
*/
function attacher( options ) {
	var opts = {};

	// NOTE: cannot use `arguments.length` check, as `options` may be explicitly passed as `undefined`
	if ( options !== void 0 ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'cwd' ) ) {
			if ( !isString( options.cwd ) ) {
				throw new TypeError( 'invalid option. `cwd` option must be a string primitive. Option: `' + options.cwd + '`.' );
			}
			opts.cwd = options.cwd;
		}
	}
	return transformer( opts );
} // end FUNCTION attacher()


// EXPORTS //

module.exports = attacher;
