'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate_config.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if provided a `cwd` option which is not a string', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'cwd': values[ i ]
		};
		err = validate( opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `maxBuffer` option which is not a positive integer', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		0,
		-5,
		3.14,
		NaN,
		true,
		false,
		void 0,
		null,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'maxBuffer': values[ i ]
		};
		err = validate( opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `timeout` option which is not a nonnegative integer', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		-5,
		3.14,
		NaN,
		true,
		false,
		void 0,
		null,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'timeout': values[ i ]
		};
		err = validate( opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `throws` option which is not a boolean', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		5,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'throws': values[ i ]
		};
		err = validate( opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided an `async` option which is not a boolean', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		5,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'async': values[ i ]
		};
		err = validate( opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var opts;
	var err;

	opts = {
		'cwd': __dirname,
		'maxBuffer': 1024,
		'timeout': 10000,
		'throws': false,
		'async': true
	};

	err = validate( opts );
	t.strictEqual( err, null, 'returns null' );

	t.end();
});

tape( 'the function will ignore unrecognized options', function test( t ) {
	var opts;
	var err;

	opts = {
		'beep': true,
		'boop': 'bop'
	};

	err = validate( opts );
	t.strictEqual( err, null, 'returns null' );

	t.end();
});
