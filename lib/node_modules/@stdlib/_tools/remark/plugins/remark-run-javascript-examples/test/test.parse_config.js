'use strict';

// MODULES //

var tape = require( 'tape' );
var parse = require( './../lib/parse_config.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof parse, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function parses a configuration string', function test( t ) {
	var expected;
	var actual;
	var str;

	str = 'foo: "bar", bar: ["error", 2], baz: true, bap: null, biz: 3.14, bip: false';

	expected = {
		'foo': 'bar',
		'bar': [ 'error', 2 ],
		'baz': true,
		'bap': null,
		'biz': 3.14,
		'bip': false
	};
	actual = parse( str );

	t.deepEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function parses a configuration string (sloppy)', function test( t ) {
	var expected;
	var actual;
	var str;

	str = '     foo:      "bar",    bar   : [     "error", 2]   , baz   :true, bap   :null,biz:3.14,  bip:false        ';

	expected = {
		'foo': 'bar',
		'bar': [ 'error', 2 ],
		'baz': true,
		'bap': null,
		'biz': 3.14,
		'bip': false
	};
	actual = parse( str );

	t.deepEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns an empty object if provided an empty configuration string', function test( t ) {
	var expected;
	var actual;
	var str;

	str = '';

	expected = {};
	actual = parse( str );

	t.deepEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns an error if a configuration string is improperly formatted', function test( t ) {
	var actual;
	var str;

	str = 'foo: "bar" : "beep" : "boop"';
	actual = parse( str );

	t.strictEqual( actual instanceof Error, true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an error if a configuration string contains a key-value pair where the value is invalid JSON', function test( t ) {
	var actual;
	var str;

	str = 'foo: "bar", beep: [ "error, 2 ]'; // missing paired `"`
	actual = parse( str );

	t.strictEqual( actual instanceof Error, true, 'returns expected value' );
	t.end();
});
