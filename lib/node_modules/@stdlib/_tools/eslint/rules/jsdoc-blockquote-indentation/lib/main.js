'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var remark = require( 'remark' );
var remarkLint = require( 'remark-lint' );
var remarkPlugin = require( 'remark-lint-blockquote-indentation' );
var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var DEFAULT = 2; // default indentation is 2 characters (including the `>` symbol)
var DOPTS = {
	'sloppy': true,
	'unwrap': true
};


// MAIN //

/**
* Rule for enforcing Markdown blockquote indentation in JSDoc descriptions.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var setting;
	var source;
	var config;
	var lint;

	setting = context.options[ 0 ] || DEFAULT;
	config = {
		'plugins': [
			remarkLint,
			[ remarkPlugin, [ 'error', setting ] ]
		]
	};
	lint = remark().use( config ).processSync;
	source = context.getSourceCode();

	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Lints JSDoc descriptions.
	*
	* @private
	* @param {ASTNode} node - AST node
	*/
	function validate( node ) {
		var jsdoc;
		var vfile;
		var ast;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			if ( ast.description ) {
				vfile = lint( ast.description );
				if ( vfile.messages.length ) {
					reportErrors( vfile.messages, jsdoc.loc );
				}
			}
		}
	} // end FUNCTION validate()

	/**
	* Reports Markdown lint errors.
	*
	* @private
	* @param {ObjectArray} errors - Markdown lint errors
	* @param {Object} loc - JSDoc location information
	*/
	function reportErrors( errors, loc ) {
		var err;
		var msg;
		var i;
		for ( i = 0; i < errors.length; i++ ) {
			err = errors[ i ];
			msg = err.name;
			msg += '  ';
			msg += err.message;
			msg += '  ';
			msg += err.ruleId;
			msg += '  ';
			msg += err.source;
			report( msg, loc );
		}
	} // end FUNCTION reportErrors()

	/**
	* Reports an error message.
	*
	* @private
	* @param {string} msg - error message
	* @param {Object} loc - AST node location
	*/
	function report( msg, loc ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	} // end FUNCTION report()
} // end FUNCTION main()


// EXPORTS //

module.exports = {
	'meta': {
		'docs': {
			'description': 'enforce Markdown blockquote indentation in JSDoc descriptions'
		},
		'schema': [
			{
				'type': [
					'number',
					'string'
				]
			}
		]
	},
	'create': main
};
