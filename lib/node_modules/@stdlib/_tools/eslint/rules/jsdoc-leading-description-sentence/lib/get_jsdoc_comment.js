'use strict';

/*
* This code is adapted from a [ESLint utility function]{@link https://github.com/eslint/eslint/blob/8e1a095f4cc3b371a0a424b66e13ec77734193a2/lib/util/source-code.js} by Nicholas C. Zakas.
*
* The implementation follows the original, but has been modified to extract JSDoc comments in more cases than just function expressions and function definitions.
*/

/*
* ESLint
* Copyright JS Foundation and other contributors, https://js.foundation
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

// MODULES //

var startsWith = require( '@stdlib/string/starts-with' );


// FUNCTIONS //

/**
* Checks if the given token is a comment token or not.
*
* @private
* @param {Token} token - token to check.
* @returns {boolean} boolean indicating if the token is a comment token.
*/
function isCommentToken( token ) {
	return token.type === 'Line' || token.type === 'Block' || token.type === 'Shebang';
} // end FUNCTION isCommentToken()


// MAIN //

/**
* Retrieves the JSDoc comment for a given node.
*
* @param {Source} source - source code
* @param {ASTNode} node - AST node to get the comment for
* @returns {(Token|null)} block comment token containing the JSDoc comment for the given node or `null` if not found
*/
function getJSDocComment( source, node ) {
	var comment;
	var parent;

	/**
	* Checks for the presence of a JSDoc comment for the given node and returns it.
	*
	* @private
	* @param {ASTNode} astNode - AST node to get the comment for
	* @returns {(Token|null)} block comment token containing the JSDoc comment for the given node or null if not found
	*/
	function findJSDocComment( astNode ) {
		var tokenBefore = source.getTokenBefore( astNode, {
			'includeComments': true
		});
		var incr = 1;
		if (
			tokenBefore &&
			isCommentToken( tokenBefore ) &&
			tokenBefore.type === 'Line'
		) {
			tokenBefore = source.getTokenBefore( astNode, {
				'includeComments': true,
				'skip': 1
			});
			incr += 3;
		}
		if (
			tokenBefore &&
			isCommentToken( tokenBefore ) &&
			tokenBefore.type === 'Block' &&
			tokenBefore.value.charAt( 0 ) === '*' &&
			astNode.loc.start.line - tokenBefore.loc.end.line <= incr
		) {
			return tokenBefore;
		}
		return null;
	} // end FUNCTION findJSDocComment()

	parent = node.parent;
	switch ( node.type ) {
	case 'ClassDeclaration':
	case 'FunctionDeclaration':
		return findJSDocComment( node );
	case 'VariableDeclaration':
	case 'ExpressionStatement':
		comment = findJSDocComment( node );
		if ( comment && startsWith( comment.value, '*' ) ) {
			return comment;
		}
		return null;
	case 'ClassExpression':
		return findJSDocComment( parent.parent );
	case 'ArrowFunctionExpression':
	case 'FunctionExpression':
		if (
			parent.type !== 'CallExpression' &&
			parent.type !== 'NewExpression'
		) {
			while (
				!source.getCommentsBefore( parent ).length &&
				!/Function/.test(parent.type) &&
				parent.type !== 'MethodDefinition' &&
				parent.type !== 'Property'
			) {
				parent = parent.parent;
				if (!parent) {
					break;
				}
			}
			if (
				parent &&
				parent.type !== 'FunctionDeclaration' &&
				parent.type !== 'Program'
			) {
				return findJSDocComment( parent );
			}
		}
		return findJSDocComment(node);
	default:
		return null;
	}
} // end FUNCTION getJSDocComment()


// EXPORTS //

module.exports = getJSDocComment;
