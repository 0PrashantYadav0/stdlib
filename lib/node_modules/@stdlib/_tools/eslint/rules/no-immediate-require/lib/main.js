'use strict';

// MAIN //

/**
* Rule for validating that `require()` expressions are not immediately invoked
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'require() expressions should not be immediately invoked'
		});
	} // end FUNCTION report()

	/**
	* Checks whether require() expression is immediately invoked.
	*
	* @private
	* @param {ASTNode} node - node to examine
	* @returns {boolean} boolean indicating whether require() is immediately invoked
	*/
	function isImmediateRequire( node ) {
		if (
			node.type === 'CallExpression' &&
			node.callee.type === 'Identifier' &&
			node.callee.name === 'require'
		) {
			return true;
		}
		return false;
	} // end FUNCTION isImmediateRequire()

	/**
	* Checks whether a member of a required module is immediately invoked.
	*
	* @private
	* @param {ASTNode} node - node to examine
	* @returns {boolean} boolean indicating whether member of a required module is immediately invoked.
	*/
	function isImmediateMemberRequire( node ) {
		if (
			node.type === 'MemberExpression' &&
			node.object.type === 'CallExpression' &&
			node.object.callee.type === 'Identifier' &&
			node.object.callee.name === 'require'
		) {
			return true;
		}
		return false;
	} // end FUNCTION isImmediateMemberRequire()

	/**
	* Checks whether a require expression is immediately invoked.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		if (
			isImmediateRequire( node.callee ) ||
			isImmediateMemberRequire( node.callee )
		) {
			report( node );
		}
	} // end FUNCTION validate()

	return {
		'CallExpression': validate
	};
} // end FUNCTION main()


// EXPORTS //

module.exports = {
	'meta': {
		'docs': {
			'description': 'enforce that require() expressions are not immediately invoked'
		},
		'schema': []
	},
	'create': main
};
