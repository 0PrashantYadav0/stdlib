/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var vm = require( 'vm' );
var join = require( 'path' ).join;
var format = require( 'util' ).format;
var dirname = require( 'path' ).dirname;
var parseJSDoc = require( 'doctrine' ).parse;
var Buffer = require( '@stdlib/buffer/ctor' );
var isNull = require( '@stdlib/assert/is-null' );
var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var startsWith = require( '@stdlib/string/starts-with' );
var identity = require( '@stdlib/utils/identity-function' );
var compareValues = require( '@stdlib/_tools/doctest/compare-values' );


// VARIABLES //

var RE_ANNOTATION = /(?:var|let|const)? ?([a-zA-Z0-9.]*) ?=?[^\n]*\n\/\/ ?(?:returns|=>|throws) {0,1}([\s\S]*?)(?:\n\n|$)/g;
var DOPTS = {
	'sloppy': true,
	'unwrap': true,
	'tags': [ 'example' ]
};
var rule;


// FUNCTIONS //

/**
* Shim for `console.log` function that returns the logged data instead of printing it to `stdout`.
*
* @private
* @param {*} data - data to be logged
* @param {...*} args - substitution values
* @returns {*} return value
*/
function log( data ) {
	if ( isString( data ) ) {
		return format.apply( null, arguments );
	}
	return data;
}


// MAIN //

/**
* Rule for validating that return annotations in example code match the actual output.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var filename;
	var source;
	var scope;
	var dir;

	filename = context.getFilename();
	dir = dirname( filename );
	/**
	* Requires modules after converting relative to absolute paths.
	*
	* @private
	* @param {string} path - module path
	* @returns {*} required module
	*/
	function customRequire( path ) {
		if ( startsWith( path, './' ) ) {
			return require( join( dir, path ) ); // eslint-disable-line stdlib/no-dynamic-require
		}
		return require( path ); // eslint-disable-line stdlib/no-dynamic-require
	}

	source = context.getSourceCode();
	scope = {
		'require': customRequire,
		'exports': exports,
		'module': module,
		'process': process,
		'setTimeout': setTimeout,
		'clearTimeout': clearTimeout,
		'setInterval': setInterval,
		'clearInterval': clearInterval,
		'Buffer': Buffer,
		'__dirname': dir,
		'__filename': filename,
		'console': {
			'dir': identity,
			'error': identity,
			'log': log
		}
	};

	vm.createContext( scope );
	try {
		vm.runInContext( source.text, scope );
	} catch ( err ) {
		context.report({
			'node': null,
			'message': 'Encountered an error: '+err.message
		});
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to examine
	* @param {string} msg - error message
	*/
	function report( node, msg ) {
		context.report({
			'node': node,
			'message': msg
		});
	}

	/**
	* Checks whether return annotations in example code match the actual output.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var expected;
		var actual;
		var jsdoc;
		var code;
		var last;
		var tags;
		var ast;
		var arr;
		var tag;
		var msg;
		var out;
		var a;
		var b;
		var i;

		if ( node.parent.type !== 'Program' ) {
			// Only validate nodes at the module scope...
			return;
		}
		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			expected = [];
			actual = [];
			try {
				for ( i = 0; i < tags.length; i++ ) {
					tag = tags[ i ];
					last = 0;

					// Run entire code in case it relies on hoisting of function declarations:
					vm.runInContext( tag.description, scope );

					arr = RE_ANNOTATION.exec( tag.description );
					while ( !isNull( arr ) ) {
						// Run intermediary code:
						code = tag.description.substring( last, arr.index );
						last = arr.index + arr[ 0 ].length;
						if ( code ) {
							vm.runInContext( code, scope );
						}

						// Run code preceding return annotation:
						out = vm.runInContext( arr[ 0 ], scope );
						if ( arr[ 1 ] === 'console.log' ) {
							actual.push( out );
						} else {
							actual.push( scope[ arr[ 1 ] ] );
						}
						expected.push( arr[ 2 ] );
						arr = RE_ANNOTATION.exec( tag.description );
					}
				}
				for ( i = 0; i < expected.length; i++ ) {
					a = actual[ i ];
					b = expected[ i ];
					if ( !checkForPlaceholders( a, b, node ) ) {
						msg = compareValues( a, b );
						if ( msg ) {
							report( node, msg );
						}
					}
				}
			} catch ( err ) {
				report( node, 'Encountered an error while running code: '+err.message );
			}
		}
	}

	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Checks whether expected values are type placeholders and if so, whether the actual return values are of the respective type.
	*
	* @private
	* @param {*} actual - actual return value
	* @param {string} expected - return value annotation
	* @param {ASTNode} node - examined node
	* @returns {boolean} boolean indicating whether annotation is a placeholder and the actual return type matches
	*/
	function checkForPlaceholders( actual, expected, node ) {
		if ( expected === '<boolean>' || expected === '<Boolean>' ) {
			if ( !isBoolean( actual ) ) {
				report( node, 'Expected a boolean, but received: `'+actual+'`' );
			}
			return true;
		}
		if ( expected === '<string>'|| expected === '<String>' ) {
			if ( !isString( actual ) ) {
				report( node, 'Expected a string, but received: `'+actual+'`' );
			}
			return true;
		}
		if ( expected === '<number>' || expected === '<Number>' ) {
			if ( !isNumber( actual ) ) {
				report( node, 'Expected a number, but received: `'+actual+'`' );
			}
			return true;
		}
		if ( expected === '<Node>' ) {
			if ( !isObject( actual ) ) {
				report( node, 'Expected a node object, but received: `'+actual+'`' );
			}
			return true;
		}
		return false;
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'validate that return annotations in example code match the actual output'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
