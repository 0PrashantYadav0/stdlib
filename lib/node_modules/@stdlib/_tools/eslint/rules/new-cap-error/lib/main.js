'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var ERRORS = require( './errors.json' );


// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Extract callee name from call expression.
*
* @private
* @param {ASTNode} node - CallExpression node
* @returns {(string|null)} callee name
*/
function extractName( node ) {
	var prop;
	if ( node.callee.type === 'MemberExpression' ) {
		prop = node.callee.property;
		if ( prop.type === 'Literal' && isString( prop.value ) ) {
			return prop.value;
		}
		if ( prop.type === 'Identifier' && !node.callee.computed ) {
			return prop.name;
		}
		return null;
	}
	return node.callee.name;
} // end FUNCTION extractName()

/**
* Rule for validating that error constructors are not invoked without the `new` keyword.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	* @param {string} name - constructor name
	*/
	function report( node, name ) {
		context.report({
			'node': node,
			'message': '`'+name+'` constructor is invoked without the `new` keyword'
		});
	} // end FUNCTION report()

	/**
	* Checks whether error constructors are invoked without the `new` keyword.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var calleeName = extractName( node );
		if ( isString( calleeName ) && contains( ERRORS, calleeName ) ) {
			report( node, calleeName );
		}
	} // end FUNCTION validate()

	return {
		'CallExpression': validate
	};
} // end FUNCTION main()


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that error constructors are invoked with the `new` keyword'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
