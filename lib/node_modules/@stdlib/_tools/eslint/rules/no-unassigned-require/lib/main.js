'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Rule forbidding unassigned require statements.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'result of `require()` call is not assigned'
		});
	}

	/**
	* Checks whether the result of a `require` call is assigned.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		if (
			node.expression.type === 'CallExpression' &&
			node.expression.callee &&
			node.expression.callee.type === 'Identifier' &&
			node.expression.callee.name === 'require'
		) {
			report( node );
		}
	}

	return {
		'ExpressionStatement': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'forbid unassigned require statements'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
