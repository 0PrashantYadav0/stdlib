/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} x*x',
		'* @example',
		'* var y = square( 3.0 );',
		'* // returns 12.0',
		'*',
		'* console.log( square( 2.0 ) );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `12.0`, but function returns `9` instead',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var evil = require( \'@stdlib/utils/eval\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Tests for native `function*()` support.',
		'*',
		'* @returns {boolean} boolean indicating if an environment has native `function*()` support',
		'*',
		'* @example',
		'* var bool = hasGeneratorSupport();',
		'* // returns <string>',
		'*/',
		'function hasGeneratorSupport() {',
		'	var bool;',
		'	try {',
		'		evil( \'"use strict"; (function* () {})\' );',
		'		bool = true;',
		'	} catch ( err ) { // eslint-disable-line no-unused-vars',
		'		bool = false;',
		'	}',
		'	return bool;',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = hasGeneratorSupport;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Expected a string, but received: `true`',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var asin = require( \'@stdlib/math/base/special/asin\' );',
		'var sqrt = require( \'@stdlib/math/base/special/sqrt\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Computes the inverse half-value versed sine.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} inverse half-value versed sine',
		'*',
		'* @example',
		'* var v = ahaversin( 0.0 );',
		'* // returns 0.0',
		'*',
		'* @example',
		'* var v = ahaversin( 1.0 );',
		'* // returns 3.1416',
		'*',
		'* @example',
		'* var v = ahaversin( 0.5 );',
		'* // returns ~1.5708',
		'*',
		'* @example',
		'* var v = ahaversin( NaN );',
		'* // returns null',
		'*/',
		'function ahaversin( x ) {',
		'	return 2.0 * asin( sqrt( x ) );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = ahaversin;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `3.1416`, but function returns `3.141592653589793` instead',
			'type': null
		},
		{
			'message': 'Displayed return value is `null`, but function returns `NaN` instead',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isString = require( \'@stdlib/assert/is-string\' ).isPrimitive;',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Removes the first character of a string.',
		'*',
		'* @param {string} str - input string',
		'* @throws {TypeError} must provide a string primitive',
		'* @returns {string} updated string',
		'*',
		'* @example',
		'* var out = removeFirst( \'last man standing\' );',
		'* // returns \'ast man standing\'',
		'*',
		'* @example',
		'* var out = removeFirst( \'presidential election\' );',
		'* // returns \'residential election\'',
		'*',
		'* @example',
		'* var out = removeFirst( \'javaScript\' );',
		'* // returns \'javaScript\'',
		'*',
		'* @example',
		'* var out = removeFirst( \'Hidden Treasures\' );',
		'* // returns \'idden Treasures\'',
		'*/',
		'function removeFirst( str ) {',
		'	if ( !isString( str ) ) {',
		'		throw new TypeError( \'invalid argument. First argument must be a string primitive. Value: `\' + str + \'`.\' );',
		'	}',
		'	if ( str === \'\' ) {',
		'		return \'\';',
		'	}',
		'	return str.substring( 1 );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = removeFirst;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `javaScript`, but function returns `avaScript` instead',
			'type': null
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
