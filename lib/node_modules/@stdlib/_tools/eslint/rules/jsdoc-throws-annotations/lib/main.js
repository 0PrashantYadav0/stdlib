/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var countBy = require( '@stdlib/utils/count-by' );
var identity = require( '@stdlib/utils/identity-function' );
var isObject = require( '@stdlib/assert/is-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true,
	'tags': [ 'throws' ]
};
var rule;


// FUNCTIONS //

/**
* Rule for validating that functions are not missing `@throws` annotations.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var throwStatements;
	var functionHash;
	var source;

	source = context.getSourceCode();
	functionHash = {};
	throwStatements = [];

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} fcn - function metadata
	* @param {string} type - error type
	*/
	function report( fcn, type ) {
		context.report({
			'loc': fcn.loc,
			'message': '`'+fcn.name+'` is missing `@throws {'+type+'}` annotation(s)'
		});
	}

	/**
	* Registers a function.
	*
	* @private
	* @param {ASTNode} node - function node
	*/
	function registerFunction( node ) {
		var name = node.id.name;
		if ( name ) {
			if ( !hasOwnProp( functionHash, name ) ) {
				functionHash[ name ] = {
					'name': name,
					'start': node.start,
					'end': node.end,
					'loc': node.loc,
					'throwAnnotations': extractThrowsAnnotations( node )
				};
			}
		}
	}

	/**
	* Extracts `@throws` annotations from JSDoc comment corresponding to the given node.
	*
	* @private
	* @param {ASTNode} node - function node
	* @returns {Array} array of error annotation types
	*/
	function extractThrowsAnnotations( node ) {
		var jsdoc;
		var tags;
		var ast;
		var out;
		var i;

		out = [];
		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			for ( i = 0; i < tags.length; i++ ) {
				if ( tags[ i ].title === 'throws' ) {
					out.push( tags[ i ].type.name );
				}
			}
		}
		return out;
	}

	/**
	* Finish processing of the current program and report any errors.
	*
	* @private
	*/
	function finish() {
		var start;
		var stmt;
		var end;
		var fcn;
		var key;
		var i;

		for ( key in functionHash ) {
			if ( hasOwnProp( functionHash, key ) ) {
				fcn = functionHash[ key ];
				start = fcn.start;
				end = fcn.end;
				fcn.throwStatements = [];
				for ( i = 0; i < throwStatements.length; i++ ) {
					stmt = throwStatements[ i ];
					if ( stmt.start > start && stmt.end < end ) {
						fcn.throwStatements.push( stmt.type );
					}
				}
				validateFunction( fcn );
			}
		}
	}

	/**
	* Validates the given function and reports any errors.
	*
	* @private
	* @param {Object} fcn - function metadata
	*/
	function validateFunction( fcn ) {
		var annotations = countBy( fcn.throwAnnotations, identity );
		var statements = countBy( fcn.throwStatements, identity );
		var key;
		for ( key in statements ) {
			if ( hasOwnProp( statements, key ) ) {
				if ( !hasOwnProp( annotations, key ) ) {
					report( fcn, key );
				}
			}
		}
	}

	/**
	* Registers throw statements encountered in the program.
	*
	* @private
	* @param {ASTNode} node - ThrowStatement node
	*/
	function registerThrowStatement( node ) {
		var obj = {
			'start': node.start,
			'end': node.end,
			'type': node.argument.callee.name
		};
		throwStatements.push( obj );
	}

	return {
		'Program:exit': finish,
		':function': registerFunction,
		'ThrowStatement': registerThrowStatement
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that JSDoc comments of functions are not missing @throws annotations'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
