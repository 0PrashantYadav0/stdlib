'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'// VARIABLES //',
		'',
		'var arr = new Int32Array( [1,2,3] );'
	].join( '\n' ),
	'errors': [
		{
			'message': 'typed array constructor is invoked without loading it beforehand via require()',
			'type': 'NewExpression'
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'// MAIN //',
		'',
		'function dice() {',
		'  return new Int32Array( [1,2,3,4,5,6] );',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'typed array constructor is invoked without loading it beforehand via require()',
			'type': 'NewExpression'
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'var push = require( \'@stdlib/utils/push\' )',
		'',
		'var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];',
		'',
		'arr = push( arr, 6.0, 7.0 );',
		'// returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]',
		'',
		'arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );',
		'// returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]'
	].join( '\n' ),
	'errors': [
		{
			'message': 'typed array constructor is invoked without loading it beforehand via require()',
			'type': 'NewExpression'
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Multiply matrices x and y.',
		'*',
		'* @private',
		'* @param {Float64Array} x - first input matrix',
		'* @param {Float64Array} y - second input matrix',
		'* @returns {Float64Array} matrix product',
		'*/',
		'function mmult( x, y ) {',
		'	var i;',
		'	var j;',
		'	var k;',
		'	var s;',
		'	var z;',
		'',
		'	z = new Float64Array( m * m );',
		'	for ( i = 0; i < m; i++) {',
		'		for ( j = 0; j < m; j++ ) {',
		'			s = 0;',
		'			for ( k = 0; k < m; k++ ) {',
		'				s += x[ (i*m) + k ] * y[ (k*m) + j ];',
		'				z[ (i*m) + j ] = s;',
		'			}',
		'		}',
		'	}',
		'	return z;',
		'} // end FUNCTION mmult()'
	].join( '\n' ),
	'errors': [
		{
			'message': 'typed array constructor is invoked without loading it beforehand via require()',
			'type': 'NewExpression'
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
