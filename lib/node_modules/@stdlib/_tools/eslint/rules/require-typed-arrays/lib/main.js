'use strict';

// VARIABLES //

var TYPES = [
	'Float64Array',
	'Float32Array',
	'Int32Array',
	'Uint32Array',
	'Int16Array',
	'Uint16Array',
	'Int8Array',
	'Uint8Array',
	'Uint8ClampedArray'
];


// MAIN //

/**
* Rule to enforce that typed array constructors are explicitly required before invocation.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'typed array constructor is invoked without loading it beforehand via require()'
		});
	} // end FUNCTION report()

	/**
	* Checks whether a typed array constructor is loaded via require() before invocation.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var scope;
		var type;
		var i;

		for ( i = 0; i < TYPES.length; i++ ) {
			type = TYPES[ i ];
			if (
				node.callee.type === 'Identifier' &&
				node.callee.name === type
			) {
				scope = context.getScope();
				if ( !searchScopes( scope, type ) ) {
					report( node );
				}
				break;
			}
		}
	} // end FUNCTION validate()

	/**
	* Traverses the parent scopes searching for a variable declaration of the given typed array constructor.
	*
	* @private
	* @param {Object} scope - scope to examine
	* @param {string} type - typed array identifier name
	* @returns {boolean} boolean indicating whether a variable declaration for the given typed array was found
	*/
	function searchScopes( scope, type ) {
		if ( !scope ) {
			return false;
		}
		if ( scope.set.has( type ) ) {
			// Check whether the definition is due to an implicit global or not:
			return scope.set.get( type ).defs.length > 0;
		}
		return searchScopes( scope.upper, type );
	} // end FUNCTION searchScopes()

	return {
		'NewExpression': validate
	};
} // end FUNCTION main()


// EXPORTS //

module.exports = {
	'meta': {
		'docs': {
			'description': 'enforce that typed array constructors are explicitly required before invocation'
		},
		'schema': []
	},
	'create': main
};
