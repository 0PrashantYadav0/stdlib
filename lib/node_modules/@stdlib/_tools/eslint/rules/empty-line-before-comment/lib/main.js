'use strict';

// MAIN //

/**
* Rule for validating that single-line comments are preceded by empty lines.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	* @returns {void}
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'Missing empty line before single-line comment'
		});
	} // end FUNCTION report()

	/**
	* Checks whether single-line comments are preceded by empty lines.
	*
	* @private
	* @param {ASTNode} node - node to examine
	* @returns {void}
	*/
	function validate( node ) {
		var startsLine;
		var firstLine;
		var prevLine;
		var comments;
		var current;
		var token;
		var line;
		var i;

		comments = source.getCommentsInside( node );
		firstLine = source.getFirstToken( node ).loc.start.line;
		for ( i = 0; i < comments.length; i++ ) {
			current = comments[ i ];
			line = current.loc.start.line;
			prevLine = source.lines[ line-2 ];
			token = source.getTokenBefore( current );
			if ( token.loc.start.line === line ) {
				startsLine = false;
			} else {
				startsLine = true;
			}
			if (
				startsLine &&
				prevLine !== '' &&
				firstLine !== line - 1 &&
				token.value !== '{'
			) {
				report( node );
			}
		}
	} // end FUNCTION validate()

	return {
		'FunctionDeclaration': validate,
		'FunctionExpression': validate,
		'BlockExpression': validate
	};
} // end FUNCTION main()


// EXPORTS //

module.exports = {
	'meta': {
		'docs': {
			'description': 'enforce empty lines before single-line comments'
		},
		'schema': []
	},
	'create': main
};
