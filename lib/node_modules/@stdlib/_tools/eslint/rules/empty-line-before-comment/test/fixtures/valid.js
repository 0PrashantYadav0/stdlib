'use strict';

var valid = [];
var test;

test = {
	'code': [
		'function square( x ) {',
		'  var out;',
		'',
		'  // Square the number:',
		'  out = x*x;',
		'  return out;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'function fizzBuzz( x ) {',
		'  var i;',
		'',
		'  for ( i = 1; i <= 100; i++ ) {',
		'    console.log( i ); // TODO: print "Fizz" for multiples of 3 and "Buzz" for multiples of 5',
		'  }',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'function square( x ) {',
		'  // Square the number:',
		'  var out;',
		'  out = x*x;',
		'  return out;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
valid.push( test );


test = {
	'code': [
		'console.log( 2.0*2.0 )',
		'// => 4.0'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on [0,1].',
		'* ',
		'* @returns {number} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., returns 0.5363925252089496',
		'*/',
		'function rand( x ) {',
		'  return Math.random();',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'console.log( Math.random() )',
		'// e.g., => 0.4893448673062615'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var data = names();',
		'/* returns',
		'  [',
		'    \'Aaren\',',
		'    \'Aarika\',',
		'    \'Abagael\',',
		'    ...',
		'  ]',
		'*/'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var data = [ Math.random(), Math.random() ];',
		'/* e.g., returns',
		'  [',
		'    0.2580887012988746,',
		'    0.128454513229588',
		'  ]',
		'*/'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'console.log( [ Math.random(), Math.random() ] )',
		'/* e.g., =>',
		'  [',
		'    0.2580887012988746,',
		'    0.128454513229588',
		'  ]',
		'*/'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		' /**',
		' * Returns the number of minutes in a month.',
		' *',
		' * @param {(string|Date|integer)} [month] - month',
		' * @param {integer} [year] - year',
		' * @throws {TypeError} first argument must be either a string, integer, or `Date` object',
		' * @throws {Error} must provide a recognized month',
		' * @throws {RangeError} an integer month argument must be on the interval `[1,12]`',
		' * @throws {TypeError} second argument must be an integer',
		' * @returns {integer} minutes in a month',
		' *',
		' * @example',
		' * var num = minutesInMonth();',
		' * // returns <number>',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2 );',
		' * // returns <number>',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2, 2016 );',
		' * // returns 41760',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2, 2017 );',
		' * // returns 40320',
		' */',
		'function minutesInMonth( month, year ) {',
		'	var mins;',
		'	var mon;',
		'	var yr;',
		'	var d;',
		'	if ( arguments.length === 0 ) {',
		'		// Note: cannot cache as application may cross over into a new year:',
		'		d = new Date();',
		'		mon = d.getMonth() + 1; // zero-based',
		'		yr = d.getFullYear();',
		'	} else if ( arguments.length === 1 ) {',
		'		if ( isDateObject( month ) ) {',
		'			d = month;',
		'			mon = d.getMonth() + 1; // zero-based',
		'			yr = d.getFullYear();',
		'		} else if ( isString( month ) || isInteger( month ) ) {',
		'			// Note: cannot cache as application may cross over into a new year:',
		'			yr = ( new Date() ).getFullYear();',
		'			mon = month;',
		'		} else {',
		'			throw new TypeError( \'invalid input argument. First argument must be either a string, integer, or `Date` object. Value: `\'+month+\'`.\' );',
		'		}',
		'	} else {',
		'		if ( !isString( month ) && !isInteger( month ) ) {',
		'			throw new TypeError( \'invalid input argument. First argument must be either a string or integer. Value: `\'+month+\'`.\' );',
		'		}',
		'		if ( !isInteger( year ) ) {',
		'			throw new TypeError( \'invalid input argument. Second argument must be an integer. Value: `\'+year+\'`.\' );',
		'		}',
		'		mon = month;',
		'		yr = year;',
		'	}',
		'	if ( isInteger( mon ) && (mon < 1 || mon > 12) ) {',
		'		throw new RangeError( \'invalid input argument. An integer month value must be on the interval `[1,12]`. Value: `\'+mon+\'`.\' );',
		'	}',
		'	mon = lowercase( mon.toString() );',
		'	mins = MINUTES_IN_MONTH[ mon ];',
		'	if ( mins === void 0 ) {',
		'		throw new Error( \'invalid input argument. Must provide a recognized month. Value: `\'+mon+\'`.\' );',
		'	}',
		'	// Check if February during a leap year...',
		'	if ( mins === 40320 && isLeapYear( yr ) ) {',
		'		mins += MINUTES_IN_DAY;',
		'	}',
		'	return mins;',
		'} // end FUNCTION minutesInMonth()'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'function isActualNumber( x ) {',
		'  if (',
		'    // Check for numbers...',
		'    typeof value === \'number\' &&',
		'',
		'    // Return `false` for `NaN`...',
		'    x === x',
		'  ) {',
		'    return true;',
		'  } else {',
		'    return false;',
		'  }',
		'}'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
