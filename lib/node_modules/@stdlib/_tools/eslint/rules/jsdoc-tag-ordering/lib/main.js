'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var indexOf = require( '@stdlib/utils/index-of' );
var isObject = require( '@stdlib/assert/is-object' );
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );
var DEFAULTS = require( './defaults.json' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true
};
var rule;


// FUNCTIONS //

/**
* Rule for validating that tags inside of JSDoc comments follow a specified ordering.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var options;
	var source;
	var order;

	options = context.options[ 0 ];
	order = DEFAULTS.order;
	if ( hasOwnProp( options, 'order' ) ) {
		order = options.order;
	}
	source = context.getSourceCode();
	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Checks whether JSDoc comments contain only allowed JSDoc tags.
	*
	* @private
	* @param {ASTNode} node - AST node
	*/
	function validate( node ) {
		var current;
		var jsdoc;
		var last;
		var tags;
		var ast;
		var i;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			if ( isObjectArray( tags ) ) {
				last = indexOf( order, tags[ 0 ].title );
				for ( i = 1; i < tags.length; i++ ) {
					current = indexOf( order, tags[ i ].title );
					if ( current !== -1 && last !== -1 && current < last ) {
						report( order[ last ], order[ current ], jsdoc.loc );
					}
					last= current;
				}
			}
		}
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {string} last - name of last tag
	* @param {string} current - name of current tag
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( last, current, loc ) {
		context.report({
			'node': null,
			'message': '"@'+current+'" tag may not follow "@'+last+'"',
			'loc': loc
		});
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that JSDoc tags follow a specified ordering'
		},
		'schema': [
			{
				'type': 'object',
				'properties': {
					'order': {
						'type': 'array'
					}
				},
				'additionalProperties': false
			}
		]
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
