'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var contains = require( '@stdlib/assert/contains' );
var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );
var ALLOWED = require( './allowed.json' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true
};


// MAIN //

/**
* Rule for validating that tags inside of JSDoc comments follow a specified ordering.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();
	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Checks whether JSDoc comments contain only allowed JSDoc tags.
	*
	* @private
	* @param {ASTNode} node - AST node
	*/
	function validate( node ) {
		var state;
		var jsdoc;
		var tags;
		var ast;
		var i;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			state = '^';
			for ( i = 0; i < tags.length; i++ ) {
				if ( !contains( ALLOWED[ state ], tags[ i ].title ) ) {
					report( state, tags[ i ].title, jsdoc.loc );
				}
				state = tags[ i ].title;
			}
		}
	} // end FUNCTION validate()

	/**
	* Reports the error message.
	*
	* @private
	* @param {string} last - name of last tag
	* @param {string} current - name of current tag
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( last, current, loc ) {
		var msg = '"@'+current+'" tag may not ';
		if ( last === '^' ) {
			msg += 'be the first tag';
		} else {
			msg += 'follow "@'+last+'"';
		}
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	} // end FUNCTION report()
} // end FUNCTION main()


// EXPORTS //

module.exports = {
	'meta': {
		'docs': {
			'description': 'enforce that JSDoc tags follow a specified ordering'
		},
		'schema': []
	},
	'create': main
};
