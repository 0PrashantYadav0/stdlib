/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var valid = [];
var test;

test = {
	'code': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'console.log( isLowercase( \'hello\' ) );',
		'// => true',
		'',
		'console.log( isLowercase( \'\' ) );',
		'// => false',
		'',
		'console.log( isLowercase( \'Hello\' ) );',
		'// => false'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		' var obj = { \'beep\': \'boop\' };',
		'',
		'console.log( obj );',
		'// => { \'beep\': \'boop\' }',
		'',
		'delete obj.beep;',
		'',
		'console.log( obj );',
		'// => {}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'var bool = isLowercase( \'hello\' );',
		'// returns true',
		'',
		'bool = isLowercase( \'\' );',
		'// returns false',
		'',
		'bool = isLowercase( \'Hello\' );',
		'// returns false'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'// Checks for lowercase:',
		'var bool = isLowercase( \'hello\' );',
		'// returns true',
		'',
		'bool = isLowercase( \'\' );',
		'// returns false',
		'',
		'bool = isLowercase( \'Hello\' );',
		'// returns false'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		' var SharedArrayBuffer = require( \'@stdlib/array/shared-buffer\' );',
		'',
		' try {',
		'     var bool = isSharedArrayBuffer( new SharedArrayBuffer( 10 ) );',
		'     // returns true',
		' } catch ( err ) {',
		'     console.log( \'Environment does not support SharedArrayBuffers.\' );',
		' }',
		''
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var functionName = require( \'@stdlib/utils/function-name\' );',
		'',
		'console.log( functionName( Math.sqrt ) ); // eslint-disable-line stdlib/no-builtin-math',
		'// => \'sqrt\'',
		'',
		'console.log( functionName( Float64Array ) );',
		'// => \'Float64Array\'',
		'',
		'console.log( functionName( Date ) );',
		'// => \'Date\'',
		'',
		'console.log( functionName( String ) );',
		'// => \'String\''
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var startsWith = require( \'@stdlib/string/starts-with\' );',
		'',
		'var str = \'Fair is foul, and foul is fair, hover through fog and filthy air\';',
		'',
		'console.log( startsWith( str, \'Fair\' ) );',
		'// => true',
		'',
		'console.log( startsWith( str, \'fair\' ) );',
		'// => false',
		'',
		'console.log( startsWith( str, \'foul\', 8 ) );',
		'// => true',
		'',
		'console.log( startsWith( str, \'filthy\', -10 ) );',
		'// => true',
		'',
		''
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'var randu = require( \'@stdlib/random/base/randu\' );',
		'var Float64Array = require( \'@stdlib/array/float64\' );',
		'var sparkline = require( \'@stdlib/plot/sparklines/unicode\' );',
		'',
		'var chart;',
		'var data;',
		'var str;',
		'var i;',
		'',
		'// Generate some random data...',
		'data = new Float64Array( 50 );',
		'for ( i = 0; i < data.length; i++ ) {',
		'	data[ i ] = randu() * 100.0;',
		'}',
		'',
		'// Create a sparkline chart:',
		'chart = sparkline( data );',
		'',
		'// Render the chart as a column chart:',
		'chart.type = \'column\';',
		'str = chart.render();',
		'console.log( str );',
		'// => \'...\'',
		'',
		'// Render the chart as a line chart:',
		'chart.type = \'line\';',
		'str = chart.render();',
		'console.log( str );',
		'// => \'...\''
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'var tokenize = require( \'@stdlib/nlp/tokenize\' );',
		'',
		'console.log( tokenize( \'Hello World!\' ) );',
		'// => [ \'Hello\', \'World\', \'!\' ]',
		'',
		'console.log( tokenize( \'\' ) );',
		'// => []',
		'',
		'var str = \'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod.\';',
		'console.log( tokenize( str ) );',
		'/* =>',
		'	[',
		'		\'Lorem\',',
		'		\'ipsum\',',
		'		\'dolor\',',
		'		\'sit\',',
		'		\'amet\',',
		'		\',\',',
		'		\'consetetur\',',
		'		\'sadipscing\',',
		'		\'elitr\',',
		'		\',\',',
		'		\'sed\',',
		'		\'diam\',',
		'		\'nonumy\',',
		'		\'eirmod\',',
		'		\'.\'',
		'	]',
		'*/'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var contains = require( \'@stdlib/assert/contains\' )',
		'',
		'var v = contains( false, \'abc\' );',
		'// throws <TypeError>'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var iterator = require( \'@stdlib/random/iterators/uniform\' );',
		'var it = iterator( 13.0, 9.0 );',
		'// throws <RangeError>'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var iterator = require( \'@stdlib/random/iterators/uniform\' );',
		'var it = iterator( 13.0, 9.0 );',
		'// throws <RangeError>',
		'',
		'var it = iterator( 3.0, 1.0 );',
		'// throws <RangeError>'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var reviveError = require( \'@stdlib/error/reviver\' );',
		'',
		'var str = \'{"type":"TypeError","message":"beep"}\';',
		'',
		'var err = JSON.parse( str, reviveError );',
		'// returns <TypeError>'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var normalize = require( \'@stdlib/number/float64/base/normalize\' );',
		'var PINF = require( \'@stdlib/constants/math/float64-pinf\' );',
		'var NINF = require( \'@stdlib/constants/math/float64-ninf\' );',
		'',
		'var out = normalize( PINF );',
		'// returns [ Infinity, 0 ]',
		'',
		'out = normalize( NINF );',
		'// returns [ -Infinity, 0 ]'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var Number = require( \'@stdlib/number/ctor\' );',
		'',
		'var v = new Number( 5.0 );',
		'// returns <Number>'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var mapKeys = require( \'@stdlib/utils/map-keys\' );',
		'',
		'function transform( key, value ) {',
		'  return key + \':\' + value;',
		'}',
		'',
		'var obj1 = {',
		'  \'a\': \'beep\',',
		'  \'b\': \'boop\',',
		'  \'c\': \'foo\',',
		'  \'d\': \'bar\'',
		'};',
		'',
		'var obj2 = mapKeys( obj1, transform );',
		'',
		'console.dir( obj2 );',
		'// => { \'a:beep\': \'beep\', \'b:boop\': \'boop\', \'c:foo\': \'foo\', \'d:bar\': \'bar\' }'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
