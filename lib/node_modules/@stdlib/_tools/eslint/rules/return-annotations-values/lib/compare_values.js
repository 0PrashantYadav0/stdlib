/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var roundn = require( '@stdlib/math/base/special/roundn' );
var epsdiff = require( '@stdlib/math/base/utils/float64-epsilon-difference' );
var indexOf = require( '@stdlib/utils/index-of' );
var isNull = require( '@stdlib/assert/is-null' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isObjectLike = require( '@stdlib/assert/is-object-like' );
var startsWith = require( '@stdlib/string/starts-with' );
var contains = require( '@stdlib/assert/contains' );
var endsWith = require( '@stdlib/string/ends-with' );
var removeFirst = require( '@stdlib/string/remove-first' );
var removeLast = require( '@stdlib/string/remove-last' );
var replace = require( '@stdlib/string/replace' );
var trim = require( '@stdlib/string/trim' );


// VARIABLES //

var RE_UNQUOTED_KEYS = /([\w]+)\s*:/g;
var RE_SINGLE_QUOTED_KEYS = /'([^']+)'/g;
var RE_COMMA_BEFORE = / ([\]}])/g;
var RE_COMMA_AFTER = /([{[,:]) /g;


// FUNCTIONS //

/**
* Wraps captured match in double quotes.
*
* @private
* @param {string} match - entire match
* @param {string} $1 - first capture group
* @returns {string} quoted match
*/
function replacer( match, $1 ) {
	return '"'+$1+'"';
}

/**
* Formats return annotation as JSON.
*
* @private
* @param {string} str - return annotation string
* @returns {string} JSON-formatted string
*/
function formatJSON( str ) {
	var out = replace( str, RE_UNQUOTED_KEYS, replacer );
	out = replace( out, RE_SINGLE_QUOTED_KEYS, replacer );
	out = replace( out, RE_COMMA_BEFORE, '$1' );
	out = replace( out, RE_COMMA_AFTER, '$1' );
	return out;
}


// MAIN //

/**
* Checks whether the actual return value is equal to the value of the return annotation.
*
* @private
* @param {*} actual - actual return value
* @param {string} expected - return value annotation
* @returns {(string|null)} error message in case of mismatch, `null` otherwise
*/
function compareValues( actual, expected ) {
	var parsed;
	var parts;
	var dgts;
	var msg1;
	var msg2;
	var a;
	var b;
	if ( contains( expected, '||' ) ) {
		parts = expected.split( '||' );
		a = trim( parts[ 0 ] );
		b = trim( parts[ 1 ] );
		msg1 = compareValues( actual, a );
		msg2 = compareValues( actual, b );
		if ( msg1 && msg2 ) {
			return 'Displayed return value should be '+a+' or '+b+', but actual value is `'+actual+'`';
		}
		return null;
	}
	if ( expected === 'NaN' ) {
		if ( !isNaN( actual ) ) {
			return 'Displayed return value is `NaN`, but function returns `'+actual+'` instead';
		}
	}
	else if ( expected === 'null' ) {
		if ( !isNull( actual ) ) {
			return 'Displayed return value is `null`, but function returns `'+actual+'` instead';
		}
	}
	else if ( isNumber( actual ) ) {
		if ( startsWith( expected, '~' ) ) {
			if ( contains( expected, 'e' ) ) {
				dgts = indexOf( expected, 'e' ) - indexOf( expected, '.' );
				a = actual.toPrecision( dgts );
				b = removeFirst( expected );
			} else {
				dgts = expected.length - indexOf( expected, '.' ) - 1;
				a = roundn( actual, -dgts );
				b = roundn( parseFloat( removeFirst( expected ) ), -dgts );
			}
		} else {
			a = actual;
			b = parseFloat( expected );
		}
		if ( epsdiff( a, b ) > 10.0 ) {
			return 'Displayed return value is `'+expected+'`, but function returns `'+actual+'` instead';
		}
	}
	else if ( isBoolean( actual ) ) {
		actual = String( actual );
		if ( expected !== actual ) {
			return 'Displayed return value is `'+expected+'`, but function returns `'+actual+'` instead';
		}
	}
	else if ( isString( actual ) ) {
		if ( !startsWith( expected, '\'' ) || !endsWith( expected, '\'' ) ) {
			return '`'+expected+'` should be wrapped in single quotes';
		}
		expected = removeFirst( removeLast( expected ) );

		// Harmonize escapes between annotations and actual values:
		expected = replace( expected, '\\\'', '\'' );
		actual = replace( actual, '\n', '\\n' );
		actual = replace( actual, '\t', '\\t' );
		if ( expected !== actual && expected !== '...' ) {
			return 'Displayed return value is `'+expected+'`, but function returns `'+actual+'` instead';
		}
	}
	else if ( isObjectLike( actual ) ) {
		if ( !contains( expected, '...' ) ) {
			// Check for deep equality via `JSON.stringify`:
			parsed = formatJSON( expected );
			actual = JSON.stringify( actual );
			if ( parsed !== actual ) {
				return 'Displayed return value is `'+parsed+'`, but function returns `'+actual+'` instead';
			}
		}
	}
	return null;
}


// EXPORTS //

module.exports = compareValues;
