/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var vm = require( 'vm' );
var join = require( 'path' ).join;
var dirname = require( 'path' ).dirname;
var Buffer = require( '@stdlib/buffer/ctor' );
var isNull = require( '@stdlib/assert/is-null' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var replace = require( '@stdlib/string/replace' );
var startsWith = require( '@stdlib/string/starts-with' );
var identity = require( '@stdlib/utils/identity-function' );
var compareValues = require( './compare_values.js' );


// VARIABLES //

var RE_JSDOC = /\/\*\*[\s\S]+?\*\//g;
var RE_NEWLINE = /\r?\n/g;
var RE_ANNOTATION = /(?:var|let|const)? ?([a-zA-Z0-9.]*) ?=?[^\n]*\n\/\/ ?(?:returns|=>|throws) {0,1}([\s\S]*?)(?:\n\n|$)/g;
var rule;


// FUNCTIONS //

/**
* Counts the number of lines in the given string.
*
* @private
* @param {string} str - input string
* @returns {number} number of lines
*/
function countLines( str ) {
	return ( str.match( RE_NEWLINE ) || '' ).length;
}


// MAIN //

/**
* Rule for validating that return annotations match the actual output.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var sourceCode;
	var filename;
	var source;
	var scope;
	var dir;

	source = context.getSourceCode();
	sourceCode = replace( source.text, RE_JSDOC, '' );
	filename = context.getFilename();
	dir = dirname( filename );
	/**
	* Requires modules after converting relative to absolute paths.
	*
	* @private
	* @param {string} path - module path
	* @returns {*} required module
	*/
	function customRequire( path ) {
		if ( startsWith( path, './' ) ) {
			return require( join( dir, path ) ); // eslint-disable-line stdlib/no-dynamic-require
		}
		return require( path ); // eslint-disable-line stdlib/no-dynamic-require
	}
	scope = {
		'require': customRequire,
		'exports': exports,
		'module': module,
		'process': process,
		'setTimeout': setTimeout,
		'clearTimeout': clearTimeout,
		'setInterval': setInterval,
		'clearInterval': clearInterval,
		'Buffer': Buffer,
		'__dirname': dir,
		'__filename': filename,
		'console': {
			'log': identity
		}
	};
	vm.createContext( scope );

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} loc - error location info
	* @param {string} msg - error message
	*/
	function report( loc, msg ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	}

	/**
	* Checks whether return annotations in the current program match the actual output.
	*
	* @private
	*/
	function validate() {
		var positions;
		var expected;
		var actual;
		var code;
		var last;
		var line;
		var arr;
		var idx;
		var loc;
		var msg;
		var out;
		var a;
		var b;
		var i;

		positions = [];
		expected = [];
		actual = [];
		last = 0;
		try {
			arr = RE_ANNOTATION.exec( sourceCode );
			while ( !isNull( arr ) ) {
				// Run intermediary code:
				code = sourceCode.substring( last, arr.index );
				last = arr.index + arr[ 0 ].length;
				if ( code ) {
					vm.runInContext( code, scope );
				}

				// Run code preceding return annotation:
				out = vm.runInContext( arr[ 0 ], scope );
				if ( arr[ 1 ] === 'console.log' ) {
					actual.push( out );
				} else {
					actual.push( scope[ arr[ 1 ] ] );
				}
				expected.push( arr[ 2 ] );

				// Calculate line of current code chunk:
				idx = source.text.indexOf( arr[ 0 ] );
				line = countLines( source.text.substring( 0, idx ) ) + 1;
				positions.push({
					'start': {
						'line': line,
						'column': 0
					},
					'end': {
						'line': line,
						'column': arr[ 0 ].length
					}
				});
				arr = RE_ANNOTATION.exec( sourceCode );
			}
			for ( i = 0; i < expected.length; i++ ) {
				a = actual[ i ];
				b = expected[ i ];
				loc = positions[ i ];
				if ( !checkForPlaceholders( a, b, loc ) ) {
					msg = compareValues( a, b );
					if ( msg ) {
						report( loc, msg );
					}
				}
			}
		} catch ( err ) {
			loc = {
				'start': {
					'line': 0,
					'column': 0
				},
				'end': {
					'line': countLines( source.text ),
					'column': 0
				}
			};
			report( loc, 'Encountered an error while running code: '+err.message );
		}
	}

	return {
		'Program': validate
	};

	/**
	* Checks whether expected values are type placeholders and if so, whether the actual return values are of the respective type.
	*
	* @private
	* @param {*} actual - actual return value
	* @param {string} expected - return value annotation
	* @param {Object} loc - error location info
	* @returns {boolean} boolean indicating whether annotation is a placeholder and the actual return type matches
	*/
	function checkForPlaceholders( actual, expected, loc ) {
		if ( expected === '<boolean>' || expected === '<Boolean>' ) {
			if ( !isBoolean( actual ) ) {
				report( loc, 'Expected a boolean, but received: `'+actual+'`' );
			}
			return true;
		}
		if ( expected === '<string>'|| expected === '<String>' ) {
			if ( !isString( actual ) ) {
				report( loc, 'Expected a string, but received: `'+actual+'`' );
			}
			return true;
		}
		if ( expected === '<number>' || expected === '<Number>' ) {
			if ( !isNumber( actual ) ) {
				report( loc, 'Expected a number, but received: `'+actual+'`' );
			}
			return true;
		}
		return false;
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'ensure return annotations match the actual output'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
