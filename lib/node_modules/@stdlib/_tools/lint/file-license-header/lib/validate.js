'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isRegExp = require( '@stdlib/assert/is-regexp' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.dir] - root directory from which to search for files
* @param {string} [options.pattern] - filename pattern
* @param {StringArray} [options.ignore] - list of glob patterns used to exclude matches
* @param {(string|RegExp|Object)} [options.header] - license header to lint against
* @returns {(Error|null)} error object or null
*
* @example
* var opts = {};
* var options = {
*     'dir': './'
* };
*
* var err = validate( opts, options );
* if ( err ) {
*    throw err;
* }
*/
function validate( opts, options ) {
	var keys;
	var v;
	var i;
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options +
			'`.' );
	}
	if ( hasOwnProp( options, 'dir' ) ) {
		opts.dir = options.dir;
		if ( !isString( opts.dir ) ) {
			return new TypeError( 'invalid option. `dir` option must be a primitive string. Option: `' + opts.dir + '`.' );
		}
	}
	if ( hasOwnProp( options, 'pattern' ) ) {
		opts.pattern = options.pattern;
		if ( !isString( opts.pattern ) ) {
			return new TypeError( 'invalid option. `pattern` option must be a primitive string. Option: `' + opts.pattern + '`.' );
		}
	}
	if ( hasOwnProp( options, 'ignore' ) ) {
		opts.ignore = options.ignore;
		if ( !isStringArray( opts.ignore ) ) {
			return new TypeError( 'invalid option. `ignore` option must be a string array. Option: `' + opts.ignore + '`.' );
		}
	}
	if ( hasOwnProp( options, 'header' ) ) {
		opts.header = options.header;
		if ( isObject( opts.header ) ) {
			keys = getKeys( opts.header );
			for ( i = 0; i < keys.length; i++ ) {
				v = opts.header[ keys[i] ];
				if ( !isString( v ) && !isRegExp( v ) ) {
					return new TypeError( 'invalid option. A `header` option object must map string and/or regular expressions to file extensions. Key: `' + keys[i] + '`. Value: `' + v + '`. Option: `' + JSON.stringify( opts.header ) + '`.' );
				}
			}
		} else if ( !isString( opts.header ) && !isRegExp( opts.header ) ) {
			return new TypeError( 'invalid option. `header` option must be either a primitive string, regular expression, or an object mapping strings and/or regular expression to file extensions. Option: `' + opts.header + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
