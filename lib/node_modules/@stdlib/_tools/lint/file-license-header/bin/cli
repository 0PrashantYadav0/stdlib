#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/utils/read-stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var cwd = require( '@stdlib/utils/cwd' );
var lint = require( './../lib' );
var lintLines = require( './../lib/lint.js' );


// VARIABLES //

var RE_EXT_PREFIX = /^([a-zA-Z]+):/;


// FUNCTIONS //

/**
* Callback invoked after linting files.
*
* @private
* @param {(Error|null)} error - error object
* @param {(ObjectArray|EmptyArray)} errors - list of lint errors
* @returns {void}
*/
function onLint( error, errors ) {
	var i;
	if ( error ) {
		process.exitCode = 1;
		return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
	}
	for ( i = 0; i < errors.length; i++ ) {
		console.error( JSON.stringify( errors[ i ] ) ); // eslint-disable-line no-console
	}
	if ( errors.length ) {
		process.exitCode = 1;
	}
} // end FUNCTION onLint()


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var tmp;
	var ext;
	var i;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line flags:
	flags = cli.flags();

	opts = {};
	if ( flags.header ) {
		if ( typeof flags.header === 'string' ) {
			tmp = RE_EXT_PREFIX.exec( flags.header );
			if ( tmp ) {
				opts.header = {};
				ext = tmp[ 1 ];
				tmp = flags.header.substring( ext.length+1 ); // omit the colon
				opts.header[ ext ] = reFromString( tmp );
			} else {
				opts.header = reFromString( flags.header );
			}
		} else {
			opts.header = {};
			for ( i = 0; i < flags.header.length; i++ ) {
				tmp = RE_EXT_PREFIX.exec( flags.header[ i ] );
				if ( tmp ) {
					ext = tmp[ 1 ];
					tmp = flags.header[ i ].substring( ext.length+1 ); // omit the colon
					opts.header[ ext ] = reFromString( tmp );
				} else {
					process.exitCode = 1;
					return console.error( 'Error: invalid option. When providing multiple headers, each header must have an associated file extension prefix.' ); // eslint-disable-line no-console
				}
			}
		}
	}
	if ( !process.stdin.isTTY ) {
		// We are receiving data from `stdin`...
		if ( flags.split ) {
			opts.split = reFromString( flags.split );
		} else {
			opts.split = RE_EOL;
		}
		return stdin( onRead );
	}
	if ( flags.pattern ) {
		opts.pattern = flags.pattern;
	}
	if ( flags.ignore ) {
		if ( typeof flags.ignore === 'string' ) {
			opts.ignore = [ flags.ignore ];
		} else {
			opts.ignore = flags.ignore;
		}
	}
	opts.dir = args[ 0 ] || cwd();
	lint( opts, onLint );

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var lines;
		if ( error ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
		}
		lines = data.toString().split( opts.split );

		// Check if input data had a trailing newline...
		if ( lines[ lines.length-1 ] === '' ) {
			lines.length -= 1;
		}
		lintLines( lines, opts.header, onLint );
	} // end FUNCTION onRead()
} // end FUNCTION main()

main();
