#!/usr/bin/env node
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/utils/read-stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var cwd = require( '@stdlib/utils/cwd' );
var path = require( 'path' );
var lint = require( './../lib' );
var lintPkgJSON = require( './../lib/lint.js' );


// FUNCTIONS //

/**
* Prints lint errors as newline-delimited JSON.
*
* @private
* @param {ObjectArray} errs - lint errors
*/
function ndjson( errs ) {
	var i;
	for ( i = 0; i < errs.length; i++ ) {
		console.error( JSON.stringify( errs[ i ] ) ); // eslint-disable-line no-console
	}
} // end FUNCTION ndjson()

/**
* Pretty prints lint errors.
*
* @private
* @param {ObjectArray} errors - lint errors
*/
function prettyPrint( errors ) {
	/* eslint-disable no-console */
	var total;
	var error;
	var errs;
	var err;
	var i;
	var j;

	total = 0;

	console.error( '' );
	for ( i = 0; i < errors.length; i++ ) {
		error = errors[ i ];
		console.error( error.file );

		errs = error.errors;
		total += errs.length;
		for ( j = 0; j < errs.length; j++ ) {
			err = errs[ j ];
			console.error( '' );
			console.error( '    message: %s', err.message );
			console.error( '    field: %s', err.dataPath );
			console.error( '    data: %s', JSON.stringify( err.data ) );
		}
		console.error( '' );
	}
	console.error( '%d errors', total );
	console.error( '' );

	/* eslint-enable no-console */
} // end FUNCTION prettyPrint()


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var fmt;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line flags:
	flags = cli.flags();

	if ( flags.format ) {
		fmt = args.format;
	} else if ( process.stdout.isTTY ) {
		fmt = 'pretty';
	} else {
		fmt = 'ndjson';
	}
	opts = {};
	opts.dir = args[ 0 ] || cwd();

	// Check if we are receiving a list of filenames from `stdin`...
	if ( !process.stdin.isTTY ) {
		if ( flags.split ) {
			opts.split = reFromString( flags.split );
		} else {
			opts.split = RE_EOL;
		}
		return stdin( onRead );
	}
	if ( flags.pattern ) {
		opts.pattern = flags.pattern;
	}
	if ( flags.ignore ) {
		if ( typeof flags.ignore === 'string' ) {
			opts.ignore = [ flags.ignore ];
		} else {
			opts.ignore = flags.ignore;
		}
	}
	lint( opts, onFinish );

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var i;
		if ( error ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
		}
		data = data.toString().split( opts.split );

		// Check if input data had a trailing newline...
		if ( data[ data.length-1 ] === '' ) {
			data.length -= 1;
		}
		// Resolve absolute file paths...
		for ( i = 0; i < data.length; i++ ) {
			data[ i ] = path.resolve( opts.dir, data[i] );
		}
		lintPkgJSON( data, onFinish );
	} // end FUNCTION onRead()

	/**
	* Callback invoked after linting.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(ObjectArray|null)} errs - lint errors
	* @throws {Error} unexpected error
	* @returns {void}
	*/
	function onFinish( error, errs ) {
		if ( error ) {
			throw error;
		}
		if ( errs ) {
			process.exitCode = 1;
			if ( fmt === 'ndjson' ) {
				return ndjson( errs );
			}
			return prettyPrint( errs );
		}
	} // end FUNCTION onFinish()
}

main();
