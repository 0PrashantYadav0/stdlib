#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/process/read-stdin' );
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var lint = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var header;
	var flags;
	var args;
	var cli;
	var err;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line flags:
	flags = cli.flags();

	if ( flags.header ) {
		if ( isRegExpString( flags.header ) ) {
			header = flags.header;
		} else {
			header = '/'+flags.header+'/g';
		}
		header = reFromString( header );
		if ( header === null ) {
			process.exitCode = 1;
			return console.error( 'Error: invalid header option. Unable to generate regular expression. Option: %s', flags.header ); // eslint-disable-line no-console
		}
	}
	if ( !process.stdin.isTTY ) {
		return stdin( onRead );
	}
	err = lint( args[ 0 ], header );
	if ( err ) {
		process.exitCode = 1;
		return console.error( 'Error: %s', err.error ); // eslint-disable-line no-console
	}

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		if ( error ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
		}
		err = lint( data, header );
		if ( err ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', err.error ); // eslint-disable-line no-console
		}
	}
}

main();
