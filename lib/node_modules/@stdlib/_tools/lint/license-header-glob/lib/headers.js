/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var licenseHeader = require( '@stdlib/_tools/licenses/header' );
var escapeRegExp = require( '@stdlib/utils/escape-regexp-string' );
var replace = require( '@stdlib/string/replace' );
var trim = require( '@stdlib/string/trim' );


// VARIABLES //

var LANGS = [
	'awk',
	'c',
	'cpp',
	'css',
	'f',
	'gyp',
	'gypi',
	'h',
	'hpp',
	'html',
	'ini',
	'jl',
	'js',
	'md',
	'Makefile',
	'mk', // Duplicate of `Makefile`, but convenient as it allows us to match not only based on file extension `mk`, but also on the basename `Makefile`
	'py',
	'R',
	'sh',
	'yml',
	'default' // Not a language, but serves as a fallback when unable to determine a file type based on filename extension or basename
];

// Leading comment characters: /** (JS, C, C++), /* (CSS), !> (Fortran), # (R, Python, Julia, AWK, bash, GYP), #/ (make, YAML), <!-- (HTML, Markdown)
var RE_LEADING_COMMENT = /^\/\*\*|^\/\*|^!>|^#\/{0,1}|^<!--/;

// Trailing comment characters: */ (JS, C, C++), */ (CSS), !< (Fortran), #/ (make, YAML), --> (HTML, Markdown)
var RE_TRAILING_COMMENT = /\*\/$|!<$|#\/$|-->$/;


// MAIN //

/**
* Returns a collection of header regular expressions.
*
* @private
* @returns {Object} collection of header regular expressions
*/
function headers() {
	var type;
	var lang;
	var out;
	var h;
	var i;

	out = {};

	// Create license header regular expressions for each language...
	for ( i = 0; i < LANGS.length; i++ ) {
		lang = LANGS[ i ];
		if ( lang === 'default' ) {
			// Note: nothing special about `js` here. Could achieve the same outcome using license headers for other languages. JavaScript is convenient as the `*` character at the start of each line is known to not be present in the license header text.
			type = 'js';
		} else {
			type = lang;
		}
		h = licenseHeader( 'Apache-2.0', type );

		// Remove any surrounding whitespace (e.g., trailing newlines):
		h = trim( h );

		// Remove leading comment characters:
		h = replace( h, RE_LEADING_COMMENT, '' );

		// Remove trailing comment characters:
		h = replace( h, RE_TRAILING_COMMENT, '' );

		// Remove any surrounding whitespace:
		h = trim( h );

		// Escape the string:
		h = escapeRegExp( h );

		// If "default", insert a regular expression capture group to account for variation in leading characters for each line:
		if ( lang === 'default' ) {
			h = replace( h, '\\* ', '(?:[*!#] |)' );
		}
		// Replace placeholder values:
		h = replace( h, '\\{\\{YEAR\\}\\}', '[0-9]{1,4}' ); // 0-9999
		h = replace( h, '\\{\\{COPYRIGHT_OWNER\\}\\}', '.+' );

		// Create a regular expression (setting the `g` flag in order match multiple [duplicate] license headers):
		out[ lang ] = new RegExp( h, 'g' );
	}
	return out;
} // end FUNCTION headers()


// EXPORTS //

module.exports = headers;
