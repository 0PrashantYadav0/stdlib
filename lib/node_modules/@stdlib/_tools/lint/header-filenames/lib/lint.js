'use strict';

// MODULES //

var basename = require( 'path' ).basename; // TODO: use stdlib module
var getKeys = require( 'object-keys' ).shim();
var extname = require( '@stdlib/utils/extname' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// MAIN //

/**
* Lints an array of filenames.
*
* @private
* @param {StringArray} arr - array of filenames
* @returns {(ObjectArray|EmptyArray)} array of failing filenames
*/
function lint( arr ) {
	var headers;
	var fnames;
	var fname;
	var list;
	var exts;
	var ext;
	var tmp;
	var out;
	var i;
	var j;
	var k;

	headers = {};
	for ( i = 0; i < arr.length; i++ ) {
		fname = basename( arr[ i ] );
		ext = extname( fname );
		fname = fname.substring( 0, fname.length-ext.length );
		if ( !headers[ ext ] ) {
			headers[ ext ] = {};
		}
		// Cache basenames...
		if ( hasOwnProp( headers[ ext ], fname ) ) {
			headers[ ext ][ fname ].push( arr[ i ] );
		} else {
			headers[ ext ][ fname ] = [ arr[ i ] ];
		}
	}
	// For every basename found multiple times, log a lint error...
	out = [];
	exts = getKeys( headers );
	for ( i = 0; i < exts.length; i++ ) {
		tmp = headers[ exts[ i ] ];
		fnames = getKeys( tmp );
		for ( j = 0; j < fnames.length; j++ ) {
			list = tmp[ fnames[ j ] ];
			if ( list.length > 1 ) {
				for ( k = 0; k < list.length; k++ ) {
					out.push({
						'name': list[ k ],
						'error': 'duplicate header filename.'
					});
				}
			}
		}
	}
	return out;
} // end FUNCTION lint()


// EXPORTS //

module.exports = lint;
