/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );
var defaults = require( './defaults.js' );
var resolve = require( './resolve.js' );


// MAIN //

/**
* Returns the list of dependants for a package from npm.
*
* @param {string} pkg - package name
* @param {Callback} clbk - callback to invoke upon query completion
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a function
*
* @example
* dependants( '@stdlib/stdlib', onResponse );
*
* function onResponse( error, data ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( JSON.stringify( data ) );
* }
*/
function dependants( pkg, clbk ) {
	var opts;
	if ( !isString( pkg ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', pkg ) );
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );
	}
	opts = defaults();
	opts.pkg = pkg;
	opts.pathname += pkg;
	resolve( opts, done );

	/**
	* Callback invoked after resolving package dependants.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {StringArray} [data] - query results
	* @returns {void}
	*/
	function done( error, data ) {
		if ( error ) {
			return clbk( error );
		}
		clbk( error, data );
	}
}


// EXPORTS //

module.exports = dependants;
