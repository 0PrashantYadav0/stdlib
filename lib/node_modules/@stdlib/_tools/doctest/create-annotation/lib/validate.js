/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for function options
* @param {Options} options - function options
* @param {boolean} [options.includeDecimal] - boolean indicating whether to always include a decimal point
* @param {PositiveInteger} [options.noArrayElements] - number of array elements to display in return annotation values before skipping elements via `...` notation
* @param {PositiveInteger} [options.precision] - number of decimal digits for real-valued numbers
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'includeDecimal': true
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'includeDecimal' ) ) {
		opts.includeDecimal = options.includeDecimal;
		if ( !isBoolean( opts.includeDecimal ) ) {
			return new TypeError( 'invalid option. `includeDecimal` option must be a boolean primitive. Option: `' + opts.includeDecimal + '`.' );
		}
	}
	if ( hasOwnProp( options, 'noArrayElements' ) ) {
		opts.noArrayElements = options.noArrayElements;
		if ( !isPositiveInteger( opts.noArrayElements ) ) {
			return new TypeError( 'invalid option. `noArrayElements` option must be a positive integer. Option: `' + opts.noArrayElements + '`.' );
		}
	}
	if ( hasOwnProp( options, 'precision' ) ) {
		opts.precision = options.precision;
		if ( !isPositiveInteger( opts.precision ) ) {
			return new TypeError( 'invalid option. `precision` option must be a positive integer. Option: `' + opts.precision + '`.' );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
