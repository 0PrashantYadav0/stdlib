/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isInfinite = require( '@stdlib/assert/is-infinite' );
var isPrimitive = require( '@stdlib/assert/is-primitive' );
var isBoolean = require( '@stdlib/assert/is-boolean' );
var isInteger = require( '@stdlib/assert/is-integer' );
var isNumber = require( '@stdlib/assert/is-number' );
var isString = require( '@stdlib/assert/is-string' );
var isArray = require( '@stdlib/assert/is-array' );
var isObject = require( '@stdlib/assert/is-object' );
var isUndefined = require( '@stdlib/assert/is-undefined' );
var isNull = require( '@stdlib/assert/is-null' );
var isnan = require( '@stdlib/assert/is-nan' );
var roundn = require( '@stdlib/math/base/special/roundn' );
var floor = require( '@stdlib/math/base/special/floor' );
var objectKeys = require( '@stdlib/utils/keys' );
var validate = require( './validate.js' );


// FUNCTIONS //

/**
* Creates a return annotation for a JavaScript primitive.
*
* @private
* @param {*} actual - actual return value
* @param {Object} opts - function options
* @returns {string} return annotation for primitive
*/
function primitiveAnnotation( actual, opts ) {
	if ( isBoolean( actual ) ) {
		return String( actual );
	}
	if ( isNumber( actual ) ) {
		if ( isInteger( actual ) ) {
			return ( opts.includeDecimal ) ? actual+'.0' : String( actual );
		}
		if ( isnan( actual ) ) {
			return 'NaN';
		}
		if ( isInfinite( actual ) ) {
			return actual.toString();
		}
		return '~'+roundn( actual, -opts.precision );
	}
	if ( isString( actual ) ) {
		return '\''+actual+'\'';
	}
	if ( isNull( actual ) ) {
		return 'null';
	}
	if ( isUndefined( actual ) ) {
		return 'undefined';
	}
}


// MAIN //

/**
* Creates a return annotation value.
*
* @param {*} actual - actual return value
* @param {Object} [options] - function options
* @param {boolean} [options.includeDecimal=false] - boolean indicating whether to always include a decimal point
* @param {PositiveInteger} [options.noArrayElements=4] - number of array elements to display in return annotation values before skipping elements via `...` notation
* @param {PositiveInteger} [options.precision=3] - number of decimal digits for real-valued numbers
* @throws {TypeError} options arguments must be an object
* @returns {string} return annotation value
*
* @example
* var out = createAnnotation( 1/3 );
* // returns '~0.333'
*/
function createAnnotation( actual, options ) {
	var opts;
	var keys;
	var out;
	var end;
	var err;
	var i;

	opts = {};
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	opts.noArrayElements = opts.noArrayElements || 4;
	opts.precision = opts.precision || 3;
	if ( isPrimitive( actual ) ) {
		return primitiveAnnotation( actual, opts );
	}
	if ( isArray( actual ) ) {
		if ( actual.length === 0 ) {
			return '[]';
		}
		out = '[ ';
		out += primitiveAnnotation( actual[ 0 ], opts );
		if ( actual.length > opts.noArrayElements ) {
			end = floor( opts.noArrayElements / 2 );
			for ( i = 1; i < end; i++ ) {
				out += ', ';
				out += primitiveAnnotation( actual[ i ], opts );
			}
			out += ', ...';
			for ( i = actual.length - end; i < actual.length; i++ ) {
				out += ', ';
				out += primitiveAnnotation( actual[ i ], opts );
			}
		}
		else {
			for ( i = 1; i < actual.length; i++ ) {
				out += ', ';
				out += primitiveAnnotation( actual[ i ], opts );
			}
		}
		out += ' ]';
		return out;
	}
	if ( isObject( actual ) ) {
		keys = objectKeys( actual );
		if ( keys.length === 0 ) {
			return '{}';
		}
		out = '{ ';
		out += '\''+keys[ 0 ]+'\': ';
		out += primitiveAnnotation( actual[ keys[ 0 ] ], opts );
		for ( i = 1; i < keys.length; i++ ) {
			out += ', \''+keys[ i ]+'\': ';
			out += primitiveAnnotation( actual[ keys[ i ] ], opts );
		}
		out += ' }';
		return out;
	}
	return '';
}


// EXPORTS //

module.exports = createAnnotation;
