/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var createAnnotation = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.strictEqual( typeof createAnnotation, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		true,
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createAnnotation( 123, value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		{},
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createAnnotation( 123, {
				'includeDecimal': value
			});
		};
	}
});

tape( 'the function creates a return annotation value for primitive values', function test( t ) {
	var expected;
	var opts;
	var val;

	val = 2.0;
	expected = '2';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	opts = {
		'includeDecimal': true
	};
	expected = '2.0';
	t.strictEqual( createAnnotation( val, opts ), expected, 'returns expected value' );

	val = 1/3;
	expected = '~0.333';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	opts = {
		'precision': 4
	};
	expected = '~0.3333';
	t.strictEqual( createAnnotation( val, opts ), expected, 'returns expected value' );

	val = 1/0;
	expected = 'Infinity';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = -1/0;
	expected = '-Infinity';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = NaN;
	expected = 'NaN';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = false;
	expected = 'false';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = 'Hello World!';
	expected = '\'Hello World!\'';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = null;
	expected = 'null';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = void 0;
	expected = 'undefined';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a return annotation value for arrays', function test( t ) {
	var expected;
	var opts;
	var val;

	val = [ 1, 2, 3, 4, 5, 6, 7 ];
	expected = '[ 1, 2, ..., 6, 7 ]';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	opts = {
		'noArrayElements': 6
	};
	expected = '[ 1, 2, 3, ..., 5, 6, 7 ]';
	t.strictEqual( createAnnotation( val, opts ), expected, 'returns expected value' );

	opts = {
		'noArrayElements': 7
	};
	expected = '[ 1, 2, 3, 4, 5, 6, 7 ]';
	t.strictEqual( createAnnotation( val, opts ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a return annotation value for plain objects', function test( t ) {
	var expected;
	var val;

	val = {};
	expected = '{}';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	val = {
		'a': 1,
		'b': 2,
		'c': 3,
		'd': 4
	};
	expected = '{ \'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4 }';
	t.strictEqual( createAnnotation( val ), expected, 'returns expected value' );

	t.end();
});
