/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var Float64Array = require( '@stdlib/array/float64' );
var Complex64 = require( '@stdlib/complex/float32' );
var Complex128 = require( '@stdlib/complex/float64' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Complex128Array = require( '@stdlib/array/complex128' );
var compareValues = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.strictEqual( typeof compareValues, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function compares primitives and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;

	actual = NaN;
	expected = 'NaN';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = true;
	expected = 'true';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = null;
	expected = 'null';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.13;
	expected = '2.13';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.133131;
	expected = '~2.13';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.133131e-10;
	expected = '~2.13e-10';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = '2.13';
	expected = '\'2.13\'';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares an array and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = [ 0, 2, 3 ];
	expected = '[ 0, 2, 3 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ <number>, <number>,  <number> ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ <number>, <number>, <boolean> ]';
	msg = 'Displayed return value is `[ <number>, <number>, <boolean> ]`, but function returns `[0,2,3]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ true, false, 0, 1 ];
	expected = '[ <boolean>, ... ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [];
	expected = '[]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ NaN, null ];
	expected = '[ NaN, null ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ NaN, NaN ];
	expected = '[ NaN, NaN ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, Infinity ];
	expected = '[ 2, Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, +Infinity ];
	expected = '[ 2, Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, Infinity ];
	expected = '[ 2, +Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, -Infinity ];
	expected = '[ 2, -Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ 0, 2, 2 ]';
	msg = 'Displayed return value is `[ 0, 2, 2 ]`, but function returns `[0,2,3]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ 0, 20, 40, 60, 80, 100 ];
	expected = '[ 0, 20, 40, 60, 80, 100 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, 2.51188643150958, 6.309573444801933, 15.848931924611142 ];
	expected = '[ 1, ~2.5, ~6.31, ~15.85 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, 2.51188643150958, 6.309573444801933, 15.848931924611142 ];
	expected = '[ 1, ~2.5, ~6.31, 15.85 ]';
	msg = 'Displayed return value is `[ 1, ~2.5, ~6.31, 15.85 ]`, but function returns `[1,2.51188643150958,6.309573444801933,15.848931924611142]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ [ 3, 60 ], [ 2, 50 ] ];
	expected = '[ [3, 60], [2, 50] ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [
		{
			'beep': 1
		},
		{
			'boop': 1
		},
		{
			'baz': 1
		}
	];
	expected = '[ {...}, 222 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares a typed array and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var buf;
	var msg;

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>[ 0, 2, 3 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>[ 0, 2, 2 ]';
	msg = 'Expected array entries [0,2,2], but observed [0,2,3]';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float32Array>[ 0, 2, 2 ]';
	msg = 'Expected instance type <Float64Array>, but observed <Float32Array>';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	buf = new Float32Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	actual = new Complex64Array( buf );
	expected = '<Complex64Array>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	buf = new Float64Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	actual = new Complex128Array( buf );
	expected = '<Complex128Array>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares a value with a type equality return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = 2.3;
	expected = '<number>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.3;
	expected = '<string>';
	msg = 'Expected a <string>, but received: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = '2.3';
	expected = '<number>';
	msg = 'Expected a <number>, but received: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = true;
	expected = '<boolean>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = true;
	expected = '<number>';
	msg = 'Expected a <number>, but received: `true`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 0;
	expected = '<boolean>';
	msg = 'Expected a <boolean>, but received: `0`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Complex64( 2.0, 3.0 );
	expected = '<Complex64>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = new Complex128( 2.0, 3.0 );
	expected = '<Complex128>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

// TODO: Add tests
