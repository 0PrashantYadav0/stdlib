/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var compareValues = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.strictEqual( typeof compareValues, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function compares an array and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = [ 0, 2, 3 ];
	expected = '[ 0, 2, 3 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ 0, 2, 2 ]';
	msg = 'Displayed return value is `[ 0, 2, 2 ]`, but function returns `[0,2,3]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ 0, 20, 40, 60, 80, 100 ];
	expected = '[ 0, 20, 40, 60, 80, 100 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, 2.51188643150958, 6.309573444801933, 15.848931924611142 ];
	expected = '[ 1, ~2.5, ~6.31, ~15.85 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, 2.51188643150958, 6.309573444801933, 15.848931924611142 ];
	expected = '[ 1, ~2.5, ~6.31, 15.85 ]';
	msg = 'Displayed return value is `[ 1, ~2.5, ~6.31, 15.85 ]`, but function returns `[1,2.51188643150958,6.309573444801933,15.848931924611142]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	t.end();
});

tape( 'the function compares a typed array and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>[ 0, 2, 3 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>[ 0, 2, 2 ]';
	msg = 'Expected array entries [0,2,2], but observed [0,2,3]';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float32Array>[ 0, 2, 2 ]';
	msg = 'Expected instance type <Float64Array>, but observed <Float32Array>';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	t.end();
});

tape( 'the function compares a value with a type equality return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = 2.3;
	expected = '<number>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.3;
	expected = '<string>';
	msg = 'Expected a string, but received: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = '2.3';
	expected = '<number>';
	msg = 'Expected a number, but received: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = true;
	expected = '<boolean>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = true;
	expected = '<number>';
	msg = 'Expected a number, but received: `true`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 0;
	expected = '<boolean>';
	msg = 'Expected a boolean, but received: `0`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	t.end();
});

// TODO: Add tests
