/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var copy = require( '@stdlib/utils/copy' );
var cwd = require( '@stdlib/process/cwd' );
var findREADMEs = require( '@stdlib/_tools/pkgs/readmes' ).sync;
var readFileList = require( '@stdlib/fs/read-file-list' ).sync;
var validate = require( './validate.js' );
var DEFAULTS = require( './defaults.json' );


// VARIABLES //

var debug = logger( 'readme-database:sync' );


// MAIN //

/**
* Synchronously generates a package README database.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for package READMEs
* @param {string} [options.pattern='**\/package.json'] - glob pattern
* @param {StringArray} [options.ignore] - glob pattern(s) to exclude matches
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `pattern` option must end with `package.json`
* @returns {(Object|Error)} README database or an error
*
* @example
* var db = create();
*
* if ( db instanceof Error ) {
*     console.error( db.message );
* } else {
*     console.log( JSON.stringify( db ) );
* }
*/
function createSync( options ) {
	var files;
	var fopts;
	var opts;
	var err;
	var out;
	var i;

	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.dir ) {
		opts.dir = resolve( cwd(), opts.dir );
	} else {
		opts.dir = cwd();
	}
	debug( 'Options: %s', JSON.stringify( opts ) );

	debug( 'Searching for README files...' );
	files = findREADMEs( opts );
	debug( 'Found %d README files.', files.length );

	fopts = {
		'encoding': 'utf8'
	};
	debug( 'Building README database...' );
	files = readFileList( files, fopts );
	if ( files instanceof Error ) {
		debug( 'Encountered an error when reading files: %s', files.message );
		return files;
	}
	out = {};
	for ( i = 0; i < files.length; i++ ) {
		out[ files[ i ].file ] = files[ i ].data;
	}
	debug( 'Finished building database.' );
	return out;
}


// EXPORTS //

module.exports = createSync;
