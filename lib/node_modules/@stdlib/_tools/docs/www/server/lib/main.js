/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var fastify = require( 'fastify' );
var isFunction = require( '@stdlib/assert/is-function' );
var cwd = require( '@stdlib/process/cwd' );
var routes = require( './routes' );


// MAIN //

/**
* Returns a function which creates an HTTP server for serving API documentation.
*
* @param {Options} options - server options
* @throws {TypeError} must provide valid options
* @returns {Function} function which creates an HTTP server
*
* @example
* var opts = {
*     'port': 7331,
*     'address': '0.0.0.0'
* };
* var createServer = httpServer( opts );
*
* function done( error, fastify ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( 'Success!' );
*     fastify.server.close();
* }
*
* createServer( done );
*/
function httpServer( options ) {
	var opts;

	// TODO: validate options

	// TODO: codify default options
	opts = {
		'logger': options && options.logger,
		'trustProxy': options && options.trustProxy,
		'port': (options && options.port) || 3000,
		'hostname': (options && options.address) || (options && options.hostname) || '127.0.0.1',
		'root': (options && options.root && resolve( cwd(), options.root )) || cwd()
	};
	return createServer;

	/**
	* Creates an HTTP server.
	*
	* @private
	* @param {Callback} done - function to invoke after creating a server
	* @throws {TypeError} must provide a function
	*/
	function createServer( done ) {
		var f;
		if ( !isFunction( done ) ) {
			throw new TypeError( 'invalid argument. Must provide a function. Value: `' + done + '`.' );
		}
		f = fastify( opts );

		// Register routes:
		f.register( routes, {
			'root': opts.root
		});

		// Start listening:
		f.listen( opts.port, opts.hostname, onListen );

		/**
		* Callback invoked once a server is listening and ready to handle requests.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {string} address - server address
		* @returns {void}
		*/
		function onListen( error, address ) {
			if ( error ) {
				f.log.error( error );
				return done( error );
			}
			f.log.info( 'HTTP server initialized. Server is listening for requests on %s:%d.', address, opts.port );
			done( null, f );
		}
	}
}


// EXPORTS //

module.exports = httpServer;
