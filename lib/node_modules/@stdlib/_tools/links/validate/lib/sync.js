/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var instanceOf = require( '@stdlib/assert/instance-of' );
var format = require( '@stdlib/string/format' );
var cwd = require( '@stdlib/process/cwd' );
var config = require( './defaults.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Synchronously validates an array of link objects against a link database.
*
* @param {ObjectArray} links - array of link objects to validate
* @param {Options} [options] - options
* @param {string} [options.database] - path to a link database file (JSON)
* @throws {TypeError} first argument must be an object array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {ObjectArray} array of validation errors
*
* @example
* var errors = validateLinks([
*     {
*         'id': 'gumbel-distibution',
*         'url': 'https://en.wikipedia.org/wiki/Gumbel_distribution'
*     }
* ]);
* // returns [...]
*/
function validateLinks( links, options ) {
	var fopts;
	var opts;
	var link;
	var url;
	var err;
	var out;
	var db;
	var id;
	var i;
	if ( !isObjectArray( links ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of objects. Value: `%s`.', links ) );
	}
	opts = {
		'database': config.database
	};
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	opts.database = resolve( cwd(), opts.database );
	fopts = {
		'encoding': 'utf8'
	};
	db = readJSON( opts.database, fopts );
	if ( instanceOf( db, Error ) ) {
		return db;
	}
	out = [];
	for ( i = 0; i < links.length; i++ ) {
		link = links[ i ];
		url = link.url;
		id = link.id;
		if ( !db[ url ] ) {
			out.push({
				'message': 'Entry not found in database',
				'id': id,
				'url': url
			});
		}
		else if ( db[ url ].id !== id ) {
			out.push({
				'message': 'Mismatched link identifier',
				'id': id,
				'url': url,
				'expected': db[ url ].id
			});
		}
	}
	return out;
}


// EXPORTS //

module.exports = validateLinks;
