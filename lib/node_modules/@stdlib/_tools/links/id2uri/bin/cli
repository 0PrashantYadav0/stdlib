#!/usr/bin/env node
'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var readline = require( 'readline' );
var id2uri = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked upon completion.
*
* @private
* @param {Error} [error] - error object
* @param {(string|null)} uri - uri
* @returns {void}
*/
function done( error, uri ) {
	/* eslint-disable no-console, no-process-exit */
	if ( error ) {
		console.error( 'Error: %s', error.message );
		return process.exit( 1 );
	}
	if ( uri ) {
		console.log( uri );
	} else {
		console.log( 'Unable to resolve URI.' );
	}
	process.exit( 0 );
} // end FUNCTION done()

/**
* Callback invoked upon receiving a SIGINT (e.g., ctrl+C).
*
* @private
*/
function onSIGINT() {
	console.error( '' );
	process.exit( 1 );
} // end FUNCTION onSIGINT()


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	/* eslint-disable no-console, no-process-exit */
	var flags;
	var args;
	var opts;
	var cli;
	var id;
	var rl;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line flags:
	flags = cli.flags();

	// If we are provided an id, we can proceed to resolve an URI...
	opts = {};
	if ( args.length ) {
		if ( flags.database ) {
			opts.database = flags.database;
		}
		return id2uri( args[ 0 ], opts, done );
	}
	// Provide a series of prompts for a user to provide arguments...
	rl = readline.createInterface({
		'input': process.stdin,
		'output': process.stdout
	});
	rl.on( 'close', onClose );
	rl.on( 'SIGINT', onSIGINT );

	console.log( 'Please provide the following information...' );
	rl.question( 'id: ', onID );

	/**
	* Callback invoked upon receiving a id.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function onID( answer ) {
		id = answer;
		if ( flags.database ) {
			return database( flags.database );
		}
		rl.question( 'database filepath (optional): ', database );
	} // end FUNCTION onID()

	/**
	* Callback invoked upon receiving a database filepath.
	*
	* @private
	* @param {string} answer - user input
	*/
	function database( answer ) {
		if ( answer ) {
			opts.database = answer;
		}
		rl.close();
	} // end FUNCTION database()

	/**
	* Callback invoked once a readline interface closes.
	*
	* @private
	*/
	function onClose() {
		id2uri( id, opts, done );
	} // end FUNCTION onClose()
} // end FUNCTION main()

main();
