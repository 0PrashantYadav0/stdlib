'use strict';

var join = require( 'path' ).join;
var writeFile = require( 'fs' ).writeFileSync;
var mkdirp = require( 'mkdirp' ).sync;
var collapse = require( 'bundle-collapser/plugin' );
var uglifyify = require( 'uglifyify' );
var pkgNames = require( '@stdlib/_tools/pkgs/names' );
var bundle = require( './../../lib' );

var fopts1 = {
	'pattern': '**/package.json',
	'ignore': [
		'**/_**/**',     // ignore "private" packages
		'**/datasets/**' // ignore dataset packages
	]
};

var fopts2 = {
	'pattern': '**/datasets/**/package.json', // only dataset packages
	'ignore': [
		'**/_**/**' // ignore "private" packages
	]
};

var uopts = {
	'global': true
};

var bopts1 = {
	'namespace': 'flat',
	'exportName': '@stdlib',
	'transforms': [
		[ uglifyify, uopts ] // minify modules individually
	],
	'plugins': [
		collapse // convert bundle paths to IDs
	],
	'external': [
		'@stdlib/datasets'
	]
};

var bopts2 = {
	'namespace': 'flat',
	'exportName': '@stdlib/datasets',
	'transforms': [
		[ uglifyify, uopts ] // minify modules individually
	],
	'plugins': [
		collapse // convert bundle paths to IDs
	]
};

var dir = join( __dirname, 'build' );
mkdirp( dir );

pkgNames( fopts1, onNames1 );
pkgNames( fopts2, onNames2 );

function onNames1( error, names ) {
	if ( error ) {
		throw error;
	}
	bundle( names, bopts1, onBundle1 );
}

function onNames2( error, names ) {
	if ( error ) {
		throw error;
	}
	bundle( names, bopts2, onBundle2 );
}

function onBundle1( error, bundle ) {
	var fpath;
	if ( error ) {
		throw error;
	}
	fpath = join( dir, 'bundle.min.js' );
	writeFile( fpath, bundle );
}

function onBundle2( error, bundle ) {
	var fpath;
	if ( error ) {
		throw error;
	}
	fpath = join( dir, 'datasets.min.js' );
	writeFile( fpath, bundle );
}
