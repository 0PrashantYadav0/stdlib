'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var indexof = require( '@stdlib/utils/index-of' );


// VARIABLES //

var BUNDLERS = [ 'browserify' ];
var NS = [ 'tree', 'flat', 'none' ];


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.namespace] - bundle namespace
* @param {string} [options.bundler] - bundler
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'namespace': 'flat',
*     'bundler': 'browserify'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'namespace' ) ) {
		opts.namespace = options.namespace;
		if ( !isString( opts.namespace ) ) {
			return new TypeError( 'invalid option. `namespace` option must be a string. Option: `' + opts.namespace + '`.' );
		}
		if ( indexof( NS, opts.namespace ) === -1 ) {
			return new RangeError( 'invalid option. `namespace` option must be one of the following values: `['+NS.join( ',' )+']`.' );
		}
	}
	if ( hasOwnProp( options, 'bundler' ) ) {
		opts.bundler = options.bundler;
		if ( !isString( opts.bundler ) ) {
			return new TypeError( 'invalid option. `bundler` option must be a string. Option: `' + opts.bundler + '`.' );
		}
		if ( indexof( BUNDLERS, opts.bundler ) === -1 ) {
			return new RangeError( 'invalid option. `bundler` option must be one of the following values: `['+BUNDLERS.join( ',' )+']`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
