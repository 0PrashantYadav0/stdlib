'use strict';

// MODULES //

var debug = require( 'debug' )( 'bundle-pkg-list:main' );
var browserify = require( 'browserify' );
var copy = require( '@stdlib/utils/copy' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isFunction = require( '@stdlib/assert/is-function' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var unique = require( './unique.js' );
var setdiff = require( './setdiff.js' );
var treeFilter = require( './tree_filter.js' );
var namespaces = require( './namespaces.js' );
var toFlatNamespace = require( './to_flat.js' );
var toTreeNamespace = require( './to_tree.js' );
var toFileString = require( './to_file_string.js' );


// MAIN //

/**
* Returns a custom bundle.
*
* @param {StringArray} pkgs - list of packages to bundle
* @param {Options} [options] - function options
* @param {string} [options.namespace="tree"] - specifies whether the namespace should be a "tree", "flat", or "none"
* @param {string} [options.bundler="browserify"] - bundler
* @param {string} [options.standalone] - standalone browserify bundle export name
* @param {string} [options.requireName="require"] - name of function exposed to supporting external loading of modules from a browserify bundle
* @param {Callback} clbk - callback to invoke upon completion
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} must provide a recognized `namespace` option
* @throws {RangeError} must provide a recognized `bundler` option
* @throws {TypeError} last argument must be a function
* @returns {void}
*
* @example
* var pkgs = [
*     '@stdlib/math/base/special/erf',
*     '@stdlib/math/base/special/gamma'
* ];
*
* bundle( pkgs, onBundle );
*
* function onBundle( error, bundle ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( bundle.toString() );
* }
*/
function bundle( pkgs, options, clbk ) {
	var bopts;
	var opts;
	var err;
	var out;
	var cb;
	var b;

	if ( !isStringArray( pkgs ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an array of strings. Value: `'+pkgs+'`.' );
	}
	opts = copy( defaults );
	if ( arguments.length > 2 ) {
		cb = clbk;
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	} else {
		cb = options;
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( 'invalid input argument. Last argument must be a function. Value: `'+cb+'`.' );
	}
	debug( 'Options: %s', JSON.stringify( opts ) );

	// Sort the packages in lexicographic order (e.g., [ '@stdlib/math/base', '@stdlib/math' ] => [ '@stdlib/math', '@stdlib/math/base' ] ):
	pkgs.sort();

	// Remove duplicates:
	pkgs = unique( pkgs );

	// If we do not need to generate a namespace for a browserify bundle, we will generate a bundle which allows a bundle consumer to `require` each package individually...
	if ( opts.namespace === 'none' && opts.bundler === 'browserify' ) {
		bopts = {
			'externalRequireName': opts.requireName,
			'require': pkgs
		};
		b = browserify( bopts );
		return b.bundle( onBundle );
	}

	// Generate a namespace...
	if ( opts.namespace === 'flat' ) {
		debug( 'Generating a flat namespace...' );

		debug( 'Excluding namespace packages...' );
		pkgs = setdiff( namespaces, pkgs );

		out = toFlatNamespace( pkgs );
	} else {
		debug( 'Generating a tree namespace...' );

		debug( 'Filtering namespace packages...' );
		pkgs = treeFilter( pkgs );

		out = toTreeNamespace( pkgs );
	}
	debug( 'Finished generating a namespace.' );

	return done( null, toFileString( out ) );
	// TODO: generate a bundle from the string
	// TODO: return the bundle

	/**
	* Callback invoked upon generating a browserify bundle.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(string|Buffer)} bundle - bundle
	* @returns {void}
	*/
	function onBundle( error, bundle ) {
		if ( error ) {
			debug( 'Encountered an error when generating a browserify bundle: %s', error.message );
			return done( error );
		}
		debug( 'Successfully generated a browserify bundle.' );
		done( null, bundle );
	} // end FUNCTION onBundle()

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(string|Buffer)} bundle - bundle
	* @returns {void}
	*/
	function done( error, bundle ) {
		if ( error ) {
			return cb( error );
		}
		cb( null, bundle );
	} // end FUNCTION done()
} // end FUNCTION bundle()


// EXPORTS //

module.exports = bundle;
