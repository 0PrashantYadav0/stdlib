#!/usr/bin/env node
'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var stdin = require( '@stdlib/utils/read-stdin' );
var CLI = require( '@stdlib/tools/cli' );
var importRequire = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var args;
	var cli;
	var err;
	var src;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	if ( !process.stdin.isTTY ) {
		return stdin( onData );
	}
	src = args[ 0 ];
	if ( src === void 0 ) {
		err = new Error( 'no input. Must provide a source string as a command-line argument or via `stdin`.' );
		return exit( err.message );
	}
	process.nextTick( next );

	/**
	* Writes an error message to `stderr` and then exits.
	*
	* @private
	* @param {string} msg - error message
	*/
	function exit( msg ) {
		process.stderr.write( msg+'\n', 'utf8' );
		cli.exit( 1 );
	} // end FUNCTION exit()

	/**
	* Prints results as newline-delimited JSON (NDJSON).
	*
	* @private
	* @param {Object} results - results
	*/
	function printNDJSON( results ) {
		console.log( JSON.stringify( results ) ); // eslint-disable-line no-console
	} // end FUNCTION printNDJSON()

	/**
	* Pretty prints results.
	*
	* @private
	* @param {Object} results - results
	*/
	function prettyPrint( results ) {
		console.log( '\nLiterals:' ); // eslint-disable-line no-console
		printPaths( results.literals );

		console.log( '\nExpressions:' ); // eslint-disable-line no-console
		printPaths( results.expressions );

		console.log( '' ); // eslint-disable-line no-console
	} // end FUNCTION prettyPrint()

	/**
	* Pretty prints paths.
	*
	* @private
	* @param {StringArray} paths - paths to print
	*/
	function printPaths( paths ) {
		var sym;
		var i;
		for ( i = 0; i < paths.length; i++ ) {
			if ( i < paths.length-1 ) {
				sym = '├──';
			} else {
				sym = '└──';
			}
			console.log( '%s %s', sym, paths[ i ] ); // eslint-disable-line no-console
		}
	} // end FUNCTION printPaths()

	/**
	* Callback invoked after attempting to read data from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - `stdin` data
	* @returns {void}
	*/
	function onData( error, data ) {
		if ( error ) {
			return exit( error.message );
		}
		src = data.toString();
		if ( src === '' ) {
			error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
			return exit( error.message );
		}
		next();
	} // end FUNCTION onData()

	/**
	* Callback invoked once ready to analyze a source string.
	*
	* @private
	* @returns {void}
	*/
	function next() {
		var results = importRequire( src );
		if ( process.stdout.isTTY ) {
			return prettyPrint( results );
		}
		printNDJSON( results );
	} // end FUNCTION next()
} // end FUNCTION main()

main();
