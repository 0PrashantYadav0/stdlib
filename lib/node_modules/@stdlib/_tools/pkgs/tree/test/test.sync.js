'use strict';

// MODULES //

var tape = require( 'tape' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isEmptyObject = require( '@stdlib/assert/is-empty-object' );
var pkgTree = require( './../lib/sync.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof pkgTree, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a `options` argument which is not an object, the function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			pkgTree( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	t.throws( foo, TypeError, 'throws error' );
	t.end();
	function foo() {
		var opts = {
			'dir': null
		};
		pkgTree( opts );
	}
});

tape( 'the function returns an object', function test( t ) {
	var tree = pkgTree();
	t.equal( isObject( tree ), true, 'returns an object' );
	t.end();
});

tape( 'the function returns an object (dir option)', function test( t ) {
	var tree;
	var opts;

	opts = {
		'dir': './@stdlib/math/base'
	};
	tree = pkgTree( opts );
	t.equal( isObject( tree ), true, 'returns an object' );
	t.end();
});

tape( 'the function returns an object (pattern option)', function test( t ) {
	var tree;
	var opts;

	opts = {
		'pattern': '**/math/base/**/package.json'
	};
	tree = pkgTree( opts );

	t.equal( isObject( tree ), true, 'returns an object' );
	t.end();
});

tape( 'the function returns an empty object if unable to resolve any packages (ignore option)', function test( t ) {
	var tree;
	var opts;

	opts = {
		'dir': './@stdlib/math/base',
		'ignore': [
			'**/@stdlib/math/base/**' // same as the directory we are searching!
		]
	};
	tree = pkgTree( opts );

	t.equal( isObject( tree ), true, 'returns an object' );
	t.equal( isEmptyObject( tree ), true, 'returns an empty object' );
	t.end();
});

