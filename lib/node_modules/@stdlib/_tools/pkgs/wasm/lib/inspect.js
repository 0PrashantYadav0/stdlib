'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var glob = require( 'glob' );
var dirname = require( '@stdlib/utils/dirname' );


// VARIABLES //

var debug = logger( 'pkgs:wasm:resolve' );


// MAIN //

/**
* Inspects packages for WebAssembly.
*
* @private
* @param {StringArray} files - list of `package.json` files
* @param {Options} opts - options
* @param {string} opts.search - filename pattern
* @param {string} opts.folder - search folder
* @param {Callback} clbk - callback to invoke upon completion
* @returns {void}
*/
function inspect( files, opts, clbk ) {
	var total;
	var out;
	var i;

	total = files.length;
	i = -1;
	out = [];

	return next();

	/**
	* Inspects the next package.
	*
	* @private
	*/
	function next() {
		var gopts;
		var dir;

		i += 1;
		debug( 'Inspecting package %d of %d: %s', i+1, total, files[ i ] );

		dir = dirname( files[ i ] );
		gopts = {
			'cwd': resolve( dir, opts.folder ),
			'realpath': false
		};

		debug( 'Checking for WebAssembly...' );
		glob( opts.search, gopts, onGlob );
	} // end FUNCTION next()

	/**
	* Callback invoked after matching files.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(EmptyArray|StringArray)} results - matching files
	* @returns {void}
	*/
	function onGlob( error, results ) {
		var j = i + 1;
		if ( error ) {
			debug( 'Encountered an error when searching for WebAssembly: %s (%d of %d). Error: %s', files[ i ], j, total, error.message );
		} else if ( results.length ) {
			debug( 'Detected WebAssembly.' );
			out.push( dirname( files[ i ] ) );
		} else {
			debug( 'Unable to detect WebAssembly.' );
		}
		return done();
	} // end FUNCTION onGlob()

	/**
	* Callback invoked upon inspecting all packages.
	*
	* @private
	* @returns {void}
	*/
	function done() {
		var j;
		j = i + 1;
		if ( j < total ) {
			debug( 'Inspected %d of %d packages.', j, total );
			return next();
		}
		debug( 'Successfully inspected all packages.' );
		return clbk( null, out );
	} // end FUNCTION done()
} // end FUNCTION inspect()


// EXPORTS //

module.exports = inspect;
