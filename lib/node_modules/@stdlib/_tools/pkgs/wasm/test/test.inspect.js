'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isArray = require( '@stdlib/assert/is-array' );
var inspect = require( './../lib/inspect.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof inspect, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a string array if able to detect at least one package containing WebAssembly', function test( t ) {
	var inspect;
	var count;

	inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});
	count = 0;

	inspect( [ '/beep/boop/package.json', '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		var pkg;

		count += 1;
		if ( count < 2 ) {
			pkg = {
				'__stdlib__': {
					'wasm': true
				}
			};
		} else {
			pkg = {
				'__stdlib__': {
					'wasm': false
				}
			};
		}
		clbk( null, pkg );
	}

	function clbk( error, pkgs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isStringArray( pkgs ), true, 'returns a string array' );
		t.strictEqual( pkgs.length, 1, 'expected length' );
		t.end();
	}
});

tape( 'the function returns an empty array if unable to detect at least one package containing WebAssembly', function test( t ) {
	var inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});

	inspect( [ '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		clbk( null, {
			'_stdlib__': false
		});
	}

	function clbk( error, pkgs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isArray( pkgs ), true, 'returns an array' );
		t.strictEqual( pkgs.length, 0, 'returns an empty array' );
		t.end();
	}
});

tape( 'the function returns an empty array if unable to detect at least one package containing WebAssembly (error)', function test( t ) {
	var inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});

	inspect( [ '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		clbk( new Error( 'beep' ) );
	}

	function clbk( error, pkgs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isArray( pkgs ), true, 'returns an array' );
		t.strictEqual( pkgs.length, 0, 'returns an empty array' );
		t.end();
	}
});

tape( 'the function returns an empty array if unable to detect at least one package containing WebAssembly (no error)', function test( t ) {
	var inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});

	inspect( [ '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		clbk( null, {} );
	}

	function clbk( error, pkgs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isArray( pkgs ), true, 'returns an array' );
		t.strictEqual( pkgs.length, 0, 'returns an empty array' );
		t.end();
	}
});
