#!/usr/bin/env node
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var find = require( './../lib' ); // eslint-disable-line stdlib/no-redeclare


// FUNCTIONS //

/**
* Callback invoked after searching for addons.
*
* @private
* @param {(Error|null)} error - error object
* @param {(EmptyArray|StringArray)} pkgs - list of packages
* @throws {Error} unexpected error
*/
function onPkgs( error, pkgs ) {
	if ( error ) {
		throw error;
	}
	if ( pkgs.length ) {
		console.log( pkgs.join( '\n' ) ); // eslint-disable-line no-console
	}
} // end FUNCTION onPkgs()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line options:
	flags = cli.flags();

	// Extract options...
	opts = {};
	if ( flags.pattern ) {
		opts.pattern = flags.pattern;
	}
	if ( flags.ignore ) {
		if ( typeof flags.ignore === 'string' ) {
			opts.ignore = [ flags.ignore ];
		} else {
			opts.ignore = flags.ignore;
		}
	}
	if ( args[ 0 ] ) {
		opts.dir = args[ 0 ];
	}
	// Find packages:
	find( opts, onPkgs );
} // end FUNCTION main()

main();
