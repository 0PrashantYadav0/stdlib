'use strict';

// MODULES //

var join = require( 'path' ).join;
var logger = require( 'debug' );
var dirname = require( '@stdlib/utils/dirname' );
var exists = require( '@stdlib/fs/exists' );


// VARIABLES //

var debug = logger( 'pkgs:readmes:find' );


// MAIN //

/**
* Searches for README files based on a list of `package.json` files.
*
* @private
* @param {StringArray} files - list of `package.json` files
* @param {Callback} clbk - callback to invoke upon completion
* @returns {void}
*/
function find( files, clbk ) { // eslint-disable-line stdlib/no-redeclare
	var total;
	var out;
	var i;

	total = files.length;
	i = -1;
	out = [];

	return next();

	/**
	* Checks the next package.
	*
	* @private
	*/
	function next() {
		var fpath;
		var dir;

		i += 1;
		debug( 'Searching package %d of %d: %s', i+1, total, files[ i ] );

		debug( 'Checking for a README...' );
		dir = dirname( files[ i ] );
		fpath = join( dir, 'README.md' );
		exists( fpath, onExists );

		/**
		* Callback invoked after checking for a README.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {boolean} bool - boolean indicating if a file exists
		*/
		function onExists( error, bool ) { // eslint-disable-line no-unused-vars
			if ( error ) {
				debug( 'Encountered an error when searching for a README. Directory: %s (%d of %d). Error: %s', dir, i+1, total, error.message );
			} else {
				debug( 'Found a package README.' );
				out.push( fpath );
			}
			done();
		}
	}

	/**
	* Callback invoked upon checking all packages.
	*
	* @private
	* @returns {void}
	*/
	function done() {
		var j = i + 1;
		if ( j < total ) {
			debug( 'Searched %d of %d packages.', j, total );
			return next();
		}
		debug( 'Successfully searched all packages.' );
		return clbk( null, out );
	}
}


// EXPORTS //

module.exports = find;
