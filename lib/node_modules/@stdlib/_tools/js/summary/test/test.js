'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var analyze = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string or a Buffer', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value );
		};
	}
});

tape( 'the function returns a object (string)', function test( t ) {
	var o = analyze( 'var beep = "boop";' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.end();
});

tape( 'the function returns a object (Buffer)', function test( t ) {
	var o = analyze( string2buffer( 'var beep = "boop";' ) );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.end();
});

tape( 'the function analyzes a JavaScript program (block comment)', function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'block_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/block_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (line comment)', function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'line_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/line_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});
