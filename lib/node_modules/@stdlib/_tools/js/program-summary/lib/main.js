'use strict';

// MODULES //

var parse = require( 'acorn' ).parse;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isBuffer = require( '@stdlib/assert/is-buffer' );
var copy = require( '@stdlib/utils/copy' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var DEFAULTS = require( './defaults.json' );
var resultsObject = require( './results.js' );
var onComment = require( './on_comment.js' );
var analyze = require( './analyze.js' );


// MAIN //

/**
* Generates a summary of a JavaScript program.
*
* @param {(string|Buffer)} input - source code input
* @throws {TypeError} must provide either a string or Buffer
* @returns {Object} summary
*
* @example
* var str = '"use strict";\n\nconsole.log( "beep" );\n';
*
* var out = summary( str );
* // returns {...}
*/
function summary( input ) {
	var results;
	var lines;
	var opts;
	var ast;

	if ( !isString( input ) && !isBuffer( input ) ) {
		throw new TypeError( 'invalid input argument. Must provide either a string or a Buffer. Value: `' + input + '`.' );
	}
	// Ensure that provided input is a `string`:
	input = input.toString();

	// Split the input into individual lines:
	lines = input.split( RE_EOL );

	// Initialize a results object:
	results = resultsObject();

	// Parse the source code input into an Abstract Syntax Tree (AST):
	opts = copy( DEFAULTS );
	opts.onComment = onComment( results, lines );
	ast = parse( input, opts );

	// Analyze the AST:
	results = analyze( results, ast, input, lines, 0, opts );

	// Return the summary results:
	return results;
} // end FUNCTION summary()


// EXPORTS //

module.exports = summary;
