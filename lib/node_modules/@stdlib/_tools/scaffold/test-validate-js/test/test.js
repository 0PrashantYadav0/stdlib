'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var create = require( './../lib' );


// FIXTURES //

var VALIDATE1 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_1.txt' ) );
var TEST_VALIDATE1 = readFileSync( resolve( __dirname, 'fixtures', 'test.validate.js_1.txt' ) );
var VALIDATE2 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_2.txt' ) );
var TEST_VALIDATE2 = readFileSync( resolve( __dirname, 'fixtures', 'test.validate.js_2.txt' ) );
var VALIDATE3 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_3.txt' ) );
var TEST_VALIDATE3 = readFileSync( resolve( __dirname, 'fixtures', 'test.validate.js_3.txt' ) );
var VALIDATE4 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_4.txt' ) );
var TEST_VALIDATE4 = readFileSync( resolve( __dirname, 'fixtures', 'test.validate.js_4.txt' ) );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof create, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a primitive string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			create( value );
		};
	}
});

tape( 'the function throws an error if the source code does not contain a JSDoc comment for a validate function', function test( t ) {
	var values;
	var i;

	values = [
		'// Only a single-line comment',
		[
			'/**',
			'* Not a JSDoc comment for a validate function.',
			'*/'
		].join( '\n' ),
		'function validate() {}'
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws a error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			create( value );
		};
	}
});

tape( 'the function returns `test.validate.js` contents (string, boolean)', function test( t ) {
	var expected;
	var actual;

	actual = create( VALIDATE1 );
	expected = TEST_VALIDATE1.toString();
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});

tape( 'the function returns `test.validate.js` contents (positive integer, nonnegative integer)', function test( t ) {
	var expected;
	var actual;

	actual = create( VALIDATE2 );
	expected = TEST_VALIDATE2.toString();
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});

tape( 'the function returns `test.validate.js` contents (union type)', function test( t ) {
	var expected;
	var actual;

	actual = create( VALIDATE3 );
	expected = TEST_VALIDATE3.toString();
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});

tape( 'the function returns `test.validate.js` contents (given JSDoc of main function)', function test( t ) {
	var expected;
	var actual;

	actual = create( VALIDATE4 );
	expected = TEST_VALIDATE4.toString();
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});
