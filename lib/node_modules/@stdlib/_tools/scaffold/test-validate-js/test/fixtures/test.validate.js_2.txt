'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if not provided an object', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, values[i] );
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `cmd` option which is not a string primitive', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'cmd': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `concurrency` option which is not a positive integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {},
		3.14,
		-2,
		0
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'concurrency': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `workers` option which is not a positive integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {},
		3.14,
		-2,
		0
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'workers': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `ordered` option which is not a boolean primitive', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'ordered': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `uid` option which is not a nonnegative integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {},
		3.14,
		-2
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'uid': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `gid` option which is not a nonnegative integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {},
		3.14,
		-2
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'gid': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `maxBuffer` option which is not a nonnegative integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {},
		3.14,
		-2
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'maxBuffer': values[i]
		});
		t.equal( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var options;
	var opts;
	var err;

	options = {};
	opts = {
		'cmd': 'beep',
		'concurrency': 1,
		'workers': 1,
		'ordered': true,
		'uid': 0,
		'gid': 0,
		'maxBuffer': 0
	};

	err = validate( options, opts );
	t.equal( err, null, 'returns null' );

	t.deepEqual( options, opts, 'sets options' );
	t.end();
});

tape( 'the function ignores unrecognized/unsupported options', function test( t ) {
	var options;
	var opts;
	var err;

	options = {};
	opts = {
		'beep': true,
		'boop': 3.14,
		'foo': 'bar'
	};

	err = validate( options, opts );
	t.equal( err, null, 'returns null' );

	t.deepEqual( options, {}, 'does not set unrecognized options' );
	t.end();
});
