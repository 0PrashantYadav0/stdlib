'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' ).primitives;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {(string|StringArray)} [options.name] - name of president(s)
* @param {(PositiveInteger|PositiveIntegerArray)} [options.year] - year(s)
* @param {PositiveIntegerArray} [options.range] - year range
* @param {(string|StringArray)} [options.party] - political party
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'range': [ 1, 2, 3 ]
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'name' ) ) {
		opts.name = options.name;
		if ( !isString( opts.name ) || !isStringArray( opts.name ) ) {
			return new TypeError( 'invalid option. `name` option must be a string primitive or an array of string primitives. Option: `' + opts.name + '`.' );
		}
	}
	if ( hasOwnProp( options, 'year' ) ) {
		opts.year = options.year;
		if ( !isPositiveInteger( opts.year ) || !isPositiveIntegerArray( opts.year ) ) {
			return new TypeError( 'invalid option. `year` option must be a positive integer or an array of positive integers. Option: `' + opts.year + '`.' );
		}
	}
	if ( hasOwnProp( options, 'range' ) ) {
		opts.range = options.range;
		if ( !isPositiveIntegerArray( opts.range ) ) {
			return new TypeError( 'invalid option. `range` option must be an array of positive integers. Option: `' + opts.range + '`.' );
		}
	}
	if ( hasOwnProp( options, 'party' ) ) {
		opts.party = options.party;
		if ( !isString( opts.party ) || !isStringArray( opts.party ) ) {
			return new TypeError( 'invalid option. `party` option must be a string primitive or an array of string primitives. Option: `' + opts.party + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
