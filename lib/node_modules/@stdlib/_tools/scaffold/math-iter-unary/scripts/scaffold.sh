#!/usr/bin/env bash
#
# @license Apache-2.0
#
# Copyright (c) 2020 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## USER-DEFINED VARIABLES ##

# Define the main export alias:
ALIAS='iterRad2deg'

# Define the package description:
# shellcheck disable=SC2016
PKG_DESC='Create an iterator which converts an angle from radians to degrees for each iterated value.'

# Define the module description:
# shellcheck disable=SC2016
MODULE_DESC='Create an iterator which iteratively converts an angle from radians to degrees.'

# Define main export description:
# shellcheck disable=SC2016
MAIN_DESC='Returns an iterator which iteratively converts an angle from radians to degrees.'

# Define the test description:
TEST_DESC='converts an angle from radians to degrees for each iterated value'

# Define description text (found in the README) which should be a link to the unary package (NOTE: to not include a link, set to an empty string):
DESC_LINK_TEXT=''

# Define a list of keywords:
KEYWORDS=(
	"stdmath"
    "mathematics"
    "math"
    "trig"
    "trigonometry"
    "geometry"
    "radians"
    "degrees"
    "angle"
    "convert"
)

# Define the minimum value of generated values when benchmarking and testing the implementation:
RAND_MIN='0.0'

# Define the maximum value of generated values when benchmarking and testing the implementation:
RAND_MAX='6.28'

# Define lists of input values:
VALUES_LEN_2=(
	'1.57'
	'0.785'
)


## COMPUTED VARIABLES ##

# Converts from camel case to a underscored delineated string.
#
# $1 - string to convert
camelcase_to_snakecase() {
	echo "$1" | sed 's/\([^A-Z]\)\([A-Z]\)/\1_\2/g' | sed 's/\([A-Z]\)\([A-Z]\)\([^A-Z]\)/\1_\2\3/g' | tr '[:upper:]' '[:lower:]'
}

# Convert the alias to snakecase:
ALIAS_SNAKECASE=$(camelcase_to_snakecase "${ALIAS:4}")

# Define the destination package alias:
PKG_ALIAS="${ALIAS_SNAKECASE//_/-}"

# Define the destination package parent directory path:
PKG_PATH="stdlib/math/iter/special"

# Define the full destination package name:
PKG="${PKG_PATH}/${PKG_ALIAS}"

# Determine the root project directory:
root_dir="$(git rev-parse --show-toplevel)"

# Define the project source code directory:
base_dir="${root_dir}/lib/node_modules"

# Define the destination path:
dest_dir="${base_dir}/@${PKG}"

# Define the location of this scaffold:
this_dir="${base_dir}/@stdlib/_tools/scaffold/math-iter-unary"

# Define the location of a utility for wrapping REPL text descriptions:
wrap="${base_dir}/@stdlib/_tools/repl-txt/wrap-desc/bin/cli"

# Define the unary function alias:
UNARY_ALIAS="$(echo ${ALIAS:4:1} | tr '[:upper:]' '[:lower:]')${ALIAS:5}"

# Convert the unary function alias to snakecase:
UNARY_ALIAS_SNAKECASE=$(camelcase_to_snakecase "${UNARY_ALIAS}")

# Define the unary package "alias":
UNARY_PKG_ALIAS="${UNARY_ALIAS_SNAKECASE//_/-}"

# Define the unary package parent directory path:
UNARY_PKG_PATH="stdlib/math/base/special"

# Define the package containing the unary function to apply:
UNARY_PKG="${UNARY_PKG_PATH}/${UNARY_PKG_ALIAS}"

# Define the REPL text main export description (note: 4 space indent and wrap at 80 characters):
REPL_TEXT_MAIN_DESC=$(echo -n "${MAIN_DESC}" | "${wrap}")
REPL_TEXT_MAIN_DESC="${REPL_TEXT_MAIN_DESC/    /}"

# Define the copyright year:
YEAR=$(date +'%Y')

# Define the copyright holders:
COPYRIGHT='The Stdlib Authors'

# Define lists of expected values:
expected_script="var roundn = require( '${base_dir}/@stdlib/math/base/special/roundn' );var isInteger = require( '${base_dir}/@stdlib/assert/is-integer' ).isPrimitive;var f = require( '${base_dir}/@${UNARY_PKG}' );var arr = '${VALUES_LEN_2[*]}'.split( ' ' );var expected = arr.slice();for ( var i = 0; i < arr.length; i++ ) {var v1 = f( parseFloat( arr[ i ] ) );var v2 = roundn( v1, -3 );if ( v1 == v2 ) {v = v1.toString();if ( isInteger( v1 ) ) {v += '.0';}} else {v = '~' + v2.toString();if ( isInteger( v2 ) ) {v += '.0';}}expected[ i ] = v;}console.log( expected.join( ',' ) );"

expected_len_2=$(node -e "${expected_script}")
IFS=','; read -ra EXPECTED_LEN_2 <<< "${expected_len_2}"; IFS=' ';


## SCRIPT ##

# Define the list of scaffold directories:
dirs=(
	"benchmark"
	"docs"
	"docs/types"
	"examples"
	"lib"
	"test"
)

# Define the list of scaffold files:
files=(
	"benchmark/benchmark.js"
	"docs/types/index.d.ts"
	"docs/types/test.ts"
	"docs/repl.txt"
	"examples/index.js"
	"lib/index.js"
	"lib/main.js"
	"test/test.js"
	"package.json"
	"README.md"
)

# Create the destination directories...
for dir in ${dirs[*]}; do
	mkdir -p "${dest_dir}/${dir}"
done

# Copy the scaffold files to the destination directory...
for file in ${files[*]}; do
	cp "${this_dir}/data/${file}" "${dest_dir}/${file}"
done

# Performs a find and replace across the destination directory.
#
# $1 - regular expression
find_and_replace() {
	find "${dest_dir}" -type f -print0 | xargs -0 perl -pi -w -e "$1"
}

# Performs a find and replace across a specified file.
#
# $1 - file
# $2 - regular expression
file_find_and_replace() {
	find "${dest_dir}/$1" -type f -print0 | xargs -0 perl -pi -w -e "$2"
}

# Joins a list of strings.
#
# $1 - separator
# $* - list of strings to join
join() {
	local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}";
}

# For each of the variables defined above, insert into the scaffold files...
regex="s/\\{\\{YEAR\\}\\}/${YEAR}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{COPYRIGHT\\}\\}/${COPYRIGHT}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{ALIAS\\}\\}/${ALIAS}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{ALIAS_SNAKECASE\\}\\}/${ALIAS_SNAKECASE}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG\\}\\}/${PKG//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG_DESC\\}\\}/${PKG_DESC//iterator/[iterator][mdn-iterator-protocol]}/g;"
file_find_and_replace "README.md" "${regex}"

regex="s/\\{\\{PKG_DESC\\}\\}/${PKG_DESC}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{MODULE_DESC\\}\\}/${MODULE_DESC//iterator/[iterator][mdn-iterator-protocol]}/g;"
file_find_and_replace "README.md" "${regex}"

regex="s/\\{\\{MODULE_DESC\\}\\}/${MODULE_DESC}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{MAIN_DESC\\}\\}/${MAIN_DESC//iterator/[iterator][mdn-iterator-protocol]}/g;"
file_find_and_replace "README.md" "${regex}"

regex="s/\\{\\{MAIN_DESC\\}\\}/${MAIN_DESC}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{TEST_DESC\\}\\}/${TEST_DESC}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{REPL_TEXT_MAIN_DESC\\}\\}/${REPL_TEXT_MAIN_DESC}/g;"
find_and_replace "${regex}"

if [ -n "${DESC_LINK_TEXT}" ]; then
	# WARNING: we assume that the description link text does *not* include any special regular expression characters...
	regex="s/${DESC_LINK_TEXT}/[${DESC_LINK_TEXT}][\\@${UNARY_PKG//\//\\/}]/g;"
	file_find_and_replace "README.md" "${regex}"
fi

regex="s/\\{\\{UNARY_PKG\\}\\}/${UNARY_PKG//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{UNARY_ALIAS\\}\\}/${UNARY_ALIAS}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{RAND_MIN\\}\\}/${RAND_MIN}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{RAND_MAX\\}\\}/${RAND_MAX}/g;"
find_and_replace "${regex}"

keywords_sep='",\n    "'
if [ "${#KEYWORDS[*]}" -eq 0 ]; then
	keywords=''
else
	keywords=$(join "${keywords_sep}" "${KEYWORDS[@]}")
	keywords="\\n    \"${keywords}\","
fi
regex="s/\\{\\{KEYWORDS\\}\\}/${keywords}/g;"
find_and_replace "${regex}"

expected_values_sep=', '

values=$(join "${expected_values_sep}" "${VALUES_LEN_2[@]}")
regex="s/\\{\\{VALUES_LEN_2\\}\\}/${values}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{EXPECTED_1\\}\\}/${EXPECTED_LEN_2[0]}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{EXPECTED_2\\}\\}/${EXPECTED_LEN_2[1]}/g;"
find_and_replace "${regex}"
