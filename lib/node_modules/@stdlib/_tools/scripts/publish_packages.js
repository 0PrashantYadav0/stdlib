#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-sync, no-console */

'use strict';

// MODULES //

var shell = require( 'child_process' ).execSync;
var join = require( 'path' ).join;
var fs = require( 'fs' );
var logger = require( 'debug' );
var ghpages = require( 'gh-pages' );
var repos = require( '@stdlib/_tools/github/org-repos' );
var createRepo = require( '@stdlib/_tools/github/create-repo' );
var writeFileSync = require( '@stdlib/fs/write-file' ).sync;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var contains = require( '@stdlib/assert/contains' );
var trim = require( '@stdlib/string/trim' );
var replace = require( '@stdlib/string/replace' );
var removeFirst = require( '@stdlib/string/remove-first' );
var startsWith = require( '@stdlib/string/starts-with' );
var namespaceDeps = require( '@stdlib/_tools/pkgs/namespace-deps' );
var ENV = require( '@stdlib/process/env' );


// VARIABLES //

var debug = logger( 'scripts:publish-packages' );

// TODO: Edit the list of packages that will be published:
var PACKAGES_TO_PUBLISH = [

	// 'types',

	// 'assert',

	'assert/is-null',

	// 'assert/is-arguments',

	'assert/is-nan'

	// 'assert/is-boolean',

	// 'assert/is-undefined',

	// 'math/base/special'

	// 'utils',

	// 'regexp',

	// 'ndarray',

	// 'bench'
];
var INSTALLATION_SECTION = [
	'<section class="installation">',
	'',
	'## Installation',
	'',
	'``` bash',
	'$ npm install @stdlib/<pkg>',
	'```',
	'',
	'</section>',
	''
].join( '\n' );

var MAIN_REPO_SECTION = [
	'',
	'<section class="main-repo" >',
	'',
	'* * *',
	'',
	'## Notice',
	'',
	'This package is part of [stdlib][stdlib], a standard library for JavaScript and Node.js, with an emphasis on numerical and scientific computing. The library provides a collection of robust, high performance libraries for mathematics, statistics, streams, utilities, and more.',
	'',
	'For more information on the project, filing bug reports and feature requests, and guidance on how to develop [stdlib][stdlib], see the main project [repository][stdlib].',
	'',
	'---',
	'',
	'## License',
	'',
	'See [LICENSE][stdlib-license].',
	'',
	'',
	'## Copyright',
	'',
	'Copyright &copy; 2016-2021. The Stdlib [Authors][stdlib-authors].',
	'',
	'</section>',
	'',
	'<!-- /.stdlib -->',
	'',
	'<!-- Section for all links. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->',
	'',
	'<section class="links">',
	'',
	'[stdlib]: https://github.com/stdlib-js/stdlib',
	'',
	'[stdlib-authors]: https://github.com/stdlib-js/stdlib/graphs/contributors',
	'',
	'[stdlib-license]: https://raw.githubusercontent.com/stdlib-js/<pkg>/main/LICENSE'
].join( '\n' );

var mainDir = join( __dirname, '..', '..', '..', '..', '..' );
var DOTFILES = [ '.editorconfig', '.npmignore', '.npmrc', 'CONTRIBUTORS', 'LICENSE', 'NOTICE' ];

var WORKFLOW_PUBLISH = [
	'name: Publish Package',
	'',
	'on: push',
	'',
	'jobs:',
	'  publish:',
	'    runs-on: ubuntu-latest',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 10',
	'      - name: Increment version',
	'        run: |',
	'          git config --local user.email "noreply@stdlib.io"',
	'          git config --local user.name "stdlib-bot"',
	'          npm version patch',
	'      - name: Push changes',
	'        run: |',
	'          git push --tags',
	'      - name: Publish package to npm',
	'        uses: JS-DevTools/npm-publish@v1',
	'        with:',
	'          token: ${{ secrets.NPM_TOKEN }}'
].join( '\n' );
var WORKFLOW_INSTALL = [
	'name: Install dependencies',
	'',
	'on:',
	'  workflow_run:',
	'    workflows: ["Publish Package"]',
	'    types: [completed]',
	'',
	'jobs:',
	'  on-success:',
	'    runs-on: ubuntu-latest',
	'    if: ${{ github.event.workflow_run.conclusion == \'success\' }}',
	'    steps:',
	'      - uses: actions/checkout@v1',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 10',
	'      - name: Install dependencies via npm',
	'        run: |',
	'          npm install',
	'  on-failure:',
	'    runs-on: ubuntu-latest',
	'    if: ${{ github.event.workflow_run.conclusion == \'failure\' }}',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'        with:',
	'          fetch-depth: 0',
	'      - name: Delete tag of unpublished version',
	'        run: |',
	'          git config --local user.email "noreply@stdlib.io"',
	'          git config --local user.name "stdlib-bot"',
	'          git push origin --delete $(git tag -l | tail --lines=1)'
].join( '\n' );
var EXISTING_REPOS = {};


// FUNCTIONS //

/**
* Publishes a package to the respective GitHub repository.
*
* @private
* @param {string} pkg - package name
* @param {Function} clbk - callback function
* @returns {void}
*/
function publish( pkg, clbk ) {
	var isTopLevelNS;
	var workflowPath;
	var ghpagesOpts;
	var pkgJsonPath;
	var mainVersion;
	var replacement;
	var readmePath;
	var mainJSON;
	var command;
	var devDeps;
	var distPkg;
	var pkgJSON;
	var version;
	var readme;
	var deps;
	var dist;
	var file;
	var dep;
	var src;
	var i;

	src = join( mainDir, 'lib/node_modules', '@stdlib', pkg );
	distPkg = replace( pkg, /\//g, '-' );

	dist = join( mainDir, 'build', '@stdlib', distPkg );
	mainJSON = readJSON( join( mainDir, 'package.json' ) );

	console.log( 'Creating directory and copying source files...' );

	command = 'mkdir -p '+dist;
	debug( 'Creating build directory: '+command );
	shell( command );

	command = 'cp -r '+src+'/* '+dist;
	debug( 'Copying files: '+command );
	shell( command );

	debug( 'Copying configuration files...' );
	for ( i = 0; i < DOTFILES.length; i++ ) {
		file = DOTFILES[ i ];
		fs.copyFileSync( join( mainDir, file ), join( dist, file ) );
	}

	debug( 'Copying and populating README.md file...' );
	readmePath = join( dist, 'README.md' );
	readme = readFileSync( readmePath, 'utf-8' );
	replacement = INSTALLATION_SECTION+'\n<section class="usage">';
	readme = replace( readme, '<section class="usage">', replacement );
	readme = replace( readme, '@stdlib/'+pkg, '@stdlib/'+distPkg );
	readme = replace( readme, '<section class="links">', MAIN_REPO_SECTION );
	readme = replace( readme, '<pkg>', distPkg );
	writeFileSync( readmePath, readme );

	command = [
		'find '+dist+' -type f -name \'*.md\' -print0 ', // Find all regular Markdown files in the destination directory and print their full names to standard output...
		'| xargs -0 ', // Convert standard input to the arguments for following `sed` command...
		'sed -Ei ', // Edit files in-place without creating a backup...
		'\'s/',
		'(@stdlib\\/'+distPkg+')([^:]*)\\]:.*$', // Match start of internal package link until end of line...
		'/',
		'\\1\\2]: https:\\/\\/github.com\\/stdlib-js\\/'+distPkg+'\\/tree\\/main\\2', // Replacement string generated via back-referencing the two created capture groups...
		'/g\'' // Replace all occurrences and not just the first...
	].join( '' );
	debug( 'Executing command: '+command );
	shell( command );

	isTopLevelNS = !contains( pkg, '/' );
	if ( !isTopLevelNS ) {
		command = [
			'find '+dist+' -type f \\( -name \'*.[jt]s\' -o -name \'*.md\' \\) -print0 ', // Find all JavaScript and TypeScript files in the destination directory and print their full names to standard output...
			'| xargs -0 ', // Convert standard input to the arguments for following `sed` command...
			'sed -Ei ', // Edit files in-place without creating a backup...
			'"/',
			'require[(] \'@stdlib\\/'+distPkg, // Skip over all internal packages...
			'/b; ',
			'/',
			'require[(] \'@stdlib\\/', // Match `require`s of other, non-internal packages...
			'/s/',
			'\\/',
			'/',
			'-',
			'/2g"' // Replace all forward slashes in require path except the first one...
		].join( '' );
		debug( 'Executing command: '+command );
		shell( command );
	}

	pkgJsonPath = join( dist, 'package.json' );
	pkgJSON = readJSON( pkgJsonPath );
	pkgJSON.name = '@stdlib/'+distPkg;
	pkgJSON.repository.url = 'git://github.com/stdlib-js/'+distPkg+'.git';

	command = 'git ls-remote --tags --sort="v:refname" git://github.com/stdlib-js/'+distPkg+'.git | tail -n1 | sed \'s/.*\\///; s/\\^{}//\'';
	debug( 'Executing command to retrieve last version: '+command );
	version = shell( command ).toString();
	version = trim( removeFirst( version ) ); // Remove leading `v`...
	if ( !version ) {
		version = '0.0.0';
	}
	pkgJSON.version = version;

	deps = namespaceDeps( '@stdlib/'+pkg, {
		'level': ( isTopLevelNS ) ? 1 : 999,
		'dev': false
	});
	devDeps = namespaceDeps( '@stdlib/'+pkg, {
		'level': ( isTopLevelNS ) ? 1 : 999,
		'dev': true
	});
	for ( i = 0; i < deps.length; i++ ) {
		dep = deps[ i ];
		if ( startsWith( dep, '@stdlib' ) ) {
			pkgJSON.dependencies[ dep ] = '^0.0.x';
		} else {
			pkgJSON.dependencies[ dep ] = mainJSON.dependencies[ dep ];
		}
	}
	for ( i = 0; i < devDeps.length; i++ ) {
		dep = devDeps[ i ];
		if ( !contains( deps, dep ) ) {
			if ( startsWith( dep, '@stdlib' ) ) {
				pkgJSON.devDependencies[ dep ] = '^0.0.x';
			} else {
				mainVersion = mainJSON.devDependencies[ dep ];
				pkgJSON.devDependencies[ dep ] = mainVersion;
			}
		}
	}
	writeFileSync( pkgJsonPath, JSON.stringify( pkgJSON, null, '  ' ).concat( '\n' ) );
	fs.mkdirSync( join( dist, '.github', 'workflows' ), {
		'recursive': true
	});
	workflowPath = join( dist, '.github', 'workflows', 'publish.yml' );
	writeFileSync( workflowPath, WORKFLOW_PUBLISH );
	workflowPath = join( dist, '.github', 'workflows', 'install.yml' );
	writeFileSync( workflowPath, WORKFLOW_INSTALL );

	ghpagesOpts = {
		'branch': 'main',
		'dotfiles': true,
		'src': [
			'**/*',
			'!**/.cache/**'
		],
		'repo': 'https://'+ ENV.GITHUB_TOKEN + '@github.com/stdlib-js/' + replace( pkg, '/', '-' ),
		'message': 'Auto-generated commit',
		'user': {
			'name': 'stdlib-bot',
			'email': 'noreply@stdlib.io'
		},
		'history': true,
		'remove': 'do-not-remove-files'
	};
	if ( EXISTING_REPOS[ distPkg ] ) {
		console.log( 'Publishing '+dist+' to GitHub...' );
		ghpages.publish( dist, ghpagesOpts, clbk );
	} else {
		console.log( 'Creating new remote repository: stdlib-js/'+distPkg );
		createRepo( distPkg, {
			'org': 'stdlib-js',
			'desc': pkgJSON.description,
			'homepage': 'https://github.com/stdlib-js/stdlib',
			'issues': false,
			'wiki': false,
			'private': false,
			'token': ENV.GITHUB_TOKEN
		}, onRepoCreation );
	}

	/**
	* Callback invoked upon creating GitHub repository.
	*
	* @private
	* @returns {void}
	*/
	function onRepoCreation() {
		ghpages.publish( dist, ghpagesOpts, clbk );
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var command;
	var opts;
	var pkg;

	pkg = PACKAGES_TO_PUBLISH.shift();

	command = 'cd '+join( mainDir, 'node_modules', 'gh-pages', 'bin' )+'; ./gh-pages-clean.js';
	debug( 'Clean-up cached gh-pages files: '+command );
	shell( command );

	debug( 'Clean-up existing build directory...' );
	fs.rmdirSync( join( mainDir, 'build' ), {
		'recursive': true
	});

	opts = {
		'org': 'stdlib-js',
		'token': ENV.GITHUB_TOKEN
	};
	repos( opts, onRepos );

	/**
	* Callback invoked after resolving resources.
	*
	* @private
	* @param {(Error|null)} err - error object
	* @param {ObjectArray} results - query data
	* @returns {void}
	*/
	function onRepos( err, results ) {
		var i;
		if ( err ) {
			return console.error( err );
		}
		for ( i = 0; i < results.length; i++ ) {
			EXISTING_REPOS[ results[ i ].name ] = true;
		}
		console.log( EXISTING_REPOS );
		publish( pkg, onCallback );
	}

	/**
	* Callback invoked once pushing package contents to remote GitHub repository.
	*
	* @private
	* @param {Error} err - error object or `null`
	* @returns {void}
	*/
	function onCallback( err ) {
		if ( err ) {
			return console.log( err );
		}
		console.log( 'Package contents successfully pushed to GitHub...' );
		pkg = PACKAGES_TO_PUBLISH.shift();
		if ( pkg ) {
			console.log( 'Now processing the following package: '+pkg );
			publish( pkg, onCallback );
		}
	}
}

main();
