#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-sync, no-console, max-statements, max-lines-per-function */

'use strict';

// MODULES //

var shell = require( 'child_process' ).execSync;
var join = require( 'path' ).join;
var fs = require( 'fs' );
var tmpdir = require( 'os' ).tmpdir;
var logger = require( 'debug' );
var ghpages = require( 'gh-pages' );
var argv = require( '@stdlib/process/argv' );
var repos = require( '@stdlib/_tools/github/org-repos' );
var setTopics = require( '@stdlib/_tools/github/set-topics' );
var createRepo = require( '@stdlib/_tools/github/create-repo' );
var writeFileSync = require( '@stdlib/fs/write-file' ).sync;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var existsSync = require( '@stdlib/fs/exists' ).sync;
var contains = require( '@stdlib/assert/contains' );
var endsWith = require( '@stdlib/string/ends-with' );
var trim = require( '@stdlib/string/trim' );
var replace = require( '@stdlib/string/replace' );
var removeFirst = require( '@stdlib/string/remove-first' );
var startsWith = require( '@stdlib/string/starts-with' );
var namespaceDeps = require( '@stdlib/_tools/pkgs/namespace-deps' );
var depList = require( '@stdlib/_tools/pkgs/dep-list' );
var ENV = require( '@stdlib/process/env' );


// VARIABLES //

var debug = logger( 'scripts:publish-packages' );

var START_PKG_INDEX = 0;
var END_PKG_INDEX = 1;

var topics = setTopics.factory( {
	'token': ENV.GITHUB_TOKEN
}, onTopics );

var INSTALLATION_SECTION = [
	'<section class="installation">',
	'',
	'## Installation',
	'',
	'```bash',
	'npm install @stdlib/<pkg>',
	'```',
	'',
	'</section>',
	''
].join( '\n' );
var CLI_INSTALLATION_SECTION = [
	'<section class="installation">',
	'',
	'## Installation',
	'',
	'To use the module as a general utility, install the module globally',
	'',
	'```bash',
	'npm install -g @stdlib/<pkg>',
	'```',
	'',
	'</section>',
	''
].join( '\n' );
var MAIN_REPO_SECTION = [
	'',
	'<section class="main-repo" >',
	'',
	'* * *',
	'',
	'## Notice',
	'',
	'This package is part of [stdlib][stdlib], a standard library for JavaScript and Node.js, with an emphasis on numerical and scientific computing. The library provides a collection of robust, high performance libraries for mathematics, statistics, streams, utilities, and more.',
	'',
	'For more information on the project, filing bug reports and feature requests, and guidance on how to develop [stdlib][stdlib], see the main project [repository][stdlib].',
	'',
	'---',
	'',
	'## License',
	'',
	'See [LICENSE][stdlib-license].',
	'',
	'',
	'## Copyright',
	'',
	'Copyright &copy; 2016-2021. The Stdlib [Authors][stdlib-authors].',
	'',
	'</section>',
	'',
	'<!-- /.stdlib -->',
	'',
	'<!-- Section for all links. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->',
	'',
	'<section class="links">',
	'',
	'[npm-image]: http://img.shields.io/npm/v/@stdlib/<pkg>.svg',
	'[npm-url]: https://npmjs.org/package/@stdlib/<pkg>',
	'',
	'[test-image]: https://github.com/stdlib-js/<pkg>/actions/workflows/test.yml/badge.svg',
	'[test-url]: https://github.com/stdlib-js/<pkg>/actions/workflows/test.yml',
	'',
	'[coverage-image]: https://img.shields.io/codecov/c/github/stdlib-js/<pkg>/main.svg',
	'[coverage-url]: https://codecov.io/github/stdlib-js/<pkg>?branch=main',
	'',
	'[dependencies-image]: https://img.shields.io/david/stdlib-js/<pkg>',
	'[dependencies-url]: https://david-dm.org/stdlib-js/<pkg>/main',
	'',
	'[stdlib]: https://github.com/stdlib-js/stdlib',
	'',
	'[stdlib-authors]: https://github.com/stdlib-js/stdlib/graphs/contributors',
	'',
	'[stdlib-license]: https://raw.githubusercontent.com/stdlib-js/<pkg>/main/LICENSE'
].join( '\n' );

var mainDir = join( __dirname, '..', '..', '..', '..', '..' );
var DOTFILES = [ '.editorconfig', '.gitignore', '.gitattributes', '.npmignore', '.npmrc', 'CONTRIBUTORS', 'LICENSE', 'NOTICE' ];

var WORKFLOW_PUBLISH = [
	'name: Publish Package',
	'',
	'on: push',
	'',
	'jobs:',
	'  publish:',
	'    runs-on: ubuntu-latest',
	'    env:',
	'      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 14',
	'      - name: Increment version',
	'        run: |',
	'          git config --local user.email "noreply@stdlib.io"',
	'          git config --local user.name "stdlib-bot"',
	'          npm version prerelease --preid=alpha',
	'      - name: Publish package to npm',
	'        uses: JS-DevTools/npm-publish@v1',
	'        with:',
	'          token: ${{ secrets.NPM_TOKEN }}',
	'          access: public',
	'      - name: Push changes',
	'        run: |',
	'          git push origin main',
	'          git push --tags',
	'      - uses: act10ns/slack@v1',
	'        with:',
	'          status: ${{ job.status }}',
	'          steps: ${{ toJson(steps) }}',
	'          channel: \'#npm-ci\'',
	'        if: failure()'
].join( '\n' );
var WORKFLOW_BENCHMARK = [
	'name: benchmark',
	'',
	'on:',
	'  workflow_dispatch:',
	'',
	'jobs:',
	'  benchmark:',
	'    runs-on: ubuntu-latest',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 14',
	'      - name: Install production and development dependencies',
	'        run: |',
	'          npm install',
	'      - name: Run benchmarks',
	'        run: |',
	'          npm run benchmark'
].join( '\n' );
var WORKFLOW_EXAMPLES = [
	'name: examples',
	'',
	'on:',
	'  workflow_dispatch:',
	'',
	'jobs:',
	'  examples:',
	'    runs-on: ubuntu-latest',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 14',
	'      - name: Install production and development dependencies',
	'        run: |',
	'          npm install',
	'      - name: Run examples',
	'        run: |',
	'          npm run examples'
].join( '\n' );
var WORKFLOW_TEST = [
	'name: build',
	'',
	'on:',
	'  workflow_dispatch:',
	'',
	'jobs:',
	'  test:',
	'    runs-on: ubuntu-latest',
	'    env:',
	'      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 14',
	'      - name: Install production and development dependencies',
	'        id: install',
	'        run: |',
	'          npm install',
	'      - name: Run tests',
	'        id: tests',
	'        run: |',
	'          npm test',
	'      - uses: act10ns/slack@v1',
	'        with:',
	'          status: ${{ job.status }}',
	'          steps: ${{ toJson(steps) }}',
	'          channel: \'#npm-ci\'',
	'        if: failure()'
].join( '\n' );
var WORKFLOW_TEST_COVERAGE = [
	'name: coverage',
	'',
	'on:',
	'  workflow_dispatch:',
	'',
	'jobs:',
	'  test:',
	'    runs-on: ubuntu-latest',
	'    steps:',
	'      - uses: actions/checkout@v2',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 14',
	'      - name: Install production and development dependencies',
	'        run: |',
	'          npm install',
	'      - name: Calculate test coverage',
	'        run: |',
	'          npm run test-cov',
	'      - name: Upload coverage to Codecov',
	'        uses: codecov/codecov-action@v1',
	'        with:',
	'          directory: reports/coverage',
	'          flags: unittests'
].join( '\n' );
var WORKFLOW_INSTALL = [
	'name: Test Installing Dependencies',
	'',
	'on:',
	'  workflow_run:',
	'    workflows: ["Publish Package"]',
	'    types: [completed]',
	'',
	'jobs:',
	'  on-success:',
	'    runs-on: ubuntu-latest',
	'    env:',
	'      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}',
	'    if: ${{ github.event.workflow_run.conclusion == \'success\' }}',
	'    steps:',
	'      - uses: actions/checkout@v1',
	'      - uses: actions/setup-node@v1',
	'        with:',
	'          node-version: 14',
	'      - name: Install production dependencies via npm',
	'        run: |',
	'          npm install --only=prod',
	'      - uses: act10ns/slack@v1',
	'        with:',
	'          status: ${{ job.status }}',
	'          steps: ${{ toJson(steps) }}',
	'          channel: \'#npm-ci\'',
	'        if: failure()'
].join( '\n' );
var WORKFLOW_CLOSE_PULLS = [
	'name: Close Pull Requests',
	'',
	'on:',
	'  pull_request_target:',
	'    types: [opened]',
	'',
	'jobs:',
	'  run:',
	'    runs-on: ubuntu-latest',
	'    steps:',
	'    - uses: superbrothers/close-pull-request@v3',
	'      with:',
	'        comment: |',
	'          Thank you for submitting a pull request. :raised_hands:',
	'          ',
	'          We greatly appreciate your willingness to submit a contribution. However, we are not accepting pull requests against this repository, as all development happens on the [main project repository](https://github.com/stdlib-js/stdlib).',
	'          ',
	'          We kindly request that you submit this pull request against the [respective directory](<pkg-path>) of the main repository where weâ€™ll review and provide feedback. If this is your first stdlib contribution, be sure to read the [contributing guide](https://github.com/stdlib-js/stdlib/blob/develop/CONTRIBUTING.md) which provides guidelines and instructions for submitting contributions.',
	'          ',
	'          Thank you again, and we look forward to receiving your contribution! :smiley:',
	'          ',
	'          Best,',
	'          The stdlib team'
].join( '\n' );
var CODE_OF_CONDUCT = [
	'# Code of Conduct',
	'',
	'stdlib expects community participants to adhere to the project Code of Conduct. The [full text](https://github.com/stdlib-js/stdlib/blob/develop/CODE_OF_CONDUCT.md) is available in the main project repository.'
].join( '\n' );
var CONTRIBUTING = [
	'# Contribution Guidelines',
	'',
	'Woot woot! If you are new to stdlib, welcome! And thanks for your interest! Guidelines for how to contribute to the project are [available](https://github.com/stdlib-js/stdlib/blob/develop/CONTRIBUTING.md) in the main project repository.'
].join( '\n' );
var PULL_REQUEST_TEMPLATE = [
	'<!-- ----------^ Click "Preview"! -->',
	'',
	'We are excited about your pull request, but unfortunately we are not accepting pull requests against this repository, as all development happens on the [main project repository](https://github.com/stdlib-js/stdlib). We kindly request that you submit this pull request against the [respective directory](<pkg-path>) of the main repository where weâ€™ll review and provide feedback. ',
	'',
	'If this is your first stdlib contribution, be sure to read the [contributing guide](https://github.com/stdlib-js/stdlib/blob/develop/CONTRIBUTING.md) which provides guidelines and instructions for submitting contributions. You may also consult the [development guide](https://github.com/stdlib-js/stdlib/blob/develop/docs/development.md) for help on developing stdlib.',
	'',
	'We look forward to receiving your contribution! :smiley:'
].join( '\n' );
var FUNDING = {
	'type': 'patreon',
	'url': 'https://www.patreon.com/athan'
};
var EXISTING_REPOS = {};
var RE_USAGE_SECTION = /(## CLI\n\n)?<section class="usage">/g;
var BASIC_GITHUB_TOPICS = [
	'nodejs',
	'javascript',
	'stdlib',
	'node',
	'node-js'
];
var RE_ALLOWED_TOPIC_CHARS = /^[A-Z0-9-]+$/i;


// FUNCTIONS //

/**
* Creates a list of GitHub topics.
*
* @private
* @param {StringArray} words - list of keywords
* @returns {StringArray} list of topics
*/
function createTopics( words ) {
	var word;
	var out;
	var i;

	out = [];
	for ( i = 0; i < words.length; i++ ) {
		word = words[ i ];
		if (
			!startsWith( word, 'std' ) &&
			word.length <= 35 // GitHub topics may not have more than 35 characters
		) {
			word = replace( word, ' ', '-' ); // GitHub topics may not include spaces, but allow hyphens
			if ( RE_ALLOWED_TOPIC_CHARS.test( word ) ) {
				out.push( word );
			}
		}
	}
	return BASIC_GITHUB_TOPICS.concat( out ).slice( 0, 20 ); // GitHub repositories may not have more than 20 topics
}

/**
* Function invoked upon replacing the topics of a repository.
*
* @private
* @param {(Error|null)} error - encountered error
* @param {Object} data - response data
* @param {Object} info - response info
* @returns {void}
*/
function onTopics( error, data, info ) {
	if ( error ) {
		return console.error( error );
	}
	console.log( 'Replaced topics for repository.' );
	console.log( 'Response data: '+JSON.stringify( data ) );
	console.log( 'Rate limit: '+JSON.stringify( info ) );
}

/**
* Replacer function for inserting an install section before a usage section.
*
* @private
* @param {string} match - entire match
* @param {string} p1 - first capture group
* @returns {string} replacement
*/
function replacer( match, p1 ) {
	if ( p1 && endsWith( p1, '## CLI\n\n' ) ) {
		return p1 + CLI_INSTALLATION_SECTION+'\n<section class="usage">';
	}
	return INSTALLATION_SECTION + '\n<section class="usage">';
}

/**
* Publishes a package to the respective GitHub repository.
*
* @private
* @param {string} pkg - package name
* @param {Function} clbk - callback function
* @returns {void}
*/
function publish( pkg, clbk ) {
	var isTopLevelNS;
	var workflowPath;
	var ghpagesOpts;
	var pkgJsonPath;
	var mainVersion;
	var readmePath;
	var mainJSON;
	var command;
	var devDeps;
	var distPkg;
	var pkgJSON;
	var version;
	var badges;
	var readme;
	var mdPath;
	var deps;
	var dist;
	var file;
	var dep;
	var src;
	var pth;
	var i;

	src = join( mainDir, 'lib/node_modules', '@stdlib', pkg );
	distPkg = replace( pkg, /\//g, '-' );

	dist = join( mainDir, 'build', '@stdlib', distPkg );
	mainJSON = readJSON( join( mainDir, 'package.json' ) );

	console.log( 'Creating directory and copying source files...' );

	command = 'mkdir -p '+dist;
	debug( 'Creating build directory: '+command );
	shell( command );

	isTopLevelNS = !contains( pkg, '/' );
	if ( isTopLevelNS ) {
		// Copy all files and subdirectories:
		command = 'cp -r '+src+'/* '+dist;
	}
	else {
		// Do not copy nested packages which will instead be pulled in as separate dependencies:
		command = 'rsync -r --ignore-missing-args --include=\'benchmark/***\' --include=\'bin/***\' --include=\'docs/***\' --include=\'etc/***\' --include=\'examples/***\' --include=\'lib/***\' --include=\'src/***\' --include=\'test/***\' --exclude=\'*/***\' '+src+'/*** '+dist;
	}
	debug( 'Copying files: '+command );
	shell( command );

	debug( 'Copying configuration files...' );
	for ( i = 0; i < DOTFILES.length; i++ ) {
		file = DOTFILES[ i ];
		fs.copyFileSync( join( mainDir, file ), join( dist, file ) );
	}

	if ( isTopLevelNS ) {
		deps = namespaceDeps( '@stdlib/'+pkg, {
			'level': 1,
			'dev': false
		});
		devDeps = namespaceDeps( '@stdlib/'+pkg, {
			'level': 1,
			'dev': true
		});
	} else {
		deps = depList( '@stdlib/'+pkg, {
			'dev': false
		});
		devDeps = depList( '@stdlib/'+pkg, {
			'dev': true
		});
	}

	debug( 'Copying and populating README.md file...' );
	readmePath = join( dist, 'README.md' );
	readme = readFileSync( readmePath, 'utf-8' );
	readme = replace( readme, RE_USAGE_SECTION, replacer );
	badges = '[![NPM version][npm-image]][npm-url]';
	badges += ' ';
	if ( contains( devDeps, 'tape' ) ) {
		badges += '[![Build Status][test-image]][test-url]';
		badges += ' ';
		badges += '[![Coverage Status][coverage-image]][coverage-url]';
		badges += ' ';
	}
	badges += '[![dependencies][dependencies-image]][dependencies-url]';
	readme = replace( readme, /\n>/, '\n'+badges+'\n\n>' );
	readme = replace( readme, '\'@stdlib/'+pkg, '\'@stdlib/'+distPkg );
	readme = replace( readme, '<section class="links">', MAIN_REPO_SECTION );
	readme = replace( readme, '<pkg>', distPkg );
	writeFileSync( readmePath, readme );

	command = [
		'find '+dist+' -type f -name \'*.md\' -print0 ', // Find all regular Markdown files in the destination directory and print their full names to standard output...
		'| xargs -0 ', // Convert standard input to the arguments for following `sed` command...
		'sed -Ei ', // Edit files in-place without creating a backup...
		'\'s/',
		'(@stdlib\\/'+distPkg+')([^:]*)\\]:.*$', // Match start of internal package link until end of line...
		'/',
		'\\1\\2]: https:\\/\\/github.com\\/stdlib-js\\/'+distPkg+'\\/tree\\/main\\2', // Replacement string generated via back-referencing the two created capture groups...
		'/g\'' // Replace all occurrences and not just the first...
	].join( '' );
	debug( 'Executing command: '+command );
	shell( command );

	command = [
		'find '+dist+' -type f -name \'*.md\' -print0 ', // Find all regular Markdown files in the destination directory and print their full names to standard output...
		'| xargs -0 ', // Convert standard input to the arguments for following `sed` command...
		'sed -Ei ', // Edit files in-place without creating a backup...
		'"/',
		'^[^:]+: https:\\/\\/github.com\\/stdlib-js\\/stdlib\\/tree\\/develop\\/lib\\/node_modules\\/%40stdlib\\/', // Match start of external `@stdlib` package link (as internal ones are already processed) until end of line...
		'/ ',
		[
			'{',
			'    h', // Copy pattern space to hold space...
			'    s/:.*/: https:\\/\\/github.com\\/stdlib-js\\//', // Replace everything after the colon in the matched pattern with the beginning of new replacement URL...
			'    x', // Exchange the contents of the hold and pattern spaces...
			'    s/[^:]+: https:\\/\\/github.com\\/stdlib-js\\/stdlib\\/tree\\/develop\\/lib\\/node_modules\\/%40stdlib\\///', // Remove everything up to the beginning of the existing main project URL in the pattern space...
			'    s/\\//-/g', // Replace all occurrences of `/` with `-`...
			'    H', // Append pattern space to hold space...
			'    g', // Copy hold space to pattern space...
			'    s/\\n//', // Remove newline character added when appending pattern space to hold space
			'}'
		].join( '\n' ),
		'"'
	].join( '' );
	debug( 'Executing command: '+command );
	shell( command );

	if ( !isTopLevelNS ) {
		command = [
			'find '+dist+' -type f \\( -name \'*.[jt]s\' -o -name \'*.md\' \\) -print0 ', // Find all JavaScript and TypeScript files in the destination directory and print their full names to standard output...
			'| xargs -0 ', // Convert standard input to the arguments for following `sed` command...
			'sed -Ei ', // Edit files in-place without creating a backup...
			'"/',
			'require[(] \'@stdlib\\/'+distPkg, // Skip over all internal packages...
			'/b; ',
			'/',
			'require[(] \'@stdlib\\/', // Match `require`s of other, non-internal packages...
			'/s/',
			'\\/',
			'/',
			'-',
			'/2g"' // Replace all forward slashes in require path except the first one...
		].join( '' );
		debug( 'Executing command: '+command );
		shell( command );

		command = [
			'find '+dist+' -type f -name \'manifest.json\' -print0 ', // Find all `manifest.json` files in the destination directory and print their full names to standard output...
			'| xargs -r -0 ', // Convert standard input to the arguments for following `sed` command if `find` returns output...
			'sed -Ei ', // Edit files in-place without creating a backup...
			'"/',
			'@stdlib\\/[^ ]+', // Match @stdlib package names in dependencies
			'/s/',
			'\\/',
			'/',
			'-',
			'/2g"' // Replace all forward slashes in package names except the first one...
		].join( '' );
		debug( 'Executing command: '+command );
		shell( command );
	}

	pkgJsonPath = join( dist, 'package.json' );
	pkgJSON = readJSON( pkgJsonPath );
	pkgJSON.name = '@stdlib/'+distPkg;
	pkgJSON.repository.url = 'git://github.com/stdlib-js/'+distPkg+'.git';

	command = 'git ls-remote --tags --sort="v:refname" git://github.com/stdlib-js/'+distPkg+'.git | tail -n1 | sed \'s/.*\\///; s/\\^{}//\'';
	debug( 'Executing command to retrieve last version: '+command );
	version = shell( command ).toString();
	version = trim( removeFirst( version ) ); // Remove leading `v`...
	if ( !version ) {
		version = '0.0.0';
	}
	pkgJSON.version = version;
	pkgJSON.funding = FUNDING;
	for ( i = 0; i < deps.length; i++ ) {
		dep = deps[ i ];
		if ( startsWith( dep, '@stdlib' ) ) {
			pkgJSON.dependencies[ dep ] = '^0.0.x';
		} else {
			pkgJSON.dependencies[ dep ] = mainJSON.dependencies[ dep ];
		}
	}
	for ( i = 0; i < devDeps.length; i++ ) {
		dep = devDeps[ i ];
		if ( !contains( deps, dep ) ) {
			if ( startsWith( dep, '@stdlib' ) ) {
				pkgJSON.devDependencies[ dep ] = '^0.0.x';
			} else {
				mainVersion = mainJSON.devDependencies[ dep ];
				pkgJSON.devDependencies[ dep ] = mainVersion;
			}
		}
	}
	fs.mkdirSync( join( dist, '.github', 'workflows' ), {
		'recursive': true
	});
	workflowPath = join( dist, '.github', 'workflows', 'publish.yml' );
	writeFileSync( workflowPath, WORKFLOW_PUBLISH );
	workflowPath = join( dist, '.github', 'workflows', 'test_install.yml' );
	writeFileSync( workflowPath, WORKFLOW_INSTALL );
	workflowPath = join( dist, '.github', 'workflows', 'close_pull_requests.yml' );
	pth = 'https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/'+pkg;
	writeFileSync( workflowPath, replace( WORKFLOW_CLOSE_PULLS, '<pkg-path>', pth ) );
	if ( contains( devDeps, 'tape' ) ) {
		workflowPath = join( dist, '.github', 'workflows', 'test.yml' );
		writeFileSync( workflowPath, WORKFLOW_TEST );
		pkgJSON.scripts[ 'test' ] = 'tape $(grep -irl --include=\\*.js "tape" ./test) | tap-spec';
		pkgJSON.scripts[ 'test-cov' ] = 'istanbul cover --dir ./reports/coverage --report lcov tape -- $(grep -irl --include=\\*.js "tape" ./test)';

		pkgJSON.devDependencies[ 'istanbul' ] = '^0.4.1';
		pkgJSON.devDependencies[ 'tap-spec' ] = '5.x.x';
		workflowPath = join( dist, '.github', 'workflows', 'test_coverage.yml' );
		writeFileSync( workflowPath, WORKFLOW_TEST_COVERAGE );
	}
	if ( existsSync( join( dist, 'examples' ) ) ) {
		workflowPath = join( dist, '.github', 'workflows', 'examples.yml' );
		writeFileSync( workflowPath, WORKFLOW_EXAMPLES );
		pkgJSON.scripts.examples = 'find examples/** -name "*.js" ! -path "examples/fixtures/**" | while read -r file; do echo ""; echo "Running example: $file"; node $file || exit 1; done';
	}
	if ( existsSync( join( dist, 'benchmark' ) ) ) {
		workflowPath = join( dist, '.github', 'workflows', 'benchmark.yml' );
		writeFileSync( workflowPath, WORKFLOW_BENCHMARK );
		pkgJSON.scripts.benchmark = 'find benchmark/** -name "*.js" ! -path "benchmark/fixtures/**" | while read -r file; do echo ""; echo "Running benchmark: $file"; node $file || exit 1; done';
	}
	writeFileSync( pkgJsonPath, JSON.stringify( pkgJSON, null, '  ' ).concat( '\n' ) );

	mdPath = join( dist, 'CONTRIBUTING.md' );
	writeFileSync( mdPath, CONTRIBUTING );
	mdPath = join( dist, 'CODE_OF_CONDUCT.md' );
	writeFileSync( mdPath, CODE_OF_CONDUCT );
	mdPath = join( dist, '.github', 'PULL_REQUEST_TEMPLATE.md' );
	writeFileSync( mdPath, replace( PULL_REQUEST_TEMPLATE, '<pkg-path>', pth ) );

	ghpagesOpts = {
		'branch': 'main',
		'dotfiles': true,
		'src': [
			'**/*',
			'!**/.cache/**'
		],
		'repo': 'https://'+ ENV.GITHUB_TOKEN + '@github.com/stdlib-js/' + replace( pkg, '/', '-' ),
		'message': 'Auto-generated commit',
		'user': {
			'name': 'stdlib-bot',
			'email': 'noreply@stdlib.io'
		},
		'history': true
	};
	if ( EXISTING_REPOS[ distPkg ] ) {
		console.log( 'Publishing '+dist+' to GitHub...' );
		ghpages.publish( dist, ghpagesOpts, clbk );
		if ( contains( argv, '--set-topics' ) ) {
			topics( 'stdlib-js/' + replace( pkg, '/', '-' ), createTopics( pkgJSON.keywords ) );
		}
	} else {
		console.log( 'Creating new remote repository: stdlib-js/'+distPkg );
		createRepo( distPkg, {
			'org': 'stdlib-js',
			'desc': pkgJSON.description,
			'homepage': 'https://github.com/stdlib-js/stdlib',
			'issues': false,
			'wiki': false,
			'projects': false,
			'private': false,
			'token': ENV.GITHUB_TOKEN,
			'allowSquashMerge': true,
			'allowRebaseMerge': false,
			'allowMergeCommit': false
		}, onRepoCreation );
	}

	/**
	* Callback invoked upon creating GitHub repository.
	*
	* @private
	* @param {(Error|null)} error - encountered error
	* @param {Object} repo - repo data
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function onRepoCreation( error, repo, info ) {
		var currentTime;
		var waitTime;
		if ( error ) {
			return console.error( error );
		}
		console.log( 'GitHub repository'+repo.full_name+' has been successfully created.' );
		console.log( 'Rate limit information: '+JSON.stringify( info ) );

		if ( contains( argv, '--set-topics' ) ) {
			topics( 'stdlib-js/' + replace( pkg, '/', '-' ), createTopics( pkgJSON.keywords ) );
		}
		if ( info.remaining === 0 ) {
			currentTime = new Date().getTime();
			waitTime = new Date( info.reset * 1000 ).getTime() - currentTime;
			ghpages.publish( dist, ghpagesOpts, withDelay );
		} else {
			ghpages.publish( dist, ghpagesOpts, clbk );
		}

		/**
		* Invokes callback for once pushing package contents to remote GitHub repository after a specified delay.
		*
		* @private
		* @param {(Error|null)} err - error object or `null`
		* @returns {void}
		*/
		function withDelay( err ) {
			if ( err ) {
				return console.log( err );
			}
			console.log( 'Waiting '+waitTime+'ms before moving to next package...' );
			setTimeout( clbk, waitTime );
		}
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var pkgsToPublish;
	var filename;
	var command;
	var opts;
	var pkg;
	var i;

	command = join( mainDir, 'lib', 'node_modules', '@stdlib', '_tools', 'scripts', 'create_ordered_pkg_list.js' );
	filename = join( tmpdir(), 'stdlib_ordered_pkg_list.json' );
	command = 'node '+command+' > '+filename;
	shell( command );

	pkgsToPublish = readJSON( filename );
	pkgsToPublish = pkgsToPublish.slice( START_PKG_INDEX, END_PKG_INDEX );
	for ( i = 0; i < pkgsToPublish.length; i++ ) {
		pkgsToPublish[ i ] = replace( pkgsToPublish[ i ], '@stdlib/', '' );
	}
	pkg = pkgsToPublish.shift();

	command = 'cd '+join( mainDir, 'node_modules', 'gh-pages', 'bin' )+'; ./gh-pages-clean.js';
	debug( 'Clean-up cached gh-pages files: '+command );
	shell( command );

	debug( 'Clean-up existing build directory...' );
	fs.rmdirSync( join( mainDir, 'build' ), {
		'recursive': true
	});

	opts = {
		'org': 'stdlib-js',
		'token': ENV.GITHUB_TOKEN
	};
	repos( opts, onRepos );

	/**
	* Callback invoked after resolving resources.
	*
	* @private
	* @param {(Error|null)} err - error object
	* @param {ObjectArray} results - query data
	* @returns {void}
	*/
	function onRepos( err, results ) {
		var i;
		if ( err ) {
			return console.error( err );
		}
		for ( i = 0; i < results.length; i++ ) {
			EXISTING_REPOS[ results[ i ].name ] = true;
		}
		publish( pkg, onCallback );
	}

	/**
	* Callback invoked once pushing package contents to remote GitHub repository.
	*
	* @private
	* @param {(Error|null)} err - error object or `null`
	* @returns {void}
	*/
	function onCallback( err ) {
		if ( err ) {
			return console.log( err );
		}
		console.log( 'Package contents successfully pushed to GitHub...' );
		pkg = pkgsToPublish.shift();
		if ( pkg ) {
			console.log( 'Now processing the following package: '+pkg );
			publish( pkg, onCallback );
		}
	}
}

main();
