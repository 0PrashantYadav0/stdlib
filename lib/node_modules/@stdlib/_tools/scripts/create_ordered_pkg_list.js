/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-sync, no-console */

'use strict';

// MODULES //

var join = require( 'path' ).join;
var writeFileSync = require( '@stdlib/fs/write-file' ).sync;
var ls = require( '@stdlib/_tools/pkgs/names' ).sync;
var namespaceDeps = require( '@stdlib/_tools/pkgs/namespace-deps' );
var CompactAdjacencyMatrix = require( '@stdlib/utils/compact-adjacency-matrix/lib/main.js' );
var indexOf = require( '@stdlib/utils/index-of' );
var contains = require( '@stdlib/assert/contains' );


// VARIABLES //

var sorted;
var pkgs;
var deps;
var mat;
var idx;
var i;
var j;


// MAIN //

pkgs = ls();
console.log( 'Number of stdlib packages: '+pkgs.length );
mat = new CompactAdjacencyMatrix( pkgs.length );

for ( i = 0; i < pkgs.length; i++ ) {
	console.log( 'Processing package: '+pkgs[ i ]+' (index: '+i+')' );
	try {
		deps = namespaceDeps( pkgs[ i ] );
		for ( j = 0; j < deps.length; j++ ) {
			idx = indexOf( pkgs, deps[ j ] );
			if ( idx !== -1 && !contains( deps[ j ], '_tools' ) ) {
				mat.addEdge( i, idx );
			}
		}
	} catch ( err ) {
		console.error( 'Encountered an error: '+err.message );
	}
}

console.log( 'Starting topological search...' );
sorted = mat.toposort();
for ( i = 0; i < sorted.length; i++ ) {
	sorted[ i ] = pkgs[ sorted[ i ] ];
}

writeFileSync( join( __dirname, './ordered.json' ), JSON.stringify( sorted, null, '  ' ).concat( '\n' ) );

