/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-object' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isURI = require( '@stdlib/assert/is-uri' );


// MAIN //

/**
* Validates function options.
*
* @param {Object} opts - destination object
* @param {Object} options - options to validate
* @param {string} options.token - Github access token
* @param {string} [options.useragent] - user agent string
* @param {string} [options.org] - organization name
* @param {string} [options.desc] - repository description
* @param {string} [options.homepage] - repository homepage
* @param {number} [options.team] - team id (organizations)
* @param {string} [options.gitignore] - .gitignore template
* @param {string} [options.license] - LICENSE template
* @param {boolean} [options.private] - boolean indicating whether a repository should be private
* @param {boolean} [options.issues] - boolean indicating whether issues should be enabled
* @param {boolean} [options.wiki] - boolean indicating whether a repository should have a wiki
* @param {boolean} [options.downloads] - boolean indicating whether downloads should be enabled
* @param {boolean} [options.init] - boolean indicating whether to initialize the repository with an empty README
* @returns {(Error|null)} error or null
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	opts.token = options.token;
	if ( !isString( opts.token ) ) {
		return new TypeError( 'invalid option. `token` option must be a string primitive. Option: `' + opts.token + '`.' );
	}
	if ( hasOwnProp( options, 'useragent' ) ) {
		opts.useragent = options.useragent;
		if ( !isString( opts.useragent ) ) {
			return new TypeError( 'invalid option. `useragent` option must be a string primitive. Option: `' + opts.useragent + '`.' );
		}
	}
	if ( hasOwnProp( options, 'org' ) ) {
		opts.org = options.org;
		if ( !isString( opts.org ) ) {
			return new TypeError( 'invalid option. `org` option must be a string primitive. Option: `' + opts.org + '`.' );
		}
	}
	if ( hasOwnProp( options, 'desc' ) ) {
		opts.desc = options.desc;
		if ( !isString( opts.desc ) ) {
			return new TypeError( 'invalid option. `desc` option must be a string primitive. Option: `' + opts.desc + '`.' );
		}
	}
	if ( hasOwnProp( options, 'homepage' ) ) {
		opts.homepage = options.homepage;
		if ( !isURI( opts.homepage ) ) {
			return new TypeError( 'invalid option. `homepage` option must be a valid URI. Option: `' + opts.homepage + '`.' );
		}
	}
	if ( hasOwnProp( options, 'team' ) ) {
		opts.team = options.team;
		if ( !isNonNegativeInteger( opts.team ) ) {
			return new TypeError( 'invalid option. `team` option must be a nonnegative integer. Option: `' + opts.team + '`.' );
		}
	}
	if ( hasOwnProp( options, 'gitignore' ) ) {
		opts.gitignore = options.gitignore;
		if ( !isString( opts.gitignore ) ) {
			return new TypeError( 'invalid option. `gitignore` option must be a string primitive. Option: `' + opts.gitignore + '`.' );
		}
	}
	if ( hasOwnProp( options, 'license' ) ) {
		opts.license = options.license;
		if ( !isString( opts.license ) ) {
			return new TypeError( 'invalid option. `license` option must be a string primitive. Option: `' + opts.license + '`.' );
		}
	}
	if ( hasOwnProp( options, 'private' ) ) {
		opts.private = options.private;
		if ( !isBoolean( opts.private ) ) {
			return new TypeError( 'invalid option. `private` option must be a boolean primitive. Option: `' + opts.private + '`.' );
		}
	}
	if ( hasOwnProp( options, 'issues' ) ) {
		opts.issues = options.issues;
		if ( !isBoolean( opts.issues ) ) {
			return new TypeError( 'invalid option. `issues` option must be a boolean primitive. Option: `' + opts.issues + '`.' );
		}
	}
	if ( hasOwnProp( options, 'wiki' ) ) {
		opts.wiki = options.wiki;
		if ( !isBoolean( opts.wiki ) ) {
			return new TypeError( 'invalid option. `wiki` option must be a boolean primitive. Option: `' + opts.wiki + '`.' );
		}
	}
	if ( hasOwnProp( options, 'downloads' ) ) {
		opts.downloads = options.downloads;
		if ( !isBoolean( opts.downloads ) ) {
			return new TypeError( 'invalid option. `downloads` option must be a boolean primitive. Option: `' + opts.downloads + '`.' );
		}
	}
	if ( hasOwnProp( options, 'init' ) ) {
		opts.init = options.init;
		if ( !isBoolean( opts.init ) ) {
			return new TypeError( 'invalid option. `init` option must be a boolean primitive. Option: `' + opts.init + '`.' );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
