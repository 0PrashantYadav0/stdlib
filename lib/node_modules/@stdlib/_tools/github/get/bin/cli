#!/usr/bin/env node
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var ENV = require( '@stdlib/process/env' );
var get = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked upon receiving a request response.
*
* @private
* @param {(Error|null)} error - error object
* @param {(Object|ObjectArray)} data - response data
* @param {Object} info - rate limit info
* @returns {void}
*/
function onResponse( error, data, info ) {
	/* eslint-disable no-console */
	if ( info ) {
		console.error( JSON.stringify( info ) );
	}
	if ( error ) {
		process.exitCode = 1;
		return console.error( 'Error: %s', error.message );
	}
	console.log( JSON.stringify( data ) );
} // end FUNCTION onResponse()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flgs;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line flags:
	flgs = cli.flags();

	opts = {};
	if ( flgs.protocol ) {
		opts.protocol = flgs.protocol;
	}
	if ( flgs.hostname ) {
		opts.hostname = flgs.hostname;
	}
	if ( flgs.port ) {
		opts.port = parseInt( flgs.port, 10 );
	}
	if ( flgs.pathname ) {
		opts.pathname = flgs.pathname;
	}
	if ( flgs.page ) {
		opts.page = parseInt( flgs.page, 10 );
	}
	if ( flgs.last_page ) {
		if ( flgs.last_page === 'last' ) {
			opts.last_page = flgs.last_page;
		} else {
			opts.last_page = parseInt( flgs.last_page, 10 );
		}
	}
	if ( flgs.per_page ) {
		opts.per_page = parseInt( flgs.per_page, 10 );
	}
	if ( flgs.query ) {
		opts.query = flgs.query;
	}
	if ( flgs.accept ) {
		opts.accept = flgs.accept;
	}
	if ( flgs.useragent ) {
		opts.useragent = flgs.useragent;
	}
	if ( flgs.token ) {
		opts.token = flgs.token;
	} else if ( ENV.GITHUB_TOKEN ) {
		opts.token = ENV.GITHUB_TOKEN;
	}

	get( opts, onResponse );
} // end FUNCTION main()

main();
