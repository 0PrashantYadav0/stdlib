/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var cheerio = require( 'cheerio' );
var objectKeys = require( '@stdlib/utils/keys' );
var substringAfter = require( '@stdlib/string/substring-after' );
var replace = require( '@stdlib/string/base/replace' );
var reWhitespace = require( '@stdlib/regexp/whitespace' );
var getOptions = require( './options.js' );
var request = require( './request.js' );
var urlpath = require( './path.js' );


// VARIABLES //

var debug = logger( 'github-dependants:resolve' );
var RE_WHITESPACE = reWhitespace({
	'flags': 'g'
});


// MAIN //

/**
* Resolves dependants.
*
* @private
* @param {Object} opts - options
* @param {Callback} clbk - callback to invoke after resolving dependants
* @returns {void}
*/
function resolve( opts, clbk ) {
	var options;
	var cache;

	options = getOptions( opts ); // request options
	options.path = urlpath( opts.pathname, opts.type );

	cache = Object.create( null ); // no prototype

	debug( 'Resolving dependants.' );
	return next();

	/**
	* Retrieves the next page.
	*
	* @private
	*/
	function next() {
		debug( 'Request path: %s', options.path );
		request( options, onResource );
	}

	/**
	* Callback invoked upon receiving an HTTP response.
	*
	* @private
	* @param {(Error|null)} error - error or null
	* @param {Object} response - HTTP response object
	* @param {string} body - response body
	* @returns {void}
	*/
	function onResource( error, response, body ) {
		var selection;
		var el;
		var $;
		var i;
		if ( error ) {
			return done( error );
		}
		$ = cheerio.load( body );
		selection = $( 'div.Box-row' );

		debug( 'Found %d dependants.', selection.length );
		if ( selection.length === 0 ) {
			return done();
		}
		selection.each( onElement );

		selection = $( 'div.paginate-container' ).find( 'a' );
		for ( i = 0; i < selection.length; i++ ) {
			el = $( selection.get( i ) );
			if ( el.text() === 'Next' ) {
				debug( 'Processing the next page of dependants.' );
				options.path = substringAfter( el.attr( 'href' ), options.hostname );
				return next();
			}
		}
		return done();

		/**
		* Callback invoked on finding a dependant.
		*
		* @private
		* @param {NonNegativeInteger} i - index
		* @param {Element} el - element
		*/
		function onElement( i, el ) {
			var d = $( el ).find( '[data-repository-hovercards-enabled]' ).text();
			d = replace( d, RE_WHITESPACE, '' );
			if ( d !== opts.slug && cache[ d ] === void 0 ) {
				cache[ d ] = true;
			}
		}
	}

	/**
	* Callback invoked upon resolving resources.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return clbk( error );
		}
		debug( 'Request completed.' );
		return clbk( null, objectKeys( cache ) );
	}
}


// EXPORTS //

module.exports = resolve;
