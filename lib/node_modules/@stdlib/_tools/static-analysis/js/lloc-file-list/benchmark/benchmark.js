'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array').primitives;
var pkg = require( './../package.json' ).name;
var analyze = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var files;
	var i;

	files = [
		__filename
	];

	i = 0;
	b.tic();

	return next();

	function next( error, o ) {
		i += 1;
		if ( error ) {
			b.fail( 'should not return an error' );
		}
		if ( i <= b.iterations ) {
			return analyze( files, next );
		}
		b.toc();
		if ( !isPlainObject( o ) ) {
			b.fail( 'should return an object' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
});

bench( pkg+':cumulative=true', function benchmark( b ) {
	var files;
	var opts;
	var i;

	files = [
		__filename
	];
	opts = {
		'cumulative': true
	};

	i = 0;
	b.tic();

	return next();

	function next( error, o ) {
		i += 1;
		if ( error ) {
			b.fail( 'should not return an error' );
		}
		if ( i <= b.iterations ) {
			return analyze( files, opts, next );
		}
		b.toc();
		if ( !isPlainObject( o ) ) {
			b.fail( 'should return an object' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
});

bench( pkg+':cumulative=false', function benchmark( b ) {
	var files;
	var opts;
	var i;

	files = [
		__filename
	];
	opts = {
		'cumulative': false
	};

	i = 0;
	b.tic();

	return next();

	function next( error, o ) {
		i += 1;
		if ( error ) {
			b.fail( 'should not return an error' );
		}
		if ( i <= b.iterations ) {
			return analyze( files, opts, next );
		}
		b.toc();
		if ( !isNonNegativeIntegerArray( o ) ) {
			b.fail( 'should return an array of nonnegative integers' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
});

bench( pkg+':sync', function benchmark( b ) {
	var files;
	var o;
	var i;

	files = [
		__filename
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		o = analyze.sync( files );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( !isPlainObject( o ) ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':sync:cumulative=true', function benchmark( b ) {
	var files;
	var opts;
	var o;
	var i;

	files = [
		__filename
	];
	opts = {
		'cumulative': true
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		o = analyze.sync( files, opts );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( !isPlainObject( o ) ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':sync:cumulative=false', function benchmark( b ) {
	var files;
	var opts;
	var o;
	var i;

	files = [
		__filename
	];
	opts = {
		'cumulative': false
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		o = analyze.sync( files, opts );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( o ) ) {
		b.fail( 'should return an array of nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
