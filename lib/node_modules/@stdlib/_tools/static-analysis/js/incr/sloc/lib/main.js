'use strict';

// MODULES //

var incrsummary = require( '@stdlib/math/stats/incr/summary' );
var sloc = require( '@stdlib/_tools/static-analysis/js/sloc' );


// MAIN //

/**
* Returns an accumulator function for incrementally computing source lines of code (SLOC).
*
* @returns {Function} accumulator function
*
* @example
* var acc = analyze();
*/
function analyze() {
	var acc = incrsummary();
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated source lines of code (SLOC) summary. If not provided a value, the accumulator function returns the current SLOC summary.
	*
	* @private
	* @param {(string|Buffer)} [input] - input program
	* @throws {TypeError} must provide either a string or Buffer
	* @returns {Object} SLOC summary
	*
	* @example
	* var sloc = accumulator();
	* // returns {}
	*
	* sloc = accumulator( '"use strict";\n\nvar y = 5;\n' );
	* // returns {...}
	*
	* sloc = accumulator( '"use strict";\n\nmodule.exports = "beep";\n' );
	* // returns {...}
	*
	* sloc = accumulator();
	* // returns {...}
	*/
	function accumulator( input ) {
		if ( arguments.length === 0 ) {
			return acc();
		}
		return acc( sloc( input ) );
	}
}


// EXPORTS //

module.exports = analyze;

