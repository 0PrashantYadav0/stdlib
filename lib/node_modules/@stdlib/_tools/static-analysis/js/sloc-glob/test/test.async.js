'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var getKeys = require( 'object-keys' ).shim();
var instanceOf = require( '@stdlib/assert/instance-of' );
var isArray = require( '@stdlib/assert/is-array' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isArrayArray = require( '@stdlib/assert/is-array-array' );
var noop = require( '@stdlib/utils/noop' );
var analyze = require( './../lib/main.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value, noop );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'cumulative': value
			};
			analyze( opts, noop );
		};
	}
});

tape( 'the function throws an error if not provided a callback argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value );
		};
	}
});

tape( 'the function throws an error if not provided a callback argument (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( {}, value );
		};
	}
});

tape( 'the function returns an error to a provided callback if an error is encountered when searching for files', function test( t ) {
	var analyze = proxyquire( './../lib/main.js', {
		'glob': glob
	});

	analyze( clbk );

	function glob() {
		var cb = arguments[ arguments.length-1 ];
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			cb( new Error( 'beep' ) );
		}
	}

	function clbk( error ) {
		t.strictEqual( instanceOf( error, Error ), true, 'returns an error' );
		t.end();
	}
});

tape( 'the function returns an error to a provided callback if an error is encountered when searching for files (options)', function test( t ) {
	var analyze = proxyquire( './../lib/main.js', {
		'glob': glob
	});

	analyze( {}, clbk );

	function glob() {
		var cb = arguments[ arguments.length-1 ];
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			cb( new Error( 'beep' ) );
		}
	}

	function clbk( error ) {
		t.strictEqual( instanceOf( error, Error ), true, 'returns an error' );
		t.end();
	}
});

tape( 'the function returns an error to a provided callback if an error is encountered when calculating SLOC', function test( t ) {
	var analyze;
	var opts;

	analyze = proxyquire( './../lib/main.js', {
		'@stdlib/_tools/static-analysis/js/sloc-file-list': mock
	});
	opts = {
		'dir': __dirname
	};
	analyze( opts, clbk );

	function mock() {
		var cb = arguments[ arguments.length-1 ];
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			cb( new Error( 'beep' ) );
		}
	}

	function clbk( error ) {
		t.strictEqual( instanceOf( error, Error ), true, 'returns an error' );
		t.end();
	}
});

tape( 'if unable to resolve source files, the function returns `null` for analysis results', function test( t ) {
	var opts = {
		'dir': join( __dirname, 'fjadlfjadsfljsdfljksdafjsdlfjasl' ) // non-existent directory
	};
	analyze( opts, clbk );

	function clbk( error, o ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( o, null, 'returns expected value' );
		}
		t.end();
	}
});

tape( 'if unable to resolve source files and the `cumulative` option is `true`, the function returns `null` for analysis results', function test( t ) {
	var opts = {
		'cumulative': true,
		'dir': join( __dirname, 'fjadlfjadsfljsdfljksdafjsdlfjasl' ) // non-existent directory
	};
	analyze( opts, clbk );

	function clbk( error, o ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( o, null, 'returns expected value' );
		}
		t.end();
	}
});

tape( 'if unable to resolve source files and the `cumulative` option is `false`, the function returns an empty array for analysis results', function test( t ) {
	var opts = {
		'cumulative': false,
		'dir': join( __dirname, 'fjadlfjadsfljsdfljksdafjsdlfjasl' ) // non-existent directory
	};
	analyze( opts, clbk );

	function clbk( error, o ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( o ), true, 'returns an array' );
			t.strictEqual( o.length, 0, 'returns an empty array' );
		}
		t.end();
	}
});

tape( 'by default, the function analyzes a file glob and returns a cumulative SLOC summary to a provided callback', function test( t ) {
	var opts = {
		'dir': __dirname
	};
	analyze( opts, clbk );

	function clbk( error, o ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isPlainObject( o ), true, 'returns a plain object' );
			t.strictEqual( getKeys( o ).length > 0, true, 'has key-value pairs' );
		}
		t.end();
	}
});

tape( 'if the `cumulative` option is `true`, the function analyzes a file glob and returns a cumulative SLOC summary to a provided callback', function test( t ) {
	var opts = {
		'dir': __dirname,
		'cumulative': true
	};
	analyze( opts, clbk );

	function clbk( error, o ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isPlainObject( o ), true, 'returns a plain object' );
			t.strictEqual( getKeys( o ).length > 0, true, 'has key-value pairs' );
		}
		t.end();
	}
});

tape( 'if the `cumulative` option is `false`, the function analyzes a file glob and returns an array of SLOC results to a provided callback', function test( t ) {
	var opts = {
		'cumulative': false,
		'dir': __dirname
	};
	analyze( opts, clbk );

	function clbk( error, o ) {
		var i;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArrayArray( o ), true, 'returns an array of arrays' );
			for ( i = 0; i < o.length; i++ ) {
				t.strictEqual( o[ i ].length, 2, 'has length 2' );
			}
		}
		t.end();
	}
});
