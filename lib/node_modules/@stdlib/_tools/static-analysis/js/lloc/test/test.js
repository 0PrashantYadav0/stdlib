'use strict';

// MODULES //

var tape = require( 'tape' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var lloc = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lloc, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string or a Buffer', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			lloc( value );
		};
	}
});

tape( 'the function returns the logical lines of code (LLOC) (string)', function test( t ) {
	var n = lloc( 'var beep = "boop";\n' );
	t.strictEqual( n, 1, 'returns expected value' );
	t.end();
});

tape( 'the function returns the logical lines of code (LLOC) (Buffer)', function test( t ) {
	var n = lloc( string2buffer( 'var beep = "boop";\nz = foo( y );\n' ) );
	t.strictEqual( n, 2, 'returns expected value' );
	t.end();
});
