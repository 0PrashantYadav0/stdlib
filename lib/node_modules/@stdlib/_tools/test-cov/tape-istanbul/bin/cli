#!/usr/bin/env node
'use strict';

// MODULES //

var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var writeFile = require( '@stdlib/fs/write-file' );
var runner = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked upon writing coverage information to file.
*
* @private
* @param {(Error|null)} error - error object
*/
function onWrite( error ) {
	if ( error ) {
		throw error;
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var out;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line options:
	flags = cli.flags();

	// Extract options...
	opts = {};
	if ( flags.dir ) {
		opts.dir = flags.dir;
	}
	if ( flags.global ) {
		opts.global = flags.global;
	}
	if ( flags.output ) {
		out = flags.output;
	} else {
		out = join( process.cwd(), 'coverage.json' );
	}
	runner( args[ 0 ], opts, done );

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} coverage - coverage information
	* @throws {Error} unexpected error
	*/
	function done( error, coverage ) {
		var opts;
		if ( error ) {
			throw error;
		}
		coverage = JSON.stringify( coverage );
		opts = {
			'encoding': 'utf8'
		};
		writeFile( out, coverage, opts, onWrite );
	}
}

main();
