#!/usr/bin/env node
'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/utils/read-stdin' );
var isString = require( '@stldib/assert/is-string' ).isPrimitive;
var bundle = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked after generating a bundle.
*
* @private
* @param {(Error|null)} error - error object
* @param {(string|Buffer)} bundle - bundle
* @returns {void}
*/
function done( error, bundle ) {
	if ( error ) {
		process.exitCode = 1;
		return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
	}
	console.log( bundle.toString() ); // eslint-disable-line no-console
} // end FUNCTION done()


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var opts;
	var args;
	var cli;
	var str;
	var err;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './opts.json' ),
		'help': readFileSync( join( __dirname, 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});
	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line options:
	flags = cli.flags();

	// Extract options...
	opts = {};
	if ( flags[ 'export-name' ] ) {
		opts.exportName = flags[ 'export-name' ];
	}
	if ( flags.transform ) {
		if ( isString( flags.transform ) ) {
			opts.transforms = [ flags.transform ];
		} else {
			opts.transforms = flags.transform;
		}
	}
	if ( flags.plugin ) {
		if ( isString( flags.plugin ) ) {
			opts.plugins = [ flags.plugin ];
		} else {
			opts.plugins = flags.plugin;
		}
	}
	if ( flags.external ) {
		if ( isString( flags.external ) ) {
			opts.external = [ flags.external ];
		} else {
			opts.external = flags.external;
		}
	}
	// Check if we are receiving data from `stdin`...
	if ( !process.stdin.isTTY ) {
		return stdin( onData );
	}
	str = args[ 0 ];
	if ( str === '' ) {
		err = new Error( 'no input. Must provide a string to bundle as a command-line argument or via `stdin`.' );
		process.exitCode = 1;
		return console.error( 'Error: %s', err.message ); // eslint-disable-line no-console
	}
	process.nextTick( next );

	/**
	* Callback invoked after attempting to read data from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - `stdin` data
	* @returns {void}
	*/
	function onData( error, data ) {
		if ( error ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
		}
		str = data.toString();
		if ( str === '' ) {
			error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message ); // eslint-disable-line no-console
		}
		next();
	} // end FUNCTION onData()

	/**
	* Callback invoked once ready to bundle.
	*
	* @private
	*/
	function next() {
		bundle( str, opts, done );
	} // end FUNCTION next()
} // end FUNCTION main()

main();
