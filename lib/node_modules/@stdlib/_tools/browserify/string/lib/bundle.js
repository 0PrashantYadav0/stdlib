'use strict';

// MODULES //

var debug = require( 'debug' )( 'browserify:string' );
var writeFile = require( 'fs' ).writeFile;
var rmfile = require( 'fs' ).unlink;
var join = require( 'path' ).join;
var browserify = require( 'browserify' );
var isFunction = require( '@stdlib/assert/is-function' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var tmpdir = require( '@stdlib/utils/tmpdir' );


// VARIABLES //

var tmpfile = join( tmpdir(), '.__browserify-string-tmp-file.js' );


// MAIN //

/**
* Generates a bundle from a string using `browserify`.
*
* @param {string} str - input string
* @param {string} [dest] - output file path
* @param {Options} [options] - browserify options
* @param {string} [options.exportName] - bundle target name
* @param {Callback} clbk - callback to invoke after creating a bundle
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} the output file path must be a string primitive
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} last argument must be a function
*
* @example
* var str = 'module.exports = require( "@stdlib/_tools/browserify/string" );';
*
* bundle( str, clbk );
*
* function clbk( error, bundle ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( bundle.toString() );
* }
*/
function bundle( str, dest, options, clbk ) {
	var nargs;
	var opts;
	var out;
	var cb;

	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `'+str+'`.' );
	}
	nargs = arguments.length;
	if ( nargs === 2 ) {
		opts = {};
		cb = dest;
	} else if ( nargs >= 4 ) {
		if ( !isString( dest ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be a string primitive. Value: `'+dest+'`.' );
		}
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		opts = options;
		out = dest;
		cb = clbk;
	} else if ( isString( dest ) ) {
		opts = {};
		cb = options;
	} else {
		if ( !isObject( dest ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `'+dest+'`.' );
		}
		opts = dest;
		cb = options;
	}
	if ( hasOwnProp( opts, 'exportName' ) && !isString( opts.exportName ) ) {
		throw new TypeError( 'invalid option. `exportName` option must be a string. Option: `'+opts.exportName+'`.' );
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( 'invalid input argument. Last argument must be a function. Value: `'+cb+'`.' );
	}
	debug( 'Browserify options: %s', JSON.stringify( opts ) );

	writeFile( tmpfile, str, onTmpFile );

	/**
	* Callback invoked upon generating a temporary file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function onTmpFile( error ) {
		var b;
		if ( error ) {
			debug( 'Encountered an error when creating a temporary file: %s', error.message );
			return done( error );
		}
		if ( opts.exportName ) {
			b = browserify( opts );
			b.require( tmpfile, {
				'expose': opts.exportName
			});
		} else {
			b = browserify( tmpfile, opts );
		}
		debug( 'Creating a bundle...' );
		b.bundle( onBundle );
	} // end FUNCTION onTmpFile()

	/**
	* Callback invoked upon creating a bundle.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} bundle - bundle
	* @returns {void}
	*/
	function onBundle( error, bundle ) {
		var opts;
		if ( error ) {
			debug( 'Encountered an error when creating a bundle: %s', error.message );
			return done( error );
		}
		debug( 'Successfully created a bundle.' );
		if ( out === void 0 ) {
			return done( null, bundle );
		}
		debug( 'Writing bundle to file...' );
		opts = {
			'encoding': 'utf8'
		};
		writeFile( out, bundle, opts, onWrite );
	} // end FUNCTION onBundle()

	/**
	* Callback invoked upon writing a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function onWrite( error ) {
		if ( error ) {
			debug( 'Encountered an error when writing bundle to file: %s', error.message );
			return done( error );
		}
		debug( 'Successfully wrote bundle to file.' );
		done();
	} // end FUNCTION onWrite()

	/**
	* Callback invoked upon removing a temporary file.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function onDelete( error ) {
		if ( error ) {
			debug( 'Encountered an error when deleting temporary file: %s', error.message );
			return console.error( 'WARNING: encountered an error when deleting temporary file. Error: %s', error.message ); // eslint-disable-line no-console
		}
		debug( 'Successfully deleted temporary file.' );
	} // end FUNCTION onDelete()

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} [error] - error object
	* @param {(string|Buffer)} [bundle] - bundle
	* @returns {void}
	*/
	function done( error, bundle ) {
		debug( 'Deleting temporary file...' );
		rmfile( tmpfile, onDelete );
		if ( error ) {
			return cb( error );
		}
		debug( 'Finished.' );
		if ( bundle ) {
			return cb( null, bundle );
		}
		cb();
	} // end FUNCTION done()
} // end FUNCTION bundle()


// EXPORTS //

module.exports = bundle;
