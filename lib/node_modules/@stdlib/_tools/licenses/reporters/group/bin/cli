#!/usr/bin/env node
'use strict';

// MODULES //

var join = require( 'path' ).join;
var getKeys = require( 'object-keys' ).shim();
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/process/read-stdin' );
var reporter = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked after reading `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {string} data - data
* @throws {Error} unexpected error
*/
function onRead( error, data ) {
	/* eslint-disable no-console */
	var results;
	var keys;
	var ids;
	var key;
	var sym;
	var i;
	var j;
	if ( error ) {
		throw error;
	}
	data = data.toString().split( /\r?\n/g );
	results = [];
	for ( i = 0; i < data.length; i++ ) {
		if ( data[ i ] ) {
			results.push( JSON.parse( data[ i ] ) );
		}
	}
	results = reporter( results );
	keys = getKeys( results );
	if ( keys.length ) {
		console.log( '\nPackage licenses:\n' );
		for ( i = 0; i < keys.length; i++ ) {
			key = keys[ i ];
			ids = results[ key ];
			console.log( '%s:', key );
			for ( j = 0; j < ids.length; j++ ) {
				if ( j < ids.length-1 ) {
					sym = '├──';
				} else {
					sym = '└──';
				}
				console.log( '%s %s', sym, ids[ j ] );
			}
			console.log( '' );
		}
	}

	/* eslint-enable no-console */
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	// Create a command-line interface:
	var cli = new CLI({ // eslint-disable-line no-unused-vars
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});
	stdin( 'utf8', onRead );
}

main();
