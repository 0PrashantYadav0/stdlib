'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );
var pkg = require( './../package.json' ).name;
var RE_FILENAME = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var out;
	var str;
	var i;

	if ( IS_WINDOWS ) {
		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			str = 'C:\\foo\\bar\\beep\\boop'+String.fromCharCode( 97 + (i%26) )+'.js';
			out = RE_FILENAME.exec( str );
			if ( !out || !out.length ) {
				b.fail( 'should split a filename' );
			}
		}
		b.toc();
	} else {
		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			str = '/foo/bar/beep/boop'+String.fromCharCode( 97 + (i%26) )+'.js';
			out = RE_FILENAME.exec( str );
			if ( !out || !out.length ) {
				b.fail( 'should split a filename' );
			}
		}
		b.toc();
	}
	if ( !out || !out.length ) {
		b.fail( 'should split a filename' );
	} else {
		b.pass( 'benchmark finished' );
	}
	b.end();
});

bench( pkg+':posix', function benchmark( b ) {
	var out;
	var str;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = '/foo/bar/beep/boop'+String.fromCharCode( 97 + (i%26) )+'.js';
		out = RE_FILENAME.posix.exec( str );
		if ( !out || !out.length ) {
			b.fail( 'should split a filename' );
		}
	}
	b.toc();
	if ( !out || !out.length ) {
		b.fail( 'should split a filename' );
	} else {
		b.pass( 'benchmark finished' );
	}
	b.end();
});

bench( pkg+':win32', function benchmark( b ) {
	var out;
	var str;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = 'C:\\foo\\bar\\beep\\boop'+String.fromCharCode( 97 + (i%26) )+'.js';
		out = RE_FILENAME.win32.exec( str );
		if ( !out || !out.length ) {
			b.fail( 'should split a filename' );
		}
	}
	b.toc();
	if ( !out || !out.length ) {
		b.fail( 'should split a filename' );
	} else {
		b.pass( 'benchmark finished' );
	}
	b.end();
});
