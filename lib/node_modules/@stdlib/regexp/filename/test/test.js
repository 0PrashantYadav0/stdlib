'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var RE_FILENAME = require( './../lib' );


// TESTS //

tape( 'main export is a regular expression', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( RE_FILENAME instanceof RegExp, true, 'main export is a regular expression' );
	t.end();
});

tape( 'attached to main export is a regular expression for POSIX paths', function test( t ) {
	t.strictEqual( RE_FILENAME.posix instanceof RegExp, true, '`posix` export is a regular expression' );
	t.end();
});

tape( 'attached to main export is a regular expression for Windows paths', function test( t ) {
	t.strictEqual( RE_FILENAME.win32 instanceof RegExp, true, '`win32` export is a regular expression' );
	t.end();
});

tape( 'the main export is a POSIX specific regular expression if on a POSIX platform', function test( t ) {
	var RE_FILENAME;

	RE_FILENAME = proxyquire( './../lib', {
		'@stdlib/assert/is-windows': false
	});

	t.strictEqual( RE_FILENAME.toString(), RE_FILENAME.posix.toString(), 'main export is `posix` regexp: '+RE_FILENAME.toString() );
	t.end();
});

tape( 'the main export is a Windows specific regular expression if on a Windows platform', function test( t ) {
	var RE_FILENAME;

	RE_FILENAME = proxyquire( './../lib', {
		'@stdlib/assert/is-windows': true
	});

	t.strictEqual( RE_FILENAME.toString(), RE_FILENAME.win32.toString(), 'main export is `win32` regexp: '+RE_FILENAME.toString() );
	t.end();
});

tape( 'the `posix` regular expression splits POSIX filenames', function test( t ) {
	var expected;
	var values;
	var parts;
	var i;

	values = [
		'index.js',
		'/foo/bar/home.html'
	];

	expected = [
		[ 'index.js', '', '', 'index.js', '.js' ],
		[ '/foo/bar/home.html', '/', 'foo/bar/', 'home.html', '.html' ]
	];

	for ( i = 0; i < values.length; i++ ) {
		parts = RE_FILENAME.posix.exec( values[ i ] );
		t.deepEqual( parts.slice(), expected[ i ], values[ i ] );
	}
	t.end();
});

tape( 'the `win32` regular expression splits Windows filenames', function test( t ) {
	var expected;
	var values;
	var parts;
	var i;

	values = [
		'index.js',
		'C:\\foo\\bar\\home.html'
	];

	expected = [
		[ 'index.js', '', '', '', 'index.js', '.js' ],
		[ 'C:\\foo\\bar\\home.html', 'C:', '\\', 'foo\\bar\\', 'home.html', '.html' ]
	];

	for ( i = 0; i < values.length; i++ ) {
		parts = RE_FILENAME.win32.exec( values[ i ] );
		t.deepEqual( parts.slice(), expected[ i ], values[ i ] );
	}
	t.end();
});
