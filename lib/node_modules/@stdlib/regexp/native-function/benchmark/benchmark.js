'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var RE_NATIVE_FUNCTION = require( './../lib' );


// VARIABLES //

var fcn2str = Function.prototype.toString;


// MAIN //

bench( pkg, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		fcn2str.call( benchmark ),
		fcn2str.call( bench ),
		fcn2str.call( isBoolean ),
		fcn2str.call( Math.sqrt ),
		fcn2str.call( Date ),
		fcn2str.call( RegExp ),
		fcn2str.call( b.fail ),
		fcn2str.call( b.tic ),
		fcn2str.call( b.toc ),
		fcn2str.call( b.end )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = RE_NATIVE_FUNCTION.test( values[ i%values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});
