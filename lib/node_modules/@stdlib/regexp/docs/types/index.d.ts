/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/* tslint:disable:max-line-length */
/* tslint:disable:max-file-line-count */

import reBasename = require( '@stdlib/regexp/basename' );
import reBasenamePosix = require( '@stdlib/regexp/basename-posix' );
import reBasenameWindows = require( '@stdlib/regexp/basename-windows' );
import reColorHexadecimal = require( '@stdlib/regexp/color-hexadecimal' );
import reDecimalNumber = require( '@stdlib/regexp/decimal-number' );
import reDirname = require( '@stdlib/regexp/dirname' );
import reDirnamePosix = require( '@stdlib/regexp/dirname-posix' );
import reDirnameWindows = require( '@stdlib/regexp/dirname-windows' );
import reEOL = require( '@stdlib/regexp/eol' );
import reExtendedLengthPath = require( '@stdlib/regexp/extended-length-path' );
import reExtname = require( '@stdlib/regexp/extname' );
import reExtnamePosix = require( '@stdlib/regexp/extname-posix' );
import reExtnameWindows = require( '@stdlib/regexp/extname-windows' );
import reFilename = require( '@stdlib/regexp/filename' );
import reFilenamePosix = require( '@stdlib/regexp/filename-posix' );
import reFilenameWindows = require( '@stdlib/regexp/filename-windows' );
import reFunctionName = require( '@stdlib/regexp/function-name' );
import reNativeFunction = require( '@stdlib/regexp/native-function' );
import reRegExp = require( '@stdlib/regexp/regexp' );
import reUncPath = require( '@stdlib/regexp/unc-path' );
import reUtf16SurrogatePair = require( '@stdlib/regexp/utf16-surrogate-pair' );
import reUtf16UnpairedSurrogate = require( '@stdlib/regexp/utf16-unpaired-surrogate' );
import reWhitespace = require( '@stdlib/regexp/whitespace' );

/**
* Interface describing the `regexp` namespace.
*/
interface REGEXP {
	/**
	* Returns a regular expression to capture the last part of a path.
	*
	* @param platform - path platform (`win32` or `posix`)
	* @returns regular expression
	*
	* @example
	* var RE_BASENAME = reBasename();
	* // returns <RegExp>
	*
	* @example
	* var RE_BASENAME = reBasename( 'posix' );
	* var base = RE_BASENAME.exec( '/foo/bar/index.js' )[ 1 ];
	* // returns 'index.js'
	*
	* @example
	* var RE_BASENAME = reBasename( 'win32' );
	* var base = RE_BASENAME.exec( 'C:\\foo\\bar\\index.js' )[ 1 ];
	* // returns 'index.js'
	*/
	reBasename: typeof reBasename;

	/**
	* Returns a regular expression to capture the last part of a POSIX path.
	*
	* @returns regular expression
	*
	* @example
	* var RE_BASENAME_POSIX = reBasenamePosix();
	* var base = RE_BASENAME_POSIX.exec( 'foo/bar/index.js' )[ 1 ];
	* // returns 'index.js'
	*
	* @example
	* var base = reBasenamePosix.REGEXP.exec( 'foo/bar/index.js' )[ 1 ]
	* // returns 'index.js'
	*/
	reBasenamePosix: typeof reBasenamePosix;

	/**
	* Returns a regular expression to capture a Windows path basename.
	*
	* @returns regular expression
	*
	* @example
	* var RE_BASENAME_WINDOWS = reBasenameWindows();
	*
	* var bool = RE_BASENAME_WINDOWS.test( '\\\\?\\C:\\foo\\bar' );
	* // returns true
	*
	* @example
	* var match = reBasenameWindows.REGEXP.exec( 'foo\\file.pdf' )[ 1 ];
	* // returns 'file.pdf'
	*/
	reBasenameWindows: typeof reBasenameWindows;

	/**
	* Returns a regular expression to match a hexadecimal color.
	*
	* @param mode - color format  (`full`, `shorthand`, or `either`)
	* @returns regular expression
	*
	* @example
	* var RE = reColorHexadecimal();
	* // returns <RegExp>
	*
	* var bool = RE.test( 'ffffff' );
	* // returns true
	*
	* bool = RE.test( '000' );
	* // returns false
	*
	* @example
	* var bool = reColorHexadecimal.REGEXP.test( 'ffffff' );
	* // returns true
	*/
	reColorHexadecimal: typeof reColorHexadecimal;

	/**
	* Returns a regular expression to match a decimal number.
	*
	* @param options - function options
	* @param options.flags - regular expression flags (default: '')
	* @param options.capture - boolean indicating whether to create a capture group for the match (default: false)
	* @returns regular expression
	*
	* @example
	* var RE_DECIMAL_NUMBER = reDecimalNumber();
	*
	* var bool = RE_DECIMAL_NUMBER.test( 'beep 1.0 boop' );
	* // returns true
	*
	* @example
	* var RE_DECIMAL_NUMBER = reDecimalNumber({
	*     'flags': 'gm'
	* });
	* var bool = RE_DECIMAL_NUMBER.test( 'beep 1.0 boop' );
	* // returns true
	*
	* @example
	* var bool = reDecimalNumber.REGEXP.test( '2:3' );
	* // returns false
	*/
	reDecimalNumber: typeof reDecimalNumber;

	/**
	* Returns a regular expression to capture a path dirname.
	*
	* @param platform - path platform (`win32` or `posix`)
	* @returns regular expression
	*
	* @example
	* var RE_DIRNAME = reDirname();
	* // returns <RegExp>
	*
	* @example
	* var RE_DIRNAME = reDirname( 'posix' );
	* var dir = RE_DIRNAME.exec( '/foo/bar/index.js' )[ 1 ];
	* // returns '/foo/bar/'
	*
	* @example
	* var RE_DIRNAME = reDirname( 'win32' );
	* var dir = RE_DIRNAME.exec( 'C:\\foo\\bar\\index.js' )[ 1 ];
	* // returns 'C:\\foo\\bar'
	*/
	reDirname: typeof reDirname;

	/**
	* Returns a regular expression to capture a POSIX path dirname.
	*
	* @returns regular expression
	*
	* @example
	* var RE_DIRNAME_POSIX = reDirnamePosix();
	* var dir = RE_DIRNAME_POSIX.exec( 'foo/bar/index.js' )[ 1 ];
	* // returns 'foo/bar'
	*
	* @example
	* var dir = reDirnamePosix.REGEXP.exec( 'foo/bar/index.js' )[ 1 ];
	* // returns 'foo/bar'
	*/
	reDirnamePosix: typeof reDirnamePosix;

	/**
	* Returns a regular expression to capture a Windows path dirname.
	*
	* @returns regular expression
	*
	* @example
	* var RE_DIRNAME_WINDOWS = reDirnameWindows();
	* var dir = RE_DIRNAME_WINDOWS.exec( 'foo\\bar\\index.js' )[ 1 ];
	* // returns 'foo\\bar'
	*
	* @example
	* var dir = reDirnameWindows.REGEXP.exec( 'foo\\bar\\index.js' )[ 1 ];
	* // returns 'foo\\bar'
	*/
	reDirnameWindows: typeof reDirnameWindows;

	/**
	* Returns a regular expression to match a newline character sequence.
	*
	* @param options - function options
	* @param options.flags - regular expression flags (default: '')
	* @param options.capture - boolean indicating whether to create a capture group for the match (default: false)
	* @returns regular expression
	*
	* @example
	* var RE_EOL = reEOL();
	*
	* var bool = RE_EOL.test( '\n' );
	* // returns true
	*
	* bool = RE_EOL.test( '\\r\\n' );
	* // returns false
	*
	* @example
	* var replace = require( `@stdlib/string/replace` );
	*
	* var RE_EOL = reEOL({
	*     'flags': 'g'
	* });
	* var str = '1\n2\n3';
	* var out = replace( str, RE_EOL, '' );
	* // returns '123'
	*
	* @example
	* var bool = reEOL.REGEXP.test( '\r\n' );
	* // returns true
	*/
	reEOL: typeof reEOL;

	/**
	* Returns a regular expression to test if a string is an extended-length path.
	*
	* @returns regular expression
	*
	* @example
	* var RE_EXTENDED_LENGTH_PATH = reExtendedLengthPath();
	*
	* var bool = RE_EXTENDED_LENGTH_PATH.test( '\\\\?\\C:\\foo\\bar' );
	* // returns true
	*
	* @example
	* var bool = reExtendedLengthPath.REGEXP.test( 'C:\\foo\\bar' );
	* // returns false
	*/
	reExtendedLengthPath: typeof reExtendedLengthPath;

	/**
	* Returns a regular expression to capture a filename extension.
	*
	* @param platform - path platform (`win32` or `posix`)
	* @returns regular expression
	*
	* @example
	* var RE_EXTNAME = reExtname();
	* // returns <RegExp>
	*
	* @example
	* var RE_EXTNAME = reExtname( 'posix' );
	* var dir = RE_EXTNAME.exec( '/foo/bar/index.js' )[ 1 ];
	* // returns '.js'
	*
	* @example
	* var RE_EXTNAME = reExtname( 'win32' );
	* var dir = RE_EXTNAME.exec( 'C:\\foo\\bar\\index.js' )[ 1 ];
	* // returns '.js'
	*/
	reExtname: typeof reExtname;

	/**
	* Returns a regular expression to capture a POSIX filename extension.
	*
	* @returns regular expression
	*
	* @example
	* var RE_EXTNAME_POSIX = reExtnamePosix();
	* var ext = RE_EXTNAME_POSIX.exec( 'index.js' )[ 1 ];
	* // returns '.js'
	*
	* @example
	* var ext = reExtnamePosix.REGEXP.exec( 'index.js' )[ 1 ];
	* // returns '.js'
	*/
	reExtnamePosix: typeof reExtnamePosix;

	/**
	* Returns a regular expression to capture a Windows filename extension.
	*
	* @returns regular expression
	*
	* @example
	* var RE_EXTNAME_WINDOWS = reExtnameWindows();
	* var ext = RE_EXTNAME_WINDOWS.exec( 'index.js' )[ 1 ];
	* // returns '.js'
	*
	* @example
	* var ext = reExtnameWindows.REGEXP.exec( 'C:\\foo\\bar\\index.js' )[ 1 ];
	* // returns '.js'
	*/
	reExtnameWindows: typeof reExtnameWindows;

	/**
	* Returns a regular expression to split a filename.
	*
	* @param platform - path platform (`win32` or `posix`)
	* @returns regular expression
	*
	* @example
	* var RE_FILENAME = reFilename();
	* // returns <RegExp>
	*
	* @example
	* var RE_FILENAME = reFilename( 'posix' );
	* var parts = RE_FILENAME.exec( '/foo/bar/index.js' )[ 1 ];
	* // returns [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]
	*
	* @example
	* var RE_FILENAME = reFilename( 'win32' );
	* var parts = RE_FILENAME.exec( 'C:\\foo\\bar\\index.js' )[ 1 ];
	* // returns [ 'C:\\foo\\bar\\index.js', 'C:', '\\', 'foo\\bar\\', 'index.js', '.js' ]
	*/
	reFilename: typeof reFilename;

	/**
	* Returns a regular expression to split a POSIX filename.
	*
	* @returns regular expression
	*
	* @example
	* var RE_FILENAME_POSIX = reFilenamePosix();
	* var parts = RE_FILENAME_POSIX.exec( '/foo/bar/index.js' ).slice();
	* // returns [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]
	*
	* @example
	* var parts = reFilenamePosix.REGEXP.exec( '/foo/bar/index.js' ).slice();
	* // returns [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]
	*/
	reFilenamePosix: typeof reFilenamePosix;

	/**
	* Returns a regular expression to split a Windows filename.
	*
	* @returns regular expression
	*
	* @example
	* var RE_FILENAME_WINDOWS = reFilenameWindows();
	* var parts = RE_FILENAME_WINDOWS.exec( 'C:\\foo\\bar\\index.js' ).slice();
	* // returns [ 'C:\\foo\\bar\\index.js', 'C:', '\\', 'foo\\bar\\', 'index.js', '.js' ]
	*
	* @example
	* var parts = reFilenameWindows.REGEXP.exec( 'C:\\foo\\bar\\index.js' ).slice();
	* // returns [ 'C:\\foo\\bar\\index.js', 'C:', '\\', 'foo\\bar\\', 'index.js', '.js' ]
	*/
	reFilenameWindows: typeof reFilenameWindows;

	/**
	* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
	*
	* @returns regular expression
	*
	* @example
	* var RE_FUNCTION_NAME = reFunctionName();
	* function beep() {
	*     return 'boop';
	* }
	*
	* var str = RE_FUNCTION_NAME.exec( beep.toString() )[ 1 ];
	* // returns 'beep'
	*
	* @example
	* var str = reFunctionName.REGEXP.exec( Math.sqrt.toString() )[ 1 ];
	* // returns 'sqrt'
	*/
	reFunctionName: typeof reFunctionName;

	/**
	* Returns a regular expression to match a native function.
	*
	* @returns regular expression
	*
	* @example
	* var RE_NATIVE_FUNCTION = reNativeFunction();
	* var bool = RE_NATIVE_FUNCTION.test( Date.toString() );
	* // returns true
	*
	* @example
	* var bool = reNativeFunction.REGEXP.test( Date.toString() );
	* // returns true
	*/
	reNativeFunction: typeof reNativeFunction;

	/**
	* Returns a regular expression to parse a regular expression string.
	*
	* @returns regular expression
	*
	* @example
	* var RE_REGEXP = reRegExp();
	*
	* var bool = RE_REGEXP.test( '/^beep$/' );
	* // returns true
	*
	* bool = RE_REGEXP.test( '' );
	* // returns false
	*
	* @example
	* var bool = reRegExp.REGEXP.test( '/^beep$/' );
	* // returns true
	*/
	reRegExp: typeof reRegExp;

	/**
	* Returns a regular expression to parse a UNC path.
	*
	* @returns regular expression
	*
	* @example
	* var RE_UNC_PATH = reUncPath();
	* var bool = RE_UNC_PATH.test( '\\\\server\\share' );
	* // returns true
	*
	* bool = RE_UNC_PATH.test( 'C:\\foo\\bar\\baz' );
	* // returns false
	*
	* @example
	* var parts = reUncPath.REGEXP.exec( '\\\\server\\share\\foo\\bar\\baz' )[ 1 ];
	* // returns 'server'
	*/
	reUncPath: typeof reUncPath;

	/**
	* Returns a regular expression to match a UTF-16 surrogate pair.
	*
	* @returns regular expression
	*
	* @example
	* var RE_UTF16_SURROGATE_PAIR = reUtf16SurrogatePair();
	*
	* var bool = RE_UTF16_SURROGATE_PAIR.test( '\uD800\uDC00' );
	* // returns true
	*
	* bool = RE_UTF16_SURROGATE_PAIR.test( 'abc\uD800\uDC00def' );
	* // returns true
	*
	* bool = RE_UTF16_SURROGATE_PAIR.test( 'abc' );
	* // returns false
	*/
	reUtf16SurrogatePair: typeof reUtf16SurrogatePair;

	/**
	* Returns a regular expression to match a UTF-16 unpaired surrogate.
	*
	* @returns regular expression
	*
	* @example
	* var RE_UTF16_UNPAIRED_SURROGATE = reUtf16UnpairedSurrogate();
	*
	* var bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\uD800' );
	* // returns true
	*
	* bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\uDC00' );
	* // returns true
	*
	* bool = RE_UTF16_UNPAIRED_SURROGATE.test( 'abc' );
	* // returns false
	*/
	reUtf16UnpairedSurrogate: typeof reUtf16UnpairedSurrogate;

	/**
	* Returns a regular expression to match a white space character.
	*
	* @param options - function options
	* @param options.flags - regular expression flags (default: '')
	* @param options.capture - boolean indicating whether to wrap the regular expression matching a white space character with a capture group (default: false)
	* @returns regular expression
	*
	* @example
	* var RE_WHITESPACE = reWhitespace();
	*
	* var bool = RE_WHITESPACE.test( ' ' );
	* // returns true
	*
	* @example
	* var RE_WHITESPACE = reWhitespace({
	*     'flags': 'gm'
	* });
	*
	* var bool = RE_WHITESPACE.test( '\t' );
	* // returns true
	*
	* @example
	* var bool = reWhitespace.REGEXP.test( 'a' );
	* // returns false
	*/
	reWhitespace: typeof reWhitespace;
}

/**
* Standard library regular expressions.
*/
declare var regexp: REGEXP;


// EXPORTS //

export = regexp;
