'use strict';

/**
* Regular expression to match a UTF-16 unpaired surrogate.
*
* @module @stdlib/regexp/utf16-unpaired-surrogate
* @type {RegExp}
*
* @example
* var RE_UTF16_UNPAIRED_SURROGATE = require( '@stdlib/regexp/utf16-unpaired-surrogate' );
*
* var bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\uD800' );
* // returns true
*
* bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\uDC00' );
* // returns true
*
* bool = RE_UTF16_UNPAIRED_SURROGATE.test( 'abc' );
* // returns false
*/


// MAIN //

/**
* Matches an unpaired UTF-16 surrogate.
*
* Regular expression: `/(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/`
*
* * `(?:[^\uD800-\uDBFF]|^)`
*   - capture but do not remember anything which is not a high surrogate, including nothing
* * `[\uDC00-\uDFFF]`
*   - match a low surrogate
* * `|`
*   - OR
* * `[\uD800-\uDBFF]`
*   - match a high surrogate
* * `(?![\uDC00-\uDFFF])`
*   - but only accept the previous match if not followed by a low surrogate
*
*
* @constant
* @type {RegExp}
* @default /(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/
*/
var RE_UTF16_UNPAIRED_SURROGATE = /(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/; // eslint-disable-line id-length


// EXPORTS //

module.exports = RE_UTF16_UNPAIRED_SURROGATE;
