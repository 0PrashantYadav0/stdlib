'use strict';
/* eslint-disable guard-for-in */

// MODULES //

var isCapitalized = require( '@stdlib/assert/is-capitalized' );
var uncapitalize = require( '@stdlib/string/uncapitalize' );
var capitalize = require( '@stdlib/string/capitalize' );
var tokenize = require( '@stdlib/nlp/tokenize' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var CONTRACTIONS = require( './contractions.json' );


// MAIN //

/**
* Expands all contractions to their formal equivalents.
*
* @param {string} str - string to convert
* @throws {TypeError} must provide a primitive string
* @returns {string} string with expanded contractions
*
* @example
* var str = 'I won\'t be able to get y\'all out of this one.';
* var out = expandContractions( str );
* // returns 'I will not be able to get you all out of this one.'
*
* @example
* var str = 'It oughtn't to be my fault, because, you know, I didn't know';
* var out = expandContractions( str );
* // returns 'It ought not to be my fault, because, you know, I did not know'
*/
function expandContractions( str ) {
	var tokens;
	var token;
	var out;
	var key;
	var i;
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. Must provide a primitive string. Value: `'+str+'`.' );
	}
	out = '';
	tokens = tokenize( str, true );
	for ( i = 0; i < tokens.length; i++ ) {
		token = tokens[ i ];
		if ( isCapitalized( token ) ) {
			for ( key in CONTRACTIONS ) {
				if ( uncapitalize( token ) === key ) {
					token = capitalize( CONTRACTIONS[ key ] );
					break;
				}
			}
		}
		else {
			for ( key in CONTRACTIONS ) {
				if ( token === key ) {
					token = CONTRACTIONS[ key ];
					break;
				}
			}
		}
		out += token;
	}
	return out;
} // end FUNCTION expandContractions()


// EXPORTS //

module.exports = expandContractions;
