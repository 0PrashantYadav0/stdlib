'use strict';

// MODULES //

var tape = require( 'tape' );
var expandContractions = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof expandContractions, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a primitive string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			expandContractions( value );
		};
	}
});

tape( 'the function expands contractions to their formal equivalents', function test( t ) {
	var expected;
	var values;
	var actual;
	var i;

	values = [
		'I won\'t be able to, sorry.',
		'Y\'all\'d be surprised if you know what I\'ll do.',
		'She\'ll be coming around the mountain...',
		'Y\'all\'d\'ve come to the park if y\'all could\'ve, right?',
		'If Parker hadn\'t been sent off for a foul, they\'d\'ve won.'
	];
	expected = [
		'I will not be able to, sorry.',
		'You all would be surprised if you know what I will do.',
		'She will be coming around the mountain...',
		'You all would have come to the park if you all could have, right?',
		'If Parker had not been sent off for a foul, they would have won.'
	];
	for ( i = 0; i < values.length; i++ ) {
		actual = expandContractions( values[i] );
		t.equal( actual, expected[i], 'converts string to '+expected[i] );
	}
	t.end();
});
