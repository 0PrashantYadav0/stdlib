'use strict';

// MODULES //

var isPositive = require( '@stdlib/utils/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-object' ); // TODO: is-plain-object


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveNumber} [options.alpha] - Dirichlet hyper-parameter of topic vector theta:
* @param {PositiveNumber} [options.beta] - Dirichlet hyper-parameter for word vector phi
* @returns {(Error|null)} null or an error object
*
*
* @example
* var opts = {};
* var options = {};
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( options.hasOwnProperty( 'alpha' ) ) {
		opts.alpha = options.alpha;
		if ( !isPositive( opts.alpha ) ) {
			return new TypeError( 'invalid option. `alpha` option must be a positive number. Option: `' + opts.alpha + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'beta' ) ) {
		opts.beta = options.beta;
		if ( !isPositive( opts.beta ) ) {
			return new TypeError( 'invalid option. `beta` option must be a positive number. Option: `' + opts.beta + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
