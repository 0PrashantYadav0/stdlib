/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable stdlib/empty-line-before-comment */

'use strict';

// MAIN //

/**
* Returns an object mapping supported dtypes to integer values for purposes of C inter-operation.
*
* ## Notes
*
* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.
* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects. While certain dtypes, such as "generic" and "binary", have special behavior in JavaScript, they do not have a direct complement in C.
*
* @returns {Object} object mapping supported dtypes to integer values
*
* @example
* var table = enumerated();
* // returns <Object>
*/
function enumerated() {
	// NOTE: the following should match the C `dtypes.h` enumeration!!!!
	return {
		// 'BOOL': 0, // uncomment once supported

		'INT8': 0,
		'UINT8': 1,
		'INT16': 2,
		'UINT16': 3,
		'INT32': 4,
		'UINT32': 5,
		'INT64': 6,
		'UINT64': 7,
		// 'INT128': 9, // uncomment once supported
		// 'UINT128': 10, // uncomment once supported
		// 'INT256': 11, // uncomment once supported
		// 'UINT256': 12, // uncomment once supported

		// 'FLOAT16': 13, // uncomment once supported
		'FLOAT32': 8,
		'FLOAT64': 9,
		// 'FLOAT128': 16, // uncomment once supported

		// Define a signaling value which is guaranteed not to be a valid type enumeration value:
		'NOTYPE': 11,

		// The following is a special dtype, which is, in more recent Node.js versions, effectively equivalent to `uint8` when calling into C; however, in older Node.js versions, the `Buffer` object was not based on the `Uint8Array` typed array. Here, we treat "binary" as an alias for `uint8`.
		'BINARY': 1,

		// The following is a special dtype which is only applicable in JavaScript, not in C. Here, we treat "uint8c" as an alias for `uint8`.
		'UINT8C': 1,

		// The following corresponds to a "generic" JavaScript `Array` instance. This has no equivalent native C type.
		'GENERIC': 11,

		// Indicate the start of user defined type numbers (leaving room for type growth above):
		'USERDEFINED_TYPE': 256
	};
}


// EXPORTS //

module.exports = enumerated;
