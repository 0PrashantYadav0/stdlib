'use strict';

// MODULES //

var tape = require( 'tape' );
var dtypes = require( '@stdlib/ndarray/dtypes' );
var bufferCtors = require( '@stdlib/ndarray/base/buffer-ctors' );
var isFunction = require( '@stdlib/assert/is-function' );
var dtype = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dtype, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns the data type for ndarray data buffers', function test( t ) {
	var DTYPES;
	var ctor;
	var buf;
	var dt;
	var i;

	DTYPES = dtypes();

	for ( i = 0; i < DTYPES.length; i++ ) {
		ctor = bufferCtors( DTYPES[ i ] );
		if ( DTYPES[ i ] === 'binary' && isFunction( ctor.alloc ) ) {
			buf = ctor.alloc( 10 );
		} else {
			buf = new ctor( 10 ); // eslint-disable-line no-new-cap
		}
		dt = dtype( buf );
		t.strictEqual( dt, DTYPES[ i ], 'returns expected value' );
	}
	t.end();
});

tape( 'the function supports generic objects', function test( t ) {
	var buf;
	var dt;

	buf = {
		'length': 10
	};
	dt = dtype( buf );
	t.strictEqual( dt, 'generic', 'returns expected value' );
	t.end();
});

tape( 'if provided an ndarray data buffer having an unknown/unsupported data type, the function returns `null`', function test( t ) {
	var buffers;
	var i;

	buffers = [
		'beep',
		5,
		NaN,
		null,
		void 0,
		true,
		false,
		function noop() {}
	];
	for ( i = 0; i < buffers.length; i++ ) {
		t.strictEqual( dtype( buffers[i] ), null, 'returns expected value for ' + buffers[ i ] );
	}
	t.end();
});
