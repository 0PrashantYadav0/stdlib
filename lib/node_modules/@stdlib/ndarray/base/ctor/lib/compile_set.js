'use strict';

// MAIN //

/**
* Returns a setter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @returns {Function} setter
*
* @example
* var f = set( 3 );
* // returns <Function>
*/
function set( ndims ) {
	var n = ndims - 1;
	var f;
	var i;

	// Code generation. Start with the function definition...
	f = 'return function set(';

	/*
	* Create the index input arguments...
	* > function set( i0, i1,..., v ) {
	*/
	for ( i = 0; i < ndims; i++ ) {
		f += 'i' + i + ',';
	}
	// Add the value argument...
	f += 'v){';

	// Create the function body...

	/*
	* Index into the array according to the offset and strides...
	* > data[offset+strides[0]*i0+strides[1]*i1+...] = v;
	*/
	f += 'this._buffer[this._offset+';
	for ( i = 0; i < ndims; i++ ) {
		f += 'this._strides[' + i + ']*i' + i;
		if ( i < n ) {
			f += '+';
		}
	}
	f += ']';

	// Set the value:
	f += '=v;';

	// Return the instance:
	f += 'return this;';

	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=ndarray.ctor.set.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* e.g., returns
	*     function set( i0, i1, i2, v ) {
	*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;
	*         return this;
	*     }
	*/
}


// EXPORTS //

module.exports = set;
