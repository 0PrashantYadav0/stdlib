/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDLIB_NDARRAY_BASE_UNARY_MACROS_1D_H
#define STDLIB_NDARRAY_BASE_UNARY_MACROS_1D_H

#include "stdlib/ndarray/base/unary/internal/nonsingleton_dimension.h"
#include "stdlib/ndarray/ctor.h"
#include <stdint.h>

/**
* Macro for operating on elements of a one-dimensional ndarray.
*
* @param strided_array_fcn   strided array function

* @example
* STDLIB_NDARRAY_UNARY_1D( strided_array_fcn )
*/
#define STDLIB_NDARRAY_UNARY_1D( strided_array_fcn )                           \
	uint8_t *arrays[] = {                                                      \
		stdlib_ndarray_data( x1 ),                                             \
		stdlib_ndarray_data( x2 )                                              \
	};                                                                         \
	int64_t shape[] = {                                                        \
		stdlib_ndarray_dimension( x1, 0 )                                      \
	};                                                                         \
	int64_t strides[] = {                                                      \
		stdlib_ndarray_strides( x1 )[ 0 ],                                     \
		stdlib_ndarray_strides( x2 )[ 0 ]                                      \
	};                                                                         \
	strided_array_fcn( arrays, shape, strides, fcn );

/**
* Macro for operating on elements of an n-dimensional ndarray having all singleton dimensions but one.
*
* @param strided_array_fcn   strided array function

* @example
* STDLIB_NDARRAY_UNARY_1D_SQUEEZE( strided_array_fcn )
*/
#define STDLIB_NDARRAY_UNARY_1D_SQUEEZE( strided_array_fcn )                   \
	uint8_t *arrays[] = {                                                      \
		stdlib_ndarray_data( x1 ),                                             \
		stdlib_ndarray_data( x2 )                                              \
	};                                                                         \
	int64_t shape[] = {                                                        \
		stdlib_ndarray_length( x1 )                                            \
	};                                                                         \
	int64_t i = stdlib_ndarray_base_unary_internal_nonsingleton_dimension(     \
		stdlib_ndarray_ndims( x1 ),                                            \
		stdlib_ndarray_shape( x1 )                                             \
	);                                                                         \
	int64_t strides[] = {                                                      \
		stdlib_ndarray_stride( x1, i ),                                        \
		stdlib_ndarray_stride( x2, i )                                         \
	};                                                                         \
	strided_array_fcn( arrays, shape, strides, fcn );

#endif // !STDLIB_NDARRAY_BASE_UNARY_MACROS_1D_H
