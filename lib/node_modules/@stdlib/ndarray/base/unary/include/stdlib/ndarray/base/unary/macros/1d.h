/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDLIB_NDARRAY_BASE_UNARY_MACROS_1D_H
#define STDLIB_NDARRAY_BASE_UNARY_MACROS_1D_H

#include "stdlib/ndarray/ctor.h"
#include <stdint.h>

/**
* Macro for operating on elements of a one-dimensional ndarray.
*
* @param strided_array_fcn   strided array function

* @example
* STDLIB_NDARRAY_UNARY_1D( strided_array_fcn )
*/
#define STDLIB_NDARRAY_UNARY_1D( strided_array_fcn )                           \
	int64_t shape[] = {                                                        \
		stdlib_ndarray_dimension( x1, 0 )                                      \
	};                                                                         \
	int64_t strides[] = {                                                      \
		stdlib_ndarray_stride( x1, 0 ),                                        \
		stdlib_ndarray_stride( x2, 0 )                                         \
	};                                                                         \
	uint8_t *arrays[] = {                                                      \
		stdlib_ndarray_data( x1 ) + stdlib_ndarray_offset( x1 ),               \
		stdlib_ndarray_data( x2 ) + stdlib_ndarray_offset( x2 )                \
	};                                                                         \
	if ( strides[ 0 ] < 0 ) {                                                  \
		arrays[ 0 ] += strides[ 0 ] * shape[ 0 ];                              \
	}                                                                          \
	if ( strides[ 1 ] < 0 ) {                                                  \
		arrays[ 1 ] += strides[ 1 ] * shape[ 0 ];                              \
	}                                                                          \
	strided_array_fcn( arrays, shape, strides, fcn );

#endif // !STDLIB_NDARRAY_BASE_UNARY_MACROS_1D_H
