/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var unary1d = require( '@stdlib/strided/base/unary' ).ndarray;
var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
var copy = require( './copy_ndarray.js' );
var blockedunary2d = require( './blocked_2d.js' );
var blockedunary3d = require( './blocked_3d.js' );
var blockedunary4d = require( './blocked_4d.js' );
var blockedunary5d = require( './blocked_5d.js' );
var blockedunary6d = require( './blocked_6d.js' );
var blockedunary7d = require( './blocked_7d.js' );
var blockedunary8d = require( './blocked_8d.js' );
var blockedunary9d = require( './blocked_9d.js' );
var blockedunary10d = require( './blocked_10d.js' );
var unary2d = require( './2d.js' );
var unary3d = require( './3d.js' );
var unary4d = require( './4d.js' );
var unary5d = require( './5d.js' );
var unary6d = require( './6d.js' );
var unary7d = require( './7d.js' );
var unary8d = require( './8d.js' );
var unary9d = require( './9d.js' );
var unary10d = require( './10d.js' );
var unarynd = require( './nd.js' );


// VARIABLES //

var UNARY = [
	unary2d,  // 0
	unary3d,  // 1
	unary4d,  // 2
	unary5d,  // 3
	unary6d,  // 4
	unary7d,  // 5
	unary8d,  // 6
	unary9d,  // 7
	unary10d  // 8
];
var BLOCKED_UNARY = [
	blockedunary2d,  // 0
	blockedunary3d,  // 1
	blockedunary4d,  // 2
	blockedunary5d,  // 3
	blockedunary6d,  // 4
	blockedunary7d,  // 5
	blockedunary8d,  // 6
	blockedunary9d,  // 7
	blockedunary10d  // 8
];
var MAX_DIMS = UNARY.length + 2;


// MAIN //

/**
* Applies a unary callback to elements in an input ndarray and assigns results to elements in an output ndarray.
*
* @param {Object} x - object containing input ndarray meta data
* @param {string} x.dtype - data type
* @param {Collection} x.data - data buffer
* @param {NonNegativeIntegerArray} x.shape - dimensions
* @param {IntegerArray} x.strides - stride lengths
* @param {NonNegativeInteger} x.offset - index offset
* @param {string} x.order - specifies whether `x` is row-major` (C-style) or column major( Fortran-style)
* @param {Object} y - object containing output ndarray meta data
* @param {string} y.dtype - data type
* @param {Collection} y.data - data buffer
* @param {NonNegativeIntegerArray} y.shape - dimensions
* @param {IntegerArray} y.strides - stride lengths
* @param {NonNegativeInteger} y.offset - index offset
* @param {string} y.order - specifies whether `y` is row-major` (C-style) or column major( Fortran-style)
* @param {Callback} fcn - unary callback
* @throws {Error} arrays must have the same number of dimensions
* @throws {Error} arrays must have the same shape
* @returns {void}
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* function scale( x ) {
*     return x * 10.0;
* }
*
* // Create data buffers:
* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
* var ybuf = new Float64Array( 6 );
*
* // Define the shape of the input and output arrays:
* var shape = [ 3, 1, 2 ];
*
* // Define the array strides:
* var sx = [ 4, 4, 1 ];
* var sy = [ 2, 2, 1 ];
*
* // Define the index offsets:
* var ox = 1;
* var oy = 0;
*
* // Create the input and output ndarray-like objects:
* var x = {
*     'dtype': 'float64',
*     'data': xbuf,
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major'
* };
* var y = {
*     'dtype': 'float64',
*     'data': ybuf,
*     'shape': shape,
*     'strides': sy,
*     'offset': oy,
*     'order': 'row-major'
* };
*
* // Apply the unary function:
* unary( x, y, scale );
*
* console.log( y.data );
* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]
*/
function unary( x, y, fcn ) {
	var ndims;
	var shx;
	var shy;
	var iox;
	var ioy;
	var f;
	var i;

	// Standardize ndarray meta data:
	x = copy( x );
	y = copy( y );

	// Verify that the input and output arrays have the same dimensions...
	shx = x.shape;
	shy = y.shape;
	ndims = shx.length;
	if ( ndims !== shy.length ) {
		throw new Error( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == '+ndims+'. ndims(y) == '+shy.length+'.' );
	}
	for ( i = 0; i < ndims; i++ ) {
		if ( shx[ i ] !== shy[ i ] ) {
			throw new Error( 'invalid arguments. Arrays must have the same shape. shape(x): ['+shx.join( ', ' )+']. shape(y): ['+shy.join( ', ' ) +'].' );
		}
	}
	// Determine whether we can avoid nested loops and just use strided array iteration...
	if ( ndims === 1 ) {
		return unary1d( [ x.data, y.data ], shx, [ x.strides[0], y.strides[0] ], [ x.offset, y.offset ], fcn ); // eslint-disable-line max-len
	}
	// Determine whether we can avoid blocked iteration...
	if ( x.order === y.order ) {
		iox = iterationOrder( x.strides );
		ioy = iterationOrder( y.strides );

		// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...
		if ( iox !== 0 && ioy !== 0 && ndims <= MAX_DIMS ) {
			f = UNARY[ ndims-2 ];
			return f( x, y, fcn );
		}
		// Fall-through to blocked iteration...
	}
	// Determine whether we can perform blocked iteration...
	if ( ndims <= MAX_DIMS ) {
		f = BLOCKED_UNARY[ ndims-2 ];
		return f( x, y, fcn );
	}
	// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...
	unarynd( x, y, fcn );

	// TODO: add note to documentation that can be more performant for non-contiguous very high-dimensional arrays to be copied to contiguous memory before applying a unary function.
}


// EXPORTS //

module.exports = unary;
