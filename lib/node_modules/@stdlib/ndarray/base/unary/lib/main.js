/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var unary1d = require( '@stdlib/strided/base/unary' ).ndarray;
var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
var copy = require( './copy_ndarray.js' );
var blockedunary2d = require( './blocked_2d.js' );
var blockedunary3d = require( './blocked_3d.js' );
var blockedunary4d = require( './blocked_4d.js' );
var blockedunary5d = require( './blocked_5d.js' );
var blockedunary6d = require( './blocked_6d.js' );
var blockedunary7d = require( './blocked_7d.js' );
var blockedunary8d = require( './blocked_8d.js' );
var blockedunary9d = require( './blocked_9d.js' );
var blockedunary10d = require( './blocked_10d.js' );
var unary2d = require( './2d.js' );
var unary3d = require( './3d.js' );
var unary4d = require( './4d.js' );
var unary5d = require( './5d.js' );
var unary6d = require( './6d.js' );
var unary7d = require( './7d.js' );
var unary8d = require( './8d.js' );
var unary9d = require( './9d.js' );
var unary10d = require( './10d.js' );
var unarynd = require( './nd.js' );


// VARIABLES //

var UNARY = [
	unary2d,  // 0
	unary3d,  // 1
	unary4d,  // 2
	unary5d,  // 3
	unary6d,  // 4
	unary7d,  // 5
	unary8d,  // 6
	unary9d,  // 7
	unary10d  // 8
];
var BLOCKED_UNARY = [
	blockedunary2d,  // 0
	blockedunary3d,  // 1
	blockedunary4d,  // 2
	blockedunary5d,  // 3
	blockedunary6d,  // 4
	blockedunary7d,  // 5
	blockedunary8d,  // 6
	blockedunary9d,  // 7
	blockedunary10d  // 8
];
var MAX_DIMS = UNARY.length + 2;


// MAIN //

/**
* Applies a unary callback to elements in an input ndarray and assigns results to elements in an output ndarray.
*
* @param {Object} x - object containing input ndarray meta data
* @param {string} x.dtype - data type
* @param {Collection} x.data - data buffer
* @param {NonNegativeIntegerArray} x.shape - dimensions
* @param {IntegerArray} x.strides - stride lengths
* @param {NonNegativeInteger} x.offset - index offset
* @param {string} x.order - specifies whether `x` is row-major` (C-style) or column major( Fortran-style)
* @param {Object} y - object containing output ndarray meta data
* @param {string} y.dtype - data type
* @param {Collection} y.data - data buffer
* @param {NonNegativeIntegerArray} y.shape - dimensions
* @param {IntegerArray} y.strides - stride lengths
* @param {NonNegativeInteger} y.offset - index offset
* @param {string} y.order - specifies whether `y` is row-major` (C-style) or column major( Fortran-style)
* @param {Callback} fcn - unary callback
* @throws {Error} arrays must have the same number of dimensions
* @throws {Error} arrays must have the same shape
* @returns {void}
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* function scale( x ) {
*     return x * 10.0;
* }
*
* // Create data buffers:
* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
* var ybuf = new Float64Array( 6 );
*
* // Define the shape of the input and output arrays:
* var shape = [ 3, 1, 2 ];
*
* // Define the array strides:
* var sx = [ 4, 4, 1 ];
* var sy = [ 2, 2, 1 ];
*
* // Define the index offsets:
* var ox = 1;
* var oy = 0;
*
* // Create the input and output ndarray-like objects:
* var x = {
*     'dtype': 'float64',
*     'data': xbuf,
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major'
* };
* var y = {
*     'dtype': 'float64',
*     'data': ybuf,
*     'shape': shape,
*     'strides': sy,
*     'offset': oy,
*     'order': 'row-major'
* };
*
* // Apply the unary function:
* unary( x, y, scale );
*
* console.log( y.data );
* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]
*/
function unary( x, y, fcn ) {
	var ndims;
	var xbuf;
	var ybuf;
	var xmmv;
	var ymmv;
	var shx;
	var shy;
	var iox;
	var ioy;
	var len;
	var sx;
	var sy;
	var ox;
	var oy;
	var ns;
	var d;
	var f;
	var i;

	// Standardize ndarray meta data:
	x = copy( x );
	y = copy( y );

	// Verify that the input and output arrays have the same number of dimensions...
	shx = x.shape;
	shy = y.shape;
	ndims = shx.length;
	if ( ndims !== shy.length ) {
		throw new Error( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == '+ndims+'. ndims(y) == '+shy.length+'.' );
	}
	xbuf = x.data;
	ybuf = y.data;
	ox = x.offset;
	oy = y.offset;

	// Determine whether we can avoid iteration altogether...
	if ( ndims === 0 ) {
		ybuf[ oy ] = fcn( xbuf[ ox ] );
		return;
	}
	// Verify that the input and output arrays have the same dimensions...
	len = 1; // number of elements
	ns = 0;  // number of singleton dimensions
	for ( i = 0; i < ndims; i++ ) {
		d = shx[ i ];
		if ( d !== shy[ i ] ) {
			throw new Error( 'invalid arguments. Arrays must have the same shape. shape(x): ['+shx.join( ', ' )+']. shape(y): ['+shy.join( ', ' ) +'].' );
		}
		// Note that, if one of the dimensions is `0`, the length will be `0`...
		len *= d;

		// Check whether the current dimension is a singleton dimension...
		if ( d === 1 ) {
			ns += 1;
		}
	}
	// Check whether we were provided empty ndarrays...
	if ( len === 0 ) {
		return;
	}
	sx = x.strides;
	sy = y.strides;

	// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...
	if ( ndims === 1 ) {
		return unary1d( [ xbuf, ybuf ], shx, [ sx[0], sy[0] ], [ ox, oy ], fcn ); // eslint-disable-line max-len
	}
	// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...
	if ( ns === ndims-1 ) {
		// Get the index of the non-singleton dimension...
		for ( i = 0; i < ndims; i++ ) {
			if ( shx[ i ] !== 1 ) {
				break;
			}
		}
		return unary1d( [ xbuf, ybuf ], [ shx[i] ], [ sx[i], sy[i] ], [ ox, oy ], fcn ); // eslint-disable-line max-len
	}
	iox = iterationOrder( sx ); // +/-1
	ioy = iterationOrder( sy ); // +/-1

	// Determine whether we can avoid blocked iteration...
	if ( iox !== 0 && ioy !== 0 ) {
		// Determine the minimum and maximum linear indices which are accessible by the array views:
		xmmv = minmaxViewBufferIndex( shx, sx, ox );
		ymmv = minmaxViewBufferIndex( shy, sy, oy );

		// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear strided arrays...
		if ( len === ( xmmv[1]-xmmv[0]+1 ) && len === ( ymmv[1]-ymmv[0]+1 ) ) {
			// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...
			if ( iox === 1 ) {
				ox = xmmv[ 0 ];
			} else {
				ox = xmmv[ 1 ];
			}
			if ( ioy === 1 ) {
				oy = ymmv[ 0 ];
			} else {
				oy = ymmv[ 1 ];
			}
			return unary1d( [ xbuf, ybuf ], [ len ], [ iox, ioy ], [ ox, oy ], fcn ); // eslint-disable-line max-len
		}
		// At least one ndarray is non-contiguous, so we cannot directly use strided array functionality...

		// Determine whether we can use simple nested loops...
		if ( x.order === y.order && ndims <= MAX_DIMS ) {
			// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...
			f = UNARY[ ndims-2 ];
			return f( x, y, fcn );
		}
		// Fall-through to blocked iteration...
	}
	// At this point, we're either dealing with non-contiguous n-dimensional arrays and/or high dimensional n-dimensional arrays, so our only hope is that we can still perform blocked iteration...

	// Determine whether we can perform blocked iteration...
	if ( ndims <= MAX_DIMS ) {
		f = BLOCKED_UNARY[ ndims-2 ];
		return f( x, y, fcn );
	}
	// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...
	unarynd( x, y, fcn );
}


// EXPORTS //

module.exports = unary;
