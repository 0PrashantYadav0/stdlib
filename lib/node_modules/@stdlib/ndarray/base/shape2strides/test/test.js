'use strict';

// MODULES //

var tape = require( 'tape' );
var isArray = require( '@stdlib/assert/is-array' );
var shape2strides = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof shape2strides, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function generates a stride array from an array shape (row-major)', function test( t ) {
	var expected;
	var actual;
	var shape;

	shape = [ 3, 2 ];
	expected = [ 2, 1 ];
	actual = shape2strides( shape, 'row-major' );

	t.strictEqual( isArray( actual ), true, 'returns an array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	shape = [ 2, 1, 10 ];
	expected = [ 10, 10, 1 ];
	actual = shape2strides( shape, 'row-major' );

	t.strictEqual( isArray( actual ), true, 'returns an array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function generates a stride array from an array shape (column-major)', function test( t ) {
	var expected;
	var actual;
	var shape;

	shape = [ 3, 2 ];
	expected = [ 1, 3 ];
	actual = shape2strides( shape, 'column-major' );

	t.strictEqual( isArray( actual ), true, 'returns an array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	shape = [ 2, 1, 10 ];
	expected = [ 1, 2, 2 ];
	actual = shape2strides( shape, 'column-major' );

	t.strictEqual( isArray( actual ), true, 'returns an array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports generating a stride array from an array shape in-place (row-major)', function test( t ) {
	var expected;
	var actual;
	var shape;
	var out;

	shape = [ 3, 2 ];
	expected = [ 2, 1 ];

	out = new Array( shape.length );
	actual = shape2strides( out, shape, 'row-major' );

	t.strictEqual( actual, out, 'returns output array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	shape = [ 2, 1, 10 ];
	expected = [ 10, 10, 1 ];

	out = new Array( shape.length );
	actual = shape2strides( out, shape, 'row-major' );

	t.strictEqual( actual, out, 'returns output array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports generating a stride array from an array shape in-place (column-major)', function test( t ) {
	var expected;
	var actual;
	var shape;
	var out;

	shape = [ 3, 2 ];
	expected = [ 1, 3 ];

	out = new Array( shape.length );
	actual = shape2strides( out, shape, 'column-major' );

	t.strictEqual( actual, out, 'returns output array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	shape = [ 2, 1, 10 ];
	expected = [ 1, 2, 2 ];

	out = new Array( shape.length );
	actual = shape2strides( out, shape, 'column-major' );

	t.strictEqual( actual, out, 'returns output array' );
	t.strictEqual( actual.length, shape.length, 'returns expected length' );
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});
