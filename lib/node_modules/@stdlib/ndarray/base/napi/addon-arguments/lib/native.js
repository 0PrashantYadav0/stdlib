/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Int8Array = require( '@stdlib/array/int8' );
var dtypes = require( '@stdlib/ndarray/dtypes' ).enum;
var orders = require( '@stdlib/ndarray/orders' ).enum;
var modes = require( '@stdlib/ndarray/index-modes' ).enum;
var addon = require( './../src/addon.node' );


// VARIABLES //

var DTYPES = dtypes();
var ORDERS = orders();
var MODES = modes();
var THROW = MODES[ 'throw' ];


// FUNCTIONS //

/**
* Copies a list of integers to a `BigInt64Array`.
*
* @private
* @param {IntegerArray} arr - input array
* @returns {BigInt64Array} output array
*/
function arr2int64( arr ) {
	var out;
	var i;

	out = new BigInt64Array( arr.length ); // eslint-disable-line no-undef
	for ( i = 0; i < arr.length; i++ ) {
		out[ i ] = BigInt( arr[ i ] ); // eslint-disable-line no-undef
	}
	return out;
}

/**
* Converts a list of index modes to an equivalent list of corresponding enumeration constants.
*
* @private
* @param {StringArray} list - list of index modes
* @returns {IntegerArray} list of corresponding index mode enumeration constants
*/
function submodes( list ) {
	var out;
	var i;

	out = new Int8Array( list.length );
	for ( i = 0; i < list.length; i++ ) {
		out[ i ] = MODES[ list[i] ];
	}
	return out;
}

/**
* Copies an ndarray-like object to a form compatible with an ndarray in C.
*
* @private
* @param {ndarrayLike} x - input array
* @returns {Object} ndarray object
*/
function copy( x ) {
	/* eslint-disable no-underscore-dangle */
	var sm;
	var m;

	// "Official" ndarray instances can be configured to have different bounds-checking behavior; however, retrieving this configuration is only possible via private properties...
	m = ( x._mode ) ? MODES[ x._mode ] : THROW;
	if ( x._submode ) {
		sm = submodes( x._submode );
	} else {
		sm = new Int8Array( 1 );
		sm[ 0 ] = m;
	}
	// Prefer private properties to avoid accessors (and potential unnecessary copies)...
	return [
		// 0: dtype
		DTYPES[ x._dtype || x.dtype ],

		// 1: data
		x._buffer || x.data,

		// 2: shape
		arr2int64( x._shape || x.shape ),

		// 3: strides
		arr2int64( x._strides || x.strides ),

		// 4: offset
		x._offset || x.offset,

		// 5: order
		ORDERS[ x._order || x.order ],

		// 6: mode
		m,

		// 7: submode
		sm
	];

	/* eslint-enable no-underscore-dangle */
}


// MAIN //

/**
* Wrapper function exposing the C API to JavaScript.
*
* @private
* @param {ndarray} x - input array
* @param {ndarray} y - destination array
* @returns {ndarray} `y`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var ndarray = require( '@stdlib/ndarray/ctor' );
*
* var xbuf = new Float64Array( 10 );
* var ybuf = new Float64Array( xbuf.length );
*
* var x = ndarray( 'float64', xbuf, [ 10 ], [ 1 ], 0, 'row-major' );
* var y = ndarray( 'float64', ybuf, [ 10 ], [ 1 ], 0, 'row-major' );
*
* wrapper( x, y );
*/
function wrapper( x, y ) {
	addon( copy( x ), copy( y ) );
	return y;
}


// EXPORTS //

module.exports = wrapper;
