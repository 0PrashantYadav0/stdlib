'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isFunction = require( '@stdlib/assert/is-function' );
var randu = require( '@stdlib/random/base/randu' );
var floor = require( '@stdlib/math/base/special/floor' );
var pkg = require( './../package.json' ).name;
var ctor = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var out;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		out = ctor( 'float64', 1.0+floor( randu()*10.0 ) );
		if ( typeof out !== 'function' ) {
			b.fail( 'should return a function' );
		}
	}
	b.toc();
	if ( !isFunction( out ) ) {
		b.fail( 'should return a function' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':codegen=true', function benchmark( b ) {
	var opts;
	var out;
	var i;

	opts = {
		'codegen': true
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		out = ctor( 'float64', 1.0+floor( randu()*10.0 ), opts );
		if ( typeof out !== 'function' ) {
			b.fail( 'should return a function' );
		}
	}
	b.toc();
	if ( !isFunction( out ) ) {
		b.fail( 'should return a function' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':codegen=false', function benchmark( b ) {
	var opts;
	var out;
	var i;

	opts = {
		'codegen': false
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		out = ctor( 'float64', 1.0+floor( randu()*10.0 ), opts );
		if ( typeof out !== 'function' ) {
			b.fail( 'should return a function' );
		}
	}
	b.toc();
	if ( !isFunction( out ) ) {
		b.fail( 'should return a function' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
