/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isArray = require( '@stdlib/assert/is-array' );
var Float64Array = require( '@stdlib/array/float64' );
var Float32Array = require( '@stdlib/array/float32' );
var Uint32Array = require( '@stdlib/array/uint32' );
var Int32Array = require( '@stdlib/array/int32' );
var Uint16Array = require( '@stdlib/array/uint16' );
var Int16Array = require( '@stdlib/array/int16' );
var Uint8Array = require( '@stdlib/array/uint8' );
var Uint8ClampedArray = require( '@stdlib/array/uint8c' );
var Int8Array = require( '@stdlib/array/int8' );
var getType = require( '@stdlib/ndarray/base/buffer-dtype' );


// VARIABLES //

var TYPES = [
	[ Float64Array, 'float64' ],
	[ Float32Array, 'float32' ],
	[ Uint32Array, 'uint32' ],
	[ Int32Array, 'int32' ],
	[ Uint16Array, 'uint16' ],
	[ Int16Array, 'int16' ],
	[ Uint8Array, 'uint8' ],
	[ Uint8ClampedArray, 'uint8c' ],
	[ Int8Array, 'int8' ]
];
var NTYPES = TYPES.length;


// MAIN //

/**
* Resolves a data source underlying data type.
*
* @private
* @param {(Array|TypedArray|Buffer)} buffer - data source
* @returns {string} data type
*/
function dtype( buffer ) {
	var i;
	if ( isArray( buffer ) ) {
		return 'generic';
	}
	if ( isBuffer( buffer ) ) {
		return 'binary';
	}
	// By process of elimination, left with typed arrays...
	for ( i = 0; i < NTYPES; i++ ) {
		if ( buffer instanceof TYPES[ i ][ 0 ] ) {
			return TYPES[ i ][ 1 ];
		}
	}
	// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:
	return getType( buffer );
}


// EXPORTS //

module.exports = dtype;
