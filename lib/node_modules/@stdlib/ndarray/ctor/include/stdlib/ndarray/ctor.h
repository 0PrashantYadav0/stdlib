/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDLIB_NDARRAY_H
#define STDLIB_NDARRAY_H

#include <stdint.h>
#include "stdlib/ndarray/base/bytes_per_element.h"
#include "stdlib/ndarray/dtypes.h"
#include "stdlib/ndarray/index_modes.h"
#include "stdlib/ndarray/orders.h"

/**
* Flag indicating whether an ndarray is row-major (C-style) contiguous.
*
* ## Notes
*
* -   Row-major order indicates that the last ndarray index varies the fastest.
* -   Contiguous means that an ndarray is compatible with being stored in a single memory segment and that ndarray elements are adjacent to each other in memory.
* -   `strides` array is in reverse order to that of column-major order.
* -   An ndarray can be both row-major and column-major contiguous (e.g., if an ndarray is one-dimensional).
*/
#define STDLIB_NDARRAY_ROW_MAJOR_CONTIGUOUS_FLAG 0x0001

/**
* Flag indicating whether an ndarray is column-major (Fortran-style) contiguous.
*
* ## Notes
*
* -   Column-major order indicates that the first ndarray index varies the fastest.
* -   Contiguous means that an ndarray is compatible with being stored in a single memory segment and that ndarray elements are adjacent to each other in memory.
* -   `strides` array is in reverse order to that of row-major order.
* -   An ndarray can be both row-major and column-major contiguous (e.g., if an ndarray is one-dimensional).
*/
#define STDLIB_NDARRAY_COLUMN_MAJOR_CONTIGUOUS_FLAG 0x0002

/**
* ndarray structure.
*
* @example
* #include <stdlib.h>
* #include <stdio.h>
* #include <stdint.h>
* #include "stdlib/ndarray/base/bytes_per_element.h"
* #include "stdlib/ndarray/dtypes.h"
* #include "stdlib/ndarray/index_modes.h"
* #include "stdlib/ndarray/orders.h"
* #include "stdlib/ndarray/ctor.h"
*
* struct ndarray *x = malloc( sizeof( struct ndarray ) );
* if ( x == NULL ) {
*     fprintf( stderr, "Error allocating memory.\n" );
*     exit( 1 );
* }
*
* // Create an underlying byte array:
* uint8_t buffer[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
* x->data = buffer;
*
* // Specify the underlying data type:
* x->dtype = STDLIB_NDARRAY_FLOAT64;
*
* // Explicitly specify the number of bytes per element:
* x->BYTES_PER_ELEMENT = STDLIB_NDARRAY_FLOAT64_BYTES_PER_ELEMENT;
*
* // Specify the array shape:
* int64_t shape[] = { 3 }; // vector consisting of 3 doubles
* x->shape = shape;
*
* // Specify the array strides:
* int64_t strides[] = { x->BYTES_PER_ELEMENT };
* x->strides = strides;
*
* // Specify the byte offset:
* x->offset = 0;
*
* // Specify the array order (note: this does not matter for a 1-dimensional array):
* x->order = STDLIB_NDARRAY_ROW_MAJOR;
*
* // Specify the index mode:
* x->imode = STDLIB_NDARRAY_INDEX_ERROR;
*
* // Specify subscript index modes:
* x->submodes = { STDLIB_NDARRAY_INDEX_ERROR };
* x->nsubmodes = 1;
*
* // Explicitly specify the number of array dimensions:
* x->ndims = 1; // vector
*
* // Explicitly specify the number of array elements (doubles):
* x->length = x->shape[ 0 ];
*
* // Explicitly specify the number of bytes:
* x->byteLength = (x->length) * (x->BYTES_PER_ELEMENT);
*
* // Explicitly set the array flags:
* x->flags = stdlib_ndarray_flags( x );
*
* // Free allocated memory:
* free( x );
*/
struct ndarray {
	// Underlying data type:
	enum STDLIB_NDARRAY_DTYPE dtype;

	// Pointer to the underlying byte array:
	uint8_t *data;

	// Number of array dimensions:
	int64_t ndims;

	// Array shape (dimensions):
	int64_t *shape;

	// Array strides (in bytes) specifying how to iterate over a strided array:
	int64_t *strides;

	// Byte offset which specifies the location at which to start iterating over array elements:
	int64_t offset;

	// Array order (either row-major (C-style) or column-major (Fortran-style)):
	enum STDLIB_NDARRAY_ORDER order;

	// Mode specifying how to handle indices which exceed array dimensions:
	enum STDLIB_NDARRAY_INDEX_MODE imode;

	// Number of subscript modes:
	int64_t nsubmodes;

	// Mode(s) specifying how to handle subscripts which exceed array dimensions on a per dimension basis:
	enum STDLIB_NDARRAY_INDEX_MODE *submodes;

	// Number of array elements:
	int64_t length;

	// Size in bytes:
	int64_t byteLength;

	// Number of bytes per element (i.e., item size):
	enum STDLIB_NDARRAY_BYTES_PER_ELEMENT BYTES_PER_ELEMENT;

	// Bit mask providing information regarding the memory layout of the array (e.g., see macros in this file):
	int flags;
};

/**
* Returns a pointer to a dynamically allocated ndarray.
*/
struct ndarray * stdlib_ndarray_constructor( enum STDLIB_NDARRAY_DTYPE dtype, uint8_t *data, int64_t ndims, int64_t *shape, int64_t *strides, int64_t offset, enum STDLIB_NDARRAY_ORDER order, enum STDLIB_NDARRAY_INDEX_MODE imode, int64_t nsubmodes, enum STDLIB_NDARRAY_INDEX_MODE *submodes );

/**
* Returns a pointer to an ndarray's underlying byte array.
*/
uint8_t * stdlib_ndarray_data( const struct ndarray *arr );

/**
* Returns the number of dimensions in an ndarray.
*/
int64_t stdlib_ndarray_ndims( const struct ndarray *arr );

/**
* Returns a pointer to an array containing an ndarray shape (dimensions).
*/
int64_t * stdlib_ndarray_shape( const struct ndarray *arr );

/**
* Returns an ndarray dimension.
*/
int64_t stdlib_ndarray_dimension( const struct ndarray *arr, const int64_t i );

/**
* Returns a pointer to an array containing ndarray strides (in bytes).
*/
int64_t * stdlib_ndarray_strides( const struct ndarray *arr );

/**
* Returns an ndarray stride (in bytes).
*/
int64_t stdlib_ndarray_stride( const struct ndarray *arr, const int64_t i );

/**
* Returns an ndarray index offset (in bytes).
*/
int64_t stdlib_ndarray_offset( const struct ndarray *arr );

/**
* Returns the order of an ndarray.
*/
enum STDLIB_NDARRAY_ORDER stdlib_ndarray_order( const struct ndarray *arr );

/**
* Returns an ndarray data type.
*/
enum STDLIB_NDARRAY_DTYPE stdlib_ndarray_dtype( const struct ndarray *arr );

/**
* Returns the index mode of an ndarray.
*/
enum STDLIB_NDARRAY_INDEX_MODE stdlib_ndarray_index_mode( const struct ndarray *arr );

/**
* Returns the number of ndarray subscript modes.
*/
int64_t stdlib_ndarray_nsubmodes( const struct ndarray *arr );

/**
* Returns ndarray subscript modes.
*/
enum STDLIB_NDARRAY_INDEX_MODE * stdlib_ndarray_submodes( const struct ndarray *arr );

/**
* Returns an ndarray subscript mode.
*/
enum STDLIB_NDARRAY_INDEX_MODE stdlib_ndarray_submode( const struct ndarray *arr, const int64_t i );

/**
* Returns the number of elements in an ndarray.
*/
int64_t stdlib_ndarray_length( const struct ndarray *arr );

/**
* Returns the size of an ndarray (in bytes).
*/
int64_t stdlib_ndarray_bytelength( const struct ndarray *arr );

/**
* Returns ndarray flags.
*/
int64_t stdlib_ndarray_flags( const struct ndarray *arr );

/**
* Tests whether an ndarray has specified flags.
*/
int8_t stdlib_ndarray_has_flags( const struct ndarray *arr, const int64_t flags );

/**
* Enables specified ndarray flags.
*/
int8_t stdlib_ndarray_enable_flags( struct ndarray *arr, const int64_t flags );

/**
* Disables specified ndarray flags.
*/
int8_t stdlib_ndarray_disable_flags( struct ndarray *arr, const int64_t flags );

/**
* Returns a byte array pointer to an ndarray data element.
*/
uint8_t * stdlib_ndarray_get_ptr( const struct ndarray *arr, const int64_t *sub );

/**
* Returns an ndarray data element.
*/
int8_t stdlib_ndarray_get( const struct ndarray *arr, const int64_t *sub, void *out );

/**
* Returns a double-precision floating-point ndarray data element.
*/
int8_t stdlib_ndarray_get_float64( const struct ndarray *arr, const int64_t *sub, double *out );

/**
* Returns a single-precision floating-point ndarray data element.
*/
int8_t stdlib_ndarray_get_float32( const struct ndarray *arr, const int64_t *sub, float *out );

/**
* Returns an unsigned 64-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_uint64( const struct ndarray *arr, const int64_t *sub, uint64_t *out );

/**
* Returns a signed 64-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_int64( const struct ndarray *arr, const int64_t *sub, int64_t *out );

/**
* Returns an unsigned 32-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_uint32( const struct ndarray *arr, const int64_t *sub, uint32_t *out );

/**
* Returns a signed 32-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_int32( const struct ndarray *arr, const int64_t *sub, int32_t *out );

/**
* Returns an unsigned 16-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_uint16( const struct ndarray *arr, const int64_t *sub, uint16_t *out );

/**
* Returns a signed 16-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_int16( const struct ndarray *arr, const int64_t *sub, int16_t *out );

/**
* Returns an unsigned 8-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_uint8( const struct ndarray *arr, const int64_t *sub, uint8_t *out );

/**
* Returns a signed 8-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_get_int8( const struct ndarray *arr, const int64_t *sub, int8_t *out );

/**
* Returns an underlying byte array pointer to an ndarray data element located at a specified linear index.
*/
uint8_t * stdlib_ndarray_iget_ptr( const struct ndarray *arr, const int64_t idx );

/**
* Returns a double-precision floating-point ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_float64( const struct ndarray *arr, const int64_t idx, double *out );

/**
* Returns a single-precision floating-point ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_float32( const struct ndarray *arr, const int64_t idx, float *out );

/**
* Returns an unsigned 64-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_uint64( const struct ndarray *arr, const int64_t idx,uint64_t *out );

/**
* Returns a signed 64-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_int64( const struct ndarray *arr, const int64_t idx,int64_t *out );

/**
* Returns an unsigned 32-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_uint32( const struct ndarray *arr, const int64_t idx,uint32_t *out );

/**
* Returns a signed 32-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_int32( const struct ndarray *arr, const int64_t idx,int32_t *out );

/**
* Returns an unsigned 16-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_uint16( const struct ndarray *arr, const int64_t idx,uint16_t *out );

/**
* Returns a signed 16-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_int16( const struct ndarray *arr, const int64_t idx,int16_t *out );

/**
* Returns an unsigned 8-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_uint8( const struct ndarray *arr, const int64_t idx,uint8_t *out );

/**
* Returns a signed 8-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iget_int8( const struct ndarray *arr, const int64_t idx,int8_t *out );

/**
* Sets an ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr( const struct ndarray *arr, const uint8_t *idx, const void *v );

/**
* Sets a double-precision floating-point ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_float64( const uint8_t *idx, const double v );

/**
* Sets a single-precision floating-point ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_float32( const uint8_t *idx, const float v );

/**
* Sets an unsigned 64-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_uint64( const uint8_t *idx, const uint64_t v );

/**
* Sets a signed 64-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_int64( const uint8_t *idx, const int64_t v );

/**
* Sets an unsigned 32-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_uint32( const uint8_t *idx, const uint32_t v );

/**
* Sets a signed 32-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_int32( const uint8_t *idx, const int32_t v );

/**
* Sets an unsigned 16-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_uint16( const uint8_t *idx, const uint16_t v );

/**
* Sets a signed 16-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_int16( const uint8_t *idx, const int16_t v );

/**
* Sets an unsigned 8-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_uint8( const uint8_t *idx, const uint8_t v );

/**
* Sets a signed 8-bit integer ndarray data element specified by a provided byte array pointer.
*/
int8_t stdlib_ndarray_set_ptr_int8( const uint8_t *idx, const int8_t v );

/**
* Sets an ndarray data element.
*/
int8_t stdlib_ndarray_set( const struct ndarray *arr, const int64_t *sub, const void *v );

/**
* Sets a double-precision floating-point ndarray data element.
*/
int8_t stdlib_ndarray_set_float64( const struct ndarray *arr, const int64_t *sub, const double v );

/**
* Sets a single-precision floating-point ndarray data element.
*/
int8_t stdlib_ndarray_set_float32( const struct ndarray *arr, const int64_t *sub, const float v );

/**
* Sets an unsigned 64-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_uint64( const struct ndarray *arr, const int64_t *sub, const uint64_t v );

/**
* Sets a signed 64-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_int64( const struct ndarray *arr, const int64_t *sub, const int64_t v );

/**
* Sets an unsigned 32-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_uint32( const struct ndarray *arr, const int64_t *sub, const uint32_t v );

/**
* Sets a signed 32-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_int32( const struct ndarray *arr, const int64_t *sub, const int32_t v );

/**
* Sets an unsigned 16-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_uint16( const struct ndarray *arr, const int64_t *sub, const uint16_t v );

/**
* Sets a signed 16-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_int16( const struct ndarray *arr, const int64_t *sub, const int16_t v );

/**
* Sets an unsigned 8-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_uint8( const struct ndarray *arr, const int64_t *sub, const uint8_t v );

/**
* Sets a signed 8-bit integer ndarray data element.
*/
int8_t stdlib_ndarray_set_int8( const struct ndarray *arr, const int64_t *sub, const int8_t v );

/**
* Sets an ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset( const struct ndarray *arr, const int64_t idx, const void *v );

/**
* Sets a double-precision floating-point ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_float64( const struct ndarray *arr, const int64_t idx, const double v );

/**
* Sets a single-precision floating-point ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_float32( const struct ndarray *arr, const int64_t idx, const float v );

/**
* Sets an unsigned 64-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_uint64( const struct ndarray *arr, const int64_t idx, const uint64_t v );

/**
* Sets a signed 64-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_int64( const struct ndarray *arr, const int64_t idx, const int64_t v );

/**
* Sets an unsigned 32-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_uint32( const struct ndarray *arr, const int64_t idx, const uint32_t v );

/**
* Sets a signed 32-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_int32( const struct ndarray *arr, const int64_t idx, const int32_t v );

/**
* Sets an unsigned 16-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_uint16( const struct ndarray *arr, const int64_t idx, const uint16_t v );

/**
* Sets a signed 16-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_int16( const struct ndarray *arr, const int64_t idx, const int16_t v );

/**
* Sets an unsigned 8-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_uint8( const struct ndarray *arr, const int64_t idx, const uint8_t v );

/**
* Sets a signed 8-bit integer ndarray data element located at a specified linear index.
*/
int8_t stdlib_ndarray_iset_int8( const struct ndarray *arr, const int64_t idx, const int8_t v );

#endif // !STDLIB_NDARRAY_H
