/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDLIB_NDARRAY_H
#define STDLIB_NDARRAY_H

#include <stdint.h>
#include "stdlib/ndarray/base/bytes_per_element.h"
#include "stdlib/ndarray/dtypes.h"
#include "stdlib/ndarray/orders.h"

/**
* Flag indicating whether an ndarray is row-major (C-style) contiguous.
*
* ## Notes
*
* -   Row-major order indicates that the last ndarray index varies the fastest.
* -   Contiguous means that an ndarray is compatible with being stored in a single memory segment and that ndarray elements are adjacent to each other in memory.
* -   `strides` array is in reverse order to that of column-major order.
* -   An ndarray can be both row-major and column-major contiguous (e.g., if an ndarray is one-dimensional).
*/
#define STDLIB_NDARRAY_ROW_MAJOR_CONTIGUOUS_FLAG 0x0001

/**
* Flag indicating whether an ndarray is column-major (Fortran-style) contiguous.
*
* ## Notes
*
* -   Column-major order indicates that the first ndarray index varies the fastest.
* -   Contiguous means that an ndarray is compatible with being stored in a single memory segment and that ndarray elements are adjacent to each other in memory.
* -   `strides` array is in reverse order to that of row-major order.
* -   An ndarray can be both row-major and column-major contiguous (e.g., if an ndarray is one-dimensional).
*/
#define STDLIB_NDARRAY_COLUMN_MAJOR_CONTIGUOUS_FLAG 0x0002

/**
* ndarray structure.
*
* @example
* #include <stdlib.h>
* #include <stdio.h>
* #include <stdint.h>
* #include "stdlib/ndarray/base/bytes_per_element.h"
* #include "stdlib/ndarray/dtypes.h"
* #include "stdlib/ndarray/orders.h"
* #include "stdlib/ndarray/ctor.h"
*
* struct ndarray *x = malloc( sizeof( struct ndarray ) );
* if ( x == NULL ) {
*     fprintf( stderr, "Error allocating memory.\n" );
*     exit( 1 );
* }
*
* // Create an underlying byte array:
* uint8_t buffer[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
* x->data = buffer;
*
* // Specify the underlying data type:
* x->dtype = STDLIB_NDARRAY_FLOAT64;
*
* // Explicitly specify the number of bytes per element:
* x->BYTES_PER_ELEMENT = STDLIB_NDARRAY_FLOAT64_BYTES_PER_ELEMENT;
*
* // Specify the array shape:
* int64_t shape[] = { 3 }; // vector consisting of 3 doubles
* x->shape = shape;
*
* // Specify the array strides:
* int64_t strides[] = { x->BYTES_PER_ELEMENT };
* x->strides = strides;
*
* // Specify the byte offset:
* x->offset = 0;
*
* // Specify the array order (note: this does not matter for a 1-dimensional array):
* x->order = STDLIB_NDARRAY_ROW_MAJOR;
*
* // Explicitly specify the number of array dimensions:
* x->ndims = 1; // vector
*
* // Explicitly specify the number of array elements (doubles):
* x->length = x->shape[ 0 ];
*
* // Explicitly specify the number of bytes:
* x->byteLength = (x->length) * (x->BYTES_PER_ELEMENT);
*
* // Free allocated memory:
* free( x );
*/
struct ndarray {
	// Pointer to the underlying byte array:
	uint8_t *data;

	// Number of array dimensions:
	int64_t ndims;

	// Array shape (dimensions):
	int64_t *shape;

	// Array strides (in bytes) specifying how to iterate over a strided array:
	int64_t *strides;

	// Byte offset which specifies the location at which to start iterating over array elements:
	int64_t offset;

	// Array order (either row-major (C-style) or column-major (Fortran-style)):
	enum STDLIB_NDARRAY_ORDER order;

	// Underlying data type:
	enum STDLIB_NDARRAY_DTYPE dtype;

	// Number of array elements:
	int64_t length;

	// Size in bytes:
	int64_t byteLength;

	// Number of bytes per element (i.e., item size):
	enum STDLIB_NDARRAY_BYTES_PER_ELEMENT BYTES_PER_ELEMENT;

	// Bit mask providing information regarding the memory layout of the array (e.g., see macros in this file):
	int flags;

	// Array iteration order:
	int8_t _iterationOrder;
};

/**
* Returns a pointer to a dynamically allocated ndarray.
*/
struct ndarray * stdlib_ndarray_constructor( uint8_t *data, int64_t ndims, int64_t *shape, int64_t *strides, int64_t offset, enum STDLIB_NDARRAY_ORDER order, enum STDLIB_NDARRAY_DTYPE dtype );

/**
* Returns a pointer to an ndarray's underlying byte array.
*/
uint8_t * stdlib_ndarray_data( const struct ndarray *arr );

/**
* Returns the number of dimensions in an ndarray.
*/
int64_t stdlib_ndarray_ndims( const struct ndarray *arr );

/**
* Returns a pointer to an array containing the ndarray shape (dimensions).
*/
int64_t * stdlib_ndarray_shape( const struct ndarray *arr );

/**
* Returns a pointer to an array containing the ndarray strides (in bytes).
*/
int64_t * stdlib_ndarray_strides( const struct ndarray *arr );

/**
* Returns an ndarray index offset (in bytes).
*/
int64_t stdlib_ndarray_offset( const struct ndarray *arr );

/**
* Returns the order of an ndarray.
*/
enum STDLIB_NDARRAY_ORDER stdlib_ndarray_order( const struct ndarray *arr );

/**
* Returns an ndarray data type.
*/
enum STDLIB_NDARRAY_DTYPE stdlib_ndarray_dtype( const struct ndarray *arr );

/**
* Returns the number of elements in an ndarray.
*/
int64_t stdlib_ndarray_length( const struct ndarray *arr );

/**
* Returns the size of an ndarray (in bytes).
*/
int64_t stdlib_ndarray_bytelength( const struct ndarray *arr );

#endif // !STDLIB_NDARRAY_H
