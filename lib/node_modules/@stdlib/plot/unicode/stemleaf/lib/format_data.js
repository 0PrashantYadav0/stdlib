'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/utils/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var isInfinite = require( '@stdlib/math/base/utils/is-infinite' );


// MAIN //

/**
* Formats data to a standard representation. This is required for non-deterministic accessors.
*
* @private
* @param {(Array|TypedArray)} data - data to standardize
* @param {Function} getValue - accessor function
* @returns {ObjectArray} standardized data
*
* @example
* var data = [{'y':5.0},{'y':3.0},{'y':2.0}];
* function yValue( d ) {
*     return d.y;
* }
* var arr = formatData( data, yValue );
* // returns [ 5.0, 3.0, 2.0 ]
*/
function formatData( data, getValue ) {
	var out;
	var d;
	var i;

	// TODO: add support for `ndarray`-like interfaces

	out = new Array( data.length );
	for ( i = 0; i < data.length; i++ ) {
		d = getValue( data[ i ], i );
		if ( isnan( d ) || isInfinite( d ) ) {
			continue;
		}
		out[ i ] = round( d );
	}

	return out;
} // end FUNCTION formatData()


// EXPORTS //

module.exports = formatData;
