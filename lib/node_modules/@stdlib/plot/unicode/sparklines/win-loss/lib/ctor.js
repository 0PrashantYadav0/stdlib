'use strict';

// MODULES //

var Sparkline = require( '@stdlib/plot/unicode/sparklines/base' );


// WIN-LOSS CHART //

/**
* Unicode sparkline win/loss chart constructor.
*
* @constructor
* @param {Options} [options] - chart options
* @param {(Array|TypedArray)} [options.data] - chart data
* @param {Function} [options.yValue] - y-value accessor
* @param {(PositiveInteger|null)} [options.window] - sliding window size
* @throws {TypeError} must provide valid options
* @returns {WinLossChart} chart instance
*
* @example
* var data = [ -2, 1, 2, 2, 1, -1, -1, 1 ];
* var opts = {
*     'data': data
* };
* var chart = new WinLossChart( opts );
* var str = chart.render();
* // returns '┌╵└┴╵╷╷╵'
*/
function WinLossChart( options ) {
	if ( !(this instanceof WinLossChart) ) {
		if ( arguments.length ) {
			return new WinLossChart( options );
		}
		return new WinLossChart();
	}
	if ( arguments.length ) {
		Sparkline.call( this, options );
	} else {
		Sparkline.call( this );
	}
	return this;
} // end FUNCTION WinLossChart()

/*
* Create a prototype which inherits from the parent prototype.
*/
WinLossChart.prototype = Object.create( Sparkline.prototype );

/*
* Set the constructor.
*/
WinLossChart.prototype.constructor = WinLossChart;

/**
* Renders a chart.
*
* @memberof WinLossChart.prototype
* @function render
* @returns {string} rendered chart
*
* @example
* var data = [ -2, 1, 2, 2, 1, -1, -1, 1 ];
*
* var chart = new WinLossChart({
*     'data': data
* });
*
* var str = chart.render();
* // returns '┌╵└┴╵╷╷╵'
*/
WinLossChart.prototype.render = require( './render.js' );


// EXPORTS //

module.exports = WinLossChart;
