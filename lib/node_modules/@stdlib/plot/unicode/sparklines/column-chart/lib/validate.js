'use strict';

// MODULES //

var isObject = require( '@stdlib/utils/is-object' );
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitive;


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {number} [options.ymin] - minimum value of the y-axis domain
* @param {number} [options.ymax] - maximum value of the y-axis domain
* @param {boolean} [options.infinities] - boolean indicating whether to encode infinite values
* @returns {(Error|null)} error or null
*
* @example
* var options = {
*     'ymin': -10.0,
*     'ymax': 10.0,
*     'infinities': true
* };
* var opts = {};
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( options.hasOwnProperty( 'ymin' ) ) {
		opts.ymin = options.ymin;
		if ( !isNumber( opts.ymin ) ) {
			return new TypeError( 'invalid option. `ymin` option must be a number primitive. Option: `' + opts.ymin + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'ymax' ) ) {
		opts.ymax = options.ymax;
		if ( !isNumber( opts.ymax ) ) {
			return new TypeError( 'invalid option. `ymax` option must be a number primitive. Option: `' + opts.ymax + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'infinities' ) ) {
		opts.infinities = options.infinities;
		if ( !isBoolean( opts.infinities ) ) {
			return new TypeError( 'invalid option. `infinities` option must be a boolean primitive. Option: `' + opts.infinities + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
