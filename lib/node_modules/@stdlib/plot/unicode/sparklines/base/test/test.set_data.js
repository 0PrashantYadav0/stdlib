'use strict';

// MODULES //

var tape = require( 'tape' );
var Sparkline = require( './../lib' );
var setData = require( './../lib/set_data.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof setData, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided either an array or a typed array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		{},
		function(){}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			setData.call( {}, value );
		};
	}
});

tape( 'the function throws an error if a dataset whose length exceeds the window size', function test( t ) {
	var context;

	context = new Sparkline({
		'window': 3
	});

	t.throws( badValue, Error, 'throws an error' );
	t.end();

	function badValue() {
		setData.call( context, [1,2,3,4,5] );
	}
});

tape( 'the function sets chart data', function test( t ) {
	var expected;
	var context;
	var data;
	var v;

	data = [ 1, 2, 3 ];
	context = new Sparkline();

	setData.call( context, data );
	v = context.data;

	expected = [
		{'y':1},
		{'y':2},
		{'y':3}
	];

	t.deepEqual( v, expected, 'sets chart data' );
	t.end();
});
