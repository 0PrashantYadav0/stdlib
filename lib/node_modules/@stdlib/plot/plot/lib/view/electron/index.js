'use strict';

// MODULES //

var debug = require( 'debug' )( 'plot:view:electron:main' );
var spawn = require( 'child_process' ).spawn;
var electron = require( 'electron-prebuilt' );
var path = require( 'path' );
var toHTML = require( 'vdom-to-html' );
var readFileSync = require( '@stdlib/utils/fs/read-file' ).sync;
var httpServer = require( '@stdlib/tools/disposable-http-server' );


// VIEW //

/**
* Opens a plot in an electron window.
*
* @private
* @param {Plot} plot - plot context
* @param {VTree} vtree - virtual tree
*/
function view( plot, vtree ) {
	var index;
	var html;
	var opts;

	// Transform the virtual DOM tree to HTML:
	html = toHTML( vtree );

	// Inject the HTML:
	index = path.join( __dirname, 'index.html' );
	index = readFileSync( index, {
		'encoding': 'utf8'
	});

	index = index.replace( /\{\{plot\}\}/, html );

	debug( 'Creating a disposable HTTP server...' );
	opts = {
		'html': index,
		'open': false
	};
	httpServer( opts, onReady );

	/**
	* Callback invoked once a server is ready to receive requests.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Server} server - HTTP server
	*/
	function onReady( error, server ) {
		var child;
		var addr;
		var opts;
		if ( error ) {
			throw error;
		}
		addr = server.address();
		debug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );

		opts = {
			'cwd': __dirname,
			'detached': true,
			'stdio': 'ignore',
			'env': {
				'PORT': addr.port,
				'ADDRESS': addr.address,
				'WIDTH': plot.width,
				'HEIGHT': plot.height
			}
		};
		debug( 'Spawning an electron process with options: %s.', JSON.stringify( opts ) );

		child = spawn( electron, [ './main.js' ], opts );
		child.unref();
	} // end FUNCTION onReady()
} // end FUNCTION view()


// EXPORTS //

module.exports = view;
