'use strict';

var debug = require( 'debug' )( 'plot:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/utils/is-object' ); // TODO: plain object
var copy = require( '@stdlib/utils/copy' );
var mergeFcn = require( '@stdlib/utils/merge' ).factory;
var minstd = require( '@stdlib/math/base/random/minstd' );
var view = require( './view/view.js' );
var isDefined = require( './accessors/is_defined.js' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// FUNCTIONS //

var merge = mergeFcn({
	'extend': false
});


// PLOT //

/**
* Plot constructor.
*
* @constructor
* @param {Array} [x] - x-values
* @param {Array} [y] - y-values
* @param {Options} [options] - constructor options
* @param {Array} [options.x=[]] - x-values
* @param {Array} [options.y=[]] - y-values
* @param {(StringArray|EmptyArray)} [options.labels] - data labels
* @param {(string|StringArray)} [options.colors='category10'] - data colors
* @param {StringArray} [options.lineStyles=['-']] - data line styles
* @param {StringArray} [options.symbols=['none']] - data symbols
* @param {Function} [options.isDefined] - accessor indicating whether a datum is defined
* @param {PositiveNumber} [options.width=400] - plot width
* @param {PositiveNumber} [options.height=400] - plot height
* @param {NonNegativeInteger} [options.paddingLeft=90] - left padding
* @param {NonNegativeInteger} [options.paddingRight=20] - right padding
* @param {NonNegativeInteger} [options.paddingTop=80] - top padding
* @param {NonNegativeInteger} [options.paddingBottom=80] - bottom padding
* @param {(Date|FiniteNumber|null)} [options.xMin=null] - minimum value of x-axis domain
* @param {(Date|FiniteNumber|null)} [options.xMax=null] - maximum value of x-axis domain
* @param {(FiniteNumber|null)} [options.yMin=null] - minimum value of y-axis domain
* @param {(FiniteNumber|null)} [options.yMax=null] - maximum value of y-axis domain
* @param {string} [options.xScale='linear'] - x-axis scale
* @param {string} [options.yScale='linear'] - y-axis scale
* @param {(string|null)} [options.xTickFormat=null] - x-axis tick format
* @param {(string|null)} [options.yTickFormat=null] - y-axis tick format
* @param {(NonNegativeInteger|null)} [options.xNumTicks=5] - number of x-axis tick marks
* @param {(NonNegativeInteger|null)} [options.yNumTicks=5] - number of y-axis tick marks
* @param {string} [options.xAxisOrient='bottom'] - x-axis orientation
* @param {string} [options.yAxisOrient='left'] - y-axis orientation
* @param {string} [options.title=''] - plot title
* @param {string} [options.xLabel='x'] - x-axis label
* @param {string} [options.yLabel='y'] - y-axis label
* @param {string} [options.engine='svg'] - plot engine
* @param {string} [options.viewer='none'] - plot viewer
* @param {boolean} [options.autoRender=true] - indicates whether to re-render on a change event
* @param {boolean} [options.autoView=false] - indicates whether to generate an updated view on a render event
* @throws {TypeError} must provide valid options
* @returns {Plot} Plot instance
*
* @example
* var plot = new Plot();
*/
function Plot() {
	var options;
	var nargs;
	var self;
	var opts;
	var err;

	nargs = arguments.length;
	if ( !(this instanceof Plot) ) {
		if ( nargs === 0 ) {
			return new Plot();
		}
		if ( nargs === 1 ) {
			return new Plot( arguments[0] );
		}
		if ( nargs === 2 ) {
			return new Plot( arguments[0], arguments[1] );
		}
		return new Plot( arguments[0], arguments[1], arguments[2] );
	}
	self = this;
	opts = copy( defaults );
	if ( nargs === 0 ) {
		options = {};
	}
	else if ( nargs === 1 ) {
		options = arguments[ 0 ];
	}
	else if ( nargs === 2 ) {
		options = {
			'x': arguments[ 0 ],
			'y': arguments[ 1 ]
		};
	}
	else if ( nargs > 2 ) {
		if ( !isObject( arguments[2] ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an `object`. Value: `' + arguments[2] + '`.' );
		}
		options = copy( arguments[2] ); // avoid mutation
		options.x = arguments[ 0 ];
		options.y = arguments[ 1 ];
	}
	err = validate( options );
	if ( err ) {
		throw err;
	}
	opts = merge( opts, options );

	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );

	Object.defineProperty( this, '_xData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.x
	});
	Object.defineProperty( this, '_yData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.y
	});
	Object.defineProperty( this, '_isDefined', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.isDefined || isDefined
	});
	Object.defineProperty( this, '_labels', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.labels
	});
	Object.defineProperty( this, '_colors', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.colors
	});
	Object.defineProperty( this, '_lineStyles', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.lineStyles
	});
	Object.defineProperty( this, '_symbols', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.symbols
	});
	Object.defineProperty( this, '_width', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.width
	});
	Object.defineProperty( this, '_height', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.height
	});
	Object.defineProperty( this, '_paddingLeft', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingLeft // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingRight', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingRight // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingTop', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingTop // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingBottom', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingBottom // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_xMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xMin
	});
	Object.defineProperty( this, '_xMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xMax
	});
	Object.defineProperty( this, '_yMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yMin
	});
	Object.defineProperty( this, '_yMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yMax
	});
	Object.defineProperty( this, '_xScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xScale
	});
	Object.defineProperty( this, '_yScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yScale
	});
	Object.defineProperty( this, '_xAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xAxisOrient
	});
	Object.defineProperty( this, '_yAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yAxisOrient
	});
	Object.defineProperty( this, '_xNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xNumTicks
	});
	Object.defineProperty( this, '_yNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yNumTicks
	});
	Object.defineProperty( this, '_xTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xTickFormat
	});
	Object.defineProperty( this, '_yTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yTickFormat
	});
	Object.defineProperty( this, '_title', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.title
	});
	Object.defineProperty( this, '_xLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xLabel
	});
	Object.defineProperty( this, '_yLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yLabel
	});
	Object.defineProperty( this, '_engine', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.engine
	});
	Object.defineProperty( this, '_autoRender', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.autoRender
	});
	Object.defineProperty( this, '_viewer', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.viewer // TODO: set the default based on user context; e.g., if in browser, then not electron window
	});
	Object.defineProperty( this, '_autoView', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.autoView
	});

	// Set a clipping path id:
	Object.defineProperty( this, '_clipPathId', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});

	// Initialize an internal cache for renderers...
	Object.defineProperty( this, '$', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': {}
	});
	Object.defineProperty( this.$, 'svg', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': {}
	});

	// Add event listeners:
	this.on( 'change', onChange );
	this.on( 'render', onRender );

	return this;

	/**
	* Callback invoked upon receiving a change event.
	*
	* @private
	*/
	function onChange() {
		debug( 'Received a change event.' );
		if ( self._autoRender ) {
			self.render();
		}
	}

	/**
	* Callback invoked upon receiving a render event.
	*
	* @private
	* @param {*} plot - rendered plot
	*/
	function onRender( plot ) {
		debug( 'Received a render event.' );
		if ( self._autoView ) {
			debug( 'Viewer: %s.', self._viewer );
			debug( 'Generating view...' );
			view( self, self._viewer, plot );
		}
	}
} // end FUNCTION Plot()

/*
* Create a prototype which inherits from the parent prototype.
*/
Plot.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Plot.prototype.constructor = Plot;

/**
* `x` values.
*
* @memberof Plot.prototype
* @name x
* @type {Array}
* @default []
* @throws {TypeError} must be an array
*
* @example
* var plot = new Plot();
* plot.x = [[1417563950959,1417563952959]];
*
* @example
* var plot = new Plot({
*     'x': [[1417563950959,1417563952959]]
* });
* var x = plot.x;
* // returns [[1417563950959,1417563952959]]
*/
Object.defineProperty( Plot.prototype, 'x', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x/set.js' ),
	'get': require( './props/x/get.js' )
});

/**
* `y` values.
*
* @memberof Plot.prototype
* @name y
* @type {Array}
* @default []
* @throws {TypeError} must be an array
*
* @example
* var plot = new Plot();
* plot.x = [[1417563950959,1417563952959]];
* plot.y = [[0.25,0.23]];
*
* @example
* var plot = new Plot({
*     'x': [[1417563950959,1417563952959]],
*     'y': [[0.25,0.23]]
* });
* var y = plot.y;
* // returns [[0.25,0.23]]
*/
Object.defineProperty( Plot.prototype, 'y', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y/set.js' ),
	'get': require( './props/y/get.js' )
});

/**
* Accessor which defines whether a datum is defined. This accessor is used to define how missing values are encoded. The default behavior is to ignore values which are `NaN`.
*
* @memberof Plot.prototype
* @name isDefined
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var plot = new Plot();
* plot.isDefined = function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
*
* @example
* function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
* var plot = new Plot({
*     'isDefined': isDefined
* });
* var fcn = plot.isDefined;
* // returns <Function>
*/
Object.defineProperty( Plot.prototype, 'isDefined', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/is-defined/set.js' ),
	'get': require( './props/is-defined/get.js' )
});

/**
* Data colors.
*
* @memberof Plot.prototype
* @name colors
* @type {(string|StringArray)}
* @default 'category10'
* @throws {TypeError} must be either a string or an array of strings
* @throws {Error} must be a recognized color set
*
* @example
* var plot = new Plot();
* plot.colors = 'category20';
*
* @example
* var plot = new Plot({
*     'colors': 'category20'
* });
* var colors = plot.colors;
* // returns [...]
*/
Object.defineProperty( Plot.prototype, 'colors', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/colors/set.js' ),
	'get': require( './props/colors/get.js' )
});

/**
* Data labels.
*
* @memberof Plot.prototype
* @name labels
* @type {(StringArray|EmptyArray)}
* @default []
* @throws {TypeError} must be either an array of strings or an empty array
*
* @example
* var plot = new Plot();
* plot.labels = ['beep','boop'];
*
* @example
* var plot = new Plot({
*     'labels': ['beep','boop']
* });
* var labels = plot.labels;
* // returns ['beep','boop']
*/
Object.defineProperty( Plot.prototype, 'labels', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/labels/set.js' ),
	'get': require( './props/labels/get.js' )
});

/**
* Plot width.
*
* @memberof Plot.prototype
* @name width
* @type {PositiveNumber}
* @default 400 (px)
* @throws {TypeError} must be a positive number
*
* @example
* var plot = new Plot();
* plot.width = 100;
*
* @example
* var plot = new Plot({
*     'width': 480
* });
* var width = plot.width;
* // returns 480
*/
Object.defineProperty( Plot.prototype, 'width', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/width/set.js' ),
	'get': require( './props/width/get.js' )
});

/**
* Plot height.
*
* @memberof Plot.prototype
* @name height
* @type {PositiveNumber}
* @default 400 (px)
* @throws {TypeError} must be a positive number
*
* @example
* var plot = new Plot();
* plot.height = 100;
*
* @example
* var plot = new Plot({
*     'height': 360
* });
* var height = plot.height;
* // returns 360
*/
Object.defineProperty( Plot.prototype, 'height', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/height/set.js' ),
	'get': require( './props/height/get.js' )
});

/**
* Plot left padding. Typically used to create room for a left-oriented y-axis.
*
* @memberof Plot.prototype
* @name paddingLeft
* @type {NonNegativeInteger}
* @default 90 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Plot();
* plot.paddingLeft = 100;
*
* @example
* var plot = new Plot({
*     'paddingLeft': 100
* });
* var padding = plot.paddingLeft;
* // returns 100
*/
Object.defineProperty( Plot.prototype, 'paddingLeft', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-left/set.js' ),
	'get': require( './props/padding-left/get.js' )
});

/**
* Plot right padding. Typically used to create room for a right-oriented y-axis.
*
* @memberof Plot.prototype
* @name paddingRight
* @type {NonNegativeInteger}
* @default 20 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Plot();
* plot.paddingRight = 100;
*
* @example
* var plot = new Plot({
*     'paddingRight': 100
* });
* var padding = plot.paddingRight;
* // returns 100
*/
Object.defineProperty( Plot.prototype, 'paddingRight', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-right/set.js' ),
	'get': require( './props/padding-right/get.js' )
});

/**
* Plot top padding. Typically used to create room for a title or top-oriented x-axis.
*
* @memberof Plot.prototype
* @name paddingTop
* @type {NonNegativeInteger}
* @default 80 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Plot();
* plot.paddingTop = 100;
*
* @example
* var plot = new Plot({
*     'paddingTop': 100
* });
* var padding = plot.paddingTop;
* // returns 100
*/
Object.defineProperty( Plot.prototype, 'paddingTop', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-top/set.js' ),
	'get': require( './props/padding-top/get.js' )
});

/**
* Plot bottom padding. Typically used to create room for a bottom-oriented y-axis.
*
* @memberof Plot.prototype
* @name paddingBottom
* @type {NonNegativeInteger}
* @default 80 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Plot();
* plot.paddingBottom = 100;
*
* @example
* var plot = new Plot({
*     'paddingBottom': 100
* });
* var padding = plot.paddingBottom;
* // returns 100
*/
Object.defineProperty( Plot.prototype, 'paddingBottom', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-bottom/set.js' ),
	'get': require( './props/padding-bottom/get.js' )
});

/**
* Minimum value of the x-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `x` data.
*
* @memberof Plot.prototype
* @name xMin
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Plot();
* plot.xMin = -1.0;
*
* @example
* var plot = new Plot({
*     'xMin': -10.0
* });
* var xmin = plot.xMin;
* // returns -10.0
*/
Object.defineProperty( Plot.prototype, 'xMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-min/set.js' ),
	'get': require( './props/x-min/get.js' )
});

/**
* Maximum value of the x-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `x` data.
*
* @memberof Plot.prototype
* @name xMax
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Plot();
* plot.xMax = 100.0;
*
* @example
* var plot = new Plot({
*     'xMax': 10.0
* });
* var xmax = plot.xMax;
* // returns 10.0
*/
Object.defineProperty( Plot.prototype, 'xMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-max/set.js' ),
	'get': require( './props/x-max/get.js' )
});

/**
* Minimum value of the y-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `y` data.
*
* @memberof Plot.prototype
* @name yMin
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Plot();
* plot.yMin = -100.0;
*
* @example
* var plot = new Plot({
*     'yMin': 3.14
* });
* var ymin = plot.yMin;
* // returns 3.14
*/
Object.defineProperty( Plot.prototype, 'yMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-min/set.js' ),
	'get': require( './props/y-min/get.js' )
});

/**
* Maximum value of the y-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `y` data.
*
* @memberof Plot.prototype
* @name yMax
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Plot();
* plot.yMax = 100.0;
*
* @example
* var plot = new Plot({
*     'yMax': 31.4
* });
* var ymax = plot.yMax;
* // returns 31.4
*/
Object.defineProperty( Plot.prototype, 'yMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-max/set.js' ),
	'get': require( './props/y-max/get.js' )
});

/**
* Scale function for mapping values to a coordinate along the x-axis. When retrieved, the returned value is a scale function.
*
* @memberof Plot.prototype
* @type {string}
* @name xScale
* @default 'linear'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Plot();
* plot.xScale = 'time';
*
* @example
* var plot = new Plot({
*     'xScale': 'time'
* });
* var scale = plot.xScale;
* // returns <Function>
*/
Object.defineProperty( Plot.prototype, 'xScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-scale/get.js' ),
	'set': require( './props/x-scale/set.js' )
});

/**
* Scale function for mapping values to a coordinate along the y-axis. When retrieved, the returned value is a scale function.
*
* @memberof Plot.prototype
* @type {string}
* @name yScale
* @default 'linear'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Plot();
* plot.yScale = 'linear';
*
* @example
* var plot = new Plot({
*     'yScale': 'linear'
* });
* var scale = plot.yScale;
* // returns <Function>
*/
Object.defineProperty( Plot.prototype, 'yScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-scale/get.js' ),
	'set': require( './props/y-scale/set.js' )
});

/**
* x-axis tick format. If the value is not `null`, when retrieved, the returned value is a formatting function.
*
* @memberof Plot.prototype
* @name xTickFormat
* @type {(string|null)}
* @default null
* @throws {TypeError} must be a string primitive or null
*
* @example
* var plot = new Plot();
* plot.xScale = 'time';
* plot.xTickFormat = '%H:%M';
*
* @example
* var plot = new Plot({
*     'xScale': 'time',
*     'xTickFormat': '%H:%M'
* });
* var fmt = plot.xTickFormat;
* // returns '%H:%M'
*/
Object.defineProperty( Plot.prototype, 'xTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-tick-format/set.js' ),
	'get': require( './props/x-tick-format/get.js' )
});

/**
* y-axis tick format. If the value is not `null`, when retrieved, the returned value is a formatting function.
*
* @memberof Plot.prototype
* @name yTickFormat
* @type {(string|null)}
* @default null
* @throws {TypeError} must be a string primitive or null
*
* @example
* var plot = new Plot();
* plot.yTickFormat = '%%';
*
* @example
* var plot = new Plot({
*     'yTickFormat': '%%'
* });
* var fmt = plot.yTickFormat;
* // returns '%%'
*/
Object.defineProperty( Plot.prototype, 'yTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-tick-format/set.js' ),
	'get': require( './props/y-tick-format/get.js' )
});

/**
* Number of x-axis tick marks.
*
* @memberof Plot.prototype
* @name xNumTicks
* @type {(NonNegativeInteger|null)}
* @default 5
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var plot = new Plot();
* plot.xNumTicks = 10;
*
* @example
* var plot = new Plot({
*     'xNumTicks': 10
* });
* var ticks = plot.xNumTicks;
* // returns 10
*/
Object.defineProperty( Plot.prototype, 'xNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-num-ticks/set.js' ),
	'get': require( './props/x-num-ticks/get.js' )
});

/**
* Number of y-axis tick marks.
*
* @memberof Plot.prototype
* @name yNumTicks
* @type {(NonNegativeInteger|null)}
* @default 5
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var plot = new Plot();
* plot.yNumTicks = 10;
*
* @example
* var plot = new Plot({
*     'yNumTicks': 10
* });
* var ticks = plot.yNumTicks;
* // returns 10
*/
Object.defineProperty( Plot.prototype, 'yNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-num-ticks/set.js' ),
	'get': require( './props/y-num-ticks/get.js' )
});

/**
* x-axis orientation.
*
* @memberof Plot.prototype
* @name xAxisOrient
* @type {string}
* @default 'bottom'
* @throws {TypeError} must be either `'top'` or `'bottom'`
*
* @example
* var plot = new Plot();
* plot.xAxisOrient = 'bottom';
*
* @example
* var plot = new Plot({
*     'xAxisOrient': 'bottom'
* });
* var orientation = plot.xAxisOrient;
* // returns 'bottom'
*/
Object.defineProperty( Plot.prototype, 'xAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-axis-orient/set.js' ),
	'get': require( './props/x-axis-orient/get.js' )
});

/**
* y-axis orientation.
*
* @memberof Plot.prototype
* @name yAxisOrient
* @type {string}
* @default 'left'
* @throws {TypeError} must be either `'left'` or `'right'`
*
* @example
* var plot = new Plot();
* plot.yAxisOrient = 'left';
*
* @example
* var plot = new Plot({
*     'yAxisOrient': 'left'
* });
* var orientation = plot.yAxisOrient;
* // returns 'left'
*/
Object.defineProperty( Plot.prototype, 'yAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-axis-orient/set.js' ),
	'get': require( './props/y-axis-orient/get.js' )
});

/**
* Plot title.
*
* @memberof Plot.prototype
* @name title
* @type {string}
* @default ''
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Plot();
* plot.title = 'Time Series';
*
* @example
* var plot = new Plot({
*     'title': 'Time Series'
* });
* var t = plot.title;
* // returns 'Time Series'
*/
Object.defineProperty( Plot.prototype, 'title', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/title/set.js' ),
	'get': require( './props/title/get.js' )
});

/**
* x-axis label.
*
* @memberof Plot.prototype
* @name xLabel
* @type {string}
* @default 'x'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Plot();
* plot.xLabel = 'time';
*
* @example
* var plot = new Plot({
*     'xLabel': 'time'
* });
* var xLabel = plot.xLabel;
* // returns 'time'
*/
Object.defineProperty( Plot.prototype, 'xLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-label/set.js' ),
	'get': require( './props/x-label/get.js' )
});

/**
* y-axis label.
*
* @memberof Plot.prototype
* @name yLabel
* @type {string}
* @default 'y'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Plot();
* plot.yLabel = 'value';
*
* @example
* var plot = new Plot({
*     'yLabel': 'value'
* });
* var yLabel = plot.yLabel;
* // returns 'value'
*/
Object.defineProperty( Plot.prototype, 'yLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-label/set.js' ),
	'get': require( './props/y-label/get.js' )
});

/**
* Plot engine.
*
* @memberof Plot.prototype
* @name engine
* @type {string}
* @default 'svg'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Plot();
* plot.engine = 'svg';
*
* @example
* var plot = new Plot({
*     'engine': 'svg'
* });
* var engine = plot.engine;
* // returns 'svg'
*/
Object.defineProperty( Plot.prototype, 'engine', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/engine/set.js' ),
	'get': require( './props/engine/get.js' )
});

/**
* Rendering mode. If `true`, an instance re-renders on each change event.
*
* @memberof Plot.prototype
* @name autoRender
* @type {boolean}
* @default true
* @throws {TypeError} must be a boolean primitive
*
* @example
* var plot = new Plot({
*     'autoRender': true
* });
*
* var mode = plot.autoRender;
* // returns true
*/
Object.defineProperty( Plot.prototype, 'autoRender', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/auto-render/set.js' ),
	'get': require( './props/auto-render/get.js' )
});

/**
* Plot viewer.
*
* @memberof Plot.prototype
* @name viewer
* @type {string}
* @default 'none'
* @throws {TypeError} must be a recognized viewer
*
* @example
* var plot = new Plot();
* plot.viewer = 'none';
*
* @example
* var plot = new Plot({
*     'viewer': 'none'
* });
* var viewer = plot.engine;
* // returns 'none'
*/
Object.defineProperty( Plot.prototype, 'viewer', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/viewer/set.js' ),
	'get': require( './props/viewer/get.js' )
});

/**
* Viewer mode. If `true`, an instance generates an updated view on each render event.
*
* @memberof Plot.prototype
* @name autoView
* @type {boolean}
* @default false
* @throws {TypeError} must be a boolean primitive
*
* @example
* var plot = new Plot({
*     'autoView': false
* });
*
* var mode = plot.autoView;
* // returns false
*/
Object.defineProperty( Plot.prototype, 'autoView', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/auto-view/set.js' ),
	'get': require( './props/auto-view/get.js' )
});

/**
* Expected graph width.
*
* @memberof Plot.prototype
* @type {number}
* @name graphWidth
*
* @example
* var plot = new Plot({
*     'width': 100,
*     'paddingLeft': 10,
*     'paddingRight': 10
* });
* var width = plot.graphWidth;
* // returns 80
*/
Object.defineProperty( Plot.prototype, 'graphWidth', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/graph-width/get.js' )
});

/**
* Expected graph height.
*
* @memberof Plot.prototype
* @type {number}
* @name graphHeight
*
* @example
* var plot = new Plot({
*     'height': 100,
*     'paddingTop': 10,
*     'paddingBottom': 20
* });
* var height = plot.graphHeight;
* // returns 70
*/
Object.defineProperty( Plot.prototype, 'graphHeight', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/graph-height/get.js' )
});

/**
* x-axis domain.
*
* @memberof Plot.prototype
* @type {NumberArray}
* @name xDomain
*
* @example
* var plot = new Plot({
*     'x': [[1,2,3,2]]
* });
* var domain = plot.xDomain;
* // returns [1,3]
*/
Object.defineProperty( Plot.prototype, 'xDomain', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-domain/get.js' )
});

/**
* y-axis domain.
*
* @memberof Plot.prototype
* @type {NumberArray}
* @name yDomain
*
* @example
* var plot = new Plot({
*     'y': [[1,2,3,2]]
* });
* var domain = plot.yDomain;
* // returns [1,3]
*/
Object.defineProperty( Plot.prototype, 'yDomain', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-domain/get.js' )
});

/**
* x-axis range.
*
* @memberof Plot.prototype
* @type {NumberArray}
* @name xRange
*
* @example
* var plot = new Plot({
*     'width': 100,
*     'paddingLeft': 10,
*     'paddingRight': 10
* });
* var range = plot.xRange;
* // returns [0,80]
*/
Object.defineProperty( Plot.prototype, 'xRange', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-range/get.js' )
});

/**
* y-axis range.
*
* @memberof Plot.prototype
* @type {NumberArray}
* @name yRange
*
* @example
* var plot = new Plot({
*     'height': 100,
*     'paddingTop': 10,
*     'paddingBottom': 20
* });
* var range = plot.yRange;
* // returns [70,0]
*/
Object.defineProperty( Plot.prototype, 'yRange', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-range/get.js' )
});

/**
* Function to map values to x-axis coordinate values.
*
* @memberof Plot.prototype
* @type {Function}
* @name xPos
*
* @example
* var plot = new Plot();
* var xPos = plot.xPos;
* // returns <Function>
*/
Object.defineProperty( Plot.prototype, 'xPos', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-pos/get.js' )
});

/**
* Function to map values to y-axis coordinate values.
*
* @memberof Plot.prototype
* @type {Function}
* @name yPos
*
* @example
* var plot = new Plot();
* var yPos = plot.yPos;
* // returns <Function>
*/
Object.defineProperty( Plot.prototype, 'yPos', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-pos/get.js' )
});

/**
* Renders a plot as a virtual DOM tree.
*
* @memberof Plot.prototype
* @name render
* @type {Function}
* @returns {VTree} virtual tree
*
* @example
* var plot = new Plot();
* plot.x = [[1,2,3]];
* plot.y = [[1,0,1]];
*
* var out = plot.render();
*/
setReadOnly( Plot.prototype, 'render', require( './render' ) );

/**
* Generates a plot view.
*
* @memberof Plot.prototype
* @name view
* @type {Function}
* @param {string} [viewer]
* @throws {TypeError} must provide a recognized viewer
*
* @example
* var plot = new Plot();
* plot.x = [[1,2,3]];
* plot.y = [[1,0,1]];
*
* plot.view( 'stdout' );
*/
setReadOnly( Plot.prototype, 'view', require( './view' ) );


// EXPORTS //

module.exports = Plot;
