'use strict';

// MODULES //

var debug = require( 'debug' )( 'plot:render:svg:marks' );
var Path = require( '@stdlib/plot/components/svg/path' );
var Symbols = require( '@stdlib/plot/components/svg/symbols' );


// RENDER //

/**
* Renders individual marks.
*
* @private
* @param {Object} state - state
* @returns {VTree} virtual tree
*/
function render( state ) {
	var lineStyles;
	var lineStyle;
	var numStyles;
	var numColors;
	var isDefined;
	var numSyms;
	var symbols;
	var symSize;
	var symbol;
	var xScale;
	var yScale;
	var parent;
	var labels;
	var colors;
	var line;
	var sym;
	var len;
	var x;
	var y;
	var i;
	var j;

	debug( 'Rendering marks group...' );
	parent = state.$.svg.marks.render();

	x = state.x;
	len = x.length;
	if ( len === 0 ) {
		debug( 'No individual marks to render.' );
		return parent;
	}
	y = state.y;
	xScale = state.xScale;
	yScale = state.yScale;
	isDefined = state.isDefined;
	labels = state.labels;
	colors = state.colors;
	lineStyles = [ '-' ]; //state.lineStyles; FIXME
	symbols = state.symbols;
	symSize = state.symbolSize;

	numStyles = lineStyles.length;
	numColors = colors.length;
	numSyms = symbols.length;

	debug( 'Rendering individual marks...' );
	for ( i = 0; i < len; i++ ) {
		line = null;
		sym = null;

		j = i + 1;
		debug( 'Rendering data %d of %d...', j, len );

		lineStyle = lineStyles[ i%numStyles ];
		debug( 'Line style: %s (%d).', lineStyle, j );

		// Lines...
		if ( lineStyle === '-' ) {
			debug( 'Rendering data as a line (%d)...', j );
			line = new Path({
				'x': x[ i ],
				'y': y[ i ],
				'xScale': xScale,
				'yScale': yScale,
				'isDefined': isDefined,
				'label': labels[ i ] || '',
				'color': colors[ i%numColors ] || '',
				'autoRender': false
			});
			line = line.render();
		}

		symbol = symbols[ i%numSyms ];
		debug( 'Symbol: %s (%d).', symbol, j );

		// Symbols...
		if ( symbol !== 'none' ) {
			debug( 'Rendering data as symbols (%d)...', j );
			sym = new Symbols({
				'symbol': symbol,
				'x': x[ i ],
				'y': y[ i ],
				'xScale': xScale,
				'yScale': yScale,
				'isDefined': isDefined,
				'label': labels[ i ] || '',
				'color': colors[ i%numColors ] || '',
				'size': symSize,
				'autoRender': false
			});
			sym = sym.render();
		}
		if ( !line && !sym ) {
			debug( 'Unable to render data %d of %d.', j, len );
			continue;
		}
		debug( 'Finished rendering data %d of %d.', j, len );

		debug( 'Inserting data marks (%d) into marks group...', j );
		if ( line ) {
			parent.children.push( line );
			parent.count += line.count;
		}
		if ( sym ) {
			parent.children.push( sym );
			parent.count += sym.count;
		}
	}
	debug( 'Finished rendering marks.' );
	return parent;
} // end FUNCTION render()


// EXPORTS //

module.exports = render;
