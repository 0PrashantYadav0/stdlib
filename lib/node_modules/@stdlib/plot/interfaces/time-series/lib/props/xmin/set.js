'use strict';

// MODULES //

var debug = require( 'debug' )( 'time-series:set:xmin' );
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isNull = require( '@stdlib/utils/is-null' );
var isnan = require( '@stdlib/utils/is-nan' ).isPrimitive;
var events = require( './../../events' );


// VARIABLES //

var CHANGE_EVENT = events( 'xMin' );


// SET //

/**
* Sets the minimum value of the x-axis domain.
*
* @private
* @param {(FiniteNumber|null)} min - minimum value
* @throws {TypeError} must be a finite number primitive or null
*/
function set( min ) {
	/*jshint validthis: true */ // TODO: eslint

	// FIXME: check for finite number primitive
	// FIXME: allow `Date` objects
	if ( !isNumber( min ) && !isNull( min ) ) {
		throw new TypeError( 'invalid value. `xMin` must be a finite number primitive or null. Value: `' + min + '`.' );
	}
	if ( !isNull( min ) ) {
		min = new Date( min ).getTime();
		if ( isnan( min ) ) {
			throw new TypeError( 'invalid value. `xMin` must evaluate to a valid `Date` object. Value: `' + min + '`.' );
		}
	}
	debug( 'Current value: %s.', this._xMin );

	this._xMin = min;
	debug( 'New value: %s.', this._xMin );

	this.emit( CHANGE_EVENT );
} // end FUNCTION set()


// EXPORTS //

module.exports = set;
