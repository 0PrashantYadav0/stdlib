'use strict';

// MODULES //

var debug = require( 'debug' )( 'time-series:ctor' );
var EventEmitter = require( 'events' ).EventEmitter;
var copy = require( '@stdlib/utils/copy' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );
var aValue = require( './accessors/avalue.js' );
var isDefined = require( './accessors/is_defined.js' );


// TIME SERIES //

/**
* Time series constructor.
*
* @constructor
* @param {Options} [options] - time series options
* @param TODO
* @throws {TypeError} must provide valid options
* @returns {TimeSeries} time series instance
*
* @example
* TODO
*/
function TimeSeries( options ) {
	var opts;
	var err;
	if ( !(this instanceof TimeSeries) ) {
		if ( arguments.length ) {
			return new TimeSeries( options );
		}
		return new TimeSeries();
	}
	opts = copy( defaults );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating a new time series with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_xData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.x
	});
	Object.defineProperty( this, '_yData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.y
	});
	Object.defineProperty( this, '_labels', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.labels
	});
	Object.defineProperty( this, '_annotations', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.annotations
	});
	Object.defineProperty( this, '_isDefined', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.isDefined || isDefined
	});
	Object.defineProperty( this, '_aValue', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.aValue || aValue
	});
	Object.defineProperty( this, '_width', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.width
	});
	Object.defineProperty( this, '_height', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.height
	});
	Object.defineProperty( this, '_paddingLeft', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingLeft
	});
	Object.defineProperty( this, '_paddingRight', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingRight
	});
	Object.defineProperty( this, '_paddingTop', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingTop
	});
	Object.defineProperty( this, '_paddingBottom', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingBottom
	});
	Object.defineProperty( this, '_xMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xMin
	});
	Object.defineProperty( this, '_xMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xMax
	});
	Object.defineProperty( this, '_yMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yMin
	});
	Object.defineProperty( this, '_yMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yMax
	});
	Object.defineProperty( this, '_xTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xTickFormat
	});
	Object.defineProperty( this, '_yTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yTickFormat
	});
	Object.defineProperty( this, '_xNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xNumTicks
	});
	Object.defineProperty( this, '_yNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yNumTicks
	});
	Object.defineProperty( this, '_xAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xAxisOrient
	});
	Object.defineProperty( this, '_yAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yAxisOrient
	});
	Object.defineProperty( this, '_title', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.title
	});
	Object.defineProperty( this, '_xLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xLabel
	});
	Object.defineProperty( this, '_yLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yLabel
	});
	Object.defineProperty( this, '_interpolation', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.interpolation
	});
	Object.defineProperty( this, '_tension', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tension
	});

	return this;
} // end FUNCTION TimeSeries()

/*
* Create a prototype which inherits from the parent prototype.
*/
TimeSeries.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
TimeSeries.prototype.constructor = TimeSeries;

/**
* Plot x-values.
*
* @memberof TimeSeries.prototype
* @name x
* @type {(EmptyArray|NumericArray)}
* @default []
* @throws {TypeError} must be an empty array or a numeric array
*
* @example
* var plot = new TimeSeries();
* plot.x = [1417563950959,1417563952959];
*
* @example
* var plot = new TimeSeries({
*     'x': [1417563950959,1417563952959]
* });
* var x = plot.x;
* // returns [1417563950959,1417563952959]
*/
Object.defineProperty( TimeSeries.prototype, 'x', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x/set.js' ),
	'get': require( './props/x/get.js' )
});

/**
* Plot y-values.
*
* @memberof TimeSeries.prototype
* @name y
* @type {(Array|Array<NumericArray>)}
* @default []
* @throws {TypeError} must be either an empty array or an array of numeric arrays
*
* @example
* var plot = new TimeSeries();
* plot.x = [1417563950959,1417563952959];
* plot.y = [[0.25,0.23]];
*
* @example
* var plot = new TimeSeries({
*     'x': [1417563950959,1417563952959],
*     'y': [[0.25,0.23]]
* });
* var y = plot.y;
* // returns [[0.25,0.23]]
*/
Object.defineProperty( TimeSeries.prototype, 'y', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y/set.js' ),
	'get': require( './props/y/get.js' )
});

/**
* Plot annotations.
*
* @memberof TimeSeries.prototype
* @name annotations
* @type {Array}
* @default []
* @throws {TypeError} must be an array
*
* @example
* var plot = new TimeSeries();
* plot.annotations = [[1417563950959,'alert 1'],[1417563956959,'alert 2']];
*
* @example
* var plot = new TimeSeries({
*     'annotations': [[1417563950959,'alert 1'],[1417563956959,'alert 2']]
* });
* var vals = plot.annotations;
* // returns [[1417563950959,'alert 1'],[1417563956959,'alert 2']]
*/
Object.defineProperty( TimeSeries.prototype, 'annotations', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/annotations/set.js' ),
	'get': require( './props/annotations/get.js' )
});

/**
* Data labels corresponding to each time series.
*
* @memberof TimeSeries.prototype
* @name labels
* @type {(StringArray|EmptyArray)}
* @throws {TypeError} must be either an array of strings or an empty array
*
* @example
* var plot = new TimeSeries();
* plot.labels = ['beep','boop'];
*
* @example
* var plot = new TimeSeries({
*     'labels': ['beep','boop']
* });
* var labels = plot.labels;
* // returns ['beep','boop']
*/
Object.defineProperty( TimeSeries.prototype, 'labels', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/labels/set.js' ),
	'get': require( './props/labels/get.js' )
});

/**
* Accessor which defines where a time series is defined. This accessor is used to define how missing values are encoded. The default behavior is to ignore data points or y-values which are `null`.
*
* @memberof TimeSeries.prototype
* @name isDefined
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var plot = new TimeSeries();
* plot.isDefined = function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
*
* @example
* function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
* var plot = new TimeSeries({
*     'isDefined': isDefined
* });
* var fcn = plot.isDefined;
* // returns <Function>
*/
Object.defineProperty( TimeSeries.prototype, 'isDefined', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/is-defined/set.js' ),
	'get': require( './props/is-defined/get.js' )
});

/**
* Annotation accessor.
*
* @memberof TimeSeries.prototype
* @name aValue
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var plot = new TimeSeries();
* plot.aValue = function aValue( d ) {
*     return d.annotation
* }
*
* @example
* function aValue( d ) {
*     return d.annotation;
* }
* var plot = new TimeSeries({
*     'aValue': aValue
* });
* var fcn = plot.aValue;
* // returns <Function>
*/
Object.defineProperty( TimeSeries.prototype, 'aValue', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/avalue/set.js' ),
	'get': require( './props/avalue/get.js' )
});

/**
* Plot width.
*
* @memberof TimeSeries.prototype
* @name width
* @type {PositiveNumber}
* @throws {TypeError} must be a positive number
*
* @example
* var plot = new TimeSeries();
* plot.width = 100;
*
* @example
* var plot = new TimeSeries({
*     'width': 480
* });
* var width = plot.width;
* // returns 480
*/
Object.defineProperty( TimeSeries.prototype, 'width', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/width/set.js' ),
	'get': require( './props/width/get.js' )
});

/**
* Plot height.
*
* @memberof TimeSeries.prototype
* @name height
* @type {PositiveNumber}
* @throws {TypeError} must be a positive number
*
* @example
* var plot = new TimeSeries();
* plot.height = 100;
*
* @example
* var plot = new TimeSeries({
*     'height': 360
* });
* var height = plot.height;
* // returns 360
*/
Object.defineProperty( TimeSeries.prototype, 'height', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/height/set.js' ),
	'get': require( './props/height/get.js' )
});

/**
* Plot left padding. Typically needed to create room for a left-oriented y-axis.
*
* @memberof TimeSeries.prototype
* @name paddingLeft
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new TimeSeries();
* plot.paddingLeft = 100;
*
* @example
* var plot = new TimeSeries({
*     'paddingLeft': 100
* });
* var padding = plot.paddingLeft;
* // returns 100
*/
Object.defineProperty( TimeSeries.prototype, 'paddingLeft', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-left/set.js' ),
	'get': require( './props/padding-left/get.js' )
});

/**
* Plot right padding. Typically needed to create room for a right-oriented y-axis.
*
* @memberof TimeSeries.prototype
* @name paddingRight
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new TimeSeries();
* plot.paddingRight = 100;
*
* @example
* var plot = new TimeSeries({
*     'paddingRight': 100
* });
* var padding = plot.paddingRight;
* // returns 100
*/
Object.defineProperty( TimeSeries.prototype, 'paddingRight', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-right/set.js' ),
	'get': require( './props/padding-right/get.js' )
});

/**
* Plot top padding. Typically needed to create room for a plot title or top-oriented x-axis.
*
* @memberof TimeSeries.prototype
* @name paddingTop
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new TimeSeries();
* plot.paddingTop = 100;
*
* @example
* var plot = new TimeSeries({
*     'paddingTop': 100
* });
* var padding = plot.paddingTop;
* // returns 100
*/
Object.defineProperty( TimeSeries.prototype, 'paddingTop', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-top/set.js' ),
	'get': require( './props/padding-top/get.js' )
});

/**
* Plot bottom padding. Typically needed to create room for a bottom-oriented y-axis.
*
* @memberof TimeSeries.prototype
* @name paddingBottom
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new TimeSeries();
* plot.paddingBottom = 100;
*
* @example
* var plot = new TimeSeries({
*     'paddingBottom': 100
* });
* var padding = plot.paddingBottom;
* // returns 100
*/
Object.defineProperty( TimeSeries.prototype, 'paddingBottom', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-bottom/set.js' ),
	'get': require( './props/padding-bottom/get.js' )
});

/**
* Minimum value of the x-axis domain.
*
* @memberof TimeSeries.prototype
* @name xMin
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new TimeSeries();
* plot.xMin = -1.0;
*
* @example
* var plot = new TimeSeries({
*     'xMin': -10.0
* });
* var xmin = plot.xMin;
* // returns -10.0
*/
Object.defineProperty( TimeSeries.prototype, 'xMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/xmin/set.js' ),
	'get': require( './props/xmin/get.js' )
});

/**
* Maximum value of the x-axis domain.
*
* @memberof TimeSeries.prototype
* @name xMax
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new TimeSeries();
* plot.xMax = 100.0;
*
* @example
* var plot = new TimeSeries({
*     'xMax': 10.0
* });
* var xmax = plot.xMax;
* // returns 10.0
*/
Object.defineProperty( TimeSeries.prototype, 'xMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/xmax/set.js' ),
	'get': require( './props/xmax/get.js' )
});

/**
* Minimum value of the y-axis domain.
*
* @memberof TimeSeries.prototype
* @name yMin
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new TimeSeries();
* plot.yMin = -100.0;
*
* @example
* var plot = new TimeSeries({
*     'yMin': 3.14
* });
* var ymin = plot.yMin;
* // returns 3.14
*/
Object.defineProperty( TimeSeries.prototype, 'yMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ymin/set.js' ),
	'get': require( './props/ymin/get.js' )
});

/**
* Maximum value of the y-axis domain.
*
* @memberof TimeSeries.prototype
* @name yMax
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new TimeSeries();
* plot.yMax = 100.0;
*
* @example
* var plot = new TimeSeries({
*     'yMax': 31.4
* });
* var ymax = plot.yMax;
* // returns 31.4
*/
Object.defineProperty( TimeSeries.prototype, 'yMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ymax/set.js' ),
	'get': require( './props/ymax/get.js' )
});

/**
* x-axis tick format.
*
* @memberof TimeSeries.prototype
* @name xTickFormat
* @type {string}
* @default '%H:%M'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new TimeSeries();
* plot.xTickFormat = '%H:%M';
*
* @example
* var plot = new TimeSeries({
*     'xTickFormat': '%H:%M'
* });
* var fmt = plot.xTickFormat;
* // returns '%H:%M'
*/
Object.defineProperty( TimeSeries.prototype, 'xTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/xtickformat/set.js' ),
	'get': require( './props/xtickformat/get.js' )
});

/**
* y-axis tick format.
*
* @memberof TimeSeries.prototype
* @name yTickFormat
* @type {(string|null)}
* @default null
* @throws {TypeError} must be a string primitive or null
*
* @example
* var plot = new TimeSeries();
* plot.yTickFormat = '%%';
*
* @example
* var plot = new TimeSeries({
*     'yTickFormat': '%%'
* });
* var fmt = plot.yTickFormat;
* // returns '%%'
*/
Object.defineProperty( TimeSeries.prototype, 'yTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ytickformat/set.js' ),
	'get': require( './props/ytickformat/get.js' )
});

/**
* Number of x-axis tick marks.
*
* @memberof TimeSeries.prototype
* @name xNumTicks
* @type {(NonNegativeInteger|null)}
* @default null
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var plot = new TimeSeries();
* plot.xNumTicks = 10;
*
* @example
* var plot = new TimeSeries({
*     'xNumTicks': 10
* });
* var ticks = plot.xNumTicks;
* // returns 10
*/
Object.defineProperty( TimeSeries.prototype, 'xNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/xnumticks/set.js' ),
	'get': require( './props/xnumticks/get.js' )
});

/**
* Number of y-axis tick marks.
*
* @memberof TimeSeries.prototype
* @name yNumTicks
* @type {(NonNegativeInteger|null)}
* @default null
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var plot = new TimeSeries();
* plot.yNumTicks = 10;
*
* @example
* var plot = new TimeSeries({
*     'yNumTicks': 10
* });
* var ticks = plot.yNumTicks;
* // returns 10
*/
Object.defineProperty( TimeSeries.prototype, 'yNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ynumticks/set.js' ),
	'get': require( './props/ynumticks/get.js' )
});

/**
* x-axis tick orientation.
*
* @memberof TimeSeries.prototype
* @name xAxisOrient
* @type {string}
* @default 'bottom'
* @throws {TypeError} must be either `'top'` or `'bottom'`
*
* @example
* var plot = new TimeSeries();
* plot.xAxisOrient = 'bottom';
*
* @example
* var plot = new TimeSeries({
*     'xAxisOrient': 'bottom'
* });
* var orientation = plot.xAxisOrient;
* // returns 'bottom'
*/
Object.defineProperty( TimeSeries.prototype, 'xAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/xaxisorient/set.js' ),
	'get': require( './props/xaxisorient/get.js' )
});

/**
* y-axis tick orientation.
*
* @memberof TimeSeries.prototype
* @name yAxisOrient
* @type {string}
* @default 'left'
* @throws {TypeError} must be either `'left'` or `'right'`
*
* @example
* var plot = new TimeSeries();
* plot.yAxisOrient = 'left';
*
* @example
* var plot = new TimeSeries({
*     'yAxisOrient': 'left'
* });
* var orientation = plot.yAxisOrient;
* // returns 'left'
*/
Object.defineProperty( TimeSeries.prototype, 'yAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/yaxisorient/set.js' ),
	'get': require( './props/yaxisorient/get.js' )
});

/**
* Plot title.
*
* @memberof TimeSeries.prototype
* @name title
* @type {string}
* @default ''
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new TimeSeries();
* plot.title = 'Time Series';
*
* @example
* var plot = new TimeSeries({
*     'title': 'Time Series'
* });
* var t = plot.title;
* // returns 'Time Series'
*/
Object.defineProperty( TimeSeries.prototype, 'title', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/title/set.js' ),
	'get': require( './props/title/get.js' )
});

/**
* x-axis label.
*
* @memberof TimeSeries.prototype
* @name xLabel
* @type {string}
* @default 'x'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new TimeSeries();
* plot.xLabel = 'time';
*
* @example
* var plot = new TimeSeries({
*     'xLabel': 'time'
* });
* var xLabel = plot.xLabel;
* // returns 'time'
*/
Object.defineProperty( TimeSeries.prototype, 'xLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/xlabel/set.js' ),
	'get': require( './props/xlabel/get.js' )
});

/**
* y-axis label.
*
* @memberof TimeSeries.prototype
* @name yLabel
* @type {string}
* @default 'y'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new TimeSeries();
* plot.yLabel = 'value';
*
* @example
* var plot = new TimeSeries({
*     'yLabel': 'value'
* });
* var yLabel = plot.yLabel;
* // returns 'value'
*/
Object.defineProperty( TimeSeries.prototype, 'yLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ylabel/set.js' ),
	'get': require( './props/ylabel/get.js' )
});

/**
* Interpolation mode.
*
* @memberof TimeSeries.prototype
* @name interpolation
* @type {string}
* @default 'linear'
* @throws {TypeError} must be recognized mode
*
* @example
* var plot = new TimeSeries();
* plot.interpolation = 'step';
*
* @example
* var plot = new TimeSeries({
*     'interpolation': 'step'
* });
* var mode = plot.interpolation;
* // returns 'step'
*/
Object.defineProperty( TimeSeries.prototype, 'interpolation', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/interpolation/set.js' ),
	'get': require( './props/interpolation/get.js' )
});

/**
* Spline interpolation tension.
*
* @memberof TimeSeries.prototype
* @name tension
* @type {number}
* @default 0.7
* @throws {TypeError} must be a number primitive
*
* @example
* var plot = new TimeSeries();
* plot.tension = 0.8;
*
* @example
* var plot = new TimeSeries({
*     'tension': 0.8
* });
* var tension = plot.tension;
* // returns 0.8
*/
Object.defineProperty( TimeSeries.prototype, 'tension', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/tension/set.js' ),
	'get': require( './props/tension/get.js' )
});


// EXPORTS //

module.exports = TimeSeries;
