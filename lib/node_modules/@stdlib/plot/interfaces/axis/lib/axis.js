'use strict';

// MODULES //

var debug = require( 'debug' )( 'axis:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var copy = require( '@stdlib/utils/copy' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// AXIS //

/**
* Axis constructor.
*
* @private
* @constructor
* @param TODO
* @returns {Axis} axis instance
*
* @example
* TODO
*/
function Axis( options ) {
	var opts;
	var err;
	if ( !( this instanceof Axis ) ) {
		return new Axis( options );
	}
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	debug( 'Creating an axis interface with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_scale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.scale
	});
	Object.defineProperty( this, '_orientation', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.orientation
	});
	Object.defineProperty( this, '_ticks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.ticks
	});
	Object.defineProperty( this, '_numTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.numTicks
	});
	Object.defineProperty( this, '_tickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tickFormat
	});
	Object.defineProperty( this, '_tickSize', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tickSize
	});
	Object.defineProperty( this, '_tickSizeInner', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tickSizeInner
	});
	Object.defineProperty( this, '_tickSizeOuter', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tickSizeOuter
	});
	Object.defineProperty( this, '_tickPadding', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tickPadding
	});

	return this;
} // end FUNCTION Axis()

/**
* Axis scale.
*
* @memberof Axis.prototype
* @name scale
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'scale', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/scale/set.js' ),
	'get': require( './props/scale/get.js' )
});

/**
* Axis orientation.
*
* @memberof Axis.prototype
* @name orientation
* @type {string}
* @throws {TypeError} must be a string primitive
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'orientation', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/orientation/set.js' ),
	'get': require( './props/orientation/get.js' )
});

/**
* Axis tick values.
*
* @memberof Axis.prototype
* @name ticks
* @type {(Array|null)}
* @throws {TypeError} must be an array or null
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'ticks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ticks/set.js' ),
	'get': require( './props/ticks/get.js' )
});

/**
* Number of axis ticks.
*
* @memberof Axis.prototype
* @name numTicks
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'numTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/numticks/set.js' ),
	'get': require( './props/numticks/get.js' )
});

/**
* Tick format.
*
* @memberof Axis.prototype
* @name tickFormat
* @type {(null|string|Function)}
* @throws {TypeError} must be either null, a string, or a function
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'tickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/tickformat/set.js' ),
	'get': require( './props/tickformat/get.js' )
});

/**
* Axis tick size.
*
* @memberof Axis.prototype
* @name tickSize
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'tickSize', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ticksize/set.js' ),
	'get': require( './props/ticksize/get.js' )
});

/**
* Axis inner tick size.
*
* @memberof Axis.prototype
* @name tickSizeInner
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'tickSizeInner', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ticksize-inner/set.js' ),
	'get': require( './props/ticksize-inner/get.js' )
});

/**
* Axis outer tick size.
*
* @memberof Axis.prototype
* @name tickSizeOuter
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'tickSizeOuter', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/ticksize-outer/set.js' ),
	'get': require( './props/ticksize-outer/get.js' )
});

/**
* Axis tick padding.
*
* @memberof Axis.prototype
* @name tickPadding
* @type {NonNegativeInteger}
* @throws {TypeError} must be a nonnegative integer
*
* @example
* TODO
*/
Object.defineProperty( Axis.prototype, 'tickPadding', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/tickpadding/set.js' ),
	'get': require( './props/tickpadding/get.js' )
});


// EXPORTS //

module.exports = Axis;
