'use strict';

var toHTML = require( 'vdom-to-html' );
var randn = require( '@stdlib/math/base/random/box-muller' );
var createPlot = require( '@stdlib/plot/interfaces/time-series' );
var timeseries = require( './../lib' );

var now;
var x;
var y;
var i;

// Create some data...
now = ( new Date() ).getTime();
x = new Uint32Array( 100 );
y = new Float64Array( x.length );
for ( i = 0; i < x.length; i++ ) {
	x[ i ] = now + i;
	y[ i ] = 50.0 + 10.0*randn();
}

// Create a new plot interface:
var plot = createPlot();

plot.x = x;
plot.y = [ y ];
plot.width = 600;
plot.height = 480;

// Initialize a plot engine:
var engine = timeseries({
	'state': plot
});

// Render a plot as a virtual DOM tree:
var vtree = engine.render();
console.log( JSON.stringify( vtree ) );

// Transform the virtual DOM tree to HTML:
var html = toHTML( vtree );
console.log( html );

// Listen for 'render' events (e.g., when triggered due to changes in state):
engine.on( 'render', onRender );

setTimeout( update, 1000 );

function update() {
	plot.width = 720;
}

function onRender( vtree ) {
	console.log( toHTML( vtree ) );
}
