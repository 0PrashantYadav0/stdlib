'use strict';

// MODULES //

var debug = require( 'debug' )( 'time-series-engine:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var scales = require( 'd3-scale' );
var shapes = require( 'd3-shape' );
var d3 = require( 'd3' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var minstd = require( '@stdlib/math/base/random/minstd' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );


// TIME SERIES ENGINE //

/**
* Time series engine constructor.
*
* @constructor
* @param {Object} state - engine state
* @param {Options} [options] - constructor options
* TODO
* @throws {TypeError} must provide valid options
* @returns {Engine}
*
* @example
* var engine = new TimeSeriesEngine( TODO );
*/
function TimeSeriesEngine( state, options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof TimeSeriesEngine ) ) {
		if ( arguments.length > 1 ) {
			return new TimeSeriesEngine( state, options );
		}
		return new TimeSeriesEngine( state );
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating a time series engine with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	// Public, read-only properties...
	setReadOnly( this, 'state', state );
	setReadOnly( this, 'opts', opts );
	setReadOnly( this, 'xScale', scales.scaleTime() );
	setReadOnly( this, 'yScale', scales.scaleLinear() );
	setReadOnly( this, 'xAxis', d3.svg.axis() ); // TODO: replace
	setReadOnly( this, 'yAxis', d3.svg.axis() ); // TODO: replace
	setReadOnly( this, 'line', shapes.line() );

	// Public, non-configurable properties...
	Object.defineProperty( this, 'xTickFormat', {
		'configurable': false,
		'enumerable': true,
		'writable': true,
		'value': null
	});
	Object.defineProperty( this, 'yTickFormat', {
		'configurable': false,
		'enumerable': true,
		'writable': true,
		'value': null
	});

	// "Private" properties...
	Object.defineProperty( this, '__uid__', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});
	Object.defineProperty( this, '_clipPathID', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});

	// Synchronize the engine state:
	this.sync();

	// Bind a listener to update on state changes:
	this.state.on( 'change', onChange );

	return this;

	function onChange() {
		self.sync();
		self.render();
	}
} // end FUNCTION TimeSeriesEngine()

/*
* Create a prototype which inherits from the parent prototype.
*/
TimeSeriesEngine.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
TimeSeriesEngine.prototype.constructor = TimeSeriesEngine;

// TODO: document
setReadOnly( TimeSeriesEngine.prototype, 'graphWidth', require( './methods/graphwidth.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'graphHeight', require( './methods/graphheight.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'xPos', require( './methods/xpos.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'yPos', require( './methods/ypos.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'xMin', require( './methods/xmin.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'xMax', require( './methods/xmax.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'xDomain', require( './methods/xdomain.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'xRange', require( './methods/xrange.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'yMin', require( './methods/ymin.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'yMax', require( './methods/ymax.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'yDomain', require( './methods/ydomain.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'yRange', require( './methods/yrange.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'triangle', require( './methods/triangle.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'vline', require( './methods/vline.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'sync', require( './methods/sync.js' ) );

setReadOnly( TimeSeriesEngine.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = TimeSeriesEngine;
