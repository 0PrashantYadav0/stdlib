'use strict';

// MODULES //

var debug = require( 'debug' )( 'time-series:main' );
var isObject = require( '@stdlib/utils/is-object' ); // TODO: plain object
var merge = require( '@stdlib/utils/merge' );
var Line = require( '@stdlib/plot/line' );
var defaults = require( './defaults.json' );


// TIME SERIES //

/**
* line constructor.
*
* @constructor
* @param {Options} [options] - constructor options
* @param {(EmptyArray|NumericArray|DateArray)} [options.x=[]] - x-values
* @param {(Array|Array<NumericArray)} [options.y=[]] - y-values
* @param {Array} [options.annotations=[]] - annotations
* @param {(StringArray|EmptyArray)} [options.labels] - data labels
* @param {Function} [options.isDefined] - accessor indicating whether a datum is defined
* @param {Function} [options.aValue] - annotation accessor
* @param {PositiveNumber} [options.width=400] - plot width
* @param {PositiveNumber} [options.height=400] - plot height
* @param {NonNegativeInteger} [options.paddingLeft=90] - left padding
* @param {NonNegativeInteger} [options.paddingRight=20] - right padding
* @param {NonNegativeInteger} [options.paddingTop=80] - top padding
* @param {NonNegativeInteger} [options.paddingBottom=80] - bottom padding
* @param {(Date|FiniteNumber|null)} [options.xMin=null] - minimum value of x-axis domain
* @param {(Date|FiniteNumber|null)} [options.xMax=null] - maximum value of x-axis domain
* @param {(FiniteNumber|null)} [options.yMin=null] - minimum value of y-axis domain
* @param {(FiniteNumber|null)} [options.yMax=null] - maximum value of y-axis domain
* @param {string} [options.yScale='linear'] - y-axis scale
* @param {string} [options.xTickFormat='%H:%M'] - x-axis tick format
* @param {(string|null)} [options.yTickFormat=null] - y-axis tick format
* @param {(NonNegativeInteger|null)} [options.xNumTicks=5] - number of x-axis tick marks
* @param {(NonNegativeInteger|null)} [options.yNumTicks=5] - number of y-axis tick marks
* @param {string} [options.xAxisOrient='bottom'] - x-axis orientation
* @param {string} [options.yAxisOrient='left'] - y-axis orientation
* @param {string} [options.title=''] - plot title
* @param {string} [options.xLabel='x'] - x-axis label
* @param {string} [options.yLabel='y'] - y-axis label
* @param {string} [options.interpolation='linear'] - interpolation mode
* @param {number} [options.tension=0.7] - spline interpolation tension
* @param {string} [options.engine='svg'] - plot engine
* @throws {TypeError} must provide valid options
* @returns {TimeSeries} TimeSeries instance
*
* @example
* var timeseries = new TimeSeries();
*/
function TimeSeries( options ) {
	var opts;
	if ( !(this instanceof TimeSeries) ) {
		if ( arguments.length ) {
			return new TimeSeries( options );
		}
		return new TimeSeries();
	}
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Must provide an object. Value: `' + options + '`.' );
		}
		opts = options;
	} else {
		opts = {};
	}
	opts = merge( {}, defaults, opts );

	// Always override the `xScale` option:
	opts.xScale = 'time';

	debug( 'Creating a plot with the following configuration: %s.', JSON.stringify( opts ) );
	Line.call( this, opts );

	return this;
} // end FUNCTION TimeSeries()

/*
* Create a prototype which inherits from the parent prototype.
*/
TimeSeries.prototype = Object.create( Line.prototype );

/*
* Set the constructor.
*/
TimeSeries.prototype.constructor = TimeSeries;

/**
* Scale function for mapping values to a coordinate along the x-axis.
*
* @memberof TimeSeries.prototype
* @type {Function}
* @name xScale
* @throws {Error} cannot set x-axis scale
*
* @example
* var plot = new TimeSeries();
*
* var scale = plot.xScale;
* // returns <Function>
*/
Object.defineProperty( TimeSeries.prototype, 'xScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-scale/get.js' ),
	'set': require( './props/x-scale/set.js' )
});


// EXPORTS //

module.exports = TimeSeries;
