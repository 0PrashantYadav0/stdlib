'use strict';

// MODULES //

var debug = require( 'debug' )( 'time-series:engine' );
var EventEmitter = require( 'events' ).EventEmitter;
var shapes = require( 'd3-shape' ); // TODO: remove
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var minstd = require( '@stdlib/math/base/random/minstd' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );


// TIME SERIES ENGINE //

/**
* Time series engine constructor.
*
* @constructor
* @param {Object} state - engine state
* @param {Options} [options] - engine options
* @throws {TypeError} must provide valid options
* @returns {TimeSeriesEngine} engine instance
*/
function TimeSeriesEngine( state, options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof TimeSeriesEngine ) ) {
		if ( arguments.length > 1 ) {
			return new TimeSeriesEngine( state, options );
		}
		return new TimeSeriesEngine( state );
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating a time series engine with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	// Public, read-only properties...
	setReadOnly( this, 'state', state );
	setReadOnly( this, 'opts', opts );
	setReadOnly( this, 'line', shapes.line() );

	// "Private" properties...
	Object.defineProperty( this, '__uid__', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});
	Object.defineProperty( this, '_clipPathID', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});

	// Bind a listener to update on state changes:
	this.state.on( 'change', onChange );

	return this;

	function onChange() {
		debug( 'Received a change event.' );
		self.render();
	}
} // end FUNCTION TimeSeriesEngine()

/*
* Create a prototype which inherits from the parent prototype.
*/
TimeSeriesEngine.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
TimeSeriesEngine.prototype.constructor = TimeSeriesEngine;

/**
* Returns a function to generate triangles SVG paths.
*
* @memberof TimeSeriesEngine.prototype
* @type {Function}
* @name triangle
* @returns {Function} triangle generation function
*/
setReadOnly( TimeSeriesEngine.prototype, 'triangle', require( './methods/triangle.js' ) );

/**
* Returns a function to generate vertical lines.
*
* @memberof TimeSeriesEngine.prototype
* @type {Function}
* @name vline
* @returns {Function} vertical line generation function
*/
setReadOnly( TimeSeriesEngine.prototype, 'vline', require( './methods/vline.js' ) );

/**
* Renders a time series plot.
*
* @memberof TimeSeriesEngine.prototype
* @type {Function}
* @name render
* @returns {VTree} virtual tree
*/
setReadOnly( TimeSeriesEngine.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = TimeSeriesEngine;
