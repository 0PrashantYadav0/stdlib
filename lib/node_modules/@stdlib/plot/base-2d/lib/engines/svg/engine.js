'use strict';

// MODULES //

var debug = require( 'debug' )( 'base-2d:engine' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// BASE ENGINE //

/**
* Base engine constructor.
*
* @constructor
* @param {Object} state - engine state
* @returns {BaseEngine} engine instance
*/
function BaseEngine( state ) {
	var self;
	if ( !( this instanceof BaseEngine ) ) {
		return new BaseEngine( state );
	}
	self = this;

	debug( 'Creating an engine...' );
	EventEmitter.call( this );

	// Public, read-only properties...
	setReadOnly( this, 'state', state );

	// Bind a listener to update on state changes:
	this.state.on( 'change', onChange );

	return this;

	function onChange() {
		debug( 'Received a change event.' );

		// Check for a change in engine...
		if ( self.state.__engine__ !== self ) {
			debug( 'No longer using engine for rendering. Removing listener...' );
			return self.state.removeListener( 'change', onChange );
		}
		self.render();
	}
} // end FUNCTION BaseEngine()

/*
* Create a prototype which inherits from the parent prototype.
*/
BaseEngine.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
BaseEngine.prototype.constructor = BaseEngine;

/**
* Renders a plot.
*
* @memberof BaseEngine.prototype
* @type {Function}
* @name render
* @returns {VTree} virtual tree
*/
setReadOnly( BaseEngine.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = BaseEngine;
