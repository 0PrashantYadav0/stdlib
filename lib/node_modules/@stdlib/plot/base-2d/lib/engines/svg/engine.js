'use strict';

// MODULES //

var debug = require( 'debug' )( 'base-2d:engine' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var minstd = require( '@stdlib/math/base/random/minstd' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );


// BASE ENGINE //

/**
* Base engine constructor.
*
* @constructor
* @param {Object} state - engine state
* @param {Options} [options] - engine options
* @throws {TypeError} must provide valid options
* @returns {BaseEngine} engine instance
*/
function BaseEngine( state, options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof BaseEngine ) ) {
		if ( arguments.length > 1 ) {
			return new BaseEngine( state, options );
		}
		return new BaseEngine( state );
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating an engine with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	// Public, read-only properties...
	setReadOnly( this, 'state', state );

	// "Private" properties...
	Object.defineProperty( this, '_opts', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': opts
	});
	Object.defineProperty( this, '__uid__', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});
	Object.defineProperty( this, '_clipPathID', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': minstd().toString() // TODO: uuid
	});

	// Bind a listener to update on state changes:
	this.state.on( 'change', onChange );

	return this;

	function onChange() {
		debug( 'Received a change event.' );
		self.render();
	}
} // end FUNCTION BaseEngine()

/*
* Create a prototype which inherits from the parent prototype.
*/
BaseEngine.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
BaseEngine.prototype.constructor = BaseEngine;

/**
* SVG transform for translating an x-axis.
*
* @memberof BaseEngine.prototype
* @type {string}
* @name xAxisTransform
*/
Object.defineProperty( BaseEngine.prototype, 'xAxisTransform', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-axis-transform/get.js' )
});

/**
* SVG transform for translating a y-axis.
*
* @memberof BaseEngine.prototype
* @type {string}
* @name yAxisTransform
*/
Object.defineProperty( BaseEngine.prototype, 'yAxisTransform', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-axis-transform/get.js' )
});

/**
* Renders a plot base.
*
* @memberof BaseEngine.prototype
* @type {Function}
* @name render
* @returns {VTree} virtual tree
*/
setReadOnly( BaseEngine.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = BaseEngine;
