'use strict';

// MODULES //

var debug = require( 'debug' )( 'base:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var createEngine = require( './engines' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// BASE //

/**
* Plot base constructor.
*
* @constructor
* @param {Options} [options] - constructor options
* @param {(Array|TypedArray)} [options.x=[]] - x-values
* @param {(Array|TypedArray)} [options.y=[]] - y-values
* @param {(StringArray|EmptyArray)} [options.labels] - data labels
* @param {PositiveNumber} [options.width=400] - plot width
* @param {PositiveNumber} [options.height=400] - plot height
* @param {NonNegativeInteger} [options.paddingLeft=90] - left padding
* @param {NonNegativeInteger} [options.paddingRight=20] - right padding
* @param {NonNegativeInteger} [options.paddingTop=80] - top padding
* @param {NonNegativeInteger} [options.paddingBottom=80] - bottom padding
* @param {string} [options.xScale='linear'] - x-axis scale
* @param {string} [options.yScale='linear'] - y-axis scale
* @param {(string|null)} [options.xTickFormat=null] - x-axis tick format
* @param {(string|null)} [options.yTickFormat=null] - y-axis tick format
* @param {(NonNegativeInteger|null)} [options.xNumTicks=5] - number of x-axis tick marks
* @param {(NonNegativeInteger|null)} [options.yNumTicks=5] - number of y-axis tick marks
* @param {string} [options.xAxisOrient='bottom'] - x-axis orientation
* @param {string} [options.yAxisOrient='left'] - y-axis orientation
* @param {string} [options.title=''] - plot title
* @param {string} [options.xLabel='x'] - x-axis label
* @param {string} [options.yLabel='y'] - y-axis label
* @param {string} [options.engine='svg'] - plot engine
* @throws {TypeError} must provide valid options
* @returns {Base} Base instance
*
* @example
* var base = new Base();
*/
function Base( options ) {
	var self;
	var opts;
	var err;
	if ( !(this instanceof Base) ) {
		if ( arguments.length ) {
			return new Base( options );
		}
		return new Base();
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_xData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.x
	});
	Object.defineProperty( this, '_yData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.y
	});
	Object.defineProperty( this, '_labels', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.labels
	});
	Object.defineProperty( this, '_width', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.width
	});
	Object.defineProperty( this, '_height', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.height
	});
	Object.defineProperty( this, '_paddingLeft', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingLeft // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingRight', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingRight // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingTop', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingTop // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingBottom', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingBottom // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_xScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xScale
	});
	Object.defineProperty( this, '_yScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yScale
	});
	Object.defineProperty( this, '_xAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xAxisOrient
	});
	Object.defineProperty( this, '_yAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yAxisOrient
	});
	Object.defineProperty( this, '_xNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xNumTicks
	});
	Object.defineProperty( this, '_yNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yNumTicks
	});
	Object.defineProperty( this, '_xTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xTickFormat
	});
	Object.defineProperty( this, '_yTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yTickFormat
	});
	Object.defineProperty( this, '_title', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.title
	});
	Object.defineProperty( this, '_xLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xLabel
	});
	Object.defineProperty( this, '_yLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yLabel
	});
	Object.defineProperty( this, '_engine', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.engine
	});
	Object.defineProperty( this, '__engine__', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});

	// Initialize an engine:
	this.__engine__ = createEngine( this._engine, this ); // TODO: options?

	// Listen for 'render' events:
	this.__engine__.on( 'render', onRender );

	return this;

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
} // end FUNCTION Base()

/*
* Create a prototype which inherits from the parent prototype.
*/
Base.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Base.prototype.constructor = Base;

/**
* `x` values.
*
* @memberof Base.prototype
* @name x
* @type {(Array|TypedArray)}
* @default []
* @throws {TypeError} must be an array or typed array
*
* @example
* var plot = new Base();
* plot.x = [1417563950959,1417563952959];
*
* @example
* var plot = new Base({
*     'x': [1417563950959,1417563952959]
* });
* var x = plot.x;
* // returns [1417563950959,1417563952959]
*/
Object.defineProperty( Base.prototype, 'x', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x/set.js' ),
	'get': require( './props/x/get.js' )
});

/**
* `y` values.
*
* @memberof Base.prototype
* @name y
* @type {(Array|TypedArray)}
* @default []
* @throws {TypeError} must be either an array or typed array
*
* @example
* var plot = new Base();
* plot.x = [1417563950959,1417563952959];
* plot.y = [0.25,0.23];
*
* @example
* var plot = new Base({
*     'x': [1417563950959,1417563952959],
*     'y': [0.25,0.23]
* });
* var y = plot.y;
* // returns [0.25,0.23]
*/
Object.defineProperty( Base.prototype, 'y', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y/set.js' ),
	'get': require( './props/y/get.js' )
});

/**
* Data labels.
*
* @memberof Base.prototype
* @name labels
* @type {(StringArray|EmptyArray)}
* @default []
* @throws {TypeError} must be either an array of strings or an empty array
*
* @example
* var plot = new Base();
* plot.labels = ['beep','boop'];
*
* @example
* var plot = new Base({
*     'labels': ['beep','boop']
* });
* var labels = plot.labels;
* // returns ['beep','boop']
*/
Object.defineProperty( Base.prototype, 'labels', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/labels/set.js' ),
	'get': require( './props/labels/get.js' )
});

/**
* Plot width.
*
* @memberof Base.prototype
* @name width
* @type {PositiveNumber}
* @default 400 (px)
* @throws {TypeError} must be a positive number
*
* @example
* var plot = new Base();
* plot.width = 100;
*
* @example
* var plot = new Base({
*     'width': 480
* });
* var width = plot.width;
* // returns 480
*/
Object.defineProperty( Base.prototype, 'width', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/width/set.js' ),
	'get': require( './props/width/get.js' )
});

/**
* Plot height.
*
* @memberof Base.prototype
* @name height
* @type {PositiveNumber}
* @default 400 (px)
* @throws {TypeError} must be a positive number
*
* @example
* var plot = new Base();
* plot.height = 100;
*
* @example
* var plot = new Base({
*     'height': 360
* });
* var height = plot.height;
* // returns 360
*/
Object.defineProperty( Base.prototype, 'height', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/height/set.js' ),
	'get': require( './props/height/get.js' )
});

/**
* Plot left padding. Typically used to create room for a left-oriented y-axis.
*
* @memberof Base.prototype
* @name paddingLeft
* @type {NonNegativeInteger}
* @default 90 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Base();
* plot.paddingLeft = 100;
*
* @example
* var plot = new Base({
*     'paddingLeft': 100
* });
* var padding = plot.paddingLeft;
* // returns 100
*/
Object.defineProperty( Base.prototype, 'paddingLeft', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-left/set.js' ),
	'get': require( './props/padding-left/get.js' )
});

/**
* Plot right padding. Typically used to create room for a right-oriented y-axis.
*
* @memberof Base.prototype
* @name paddingRight
* @type {NonNegativeInteger}
* @default 20 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Base();
* plot.paddingRight = 100;
*
* @example
* var plot = new Base({
*     'paddingRight': 100
* });
* var padding = plot.paddingRight;
* // returns 100
*/
Object.defineProperty( Base.prototype, 'paddingRight', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-right/set.js' ),
	'get': require( './props/padding-right/get.js' )
});

/**
* Plot top padding. Typically used to create room for a title or top-oriented x-axis.
*
* @memberof Base.prototype
* @name paddingTop
* @type {NonNegativeInteger}
* @default 80 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Base();
* plot.paddingTop = 100;
*
* @example
* var plot = new Base({
*     'paddingTop': 100
* });
* var padding = plot.paddingTop;
* // returns 100
*/
Object.defineProperty( Base.prototype, 'paddingTop', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-top/set.js' ),
	'get': require( './props/padding-top/get.js' )
});

/**
* Plot bottom padding. Typically used to create room for a bottom-oriented y-axis.
*
* @memberof Base.prototype
* @name paddingBottom
* @type {NonNegativeInteger}
* @default 80 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var plot = new Base();
* plot.paddingBottom = 100;
*
* @example
* var plot = new Base({
*     'paddingBottom': 100
* });
* var padding = plot.paddingBottom;
* // returns 100
*/
Object.defineProperty( Base.prototype, 'paddingBottom', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-bottom/set.js' ),
	'get': require( './props/padding-bottom/get.js' )
});

/**
* Scale function for mapping values to a coordinate along the x-axis. When retrieved, the returned value is a scale function.
*
* @memberof Base.prototype
* @type {string}
* @name xScale
* @default 'linear'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Base();
* plot.xScale = 'time';
*
* @example
* var plot = new Base({
*     'xScale': 'time'
* });
* var scale = plot.xScale;
* // returns <Function>
*/
Object.defineProperty( Base.prototype, 'xScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-scale/get.js' ),
	'set': require( './props/x-scale/set.js' )
});

/**
* Scale function for mapping values to a coordinate along the y-axis. When retrieved, the returned value is a scale function.
*
* @memberof Base.prototype
* @type {string}
* @name yScale
* @default 'linear'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Base();
* plot.yScale = 'linear';
*
* @example
* var plot = new Base({
*     'yScale': 'linear'
* });
* var scale = plot.yScale;
* // returns <Function>
*/
Object.defineProperty( Base.prototype, 'yScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-scale/get.js' ),
	'set': require( './props/y-scale/set.js' )
});

/**
* x-axis tick format. If the value is not `null`, when retrieved, the returned value is a formatting function.
*
* @memberof Base.prototype
* @name xTickFormat
* @type {(string|null)}
* @default null
* @throws {TypeError} must be a string primitive or null
*
* @example
* var plot = new Base();
* plot.xTickFormat = '%H:%M';
*
* @example
* var plot = new Base({
*     'xTickFormat': '%H:%M'
* });
* var fmt = plot.xTickFormat;
* // returns '%H:%M'
*/
Object.defineProperty( Base.prototype, 'xTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-tick-format/set.js' ),
	'get': require( './props/x-tick-format/get.js' )
});

/**
* y-axis tick format. If the value is not `null`, when retrieved, the returned value is a formatting function.
*
* @memberof Base.prototype
* @name yTickFormat
* @type {(string|null)}
* @default null
* @throws {TypeError} must be a string primitive or null
*
* @example
* var plot = new Base();
* plot.yTickFormat = '%%';
*
* @example
* var plot = new Base({
*     'yTickFormat': '%%'
* });
* var fmt = plot.yTickFormat;
* // returns '%%'
*/
Object.defineProperty( Base.prototype, 'yTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-tick-format/set.js' ),
	'get': require( './props/y-tick-format/get.js' )
});

/**
* Number of x-axis tick marks.
*
* @memberof Base.prototype
* @name xNumTicks
* @type {(NonNegativeInteger|null)}
* @default 5
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var plot = new Base();
* plot.xNumTicks = 10;
*
* @example
* var plot = new Base({
*     'xNumTicks': 10
* });
* var ticks = plot.xNumTicks;
* // returns 10
*/
Object.defineProperty( Base.prototype, 'xNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-num-ticks/set.js' ),
	'get': require( './props/x-num-ticks/get.js' )
});

/**
* Number of y-axis tick marks.
*
* @memberof Base.prototype
* @name yNumTicks
* @type {(NonNegativeInteger|null)}
* @default 5
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var plot = new Base();
* plot.yNumTicks = 10;
*
* @example
* var plot = new Base({
*     'yNumTicks': 10
* });
* var ticks = plot.yNumTicks;
* // returns 10
*/
Object.defineProperty( Base.prototype, 'yNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-num-ticks/set.js' ),
	'get': require( './props/y-num-ticks/get.js' )
});

/**
* x-axis orientation.
*
* @memberof Base.prototype
* @name xAxisOrient
* @type {string}
* @default 'bottom'
* @throws {TypeError} must be either `'top'` or `'bottom'`
*
* @example
* var plot = new Base();
* plot.xAxisOrient = 'bottom';
*
* @example
* var plot = new Base({
*     'xAxisOrient': 'bottom'
* });
* var orientation = plot.xAxisOrient;
* // returns 'bottom'
*/
Object.defineProperty( Base.prototype, 'xAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-axis-orient/set.js' ),
	'get': require( './props/x-axis-orient/get.js' )
});

/**
* y-axis orientation.
*
* @memberof Base.prototype
* @name yAxisOrient
* @type {string}
* @default 'left'
* @throws {TypeError} must be either `'left'` or `'right'`
*
* @example
* var plot = new Base();
* plot.yAxisOrient = 'left';
*
* @example
* var plot = new Base({
*     'yAxisOrient': 'left'
* });
* var orientation = plot.yAxisOrient;
* // returns 'left'
*/
Object.defineProperty( Base.prototype, 'yAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-axis-orient/set.js' ),
	'get': require( './props/y-axis-orient/get.js' )
});

/**
* Plot title.
*
* @memberof Base.prototype
* @name title
* @type {string}
* @default ''
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Base();
* plot.title = 'Time Series';
*
* @example
* var plot = new Base({
*     'title': 'Time Series'
* });
* var t = plot.title;
* // returns 'Time Series'
*/
Object.defineProperty( Base.prototype, 'title', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/title/set.js' ),
	'get': require( './props/title/get.js' )
});

/**
* x-axis label.
*
* @memberof Base.prototype
* @name xLabel
* @type {string}
* @default 'x'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Base();
* plot.xLabel = 'time';
*
* @example
* var plot = new Base({
*     'xLabel': 'time'
* });
* var xLabel = plot.xLabel;
* // returns 'time'
*/
Object.defineProperty( Base.prototype, 'xLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-label/set.js' ),
	'get': require( './props/x-label/get.js' )
});

/**
* y-axis label.
*
* @memberof Base.prototype
* @name yLabel
* @type {string}
* @default 'y'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Base();
* plot.yLabel = 'value';
*
* @example
* var plot = new Base({
*     'yLabel': 'value'
* });
* var yLabel = plot.yLabel;
* // returns 'value'
*/
Object.defineProperty( Base.prototype, 'yLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-label/set.js' ),
	'get': require( './props/y-label/get.js' )
});

/**
* Plot engine.
*
* @memberof Base.prototype
* @name engine
* @type {string}
* @default 'svg'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Base();
* plot.engine = 'svg';
*
* @example
* var plot = new Base({
*     'engine': 'svg'
* });
* var engine = plot.engine;
* // returns 'svg'
*/
Object.defineProperty( Base.prototype, 'engine', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/engine/set.js' ),
	'get': require( './props/engine/get.js' )
});

/**
* Expected graph width.
*
* @memberof Base.prototype
* @type {number}
* @name graphWidth
*
* @example
* var plot = new Base({
*     'width': 100,
*     'paddingLeft': 10,
*     'paddingRight': 10
* });
* var width = plot.graphWidth;
* // returns 80
*/
Object.defineProperty( Base.prototype, 'graphWidth', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/graph-width/get.js' )
});

/**
* Expected graph height.
*
* @memberof Base.prototype
* @type {number}
* @name graphHeight
*
* @example
* var plot = new Base({
*     'height': 100,
*     'paddingTop': 10,
*     'paddingBottom': 20
* });
* var height = plot.graphHeight;
* // returns 70
*/
Object.defineProperty( Base.prototype, 'graphHeight', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/graph-height/get.js' )
});

/**
* x-axis range.
*
* @memberof Base.prototype
* @type {NumberArray}
* @name xRange
*
* @example
* var plot = new Base({
*     'width': 100,
*     'paddingLeft': 10,
*     'paddingRight': 10
* });
* var range = plot.xRange;
* // returns [0,80]
*/
Object.defineProperty( Base.prototype, 'xRange', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-range/get.js' )
});

/**
* y-axis range.
*
* @memberof Base.prototype
* @type {NumberArray}
* @name yRange
*
* @example
* var plot = new Base({
*     'height': 100,
*     'paddingTop': 10,
*     'paddingBottom': 20
* });
* var range = plot.yRange;
* // returns [70,0]
*/
Object.defineProperty( Base.prototype, 'yRange', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-range/get.js' )
});

/**
* Function to map values to x-axis coordinate values.
*
* @memberof Base.prototype
* @type {Function}
* @name xPos
*
* @example
* var plot = new Base();
* var xPos = plot.xPos;
* // returns <Function>
*/
Object.defineProperty( Base.prototype, 'xPos', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-pos/get.js' )
});

/**
* Function to map values to y-axis coordinate values.
*
* @memberof Base.prototype
* @type {Function}
* @name yPos
*
* @example
* var plot = new Base();
* var yPos = plot.yPos;
* // returns <Function>
*/
Object.defineProperty( Base.prototype, 'yPos', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-pos/get.js' )
});

/**
* x-axis.
*
* @memberof Base.prototype
* @type {Axis}
* @name xAxis
*
* @example
* var plot = new Base();
* var axis = plot.xAxis;
*/
Object.defineProperty( Base.prototype, 'xAxis', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-axis/get.js' )
});

/**
* y-axis.
*
* @memberof Base.prototype
* @type {Axis}
* @name yAxis
*
* @example
* var plot = new Base();
* var axis = plot.yAxis;
*/
Object.defineProperty( Base.prototype, 'yAxis', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-axis/get.js' )
});

/**
* Renders a plot.
*
* @memberof Base.prototype
* @name render
* @type {Function}
* @returns {*} rendered plot
*
* @example
* var plot = new Base();
* plot.x = [1,2,3];
* plot.y = [1,0,1];
*
* var out = plot.render();
*/
setReadOnly( Base.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Base;
