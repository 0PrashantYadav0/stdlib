'use strict';

// MODULES //

var logger = require( 'debug' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// VARIABLES //

var debug = logger( 'canvas:main' );


// MAIN //

/**
* Canvas constructor.
*
* @constructor
* @param {Options} options - constructor options
* @param {PositiveNumber} [options.width=400] - width
* @param {PositiveNumber} [options.height=400] - height
* @param {boolean} [options.autoRender=true] - indicates whether to re-render on a change event
* @throws {TypeError} must provide valid options
* @returns {Canvas} canvas instance
*
* @example
* var canvas = new Canvas({
*     'width': 500,
*     'height': 500
* });
*/
function Canvas( options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof Canvas ) ) {
		return new Canvas( options );
	}
	self = this;
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_width', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.width
	});
	Object.defineProperty( this, '_height', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.height
	});
	Object.defineProperty( this, '_autoRender', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.autoRender
	});

	this.on( 'change', onChange );
	this.on( '_render', onRender );

	return this;

	/**
	* Callback invoked upon receiving a change event.
	*
	* @private
	*/
	function onChange() {
		debug( 'Received a change event.' );
		if ( self._autoRender ) { // eslint-disable-line no-underscore-dangle
			self.render();
		}
	}

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
}

/*
* Create a prototype which inherits from the parent prototype.
*/
Canvas.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Canvas.prototype.constructor = Canvas;

/**
* Width.
*
* @memberof Canvas.prototype
* @name width
* @type {PositiveNumber}
* @default 400
* @throws {TypeError} must be a positive number
*
* @example
* var canvas = new Canvas({
*     'width': 500
* });
*
* var width = canvas.width;
* // returns 500
*/
Object.defineProperty( Canvas.prototype, 'width', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/width/set.js' ),
	'get': require( './props/width/get.js' )
});

/**
* Height.
*
* @memberof Canvas.prototype
* @name height
* @type {PositiveNumber}
* @default 400
* @throws {TypeError} must be a positive number
*
* @example
* var canvas = new Canvas({
*     'height': 500
* });
*
* var height = canvas.height;
* // returns 500
*/
Object.defineProperty( Canvas.prototype, 'height', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/height/set.js' ),
	'get': require( './props/height/get.js' )
});

/**
* Rendering mode. If `true`, an instance re-renders on each change event.
*
* @memberof Canvas.prototype
* @name autoRender
* @type {boolean}
* @default true
* @throws {TypeError} must be a boolean primitive
*
* @example
* var canvas = new Canvas({
*     'autoRender': true
* });
*
* var mode = canvas.autoRender;
* // returns true
*/
Object.defineProperty( Canvas.prototype, 'autoRender', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/auto-render/set.js' ),
	'get': require( './props/auto-render/get.js' )
});

/**
* Renders a virtual DOM tree.
*
* @memberof Canvas.prototype
* @name render
* @type {Function}
* @returns {VTree} virtual tree
*
* @example
* var canvas = new Canvas();
*
* var out = canvas.render();
*/
setReadOnly( Canvas.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Canvas;
