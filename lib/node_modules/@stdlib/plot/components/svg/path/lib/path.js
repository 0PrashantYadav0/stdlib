'use strict';

// TODO: improve JSDoc examples

// MODULES //

var debug = require( 'debug' )( 'path:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var linear = require( 'd3-scale' ).scaleLinear; // TODO: remove
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var isDefined = require( './accessors/is_defined.js' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// PATH //

/**
* Path constructor.
*
* @constructor
* @param {Options} options - constructor options
* @param {ArrayLike} [options.x=[]] - x-values
* @param {ArrayLike} [options.y=[]] - y-values
* @param {Function} [options.xScale] - x scale function
* @param {Function} [options.yScale] - y scale function
* @param {Function} [options.isDefined] - accessor indicating whether a datum is defined
* @param {string} [options.color] - color
* @param {string} [options.label] - label
* @param {boolean} [options.autoRender=true] - indicates whether to re-render on a change event
* @throws {TypeError} must provide valid options
* @returns {Path} Path instance
*
* @example
* var path = new Path({
*     'x': [0.1,0.2,0.3],
*     'y': [0.4,0.5,0.6]
* });
*/
function Path( options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof Path ) ) {
		return new Path( options );
	}
	self = this;
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_xData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.x
	});
	Object.defineProperty( this, '_yData', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.y
	});
	Object.defineProperty( this, '_xScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xScale || linear()
	});
	Object.defineProperty( this, '_yScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yScale || linear()
	});
	Object.defineProperty( this, '_isDefined', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.isDefined || isDefined
	});
	Object.defineProperty( this, '_color', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.color
	});
	Object.defineProperty( this, '_label', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.label
	});
	Object.defineProperty( this, '_autoRender', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.autoRender
	});

	this.on( 'change', onChange );
	this.on( '_render', onRender );

	return this;

	/**
	* Callback invoked upon receiving a change event.
	*
	* @private
	*/
	function onChange() {
		debug( 'Received a change event.' );
		if ( self._autoRender ) {
			self.render();
		}
	}

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
} // end FUNCTION Path()

/*
* Create a prototype which inherits from the parent prototype.
*/
Path.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Path.prototype.constructor = Path;

/**
* `x` values.
*
* @memberof Path.prototype
* @name x
* @type {ArrayLike}
* @throws {TypeError} must be array-like
*
* @example
* var path = new Path({
*     'x': [0.1,0.2,0.3]
* });
*
* var x = path.x;
* // returns [0.1,0.2,0.3]
*/
Object.defineProperty( Path.prototype, 'x', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x/set.js' ),
	'get': require( './props/x/get.js' )
});

/**
* `y` values.
*
* @memberof Path.prototype
* @name y
* @type {ArrayLike}
* @throws {TypeError} must be array-like
*
* @example
* var path = new Path({
*     'y': [0.4,0.5,0.6]
* });
*
* var y = path.y;
* // returns [0.4,0.5,0.6]
*/
Object.defineProperty( Path.prototype, 'y', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y/set.js' ),
	'get': require( './props/y/get.js' )
});

/**
* `x` scale function.
*
* @memberof Path.prototype
* @name xScale
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var path = new Path({
*     'xScale': function scale(){}
* });
*
* var f = path.xScale;
* // returns <Function>
*/
Object.defineProperty( Path.prototype, 'xScale', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-scale/set.js' ),
	'get': require( './props/x-scale/get.js' )
});

/**
* `y` scale function.
*
* @memberof Path.prototype
* @name yScale
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var path = new Path({
*     'yScale': function scale(){}
* });
*
* var f = path.yScale;
* // returns <Function>
*/
Object.defineProperty( Path.prototype, 'yScale', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-scale/set.js' ),
	'get': require( './props/y-scale/get.js' )
});

/**
* Accessor which defines whether a datum is defined. This accessor is used to define how missing values are encoded. The default behavior is to ignore values which are `NaN`.
*
* @memberof Path.prototype
* @name isDefined
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var Path = new Path();
* path.isDefined = function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
*
* @example
* function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
* var path = new Path({
*     'isDefined': isDefined
* });
* var fcn = path.isDefined;
* // returns <Function>
*/
Object.defineProperty( Path.prototype, 'isDefined', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/is-defined/set.js' ),
	'get': require( './props/is-defined/get.js' )
});

/**
* Path color.
*
* @memberof Path.prototype
* @name color
* @type {string}
* @throws {TypeError} must be a primitive string
*
* @example
* var path = new Path({
*     'color': 'steelblue'
* });
*
* var color = path.color;
* // returns 'steelblue'
*/
Object.defineProperty( Path.prototype, 'color', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/color/set.js' ),
	'get': require( './props/color/get.js' )
});

/**
* Path label.
*
* @memberof Path.prototype
* @name label
* @type {string}
* @throws {TypeError} must be a primitive string
*
* @example
* var path = new Path({
*     'label': 'line-1'
* });
*
* var label = path.label;
* // returns 'line-1'
*/
Object.defineProperty( Path.prototype, 'label', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/label/set.js' ),
	'get': require( './props/label/get.js' )
});

/**
* Rendering mode. If `true`, an instance re-renders on each change event.
*
* @memberof Path.prototype
* @name autoRender
* @type {boolean}
* @default true
* @throws {TypeError} must be a boolean primitive
*
* @example
* var path = new Path({
*     'autoRender': true
* });
*
* var mode = path.autoRender;
* // returns true
*/
Object.defineProperty( Path.prototype, 'autoRender', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/auto-render/set.js' ),
	'get': require( './props/auto-render/get.js' )
});

/**
* Returns a function to generate an SVG path.
*
* @memberof Path.prototype
* @name line
* @type {Function}
*
* @example
* var path = new Path();
*
* var line = path.line;
* // returns <Function>
*/
Object.defineProperty( Path.prototype, 'line', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/line/get.js' )
});

/**
* Function to map values to x coordinate values.
*
* @memberof Path.prototype
* @type {Function}
* @name xPos
*
* @example
* var path = new Path();
* var xPos = path.xPos;
* // returns <Function>
*/
Object.defineProperty( Path.prototype, 'xPos', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-pos/get.js' )
});

/**
* Function to map values to y coordinate values.
*
* @memberof Path.prototype
* @type {Function}
* @name yPos
*
* @example
* var path = new Path();
* var yPos = path.yPos;
* // returns <Function>
*/
Object.defineProperty( Path.prototype, 'yPos', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-pos/get.js' )
});

/**
* Renders a virtual DOM tree.
*
* @memberof Path.prototype
* @name render
* @type {Function}
* @returns {VTree} virtual tree
*
* @example
* var path = new Path();
*
* var out = path.render();
*/
setReadOnly( Path.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Path;
