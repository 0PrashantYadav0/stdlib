'use strict';

// MODULES //

var debug = require( 'debug' )( 'defs:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// DEFS //

/**
* SVG definitions constructor.
*
* @constructor
* @returns {Defs} definitions instance
*
* @example
* var defs = new Defs();
*/
function Defs() {
	var self;
	if ( !( this instanceof Defs ) ) {
		return new Defs();
	}
	self = this;
	debug( 'Creating an instance...' );
	EventEmitter.call( this );
	this.on( 'change', onChange );
	this.on( '_render', onRender );
	return this;

	/**
	* Callback invoked upon receiving a change event.
	*
	* @private
	*/
	function onChange() {
		debug( 'Received a change event.' );
		self.render();
	}

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
} // end FUNCTION Defs()

/*
* Create a prototype which inherits from the parent prototype.
*/
Defs.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Defs.prototype.constructor = Defs;

/**
* Renders a virtual DOM tree.
*
* @memberof Defs.prototype
* @name render
* @type {Function}
* @returns {VTree} virtual tree
*
* @example
* var defs = new Defs();
*
* var out = defs.render();
*/
setReadOnly( Defs.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Defs;
