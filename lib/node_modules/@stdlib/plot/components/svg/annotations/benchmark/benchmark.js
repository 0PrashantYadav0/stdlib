'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var pkg = require( './../package.json' ).name;
var Annotations = require( './../lib' );


// MAIN //

bench( pkg+'::instantiation', function benchmark( b ) {
	var node;
	var i;
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		node = new Annotations();
		if ( !( node instanceof Annotations ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( node instanceof Annotations ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::instantiation,no_new', function benchmark( b ) {
	var ctor;
	var node;
	var i;

	ctor = Annotations;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		node = ctor();
		if ( !( node instanceof Annotations ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( node instanceof Annotations ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':render', function benchmark( b ) {
	var vtree;
	var node;
	var i;

	node = new Annotations();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		vtree = node.render();
		if ( typeof vtree !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof vtree !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
