'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var validators = require( './validators' );


// VARIABLES //

var KEYS = getKeys( validators );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveNumber} [options.width] - width
* @param {PositiveNumber} [options.height] - height
* @param {boolean} [options.autoRender] - indicates whether to re-render on a change event
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'width': 400,
*     'height': 400
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	var err;
	var key;
	var val;
	var i;
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	for ( i = 0; i < KEYS.length; i++ ) {
		key = KEYS[ i ];
		if ( hasOwnProp( options, key ) ) {
			val = options[ key ];
			err = validators[ key ]( val );
			if ( err ) {
				return err;
			}
			opts[ key ] = val;
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
