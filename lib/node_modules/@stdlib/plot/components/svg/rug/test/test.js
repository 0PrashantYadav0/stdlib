'use strict';

// MODULES //

var EventEmitter = require( 'events' ).EventEmitter;
var tape = require( 'tape' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var Rug = require( './../lib' );


// FIXTURES //

var VTREE = require( './fixtures/vtree.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof Rug, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function is a constructor', function test( t ) {
	var node = new Rug();
	t.strictEqual( instanceOf( node, Rug ), true, 'is an instance' );
	t.end();
});

tape( 'the constructor does not require the `new` operator', function test( t ) {
	var ctor;
	var node;

	ctor = Rug;
	node = ctor();

	t.strictEqual( instanceOf( node, Rug ), true, 'is an instance' );
	t.end();
});

tape( 'the returned instance an event emitter', function test( t ) {
	var node = new Rug();
	t.strictEqual( instanceOf( node, EventEmitter ), true, 'is an event emitter' );
	t.end();
});

tape( 'if `autoRender` is `true`, when a returned instance receives a `change` event, it re-renders and emits a `render` event', function test( t ) {
	var node = new Rug({
		'data': [ 0.10, 0.50, 0.90 ],
		'autoRender': true
	});
	node.on( 'render', onRender );
	node.emit( 'change' );

	function onRender( obj ) {
		t.ok( true, 'emits a render event' );
		t.deepEqual( obj, VTREE, 'provides virtual tree' );
		t.end();
	}
});

tape( 'if `autoRender` is `false`, when a returned instance receives a `change` event, it does not re-render or emit a `render` event', function test( t ) {
	var node = new Rug({
		'data': [ 0.10, 0.50, 0.90 ],
		'autoRender': false
	});
	node.on( 'render', onRender );
	node.emit( 'change' );
	t.pass( 'is ok' );
	t.end();

	function onRender() {
		t.fail( 'should never be invoked' );
	}
});

tape( 'the `render` method returns a rendered virtual tree', function test( t ) {
	var vtree;
	var node;

	node = new Rug({
		'data': [ 0.10, 0.50, 0.90 ]
	});
	vtree = node.render();

	t.deepEqual( vtree, VTREE, 'returns a virtual tree' );
	t.end();
});

/*
* TODO
*
* - many of the following will require their own VTree fixture
* - verify that changing each property triggers a 'change' event.
* - verify that each property change results in a change to the rendered VTree
* - verify that the `isDefined` accessor works as expected
* - verify the behavior of color as a function vs string
* - verify the behavior of opacity as a function vs number
* - verify the behavior of orientation
* - verify the behavior of label as a function vs string
* - verify the behavior of scale
* - display a rendered component in the README (as part of a plot)
* - write README
*/
