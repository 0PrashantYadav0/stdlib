'use strict';

// MODULES //

var EventEmitter = require( 'events' ).EventEmitter;
var tape = require( 'tape' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var Rug = require( './../lib' );


// FIXTURES //

var VTREE = require( './fixtures/vtree.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof Rug, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function is a constructor', function test( t ) {
	var node = new Rug();
	t.strictEqual( instanceOf( node, Rug ), true, 'is an instance' );
	t.end();
});

tape( 'the constructor does not require the `new` operator', function test( t ) {
	var ctor;
	var node;

	ctor = Rug;
	node = ctor();

	t.strictEqual( instanceOf( node, Rug ), true, 'is an instance' );
	t.end();
});

tape( 'the constructor returns an event emitter', function test( t ) {
	var node = new Rug();
	t.strictEqual( instanceOf( node, EventEmitter ), true, 'is an event emitter' );
	t.end();
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug( value );
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `data` option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'data': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `scale` option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'scale': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `orientation` option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		'beep',
		'toppy',
		'lefty',
		'righty',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'orientation': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `isDefined` option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'isDefined': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `opacity` option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'opacity': value
			});
			return node;
		};
	}
});

tape( 'the function throws a range error if provided an `opacity` option which is not on the interval `[0,1]`', function test( t ) {
	var values;
	var i;

	values = [
		-3.14,
		3.14
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'opacity': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `color` option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		-3.14,
		3.14,
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'color': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `label` option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		-3.14,
		3.14,
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'label': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `size` option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		NaN,
		-3.14,
		3.14,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'size': value
			});
			return node;
		};
	}
});

tape( 'the function throws an error if provided an invalid `autoRender` option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var node = new Rug({
				'autoRender': value
			});
			return node;
		};
	}
});

tape( 'when a returned instance receives a `change` event, it re-renders and emits a `render` event', function test( t ) {
	var node = new Rug({
		'data': [ 0.10, 0.50, 0.90 ]
	});
	node.on( 'render', onRender );
	node.emit( 'change' );

	function onRender( obj ) {
		t.ok( true, 'emits a render event' );
		t.deepEqual( obj, VTREE, 'provides virtual tree' );
		t.end();
	}
});

tape( 'the `render` method returns a rendered virtual tree', function test( t ) {
	var vtree;
	var node;

	node = new Rug({
		'data': [ 0.10, 0.50, 0.90 ]
	});
	vtree = node.render();

	t.deepEqual( vtree, VTREE, 'returns a virtual tree' );
	t.end();
});
