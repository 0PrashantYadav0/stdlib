'use strict';

// MODULES //

var logger = require( 'debug' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );


// VARIABLES //

var debug = logger( 'symbols:set:opacity' );


// MAIN //

/**
* Sets the symbol opacity.
*
* @private
* @param {(number|Function)} opacity - opacity
* @throws {TypeError} must be a number or a function
* @throws {RangeError} must be a number on the interval `[0,1]`
*/
function set( opacity ) {
	/* eslint-disable no-invalid-this */
	var isNum = isNumber( opacity );
	if (
		!isNum &&
		!isFunction( opacity )
	) {
		throw new TypeError( 'invalid value. `opacity` must be a number or a function. Value: `' + opacity + '.`' );
	}
	if (
		isNum &&
		(opacity < 0.0 || opacity > 1.0)
	) {
		throw new RangeError( 'invalid value. `opacity` must be a number on the interval `[0,1]`. Value: `' + opacity + '`.' );
	}
	debug( 'Current value: %d.', this._opacity );

	this._opacity = opacity;
	debug( 'New Value: %d.', this._opacity );

	this.emit( 'change' );
} // end FUNCTION set()


// EXPORTS //

module.exports = set;
