'use strict';

// MODULES //

var debug = require( 'debug' )( 'background:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var createEngine = require( './engines' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// Background //

/**
* Background constructor.
*
* @constructor
* @param {Options} options - constructor options
* @param {PositiveNumber} [options.width=400] - width
* @param {PositiveNumber} [options.height=400] - height
* @param {string} [options.engine='svg'] - rendering engine
* @throws {TypeError} must provide valid options
* @returns {Background} background instance
*
* @example
* var bkgd = new Background({
*     'width': 500,
*     'height': 500
* });
*/
function Background( options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof Background ) ) {
		return new Background( options );
	}
	self = this;
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_width', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.width
	});
	Object.defineProperty( this, '_height', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.height
	});
	Object.defineProperty( this, '_engine', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.engine
	});
	Object.defineProperty( this, '__engine__', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});

	// Initialize an bkgd engine:
	this.__engine__ = createEngine( this._engine, this );

	// Listen for 'render' events:
	this.__engine__.on( 'render', onRender );

	return this;

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
} // end FUNCTION Background()

/*
* Create a prototype which inherits from the parent prototype.
*/
Background.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Background.prototype.constructor = Background;

/**
* Width.
*
* @memberof Background.prototype
* @name width
* @type {PositiveNumber}
* @throws {TypeError} must be a positive number
*
* @example
* var bkgd = new Background({
*     'width': 500
* });
*
* var width = bkgd.width;
* // returns 500
*/
Object.defineProperty( Background.prototype, 'width', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/width/set.js' ),
	'get': require( './props/width/get.js' )
});

/**
* Height.
*
* @memberof Background.prototype
* @name height
* @type {PositiveNumber}
* @throws {TypeError} must be a positive number
*
* @example
* var bkgd = new Background({
*     'height': 500
* });
*
* var height = bkgd.height;
* // returns 500
*/
Object.defineProperty( Background.prototype, 'height', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/height/set.js' ),
	'get': require( './props/height/get.js' )
});

/**
* Background engine.
*
* @memberof Background.prototype
* @name engine
* @type {string}
* @default 'svg'
* @throws {TypeError} must be a string primitive
*
* @example
* var bkgd = new Background();
* bkgd.engine = 'svg';
*
* @example
* var bkgd = new Background({
*     'engine': 'svg'
* });
* var engine = bkgd.engine;
* // returns 'svg'
*
* bkgd.engine = 'unicode';
*/
Object.defineProperty( Background.prototype, 'engine', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/engine/set.js' ),
	'get': require( './props/engine/get.js' )
});

/**
* Renders a background.
*
* @memberof Background.prototype
* @name render
* @type {Function}
* @returns {*} rendered background
*
* @example
* var bkgd = new Background();
*
* var out = bkgd.render();
*/
setReadOnly( Background.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Background;
