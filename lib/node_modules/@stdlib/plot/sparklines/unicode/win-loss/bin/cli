#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var stdin = require( '@stdlib/utils/read-stdin' );
var regexp = require( '@stdlib/utils/regexp-from-string' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var sparkline = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Writes an error message to `stderr` and then exits.
*
* @private
* @param {string} msg - error message
*/
function exit( msg ) {
	process.stderr.write( msg+'\n', 'utf8' );
	process.exit( 1 );
} // end FUNCTION exit()


// VARIABLES //

var args;
var sep;
var err;
var i;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
if ( args.split ) {
	sep = regexp( args.split );
	if ( sep === null ) {
		sep = args.split;
	}
} else {
	sep = /\r?\n/;
}

opts = {};

if ( !process.stdin.isTTY ) {
	return stdin( onData );
}
if ( !args._.length ) {
	err = new Error( 'no input data. Must provide data as either command-line arguments or via `stdin`.' );
	return exit( err.message );
}
opts.data = args._;
for ( i = 0; i < opts.data.length; i++ ) {
	opts.data[ i ] = parseFloat( opts.data[i] );
}
process.nextTick( next );

/**
* Callback invoked after attempting to read data from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - `stdin` data
*/
function onData( error, data ) {
	var i;
	if ( error ) {
		return exit( error.message );
	}
	data = data.toString();
	if ( data === '' ) {
		error = new Error( 'no input data. Process is not running in a TTY context and yet received no data on `stdin`.' );
		return exit( error.message );
	}
	data = data.split( sep );
	for ( i = 0; i < data.length; i++ ) {
		data[ i ] = parseFloat( data[i] );
	}
	opts.data = data;
	next();
} // end FUNCTION onData()

/**
* Callback invoked once ready to create a sparkline.
*
* @private
*/
function next() {
	var chart = sparkline( opts );
	console.log( chart.render() );
} // end FUNCTION next()
