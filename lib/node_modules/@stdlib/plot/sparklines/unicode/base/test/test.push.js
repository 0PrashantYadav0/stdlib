'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var Sparkline = require( './../lib' );
var push = require( './../lib/push.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof push, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a number primitive', function test( t ) {
	var context;
	var values;
	var i;

	context = new Sparkline();

	values = [
		'5',
		true,
		null,
		undefined,
		{},
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			push.call( context, value );
		};
	}
});

tape( 'the function appends a datum to the chart data', function test( t ) {
	var expected;
	var context;
	var data;
	var v;

	data = [ 1, 2, 3 ];
	context = new Sparkline({
		'data': data
	});

	push.call( context, 4 );
	v = context.data;

	expected = [
		{
			'y': 1
		},
		{
			'y': 2
		},
		{
			'y': 3
		},
		{
			'y': 4
		}
	];

	t.deepEqual( v, expected, 'appends to chart data' );
	t.end();
});

tape( 'if appending data will result in the chart data exceeding the window size, the function will remove the first data element', function test( t ) {
	var expected;
	var context;
	var data;
	var v;

	data = [ 1, 2, 3 ];
	context = new Sparkline({
		'data': data,
		'window': 3
	});

	push.call( context, 4 );
	v = context.data;

	expected = [
		{
			'y': 2
		},
		{
			'y': 3
		},
		{
			'y': 4
		}
	];

	t.deepEqual( v, expected, 'removes first data element' );
	t.end();
});

tape( 'the function flags `NaN` and infinite values', function test( t ) {
	var expected;
	var context;
	var data;
	var v;
	var i;

	data = [ 1, 2, 3 ];
	context = new Sparkline({
		'data': data
	});

	push.call( context, NaN );
	push.call( context, Number.POSITIVE_INFINITY );
	push.call( context, Number.NEGATIVE_INFINITY );

	v = context.data;

	expected = [
		{
			'y': 1
		},
		{
			'y': 2
		},
		{
			'y': 3
		},
		{
			'y': NaN,
			'flg': 'nan'
		},
		{
			'y': Number.POSITIVE_INFINITY,
			'flg': 'inf'
		},
		{
			'y': Number.NEGATIVE_INFINITY,
			'flg': 'inf'
		}
	];

	for ( i = 0; i < data.length; i++ ) {
		if ( isnan( v[i].y ) ) {
			t.equal( isnan( expected[i].y ), true, 'value is NaN' );
			t.equal( v[i].flg, expected[i].flg, 'set flag' );
		} else {
			t.deepEqual( v[i], expected[i], 'returns expected value for element '+i );
		}
	}
	t.end();
});
