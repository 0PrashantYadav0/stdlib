'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var Sparkline = require( './../lib/ctor.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof Sparkline, 'function', 'main export is a function' );
	t.end();
});

tape( 'the export is a class constructor', function test( t ) {
	var sparkline = new Sparkline();
	t.equal( sparkline instanceof Sparkline, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (no options)', function test( t ) {
	var sparkline;
	var ctor;

	ctor = Sparkline;
	sparkline = ctor();

	t.equal( sparkline instanceof Sparkline, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (options)', function test( t ) {
	var sparkline;
	var ctor;

	ctor = Sparkline;
	sparkline = ctor({
		'yMax': 31.4,
		'yMin': 3.14,
		'window': 10,
		'yValue': noop,
		'data': [ 1, 2, 3 ],
		'infinities': true
	});

	t.equal( sparkline instanceof Sparkline, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor will throw if provided an invalid options argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		undefined,
		true,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var sparkline = new Sparkline( value ); // eslint-disable-line no-unused-vars
		};
	}
});

tape( 'the constructor throws if provided an invalid option', function test( t ) {
	t.throws( foo, TypeError, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var sparkline = new Sparkline({
			'yMax': []
		});
	}
});

tape( 'the constructor throws if provided a `window` option which is less than the number of data elements', function test( t ) {
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var sparkline = new Sparkline({
			'data': [ 1, 2, 3, 4, 5 ],
			'window': 3
		});
	}
});

tape( 'an instance has a writable `data` property', function test( t ) {
	var sparkline;
	var expected;
	var opts;

	sparkline = new Sparkline();

	t.deepEqual( sparkline.data, [], 'default value is an empty array' );

	opts = {
		'data': [ 1, 2, 3 ]
	};
	sparkline = new Sparkline( opts );

	expected = [
		{
			'y': 1
		},
		{
			'y': 2
		},
		{
			'y': 3
		}
	];

	t.deepEqual( sparkline.data, expected, 'returns expected data' );

	sparkline.data = [ 4, 5, 6 ];

	expected = [
		{
			'y': 4
		},
		{
			'y': 5
		},
		{
			'y': 6
		}
	];

	t.deepEqual( sparkline.data, expected, 'returns expected data' );

	t.end();
});

tape( 'an instance has a writable `yValue` property', function test( t ) {
	var sparkline;
	var opts;
	var f;

	sparkline = new Sparkline();
	f = sparkline.yValue;

	t.equal( f(5.0), 5.0, 'default value is an identity function' );

	opts = {
		'yValue': noop
	};
	sparkline = new Sparkline( opts );

	t.equal( sparkline.yValue, noop, 'returns expected value' );

	sparkline.yValue = foo;

	t.equal( sparkline.yValue, foo, 'returns expected value' );

	t.end();

	function foo() {
		return 'beep';
	}
});

tape( 'an instance has a writable `yMin` property', function test( t ) {
	var sparkline;
	var opts;

	sparkline = new Sparkline();
	t.equal( sparkline.yMin, null, 'default value is null' );

	opts = {
		'yMin': -31.4
	};
	sparkline = new Sparkline( opts );

	t.equal( sparkline.yMin, opts.yMin, 'returns expected value' );

	sparkline.yMin = -100.0;

	t.equal( sparkline.yMin, -100.0, 'returns expected value' );

	t.end();
});

tape( 'an instance has a writable `yMax` property', function test( t ) {
	var sparkline;
	var opts;

	sparkline = new Sparkline();
	t.equal( sparkline.yMax, null, 'default value is null' );

	opts = {
		'yMax': 314.0
	};
	sparkline = new Sparkline( opts );

	t.equal( sparkline.yMax, opts.yMax, 'returns expected value' );

	sparkline.yMax = 100.0;

	t.equal( sparkline.yMax, 100.0, 'returns expected value' );

	t.end();
});

tape( 'an instance has a writable `window` property', function test( t ) {
	var sparkline;
	var opts;

	sparkline = new Sparkline();
	t.equal( sparkline.window, PINF, 'default value is +infinity' );

	opts = {
		'window': 20
	};
	sparkline = new Sparkline( opts );

	t.equal( sparkline.window, opts.window, 'returns expected value' );

	sparkline.window = 5;

	t.equal( sparkline.window, 5, 'returns expected value' );

	t.end();
});

tape( 'an instance has a writable `infinities` property', function test( t ) {
	var sparkline;
	var opts;

	sparkline = new Sparkline();

	t.equal( sparkline.infinities, false, 'default is `false`' );

	opts = {
		'infinities': true
	};

	sparkline = new Sparkline( opts );
	t.equal( sparkline.infinities, true, 'returns expected value' );

	sparkline.infinities = false;
	t.equal( sparkline.infinities, false, 'returns expected value' );

	t.end();
});

tape( 'an instance has a `push` method for appending data', function test( t ) {
	var sparkline;

	sparkline = new Sparkline();

	t.equal( typeof sparkline.push, 'function', 'has push method' );
	t.end();
});

tape( 'an instance has a `render` method for rendering a sparkline', function test( t ) {
	var sparkline;

	sparkline = new Sparkline();

	t.equal( typeof sparkline.render, 'function', 'has render method' );
	t.end();
});

tape( 'an instance has a `toString` method for serializing a chart to string', function test( t ) {
	var sparkline;

	sparkline = new Sparkline();

	t.equal( typeof sparkline.toString, 'function', 'has toString method' );
	t.end();
});
