'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var formatData = require( './../lib/format_data.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof formatData, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns input data in a standardized format', function test( t ) {
	var expected;
	var data;
	var v;

	data = [
		[{'value':1}],
		[{'value':2}],
		[{'value':3}]
	];

	expected = [
		{'y':1},
		{'y':2},
		{'y':3}
	];

	v = formatData( data, yValue );

	t.deepEqual( v, expected, 'returns standardized data' );

	t.end();

	function yValue( d ) {
		return d[ 0 ].value;
	}
});

tape( 'the function flags `NaN` and infinite values', function test( t ) {
	var expected;
	var data;
	var v;
	var i;

	data = [
		1,
		2,
		3,
		NaN,
		Number.POSITIVE_INFINITY,
		Number.NEGATIVE_INFINITY
	];

	expected = [
		{'y':1},
		{'y':2},
		{'y':3},
		{'y':NaN,'flg':'nan'},
		{'y':Number.POSITIVE_INFINITY,'flg':'inf'},
		{'y':Number.NEGATIVE_INFINITY,'flg':'inf'}
	];

	v = formatData( data, yValue );

	for ( i = 0; i < data.length; i++ ) {
		if ( isnan( v[i].y ) ) {
			t.equal( isnan( expected[i].y ), true, 'value is NaN' );
			t.equal( v[i].flg, expected[i].flg, 'set flag' );
		} else {
			t.deepEqual( v[i], expected[i], 'returns expected value for element '+i );
		}
	}
	t.end();

	function yValue( d ) {
		return d;
	}
});
