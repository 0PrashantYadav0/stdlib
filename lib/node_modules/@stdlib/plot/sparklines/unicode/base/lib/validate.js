'use strict';

// MODULES //

var isObject = require( '@stdlib/utils/is-plain-object' );
var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitive;
var isFunction = require( '@stdlib/utils/is-function' );
var isArray = require( '@stdlib/utils/is-array' );
var isTypedArray = require( '@stdlib/utils/is-typed-array' );
var isNull = require( '@stdlib/utils/is-null' );
var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;
var hasOwnProp = require( '@stdlib/utils/has-own-property' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Options} opts - function options
* @param {(Array|TypedArray)} [opts.data] - chart data
* @param {Function} [opts.yValue] - y-value accessor
* @param {(FiniteNumber|null)} [opts.yMin] - minimum value of the y-axis domain
* @param {(FiniteNumber|null)} [opts.yMax] - maximum value of the y-axis domain
* @param {(PositiveInteger|null)} [opts.window] - sliding window size
* @param {boolean} [opts.infinities] - boolean indicating whether to encode infinite values
* @returns {(Error|null)} error or null
*
* @example
* var opts = {
*     'yMin': -10.0,
*     'yMax': 10.0,
*     'infinities': true
* };
* var err = validate( opts );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts ) {
	if ( !isObject( opts ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
	}
	if ( hasOwnProp( opts, 'data' ) ) {
		if ( !isArray( opts.data ) && !isTypedArray( opts.data ) ) {
			return new TypeError( 'invalid option. `data` option must be an array or typed array. Option: `' + opts.data + '`.' );
		}
	}
	if ( hasOwnProp( opts, 'yValue' ) ) {
		if ( !isFunction( opts.yValue ) ) {
			return new TypeError( 'invalid option. `yValue` option must be a function. Option: `' + opts.yValue + '`.' );
		}
	}
	if ( hasOwnProp( opts, 'yMin' ) ) {
		// FIXME: check for finite number
		if ( !isNumber( opts.yMin ) && !isNull( opts.yMin ) ) {
			return new TypeError( 'invalid option. `yMin` option must be a number primitive or null. Option: `' + opts.yMin + '`.' );
		}
	}
	if ( hasOwnProp( opts, 'yMax' ) ) {
		// FIXME: check for finite number
		if ( !isNumber( opts.yMax ) && !isNull( opts.yMax ) ) {
			return new TypeError( 'invalid option. `yMax` option must be a number primitive or null. Option: `' + opts.yMax + '`.' );
		}
	}
	if ( hasOwnProp( opts, 'window' ) ) {
		if ( !isPositiveInteger( opts.window ) && !isNull( opts.window ) ) {
			return new TypeError( 'invalid option. `window` option must be a positive integer or null. Option: `' + opts.window + '`.' );
		}
	}
	if ( hasOwnProp( opts, 'infinities' ) ) {
		if ( !isBoolean( opts.infinities ) ) {
			return new TypeError( 'invalid option. `infinities` option must be a boolean primitive. Option: `' + opts.infinities + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
