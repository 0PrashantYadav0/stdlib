/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var validate = require( './validate.js' );
var formatData = require( './format_data.js' );


// MAIN //

/**
* Sparkline constructor.
*
* @constructor
* @param {Options} [options] - sparkline options
* @param {(Array|TypedArray)} [options.data] - sparkline data
* @param {(FiniteNumber|null)} [options.yMin] - minimum value of the y-axis domain
* @param {(FiniteNumber|null)} [options.yMax] - maximum value of the y-axis domain
* @param {(PositiveInteger|null)} [options.window] - sliding window size
* @param {boolean} [options.infinities=false] - boolean indicating whether to encode infinite values
* @throws {TypeError} must provide valid options
* @returns {Sparkline} sparkline instance
*
* @example
* var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];
* var opts = {
*     'data': data
* };
* var chart = Sparkline( opts );
*/
function Sparkline( options ) {
	var opts;
	var err;
	if ( !(this instanceof Sparkline) ) {
		if ( arguments.length ) {
			return new Sparkline( options );
		}
		return new Sparkline();
	}
	if ( arguments.length ) {
		opts = options;
		err = validate( opts );
		if ( err ) {
			throw err;
		}
	} else {
		opts = {};
	}
	Object.defineProperty( this, '_data', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': []
	});
	Object.defineProperty( this, '_yMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});
	Object.defineProperty( this, '_yMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});
	Object.defineProperty( this, '_window', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': PINF
	});
	Object.defineProperty( this, '_infinities', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': false
	});
	if ( opts.data !== void 0 ) {
		this._data = formatData( opts.data, this._yValue );
	}
	if ( opts.yMin !== void 0 ) {
		this._yMin = opts.yMin;
	}
	if ( opts.yMax !== void 0 ) {
		this._yMax = opts.yMax;
	}
	if ( opts.window !== void 0 ) {
		this._window = opts.window;
	}
	if ( opts.infinities !== void 0 ) {
		this._infinities = opts.infinities;
	}
	if ( this._window < this._data.length ) {
		throw new Error( 'invalid option. `window` option must be greater than or equal to the number of data elements. Data length: `' + this._data.length + '`. Option: `' + this._window + '`.' );
	}
	return this;
}

/**
* Minimum value of the y-axis domain.
*
* @name yMin
* @memberof Sparkline.prototype
* @type {(FiniteNumber|null)}
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var chart = new Sparkline();
* chart.yMin = -100.0;
*
* @example
* var chart = new Sparkline({
*     'yMin': 3.14
* });
* var ymin = chart.yMin;
* // returns 3.14
*/
Object.defineProperty( Sparkline.prototype, 'yMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './set_ymin.js' ),
	'get': require( './get_ymin.js' )
});

/**
* Maximum value of the y-axis domain.
*
* @name yMax
* @memberof Sparkline.prototype
* @type {(FiniteNumber|null)}
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var chart = new Sparkline();
* chart.yMax = 100.0;
*
* @example
* var chart = new Sparkline({
*     'yMax': 314.0
* });
* var ymax = chart.yMax;
* // returns 314.0
*/
Object.defineProperty( Sparkline.prototype, 'yMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './set_ymax.js' ),
	'get': require( './get_ymax.js' )
});

/**
* Size of sliding window.
*
* @name window
* @memberof Sparkline.prototype
* @type {(PositiveInteger|null)}
* @throws {TypeError} must be a positive integer
* @throws {Error} must be greater than or equal to the number of data elements
*
* @example
* var chart = new Sparkline();
* chart.window = 20;
*
* @example
* var chart = new Sparkline({
*     'window': 25
* });
* var win = chart.window;
* // returns 25
*/
Object.defineProperty( Sparkline.prototype, 'window', {
	'configurable': false,
	'enumerable': true,
	'set': require( './set_window.js' ),
	'get': require( './get_window.js' )
});

/**
* Boolean indicating whether to encode infinite values.
*
* @name infinities
* @memberof Sparkline.prototype
* @type {boolean}
* @throws {TypeError} must be a boolean primitive
* @default false
*
* @example
* var chart = new Sparkline();
* chart.infinities = true;
*
* @example
* var chart = new Sparkline({
*     'infinities': true
* });
* var bool = chart.infinities;
* // returns true
*/
Object.defineProperty( Sparkline.prototype, 'infinities', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/infinities/set.js' ),
	'get': require( './props/infinities/get.js' )
});

/**
* Sparkline data.
*
* @name data
* @memberof Sparkline.prototype
* @type {(Array|TypedArray)}
* @throws {TypeError} must be an array or typed array
* @throws {Error} length must not exceed maximum sliding window size
*
* @example
* var chart = new Sparkline();
* chart.data = [ 1.0, 0.0, 3.14, 2.0, 5.0 ];
*
* @example
* var data = [ 1.0, 0.0, 3.14, 2.0, 5.0 ];
* var chart = new Sparkline({
*     'data': data
* });
* var d = chart.data;
* // returns [...]
*/
Object.defineProperty( Sparkline.prototype, 'data', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/data/set.js' ),
	'get': require( './props/data/get.js' )
});

/**
* Append data.
*
* @memberof Sparkline.prototype
* @function push
* @param {*} datum - data to append
* @returns {Sparkline} chart instance
*
* @example
* var data = [ 1.0, 0.0, 3.14, 2.0, 5.0 ];
*
* var chart = new Sparkline({
*     'data': data
* });
*
* chart.push( 6.0 )
*     .push( -3.14 )
*     .push( -1.0 );
*
* var d = chart.data;
*/
Sparkline.prototype.push = require( './push.js' );

/**
* Renders a sparkline.
*
* ## Notes
*
* -   This method **should** be implemented by descendants.
*
* @memberof Sparkline.prototype
* @function render
* @returns {string} rendered sparkline
*/
Sparkline.prototype.render = require( './render.js' );

/**
* Serializes a sparkline as a string.
*
* @memberof Sparkline.prototype
* @function toString
* @returns {string} serialized sparkline
*
* @example
* var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];
*
* var chart = new Sparkline({
*     'data': data
* });
*
* var str = chart.toString();
* // returns '...'
*/
Sparkline.prototype.toString = require( './tostring.js' );


// TODO: stub `toJSON` method, which, similar to `render`, should be implemented by descendants, as will be chart type specific


// EXPORTS //

module.exports = Sparkline;
