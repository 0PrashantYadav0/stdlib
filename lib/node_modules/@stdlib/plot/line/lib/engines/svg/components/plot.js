'use strict';

// MODULES //

var debug = require( 'debug' )( 'line:engine:components:plot' );
var paths = require( './paths.js' );


// RENDER //

/**
* Renders a plot.
*
* @private
* @param {Object} ctx - context
* @returns {VTree} virtual tree
*/
function render( ctx ) {
	var children;
	var vtree;
	var marks;
	var graph;
	var i;

	debug( 'Rendering base canvas...' );
	vtree = ctx.state.canvas.render();

	debug( 'Searching for graph virtual node...' );
	children = vtree.children;
	for ( i = 0; i < children.length; i++ ) {
		if ( children[ i ].properties.property === 'graph' ) {
			debug( 'Found graph virtual node.' );
			graph = children[ i ];
			break;
		}
	}
	if ( graph === void 0 ) {
		throw new Error( 'unable to find graph virtual node in which to insert marks.' );
	}
	debug( 'Searching for marks virtual node...' );
	children = graph.children;
	for ( i = 0; i < children.length; i++ ) {
		if ( children[ i ].properties.property === 'marks' ) {
			debug( 'Found marks virtual node.' );
			marks = children[ i ];
			break;
		}
	}
	if ( marks === void 0 ) {
		throw new Error( 'unable to find marks virtual node in which to insert paths.' );
	}
	debug( 'Rendering paths...' );
	children = paths( ctx );

	debug( 'Inserting paths into marks virtual tree...' );
	for ( i = 0; i < children.length; i++ ) {
		marks.children.push( children[ i ] );
		marks.count += children[ i ].count;
	}
	return vtree;
} // end FUNCTION render()


// EXPORTS //

module.exports = render;
