'use strict';

// MODULES //

var debug = require( 'debug' )( 'line:engine:components:paths' );
var path = require( './path.js' );


// RENDER //

/**
* Renders paths.
*
* @private
* @param {Object} ctx - context
* @returns {Array<VTree>} rendered paths
*/
function render( ctx ) {
	var children;
	var xScale;
	var yScale;
	var labels;
	var label;
	var tmp;
	var len;
	var x;
	var y;
	var i;
	var j;

	xScale = ctx.state.xScale;
	yScale = ctx.state.yScale;
	x = ctx.state.x;
	y = ctx.state.y;
	labels = ctx.state.labels;

	if ( x.length === 0 || y.length === 0 ) {
		debug( 'Missing `x` and/or `y` data. Unable to render paths.' );
		return [];
	}
	debug( 'Rendering paths...' );
	children = [];

	// FIXME: because of how D3 works, we need to create temporary arrays to generate paths. :( We should roll our own SVG path generation; see `d3-shape`.
	// TODO: log path creation
	function xPos( d ) {
		return xScale( d[ 0 ] );
	}
	function yPos( d ) {
		return yScale( d[ 1 ] );
	}
	function defined() {
		return true;
	}
	ctx.line
		.x( xPos ) // TODO: should come from state
		.y( yPos ) // TODO: should come from state
		.defined( defined );
		// .interpolate( ctx.state.interpolation ) // TODO: provide curve factory
		// .tension( ctx.state.tension );

	len = x.length;

	// Only generate the array once...
	tmp = new Array( len );
	for ( i = 0; i < len; i++ ) {
		tmp[ i ] = new Array( 2 );
		tmp[ i ][ 0 ] = x[ i ];
		tmp[ i ][ 1 ] = y[ 0 ][ i ];
	}
	label = labels[ 0 ] || '';
	children.push( path( ctx, tmp, '', label ) ); // FIXME: color

	// Mutate the temp array after...
	for ( j = 1; j < y.length; j++ ) {
		for ( i = 0; i < len; i++ ) {
			tmp[ i ][ 1 ] = y[ j ][ i ];
		}
		label = labels[ j ] || '';
		children.push( path( ctx, tmp, '', label ) ); // FIXME: color
	}
	return children;
} // end FUNCTION render()


// EXPORTS //

module.exports = render;
