'use strict';

// MODULES //

var debug = require( 'debug' )( 'line:main' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var mergeFcn = require( '@stdlib/utils/merge' ).factory;
var Base2D = require( '@stdlib/plot/base-2d' );
var createEngine = require( './engines' );
var defaults = require( './defaults.json' );
var isDefined = require( './accessors/is_defined.js' );
var validate = require( './validate.js' );


// FUNCTIONS //

var merge = mergeFcn({
	'extend': false
});


// LINE //

/**
* Line constructor.
*
* @constructor
* @param {Options} [options] - constructor options
* @param {(EmptyArray|NumericArray|DateArray)} [options.x=[]] - x-values
* @param {(Array|Array<NumericArray)} [options.y=[]] - y-values
* @param {(StringArray|EmptyArray)} [options.labels] - data labels
* @param {Function} [options.isDefined] - accessor indicating whether a datum is defined
* @param {PositiveNumber} [options.width=400] - plot width
* @param {PositiveNumber} [options.height=400] - plot height
* @param {NonNegativeInteger} [options.paddingLeft=90] - left padding
* @param {NonNegativeInteger} [options.paddingRight=20] - right padding
* @param {NonNegativeInteger} [options.paddingTop=80] - top padding
* @param {NonNegativeInteger} [options.paddingBottom=80] - bottom padding
* @param {(Date|FiniteNumber|null)} [options.xMin=null] - minimum value of x-axis domain
* @param {(Date|FiniteNumber|null)} [options.xMax=null] - maximum value of x-axis domain
* @param {(FiniteNumber|null)} [options.yMin=null] - minimum value of y-axis domain
* @param {(FiniteNumber|null)} [options.yMax=null] - maximum value of y-axis domain
* @param {string} [options.xScale='linear'] - x-axis scale
* @param {string} [options.yScale='linear'] - y-axis scale
* @param {(string|null)} [options.xTickFormat=null] - x-axis tick format
* @param {(string|null)} [options.yTickFormat=null] - y-axis tick format
* @param {(NonNegativeInteger|null)} [options.xNumTicks=5] - number of x-axis tick marks
* @param {(NonNegativeInteger|null)} [options.yNumTicks=5] - number of y-axis tick marks
* @param {string} [options.xAxisOrient='bottom'] - x-axis orientation
* @param {string} [options.yAxisOrient='left'] - y-axis orientation
* @param {string} [options.title=''] - plot title
* @param {string} [options.xLabel='x'] - x-axis label
* @param {string} [options.yLabel='y'] - y-axis label
* @param {string} [options.interpolation='linear'] - interpolation mode
* @param {number} [options.tension=0.7] - spline interpolation tension
* @param {string} [options.engine='svg'] - plot engine
* @throws {TypeError} must provide valid options
* @returns {Line} Line instance
*
* @example
* var line = new Line();
*/
function Line( options ) {
	var self;
	var opts;
	var err;
	if ( !(this instanceof Line) ) {
		if ( arguments.length ) {
			return new Line( options );
		}
		return new Line();
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length ) {
		err = validate( options );
		if ( err ) {
			throw err;
		}
		opts = merge( opts, options );
	}
	debug( 'Creating a plot with the following configuration: %s.', JSON.stringify( opts ) );

	Object.defineProperty( this, '_super', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': Base2D.call( this, opts )
	});
	Object.defineProperty( this, '_isDefined', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.isDefined || isDefined
	});
	Object.defineProperty( this, '_xMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xMin
	});
	Object.defineProperty( this, '_xMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xMax
	});
	Object.defineProperty( this, '_yMin', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yMin
	});
	Object.defineProperty( this, '_yMax', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yMax
	});
	Object.defineProperty( this, '_interpolation', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.interpolation
	});
	Object.defineProperty( this, '_tension', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.tension
	});

	// Overwrite the inherited private scale props:
	this._xScale = opts.xScale;
	this._yScale = opts.yScale;

	// Initialize a plot engine:
	this.__engine__ = createEngine( this._engine, this ); // TODO: options?

	// Listen for 'render' events:
	this.__engine__.on( 'render', onRender );

	return this;

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
} // end FUNCTION Line()

/*
* Create a prototype which inherits from the parent prototype.
*/
Line.prototype = Object.create( Base2D.prototype );

/*
* Set the constructor.
*/
Line.prototype.constructor = Line;

/**
* `x` values.
*
* @memberof Line.prototype
* @name x
* @type {(EmptyArray|NumericArray|DateArray)}
* @default []
* @throws {TypeError} must be an empty, date, or numeric array
*
* @example
* var plot = new Line();
* plot.x = [1417563950959,1417563952959];
*
* @example
* var plot = new Line({
*     'x': [1417563950959,1417563952959]
* });
* var x = plot.x;
* // returns [1417563950959,1417563952959]
*/
Object.defineProperty( Line.prototype, 'x', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x/set.js' ),
	'get': require( './props/x/get.js' )
});

/**
* `y` values.
*
* @memberof Line.prototype
* @name y
* @type {(Array|Array<NumericArray>)}
* @default []
* @throws {TypeError} must be either an empty array or an array of numeric arrays
*
* @example
* var plot = new Line();
* plot.x = [1417563950959,1417563952959];
* plot.y = [[0.25,0.23]];
*
* @example
* var plot = new Line({
*     'x': [1417563950959,1417563952959],
*     'y': [[0.25,0.23]]
* });
* var y = plot.y;
* // returns [[0.25,0.23]]
*/
Object.defineProperty( Line.prototype, 'y', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y/set.js' ),
	'get': require( './props/y/get.js' )
});

/**
* Accessor which defines whether a datum is defined. This accessor is used to define how missing values are encoded. The default behavior is to ignore values which are `NaN`.
*
* @memberof Line.prototype
* @name isDefined
* @type {Function}
* @throws {TypeError} must be a function
*
* @example
* var plot = new Line();
* plot.isDefined = function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
*
* @example
* function isDefined( d ) {
*     // Check for `NaN`:
*     return ( d === d );
* }
* var plot = new Line({
*     'isDefined': isDefined
* });
* var fcn = plot.isDefined;
* // returns <Function>
*/
Object.defineProperty( Line.prototype, 'isDefined', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/is-defined/set.js' ),
	'get': require( './props/is-defined/get.js' )
});

/**
* Minimum value of the x-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `x` data.
*
* @memberof Line.prototype
* @name xMin
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Line();
* plot.xMin = -1.0;
*
* @example
* var plot = new Line({
*     'xMin': -10.0
* });
* var xmin = plot.xMin;
* // returns -10.0
*/
Object.defineProperty( Line.prototype, 'xMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-min/set.js' ),
	'get': require( './props/x-min/get.js' )
});

/**
* Maximum value of the x-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `x` data.
*
* @memberof Line.prototype
* @name xMax
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Line();
* plot.xMax = 100.0;
*
* @example
* var plot = new Line({
*     'xMax': 10.0
* });
* var xmax = plot.xMax;
* // returns 10.0
*/
Object.defineProperty( Line.prototype, 'xMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-max/set.js' ),
	'get': require( './props/x-max/get.js' )
});

/**
* Minimum value of the y-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `y` data.
*
* @memberof Line.prototype
* @name yMin
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Line();
* plot.yMin = -100.0;
*
* @example
* var plot = new Line({
*     'yMin': 3.14
* });
* var ymin = plot.yMin;
* // returns 3.14
*/
Object.defineProperty( Line.prototype, 'yMin', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-min/set.js' ),
	'get': require( './props/y-min/get.js' )
});

/**
* Maximum value of the y-axis domain. If the value is set to `null`, when retrieved, the returned value is computed from the `y` data.
*
* @memberof Line.prototype
* @name yMax
* @type {(FiniteNumber|null)}
* @default null
* @throws {TypeError} must be a finite number primitive or null
*
* @example
* var plot = new Line();
* plot.yMax = 100.0;
*
* @example
* var plot = new Line({
*     'yMax': 31.4
* });
* var ymax = plot.yMax;
* // returns 31.4
*/
Object.defineProperty( Line.prototype, 'yMax', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-max/set.js' ),
	'get': require( './props/y-max/get.js' )
});

/**
* Scale function for mapping values to a coordinate along the x-axis. When retrieved, the returned value is a scale function.
*
* @memberof Line.prototype
* @type {string}
* @name xScale
* @default 'linear'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Line();
* plot.xScale = 'time';
*
* @example
* var plot = new Line({
*     'xScale': 'time'
* });
* var scale = plot.xScale;
* // returns <Function>
*/
Object.defineProperty( Line.prototype, 'xScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-scale/get.js' ),
	'set': require( './props/x-scale/set.js' )
});

/**
* Scale function for mapping values to a coordinate along the y-axis. When retrieved, the returned value is a scale function.
*
* @memberof Line.prototype
* @type {string}
* @name yScale
* @default 'linear'
* @throws {TypeError} must be a string primitive
*
* @example
* var plot = new Line();
* plot.yScale = 'linear';
*
* @example
* var plot = new Line({
*     'yScale': 'linear'
* });
* var scale = plot.yScale;
* // returns <Function>
*/
Object.defineProperty( Line.prototype, 'yScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-scale/get.js' ),
	'set': require( './props/y-scale/set.js' )
});

/**
* Interpolation mode.
*
* @memberof Line.prototype
* @name interpolation
* @type {string}
* @default 'linear'
* @throws {TypeError} must be recognized mode
*
* @example
* var plot = new Line();
* plot.interpolation = 'step';
*
* @example
* var plot = new Line({
*     'interpolation': 'step'
* });
* var mode = plot.interpolation;
* // returns 'step'
*/
Object.defineProperty( Line.prototype, 'interpolation', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/interpolation/set.js' ),
	'get': require( './props/interpolation/get.js' )
});

/**
* Spline interpolation tension.
*
* @memberof Line.prototype
* @name tension
* @type {number}
* @default 0.7
* @throws {TypeError} must be a number primitive
*
* @example
* var plot = new Line();
* plot.tension = 0.8;
*
* @example
* var plot = new Line({
*     'tension': 0.8
* });
* var tension = plot.tension;
* // returns 0.8
*/
Object.defineProperty( Line.prototype, 'tension', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/tension/set.js' ),
	'get': require( './props/tension/get.js' )
});

/**
* x-axis domain.
*
* @memberof Line.prototype
* @type {NumberArray}
* @name xDomain
*
* @example
* var plot = new Line({
*     'x': [1,2,3,2]
* });
* var domain = plot.xDomain;
* // returns [1,3]
*/
Object.defineProperty( Line.prototype, 'xDomain', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-domain/get.js' )
});

/**
* y-axis domain.
*
* @memberof Line.prototype
* @type {NumberArray}
* @name yDomain
*
* @example
* var plot = new Line({
*     'y': [[1,2,3,2]]
* });
* var domain = plot.yDomain;
* // returns [1,3]
*/
Object.defineProperty( Line.prototype, 'yDomain', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-domain/get.js' )
});

/**
* Renders a plot.
*
* @memberof Line.prototype
* @name render
* @type {Function}
* @returns {*} rendered plot
*
* @example
* var line = new Line();
*
* var out = line.render();
*/
setReadOnly( Line.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Line;
