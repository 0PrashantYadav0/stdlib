'use strict';

// MODULES //

var isObject = require( '@stdlib/utils/is-object' ); // TODO: plain object
var isFunction = require( '@stdlib/utils/is-function' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isArray = require( '@stdlib/utils/is-array' );
var isNull = require( '@stdlib/utils/is-null' );
var isNonNegativeInteger = require( '@stdlib/utils/is-nonnegative-integer' ).isPrimitive;
var indexOf = require( '@stdlib/utils/indexof' );
var ORIENTATIONS = require( './orientations.json' );


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {Function} options.scale - scale function
* @param {string} options.orientation - axis orientation
* @param {(Array|null)} [options.ticks] - tick values
* @param {NonNegativeInteger} [options.numTicks] - number of ticks
* @param {(null|string|Function)} [options.tickFormat] - tick format
* @param {NonNegativeInteger} [options.tickSize] - tick size
* @param {NonNegativeInteger} [options.tickSizeInner] - inner tick size
* @param {NonNegativeInteger} [options.tickSizeOuter] - outer tick size
* @param {NonNegativeInteger} [options.tickPadding] - tick padding
* @param {string} [options.engine] - rendering engine
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'scale': function scale(){}
*     'orientation': 'left',
*     'tickSize': 10
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	opts.scale = options.scale;
	if ( !isFunction( opts.scale ) ) {
		return new TypeError( 'invalid option. `scale` option must be a function. Option: `' + opts.scale + '`.' );
	}
	opts.orientation = options.orientation;
	if ( indexOf( ORIENTATIONS, opts.orientation ) === -1 ) {
		return new TypeError( 'invalid option. `orientation` option must be one of [' +ORIENTATIONS.join(',') +']. Option: `' + opts.orientation + '`.' );
	}
	if ( options.hasOwnProperty( 'ticks' ) ) {
		opts.ticks = options.ticks;
		if (
			!isNull( opts.ticks ) &&
			!isArray( opts.ticks )
		) {
			return new TypeError( 'invalid option. `ticks` option must be either an array or null. Option: `' + opts.ticks + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'numTicks' ) ) {
		opts.numTicks = options.numTicks;
		if ( !isNonNegativeInteger( opts.numTicks ) ) {
			return new TypeError( 'invalid option. `numTicks` option must be a nonnegative integer. Option: `' + opts.numTicks + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'tickSize' ) ) {
		opts.tickSize = options.tickSize;
		if ( !isNonNegativeInteger( opts.tickSize ) ) {
			return new TypeError( 'invalid option. `tickSize` option must be a nonnegative integer. Option: `' + opts.tickSize + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'tickSizeInner' ) ) {
		opts.tickSizeInner = options.tickSizeInner;
		if ( !isNonNegativeInteger( opts.tickSizeInner ) ) {
			return new TypeError( 'invalid option. `tickSizeInner` option must be a nonnegative integer. Option: `' + opts.tickSizeInner + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'tickSizeOuter' ) ) {
		opts.tickSizeOuter = options.tickSizeOuter;
		if ( !isNonNegativeInteger( opts.tickSizeOuter ) ) {
			return new TypeError( 'invalid option. `tickSizeOuter` option must be a nonnegative integer. Option: `' + opts.tickSizeOuter + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'tickpadding' ) ) {
		opts.tickpadding = options.tickpadding;
		if ( !isNonNegativeInteger( opts.tickpadding ) ) {
			return new TypeError( 'invalid option. `tickpadding` option must be a nonnegative integer. Option: `' + opts.tickpadding + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'tickFormat' ) ) {
		opts.tickFormat = options.tickFormat;
		if (
			!isNull( opts.tickForamt ) &&
			!isString( opts.tickFormat ) &&
			!isFunction( opts.tickFormat )
		) {
			return new TypeError( 'invalid option. `tickFormat` option must be either a string, null, or a function. Option: `' + opts.tickFormat + '.`' );
		}
	}
	if ( options.hasOwnProperty( 'engine' ) ) {
		opts.engine = options.engine;
		if ( !isString( opts.engine ) ) {
			return new TypeError( 'invalid option. `engine` option must be a primitive string. Option: `' + opts.engine + '.`' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
