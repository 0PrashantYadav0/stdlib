'use strict';

// MODULES //

var debug = require( 'debug' )( 'axis:engine' );
var EventEmitter = require( 'events' ).EventEmitter;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );


// AXIS ENGINE //

/**
* Axis engine constructor.
*
* @constructor
* @param {Object} state - engine state
* @param {Options} [options] - engine options
* @throws {TypeError} must provide valid options
* @returns {AxisEngine} engine instance
*/
function AxisEngine( state, options ) {
	var self;
	var opts;
	var err;
	if ( !( this instanceof AxisEngine ) ) {
		if ( arguments.length > 1 ) {
			return new AxisEngine( state, options );
		}
		return new AxisEngine( state );
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating an axis engine with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	// Public, read-only properties...
	setReadOnly( this, 'state', state );

	// "Private" properties...
	Object.defineProperty( this, '_opts', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': opts
	});

	// Bind a listener to update on state changes:
	this.state.on( 'change', onChange );

	return this;

	function onChange() {
		debug( 'Received a change event.' );
		self.render();
	}
} // end FUNCTION AxisEngine()

/*
* Create a prototype which inherits from the parent prototype.
*/
AxisEngine.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
AxisEngine.prototype.constructor = AxisEngine;

/**
* Function for translating ticks.
*
* @memberof AxisEngine.prototype
* @type {Function}
* @name transform
*/
Object.defineProperty( AxisEngine.prototype, 'tickTransform', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/ticktransform/get.js' )
});

/**
* Vertical shift for positioning tick text.
*
* @memberof AxisEngine.prototype
* @type {string}
* @name dy
*/
Object.defineProperty( AxisEngine.prototype, 'dy', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/dy/get.js' )
});

/**
* Text anchor value for text positioning.
*
* @memberof AxisEngine.prototype
* @type {string}
* @name textAnchor
*/
Object.defineProperty( AxisEngine.prototype, 'textAnchor', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/textanchor/get.js' )
});

/**
* "x" attribute for tick positioning.
*
* @memberof AxisEngine.prototype
* @type {string}
* @name xAttr
*/
Object.defineProperty( AxisEngine.prototype, 'xAttr', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/xattr/get.js' )
});

/**
* "y" attribute for tick positioning.
*
* @memberof AxisEngine.prototype
* @type {string}
* @name yAttr
*/
Object.defineProperty( AxisEngine.prototype, 'yAttr', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/yattr/get.js' )
});

/**
* Renders an axis.
*
* @memberof AxisEngine.prototype
* @type {Function}
* @name render
* @returns {VTree} virtual tree
*/
setReadOnly( AxisEngine.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = AxisEngine;
