'use strict';

// MODULES //

var debug = require( 'debug' )( 'canvas-2d:engine:components:main' );
var createCanvas = require( '@stdlib/plot/components/svg/canvas' );
var createDefs = require( '@stdlib/plot/components/svg/defs' );
var createClipPath = require( '@stdlib/plot/components/svg/clip-path' );
var createGraph = require( '@stdlib/plot/components/svg/graph' );
var createAnnotations = require( '@stdlib/plot/components/svg/annotations' );
var createTitle = require( '@stdlib/plot/components/svg/title' );
var createBkgd = require( '@stdlib/plot/components/svg/background' );
var createMarks = require( '@stdlib/plot/components/svg/marks' );
var createXAxis = require( './xaxis.js' );
var createYAxis = require( './yaxis.js' );


// RENDER //

/**
* Renders a virtual DOM tree.
*
* @private
* @param {Object} ctx - context
* @returns {VTree} virtual tree
*/
function render( ctx ) {
	var annotations;
	var clipPath;
	var canvas;
	var graph;
	var xAxis;
	var yAxis;
	var marks;
	var title;
	var defs;
	var bkgd;
	var id;

	// Create the SVG canvas:
	canvas = createCanvas({
		'width': ctx.state.width,
		'height': ctx.state.height
	});
	canvas = canvas.render();

	// Create the SVG definitions:
	defs = createDefs();
	defs = defs.render();

	id = '123456';
	clipPath = createClipPath({
		'width': ctx.state.graphWidth,
		'height': ctx.state.graphHeight,
		'id': id
	});
	clipPath = clipPath.render();
	defs.children.push( clipPath );
	defs.count += clipPath.count;

	// Create the graph:
	graph = createGraph({
		'translateX': ctx.state.paddingLeft,
		'translateY': ctx.state.paddingTop
	});
	graph = graph.render();

	bkgd = createBkgd({
		'width': ctx.state.graphWidth,
		'height': ctx.state.graphHeight
	});
	bkgd = bkgd.render();
	graph.children.push( bkgd );
	graph.count += bkgd.count;

	marks = createMarks({
		'clipPathId': id
	});
	marks = marks.render();
	graph.children.push( marks );
	graph.count += marks.count;

	xAxis = createXAxis( ctx );
	graph.children.push( xAxis );
	graph.count += xAxis.count;

	yAxis = createYAxis( ctx );
	graph.children.push( yAxis );
	graph.count += yAxis.count;

	// Create the annotations:
	annotations = createAnnotations();
	annotations = annotations.render();

	title = createTitle({
		'text': ctx.state.title
	});
	annotations.children.push( title );
	annotations.count += title.count;

	// Append the main elements to the canvas:
	canvas.children.push( defs );
	canvas.count += defs.count;

	canvas.children.push( graph );
	canvas.count += graph.count;

	canvas.children.push( annotations );
	canvas.count += annotations.count;

	return canvas;
} // end FUNCTION render()


// EXPORTS //

module.exports = render;
