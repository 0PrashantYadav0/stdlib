'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isObject = require( '@stdlib/utils/is-object' ); // TODO: plain object
var validators = require( './validators' );


// VARIABLES //

var KEYS = getKeys( validators );


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveNumber} [options.width] - canvas width
* @param {PositiveNumber} [options.height] - canvas height
* @param {NonNegativeInteger} [options.paddingLeft] - left padding
* @param {NonNegativeInteger} [options.paddingRight] - right padding
* @param {NonNegativeInteger} [options.paddingTop] - top padding
* @param {NonNegativeInteger} [options.paddingBottom] - bottom padding
* @param {Function} [options.xScale] - x-axis scale
* @param {Function} [options.yScale] - y-axis scale
* @param {(Function|null)} [options.xTickFormat] - x-axis tick format
* @param {(Function|null)} [options.yTickFormat] - y-axis tick format
* @param {(NonNegativeInteger|null)} [options.xNumTicks] - number of x-axis tick marks
* @param {(NonNegativeInteger|null)} [options.yNumTicks] - number of y-axis tick marks
* @param {string} [options.xAxisOrient] - x-axis orientation
* @param {string} [options.yAxisOrient] - y-axis orientation
* @param {string} [options.title] - title
* @param {string} [options.xLabel] - x-axis label
* @param {string} [options.yLabel] - y-axis label
* @param {string} [options.engine] - canvas engine
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'width': 720,
*     'height': 500,
*     'engine': 'svg'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	var err;
	var key;
	var val;
	var i;
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	for ( i = 0; i < KEYS.length; i++ ) {
		key = KEYS[ i ];
		if ( options.hasOwnProperty( key ) ) {
			val = options[ key ];
			err = validators[ key ]( val );
			if ( err ) {
				return err;
			}
			opts[ key ] = val;
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
