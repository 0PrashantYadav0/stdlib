'use strict';

// MODULES //

var debug = require( 'debug' )( 'canvas-2d:main' );
var EventEmitter = require( 'events' ).EventEmitter;
var linear = require( 'd3-scale' ).scaleLinear; // TODO: remove
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var copy = require( '@stdlib/utils/copy' );
var createEngine = require( './engines' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// CANVAS //

/**
* Canvas constructor.
*
* @constructor
* @param {Options} [options] - constructor options
* @param {PositiveNumber} [options.width=400] - canvas width
* @param {PositiveNumber} [options.height=400] - canvas height
* @param {NonNegativeInteger} [options.paddingLeft=90] - left padding
* @param {NonNegativeInteger} [options.paddingRight=20] - right padding
* @param {NonNegativeInteger} [options.paddingTop=80] - top padding
* @param {NonNegativeInteger} [options.paddingBottom=80] - bottom padding
* @param {Function} [options.xScale] - x-axis scale
* @param {Function} [options.yScale] - y-axis scale
* @param {(Function|null)} [options.xTickFormat=null] - x-axis tick format
* @param {(Function|null)} [options.yTickFormat=null] - y-axis tick format
* @param {(NonNegativeInteger|null)} [options.xNumTicks=5] - number of x-axis tick marks
* @param {(NonNegativeInteger|null)} [options.yNumTicks=5] - number of y-axis tick marks
* @param {string} [options.xAxisOrient='bottom'] - x-axis orientation
* @param {string} [options.yAxisOrient='left'] - y-axis orientation
* @param {string} [options.title=''] - title
* @param {string} [options.xLabel='x'] - x-axis label
* @param {string} [options.yLabel='y'] - y-axis label
* @param {string} [options.engine='svg'] - canvas engine
* @throws {TypeError} must provide valid options
* @returns {Canvas} Canvas instance
*
* @example
* var canvas = new Canvas();
*/
function Canvas( options ) {
	var self;
	var opts;
	var err;
	if ( !(this instanceof Canvas) ) {
		if ( arguments.length ) {
			return new Canvas( options );
		}
		return new Canvas();
	}
	self = this;
	opts = copy( defaults );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating a canvas with the following configuration: %s.', JSON.stringify( opts ) );
	EventEmitter.call( this );

	Object.defineProperty( this, '_width', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.width
	});
	Object.defineProperty( this, '_height', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.height
	});
	Object.defineProperty( this, '_paddingLeft', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingLeft // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingRight', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingRight // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingTop', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingTop // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_paddingBottom', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.paddingBottom // FIXME: depends on orientation (may require using `null` to flag)
	});
	Object.defineProperty( this, '_xScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xScale || linear()
	});
	Object.defineProperty( this, '_yScale', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yScale || linear()
	});
	Object.defineProperty( this, '_xAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xAxisOrient
	});
	Object.defineProperty( this, '_yAxisOrient', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yAxisOrient
	});
	Object.defineProperty( this, '_xNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xNumTicks
	});
	Object.defineProperty( this, '_yNumTicks', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yNumTicks
	});
	Object.defineProperty( this, '_xTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xTickFormat
	});
	Object.defineProperty( this, '_yTickFormat', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yTickFormat
	});
	Object.defineProperty( this, '_title', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.title
	});
	Object.defineProperty( this, '_xLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.xLabel
	});
	Object.defineProperty( this, '_yLabel', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.yLabel
	});
	Object.defineProperty( this, '_engine', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': opts.engine
	});
	Object.defineProperty( this, '__engine__', {
		'configurable': false,
		'enumerable': false,
		'writable': true,
		'value': null
	});

	// Initialize an engine:
	this.__engine__ = createEngine( this._engine, this ); // TODO: options?

	// Listen for 'render' events:
	this.__engine__.on( 'render', onRender );

	return this;

	/**
	* Re-emits a render event.
	*
	* @private
	*/
	function onRender() {
		var args;
		var i;
		debug( 'Received a render event. Re-emitting...' );
		args = new Array( arguments.length+1 );
		args[ 0 ] = 'render';
		for ( i = 0; i < arguments.length; i++ ) {
			args[ i+1 ] = arguments[ i ];
		}
		self.emit.apply( self, args );
	}
} // end FUNCTION Canvas()

/*
* Create a prototype which inherits from the parent prototype.
*/
Canvas.prototype = Object.create( EventEmitter.prototype );

/*
* Set the constructor.
*/
Canvas.prototype.constructor = Canvas;

/**
* Canvas width.
*
* @memberof Canvas.prototype
* @name width
* @type {PositiveNumber}
* @default 400 (px)
* @throws {TypeError} must be a positive number
*
* @example
* var canvas = new Canvas();
* canvas.width = 100;
*
* @example
* var canvas = new Canvas({
*     'width': 480
* });
* var width = canvas.width;
* // returns 480
*/
Object.defineProperty( Canvas.prototype, 'width', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/width/set.js' ),
	'get': require( './props/width/get.js' )
});

/**
* Canvas height.
*
* @memberof Canvas.prototype
* @name height
* @type {PositiveNumber}
* @default 400 (px)
* @throws {TypeError} must be a positive number
*
* @example
* var canvas = new Canvas();
* canvas.height = 100;
*
* @example
* var canvas = new Canvas({
*     'height': 360
* });
* var height = canvas.height;
* // returns 360
*/
Object.defineProperty( Canvas.prototype, 'height', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/height/set.js' ),
	'get': require( './props/height/get.js' )
});

/**
* Canvas left padding. Typically used to create room for a left-oriented y-axis.
*
* @memberof Canvas.prototype
* @name paddingLeft
* @type {NonNegativeInteger}
* @default 90 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var canvas = new Canvas();
* canvas.paddingLeft = 100;
*
* @example
* var canvas = new Canvas({
*     'paddingLeft': 100
* });
* var padding = canvas.paddingLeft;
* // returns 100
*/
Object.defineProperty( Canvas.prototype, 'paddingLeft', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-left/set.js' ),
	'get': require( './props/padding-left/get.js' )
});

/**
* Canvas right padding. Typically used to create room for a right-oriented y-axis.
*
* @memberof Canvas.prototype
* @name paddingRight
* @type {NonNegativeInteger}
* @default 20 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var canvas = new Canvas();
* canvas.paddingRight = 100;
*
* @example
* var canvas = new Canvas({
*     'paddingRight': 100
* });
* var padding = canvas.paddingRight;
* // returns 100
*/
Object.defineProperty( Canvas.prototype, 'paddingRight', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-right/set.js' ),
	'get': require( './props/padding-right/get.js' )
});

/**
* Canvas top padding. Typically used to create room for a title or top-oriented x-axis.
*
* @memberof Canvas.prototype
* @name paddingTop
* @type {NonNegativeInteger}
* @default 80 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var canvas = new Canvas();
* canvas.paddingTop = 100;
*
* @example
* var canvas = new Canvas({
*     'paddingTop': 100
* });
* var padding = canvas.paddingTop;
* // returns 100
*/
Object.defineProperty( Canvas.prototype, 'paddingTop', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-top/set.js' ),
	'get': require( './props/padding-top/get.js' )
});

/**
* Canvas bottom padding. Typically used to create room for a bottom-oriented y-axis.
*
* @memberof Canvas.prototype
* @name paddingBottom
* @type {NonNegativeInteger}
* @default 80 (px)
* @throws {TypeError} must be a nonnegative integer
*
* @example
* var canvas = new Canvas();
* canvas.paddingBottom = 100;
*
* @example
* var canvas = new Canvas({
*     'paddingBottom': 100
* });
* var padding = canvas.paddingBottom;
* // returns 100
*/
Object.defineProperty( Canvas.prototype, 'paddingBottom', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/padding-bottom/set.js' ),
	'get': require( './props/padding-bottom/get.js' )
});

/**
* Scale function for mapping values to a coordinate along the x-axis.
*
* @memberof Canvas.prototype
* @type {Function}
* @name xScale
* @throws {TypeError} must be a function
*
* @example
* var canvas = new Canvas();
* var scale = canvas.xScale;
* // returns <Function>
*/
Object.defineProperty( Canvas.prototype, 'xScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-scale/get.js' ),
	'set': require( './props/x-scale/set.js' )
});

/**
* Scale function for mapping values to a coordinate along the y-axis.
*
* @memberof Canvas.prototype
* @type {Function}
* @name yScale
* @throws {TypeError} must be a function
*
* @example
* var canvas = new Canvas();
* var scale = canvas.yScale;
* // returns <Function>
*/
Object.defineProperty( Canvas.prototype, 'yScale', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-scale/get.js' ),
	'set': require( './props/y-scale/set.js' )
});

/**
* x-axis tick format.
*
* @memberof Canvas.prototype
* @name xTickFormat
* @type {(Function|null)}
* @default null
* @throws {TypeError} must be a function or null
*
* @example
* var canvas = new Canvas();
* var fmt = canvas.xTickFormat;
* // returns <Function>
*/
Object.defineProperty( Canvas.prototype, 'xTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-tick-format/set.js' ),
	'get': require( './props/x-tick-format/get.js' )
});

/**
* y-axis tick format.
*
* @memberof Canvas.prototype
* @name yTickFormat
* @type {(Function|null)}
* @default null
* @throws {TypeError} must be a function or null
*
* @example
* var canvas = new Canvas();
* var fmt = canvas.yTickFormat;
* // returns <Function>
*/
Object.defineProperty( Canvas.prototype, 'yTickFormat', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-tick-format/set.js' ),
	'get': require( './props/y-tick-format/get.js' )
});

/**
* Number of x-axis tick marks.
*
* @memberof Canvas.prototype
* @name xNumTicks
* @type {(NonNegativeInteger|null)}
* @default 5
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var canvas = new Canvas();
* canvas.xNumTicks = 10;
*
* @example
* var canvas = new Canvas({
*     'xNumTicks': 10
* });
* var ticks = canvas.xNumTicks;
* // returns 10
*/
Object.defineProperty( Canvas.prototype, 'xNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-num-ticks/set.js' ),
	'get': require( './props/x-num-ticks/get.js' )
});

/**
* Number of y-axis tick marks.
*
* @memberof Canvas.prototype
* @name yNumTicks
* @type {(NonNegativeInteger|null)}
* @default 5
* @throws {TypeError} must be a nonnegative integer or null
*
* @example
* var canvas = new Canvas();
* canvas.yNumTicks = 10;
*
* @example
* var canvas = new Canvas({
*     'yNumTicks': 10
* });
* var ticks = canvas.yNumTicks;
* // returns 10
*/
Object.defineProperty( Canvas.prototype, 'yNumTicks', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-num-ticks/set.js' ),
	'get': require( './props/y-num-ticks/get.js' )
});

/**
* x-axis orientation.
*
* @memberof Canvas.prototype
* @name xAxisOrient
* @type {string}
* @default 'bottom'
* @throws {TypeError} must be either `'top'` or `'bottom'`
*
* @example
* var canvas = new Canvas();
* canvas.xAxisOrient = 'bottom';
*
* @example
* var canvas = new Canvas({
*     'xAxisOrient': 'bottom'
* });
* var orientation = canvas.xAxisOrient;
* // returns 'bottom'
*/
Object.defineProperty( Canvas.prototype, 'xAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-axis-orient/set.js' ),
	'get': require( './props/x-axis-orient/get.js' )
});

/**
* y-axis orientation.
*
* @memberof Canvas.prototype
* @name yAxisOrient
* @type {string}
* @default 'left'
* @throws {TypeError} must be either `'left'` or `'right'`
*
* @example
* var canvas = new Canvas();
* canvas.yAxisOrient = 'left';
*
* @example
* var canvas = new Canvas({
*     'yAxisOrient': 'left'
* });
* var orientation = canvas.yAxisOrient;
* // returns 'left'
*/
Object.defineProperty( Canvas.prototype, 'yAxisOrient', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-axis-orient/set.js' ),
	'get': require( './props/y-axis-orient/get.js' )
});

/**
* Title.
*
* @memberof Canvas.prototype
* @name title
* @type {string}
* @default ''
* @throws {TypeError} must be a string primitive
*
* @example
* var canvas = new Canvas();
* canvas.title = 'Time Series';
*
* @example
* var canvas = new Canvas({
*     'title': 'Time Series'
* });
* var t = canvas.title;
* // returns 'Time Series'
*/
Object.defineProperty( Canvas.prototype, 'title', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/title/set.js' ),
	'get': require( './props/title/get.js' )
});

/**
* x-axis label.
*
* @memberof Canvas.prototype
* @name xLabel
* @type {string}
* @default 'x'
* @throws {TypeError} must be a string primitive
*
* @example
* var canvas = new Canvas();
* canvas.xLabel = 'time';
*
* @example
* var canvas = new Canvas({
*     'xLabel': 'time'
* });
* var xLabel = canvas.xLabel;
* // returns 'time'
*/
Object.defineProperty( Canvas.prototype, 'xLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/x-label/set.js' ),
	'get': require( './props/x-label/get.js' )
});

/**
* y-axis label.
*
* @memberof Canvas.prototype
* @name yLabel
* @type {string}
* @default 'y'
* @throws {TypeError} must be a string primitive
*
* @example
* var canvas = new Canvas();
* canvas.yLabel = 'value';
*
* @example
* var canvas = new Canvas({
*     'yLabel': 'value'
* });
* var yLabel = canvas.yLabel;
* // returns 'value'
*/
Object.defineProperty( Canvas.prototype, 'yLabel', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/y-label/set.js' ),
	'get': require( './props/y-label/get.js' )
});

/**
* Canvas engine.
*
* @memberof Canvas.prototype
* @name engine
* @type {string}
* @default 'svg'
* @throws {TypeError} must be a string primitive
*
* @example
* var canvas = new Canvas();
* canvas.engine = 'svg';
*
* @example
* var canvas = new Canvas({
*     'engine': 'svg'
* });
* var engine = canvas.engine;
* // returns 'svg'
*/
Object.defineProperty( Canvas.prototype, 'engine', {
	'configurable': false,
	'enumerable': true,
	'set': require( './props/engine/set.js' ),
	'get': require( './props/engine/get.js' )
});

/**
* Expected graph width.
*
* @memberof Canvas.prototype
* @type {number}
* @name graphWidth
*
* @example
* var canvas = new Canvas({
*     'width': 100,
*     'paddingLeft': 10,
*     'paddingRight': 10
* });
* var width = canvas.graphWidth;
* // returns 80
*/
Object.defineProperty( Canvas.prototype, 'graphWidth', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/graph-width/get.js' )
});

/**
* Expected graph height.
*
* @memberof Canvas.prototype
* @type {number}
* @name graphHeight
*
* @example
* var canvas = new Canvas({
*     'height': 100,
*     'paddingTop': 10,
*     'paddingBottom': 20
* });
* var height = canvas.graphHeight;
* // returns 70
*/
Object.defineProperty( Canvas.prototype, 'graphHeight', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/graph-height/get.js' )
});

/**
* x-axis.
*
* @memberof Canvas.prototype
* @type {Axis}
* @name xAxis
*
* @example
* var canvas = new Canvas();
* var axis = canvas.xAxis;
*/
Object.defineProperty( Canvas.prototype, 'xAxis', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/x-axis/get.js' )
});

/**
* y-axis.
*
* @memberof Canvas.prototype
* @type {Axis}
* @name yAxis
*
* @example
* var canvas = new Canvas();
* var axis = canvas.yAxis;
*/
Object.defineProperty( Canvas.prototype, 'yAxis', {
	'configurable': false,
	'enumerable': true,
	'get': require( './props/y-axis/get.js' )
});

/**
* Renders a canvas.
*
* @memberof Canvas.prototype
* @name render
* @type {Function}
* @returns {*} rendered canvas
*
* @example
* var canvas = new Canvas();
*
* var out = canvas.render();
*/
setReadOnly( Canvas.prototype, 'render', require( './methods/render.js' ) );


// EXPORTS //

module.exports = Canvas;
