/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/* tslint:disable:max-line-length */
/* tslint:disable:max-file-line-count */

import FLOAT16_CBRT_EPS = require( '@stdlib/constants/float16//cbrt-eps' );
import FLOAT16_EPS = require( '@stdlib/constants/float16//eps' );
import FLOAT16_EXPONENT_BIAS = require( '@stdlib/constants/float16//exponent-bias' );
import FLOAT16_MAX = require( '@stdlib/constants/float16//max' );
import FLOAT16_MAX_SAFE_INTEGER = require( '@stdlib/constants/float16//max-safe-integer' );
import FLOAT16_MIN_SAFE_INTEGER = require( '@stdlib/constants/float16//min-safe-integer' );
import FLOAT16_NINF = require( '@stdlib/constants/float16//ninf' );
import FLOAT16_NUM_BYTES = require( '@stdlib/constants/float16//num-bytes' );
import FLOAT16_PINF = require( '@stdlib/constants/float16//pinf' );
import FLOAT16_PRECISION = require( '@stdlib/constants/float16//precision' );
import FLOAT16_SMALLEST_NORMAL = require( '@stdlib/constants/float16//smallest-normal' );
import FLOAT16_SMALLEST_SUBNORMAL = require( '@stdlib/constants/float16//smallest-subnormal' );
import FLOAT16_SQRT_EPS = require( '@stdlib/constants/float16//sqrt-eps' );

/**
* Interface describing the `float16` namespace.
*/
interface Namespace {
	/**
	* Cube root of half-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FLOAT16_CBRT_EPS;
	* // returns 0.09921256574801247
	*/
	FLOAT16_CBRT_EPS: typeof FLOAT16_CBRT_EPS;

	/**
	* Difference between one and the smallest value greater than one that can be represented as a half-precision floating-point number.
	*
	* @example
	* var eps = ns.FLOAT16_EPSILON;
	* // returns 0.0009765625
	*/
	FLOAT16_EPS: typeof FLOAT16_EPS;

	/**
	* The bias of a half-precision floating-point number's exponent.
	*
	* @example
	* var bias = ns.FLOAT16_EXPONENT_BIAS;
	* // returns 15
	*/
	FLOAT16_EXPONENT_BIAS: typeof FLOAT16_EXPONENT_BIAS;

	/**
	* Maximum half-precision floating-point number.
	*
	* @example
	* var max = ns.FLOAT16_MAX;
	* // returns 65504.0
	*/
	FLOAT16_MAX: typeof FLOAT16_MAX;

	/**
	* Maximum safe half-precision floating-point integer.
	*
	* @example
	* var max = ns.FLOAT16_MAX_SAFE_INTEGER;
	* // returns 2047
	*/
	FLOAT16_MAX_SAFE_INTEGER: typeof FLOAT16_MAX_SAFE_INTEGER;

	/**
	* Minimum safe half-precision floating-point integer.
	*
	* @example
	* var min = ns.FLOAT16_MIN_SAFE_INTEGER;
	* // returns -2047
	*/
	FLOAT16_MIN_SAFE_INTEGER: typeof FLOAT16_MIN_SAFE_INTEGER;

	/**
	* Half-precision floating-point negative infinity.
	*
	* @example
	* var ninf = ns.FLOAT16_NINF;
	* // returns -infinity
	*/
	FLOAT16_NINF: typeof FLOAT16_NINF;

	/**
	* Size (in bytes) of a half-precision floating-point number.
	*
	* @example
	* var bytes = ns.FLOAT16_NUM_BYTES;
	* // returns 2
	*/
	FLOAT16_NUM_BYTES: typeof FLOAT16_NUM_BYTES;

	/**
	* Half-precision floating-point positive infinity.
	*
	* @example
	* var pinf = ns.FLOAT16_PINF;
	* // returns +infinity
	*/
	FLOAT16_PINF: typeof FLOAT16_PINF;

	/**
	* Effective number of bits in the significand of a half-precision floating-point number.
	*
	* @example
	* var precision = ns.FLOAT16_PRECISION;
	* // returns 11
	*/
	FLOAT16_PRECISION: typeof FLOAT16_PRECISION;

	/**
	* Smallest positive half-precision floating-point normal number.
	*
	* @example
	* var smallest = ns.FLOAT16_SMALLEST_NORMAL;
	* // returns 6.103515625e-5
	*/
	FLOAT16_SMALLEST_NORMAL: typeof FLOAT16_SMALLEST_NORMAL;

	/**
	* Smallest positive half-precision floating-point subnormal number.
	*
	* @example
	* var smallest = ns.FLOAT16_SMALLEST_SUBNORMAL;
	* // returns 5.960464477539063e-8
	*/
	FLOAT16_SMALLEST_SUBNORMAL: typeof FLOAT16_SMALLEST_SUBNORMAL;

	/**
	* Square root of half-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FLOAT16_SQRT_EPS;
	* // returns 0.03125
	*/
	FLOAT16_SQRT_EPS: typeof FLOAT16_SQRT_EPS;
}

/**
* Half-precision floating-point mathematical constants.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
