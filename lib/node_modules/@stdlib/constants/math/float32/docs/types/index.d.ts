/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/* tslint:disable:max-line-length */
/* tslint:disable:max-file-line-count */

import FLOAT32_CBRT_EPS = require( '@stdlib/constants/math/float32/cbrt-eps' );
import FLOAT32_EPS = require( '@stdlib/constants/math/float32/eps' );
import FLOAT32_EXPONENT_BIAS = require( '@stdlib/constants/math/float32/exponent-bias' );
import FLOAT32_MAX = require( '@stdlib/constants/math/float32/max' );
import FLOAT32_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float32/max-safe-integer' );
import FLOAT32_MIN_SAFE_INTEGER = require( '@stdlib/constants/math/float32/min-safe-integer' );
import FLOAT32_NINF = require( '@stdlib/constants/math/float32/ninf' );
import FLOAT32_NUM_BYTES = require( '@stdlib/constants/math/float32/num-bytes' );
import FLOAT32_PINF = require( '@stdlib/constants/math/float32/pinf' );
import FLOAT32_PRECISION = require( '@stdlib/constants/math/float32/precision' );
import FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/math/float32/smallest-normal' );
import FLOAT32_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float32/smallest-subnormal' );
import FLOAT32_SQRT_EPS = require( '@stdlib/constants/math/float32/sqrt-eps' );

/**
* Interface describing the `float32` namespace.
*/
interface Namespace {
	/**
	* Cube root of single-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FLOAT32_CBRT_EPS;
	* // returns 0.004921566601151848
	*/
	FLOAT32_CBRT_EPS: typeof FLOAT32_CBRT_EPS;

	/**
	* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.
	*
	* @example
	* var eps = ns.FLOAT32_EPS;
	* // returns 1.1920928955078125e-7
	*/
	FLOAT32_EPS: typeof FLOAT32_EPS;

	/**
	* The bias of a single-precision floating-point number's exponent.
	*
	* @example
	* var bias = ns.FLOAT32_EXPONENT_BIAS;
	* // returns 127
	*/
	FLOAT32_EXPONENT_BIAS: typeof FLOAT32_EXPONENT_BIAS;

	/**
	* Maximum single-precision floating-point number.
	*
	* @example
	* var max = ns.FLOAT32_MAX;
	* // returns 3.4028234663852886e+38
	*/
	FLOAT32_MAX: typeof FLOAT32_MAX;

	/**
	* Maximum safe single-precision floating-point integer.
	*
	* @example
	* var max = ns.FLOAT32_MAX_SAFE_INTEGER;
	* // returns 16777215
	*/
	FLOAT32_MAX_SAFE_INTEGER: typeof FLOAT32_MAX_SAFE_INTEGER;

	/**
	* Minimum safe single-precision floating-point integer.
	*
	* @example
	* var min = ns.FLOAT32_MIN_SAFE_INTEGER;
	* // returns -16777215
	*/
	FLOAT32_MIN_SAFE_INTEGER: typeof FLOAT32_MIN_SAFE_INTEGER;

	/**
	* Single-precision floating-point negative infinity.
	*
	* @example
	* var ninf = ns.FLOAT32_NINF;
	* // returns -infinity
	*/
	FLOAT32_NINF: typeof FLOAT32_NINF;

	/**
	* Size (in bytes) of a single-precision floating-point number.
	*
	* @example
	* var bytes = ns.FLOAT32_NUM_BYTES
	* // returns 4
	*/
	FLOAT32_NUM_BYTES: typeof FLOAT32_NUM_BYTES;

	/**
	* Single-precision floating-point positive infinity.
	*
	* @example
	* var pinf = ns.FLOAT32_PINF;
	* // returns +infinity
	*/
	FLOAT32_PINF: typeof FLOAT32_PINF;

	/**
	* Effective number of bits in the significand of a single-precision floating-point number.
	*
	* @example
	* var precision = ns.FLOAT32_PRECISION;
	* // returns 24
	*/
	FLOAT32_PRECISION: typeof FLOAT32_PRECISION;

	/**
	* Smallest positive single-precision floating-point normal number.
	*
	* @example
	* var smallest = ns.FLOAT32_SMALLEST_NORMAL;
	* // returns 1.1754943508222875e-38
	*/
	FLOAT32_SMALLEST_NORMAL: typeof FLOAT32_SMALLEST_NORMAL;

	/**
	* Smallest positive single-precision floating-point subnormal number.
	*
	* @example
	* var smallest = ns.FLOAT32_SMALLEST_SUBNORMAL;
	* // returns 1.401298464324817e-45
	*/
	FLOAT32_SMALLEST_SUBNORMAL: typeof FLOAT32_SMALLEST_SUBNORMAL;

	/**
	* Square root of single-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FLOAT32_SQRT_EPS;
	* // returns 0.0003452669770922512
	*/
	FLOAT32_SQRT_EPS: typeof FLOAT32_SQRT_EPS;
}

/**
* Single-precision floating-point mathematical constants.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
