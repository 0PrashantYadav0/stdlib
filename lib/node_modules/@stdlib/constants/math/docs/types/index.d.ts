/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/* tslint:disable:max-line-length */
/* tslint:disable:max-file-line-count */

import COMPLEX64_NUM_BYTES = require( '@stdlib/constants/math/complex64-num-bytes' );
import COMPLEX128_NUM_BYTES = require( '@stdlib/constants/math/complex128-num-bytes' );
import FLOAT16_CBRT_EPS = require( '@stdlib/constants/math/float16-cbrt-eps' );
import FLOAT16_EPS = require( '@stdlib/constants/math/float16-eps' );
import FLOAT16_EXPONENT_BIAS = require( '@stdlib/constants/math/float16-exponent-bias' );
import FLOAT16_MAX = require( '@stdlib/constants/math/float16-max' );
import FLOAT16_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float16-max-safe-integer' );
import FLOAT16_MIN_SAFE_INTEGER = require( '@stdlib/constants/math/float16-min-safe-integer' );
import FLOAT16_NINF = require( '@stdlib/constants/math/float16-ninf' );
import FLOAT16_NUM_BYTES = require( '@stdlib/constants/math/float16-num-bytes' );
import FLOAT16_PINF = require( '@stdlib/constants/math/float16-pinf' );
import FLOAT16_PRECISION = require( '@stdlib/constants/math/float16-precision' );
import FLOAT16_SMALLEST_NORMAL = require( '@stdlib/constants/math/float16-smallest-normal' );
import FLOAT16_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float16-smallest-subnormal' );
import FLOAT16_SQRT_EPS = require( '@stdlib/constants/math/float16-sqrt-eps' );
import APERY = require( '@stdlib/constants/math/float64-apery' );
import CATALAN = require( '@stdlib/constants/math/float64-catalan' );
import CBRT_EPS = require( '@stdlib/constants/math/float64-cbrt-eps' );
import E = require( '@stdlib/constants/math/float64-e' );
import EPS = require( '@stdlib/constants/math/float64-eps' );
import EULERGAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
import FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
import FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );
import FOURTH_ROOT_EPS = require( '@stdlib/constants/math/float64-fourth-root-eps' );
import GAMMA_LANCZOS_G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
import GLAISHER = require( '@stdlib/constants/math/float64-glaisher-kinkelin' );
import HALF_LN2 = require( '@stdlib/constants/math/float64-half-ln-two' );
import HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
import FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
import FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants/math/float64-high-word-significand-mask' );
import LN_HALF = require( '@stdlib/constants/math/float64-ln-half' );
import LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
import LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
import LN10 = require( '@stdlib/constants/math/float64-ln-ten' );
import LN2 = require( '@stdlib/constants/math/float64-ln-two' );
import LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
import LOG2E = require( '@stdlib/constants/math/float64-log2-e' );
import LOG10E = require( '@stdlib/constants/math/float64-log10-e' );
import FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
import FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
import FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-max-base10-exponent' );
import FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base10-exponent-subnormal' );
import FLOAT64_MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
import FLOAT64_MAX_SAFE_FIBONACCI = require( '@stdlib/constants/math/float64-max-safe-fibonacci' );
import FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
import FLOAT64_MAX_SAFE_LUCAS = require( '@stdlib/constants/math/float64-max-safe-lucas' );
import FLOAT64_MAX_SAFE_NTH_FIBONACCI = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' );
import FLOAT64_MAX_SAFE_NTH_LUCAS = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' );
import FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-min-base2-exponent' );
import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
import FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-min-base10-exponent' );
import FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
import FLOAT64_MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
import FLOAT64_MIN_SAFE_INTEGER = require( '@stdlib/constants/math/float64-min-safe-integer' );
import NINF = require( '@stdlib/constants/math/float64-ninf' );
import FLOAT64_NUM_BYTES = require( '@stdlib/constants/math/float64-num-bytes' );
import PHI = require( '@stdlib/constants/math/float64-phi' );
import PI = require( '@stdlib/constants/math/float64-pi' );
import PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );
import PINF = require( '@stdlib/constants/math/float64-pinf' );
import FLOAT64_PRECISION = require( '@stdlib/constants/math/float64-precision' );
import FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
import FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float64-smallest-subnormal' );
import SQRT_EPS = require( '@stdlib/constants/math/float64-sqrt-eps' );
import SQRT_HALF = require( '@stdlib/constants/math/float64-sqrt-half' );
import SQRT_HALF_PI = require( '@stdlib/constants/math/float64-sqrt-half-pi' );
import SQRT_PHI = require( '@stdlib/constants/math/float64-sqrt-phi' );
import SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
import SQRT_THREE = require( '@stdlib/constants/math/float64-sqrt-three' );
import SQRT_TWO = require( '@stdlib/constants/math/float64-sqrt-two' );
import SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
import TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
import INT8_MAX = require( '@stdlib/constants/math/int8-max' );
import INT8_MIN = require( '@stdlib/constants/math/int8-min' );
import INT8_NUM_BYTES = require( '@stdlib/constants/math/int8-num-bytes' );
import INT16_MAX = require( '@stdlib/constants/math/int16-max' );
import INT16_MIN = require( '@stdlib/constants/math/int16-min' );
import INT16_NUM_BYTES = require( '@stdlib/constants/math/int16-num-bytes' );
import INT32_MAX = require( '@stdlib/constants/math/int32-max' );
import INT32_MIN = require( '@stdlib/constants/math/int32-min' );
import INT32_NUM_BYTES = require( '@stdlib/constants/math/int32-num-bytes' );
import UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
import UINT8_NUM_BYTES = require( '@stdlib/constants/math/uint8-num-bytes' );
import UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
import UINT16_NUM_BYTES = require( '@stdlib/constants/math/uint16-num-bytes' );
import UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
import UINT32_NUM_BYTES = require( '@stdlib/constants/math/uint32-num-bytes' );

/**
* Interface describing the `math` namespace.
*/
interface Namespace {
	/**
	* Size (in bytes) of a 64-bit complex number.
	*
	* @example
	* var bytes = ns.COMPLEX64_NUM_BYTES;
	* // returns 8
	*/
	COMPLEX64_NUM_BYTES: typeof COMPLEX64_NUM_BYTES;

	/**
	* Size (in bytes) of a 128-bit complex number.
	*
	* @example
	* var bytes = ns.COMPLEX128_NUM_BYTES;
	* // returns 16
	*/
	COMPLEX128_NUM_BYTES: typeof COMPLEX128_NUM_BYTES;

	/**
	* Cube root of half-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FLOAT16_CBRT_EPS;
	* // returns 0.09921256574801247
	*/
	FLOAT16_CBRT_EPS: typeof FLOAT16_CBRT_EPS;

	/**
	* Difference between one and the smallest value greater than one that can be represented as a half-precision floating-point number.
	*
	* @example
	* var eps = ns.FLOAT16_EPSILON;
	* // returns 0.0009765625
	*/
	FLOAT16_EPS: typeof FLOAT16_EPS;

	/**
	* The bias of a half-precision floating-point number's exponent.
	*
	* @example
	* var bias = ns.FLOAT16_EXPONENT_BIAS;
	* // returns 15
	*/
	FLOAT16_EXPONENT_BIAS: typeof FLOAT16_EXPONENT_BIAS;

	/**
	* Maximum half-precision floating-point number.
	*
	* @example
	* var max = ns.FLOAT16_MAX;
	* // returns 65504.0
	*/
	FLOAT16_MAX: typeof FLOAT16_MAX;

	/**
	* Maximum safe half-precision floating-point integer.
	*
	* @example
	* var max = ns.FLOAT16_MAX_SAFE_INTEGER;
	* // returns 2047
	*/
	FLOAT16_MAX_SAFE_INTEGER: typeof FLOAT16_MAX_SAFE_INTEGER;

	/**
	* Minimum safe half-precision floating-point integer.
	*
	* @example
	* var min = ns.FLOAT16_MIN_SAFE_INTEGER;
	* // returns -2047
	*/
	FLOAT16_MIN_SAFE_INTEGER: typeof FLOAT16_MIN_SAFE_INTEGER;

	/**
	* Half-precision floating-point negative infinity.
	*
	* @example
	* var ninf = ns.FLOAT16_NINF;
	* // returns -infinity
	*/
	FLOAT16_NINF: typeof FLOAT16_NINF;

	/**
	* Size (in bytes) of a half-precision floating-point number.
	*
	* @example
	* var bytes = ns.FLOAT16_NUM_BYTES;
	* // returns 2
	*/
	FLOAT16_NUM_BYTES: typeof FLOAT16_NUM_BYTES;

	/**
	* Half-precision floating-point positive infinity.
	*
	* @example
	* var pinf = ns.FLOAT16_PINF;
	* // returns +infinity
	*/
	FLOAT16_PINF: typeof FLOAT16_PINF;

	/**
	* Effective number of bits in the significand of a half-precision floating-point number.
	*
	* @example
	* var precision = ns.FLOAT16_PRECISION;
	* // returns 11
	*/
	FLOAT16_PRECISION: typeof FLOAT16_PRECISION;

	/**
	* Smallest positive half-precision floating-point normal number.
	*
	* @example
	* var smallest = ns.FLOAT16_SMALLEST_NORMAL;
	* // returns 6.103515625e-5
	*/
	FLOAT16_SMALLEST_NORMAL: typeof FLOAT16_SMALLEST_NORMAL;

	/**
	* Smallest positive half-precision floating-point subnormal number.
	*
	* @example
	* var smallest = ns.FLOAT16_SMALLEST_SUBNORMAL;
	* // returns 5.960464477539063e-8
	*/
	FLOAT16_SMALLEST_SUBNORMAL: typeof FLOAT16_SMALLEST_SUBNORMAL;

	/**
	* Square root of half-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FLOAT16_SQRT_EPS;
	* // returns 0.03125
	*/
	FLOAT16_SQRT_EPS: typeof FLOAT16_SQRT_EPS;

	/**
	* Apéry's constant.
	*
	* @example
	* var apery = ns.APERY;
	* // returns 1.2020569031595942
	*/
	APERY: typeof APERY;

	/**
	* Catalan's constant.
	*
	* @example
	* var catalan = ns.CATALAN;
	* // returns 0.915965594177219
	*/
	CATALAN: typeof CATALAN;

	/**
	* Cube root of double-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.CBRT_EPS;
	* // returns 0.0000060554544523933395
	*/
	CBRT_EPS: typeof CBRT_EPS;

	/**
	* Euler's number.
	*
	* @example
	* var e = ns.E;
	* // returns 2.718281828459045
	*/
	E: typeof E;

	/**
	* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
	*
	* @example
	* var eps = ns.EPS;
	* // returns 2.220446049250313e-16
	*/
	EPS: typeof EPS;

	/**
	* The Euler-Mascheroni constant.
	*
	* @example
	* var val = ns.EULERGAMMA;
	* // returns 0.5772156649015329
	*/
	EULERGAMMA: typeof EULERGAMMA;

	/**
	* The bias of a double-precision floating-point number's exponent.
	*
	* @example
	* var bias = ns.FLOAT64_EXPONENT_BIAS;
	* // returns 1023
	*/
	FLOAT64_EXPONENT_BIAS: typeof FLOAT64_EXPONENT_BIAS;

	/**
	* One fourth times the mathematical constant `π`.
	*
	* @example
	* var val = ns.FOURTH_PI;
	* // returns 7.85398163397448309616e-1
	*/
	FOURTH_PI: typeof FOURTH_PI;

	/**
	* Fourth root of double-precision floating-point epsilon.
	*
	* @example
	* var eps = ns.FOURTH_ROOT_EPS;
	* // returns 0.0001220703125
	*/
	FOURTH_ROOT_EPS: typeof FOURTH_ROOT_EPS;

	/**
	* Arbitrary constant `g` to be used in Lanczos approximation functions.
	*
	* @example
	* var g = ns.GAMMA_LANCZOS_G;
	* // returns 10.900511
	*/
	GAMMA_LANCZOS_G: typeof GAMMA_LANCZOS_G;

	/**
	* Glaisher-Kinkelin constant.
	*
	* @example
	* var val = ns.GLAISHER;
	* // returns 1.2824271291006226
	*/
	GLAISHER: typeof GLAISHER;

	/**
	* One half times the natural logarithm of 2.
	*
	* @example
	* var val = ns.HALF_LN2;
	* // returns 3.46573590279972654709e-01
	*/
	HALF_LN2: typeof HALF_LN2;

	/**
	* One half times the mathematical constant `π`.
	*
	* @example
	* var val = ns.HALF_PI;
	* // returns 1.5707963267948966
	*/
	HALF_PI: typeof HALF_PI;

	/**
	* High word mask for the exponent of a double-precision floating-point number.
	*
	* @example
	* var mask = ns.FLOAT64_HIGH_WORD_EXPONENT_MASK;
	* // returns 2146435072
	*/
	FLOAT64_HIGH_WORD_EXPONENT_MASK: typeof FLOAT64_HIGH_WORD_EXPONENT_MASK;

	/**
	* High word mask for the significand of a double-precision floating-point number.
	*
	* @example
	* var mask = ns.FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;
	* // returns 1048575
	*/
	FLOAT64_HIGH_WORD_SIGNIFICAND_MASK: typeof FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;

	/**
	* Natural logarithm of `1/2`.
	*
	* @example
	* var val = ns.LN_HALF;
	* // returns -0.6931471805599453
	*/
	LN_HALF: typeof LN_HALF;

	/**
	* Natural logarithm of the mathematical constant `π`.
	*
	* @example
	* var val = ns.LN_PI;
	* // returns 1.1447298858494002
	*/
	LN_PI: typeof LN_PI;

	/**
	* Natural logarithm of the square root of `2π`.
	*
	* @example
	* var val = ns.LN_SQRT_TWO_PI;
	* // returns 0.9189385332046728
	*/
	LN_SQRT_TWO_PI: typeof LN_SQRT_TWO_PI;

	/**
	* Natural logarithm of `10`.
	*
	* @example
	* var val = ns.LN10;
	* // returns 2.302585092994046
	*/
	LN10: typeof LN10;

	/**
	* Natural logarithm of `2`.
	*
	* @example
	* var val = ns.LN2;
	* // returns 0.6931471805599453
	*/
	LN2: typeof LN2;

	/**
	* Natural logarithm of `2π`.
	*
	* @example
	* var val = ns.LN_TWO_PI;
	* // returns 1.8378770664093456
	*/
	LN_TWO_PI: typeof LN_TWO_PI;

	/**
	* Base 2 logarithm of Euler's number.
	*
	* @example
	* var val = ns.LOG2E;
	* // returns 1.4426950408889634
	*/
	LOG2E: typeof LOG2E;

	/**
	* Base 10 logarithm of Euler's number.
	*
	* @example
	* var val = ns.LOG10E;
	* // returns 0.4342944819032518
	*/
	LOG10E: typeof LOG10E;

	/**
	* Maximum double-precision floating-point number.
	*
	* @example
	* var max = ns.FLOAT64_MAX;
	* // returns 1.7976931348623157e+308
	*/
	FLOAT64_MAX: typeof FLOAT64_MAX;

	/**
	* The maximum biased base 2 exponent for a double-precision floating-point number.
	*
	* @example
	* var exp = ns.FLOAT64_MAX_BASE2_EXPONENT;
	* // returns 1023
	*/
	FLOAT64_MAX_BASE2_EXPONENT: typeof FLOAT64_MAX_BASE2_EXPONENT;

	/**
	* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
	*
	* @example
	* var exp = ns.FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;
	* // returns -1023
	*/
	FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL: typeof FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

	/**
	* The maximum base 10 exponent for a double-precision floating-point number.
	*
	* @example
	* var exp = ns.FLOAT64_MAX_BASE10_EXPONENT;
	* // returns 308
	*/
	FLOAT64_MAX_BASE10_EXPONENT: typeof FLOAT64_MAX_BASE10_EXPONENT;

	/**
	* The maximum base 10 exponent for a subnormal double-precision floating-point number.
	*
	* @example
	* var exp = ns.FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL;
	* // returns -308
	*/
	FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL: typeof FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL;

	/**
	* Natural logarithm of the maximum double-precision floating-point number.
	*
	* @example
	* var val = ns.FLOAT64_MAX_LN;
	* // returns 709.782712893384
	*/
	FLOAT64_MAX_LN: typeof FLOAT64_MAX_LN;

	/**
	* Maximum safe Fibonacci number when stored in double-precision floating-point format.
	*
	* @example
	* var max = ns.FLOAT64_MAX_SAFE_FIBONACCI;
	* // returns 8944394323791464
	*/
	FLOAT64_MAX_SAFE_FIBONACCI: typeof FLOAT64_MAX_SAFE_FIBONACCI;

	/**
	* Maximum safe double-precision floating-point integer.
	*
	* @example
	* var max = ns.FLOAT64_MAX_SAFE_INTEGER;
	* // returns 9007199254740991
	*/
	FLOAT64_MAX_SAFE_INTEGER: typeof FLOAT64_MAX_SAFE_INTEGER;

	/**
	* Maximum safe Lucas number when stored in double-precision floating-point format.
	*
	* @example
	* var max = ns.FLOAT64_MAX_SAFE_LUCAS;
	* // returns 7639424778862807
	*/
	FLOAT64_MAX_SAFE_LUCAS: typeof FLOAT64_MAX_SAFE_LUCAS;

	/**
	* Maximum safe nth Fibonacci number when stored in double-precision floating-point format.
	*
	* @example
	* var max = ns.FLOAT64_MAX_SAFE_NTH_FIBONACCI;
	* // returns 78
	*/
	FLOAT64_MAX_SAFE_NTH_FIBONACCI: typeof FLOAT64_MAX_SAFE_NTH_FIBONACCI;

	/**
	* Maximum safe nth Lucas number when stored in double-precision floating-point format.
	*
	* @example
	* var max = ns.FLOAT64_MAX_SAFE_NTH_LUCAS;
	* // returns 76
	*/
	FLOAT64_MAX_SAFE_NTH_LUCAS: typeof FLOAT64_MAX_SAFE_NTH_LUCAS;

	/**
	* The minimum biased base 2 exponent for a normal double-precision floating-point number.
	*
	* @example
	* var min = ns.FLOAT64_MIN_BASE2_EXPONENT;
	* // returns -1022
	*/
	FLOAT64_MIN_BASE2_EXPONENT: typeof FLOAT64_MIN_BASE2_EXPONENT;

	/**
	* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
	*
	* @example
	* var min = ns.FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;
	* // returns -1074
	*/
	FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL: typeof FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

	/**
	* The minimum base 10 exponent for a normal double-precision floating-point number.
	*
	* @example
	* var min = ns.FLOAT64_MIN_BASE10_EXPONENT;
	* // returns -308
	*/
	FLOAT64_MIN_BASE10_EXPONENT: typeof FLOAT64_MIN_BASE10_EXPONENT;

	/**
	* The minimum base 10 exponent for a subnormal double-precision floating-point number.
	*
	* @example
	* var min = ns.FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;
	* // returns -324
	*/
	FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL: typeof FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;

	/**
	* Natural logarithm of the smallest normalized double-precision floating-point number.
	*
	* @example
	* var min = ns.FLOAT64_MIN_LN;
	* // returns -708.3964185322641
	*/
	FLOAT64_MIN_LN: typeof FLOAT64_MIN_LN;

	/**
	* Minimum safe double-precision floating-point integer.
	*
	* @example
	* var min = ns.FLOAT64_MIN_SAFE_INTEGER;
	* // returns -9007199254740991
	*/
	FLOAT64_MIN_SAFE_INTEGER: typeof FLOAT64_MIN_SAFE_INTEGER;

	/**
	* Double-precision floating-point negative infinity.
	*
	* @example
	* var ninf = ns.NINF;
	* // returns -Infinity
	*/
	NINF: typeof NINF;

	/**
	* Size (in bytes) of a double-precision floating-point number.
	*
	* @example
	* var bytes = ns.FLOAT64_NUM_BYTES;
	* // returns 8
	*/
	FLOAT64_NUM_BYTES: typeof FLOAT64_NUM_BYTES;

	/**
	* Golden ratio.
	*
	* @example
	* var val = ns.PHI;
	* // returns 1.618033988749895
	*/
	PHI: typeof PHI;

	/**
	* The mathematical constant `π`.
	*
	* @example
	* var val = ns.PI;
	* // returns 3.141592653589793
	*/
	PI: typeof PI;

	/**
	* Square of the mathematical constant `π`.
	*
	* @example
	* var val = ns.PI_SQUARED;
	* // returns 9.869604401089358
	*/
	PI_SQUARED: typeof PI_SQUARED;

	/**
	* Double-precision floating-point positive infinity.
	*
	* @example
	* var pinf = ns.PINF;
	* // returns Infinity
	*/
	PINF: typeof PINF;

	/**
	* Effective number of bits in the significand of a double-precision floating-point number.
	*
	* @example
	* var precision = ns.FLOAT64_PRECISION;
	* // returns 53
	*/
	FLOAT64_PRECISION: typeof FLOAT64_PRECISION;

	/**
	* Smallest positive double-precision floating-point normal number.
	*
	* @example
	* var smallest = ns.FLOAT64_SMALLEST_NORMAL;
	* // returns 2.2250738585072014e-308
	*/
	FLOAT64_SMALLEST_NORMAL: typeof FLOAT64_SMALLEST_NORMAL;

	/**
	* Smallest positive double-precision floating-point subnormal number.
	*
	* @example
	* var smallest = ns.FLOAT64_SMALLEST_SUBNORMAL;
	* // returns 4.940656458412465e-324
	*/
	FLOAT64_SMALLEST_SUBNORMAL: typeof FLOAT64_SMALLEST_SUBNORMAL;

	/**
	* Square root of double-precision floating-point epsilon.
	*
	* @example
	* var val = ns.SQRT_EPS;
	* // returns 0.14901161193847656e-7
	*/
	SQRT_EPS: typeof SQRT_EPS;

	/**
	* Square root of `1/2`.
	*
	* @example
	* var val = ns.SQRT_HALF;
	* // returns 0.7071067811865476
	*/
	SQRT_HALF: typeof SQRT_HALF;

	/**
	* Square root of the mathematical constant `π` divided by `2`.
	*
	* @example
	* var val = ns.SQRT_HALF_PI;
	* // returns 1.2533141373155003
	*/
	SQRT_HALF_PI: typeof SQRT_HALF_PI;

	/**
	* Square root of the golden ratio.
	*
	* @example
	* var val = ns.SQRT_PHI;
	* // returns 1.272019649514069
	*/
	SQRT_PHI: typeof SQRT_PHI;

	/**
	* Square root of the mathematical constant `π`.
	*
	* @example
	* var val = ns.SQRT_PI;
	* // returns 1.7724538509055160
	*/
	SQRT_PI: typeof SQRT_PI;

	/**
	* Square root of `3`.
	*
	* @example
	* var val = ns.SQRT_THREE;
	* // returns 1.7320508075688772
	*/
	SQRT_THREE: typeof SQRT_THREE;

	/**
	* Square root of `2`.
	*
	* @example
	* var val = ns.SQRT_TWO;
	* // returns 1.4142135623730951
	*/
	SQRT_TWO: typeof SQRT_TWO;

	/**
	* Square root of the mathematical constant `π` times `2`.
	*
	* @example
	* var val = ns.SQRT_TWO_PI;
	* // returns 2.5066282746310007
	*/
	SQRT_TWO_PI: typeof SQRT_TWO_PI;

	/**
	* The mathematical constant `π` times `2`.
	*
	* @example
	* var val = ns.TWO_PI;
	* // returns 6.283185307179586
	*/
	TWO_PI: typeof TWO_PI;

	/**
	* Maximum signed 8-bit integer.
	*
	* @example
	* var max = ns.INT8_MAX;
	* // returns 127
	*/
	INT8_MAX: typeof INT8_MAX;

	/**
	* Minimum signed 8-bit integer.
	*
	* @example
	* var min = ns.INT8_MIN;
	* // returns -128
	*/
	INT8_MIN: typeof INT8_MIN;

	/**
	* Size (in bytes) of an 8-bit signed integer.
	*
	* @example
	* var bytes = ns.INT8_NUM_BYTES;
	* // returns 1
	*/
	INT8_NUM_BYTES: typeof INT8_NUM_BYTES;

	/**
	* Maximum signed 16-bit integer.
	*
	* @example
	* var max = ns.INT16_MAX;
	* // returns 32767
	*/
	INT16_MAX: typeof INT16_MAX;

	/**
	* Minimum signed 16-bit integer.
	*
	* @example
	* var min = ns.INT16_MIN;
	* // returns -32768
	*/
	INT16_MIN: typeof INT16_MIN;

	/**
	* Size (in bytes) of a 16-bit signed integer.
	*
	* @example
	* var bytes = ns.INT16_NUM_BYTES;
	* // returns 2
	*/
	INT16_NUM_BYTES: typeof INT16_NUM_BYTES;

	/**
	* Maximum signed 32-bit integer.
	*
	* @example
	* var max = ns.INT32_MAX;
	* // returns 2147483647
	*/
	INT32_MAX: typeof INT32_MAX;

	/**
	* Minimum signed 32-bit integer.
	*
	* @example
	* var min = ns.INT32_MIN;
	* // returns -2147483648
	*/
	INT32_MIN: typeof INT32_MIN;

	/**
	* Size (in bytes) of a 32-bit signed integer.
	*
	* @example
	* var bytes = ns.INT32_NUM_BYTES;
	* // returns 4
	*/
	INT32_NUM_BYTES: typeof INT32_NUM_BYTES;

	/**
	* Maximum unsigned 8-bit integer.
	*
	* @example
	* var max = ns.UINT8_MAX;
	* // returns 255
	*/
	UINT8_MAX: typeof UINT8_MAX;

	/**
	* Size (in bytes) of an 8-bit unsigned integer.
	*
	* @example
	* var bytes = ns.UINT8_NUM_BYTES;
	* // returns 1
	*/
	UINT8_NUM_BYTES: typeof UINT8_NUM_BYTES;

	/**
	* Maximum unsigned 16-bit integer.
	*
	* @example
	* var max = ns.UINT16_MAX;
	* // returns 65535
	*/
	UINT16_MAX: typeof UINT16_MAX;

	/**
	* Size (in bytes) of a 16-bit unsigned integer.
	*
	* @example
	* var bytes = ns.UINT16_NUM_BYTES
	* // returns 2
	*/
	UINT16_NUM_BYTES: typeof UINT16_NUM_BYTES;

	/**
	* Maximum unsigned 32-bit integer.
	*
	* @example
	* var max = ns.UINT32_MAX;
	* // returns 4294967295
	*/
	UINT32_MAX: typeof UINT32_MAX;

	/**
	* Size (in bytes) of a 32-bit unsigned integer.
	*
	* @example
	* var bytes = ns.UINT32_NUM_BYTES;
	* // returns 4
	*/
	UINT32_NUM_BYTES: typeof UINT32_NUM_BYTES;
}

/**
* Mathematical constants.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
