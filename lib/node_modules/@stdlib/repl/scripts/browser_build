#!/usr/bin/env node
'use strict';

// MODULES //

var debug = require( 'debug' )( 'repl:browser-build' );
var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var writeFile = require( 'fs' ).writeFile;
var mkdirp = require( 'mkdirp' );
var browserify = require( 'browserify' );


// VARIABLES //

var fpath = join( __dirname, 'browser.js' );
var odir = resolve( __dirname, '..', 'build' );
var opath = join( odir, 'bundle.js' );


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	debug( 'Creating output directory...' );
	mkdirp( odir, onDir );

	/**
	* Callback invoked upon creating a directory.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function onDir( error ) {
		var b;
		if ( error ) {
			debug( 'Encountered an error when creating an output directory: %s', error.message );
			return done( error );
		}
		debug( 'Successfully created an output directory.' );

		debug( 'Creating a bundle...' );
		b = browserify( [ fpath ], {} );
		b.bundle( onBundle );
	} // end FUNCTION onDir()

	/**
	* Callback invoked upon creating a bundle.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} bundle - bundle
	* @returns {void}
	*/
	function onBundle( error, bundle ) {
		var opts;
		if ( error ) {
			debug( 'Encountered an error when creating a bundle: %s', error.message );
			return done( error );
		}
		debug( 'Successfully created a bundle.' );

		debug( 'Writing bundle to file...' );
		opts = {
			'encoding': 'utf8'
		};
		writeFile( opath, bundle, opts, onWrite );
	} // end FUNCTION onBundle()

	/**
	* Callback invoked upon writing a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function onWrite( error ) {
		if ( error ) {
			debug( 'Encountered an error when writing bundle to file: %s', error.message );
			return done( error );
		}
		debug( 'Successfully wrote bundle to file.' );
		done();
	} // end FUNCTION onWrite()

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {Error} [error] - error object
	*/
	function done( error ) {
		if ( error ) {
			throw error;
		}
		debug( 'Finished.' );
	} // end FUNCTION done()
} // end FUNCTION main()

main();
