/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-invalid-this, no-restricted-syntax */

'use strict';

// MODULES //

var logger = require( 'debug' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); // eslint-disable-line id-length
var setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );
var clamp = require( '@stdlib/math/base/special/clamp' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var repeat = require( '@stdlib/string/repeat' );
var displayPrompt = require( './../display_prompt.js' );
var defaults = require( './defaults.js' );
var validate = require( './validate.js' );
var parse = require( './parse.js' );
var format = require( './format.js' );
var footer = require( './footer.js' );
var blankLine = require( './blank_line.js' );


// VARIABLES //

var debug = logger( 'repl:presentation' );
var DEFAULT_WIDTH = 80;
var DEFAULT_HEIGHT = 25;


// MAIN //

/**
* Presentation constructor.
*
* @private
* @constructor
* @param {REPL} repl - REPL instance
* @param {Options} [options] - function options
* @param {string} [options.borderTop='*'] - top border character sequence
* @param {string} [options.borderBottom='*'] - bottom border character sequence
* @param {string} [options.borderLeft='* '] - left border character sequence
* @param {string} [options.borderRight=' *'] - right border character sequence
* @param {(boolean|string)} [options.counter=false] - boolean indicating whether to show a slide counter
* @param {(PositiveInteger|null)} [options.width=null] - presentation width
* @param {(PositiveInteger|null)} [options.height=null] - presentation height
* @throws {TypeError} first argument must be a REPL instance
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
function Presentation( repl, options ) { // eslint-disable-line stdlib/no-redeclare
	var opts;
	var err;
	if ( !( this instanceof Presentation) ) {
		if ( arguments.length > 1 ) {
			return new Presentation( repl, options );
		}
		return new Presentation( repl );
	}
	// TODO: validate REPL instance

	opts = defaults();
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Options: %s', JSON.stringify( opts ) );

	setNonEnumerableReadOnly( this, '_repl', repl );
	setNonEnumerableReadOnly( this, '_opts', opts );

	setNonEnumerableReadOnly( this, '_slides', [] );
	setNonEnumerable( this, '_slide', null );

	setNonEnumerable( this, '_slideCursor', -1 );
	setNonEnumerable( this, '_fragmentCursor', 0 );

	return this;
}

/**
* Returns the presentation width.
*
* @name width
* @memberof Presentation.prototype
* @type {PositiveInteger}
*
* @example
* // TODO
*/
setNonEnumerableReadOnlyAccessor( Presentation.prototype, 'width', function getWidth() {
	if ( this._opts.width ) {
		return this._opts.width;
	}
	if ( this._repl._ostream.isTTY ) {
		return this._repl._ostream.columns;
	}
	return DEFAULT_WIDTH;
});

/**
* Returns the presentation height.
*
* @name height
* @memberof Presentation.prototype
* @type {PositiveInteger}
*
* @example
* // TODO
*/
setNonEnumerableReadOnlyAccessor( Presentation.prototype, 'height', function getHeight() {
	if ( this._opts.height ) {
		return this._opts.height;
	}
	if ( this._repl._ostream.isTTY ) {
		return this._repl._ostream.rows;
	}
	return DEFAULT_HEIGHT;
});

/**
* Returns the presentation slide content width.
*
* @name slideWidth
* @memberof Presentation.prototype
* @type {integer}
*
* @example
* // TODO
*/
setNonEnumerableReadOnlyAccessor( Presentation.prototype, 'slideWidth', function getSlideWidth() {
	return this.width - this._opts.borderLeft.length - this._opts.borderRight.length; // eslint-disable-line max-len
});

/**
* Returns the presentation slide content height.
*
* @name slideWidth
* @memberof Presentation.prototype
* @type {integer}
*
* @example
* // TODO
*/
setNonEnumerableReadOnlyAccessor( Presentation.prototype, 'slideHeight', function getSlideHeight() {
	return this.height - 4; // header, footer, blank line, and REPL prompt
});

/**
* Returns the current presentation slide index.
*
* @name currentSlide
* @memberof Presentation.prototype
* @type {integer}
*
* @example
* // TODO
*/
setNonEnumerableReadOnlyAccessor( Presentation.prototype, 'currentSlide', function getCurrentSlide() {
	return this._slideCursor;
});

/**
* Returns the presentation length.
*
* @name length
* @memberof Presentation.prototype
* @type {integer}
*
* @example
* // TODO
*/
setNonEnumerableReadOnlyAccessor( Presentation.prototype, 'length', function getLength() {
	return this._slides.length;
});

/**
* Sets the current slide (and slide fragment).
*
* @private
* @name _select
* @memberof Presentation.prototype
* @type {Function}
* @param {integer} n - slide number
* @param {integer} [fragment=0] - slide fragment
* @returns {(Object|null)} selected slide
*/
setNonEnumerableReadOnly( Presentation.prototype, '_select', function select( n, fragment ) {
	// Limit the slide cursor range to one position before/after the first/last slide in order to avoid multiple previous/next calls moving the cursors indefinitely away from the slide deck...
	this._slideCursor = clamp( n, -1, this.length );
	if ( this._slideCursor === -1 || this._slideCursor === this.length ) {
		this._slide = null;
	} else {
		this._slide = this._slides[ this._slideCursor ];
	}
	if ( arguments.length > 1 ) {
		// Limit the slide fragment cursor range:
		this._fragmentCursor = clamp( fragment, -1, ( this._slide ) ? this._slide.fragements.length : 0 ); // eslint-disable-line max-len
	}
	if ( this._fragmentCursor === -1 || this._fragmentCursor === this._slide.fragements.length ) { // eslint-disable-line max-len
		return null;
	}
	return this._slide;
});

/**
* Jumps to a specified slide number.
*
* @name jumpTo
* @memberof Presentation.prototype
* @type {Function}
* @param {integer} n - slide number
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'jumpTo', function jumpTo( n ) {
	this._select( n );
	return this;
});

/**
* Jumps a specified number of slides.
*
* @name jump
* @memberof Presentation.prototype
* @type {Function}
* @param {integer} n - number of slides to jump
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'jump', function jump( n ) {
	return this.jumpTo( this._slideCursor+n );
});

/**
* Proceeds to the next slide or slide fragment.
*
* @name next
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'next', function next() {
	var s = this._select( this._slideCursor, this._fragmentCursor+1 );
	if ( s === null ) {
		this.jumpTo( this._slideCursor+1 );
	}
	return this;
});

/**
* Proceeds to the previous slide or slide fragment.
*
* @name prev
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'prev', function prev() {
	var s = this._select( this._slideCursor, this._fragmentCursor-1 );
	if ( s === null ) {
		this._select( this._slideCursor-1, this._slides[ this._slideCursor-1 ].fragements.length-1 ); // eslint-disable-line max-len
	}
	return this;
});

/**
* Jumps to the first slide.
*
* @name first
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'first', function first() {
	this.jumpTo( 0 );
	return this;
});

/**
* Jumps to the last slide.
*
* @name last
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'last', function last() {
	this.jumpTo( this.length-1 );
	return this;
});

/**
* Jumps to the first fragment of the current slide.
*
* @name firstFragment
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'firstFragment', function firstFragment() {
	this._select( this._slideCursor, 0 );
	return this;
});

/**
* Jumps to the last fragment of the current slide.
*
* @name lastFragment
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'lastFragment', function lastFragment() {
	this._select( this._slideCursor, this._slide.fragements.length-1 );
	return this;
});

/**
* Runs any code on the current presentation slide.
*
* @name run
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'run', function run() {
	var code;
	var i;

	code = this._slides[ this._slideCursor ].code;
	if ( code && code.length ) {
		for ( i = 0; i < code.length; i++ ) {
			// TODO: write to REPL
		}
	}
	return this;
});

/**
* Loads a presentation from a file.
*
* @name load
* @memberof Presentation.prototype
* @type {Function}
* @param {string} file - file path
* @throws {TypeError} must provide a valid file path
* @throws {Error} unable to read file path
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'load', function load( file ) {
	file = readFile( file, {
		'encoding': 'utf8'
	});
	if ( file instanceof Error ) {
		throw file;
	}
	// Reset the presentation slides:
	this._slides.length = 0;

	// Parse the loaded file into presentation slides:
	parse( this._slides, file );

	// Set the current slide:
	this._slide = this._slides[ 0 ] || null;

	// Set the slide cursors:
	this._slideCursor = 0;
	this._fragmentCursor = 0;

	return this;
});

/**
* Renders the current presentation slide.
*
* @name render
* @memberof Presentation.prototype
* @type {Function}
* @returns {string} rendered slide
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'render', function render() {
	var paddingBottom;
	var borderRight;
	var borderLeft;
	var paddingTop;
	var newline;
	var height;
	var width;
	var nrows;
	var lines;
	var fill;
	var str;
	var idx;
	var w;
	var i;

	if ( this._slide === null ) {
		return '';
	}
	w = this.width;

	height = this.slideHeight;
	width = this.slideWidth;

	nrows = this._slide.length;

	borderRight = this._opts.borderRight;
	borderLeft = this._opts.borderLeft;
	newline = this._opts.newline;
	fill = this._opts.whitespace;

	paddingTop = ( ( height-nrows )/2 )|0; // Note: presentation slide length assumed never greater than 2^31-1!
	paddingBottom = height - nrows - paddingTop;
	if ( this._opts.counter ) {
		paddingBottom -= 1;
	}

	idx = clamp( this._fragmentCursor, 0, this._slide.fragments.length-1 );
	lines = format( width, this._slide.fragments[ idx ], fill );

	// Render the top border:
	str = repeat( this._opts.borderTop, w );
	str += newline;

	// Add top padding:
	for ( i = 0; i < paddingTop; i++ ) {
		str += blankLine( width, fill, borderLeft, borderRight );
		str += newline;
	}
	// Render the slide content:
	for ( i = 0; i < lines.length; i++ ) {
		str += borderLeft;
		str += lines[ i ].text;
		str += borderRight;
		str += newline;
	}
	// Add bottom padding:
	for ( i = 0; i < paddingBottom; i++ ) {
		str += blankLine( width, fill, borderLeft, borderRight );
		str += newline;
	}
	// Render the footer:
	if ( this._opts.counter ) {
		str += borderLeft;
		str += footer( width, fill, this._opts.counter, this._slideCursor+1, this._slides.length ); // eslint-disable-line max-len
		str += borderRight;
		str += newline;
	}
	// Render the bottom border:
	str += repeat( this._opts.borderBottom, w );

	return str;
});

/**
* Shows a presentation.
*
* @name show
* @memberof Presentation.prototype
* @type {Function}
* @returns {Presentation} presentation instance
*
* @example
* // TODO
*/
setNonEnumerableReadOnly( Presentation.prototype, 'show', function show() {
	var str = this.render();
	this._repl.clear();
	this._repl._ostream.write( str+this._opts.newline );
	displayPrompt( this._repl, false );
	return this;
});


// EXPORTS //

module.exports = Presentation;
