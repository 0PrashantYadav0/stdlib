/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var RE_EOL = require( '@stdlib/regexp/eol' );
var trim = require( '@stdlib/string/trim' );
var max = require( '@stdlib/math/base/special/max' );
var style = require( './style_line.js' );


// VARIABLES //

var SLIDE_SEP = '---';
var FRAGMENT_SEP = '--';
var CODE_DELIMITER = '```';


// MAIN //

/**
* Parses a string into presentation slides.
*
* @private
* @param {Array} out - output array
* @param {string} str - string to parse
* @returns {ObjectArray} output array
*/
function parse( out, str ) {
	var CODE_BLOCK;
	var slides;
	var frags;
	var slide;
	var lines;
	var line;
	var s;
	var f;
	var i;
	var j;
	var k;

	slides = str.split( SLIDE_SEP );
	for ( i = 0; i < slides.length; i++ ) {
		s = slides[ i ];
		slide = {
			'raw': s,
			'fragments': [],
			'code': [],
			'length': 0,   // number of lines
			'maxLength': 0 // maximum line length
		};

		// TODO: extract speaker notes

		frags = s.split( FRAGMENT_SEP );
		for ( j = 0; j < frags.length; j++ ) {
			lines = trim( frags[ j ] ).split( RE_EOL );
			if ( j === 0 ) {
				f = [];
			} else {
				f = slide.fragments[ j-1 ].slice();
			}
			CODE_BLOCK = false;
			for ( k = 0; k < lines.length; k++) {
				line = lines[ k ];

				// Handle code blocks...
				if ( line === CODE_DELIMITER ) {
					if ( CODE_BLOCK === false ) {
						// Starting code delimiter:
						CODE_BLOCK = true;
					} else {
						// Ending code delimiter:
						CODE_BLOCK = false;
					}
					continue;
				}
				if ( CODE_BLOCK ) {
					slide.code.push( line );
				}
				// Apply styling:
				line = style({
					'text': line,
					'length': line.length
				});

				// TODO: apply emojis!

				// Append the line to the fragment:
				f.push( line );
			}
			// A fragment includes the slide text of all prior fragments:
			slide.fragments.push( f );
		}
		slide.length = f.length;

		// Determine the maximum slide text line length...
		for ( j = 0; j < f.length; j++ ) {
			slide.maxLength = max( slide.maxLength, f[ j ].length );
		}
		out.push( slide );
	}
	return out;
}


// EXPORTS //

module.exports = parse;
