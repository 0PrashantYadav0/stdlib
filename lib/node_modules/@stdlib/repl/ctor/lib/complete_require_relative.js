/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var statSync = require( 'fs' ).statSync; // TODO: replace with stdlib equivalent
var logger = require( 'debug' );
var cwd = require( '@stdlib/process/cwd' );
var readDir = require( '@stdlib/fs/read-dir' ).sync;
var startsWith = require( '@stdlib/string/starts-with' );
var extname = require( '@stdlib/utils/extname' );
var indexRegExp = require( './regexp_index.js' ); // eslint-disable-line stdlib/no-require-index
var contains = require( './contains.js' );


// VARIABLES //

var debug = logger( 'repl:complete:require:relative' );
var RE_PATH = /([\w@./-]+\/)?([\w@./-]*)/;


// MAIN //

/**
* Completes a `require` expression containing a relative path.
*
* ## Notes
*
* -   Resolves a path relative to the current working directory.
*
* @private
* @param {Array} out - output array for storing completions
* @param {string} path - path to complete
* @param {Array} exts - supported `require` extensions
* @returns {Array} output array
*/
function complete( out, path, exts ) {
	var filter;
	var sfiles;
	var subdir;
	var files;
	var stats;
	var dir;
	var ext;
	var re;
	var f;
	var i;
	var j;

	// Split the path to complete into two components: sub-directory path and filter...
	subdir = path.match( RE_PATH );
	filter = subdir[ 2 ];
	subdir = subdir[ 1 ] || '';

	// Compile a regular expression for matching an `index` file:
	re = indexRegExp( exts );

	// Resolve the relative sub-directory path to an absolute path:
	dir = resolve( cwd(), subdir );
	debug( 'Resolved directory: %s', dir );

	debug( 'Reading directory contents...' );
	files = readDir( dir );
	if ( files instanceof Error ) {
		debug( 'Unable to read directory: %s. Error: %s', dir, files.message );
		debug( 'Results: %s', out.join( ', ' ) );
		return out;
	}
	for ( i = 0; i < files.length; i++ ) {
		f = files[ i ];
		if ( !startsWith( f, filter ) ) {
			debug( '%s does not match filter %s. Skipping...', f, filter );
			continue;
		}
		f = resolve( dir, f );
		debug( 'Examining path: %s', f );
		try {
			stats = statSync( f );
			if ( stats.isDirectory() ) {
				debug( 'Path resolves to a subdirectory.' );
				out.push( files[ i ] + '/' );
				debug( 'Found a completion: %s', out[ out.length-1 ] );

				debug( 'Reading subdirectory contents...' );
				sfiles = readDir( f );
				if ( sfiles instanceof Error ) {
					debug( 'Unable to read subdirectory: %s. Error: %s', f, sfiles.message );
					continue;
				}
				for ( j = 0; j < sfiles.length; j++ ) {
					if ( re.test( sfiles[ j ] ) ) {
						// Since the subdirectory contains an `index` file, one can simply "require" the subdirectory, thus eliding the full file path:
						debug( 'Subdirectory contains an `index` file.' );

						out.push( files[ i ] );
						debug( 'Found a completion: %s', out[ out.length-1 ] );
					}
				}
			} else if ( stats.isFile() ) {
				debug( 'Path resolves to a file.' );
				ext = extname( files[ i ] );
				if ( contains( exts.length, exts, 1, 0, ext ) ) {
					debug( 'File has supported extension: %s', ext );

					out.push( files[ i ] );
					debug( 'Found a completion: %s', out[ out.length-1 ] );
				}
			} else {
				debug( 'Path resolves to neither a directory nor a file. Skipping path...' );
				continue;
			}
		} catch ( err ) {
			debug( 'Error: %s', err.message );
			debug( 'Skipping path...' );
			continue;
		}
	}
	return out;
}


// EXPORTS //

module.exports = complete;
