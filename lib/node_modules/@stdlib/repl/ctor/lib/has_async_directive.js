/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests whether an abstract syntax tree (AST) contains a top-level `"async"` directive.
*
* @private
* @param {AST} ast - abstract syntax tree (AST)
* @throws {TypeError} must provide a program AST node
* @returns {boolean} boolean indicating whether an AST contains a top-level "async" directive
*/
function hasAsyncDirective( ast ) {
	var nodes;
	var n;
	var i;
	if ( ast.type !== 'Program' ) {
		throw new TypeError( 'invalid argument. Must provide a program AST node.' );
	}
	nodes = ast.body;
	for ( i = 0; i < nodes.length; i++ ) {
		n = nodes[ i ];
		if (
			n.type === 'ExpressionStatement' &&
			n.expression.type === 'Literal' &&
			n.expression.directive === 'async'
		) {
			return true;
		}
	}
	return false;
}


// EXPORTS //

module.exports = hasAsyncDirective;
