/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var logger = require( 'debug' );
var parse = require( 'acorn-loose' ).parse;
var objectKeys = require( '@stdlib/utils/keys' );
var fsRegExp = require( './regexp_fs_aliases.js' );
var requireRegExp = require( './regexp_require.js' );
var fsAliasArgs = require( './fs_alias_args.js' );
var completeRequire = require( './complete_require.js' );


// VARIABLES //

var debug = logger( 'repl:completer' );


// MAIN //

/**
* Returns a callback for supporting TAB completion in a REPL environment.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Function} TAB completion callback
*/
function completer( repl ) {
	return complete;

	/**
	* Callback invoked upon a user entering the TAB character at the command prompt.
	*
	* @private
	* @param {string} line - current line
	* @returns {Array} completion results
	*/
	function complete( line ) {
		var match;
		var exts;
		var args;
		var ast;
		var arg;
		var res;

		debug( 'Line: %s', line );

		// Initialize an array for storing completion results:
		res = [];

		// Test if the line has an incomplete `require` expression:
		match = line.match( requireRegExp() );
		if ( match ) {
			debug( 'Detected incomplete `require` expression.' );

			exts = objectKeys( repl._context.require.extensions );
			debug( 'Supported `require` filename extensions: %s', exts.join( ', ' ) );

			res = completeRequire( res, match[ 1 ], repl._context.module.paths, exts ); // eslint-disable-line max-len
		} else {
			// Test if the line has an incomplete file system expression:
			match = line.match( fsRegExp() );
			if ( match ) {
				debug( 'Detected incomplete file system expression.' );

				// Get the list of argument types for the desired file system API:
				args = fsAliasArgs( match[ 0 ] );

				// Parse the expression into an AST:
				ast = parse( line.slice( match.index ) );

				// Check whether the argument which triggered TAB completion has a corresponding argument type which is completable:
				arg = args[ ast.body[ 0 ].expression.arguments.length-1 ];
				if ( !arg ) {
					debug( 'Argument which triggered TAB completion does not have a completable argument type.' );
					return [ res, line ];
				}
				if ( arg === '*' || arg === 'list' ) {
					// TODO: search
					console.log( 'dirs and files' );
				} else if ( arg === 'file' || arg === 'filelist' ) {
					// TODO: search
					console.log( 'files' );
				} else if ( arg === 'dir' || arg === 'dirlist' ) {
					// TODO: search
					console.log( 'dirs' );
				}
			}
		}
		// TODO: ensure completion list is unique

		// TODO: ensure completion list is sorted in lexicographic order

		debug( 'Results: %s', res.join( ', ' ) );
		return [ res, line ];
	}
}


// EXPORTS //

module.exports = completer;
