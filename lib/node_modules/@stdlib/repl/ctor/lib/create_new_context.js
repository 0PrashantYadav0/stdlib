/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var logger = require( 'debug' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); // eslint-disable-line id-length
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var createContext = require( './create_context.js' );


// VARIABLES //

var debug = logger( 'repl:context' );


// MAIN //

/**
* Creates a REPL execution context.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Object} REPL context
*/
function createNewContext( repl ) {
	var context;

	debug( 'Creating REPL execution context...' );
	context = createContext({
		'sandbox': repl._sandbox,
		'output': repl._ostream
	});

	// Add commands requiring privileged access to internal instance variables:
	setNonEnumerableReadOnly( context, 'clear', onClear );
	setNonEnumerableReadOnly( context, 'load', onLoad );
	setNonEnumerableReadOnly( context, 'quit', onQuit );

	// TODO: add `help` command
	// TODO: add `example` command
	// TODO: add `namespace` command
	// TODO: add `save` command
	// TODO: add `recordStart` command
	// TODO: add `recordStop` command
	// TODO: add `citation` command
	// TODO: add `license` command
	// TODO: add `copyright` command
	// TODO: add `contributors` command
	// TODO: add `credits` command
	// TODO: add `donate` command

	// Add an accessor for retrieving the result of the last successfully executed command:
	setNonEnumerableReadOnlyAccessor( context, 'ans', onAns );

	return context;

	/**
	* Returns the result of the last successfully executed command.
	*
	* @private
	* @returns {*} result
	*/
	function onAns() {
		return repl._ans;
	}

	/**
	* Clears a REPL's local context.
	*
	* @private
	*/
	function onClear() {
		repl.clear();
	}

	/**
	* Loads and evaluates a JavaScript file line-by-line.
	*
	* @private
	* @param {string} fpath - file path
	* @returns {void}
	*/
	function onLoad( fpath ) {
		var err;
		if ( !isString( fpath ) ) {
			err = new TypeError( 'invalid argument. Must provide a string. Value: `'+fpath+'`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		debug( 'Loading a file...' );
		repl.load( fpath );
	}

	/**
	* Quits a REPL.
	*
	* @private
	*/
	function onQuit() {
		debug( 'Quitting the REPL...' );
		repl.close();
	}
}


// EXPORTS //

module.exports = createNewContext;
