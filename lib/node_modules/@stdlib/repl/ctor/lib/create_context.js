/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var Module = require( 'module' );
var vm = require( 'vm' );
var Console = require( 'console' ).Console;
var logger = require( 'debug' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isRegExp = require( '@stdlib/assert/is-regexp' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var getGlobal = require( '@stdlib/utils/global' );
var objectKeys = require( '@stdlib/utils/keys' );
var properties = require( '@stdlib/utils/properties' );
var append = require( '@stdlib/utils/append' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var setConfigurableReadOnly = require( '@stdlib/utils/define-configurable-read-only-property' );
var createRequire = require( './create_require.js' );
var GLOBALS = require( './globals.js' );
var setAliases = require( './set_aliases.js' );
var setAliasesGlobal = require( './set_aliases_global.js' );
var setCommands = require( './set_commands.js' );
var setCommandsGlobal = require( './set_commands_global.js' );
var propertyComparator = require( './property_comparator.js' );
var onAlias2Pkg = require( './command_alias2pkg.js' );
var onAlias2Related = require( './command_alias2related.js' );
var onAns = require( './command_ans.js' );
var onCurrentWorkspace = require( './command_currentworkspace.js' );
var onExample = require( './command_example.js' );
var onHelp = require( './command_help.js' );
var onInfo = require( './command_info.js' );
var isKeyword = require( './command_iskeyword.js' );
var onLoad = require( './command_load.js' );
var onVars = require( './command_vars.js' );
var onVarsWorkspace = require( './command_varsworkspace.js' );


// VARIABLES //

var debug = logger( 'repl:context' );

// Cache references to module methods (WARNING: use of *private* methods exposed on the `Module` object; thus, breakage is possible!):
var resolveLookupPaths = Module._resolveLookupPaths;

// List of project aliases which are overridden/wrapped to provide behavior tailored to the REPL environment:
var OVERRIDES = [
	'alias2pkg',
	'alias2related'
];


// MAIN //

/**
* Creates a REPL context.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Object} REPL context
*/
function createContext( repl ) {
	var context;
	var Global;
	var keys;
	var cmds;
	var i;

	debug( 'Creating REPL execution context...' );

	// Get the current global variable:
	Global = getGlobal();

	// Create the REPL context...
	if ( repl._sandbox ) {
		// Create a sandboxed context:
		context = vm.createContext();

		// Assign globals from the current global context to the sandboxed context (note: shallow copy!)...
		keys = objectKeys( GLOBALS );
		for ( i = 0; i < keys.length; i++ ) {
			setReadOnly( context, keys[ i ], GLOBALS[ keys[ i ] ] );
		}
		// Create a circular reference as in Node.js:
		setReadOnly( context, 'global', context );

		// Create a new `console` interface:
		setReadOnly( context, 'console', new Console( repl._ostream ) );

		// Create a new `module` object:
		setReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setReadOnly( context, 'require', createRequire( context.module ) );
	} else {
		context = Global;

		// Create a new `module` object:
		setConfigurableReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setConfigurableReadOnly( context, 'require', createRequire( context.module ) );
	}
	context.module.paths = resolveLookupPaths( '<repl>', module, true ) || [];

	// Add project APIs...
	if ( repl._sandbox ) {
		setAliases( repl._aliases, context, OVERRIDES );
	} else {
		setAliasesGlobal( repl._globalVars, repl._aliases, context, OVERRIDES );
	}

	// Define a list of REPL-specific commands (NOTE: keep in alphabetical order):
	cmds = [];

	// Format: [ <command>, <function>, <is_accessor> ]
	cmds.push( [ 'alias2pkg', onAlias2Pkg( repl ), false ] );
	cmds.push( [ 'alias2related', onAlias2Related( repl, cmds ), false ] );
	cmds.push( [ 'ans', onAns( repl ), true ] );
	cmds.push( [ 'clear', onClear, false ] );
	cmds.push( [ 'currentWorkspace', onCurrentWorkspace( repl ), true ] );
	cmds.push( [ 'example', onExample( repl, cmds ), false ] );
	cmds.push( [ 'help', onHelp( repl, cmds ), false ] );
	cmds.push( [ 'info', onInfo( repl, cmds ), false ] );
	cmds.push( [ 'isKeyword', isKeyword( repl ), false ] );
	cmds.push( [ 'load', onLoad( repl ), false ] );
	cmds.push( [ 'quit', onQuit, false ] );
	cmds.push( [ 'vars', onVars( repl ), false ] );
	cmds.push( [ 'varsWorkspace', onVarsWorkspace( repl ), false ] );
	cmds.push( [ 'workspaces', onWorkspaces, false ] );

	// TODO: add `save` command

	// TODO: add `saveStart` command

	// TODO: add `saveStop` command

	// TODO: add `saveScript` command

	// TODO: add `saveScriptStart` command

	// TODO: add `saveScriptStop` command

	// TODO: add `logfileStart` command

	// TODO: add `logfileStop` command

	// TODO: add `search` command

	// TODO: add `citation` command

	// TODO: add `license` command

	// TODO: add `copyright` command

	// TODO: add `contributors` command

	// TODO: add `credits` command

	// TODO: add `donate` command

	// Add commands requiring privileged access to internal instance variables...
	if ( repl._sandbox ) {
		setCommands( context, cmds );
	} else {
		setCommandsGlobal( repl._globalVars, context, cmds );
	}

	// NOTE: the context should not be augmented **after** this point, except as done by the user when declaring variables and functions!

	// Sort the list of global variables:
	if ( repl._sandbox === false ) {
		repl._globalVars.sort( propertyComparator );
	}
	// Capture a snapshot of the current global workspace:
	append( repl._workspace.root, properties( context ) );

	return context;

	/**
	* Clears a REPL's local context.
	*
	* @private
	*/
	function onClear() {
		repl.clear();
	}

	/**
	* Quits a REPL.
	*
	* @private
	*/
	function onQuit() {
		debug( 'Quitting the REPL...' );
		repl.close();
	}

	/**
	* Returns a list of workspaces.
	*
	* @private
	* @param {Options} [options] - function options
	* @param {RegExp} [options.include] - name inclusion filter
	* @param {RegExp} [options.exclude] - name exclusion filter
	* @param {boolean} [options.details] - boolean indicating whether to include additional workspace details, such as variable names, types, contents, etc
	* @returns {Array} workspace names
	*/
	function onWorkspaces( options ) {
		var err;
		var tmp;
		var out;
		var w;
		var i;
		if ( arguments.length === 0 ) {
			return objectKeys( repl._workspace );
		}
		if ( !isPlainObject( options ) ) {
			err = new TypeError( 'invalid argument. `options` argument must be an object. Value: `' + name + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( hasOwnProp( options, 'include' ) && !isRegExp( options.include ) ) {
			err = new TypeError( 'invalid option. `include` option must be a regular expression. Option: `' + options.include + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( hasOwnProp( options, 'exclude' ) && !isRegExp( options.exclude ) ) {
			err = new TypeError( 'invalid option. `exclude` option must be a regular expression. Option: `' + options.include + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( hasOwnProp( options, 'details' ) && !isBoolean( options.details ) ) {
			err = new TypeError( 'invalid option. `details` option must be a boolean. Option: `' + options.details + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		tmp = objectKeys( repl._workspace );
		out = [];
		for ( i = 0; i < tmp.length; i++ ) {
			w = tmp[ i ];
			if ( options.include && !options.include.test( w ) ) {
				continue;
			}
			if ( options.exclude && options.exclude.test( w ) ) {
				continue;
			}
			// If we've made it this far, the variable should have passed all filters...
			out.push( w );
			if ( options.details ) {
				out[ out.length-1 ] = {
					'name': w,
					'variables': onVarsWorkspace( w, {
						'details': true
					})
				};
			}
		}
		return out;
	}
}


// EXPORTS //

module.exports = createContext;
