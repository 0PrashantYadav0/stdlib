/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var Module = require( 'module' );
var vm = require( 'vm' );
var Console = require( 'console' ).Console;
var logger = require( 'debug' );
var getGlobal = require( '@stdlib/utils/global' );
var objectKeys = require( '@stdlib/utils/keys' );
var properties = require( '@stdlib/utils/properties' );
var append = require( '@stdlib/utils/append' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var setConfigurableReadOnly = require( '@stdlib/utils/define-configurable-read-only-property' );
var createRequire = require( './create_require.js' );
var GLOBALS = require( './globals.js' );
var setAliases = require( './set_aliases.js' );
var setAliasesGlobal = require( './set_aliases_global.js' );
var setCommands = require( './set_commands.js' );
var setCommandsGlobal = require( './set_commands_global.js' );
var propertyComparator = require( './property_comparator.js' );
var onAlias2Pkg = require( './commands/alias2pkg.js' );
var onAlias2Related = require( './commands/alias2related.js' );
var onAns = require( './commands/ans.js' );
var onAssignin = require( './commands/assignin.js' );
var onClear = require( './commands/clear.js' );
var onCurrentWorkspace = require( './commands/current_workspace.js' );
var onExample = require( './commands/example.js' );
var onHelp = require( './commands/help.js' );
var onInfo = require( './commands/info.js' );
var isKeyword = require( './commands/is_keyword.js' );
var onLoad = require( './commands/load.js' );
var onQuit = require( './commands/quit.js' );
var onVars = require( './commands/vars.js' );
var onVarsWorkspace = require( './commands/vars_workspace.js' );
var onWorkspaces = require( './commands/workspaces.js' );


// VARIABLES //

var debug = logger( 'repl:context' );

// Cache references to module methods (WARNING: use of *private* methods exposed on the `Module` object; thus, breakage is possible!):
var resolveLookupPaths = Module._resolveLookupPaths;

// List of project aliases which are overridden/wrapped to provide behavior tailored to the REPL environment:
var OVERRIDES = [
	'alias2pkg',
	'alias2related'
];


// MAIN //

/**
* Creates a REPL context.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Object} REPL context
*/
function createContext( repl ) {
	var context;
	var Global;
	var keys;
	var cmds;
	var i;

	debug( 'Creating REPL execution context...' );

	// Get the current global variable:
	Global = getGlobal();

	// Create the REPL context...
	if ( repl._sandbox ) {
		// Create a sandboxed context:
		context = vm.createContext();

		// Assign globals from the current global context to the sandboxed context (note: shallow copy!)...
		keys = objectKeys( GLOBALS );
		for ( i = 0; i < keys.length; i++ ) {
			setReadOnly( context, keys[ i ], GLOBALS[ keys[ i ] ] );
		}
		// Create a circular reference as in Node.js:
		setReadOnly( context, 'global', context );

		// Create a new `console` interface:
		setReadOnly( context, 'console', new Console( repl._ostream ) );

		// Create a new `module` object:
		setReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setReadOnly( context, 'require', createRequire( context.module ) );
	} else {
		context = Global;

		// Create a new `module` object:
		setConfigurableReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setConfigurableReadOnly( context, 'require', createRequire( context.module ) );
	}
	context.module.paths = resolveLookupPaths( '<repl>', module, true ) || [];

	// Add project APIs...
	if ( repl._sandbox ) {
		setAliases( repl._aliases, context, OVERRIDES );
	} else {
		setAliasesGlobal( repl._globalVars, repl._aliases, context, OVERRIDES );
	}

	// Define a list of REPL-specific commands (NOTE: keep in alphabetical order):
	cmds = [];

	// Format: [ <command>, <function>, <is_accessor> ]
	cmds.push( [ 'alias2pkg', onAlias2Pkg( repl ), false ] );
	cmds.push( [ 'alias2related', onAlias2Related( repl, cmds ), false ] );
	cmds.push( [ 'ans', onAns( repl ), true ] );
	cmds.push( [ 'assignin', onAssignin( repl ), false ] );
	cmds.push( [ 'clear', onClear( repl ), false ] );
	cmds.push( [ 'currentWorkspace', onCurrentWorkspace( repl ), true ] );
	cmds.push( [ 'example', onExample( repl, cmds ), false ] );
	cmds.push( [ 'help', onHelp( repl, cmds ), false ] );
	cmds.push( [ 'info', onInfo( repl, cmds ), false ] );
	cmds.push( [ 'isKeyword', isKeyword( repl ), false ] );
	cmds.push( [ 'load', onLoad( repl ), false ] );
	cmds.push( [ 'quit', onQuit( repl ), false ] );
	cmds.push( [ 'vars', onVars( repl ), false ] );
	cmds.push( [ 'varsWorkspace', onVarsWorkspace( repl ), false ] );
	cmds.push( [ 'workspaces', onWorkspaces( repl ), false ] );

	// Add commands requiring privileged access to internal instance variables...
	if ( repl._sandbox ) {
		setCommands( context, cmds );
	} else {
		setCommandsGlobal( repl._globalVars, context, cmds );
	}

	// NOTE: the context should not be augmented **after** this point, except as done by the user when declaring variables and functions!

	// Sort the list of global variables:
	if ( repl._sandbox === false ) {
		repl._globalVars.sort( propertyComparator );
	}
	// Capture a snapshot of the current global workspace:
	append( repl._workspace.root, properties( context ) );

	return context;
}


// EXPORTS //

module.exports = createContext;
