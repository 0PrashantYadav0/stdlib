/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Module = require( 'module' );
var vm = require( 'vm' );
var Console = require( 'console' ).Console;
var getGlobal = require( '@stdlib/utils/global' );
var objectKeys = require( '@stdlib/utils/keys' );
var setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );
var defineProperty = require( '@stdlib/utils/define-property' );
var createRequire = require( './create_require.js' );


// VARIABLES //

// TODO: remove once we have stdlib pkg equivalents
var GLOBALS = {
	'Array': Array,
	'Boolean': Boolean,
	'Date': Date,
	'Function': Function,
	'Object': Object,
	'parseFloat': parseFloat,
	'parseInt': parseInt,
	'RegExp': RegExp,
	'String': String,

	// TODO: BigInt, DataView, Map, Set, Promise, Reflect(?), WeakMap, WeakSet, WebAssembly

	'Error': Error,
	'EvalError': EvalError,
	'RangeError': RangeError,
	'ReferenceError': ReferenceError,
	'SyntaxError': SyntaxError,
	'TypeError': TypeError,
	'URIError': URIError,

	'clearImmediate': clearImmediate,
	'clearInterval': clearInterval,
	'clearTimeout': clearTimeout,
	'setImmediate': setImmediate,
	'setInterval': setInterval,
	'setTimeout': setTimeout
};

// Cache references to module methods (WARNING: we use private methods exposed on the `Module` object; thus, breakage is possible!):
var resolveLookupPaths = Module._resolveLookupPaths; // eslint-disable-line no-underscore-dangle


// MAIN //

/**
* Creates a REPL context.
*
* @private
* @param {Options} options - context options
* @param {boolean} options.sandbox - boolean indicating whether to create a sandboxed context
* @param {WritableStream} options.output - output stream
* @returns {Object} REPL context
*/
function createContext( options ) {
	var Global;
	var keys;
	var ctx;
	var i;

	Global = getGlobal();
	if ( options.sandbox ) {
		// Create a sandboxed context:
		ctx = vm.createContext();

		// Assign globals from the current global context to the sandboxed context (note: shallow copy!)...
		keys = objectKeys( GLOBALS );
		for ( i = 0; i < keys.length; i++ ) {
			setNonEnumerable( ctx, keys[ i ], GLOBALS[ keys[ i ] ] );
		}

		// Create a circular reference as in Node:
		ctx.global = ctx;

		// Create a new console interface:
		setNonEnumerable( ctx, 'console', new Console( options.output ) );

		// Create a new `module` object:
		setNonEnumerable( ctx, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setNonEnumerable( ctx, 'require', createRequire( ctx.module ) );
	} else {
		ctx = Global;

		// Create a new `module` object:
		defineProperty( ctx, 'module', {
			'configurable': true,
			'writable': false,
			'enumerable': false,
			'value': new Module( '<repl>' )
		});

		// Create a new `require` function:
		defineProperty( ctx, 'require', {
			'configurable': true,
			'writable': false,
			'enumerable': false,
			'value': createRequire( ctx.module )
		});
	}
	ctx.module.paths = resolveLookupPaths( '<repl>', module, true ) || [];

	// TODO: lazy load project APIs (configurable, enumerable accessors which overwrite themselves to become read-only properties; see https://github.com/nodejs/node/blob/0c1e93b9efadfc9fae74907a631908477c7d085e/lib/internal/modules/cjs/helpers.js#L102)

	// TODO: add REPL-specific APIs, such as `help`, etc.

	return ctx;
}


// EXPORTS //

module.exports = createContext;
