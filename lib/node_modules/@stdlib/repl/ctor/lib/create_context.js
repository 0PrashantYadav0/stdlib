/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var Module = require( 'module' );
var vm = require( 'vm' );
var Console = require( 'console' ).Console;
var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isArray = require( '@stdlib/assert/is-array' );
var isRegExp = require( '@stdlib/assert/is-regexp' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var getGlobal = require( '@stdlib/utils/global' );
var objectKeys = require( '@stdlib/utils/keys' );
var properties = require( '@stdlib/utils/properties' );
var append = require( '@stdlib/utils/append' );
var typeOf = require( '@stdlib/utils/type-of' );
var propertyDescriptor = require( '@stdlib/utils/property-descriptor' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var setConfigurableReadOnly = require( '@stdlib/utils/define-configurable-read-only-property' );
var alias2pkg = require( '@stdlib/namespace/alias2pkg' );
var alias2related = require( '@stdlib/namespace/alias2related' );
var alias2help = require( '@stdlib/repl/help' );
var alias2info = require( '@stdlib/repl/info' );
var alias2example = require( '@stdlib/repl/code-blocks' );
var indexOf = require( './index_of.js' );
var findUniqueEntry = require( './find_unique_entry.js' );
var createRequire = require( './create_require.js' );
var HELP_TEXT = require( './help_text.js' );
var GLOBALS = require( './globals.js' );
var setAliases = require( './set_aliases.js' );
var setAliasesGlobal = require( './set_aliases_global.js' );
var setCommands = require( './set_commands.js' );
var setCommandsGlobal = require( './set_commands_global.js' );
var displayPrompt = require( './display_prompt.js' );
var propertyComparator = require( './property_comparator.js' );
var setdiff = require( './setdiff.js' );
var COMMAND_DOCS = require( './command_docs.js' );


// VARIABLES //

var debug = logger( 'repl:context' );

// Cache references to module methods (WARNING: use of *private* methods exposed on the `Module` object; thus, breakage is possible!):
var resolveLookupPaths = Module._resolveLookupPaths;

// List of project aliases which are overridden/wrapped to provide behavior tailored to the REPL environment:
var OVERRIDES = [
	'alias2pkg',
	'alias2related'
];


// FUNCTIONS //

/**
* Converts an `alias`` argument to a string.
*
* @private
* @param {*} alias - alias
* @returns {string} string representation
*/
function alias2string( alias ) {
	if ( typeof alias === 'string' ) {
		return alias;
	}
	return '<' + typeOf( alias ) + '>';
}


// MAIN //

/**
* Creates a REPL context.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Object} REPL context
*/
function createContext( repl ) {
	var context;
	var Global;
	var keys;
	var cmds;
	var i;

	debug( 'Creating REPL execution context...' );

	// Get the current global variable:
	Global = getGlobal();

	// Create the REPL context...
	if ( repl._sandbox ) {
		// Create a sandboxed context:
		context = vm.createContext();

		// Assign globals from the current global context to the sandboxed context (note: shallow copy!)...
		keys = objectKeys( GLOBALS );
		for ( i = 0; i < keys.length; i++ ) {
			setReadOnly( context, keys[ i ], GLOBALS[ keys[ i ] ] );
		}
		// Create a circular reference as in Node.js:
		setReadOnly( context, 'global', context );

		// Create a new `console` interface:
		setReadOnly( context, 'console', new Console( repl._ostream ) );

		// Create a new `module` object:
		setReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setReadOnly( context, 'require', createRequire( context.module ) );
	} else {
		context = Global;

		// Create a new `module` object:
		setConfigurableReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setConfigurableReadOnly( context, 'require', createRequire( context.module ) );
	}
	context.module.paths = resolveLookupPaths( '<repl>', module, true ) || [];

	// Add project APIs...
	if ( repl._sandbox ) {
		setAliases( repl._aliases, context, OVERRIDES );
	} else {
		setAliasesGlobal( repl._globalVars, repl._aliases, context, OVERRIDES );
	}

	// Define a list of REPL-specific commands (NOTE: keep in alphabetical order):
	cmds = [
		// [ <command>, <function>, <is_accessor> ]
		[ 'alias2pkg', onAlias2Pkg, false ],
		[ 'alias2related', onAlias2Related, false ],
		[ 'ans', onAns, true ],
		[ 'clear', onClear, false ],
		[ 'example', onExample, false ],
		[ 'help', onHelp, false ],
		[ 'info', onInfo, false ],
		[ 'isKeyword', isKeyword, false ],
		[ 'load', onLoad, false ],
		[ 'quit', onQuit, false ],
		[ 'vars', onVars, false ],
		[ 'varsWorkspace', onVarsWorkspace, false ],
		[ 'workspaces', onWorkspaces, false ]
	];

	// TODO: add `save` command

	// TODO: add `saveStart` command

	// TODO: add `saveStop` command

	// TODO: add `saveScript` command

	// TODO: add `saveScriptStart` command

	// TODO: add `saveScriptStop` command

	// TODO: add `logfileStart` command

	// TODO: add `logfileStop` command

	// TODO: add `search` command

	// TODO: add `citation` command

	// TODO: add `license` command

	// TODO: add `copyright` command

	// TODO: add `contributors` command

	// TODO: add `credits` command

	// TODO: add `donate` command

	// Add commands requiring privileged access to internal instance variables...
	if ( repl._sandbox ) {
		setCommands( context, cmds );
	} else {
		setCommandsGlobal( repl._globalVars, context, cmds );
	}

	// NOTE: the context should not be augmented **after** this point, except as done by the user when declaring variables and functions!

	// Sort the list of global variables:
	if ( repl._sandbox === false ) {
		repl._globalVars.sort( propertyComparator );
	}
	// Capture a snapshot of the current global workspace:
	append( repl._workspace.root, properties( context ) );

	return context;

	/**
	* Returns the package name corresponding to a provided alias.
	*
	* @private
	* @param {*} alias - alias
	* @returns {(string|void)} package name
	*/
	function onAlias2Pkg( alias ) {
		var aliases;
		var out;
		var N;
		var i;

		aliases = repl._aliases;
		N = aliases.length;

		if ( isString( alias ) ) {
			out = alias2pkg( alias );
		}
		// If provided an `alias` which is not a string or we failed to resolve a package name based on the provided string value, we try to resolve a string alias (and subsequently a corresponding package name) by searching the list of cached references of global variables/properties...
		if ( !out ) {
			i = indexOf( N/2, aliases, 2, 1, alias );
			if ( i >= 0 ) {
				out = alias2pkg( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve a package name and the provided value is an object, try finding a provided value's constructor (e.g., if provided a `Uint32Array`, try finding the package name for `Uint32Array`)...
		if ( !out && typeof alias === 'object' && alias !== null && alias.constructor ) {
			i = indexOf( N/2, aliases, 2, 1, alias.constructor );
			if ( i >= 0 ) {
				out = alias2pkg( aliases[ i-1 ] );
			}
		}
		if ( out ) {
			return out;
		}
		repl._ostream.write( 'Error: unrecognized alias or alias is not associated with a package (such as a\nREPL-specific command). Alias: `'+alias2string( alias )+'`.\n' );
	}

	/**
	* Returns aliases related to a provided alias.
	*
	* @private
	* @param {*} alias - alias
	* @returns {(StringArray|void)} related packages as a newline-delimited list
	*/
	function onAlias2Related( alias ) {
		var aliases;
		var out;
		var N;
		var i;

		aliases = repl._aliases;
		N = aliases.length;

		if ( isString( alias ) ) {
			out = alias2related( alias );
		}
		// If unable to resolve related aliases, check if we were provided a reference to a REPL-specific command...
		if ( !out ) {
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 1 ] === alias ) {
					out = alias2related( cmds[ i ][ 0 ] );
				}
			}
		}
		// If provided an `alias` which is not a string or we failed to resolve related aliases based on the provided string value, we try to resolve a string alias (and subsequently related aliases) by searching the list of cached references of global variables/properties...
		if ( !out ) {
			i = indexOf( N/2, aliases, 2, 1, alias );
			if ( i >= 0 ) {
				out = alias2related( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve related aliases and the provided value is an object, try finding a provided value's constructor (e.g., if provided a `Uint32Array`, try finding related aliases for `Uint32Array`)...
		if ( !out && typeof alias === 'object' && alias !== null && alias.constructor ) {
			i = indexOf( N/2, aliases, 2, 1, alias.constructor );
			if ( i >= 0 ) {
				out = alias2related( aliases[ i-1 ] );
			}
		}
		if ( out === void 0 || out === null ) {
			repl._ostream.write( 'Error: unrecognized alias. Alias: `'+alias2string( alias )+'`.\n' );
			return;
		}
		if ( out.length ) {
			return out;
		}
	}

	/**
	* Returns the result of the last successfully executed command.
	*
	* @private
	* @returns {*} result
	*/
	function onAns() {
		return repl._ans;
	}

	/**
	* Clears a REPL's local context.
	*
	* @private
	*/
	function onClear() {
		repl.clear();
	}

	/**
	* Runs an example.
	*
	* @private
	* @param {*} alias - variable alias or value
	* @returns {void}
	*/
	function onExample( alias ) {
		var aliases;
		var entry;
		var out;
		var N;
		var i;

		aliases = repl._aliases;
		N = aliases.length;

		if ( isString( alias ) ) {
			// Command docs supersede project namespace docs...
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 0 ] === alias ) {
					out = COMMAND_DOCS.example[ cmds[ i ][ 0 ] ];
				}
			}
			if ( !out ) {
				out = alias2example( alias );
			}
		}
		// If unable to resolve an associated example, check if we were provided a reference to a REPL-specific command...
		if ( !out ) {
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 1 ] === alias ) {
					out = COMMAND_DOCS.example[ cmds[ i ][ 0 ] ];
				}
			}
		}
		// If provided an `alias` which is not a string or we failed to resolve an associated example based on the provided value, we try to resolve a string alias (and subsequently a corresponding example) by searching the list of cached references of global variables/properties...
		if ( !out ) {
			i = indexOf( N/2, aliases, 2, 1, alias );
			if ( i >= 0 ) {
				out = alias2example( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve an associated example and the provided value is an object, try finding a provided value's constructor (e.g., if provided a `Uint32Array`, try finding examples for `Uint32Array`)...
		if ( !out && typeof alias === 'object' && alias !== null && alias.constructor ) {
			i = indexOf( N/2, aliases, 2, 1, alias.constructor );
			if ( i >= 0 ) {
				out = alias2example( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve an associated example and the provided value is a function, try finding method examples...
		if ( !out && isFunction( alias ) ) {
			// Note: the following is an **expensive** look-up!!
			entry = findUniqueEntry( N/2, aliases, 2, 1, alias );
			if ( entry ) {
				out = alias2example( aliases[ entry[2]-1 ]+'.'+entry[ 1 ] );
			}
		}
		if ( out ) {
			out = out.split( RE_EOL );

			// Reset the display prompt:
			repl._rli.write( '\n' );
			displayPrompt( repl, false );

			// Forward each line to the REPL readline interface in order to mimic user input...
			for ( i = 0; i < out.length; i++ ) {
				if ( out[ i ] ) {
					repl._rli.write( out[ i ]+'\n' );
					displayPrompt( repl, false );
				}
			}
			return;
		}
		repl._ostream.write( 'Error: no example available. Alias: `'+alias2string( alias )+'`.\n' );
	}

	/**
	* Prints help text.
	*
	* @private
	* @param {*} [alias] - variable alias or value
	* @returns {void}
	*/
	function onHelp( alias ) {
		var aliases;
		var entry;
		var out;
		var N;
		var i;
		if ( arguments.length === 0 ) {
			repl._ostream.write( HELP_TEXT );
			return;
		}
		aliases = repl._aliases;
		N = aliases.length;

		if ( isString( alias ) ) {
			// Command docs supersede project namespace docs...
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 0 ] === alias ) {
					out = COMMAND_DOCS.help[ cmds[ i ][ 0 ] ];
				}
			}
			if ( !out ) {
				out = alias2help( alias );
			}
		}
		// If unable to resolve help text, check if we were provided a reference to a REPL-specific command...
		if ( !out ) {
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 1 ] === alias ) {
					out = COMMAND_DOCS.help[ cmds[ i ][ 0 ] ];
				}
			}
		}
		// If provided an `alias` which is not a string or we failed to resolve a help text based on the provided string value, we try to resolve a string alias (and subsequently a corresponding help text) by searching the list of cached references of global variables/properties...
		if ( !out ) {
			i = indexOf( N/2, aliases, 2, 1, alias );
			if ( i >= 0 ) {
				out = alias2help( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve help text and the provided value is an object, try finding a provided value's constructor (e.g., if provided a `Uint32Array`, try finding the documentation for `Uint32Array`)...
		if ( !out && typeof alias === 'object' && alias !== null && alias.constructor ) {
			i = indexOf( N/2, aliases, 2, 1, alias.constructor );
			if ( i >= 0 ) {
				out = alias2help( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve help text and the provided value is a function, try finding method documentation (note: we cannot perform a full inherited property search as prototype methods can be shared among multiple constructors, and, based on a reference alone, we cannot determine the appropriate document context; e.g., typed array methods all belong to an ancestor constructor `TypedArray` and we cannot tell, for example, whether a reference to `forEach` should return the documentation for `Uint32Array.prototype.forEach` or `Int32Array.prototype.forEach` or any of the other typed array constructors)...
		if ( !out && isFunction( alias ) ) {
			// Note: the following is an **expensive** look-up!! Why unique? In order to avoid document conflicts/"race conditions" between two or more context variables having own properties pointing to the same function reference (e.g., PRNGs having a `PRNG` property whose value is shared among multiple PRNGs; which `PRNG` property documentation do we return?).
			entry = findUniqueEntry( N/2, aliases, 2, 1, alias );
			if ( entry ) {
				out = alias2help( aliases[ entry[2]-1 ]+'.'+entry[ 1 ] );
			}
		}
		if ( out ) {
			repl._ostream.write( out+'\n' );
			return;
		}
		repl._ostream.write( 'Error: no help information available. Alias: `'+alias2string( alias )+'`.\n' );
	}

	/**
	* Prints abbreviated help text.
	*
	* @private
	* @param {*} alias - variable alias or value
	* @returns {void}
	*/
	function onInfo( alias ) {
		var aliases;
		var entry;
		var out;
		var N;
		var i;

		aliases = repl._aliases;
		N = aliases.length;

		if ( isString( alias ) ) {
			// Command docs supersede project namespace docs...
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 0 ] === alias ) {
					out = COMMAND_DOCS.info[ cmds[ i ][ 0 ] ];
				}
			}
			if ( !out ) {
				out = alias2info( alias );
			}
		}
		// If unable to resolve abbreviated help text, check if we were provided a reference to a REPL-specific command...
		if ( !out ) {
			for ( i = 0; i < cmds.length; i++ ) {
				if ( cmds[ i ][ 1 ] === alias ) {
					out = COMMAND_DOCS.info[ cmds[ i ][ 0 ] ];
				}
			}
		}
		// If provided an `alias` which is not a string or we failed to resolve an abbreviated help text based on the provided string value, we try to resolve a string alias (and subsequently a corresponding abbreviated help text) by searching the list of cached references of global variables/properties...
		if ( !out ) {
			i = indexOf( N/2, aliases, 2, 1, alias );
			if ( i >= 0 ) {
				out = alias2info( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve abbreviated help text and the provided value is an object, try finding a provided value's constructor (e.g., if provided a `Uint32Array`, try finding the documentation for `Uint32Array`)...
		if ( !out && typeof alias === 'object' && alias !== null && alias.constructor ) {
			i = indexOf( N/2, aliases, 2, 1, alias.constructor );
			if ( i >= 0 ) {
				out = alias2info( aliases[ i-1 ] );
			}
		}
		// If we failed to resolve abbreviated help text and the provided value is a function, try finding method abbreviated documentation...
		if ( !out && isFunction( alias ) ) {
			// Note: the following is an **expensive** look-up!!
			entry = findUniqueEntry( N/2, aliases, 2, 1, alias );
			if ( entry ) {
				out = alias2info( aliases[ entry[2]-1 ]+'.'+entry[ 1 ] );
			}
		}
		if ( out ) {
			repl._ostream.write( out+'\n' );
			return;
		}
		repl._ostream.write( 'Error: no abbreviated help available. Alias: `'+alias2string( alias )+'`.\n' );
	}

	/**
	* Returns a boolean indicating whether a string is a reserved keyword in the REPL environment.
	*
	* ## Notes
	*
	* -   This function supports nested keyword paths (e.g., `base.sin`).
	*
	* @private
	* @param {string} keyword - string to test
	* @returns {(boolean|void)} boolean indicating whether a string is a reserved keyword
	*/
	function isKeyword( keyword ) {
		var desc;
		var err;
		var o;
		var i;
		var k;
		if ( !isString( keyword ) ) {
			err = new TypeError( 'invalid argument. Must provide a string. Value: `'+keyword+'`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		// Our proxy for determining whether a value is a keyword is whether the value is read-only property on the `context` object, as any properties we have added to the `context` object are read-only (note, however, that, in a non-sandboxed environment, the `global` object may have read-only properties we have *not* introduced; meaning, some values which may be flagged as "keywords" were not introduced by us):
		keyword = keyword.split( '.' );
		o = context;
		for ( i = 0; i < keyword.length-1; i++ ) {
			k = keyword[ i ];
			if ( !hasOwnProp( o, k ) ) {
				return false;
			}
			o = o[ k ];
		}
		k = keyword[ i ];
		desc = propertyDescriptor( o, k );
		return (
			desc !== null &&
			(
				// Data descriptor:
				desc.writable === false ||

				// Accessor descriptor:
				(
					typeof desc.get === 'function' &&
					desc.set === void 0
				)
			)
		);
	}

	/**
	* Loads and evaluates a JavaScript file line-by-line.
	*
	* @private
	* @param {string} fpath - file path
	* @returns {void}
	*/
	function onLoad( fpath ) {
		var err;
		if ( !isString( fpath ) ) {
			err = new TypeError( 'invalid argument. Must provide a string. Value: `'+fpath+'`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		// Reset the display prompt:
		repl._rli.write( '\n' );
		displayPrompt( repl, false );

		debug( 'Loading a file...' );
		repl.load( fpath );
	}

	/**
	* Quits a REPL.
	*
	* @private
	*/
	function onQuit() {
		debug( 'Quitting the REPL...' );
		repl.close();
	}

	/**
	* Returns a list of variable names in the current workspace.
	*
	* @private
	* @returns {Array} workspace variable names
	*/
	function onVars() {
		return setdiff( repl._workspace.root, properties( context ) );
	}

	/**
	* Returns a list of variable names in a specified workspace.
	*
	* @private
	* @param {string} [name] - workspace name
	* @param {Options} [options] - function options
	* @param {RegExp} [options.include] - name inclusion filter
	* @param {RegExp} [options.exclude] - name exclusion filter
	* @param {Array} [options.types] - type inclusion filter(s)
	* @param {boolean} [options.details] - boolean indicating whether to include additional variable details, such as variable type, contents, etc
	* @throws {TypeError} `name` argument must be a string
	* @throws {TypeError} `options` argument must be an object
	* @throws {TypeError} must provide valid options
	* @throws {TypeError} must provide a recognized workspace name
	* @returns {(Array|void)} workspace variable names
	*/
	function onVarsWorkspace( name, options ) {
		var opts;
		var list;
		var type;
		var err;
		var tmp;
		var out;
		var FLG;
		var v;
		var n;
		var i;
		var j;

		if ( arguments.length === 0 ) {
			return setdiff( repl._workspace.root, properties( context ) );
		}
		if ( arguments.length === 1 ) {
			if ( isString( name ) ) {
				n = name;
				opts = {};
			} else if ( isPlainObject( name ) ) {
				opts = name;
			} else {
				err = new TypeError( 'invalid argument. Must provide either an options object or a workspace name. Value: `' + name + '`.' );
				debug( 'Error: %s', err.message );
				repl._ostream.write( 'Error: '+err.message+'\n' );
				return;
			}
		} else {
			if ( !isString( name ) ) {
				err = new TypeError( 'invalid argument. First argument must be a string. Value: `' + name + '`.' );
				debug( 'Error: %s', err.message );
				repl._ostream.write( 'Error: '+err.message+'\n' );
				return;
			}
			n = name;
			if ( !isPlainObject( options ) ) {
				err = new TypeError( 'invalid argument. Second argument must be an object. Value: `' + name + '`.' );
				debug( 'Error: %s', err.message );
				repl._ostream.write( 'Error: '+err.message+'\n' );
				return;
			}
			opts = options;
		}
		if ( hasOwnProp( opts, 'include' ) && !isRegExp( opts.include ) ) {
			err = new TypeError( 'invalid option. `include` option must be a regular expression. Option: `' + opts.include + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( hasOwnProp( opts, 'exclude' ) && !isRegExp( opts.exclude ) ) {
			err = new TypeError( 'invalid option. `exclude` option must be a regular expression. Option: `' + opts.include + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( hasOwnProp( opts, 'types' ) && !isArray( opts.types ) ) {
			err = new TypeError( 'invalid option. `types` option must be an array. Option: `' + opts.types + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( hasOwnProp( opts, 'details' ) && !isBoolean( opts.details ) ) {
			err = new TypeError( 'invalid option. `details` option must be a boolean. Option: `' + opts.details + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( n === void 0 || n === repl._currentWorkspace ) {
			tmp = setdiff( repl._workspace.root, properties( context ) );
			list = [];
			for ( i = 0; i < tmp.length; i++ ) {
				list.push( tmp[ i ], context[ tmp[i] ] );
			}
		} else {
			if ( !hasOwnProp( repl._workspace, n ) ) {
				err = new TypeError( 'invalid argument. Unrecognized workspace name. Value: `' + n + '`.' );
				debug( 'Error: %s', err.message );
				repl._ostream.write( 'Error: '+err.message+'\n' );
				return;
			}
			list = repl._workspace[ n ];
		}
		out = [];
		for ( i = 0; i < list.length; i += 2 ) {
			v = list[ i ];
			FLG = false;
			type = '';
			if ( opts.include && !opts.include.test( v ) ) {
				continue;
			}
			if ( opts.exclude && opts.exclude.test( v ) ) {
				continue;
			}
			if ( opts.types ) {
				type = typeOf( list[ i+1 ] );
				for ( j = 0; j < opts.types.length; j++ ) {
					if ( type === opts.types[ j ] ) {
						FLG = true;
						break;
					}
				}
				if ( FLG === false ) {
					continue;
				}
			}
			// If we've made it this far, the variable should have passed all filters...
			out.push( v );
			if ( opts.details ) {
				j = out.length - 1;
				out[ j ] = {
					'name': out[ j ],
					'type': type || typeOf( list[ i+1 ] ),
					'data': String( list[ i+1 ] )
				};
				v = out[ j ].data;
				if ( v.length > 20 ) {
					out[ j ].data = v.slice( 0, 9 ) + '...' + v.slice( v.length-8 );
				}
			}
		}
		return out;
	}

	/**
	* Returns a list of workspaces.
	*
	* @private
	* @returns {Array} workspace names
	*/
	function onWorkspaces() {
		return objectKeys( repl._workspace );
	}
}


// EXPORTS //

module.exports = createContext;
