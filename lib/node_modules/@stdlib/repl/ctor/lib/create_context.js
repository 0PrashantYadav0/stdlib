/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var Module = require( 'module' );
var vm = require( 'vm' );
var Console = require( 'console' ).Console;
var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var getGlobal = require( '@stdlib/utils/global' );
var objectKeys = require( '@stdlib/utils/keys' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );
var setConfigurableReadOnly = require( '@stdlib/utils/define-configurable-read-only-property' );
var setConfigurableReadOnlyAccessor = require( '@stdlib/utils/define-configurable-read-only-accessor' ); // eslint-disable-line id-length
var setMemoizedReadOnly = require( '@stdlib/utils/define-memoized-read-only-property' );
var aliases = require( '@stdlib/namespace/aliases' );
var alias2pkg = require( '@stdlib/namespace/alias2pkg' );
var createRequire = require( './create_require.js' );
var createAccessor = require( './create_accessor.js' );
var HELP_TEXT = require( './help_text.js' );
var GLOBALS = require( './globals.js' );


// VARIABLES //

var debug = logger( 'repl:context' );

// Cache references to module methods (WARNING: use of *private* methods exposed on the `Module` object; thus, breakage is possible!):
var resolveLookupPaths = Module._resolveLookupPaths;

// Cache the list of aliases:
var ALIASES = aliases(); // NOTE: we assume all aliases are unique (no duplicates!)


// FUNCTIONS //

/**
* Sets commands on a sandboxed `context` object.
*
* @private
* @param {Object} context - context object
* @param {ArrayArray} commands - commands
* @returns {Object} context object
*/
function setCommands( context, commands ) {
	var cmd;
	var i;

	for ( i = 0; i < commands.length; i++ ) {
		cmd = commands[ i ];
		if ( cmd[ 2 ] ) {
			setReadOnlyAccessor( context, cmd[ 0 ], cmd[ 1 ] );
		} else {
			setReadOnly( context, cmd[ 0 ], cmd[ 1 ] );
		}
	}
	return context;
}

/**
* Sets aliases on a sandboxed `context` object.
*
* @private
* @param {Object} context - context object
* @returns {Object} context object
*/
function setAliases( context ) {
	var key;
	var pkg;
	var o;
	var i;
	var j;
	var k;

	// Extend the context object, keeping in mind that an alias may be nested (e.g., `a.b.c`), and, if so, we need to recursively generate nested objects...
	for ( i = 0; i < ALIASES.length; i++ ) {
		o = context;
		key = ALIASES[ i ].split( '.' );
		for ( j = 0; j < key.length-1; j++ ) {
			k = key[ j ];
			if ( !hasOwnProp( o, k ) ) {
				setReadOnly( o, k, {} );
			}
			o = o[ k ];
		}
		k = key[ j ];
		pkg = alias2pkg( ALIASES[ i ] );
		setMemoizedReadOnly( o, k, createAccessor( context.require, pkg ) );
	}
	return context;
}

/**
* Sets commands on non-sandboxed `context` object.
*
* ## Notes
*
* -   This function avoids overwriting properties in a non-sandboxed environment in order to avoid unintended side-effects.
*
* @private
* @param {Array} out - output array for storing a list of global variables added to the global namespace
* @param {Object} context - context object
* @param {ArrayArray} commands - commands
* @returns {Object} context object
*/
function setCommandsGlobal( out, context, commands ) {
	var cmd;
	var i;

	for ( i = 0; i < commands.length; i++ ) {
		cmd = commands[ i ];
		if ( !hasOwnProp( context, cmd[ 0 ] ) ) {
			out.push( cmd[ 0 ] );
			if ( cmd[ 2 ] ) {
				setConfigurableReadOnlyAccessor( context, cmd[ 0 ], cmd[ 1 ] );
			} else {
				setConfigurableReadOnly( context, cmd[ 0 ], cmd[ 1 ] );
			}
		}
	}
	return context;
}

/**
* Sets aliases on a non-sandboxed `context` object.
*
* ## Notes
*
* -   This function avoids overwriting properties in a non-sandboxed environment in order to avoid unintended side-effects.
*
* @private
* @param {Array} out - output array for storing a list of global variables added to the global namespace
* @param {Object} context - context object
* @returns {Object} context object
*/
function setAliasesGlobal( out, context ) {
	var key;
	var FLG;
	var pkg;
	var o;
	var i;
	var j;
	var k;

	// Extend the context object, keeping in mind that an alias may be nested (e.g., `a.b.c`), and, if so, we need to recursively generate nested objects...
	for ( i = 0; i < ALIASES.length; i++ ) {
		o = context;
		FLG = false;
		key = ALIASES[ i ].split( '.' );
		for ( j = 0; j < key.length-1; j++ ) {
			k = key[ j ];
			if ( !hasOwnProp( o, k ) ) {
				// Upon first encountering a new property, we need to remember the current key path, so that we can later remove the properties upon closing the REPL...
				if ( FLG === false ) {
					FLG = true;
					out.push( key.slice( 0, j+1 ).join( '.' ) );
				}
				setReadOnly( o, k, {} );
			}
			o = o[ k ];
		}
		k = key[ j ];

		// Avoid overwriting properties in a non-sandboxed environment in order to avoid unintended side-effects (e.g., don't break an already running application which has already defined a particular global variable)...
		if ( !hasOwnProp( o, k ) ) {
			if ( FLG === false ) {
				out.push( ALIASES[ i ] );
			}
			pkg = alias2pkg( ALIASES[ i ] );
			setMemoizedReadOnly( o, k, createAccessor( context.require, pkg ) );
		}
	}
	return context;
}


// MAIN //

/**
* Creates a REPL context.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Object} REPL context
*/
function createContext( repl ) {
	var context;
	var Global;
	var keys;
	var cmds;
	var i;

	debug( 'Creating REPL execution context...' );

	Global = getGlobal();
	if ( repl._sandbox ) {
		// Create a sandboxed context:
		context = vm.createContext();

		// Assign globals from the current global context to the sandboxed context (note: shallow copy!)...
		keys = objectKeys( GLOBALS );
		for ( i = 0; i < keys.length; i++ ) {
			setReadOnly( context, keys[ i ], GLOBALS[ keys[ i ] ] );
		}
		// Create a circular reference as in Node.js:
		setReadOnly( context, 'global', context );

		// Create a new `console` interface:
		setReadOnly( context, 'console', new Console( repl._ostream ) );

		// Create a new `module` object:
		setReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setReadOnly( context, 'require', createRequire( context.module ) );
	} else {
		context = Global;

		// Create a new `module` object:
		setConfigurableReadOnly( context, 'module', new Module( '<repl>' ) );

		// Create a new `require` function:
		setConfigurableReadOnly( context, 'require', createRequire( context.module ) );
	}
	context.module.paths = resolveLookupPaths( '<repl>', module, true ) || [];

	// Add project APIs...
	if ( repl._sandbox ) {
		setAliases( context );
	} else {
		setAliasesGlobal( repl._globalVars, context );
	}

	// Define a list of REPL-specific commands (NOTE: keep in alphabetical order):
	cmds = [
		// [ <command>, <function>, <is_accessor> ]
		[ 'ans', onAns, true ],
		[ 'clear', onClear, false ],
		[ 'help', onHelp, false ],
		[ 'load', onLoad, false ],
		[ 'quit', onQuit, false ]
	];

	// TODO: add `alias2pkg` command wrapper

	// TODO: add `alias2related` command wrapper

	// TODO: add `example` command

	// TODO: add `isKeyword` command

	// TODO: add `save` command

	// TODO: add `saveStart` command

	// TODO: add `saveStop` command

	// TODO: add `citation` command

	// TODO: add `license` command

	// TODO: add `copyright` command

	// TODO: add `contributors` command

	// TODO: add `credits` command

	// TODO: add `donate` command

	// Add commands requiring privileged access to internal instance variables...
	if ( repl._sandbox ) {
		setCommands( context, cmds );
	} else {
		setCommandsGlobal( repl._globalVars, context, cmds );
	}
	return context;

	/**
	* Returns the result of the last successfully executed command.
	*
	* @private
	* @returns {*} result
	*/
	function onAns() {
		return repl._ans;
	}

	/**
	* Clears a REPL's local context.
	*
	* @private
	*/
	function onClear() {
		repl.clear();
	}

	/**
	* Prints help text.
	*
	* @private
	* @param {*} [alias] - variable alias or value
	* @returns {void}
	*/
	function onHelp( alias ) {
		if ( arguments.length === 0 ) {
			repl._ostream.write( HELP_TEXT );
			return;
		}
		// TODO: add support for printing help text; first look through project namespace and then REPL-specific namespace
		console.log( String( alias ) );
	}

	/**
	* Loads and evaluates a JavaScript file line-by-line.
	*
	* @private
	* @param {string} fpath - file path
	* @returns {void}
	*/
	function onLoad( fpath ) {
		var err;
		if ( !isString( fpath ) ) {
			err = new TypeError( 'invalid argument. Must provide a string. Value: `'+fpath+'`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		debug( 'Loading a file...' );
		repl.load( fpath );
	}

	/**
	* Quits a REPL.
	*
	* @private
	*/
	function onQuit() {
		debug( 'Quitting the REPL...' );
		repl.close();
	}
}


// EXPORTS //

module.exports = createContext;
