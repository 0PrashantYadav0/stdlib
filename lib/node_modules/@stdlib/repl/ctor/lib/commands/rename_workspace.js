/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// VARIABLES //

var debug = logger( 'repl:command:delete_workspace' );


// MAIN //

/**
* Returns a callback to be invoked upon calling the `renameWorkspace` command.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Function} callback
*/
function command( repl ) {
	return onCommand;

	/**
	* Renames a workspace.
	*
	* @private
	* @param {string} oldName - name of workspace to rename
	* @param {string} newName - new workspace name
	* @returns {void}
	*/
	function onCommand( oldName, newName ) {
		var err;
		if ( !isString( oldName ) ) {
			err = new TypeError( 'invalid argument. First argument must be a string. Value: `' + oldName + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( !isString( newName ) ) {
			err = new TypeError( 'invalid argument. Second argument must be a string. Value: `' + newName + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( !hasOwnProp( repl._workspaces, oldName ) ) {
			err = new Error( 'invalid argument. Unrecognized workspace name. Value: `' + oldName + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( oldName === newName ) {
			if ( repl._quiet === false ) {
				repl._ostream.write( 'Workspace is already named \''+newName+'\'.\n' );
			}
			return;
		}
		if ( hasOwnProp( repl._workspaces, newName ) ) {
			err = new Error( 'invalid argument. Workspace name already exists. Value: `' + newName + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( oldName === repl._currentWorkspace ) {
			if ( oldName === 'base' ) {
				repl._workspaces[ 'base' ].length = 0;
				if ( repl._quiet === false ) {
					repl._ostream.write( 'Created \''+newName+'\' workspace and cleared \'base\' workspace. Current workspace: \''+newName+'\'.\n' );
				}
			} else {
				delete repl._workspaces[ oldName ];
				if ( repl._quiet === false ) {
					repl._ostream.write( 'Renamed \''+oldName+'\' workspace to \''+newName+'\'. Current workspace: \''+newName+'\'.\n' );
				}
			}
			repl._workspaces[ newName ] = []; // "registers" the workspace
			repl._currentWorkspace = newName; // bookkeeping
			return;
		}
		if ( oldName === 'base' ) {
			repl._workspaces[ newName ] = repl._workspaces[ 'base' ].slice();
			repl._workspaces[ 'base' ].length = 0;
			if ( repl._quiet === false ) {
				repl._ostream.write( 'Created \''+newName+'\' workspace and cleared \'base\' workspace.\n' );
			}
			return;
		}
		repl._workspaces[ newName ] = repl._workspaces[ oldName ];
		delete repl._workspaces[ oldName ];
		if ( repl._quiet === false ) {
			repl._ostream.write( 'Renamed \''+oldName+'\' workspace to \''+newName+'\'.\n' );
		}
	}
}


// EXPORTS //

module.exports = command;
