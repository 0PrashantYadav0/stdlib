/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var setMemoizedReadOnly = require( '@stdlib/utils/define-memoized-read-only-property' );
var alias2pkg = require( '@stdlib/namespace/alias2pkg' );
var createAccessor = require( './create_accessor.js' );
var ALIASES = require( './aliases.js' );


// MAIN //

/**
* Sets aliases on a non-sandboxed `context` object.
*
* ## Notes
*
* -   This function avoids overwriting properties in a non-sandboxed environment in order to avoid unintended side-effects.
*
* @private
* @param {Array} out - output array for storing a list of global variables added to the global namespace
* @param {Object} context - context object
* @returns {Object} context object
*/
function setAliasesGlobal( out, context ) {
	var key;
	var FLG;
	var pkg;
	var o;
	var i;
	var j;
	var k;

	// Extend the context object, keeping in mind that an alias may be nested (e.g., `a.b.c`), and, if so, we need to recursively generate nested objects...
	for ( i = 0; i < ALIASES.length; i++ ) {
		o = context;
		FLG = false;
		key = ALIASES[ i ].split( '.' );
		for ( j = 0; j < key.length-1; j++ ) {
			k = key[ j ];
			if ( !hasOwnProp( o, k ) ) {
				// Upon first encountering a new property, we need to remember the current key path, so that we can later remove the properties upon closing the REPL...
				if ( FLG === false ) {
					FLG = true;
					out.push( key.slice( 0, j+1 ).join( '.' ) );
				}
				setReadOnly( o, k, {} );
			}
			o = o[ k ];
		}
		k = key[ j ];

		// Avoid overwriting properties in a non-sandboxed environment in order to avoid unintended side-effects (e.g., don't break an already running application which has already defined a particular global variable)...
		if ( !hasOwnProp( o, k ) ) {
			if ( FLG === false ) {
				out.push( ALIASES[ i ] );
			}
			pkg = alias2pkg( ALIASES[ i ] );
			setMemoizedReadOnly( o, k, createAccessor( context.require, pkg ) );
		}
	}
	return context;
}


// EXPORTS //

module.exports = setAliasesGlobal;
