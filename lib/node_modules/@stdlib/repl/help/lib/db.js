/* eslint-disable quotes, max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
* This file is generated by scripts/build.js.
*/
'use strict';

var db = {
	"AFINN_111": "\nAFINN_111()\n    Returns a list of English words rated for valence.\n\n    The returned list contains 2477 English words (and phrases) rated for\n    valence. Negative words have a negative valence [-5,0). Positive words have\n    a positive valence (0,5]. Neutral words have a valence of 0.\n\n    A few notes:\n\n    - The list includes misspelled words. Their presence is intentional, as such\n      misspellings frequently occur in social media content.\n    - All words are lowercase.\n    - Words may contain numbers; e.g., \"n00b\".\n    - Some \"words\" are phrases; e.g., \"cool stuff\", \"not good\".\n    - Words may contain apostrophes; e.g., \"can't stand\".\n    - Words may contain diaeresis; e.g., \"naïve\".\n    - Words may contain dashes; e.g., \"self-deluded\", \"self-confident\".\n\n    Returns\n    -------\n    out: Array<Array>\n        List of English words and their valence.\n\n    Examples\n    --------\n    > var list = AFINN_111()\n    [ [ 'abandon', -2 ], [ 'abandoned', -2 ], [ 'abandons', -2 ], ... ]\n\n    References\n    ----------\n    - Nielsen, Finn Årup. 2011. \"A new ANEW: Evaluation of a word list for\n    sentiment analysis in microblogs.\" In *Proceedings of the ESWC2011 Workshop\n    on 'Making Sense of Microposts': Big Things Come in Small Packages.*,\n    718:93–98. CEUR Workshop Proceedings. <http://ceur-ws.org/Vol-718/paper_16.\n    pdf>.\n\n    * If you use the list for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    AFINN_96\n",
	"AFINN_96": "\nAFINN_96()\n    Returns a list of English words rated for valence.\n\n    The returned list contains 1468 English words (and phrases) rated for\n    valence. Negative words have a negative valence [-5,0). Positive words have\n    a positive valence (0,5]. Neutral words have a valence of 0.\n\n    A few notes:\n\n    - The list is an earlier version of AFINN-111.\n    - The list includes misspelled words. Their presence is intentional, as such\n      misspellings frequently occur in social media content.\n    - All words are lowercase.\n    - Some \"words\" are phrases; e.g., \"cashing in\", \"cool stuff\".\n    - Words may contain apostrophes; e.g., \"can't stand\".\n    - Words may contain dashes; e.g., \"cover-up\", \"made-up\".\n\n    Returns\n    -------\n    out: Array<Array>\n        List of English words and their valence.\n\n    Examples\n    --------\n    > var list = AFINN_96()\n    [ [ 'abandon', -2 ], [ 'abandons', -2 ], [ 'abandoned', -2 ], ... ]\n\n    References\n    ----------\n    - Nielsen, Finn Årup. 2011. \"A new ANEW: Evaluation of a word list for\n    sentiment analysis in microblogs.\" In *Proceedings of the ESWC2011 Workshop\n    on 'Making Sense of Microposts': Big Things Come in Small Packages.*,\n    718:93–98. CEUR Workshop Proceedings. <http://ceur-ws.org/Vol-718/paper_16.\n    pdf>.\n\n    * If you use the list for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    AFINN_111\n",
	"allocUnsafe": "\nallocUnsafe( size )\n    Allocates a buffer having a specified number of bytes.\n\n    The underlying memory of returned buffers is not initialized. Memory\n    contents are unknown and may contain sensitive data.\n\n    When the size is less than half a buffer pool size, memory is allocated from\n    the buffer pool for faster allocation of Buffer instances.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes to allocate.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var buf = allocUnsafe( 100 )\n    <Buffer>\n\n    See Also\n    --------\n    Buffer, array2buffer, arraybuffer2buffer, copyBuffer, string2buffer\n",
	"anova1": "\nanova1( x, factor[, options] )\n    Performs a one-way analysis of variance.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Measured values.\n\n    factor: Array\n        Array of treatments.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.method: string\n        Name of test.\n\n    out.means: Object\n        Group means alongside sample sizes and standard errors.\n\n    out.treatmentDf: number\n        Treatment degrees of freedom.\n\n    out.treatmentSS: number\n        Treatment sum of squares.\n\n    out.treatmentMSS: number\n        Treatment mean sum of squares.\n\n    out.errorDf: number\n        Error degrees of freedom.\n\n    out.errorSS: number\n        Error sum of squares.\n\n    out.errorMSS: number\n        Error mean sum of squares.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var x = [1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15];\n    > var f = [\n    ... 'control', 'treatA', 'treatB', 'treatC', 'control',\n    ... 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC'\n    ... ];\n    > var out = anova1( x, f )\n    {...}\n\n",
	"ANSCOMBES_QUARTET": "\nANSCOMBES_QUARTET()\n    Returns Anscombe's quartet.\n\n    Anscombe's quartet is a set of 4 datasets which all have nearly identical\n    simple statistical properties but vary considerably when graphed. Anscombe\n    created the datasets to demonstrate why graphical data exploration should\n    precede statistical data analysis and to show the effect of outliers on\n    statistical properties.\n\n    Returns\n    -------\n    out: Array<Array>\n        Anscombe's quartet.\n\n    Examples\n    --------\n    > var d = ANSCOMBES_QUARTET()\n    [[[10,8.04],...],[[10,9.14],...],[[10,7.46],...],[[8,6.58],...]]\n\n    References\n    ----------\n    - Anscombe, Francis J. 1973. \"Graphs in Statistical Analysis.\" *The American\n    Statistician* 27 (1). [American Statistical Association, Taylor & Francis,\n    Ltd.]: 17–21. <http://www.jstor.org/stable/2682899>.\n\n",
	"any": "\nany( collection )\n    Tests whether at least one element in a collection is truthy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if an element is truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 0, 0, 1 ];\n    > var bool = any( arr )\n    true\n\n    See Also\n    --------\n    anyBy, every, forEach, none, some\n",
	"anyBy": "\nanyBy( collection, predicate[, thisArg ] )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns `true` for\n        any element; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, 3, 4, -1 ];\n    > var bool = anyBy( arr, negative )\n    true\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyBy, forEach, noneBy, someBy\n",
	"anyByAsync": "\nanyByAsync( collection, [options,] predicate, done )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-falsy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nanyByAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByAsync, forEachAsync, noneByAsync, someByAsync\n",
	"anyByRight": "\nanyByRight( collection, predicate[, thisArg ] )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns `true` for\n        any element; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ -1, 1, 2, 3, 4 ];\n    > var bool = anyByRight( arr, negative )\n    true\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByRight, forEachRight, noneByRight, someByRight\n",
	"anyByRightAsync": "\nanyByRightAsync( collection, [options,] predicate, done )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-falsy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nanyByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function, iterating from right to\n    left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByRightAsync\n",
	"APERY": "\nAPERY\n    Apéry's constant.\n\n    Examples\n    --------\n    > APERY\n    1.2020569031595942\n\n",
	"append": "\nappend( collection1, collection2 )\n    Adds the elements of one collection to the end of another collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection1: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    collection2: Array|TypedArray|Object\n        A collection containing the elements to add. If the collection is an\n        `Object`, the collection should be array-like.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = append( arr, [ 6.0, 7.0 ] )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = append( arr, [ 3.0, 4.0 ] )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 0 };\n    > arr = append( arr, [ 1.0, 2.0 ] )\n    { 'length': 2, '0': 1.0, '1': 2.0 }\n\n    See Also\n    --------\n    prepend, push\n",
	"ARCH": "\nARCH\n    Operating system CPU architecture.\n\n    Current possible values:\n\n    - arm\n    - arm64\n    - ia32\n    - mips\n    - mipsel\n    - ppc\n    - ppc64\n    - s390\n    - s390x\n    - x32\n    - x64\n\n    Examples\n    --------\n    > ARCH\n    <string>\n\n    See Also\n    --------\n    PLATFORM\n",
	"argumentFunction": "\nargumentFunction( idx )\n    Returns a function which always returns a specified argument.\n\n    The input argument corresponds to the zero-based index of the argument to\n    return.\n\n    Parameters\n    ----------\n    arg: integer\n        Argument index to return (zero-based).\n\n    Returns\n    -------\n    out: Function\n        Argument function.\n\n    Examples\n    --------\n    > var argn = argumentFunction( 1 );\n    > var v = argn( 3.14, -3.14, 0.0 )\n    -3.14\n    > v = argn( -1.0, -0.0, 1.0 )\n    -0.0\n    > v = argn( 'beep', 'boop', 'bop' )\n    'boop'\n    > v = argn( 'beep' )\n    undefined\n\n    See Also\n    --------\n    constantFunction, identity\n",
	"ARGV": "\nARGV\n    An array containing command-line arguments passed when launching the calling\n    process.\n\n    The first element is the absolute pathname of the executable that started\n    the calling process.\n\n    The second element is the path of the executed file.\n\n    Any additional elements are additional command-line arguments.\n\n    In browser environments, the array is empty.\n\n    Examples\n    --------\n    > var execPath = ARGV[ 0 ]\n    e.g., /usr/local/bin/node\n\n    See Also\n    --------\n    ENV\n",
	"ArrayBuffer": "\nArrayBuffer( size )\n    Returns an array buffer having a specified number of bytes.\n\n    Buffer contents are initialized to 0.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        An array buffer.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 5 )\n    <ArrayBuffer>\n\n\nArrayBuffer.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > ArrayBuffer.length\n    1\n\n\nArrayBuffer.isView( arr )\n    Returns a boolean indicating if provided an array buffer view.\n\n    Parameters\n    ----------\n    arr: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input argument is a buffer view.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 10 );\n    > ArrayBuffer.isView( arr )\n    true\n\n\nArrayBuffer.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 5 );\n    > buf.byteLength\n    5\n\n\nArrayBuffer.prototype.slice( [start[, end]] )\n    Copies the bytes of an array buffer to a new array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        A new array buffer whose contents have been copied from the calling\n        array buffer.\n\n    Examples\n    --------\n    > var b1 = new ArrayBuffer( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------\n    Buffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, SharedArrayBuffer, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"arraybuffer2buffer": "\narraybuffer2buffer( buf[, byteOffset[, length]] )\n    Allocates a buffer from an ArrayBuffer.\n\n    The behavior of this function varies across Node.js versions due to changes\n    in the underlying Node.js APIs:\n\n    - <3.0.0: the function copies ArrayBuffer bytes to a new Buffer instance.\n    - >=3.0.0 and <5.10.0: if provided a byte offset, the function copies\n      ArrayBuffer bytes to a new Buffer instance; otherwise, the function\n      returns a view of an ArrayBuffer without copying the underlying memory.\n    - <6.0.0: if provided an empty ArrayBuffer, the function returns an empty\n      Buffer which is not an ArrayBuffer view.\n    - >=6.0.0: the function returns a view of an ArrayBuffer without copying\n      the underlying memory.\n\n    Parameters\n    ----------\n    buf: ArrayBuffer\n        Input array buffer.\n\n    byteOffset: integer (optional)\n        Index offset specifying the location of the first byte.\n\n    length: integer (optional)\n        Number of bytes to expose from the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var ab = new ArrayBuffer( 10 )\n    <ArrayBuffer>\n    > var buf = arraybuffer2buffer( ab )\n    <Buffer>\n    > var len = buf.length\n    10\n    > buf = arraybuffer2buffer( ab, 2, 6 )\n    <Buffer>\n    > len = buf.length\n    6\n\n    See Also\n    --------\n    Buffer, array2buffer, copyBuffer, string2buffer\n",
	"arrayCtors": "\narrayCtors( dtype )\n    Returns an array constructor.\n\n    The function returns constructors for the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    dtype: string\n        Data type.\n\n    Returns\n    -------\n    out: Function|null\n        Constructor.\n\n    Examples\n    --------\n    > var ctor = arrayCtors( 'float64' )\n    <Function>\n    > ctor = arrayCtors( 'float' )\n    null\n\n    See Also\n    --------\n    typedarrayCtors\n",
	"arrayDataType": "\narrayDataType( array )\n    Returns the data type of an array.\n\n    If provided an argument having an unknown or unsupported type, the function\n    returns `null`.\n\n    Parameters\n    ----------\n    array: any\n        Input value.\n\n    Returns\n    -------\n    out: string|null\n        Data type.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 10 );\n    > var dt = arrayDataType( arr )\n    'float64'\n    > dt = arrayDataType( 'beep' )\n    null\n\n    See Also\n    --------\n    arrayDataTypes\n",
	"arrayDataTypes": "\narrayDataTypes()\n    Returns a list of array data types.\n\n    The output array contains the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Returns\n    -------\n    out: Array<string>\n        List of array data types.\n\n    Examples\n    --------\n    > var out = arrayDataTypes()\n    <Array>\n\n    See Also\n    --------\n    typedarrayDataTypes\n",
	"array2buffer": "\narray2buffer( arr )\n    Allocates a buffer using an octet array.\n\n    Parameters\n    ----------\n    arr: Array<integer>\n        Array (or array-like object) of octets from which to copy.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var buf = array2buffer( [ 1, 2, 3, 4 ] )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    Buffer, arraybuffer2buffer, copyBuffer, string2buffer\n",
	"base.abs": "\nbase.abs( x )\n    Computes the absolute value of `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Absolute value.\n\n    Examples\n    --------\n    > var y = base.abs( -1.0 )\n    1.0\n    > y = base.abs( 2.0 )\n    2.0\n    > y = base.abs( 0.0 )\n    0.0\n    > y = base.abs( -0.0 )\n    0.0\n    > y = base.abs( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs2\n",
	"base.abs2": "\nbase.abs2( x )\n    Computes the squared absolute value of `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Squared absolute value.\n\n    Examples\n    --------\n    > var y = base.abs2( -1.0 )\n    1.0\n    > y = base.abs2( 2.0 )\n    4.0\n    > y = base.abs2( 0.0 )\n    0.0\n    > y = base.abs2( -0.0 )\n    0.0\n    > y = base.abs2( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs\n",
	"base.absdiff": "\nbase.absdiff( x, y )\n    Computes the absolute difference.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Absolute difference.\n\n    Examples\n    --------\n    > var d = base.absdiff( 2.0, 5.0 )\n    3.0\n    > d = base.absdiff( -1.0, 3.14 )\n    ~4.14\n    > d = base.absdiff( 10.1, -2.05 )\n    ~12.15\n    > d = base.absdiff( -0.0, 0.0 )\n    +0.0\n    > d = base.absdiff( NaN, 5.0 )\n    NaN\n    > d = base.absdiff( PINF, NINF )\n    Infinity\n    > d = base.absdiff( PINF, PINF )\n    NaN\n\n    See Also\n    --------\n    base.reldiff, base.epsdiff\n",
	"base.absInt32": "\nbase.absInt32( x )\n    Computes an absolute value of a signed 32-bit integer in two's complement\n    format.\n\n    Parameters\n    ----------\n    x: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Absolute value.\n\n    Examples\n    --------\n    > var v = base.absInt32( -1|0 )\n    1\n    > v = base.absInt32( 2|0 )\n    2\n    > v = base.absInt32( 0|0 )\n    0\n\n    See Also\n    --------\n    base.abs\n",
	"base.acos": "\nbase.acos( x )\n    Compute the arccosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arccosine (in radians).\n\n    Examples\n    --------\n    > var y = base.acos( 1.0 )\n    0.0\n    > y = base.acos( 0.707 )\n    ~0.7855\n    > y = base.acos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asin, base.atan\n",
	"base.acosh": "\nbase.acosh( x )\n    Computes the hyperbolic arccosine of a number.\n\n    If `x < 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arccosine (in radians).\n\n    Examples\n    --------\n    > var y = base.acosh( 1.0 )\n    0.0\n    > y = base.acosh( 2.0 )\n    ~1.317\n    > y = base.acosh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asinh, base.atanh\n",
	"base.acovercos": "\nbase.acovercos( x )\n    Computes the inverse coversed cosine.\n\n    The inverse coversed cosine is defined as `asin(1+x)`.\n\n    If `x < -2`, `x > 0`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse coversed cosine.\n\n    Examples\n    --------\n    > var y = base.acovercos( -1.5 )\n    ~-0.5236\n    > y = base.acovercos( -0.0 )\n    ~1.5708\n\n    See Also\n    --------\n    base.acoversin, base.avercos, base.covercos, base.vercos\n",
	"base.acoversin": "\nbase.acoversin( x )\n    Computes the inverse coversed sine.\n\n    The inverse coversed sine is defined as `asin(1-x)`.\n\n    If `x < 0`, `x > 2`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse coversed sine.\n\n    Examples\n    --------\n    > var y = base.acoversin( 1.5 )\n    ~-0.5236\n    > y = base.acoversin( 0.0 )\n    ~1.5708\n\n    See Also\n    --------\n    base.acovercos, base.aversin, base.coversin, base.versin\n",
	"base.ahavercos": "\nbase.ahavercos( x )\n    Computes the inverse half-value versed cosine.\n\n    The inverse half-value versed cosine is defined as `2*acos(sqrt(x))`.\n\n    If `x < 0`, `x > 1`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse half-value versed cosine.\n\n    Examples\n    --------\n    > var y = base.ahavercos( 0.5 )\n    ~1.5708\n    > y = base.ahavercos( 0.0 )\n    ~3.1416\n\n    See Also\n    --------\n    base.ahaversin, base.havercos, base.vercos\n",
	"base.ahaversin": "\nbase.ahaversin( x )\n    Computes the inverse half-value versed sine.\n\n    The inverse half-value versed sine is defined as `2*asin(sqrt(x))`.\n\n    If `x < 0`, `x > 1`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse half-value versed sine.\n\n    Examples\n    --------\n    > var y = base.ahaversin( 0.5 )\n    ~1.5708\n    > y = base.ahaversin( 0.0 )\n    0.0\n\n    See Also\n    --------\n    base.ahavercos, base.haversin, base.versin\n",
	"base.asin": "\nbase.asin( x )\n    Computes the arcsine of a number.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arcsine (in radians).\n\n    Examples\n    --------\n    > var y = base.asin( 0.0 )\n    0.0\n    > y = base.asin( PI/2.0 )\n    ~1.0\n    > y = base.asin( -PI/6.0 )\n    ~-0.5\n    > y = base.asin( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asinh, base.atan\n",
	"base.asinh": "\nbase.asinh( x )\n    Computes the hyperbolic arcsine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arcsine (in radians).\n\n    Examples\n    --------\n    > var y = base.asinh( 0.0 )\n    0.0\n    > y = base.asinh( 2.0 )\n    ~1.444\n    > y = base.asinh( -2.0 )\n    ~-1.444\n    > y = base.asinh( NaN )\n    NaN\n    > y = base.asinh( NINF )\n    -Infinity\n    > y = base.asinh( PINF )\n    Infinity\n\n    See Also\n    --------\n    base.acosh, base.asin, base.atanh\n",
	"base.atan": "\nbase.atan( x )\n    Computes the arctangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arctangent (in radians).\n\n    Examples\n    --------\n    > var y = base.atan( 0.0 )\n    ~0.0\n    > y = base.atan( -PI/4.0 )\n    ~-1.0\n    > y = base.atan( PI/4.0 )\n    ~1.0\n    > y = base.atan( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asin, base.atanh\n",
	"base.atan2": "\nbase.atan2( y, x )\n    Evaluates the arctangent of the quotient of two numbers.\n\n    Parameters\n    ----------\n    y: number\n        Numerator.\n\n    x: number\n        Denominator.\n\n    Returns\n    -------\n    out: number\n        Arctangent of `y/x` (in radians).\n\n    Examples\n    --------\n    > var v = base.atan2( 2.0, 2.0 )\n    ~0.785\n    > v = base.atan2( 6.0, 2.0 )\n    ~1.249\n    > v = base.atan2( -1.0, -1.0 )\n    ~-2.356\n    > v = base.atan2( 3.0, 0.0 )\n    ~1.571\n    > v = base.atan2( -2.0, 0.0 )\n    ~-1.571\n    > v = base.atan2( 0.0, 0.0 )\n    0.0\n    > v = base.atan2( 3.0, NaN )\n    NaN\n    > v = base.atan2( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.atan\n",
	"base.atanh": "\nbase.atanh( x )\n    Computes the hyperbolic arctangent of a number.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arctangent (in radians).\n\n    Examples\n    --------\n    > var y = base.atanh( 0.0 )\n    0.0\n    > y = base.atanh( 0.9 )\n    ~1.472\n    > y = base.atanh( 1.0 )\n    Infinity\n    > y = base.atanh( -1.0 )\n    -Infinity\n    > y = base.atanh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asinh, base.atan\n",
	"base.avercos": "\nbase.avercos( x )\n    Computes the inverse versed cosine.\n\n    The inverse versed cosine is defined as `acos(1+x)`.\n\n    If `x < -2`, `x > 0`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse versed cosine.\n\n    Examples\n    --------\n    > var y = base.avercos( -1.5 )\n    ~2.0944\n    > y = base.avercos( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.aversin, base.versin\n",
	"base.aversin": "\nbase.aversin( x )\n    Computes the inverse versed sine.\n\n    The inverse versed sine is defined as `acos(1-x)`.\n\n    If `x < 0`, `x > 2`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse versed sine.\n\n    Examples\n    --------\n    > var y = base.aversin( 1.5 )\n    ~2.0944\n    > y = base.aversin( 0.0 )\n    0.0\n\n    See Also\n    --------\n    base.avercos, base.vercos\n",
	"base.bernoulli": "\nbase.bernoulli( n )\n    Computes the nth Bernoulli number.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Bernoulli number.\n\n    Examples\n    --------\n    > var y = base.bernoulli( 0 )\n    1.0\n    > y = base.bernoulli( 1 )\n    0.0\n    > y = base.bernoulli( 2 )\n    ~0.166\n    > y = base.bernoulli( 3 )\n    0.0\n    > y = base.bernoulli( 4 )\n    ~-0.033\n    > y = base.bernoulli( 5 )\n    0.0\n    > y = base.bernoulli( 20 )\n    ~-529.124\n    > y = base.bernoulli( 260 )\n    -Infinity\n    > y = base.bernoulli( 262 )\n    Infinity\n    > y = base.bernoulli( NaN )\n    NaN\n\n",
	"base.besselj0": "\nbase.besselj0( x )\n    Computes the Bessel function of the first kind of order zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.besselj0( 0.0 )\n    1.0\n    > y = base.besselj0( 1.0 )\n    ~0.765\n    > y = base.besselj0( PINF )\n    0.0\n    > y = base.besselj0( NINF )\n    0.0\n    > y = base.besselj0( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj1, base.bessely0, base.bessely1\n",
	"base.besselj1": "\nbase.besselj1( x )\n    Computes the Bessel function of the first kind of order one.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.besselj1( 0.0 )\n    0.0\n    > y = base.besselj1( 1.0 )\n    ~0.440\n    > y = base.besselj1( PINF )\n    0.0\n    > y = base.besselj1( NINF )\n    0.0\n    > y = base.besselj1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj0, base.bessely0, base.bessely1\n",
	"base.bessely0": "\nbase.bessely0( x )\n    Computes the Bessel function of the second kind of order zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.bessely0( 0.0 )\n    -Infinity\n    > y = base.bessely0( 1.0 )\n    ~0.088\n    > y = base.bessely0( -1.0 )\n    NaN\n    > y = base.bessely0( PINF )\n    0.0\n    > y = base.bessely0( NINF )\n    NaN\n    > y = base.bessely0( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj0, base.besselj1, base.bessely1\n",
	"base.bessely1": "\nbase.bessely1( x )\n    Computes the Bessel function of the second kind of order one.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.bessely1( 0.0 )\n    -Infinity\n    > y = base.bessely1( 1.0 )\n    ~-0.781\n    > y = base.bessely1( -1.0 )\n    NaN\n    > y = base.bessely1( PINF )\n    0.0\n    > y = base.bessely1( NINF )\n    NaN\n    > y = base.bessely1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj0, base.besselj1, base.bessely0\n",
	"base.beta": "\nbase.beta( x, y )\n    Evaluates the beta function.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter (non-negative).\n\n    y: number\n        Second function parameter (non-negative).\n\n    Returns\n    -------\n    out: number\n        Evaluated beta function.\n\n    Examples\n    --------\n    > var v = base.beta( 0.0, 0.0 )\n    Infinity\n    > v = base.beta( 1.0, 1.0 )\n    1.0\n    > v = base.beta( -1.0, 2.0 )\n    NaN\n    > v = base.beta( 5.0, 0.2 )\n    ~3.382\n    > v = base.beta( 4.0, 1.0 )\n    0.25\n    > v = base.beta( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.betainc, base.betaincinv, base.betaln\n",
	"base.betainc": "\nbase.betainc( x, a, b[, regularized[, upper]] )\n    Computes the regularized incomplete beta function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete beta functions, respectively.\n\n    If provided `x < 0` or `x > 1`, the function returns `NaN`.\n\n    If provided `a < 0` or `b < 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    regularized: boolean (optional)\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete beta function. Default: `true`.\n\n    upper: boolean (optional)\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete beta function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.betainc( 0.5, 2.0, 2.0 )\n    0.5\n    > y = base.betainc( 0.5, 2.0, 2.0, false )\n    ~0.083\n    > y = base.betainc( 0.2, 1.0, 2.0 )\n    0.36\n    > y = base.betainc( 0.2, 1.0, 2.0, true, true )\n    0.64\n    > y = base.betainc( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( 0.8, NaN, 1.0 )\n    NaN\n    > y = base.betainc( 0.8, 1.0, NaN )\n    NaN\n    > y = base.betainc( 1.5, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( -0.5, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( 0.5, -2.0, 2.0 )\n    NaN\n    > y = base.betainc( 0.5, 2.0, -2.0 )\n    NaN\n\n    See Also\n    --------\n    base.beta, base.betaincinv, base.betaln\n",
	"base.betaincinv": "\nbase.betaincinv( p, a, b[, upper] )\n    Computes the inverse of the lower incomplete beta function.\n\n    In contrast to a more commonly used definition, the first argument is the\n    probability `p` and the second and third arguments are `a` and `b`,\n    respectively.\n\n    By default, the function inverts the lower regularized incomplete beta\n    function. To invert the upper function, set the `upper` argument to `true`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Probability.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    upper: boolean (optional)\n        Boolean indicating if the function should invert the upper tail of the\n        incomplete beta function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.betaincinv( 0.2, 3.0, 3.0 )\n    ~0.327\n    > y = base.betaincinv( 0.4, 3.0, 3.0 )\n    ~0.446\n    > y = base.betaincinv( 0.4, 3.0, 3.0, true )\n    ~0.554\n    > y = base.betaincinv( 0.4, 1.0, 6.0 )\n    ~0.082\n    > y = base.betaincinv( 0.8, 1.0, 6.0 )\n    ~0.235\n    > y = base.betaincinv( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 1.0, NaN )\n    NaN\n    > y = base.betaincinv( 1.2, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( -0.5, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, -2.0, 2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 0.0, 2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 2.0, -2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 2.0, 0.0 )\n    NaN\n\n    See Also\n    --------\n    base.beta, base.betainc, base.betaln\n",
	"base.betaln": "\nbase.betaln( a, b )\n    Evaluates the natural logarithm of the beta function.\n\n    Parameters\n    ----------\n    a: number\n        First function parameter (non-negative).\n\n    b: number\n        Second function parameter (non-negative).\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the beta function.\n\n    Examples\n    --------\n    > var v = base.betaln( 0.0, 0.0 )\n    Infinity\n    > v = base.betaln( 1.0, 1.0 )\n    0.0\n    > v = base.betaln( -1.0, 2.0 )\n    NaN\n    > v = base.betaln( 5.0, 0.2 )\n    ~1.218\n    > v = base.betaln( 4.0, 1.0 )\n    ~-1.386\n    > v = base.betaln( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.beta, base.betainc, base.betaincinv\n",
	"base.binet": "\nbase.binet( x )\n    Evaluates Binet's formula extended to real numbers.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function result.\n\n    Examples\n    --------\n    > var y = base.binet( 0.0 )\n    0.0\n    > y = base.binet( 1.0 )\n    1.0\n    > y = base.binet( 2.0 )\n    1.0\n    > y = base.binet( 3.0 )\n    2.0\n    > y = base.binet( 4.0 )\n    3.0\n    > y = base.binet( 5.0 )\n    ~5.0\n    > y = base.binet( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negafibonacci\n",
	"base.binomcoef": "\nbase.binomcoef( n, k )\n    Computes the binomial coefficient of two integers.\n\n    If `k < 0`, the function returns `0`.\n\n    The function returns `NaN` for non-integer `n` or `k`.\n\n    Parameters\n    ----------\n    n: integer\n        First input value.\n\n    k: integer\n        Second input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.binomcoef( 8, 2 )\n    28\n    > v = base.binomcoef( 0, 0 )\n    1\n    > v = base.binomcoef( -4, 2 )\n    10\n    > v = base.binomcoef( 5, 3 )\n    10\n    > v = base.binomcoef( NaN, 3 )\n    NaN\n    > v = base.binomcoef( 5, NaN )\n    NaN\n    > v = base.binomcoef( NaN, NaN )\n    NaN\n\n",
	"base.binomcoefln": "\nbase.binomcoefln( n, k )\n    Computes the natural logarithm of the binomial coefficient of two integers.\n\n    If `k < 0`, the function returns negative infinity.\n\n    The function returns `NaN` for non-integer `n` or `k`.\n\n    Parameters\n    ----------\n    n: integer\n        First input value.\n\n    k: integer\n        Second input value.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the binomial coefficient.\n\n    Examples\n    --------\n    > var v = base.binomcoefln( 8, 2 )\n    ~3.332\n    > v = base.binomcoefln( 0, 0 )\n    0.0\n    > v = base.binomcoefln( -4, 2 )\n    ~2.302\n    > v = base.binomcoefln( 88, 3 )\n    ~11.606\n    > v = base.binomcoefln( NaN, 3 )\n    NaN\n    > v = base.binomcoefln( 5, NaN )\n    NaN\n    > v = base.binomcoefln( NaN, NaN )\n    NaN\n\n",
	"base.cabs": "\nbase.cabs( re, im )\n    Computes the absolute value of a complex number.\n\n    The absolute value of a complex number is its distance from zero.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    y: number\n        Absolute value.\n\n    Examples\n    --------\n    > var y = base.cabs( 5.0, 3.0 )\n    ~5.83\n\n    See Also\n    --------\n    base.cabs2, base.abs\n",
	"base.cabs2": "\nbase.cabs2( re, im )\n    Computes the squared absolute value of a complex number.\n\n    The absolute value of a complex number is its distance from zero.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    y: number\n        Squared absolute value.\n\n    Examples\n    --------\n    > var y = base.cabs2( 5.0, 3.0 )\n    34.0\n\n    See Also\n    --------\n    base.cabs, base.abs2\n",
	"base.cadd": "\nbase.cadd( [out,] re1, im1, re2, im2 )\n    Adds two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cadd( 5.0, 3.0, -2.0, 1.0 )\n    [ 3.0, 4.0 ]\n\n    // Provide an output array:\n    > var out = new Float32Array( 2 );\n    > y = base.cadd( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float32Array>[ 3.0, 4.0 ]\n    > var bool = ( y === out )\n    true\n\n    See Also\n    --------\n    base.cdiv, base.cmul, base.csub\n",
	"base.cbrt": "\nbase.cbrt( x )\n    Computes the cube root.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cube root.\n\n    Examples\n    --------\n    > var y = base.cbrt( 64.0 )\n    4.0\n    > y = base.cbrt( 27.0 )\n    3.0\n    > y = base.cbrt( 0.0 )\n    0.0\n    > y = base.cbrt( -0.0 )\n    -0.0\n    > y = base.cbrt( -9.0 )\n    ~-2.08\n    > y = base.cbrt( NaN )\n    NaN\n\n",
	"base.cceil": "\nbase.cceil( [out,] re, im )\n    Rounds a complex number toward positive infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var out = base.cceil( 5.5, 3.3 )\n    [ 6.0, 4.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cceil( out, 5.5, 3.3 )\n    <Float64Array>[ 6.0, 4.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cfloor, base.cround\n",
	"base.ccis": "\nbase.ccis( [out,] re, im )\n    Computes the cis function of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.ccis( 0.0, 0.0 )\n    [ 1.0, 0.0 ]\n\n    > var y = base.ccis( 1.0, 0.0 )\n    [ ~0.540, ~0.841 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.ccis( out, 1.0, 0.0 )\n    <Float64Array>[ ~0.540, ~0.841 ]\n    > var bool = ( v === out )\n    true\n\n",
	"base.cdiv": "\nbase.cdiv( [out,] re1, im1, re2, im2 )\n    Divides two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cdiv( -13.0, -1.0, -2.0, 1.0 )\n    [ 5.0, 3.0 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cdiv( out, -13.0, -1.0, -2.0, 1.0 )\n    <Float64Array>[ 5.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cmul, base.csub\n",
	"base.ceil": "\nbase.ceil( x )\n    Rounds a numeric value toward positive infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil( 3.14 )\n    4.0\n    > y = base.ceil( -4.2 )\n    -4.0\n    > y = base.ceil( -4.6 )\n    -4.0\n    > y = base.ceil( 9.5 )\n    10.0\n    > y = base.ceil( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceiln, base.floor, base.round\n",
	"base.ceil10": "\nbase.ceil10( x )\n    Rounds a numeric value to the nearest power of ten toward positive infinity.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil10( 3.14 )\n    10.0\n    > y = base.ceil10( -4.2 )\n    -1.0\n    > y = base.ceil10( -4.6 )\n    -1.0\n    > y = base.ceil10( 9.5 )\n    10.0\n    > y = base.ceil10( 13.0 )\n    100.0\n    > y = base.ceil10( -13.0 )\n    -10.0\n    > y = base.ceil10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.ceil2, base.floor10, base.round10\n",
	"base.ceil2": "\nbase.ceil2( x )\n    Rounds a numeric value to the nearest power of two toward positive infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil2( 3.14 )\n    4.0\n    > y = base.ceil2( -4.2 )\n    -4.0\n    > y = base.ceil2( -4.6 )\n    -4.0\n    > y = base.ceil2( 9.5 )\n    16.0\n    > y = base.ceil2( 13.0 )\n    16.0\n    > y = base.ceil2( -13.0 )\n    -8.0\n    > y = base.ceil2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.ceil10, base.floor2, base.round2\n",
	"base.ceilb": "\nbase.ceilb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward positive\n    infinity.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.ceilb( 3.14159, -4, 10 )\n    3.1416\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.ceilb( 3.14159, 0, 2 )\n    4.0\n\n    // Round to nearest multiple of two toward positive infinity:\n    > y = base.ceilb( 5.0, 1, 2 )\n    6.0\n\n    See Also\n    --------\n    base.ceil, base.ceiln, base.floorb, base.roundb\n",
	"base.ceiln": "\nbase.ceiln( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward positive\n    infinity.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.ceiln( 3.14159, -2 )\n    3.15\n\n    // If `n = 0`, standard round toward positive infinity behavior:\n    > y = base.ceiln( 3.14159, 0 )\n    4.0\n\n    // Round to nearest thousand:\n    > y = base.ceiln( 12368.0, 3 )\n    13000.0\n\n\n    See Also\n    --------\n    base.ceil, base.ceilb, base.floorn, base.roundn\n",
	"base.ceilsd": "\nbase.ceilsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward positive infinity with\n    `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceilsd( 3.14159, 5 )\n    3.1416\n    > y = base.ceilsd( 3.14159, 1 )\n    4.0\n    > y = base.ceilsd( 12368.0, 2 )\n    13000.0\n    > y = base.ceilsd( 0.0313, 2, 2 )\n    0.046875\n\n    See Also\n    --------\n    base.ceil, base.floorsd, base.roundsd, base.truncsd\n",
	"base.cfloor": "\nbase.cfloor( [out,] re, im )\n    Rounds a complex number toward negative infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Rounded components.\n\n    Examples\n    --------\n    > var out = base.cfloor( 5.5, 3.3 )\n    [ 5.0, 3.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cfloor( out, 5.5, 3.3 )\n    <Float64Array>[ 5.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceil, base.cround\n",
	"base.clamp": "\nbase.clamp( v, min, max )\n    Restricts a value to a specified range.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Value to restrict.\n\n    min: number\n        Minimum value.\n\n    max: number\n        Maximum value.\n\n    Returns\n    -------\n    y: number\n        Restricted value.\n\n    Examples\n    --------\n    > var y = base.clamp( 3.14, 0.0, 5.0 )\n    3.14\n    > y = base.clamp( -3.14, 0.0, 5.0 )\n    0.0\n    > y = base.clamp( 3.14, 0.0, 3.0 )\n    3.0\n    > y = base.clamp( -0.0, 0.0, 5.0 )\n    0.0\n    > y = base.clamp( 0.0, -3.14, -0.0 )\n    -0.0\n    > y = base.clamp( NaN, 0.0, 5.0 )\n    NaN\n\n    See Also\n    --------\n    base.wrap\n",
	"base.cinv": "\nbase.cinv( [out,] re, im )\n    Computes the inverse of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cinv( 2.0, 4.0 )\n    [ 0.1, -0.2 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cinv( out, 2.0, 4.0 )\n    <Float64Array>[ 0.1, -0.2 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cdiv\n",
	"base.cmul": "\nbase.cmul( [out,] re1, im1, re2, im2 )\n    Multiplies two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Array containing the real and imaginary components of the result.\n\n    Examples\n    --------\n    > var out = base.cmul( 5.0, 3.0, -2.0, 1.0 )\n    [ -13.0, -1.0 ]\n\n    // Provide an output array:\n    > var out = new Float64Array( 2 );\n    > var v = base.cmul( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float64Array>[ -13.0, -1.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cdiv, base.csub\n",
	"base.continuedFraction": "\nbase.continuedFraction( generator[, options] )\n    Evaluates the continued fraction approximation for the supplied series\n    generator using the modified Lentz algorithm.\n\n    `generator` can be either a function which returns an array with two\n    elements, the `a` and `b` terms of the fraction, or an ES6 Generator object.\n\n    By default, the function computes\n\n             a1\n        ---------------\n        b1 +     a2\n             ----------\n              b2 +   a3\n                  -----\n                  b3 + ...\n\n    To evaluate\n\n        b0 +\t a1\n        ---------------\n        b1 +\t a2\n             ----------\n             b2 +  a3\n                  -----\n                  b3 + ...\n\n    set the `keep` option to `true`.\n\n    Parameters\n    ----------\n    generator: Function\n        Function returning terms of continued fraction expansion.\n\n    options: Object (optional)\n        Options.\n\n    options.maxIter: integer (optional)\n         Maximum number of iterations. Default: `1000000`.\n\n    options.tolerance: number (optional)\n        Further terms are only added as long as the next term is greater than\n        current term times the tolerance. Default: `2.22e-16`.\n\n    options.keep: boolean (optional)\n        Boolean indicating whether to keep the `b0` term in the continued\n        fraction. Default: `false`.\n\n    Returns\n    -------\n    out: number\n       Value of continued fraction.\n\n    Examples\n    --------\n    // Continued fraction for (e-1)^(-1):\n    > function closure() {\n    >    var i = 0;\n    >    return function() {\n    >        i++;\n    >        return [ i, i ];\n    >    };\n    > }\n    > var gen = closure()\n    > var out = base.continuedFraction( gen )\n    ~0.582\n\n    // Using an ES6 generator:\n    > function* generator() {\n    >     var i = 0;\n    >     while ( true ) {\n    >         i++;\n    >         yield [ i, i ];\n    >     }\n    > }\n    > gen = generator();\n    > out = base.continuedFraction( gen )\n    ~0.582\n\n    // Set options:\n    > out = base.continuedFraction( generator(), { 'keep': true } )\n    ~1.718\n    > out = base.continuedFraction( generator(), { 'maxIter': 10 } )\n    ~0.582\n    > out = base.continuedFraction( generator(), { 'tolerance': 1e-1 } )\n    ~0.578\n\n",
	"base.copysign": "\nbase.copysign( x, y )\n    Returns a double-precision floating-point number with the magnitude of `x`\n    and the sign of `y`.\n\n    Parameters\n    ----------\n    x: number\n        Number from which to derive a magnitude.\n\n    y: number\n        Number from which to derive a sign.\n\n    Returns\n    -------\n    z: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var z = base.copysign( -3.14, 10.0 )\n    3.14\n    > z = base.copysign( 3.14, -1.0 )\n    -3.14\n    > z = base.copysign( 1.0, -0.0 )\n    -1.0\n    > z = base.copysign( -3.14, -0.0 )\n    -3.14\n    > z = base.copysign( -0.0, 1.0 )\n    0.0\n\n    See Also\n    --------\n    base.flipsign\n",
	"base.cos": "\nbase.cos( x )\n    Computes the cosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Cosine.\n\n    Examples\n    --------\n    > var y = base.cos( 0.0 )\n    1.0\n    > y = base.cos( PI/4.0 )\n    ~0.707\n    > y = base.cos( -PI/6.0 )\n    ~0.866\n    > y = base.cos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cospi, base.cosm1, base.sin, base.tan\n",
	"base.cosh": "\nbase.cosh( x )\n    Computes the hyperbolic cosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Hyperbolic cosine.\n\n    Examples\n    --------\n    > var y = base.cosh( 0.0 )\n    1.0\n    > y = base.cosh( 2.0 )\n    ~3.762\n    > y = base.cosh( -2.0 )\n    ~3.762\n    > y = base.cosh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sinh, base.tanh\n",
	"base.cosm1": "\nbase.cosm1( x )\n    Computes the cosine of a number minus one.\n\n    This function should be used instead of manually calculating `cos(x)-1` when\n    `x` is near unity.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Cosine minus one.\n\n    Examples\n    --------\n    > var y = base.cosm1( 0.0 )\n    0.0\n    > y = base.cosm1( PI/4.0 )\n    ~-0.291\n    > y = base.cosm1( -PI/6.0 )\n    ~-0.134\n    > y = base.cosm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos\n",
	"base.cospi": "\nbase.cospi( x )\n    Computes the value of `cos(πx)`.\n\n    This function computes `cos(πx)` more accurately than the obvious approach,\n    especially for large `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.cospi( 0.0 )\n    1.0\n    > y = base.cospi( 0.5 )\n    0.0\n    > y = base.cospi( 0.1 )\n    ~0.951\n    > y = base.cospi( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos\n",
	"base.covercos": "\nbase.covercos( x )\n    Computes the coversed cosine.\n\n    The coversed cosine is defined as `1 + sin(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Coversed cosine.\n\n    Examples\n    --------\n    > var y = base.covercos( 3.14 )\n    ~1.0016\n    > y = base.covercos( -4.2 )\n    ~1.8716\n    > y = base.covercos( -4.6 )\n    ~1.9937\n    > y = base.covercos( 9.5 )\n    ~0.9248\n    > y = base.covercos( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.coversin, base.vercos\n",
	"base.coversin": "\nbase.coversin( x )\n    Computes the coversed sine.\n\n    The coversed sine is defined as `1 - sin(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Coversed sine.\n\n    Examples\n    --------\n    > var y = base.coversin( 3.14 )\n    ~0.9984\n    > y = base.coversin( -4.2 )\n    ~0.1284\n    > y = base.coversin( -4.6 )\n    ~0.0063\n    > y = base.coversin( 9.5 )\n    ~1.0752\n    > y = base.coversin( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.covercos, base.versin\n",
	"base.cphase": "\nbase.cphase( re, im )\n    Computes the argument of a complex number in radians.\n\n    The argument of a complex number, also known as the phase, is the angle of\n    the radius extending from the origin to the complex number plotted in the\n    complex plane and the positive real axis.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    phi: number\n        Argument.\n\n    Examples\n    --------\n    > var phi = base.cphase( 5.0, 3.0 )\n    ~0.5404\n\n    See Also\n    --------\n    base.cabs\n",
	"base.cpolar": "\nbase.cpolar( [out,] re, im )\n    Returns the absolute value and phase of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Absolute value and phase, respectively.\n\n    Examples\n    --------\n    > var out = base.cpolar( 5.0, 3.0 )\n    [ ~5.83, ~0.5404 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cpolar( out, 5.0, 3.0 )\n    <Float64Array>[ ~5.83, ~0.5404 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cabs, base.cphase\n",
	"base.cround": "\nbase.cround( [out,] re, im )\n    Rounds a complex number to the nearest integer.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Rounded components.\n\n    Examples\n    --------\n    > var out = base.cround( 5.5, 3.3 )\n    [ 6.0, 3.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cround( out, 5.5, 3.3 )\n    <Float64Array>[ 6.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceil, base.cfloor\n",
	"base.csub": "\nbase.csub( [out,] re1, im1, re2, im2 )\n    Subtracts two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Array containing the real and imaginary components of the result.\n\n    Examples\n    --------\n    > var out = base.csub( 5.0, 3.0, -2.0, 1.0 )\n    [ 7.0, 2.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.csub( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float64Array>[ 7.0, 2.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cdiv, base.cmul\n",
	"base.dasum": "\nbase.dasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.dasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.dasum( N, x1, stride )\n    12.0\n\n\nbase.dasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.dasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n\nbase.dasum.wasm( [options] )\n    Returns a memory managed function to compute the sum of absolute values.\n\n    For an externally defined `Float64Array`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.dasum.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var bytes = wasm.malloc( N * 8 );\n\n    // Create a Float64Array view:\n    > var view = new Float64Array( bytes.buffer, bytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n\n    // Compute the sum of absolute values (passing in the heap buffer):\n    > var s = wasm( N, bytes, 1 )\n    15.0\n\n    // Free the memory:\n    > wasm.free( bytes );\n\n    See Also\n    --------\n    base.daxpy, base.dcopy\n",
	"base.daxpy": "\nbase.daxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy( x.length, alpha, x, 1, y, 1 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > base.daxpy( N, alpha, x, 2, y, -1 )\n    <Float64Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.daxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float64Array>[ 40.0, 33.0, 22.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.wasm( [options] )\n    Returns a memory managed function to multiply `x` by a constant `alpha` and\n    add the result to `y`.\n\n    For externally defined `Float64Arrays`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.daxpy.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var xbytes = wasm.malloc( N * 8 );\n    > var ybytes = wasm.malloc( N * 8 );\n\n    // Create Float64Array views:\n    > var x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );\n    > var y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > x.set( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > y.set( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n\n    // Multiply and add alpha:\n    > var alpha = 5.0;\n    > wasm( x.length, alpha, xbytes, 1, ybytes, 1 );\n    > y\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Free the memory:\n    > wasm.free( xbytes );\n    > wasm.free( ybytes );\n\n    See Also\n    --------\n    base.dasum, base.dcopy\n",
	"base.dcopy": "\nbase.dcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy( x.length, x, 1, y, 1 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy( N, x, -2, y, 1 )\n    <Float64Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.dcopy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dasum, base.daxpy\n",
	"base.deg2rad": "\nbase.deg2rad( x )\n    Converts an angle from degrees to radians.\n\n    Parameters\n    ----------\n    x: number\n        Angle in degrees.\n\n    Returns\n    -------\n    r: number\n        Angle in radians.\n\n    Examples\n    --------\n    > var r = base.deg2rad( 90.0 )\n    ~1.571\n    > r = base.deg2rad( -45.0 )\n    ~-0.785\n    > r = base.deg2rad( NaN )\n    NaN\n\n    See Also\n    --------\n    base.rad2deg\n",
	"base.digamma": "\nbase.digamma( x )\n    Evaluates the digamma function.\n\n    If `x` is `0` or a negative `integer`, the `function` returns `NaN`.\n\n    If provided `NaN`, the `function` returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.digamma( -2.5 )\n    ~1.103\n    > y = base.digamma( 1.0 )\n    ~-0.577\n    > y = base.digamma( 10.0 )\n    ~2.252\n    > y = base.digamma( NaN )\n    NaN\n    > y = base.digamma( -1.0 )\n    NaN\n\n    See Also\n    --------\n    base.trigamma, base.gamma\n",
	"base.diracDelta": "\nbase.diracDelta( x )\n    Evaluates the Dirac delta function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.diracDelta( 3.14 )\n    0.0\n    > y = base.diracDelta( 0.0 )\n    Infinity\n\n    See Also\n    --------\n    base.kroneckerDelta\n",
	"base.epsdiff": "\nbase.epsdiff( x, y[, scale] )\n    Computes the relative difference of two real numbers in units of double-\n    precision floating-point epsilon.\n\n    By default, the function scales the absolute difference by dividing the\n    absolute difference by the maximum absolute value of `x` and `y`. To scale\n    by a different function, specify a scale function name.\n\n    The following `scale` functions are supported:\n\n    - 'max-abs': maximum absolute value of `x` and `y` (default).\n    - 'max': maximum value of `x` and `y`.\n    - 'min-abs': minimum absolute value of `x` and `y`.\n    - 'min': minimum value of `x` and `y`.\n    - 'mean-abs': arithmetic mean of the absolute values of `x` and `y`.\n    - 'mean': arithmetic mean of `x` and `y`.\n    - 'x': `x` (*noncommutative*).\n    - 'y': `y` (*noncommutative*).\n\n    To use a custom scale function, provide a function which accepts two numeric\n    arguments `x` and `y`.\n\n    If computing the relative difference in units of epsilon will result in\n    overflow, the function returns the maximum double-precision floating-point\n    number.\n\n    If the absolute difference of `x` and `y` is `0`, the relative difference is\n    always `0`.\n\n    If `|x| = |y| = infinity`, the function returns `NaN`.\n\n    If `|x| = |-y| = infinity`, the relative difference is `+infinity`.\n\n    If a `scale` function returns `0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    scale: string|Function\n        Scale function. Default: `'max-abs'`.\n\n    Returns\n    -------\n    out: number\n        Relative difference in units of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > var d = base.epsdiff( 12.15, 12.149999999999999 )\n    ~0.658\n    > d = base.epsdiff( 2.4341309458983933, 2.4341309458633909, 'mean-abs' )\n    ~64761.5\n\n    // Custom scale function:\n    > function scale( x, y ) { return ( x > y ) ? y : x; };\n    > d = base.epsdiff( 1.0000000000000002, 1.0000000000000100, scale )\n    ~44\n\n    See Also\n    --------\n    base.absdiff, base.reldiff\n",
	"base.eta": "\nbase.eta( s )\n    Evaluates the Dirichlet eta function as a function of a real variable `s`.\n\n    Parameters\n    ----------\n    s: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.eta( 0.0 )\n    0.5\n    > y = base.eta( -1.0 )\n    0.25\n    > y = base.eta( 1.0 )\n    ~0.6931\n    > y = base.eta( 3.14 )\n    ~0.9096\n    > y = base.eta( NaN )\n    NaN\n\n",
	"base.erf": "\nbase.erf( x )\n    Evaluates the error function.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    As the error function is an odd function (i.e., `erf(-x) == -erf(x)`), if\n    provided `-0`, the function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erf( 2.0 )\n    ~0.9953\n    > y = base.erf( -1.0 )\n    ~-0.8427\n    > y = base.erf( -0.0 )\n    -0.0\n    > y = base.erf( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erfc, base.erfinv, base.erfcinv\n",
	"base.erfc": "\nbase.erfc( x )\n    Evaluates the complementary error function.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfc( 2.0 )\n    ~0.0047\n    > y = base.erfc( -1.0 )\n    ~-1.8427\n    > y = base.erfc( 0.0 )\n    1.0\n    > y = base.erfc( PINF )\n    0.0\n    > y = base.erfc( NINF )\n    2.0\n    > y = base.erfc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfinv, base.erfcinv\n",
	"base.erfcinv": "\nbase.erfcinv( x )\n    Evaluates the inverse complementary error function.\n\n    The domain of `x` is restricted to `[0,2]`. If `x` is outside this interval,\n    the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfcinv( 0.5 )\n    ~0.4769\n    > y = base.erfcinv( 0.8 )\n    ~-0.1791\n    > y = base.erfcinv( 0.0 )\n    Infinity\n    > y = base.erfcinv( 2.0 )\n    -Infinity\n    > y = base.erfcinv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfc, base.erfinv\n",
	"base.erfinv": "\nbase.erfinv( x )\n    Evaluates the inverse error function.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    As the inverse error function is an odd function (i.e., `erfinv(-x) ==\n    -erfinv(x)`), if provided `-0`, the function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfinv( 0.5 )\n    ~0.4769\n    > y = base.erfinv( 0.8 )\n    ~0.9062\n    > y = base.erfinv( 0.0 )\n    0.0\n    > y = base.erfinv( -0.0 )\n    -0.0\n    > y = base.erfinv( -1.0 )\n    -Infinity\n    > y = base.erfinv( 1.0 )\n    Infinity\n    > y = base.erfinv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfc, base.erfcinv\n",
	"base.evalpoly": "\nbase.evalpoly( c, x )\n    Evaluates a polynomial.\n\n    Parameters\n    ----------\n    c: Array<double>\n        Polynomial coefficients sorted in ascending degree.\n\n    x: number\n        Value at which to evaluate the polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated polynomial.\n\n    Examples\n    --------\n    > var arr = [ 3.0, 2.0, 1.0 ];\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = base.evalpoly( arr, 10.0 )\n    123.0\n\n\nbase.evalpoly.factory( c )\n    Returns a function for evaluating a polynomial.\n\n    Parameters\n    ----------\n    c: Array<double>\n        Polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a polynomial.\n\n    Examples\n    --------\n    > var polyval = base.evalpoly.factory( [ 3.0, 2.0, 1.0 ] );\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = polyval( 10.0 )\n    123.0\n\n    // 3*5^0 + 2*5^1 + 1*5^2\n    > v = polyval( 5.0 )\n    38.0\n\n    See Also\n    --------\n    base.evalrational\n",
	"base.evalrational": "\nbase.evalrational( P, Q, x )\n    Evaluates a rational function.\n\n    A rational function `f(x)` is defined as\n\n               P(x)\n        f(x) = ----\n               Q(x)\n\n    where both `P(x)` and `Q(x)` are polynomials in `x`.\n\n    The coefficients for both `P` and `Q` should be sorted in ascending degree.\n\n    For polynomials of different degree, the coefficient array for the lower\n    degree polynomial should be padded with zeros.\n\n    Parameters\n    ----------\n    P: Array<double>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<double>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    x: number\n        Value at which to evaluate the rational function.\n\n    Returns\n    -------\n    out: number\n        Evaluated rational function.\n\n    Examples\n    --------\n    // 2x^3 + 4x^2 - 5x^1 - 6x^0\n    > var P = [ -6.0, -5.0, 4.0, 2.0 ];\n\n    // 0.5x^1 + 3x^0\n    > var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded\n\n    // Evaluate the rational function:\n    > var v = base.evalrational( P, Q, 6.0 )\n    90.0\n\n\nbase.evalrational.factory( P, Q )\n    Returns a function for evaluating a rational function.\n\n    Parameters\n    ----------\n    P: Array<double>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<double>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a rational function.\n\n    Examples\n    --------\n    > var P = [ 20.0, 8.0, 3.0 ];\n    > var Q = [ 10.0, 9.0, 1.0 ];\n    > var rational = base.evalrational.factory( P, Q );\n\n    // (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2):\n    > var v = rational( 10.0 )\n    2.0\n\n    // (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2):\n    > v = rational( 2.0 )\n    1.5\n\n    See Also\n    --------\n    base.evalpoly\n",
	"base.exp": "\nbase.exp( x )\n    Evaluates the natural exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp( 4.0 )\n    ~54.5982\n    > y = base.exp( -9.0 )\n    ~1.234e-4\n    > y = base.exp( 0.0 )\n    1.0\n    > y = base.exp( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp10, base.exp2, base.expm1, base.ln\n",
	"base.exponent": "\nbase.exponent( x )\n    Returns an integer corresponding to the unbiased exponent of a double-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unbiased exponent.\n\n    Examples\n    --------\n    > var exponent = base.exponent( 3.14e-307 )\n    -1019\n    > exponent = base.exponent( -3.14 )\n    1\n    > exponent = base.exponent( 0.0 )\n    0\n    > exponent = base.exponent( NaN )\n    1024\n\n    See Also\n    --------\n    base.exponentf\n",
	"base.exponentf": "\nbase.exponentf( x )\n    Returns an integer corresponding to the unbiased exponent of a single-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unbiased exponent.\n\n    Examples\n    --------\n    > var exponent = base.exponentf( base.float64ToFloat32( 3.14e34 ) )\n    114\n    > exponent = base.exponentf( base.float64ToFloat32( 3.14e-34 ) )\n    -112\n    > exponent = base.exponentf( base.float64ToFloat32( -3.14 ) )\n    1\n    > exponent = base.exponentf( 0.0 )\n    0\n    > exponent = base.exponentf( NaN )\n    128\n\n    See Also\n    --------\n    base.exponent\n",
	"base.exp10": "\nbase.exp10( x )\n    Evaluates the base 10 exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp10( 3.0 )\n    1000\n    > y = base.exp10( -9.0 )\n    1.0e-9\n    > y = base.exp10( 0.0 )\n    1.0\n    > y = base.exp10( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.exp2\n",
	"base.exp2": "\nbase.exp2( x )\n    Evaluates the base 2 exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp2( 3.0 )\n    8.0\n    > y = base.exp2( -9.0 )\n    ~0.002\n    > y = base.exp2( 0.0 )\n    1.0\n    > y = base.exp2( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.exp10\n",
	"base.expm1": "\nbase.expm1( x )\n    Computes `exp(x)-1`, where `exp(x)` is the natural exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.expm1( 0.2 )\n    ~0.221\n    > y = base.expm1( -9.0 )\n    ~-0.999\n    > y = base.expm1( 0.0 )\n    0.0\n    > y = base.expm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp\n",
	"base.factorial": "\nbase.factorial( x )\n    Evaluates the factorial of `x`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Factorial.\n\n    Examples\n    --------\n    > var y = base.factorial( 3.0 )\n    6.0\n    > y = base.factorial( -1.5 )\n    ~-3.545\n    > y = base.factorial( -0.5 )\n    ~1.772\n    > y = base.factorial( 0.5 )\n    ~0.886\n    > y = base.factorial( -10.0 )\n    NaN\n    > y = base.factorial( 171.0 )\n    Infinity\n    > y = base.factorial( NaN )\n    NaN\n\n    See Also\n    --------\n    base.factorialln\n",
	"base.factorialln": "\nbase.factorialln( x )\n    Evaluates the natural logarithm of the factorial of `x`.\n\n    For input values other than negative integers, the function returns\n\n      ln( x! ) = ln( Γ(x+1) )\n\n    where `Γ` is the Gamma function. For negative integers, the function returns\n    `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Natural logarithm of the factorial of `x`.\n\n    Examples\n    --------\n    > var y = base.factorialln( 3.0 )\n    ~1.792\n    > y = base.factorialln( 2.4 )\n    ~1.092\n    > y = base.factorialln( -1.0 )\n    NaN\n    > y = base.factorialln( -1.5 )\n    ~1.266\n    > y = base.factorialln( NaN )\n    NaN\n\n    See Also\n    --------\n    base.factorial\n",
	"base.fallingFactorial": "\nbase.fallingFactorial( x, n )\n    Computes the falling factorial of `x` and `n`.\n\n    If not provided a non-negative integer for `n`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    n: integer\n        Second function parameter.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.fallingFactorial( 0.9, 5 )\n    ~0.644\n    > v = base.fallingFactorial( -9.0, 3 )\n    -990.0\n    > v = base.fallingFactorial( 0.0, 2 )\n    0.0\n    > v = base.fallingFactorial( 3.0, -2 )\n    NaN\n\n    See Also\n    --------\n    base.risingFactorial\n",
	"base.fibonacci": "\nbase.fibonacci( n )\n    Computes the nth Fibonacci number.\n\n    Fibonacci numbers follow the recurrence relation\n\n      F_n = F_{n-1} + F_{n-2}\n\n    with seed values F_0 = 0 and F_1 = 1.\n\n    If `n` is greater than `78`, the function returns `NaN`, as larger Fibonacci\n    numbers cannot be accurately represented due to limitations of double-\n    precision floating-point format.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        Fibonacci number.\n\n    Examples\n    --------\n    > var y = base.fibonacci( 0 )\n    0\n    > y = base.fibonacci( 1 )\n    1\n    > y = base.fibonacci( 2 )\n    1\n    > y = base.fibonacci( 3 )\n    2\n    > y = base.fibonacci( 4 )\n    3\n    > y = base.fibonacci( 79 )\n    NaN\n    > y = base.fibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.binet, base.fibonacciIndex, base.lucas, base.negafibonacci\n",
	"base.fibonacciIndex": "\nbase.fibonacciIndex( F )\n    Computes the Fibonacci number index.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `F <= 1` or `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    F: integer\n        Fibonacci number.\n\n    Returns\n    -------\n    n: number\n        Fibonacci number index.\n\n    Examples\n    --------\n    > var n = base.fibonacciIndex( 2 )\n    3\n    > n = base.fibonacciIndex( 3 )\n    4\n    > n = base.fibonacciIndex( 5 )\n    5\n    > n = base.fibonacciIndex( NaN )\n    NaN\n    > n = base.fibonacciIndex( 1 )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci\n",
	"base.fibpoly": "\nbase.fibpoly( n, x )\n    Evaluates a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    x: number\n        Value at which to evaluate the Fibonacci polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated Fibonacci polynomial.\n\n    Examples\n    --------\n    // 2^4 + 3*2^2 + 1\n    > var v = base.fibpoly( 5, 2.0 )\n    29.0\n\n\nbase.fibpoly.factory( n )\n    Returns a function for evaluating a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Fibonacci polynomial.\n\n    Examples\n    --------\n    > var polyval = base.fibpoly.factory( 5 );\n\n    // 1^4 + 3*1^2 + 1\n    > var v = polyval( 1.0 )\n    5.0\n\n    // 2^4 + 3*2^2 + 1\n    > v = polyval( 2.0 )\n    29.0\n\n    See Also\n    --------\n    base.evalpoly, base.lucaspoly\n",
	"base.flipsign": "\nbase.flipsign( x, y )\n    Returns a double-precision floating-point number with the magnitude of `x`\n    and the sign of `x*y`.\n\n    The function only returns `-x` when `y` is a negative number.\n\n    According to the IEEE 754 standard, a `NaN` has a biased exponent equal to\n    `2047`, a significand greater than `0`, and a sign bit equal to either `1`\n    or `0`. In which case, `NaN` may not correspond to just one but many binary\n    representations. Accordingly, care should be taken to ensure that `y` is not\n    `NaN`, else behavior may be indeterminate.\n\n    Parameters\n    ----------\n    x: number\n        Number from which to derive a magnitude.\n\n    y: number\n        Number from which to derive a sign.\n\n    Returns\n    -------\n    z: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var z = base.flipsign( -3.14, 10.0 )\n    -3.14\n    > z = base.flipsign( -3.14, -1.0 )\n    3.14\n    > z = base.flipsign( 1.0, -0.0 )\n    -1.0\n    > z = base.flipsign( -3.14, -0.0 )\n    3.14\n    > z = base.flipsign( -0.0, 1.0 )\n    -0.0\n    > z = base.flipsign( 0.0, -1.0 )\n    -0.0\n\n    See Also\n    --------\n    base.copysign\n",
	"base.floor": "\nbase.floor( x )\n    Rounds a numeric value toward negative infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor( 3.14 )\n    3.0\n    > y = base.floor( -4.2 )\n    -5.0\n    > y = base.floor( -4.6 )\n    -5.0\n    > y = base.floor( 9.5 )\n    9.0\n    > y = base.floor( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.round\n",
	"base.floor10": "\nbase.floor10( x )\n    Rounds a numeric value to the nearest power of ten toward negative infinity.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor10( 3.14 )\n    1.0\n    > y = base.floor10( -4.2 )\n    -10.0\n    > y = base.floor10( -4.6 )\n    -10.0\n    > y = base.floor10( 9.5 )\n    1.0\n    > y = base.floor10( 13.0 )\n    10.0\n    > y = base.floor10( -13.0 )\n    -100.0\n    > y = base.floor10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor, base.floor2, base.round10\n",
	"base.floor2": "\nbase.floor2( x )\n    Rounds a numeric value to the nearest power of two toward negative infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor2( 3.14 )\n    2.0\n    > y = base.floor2( -4.2 )\n    -8.0\n    > y = base.floor2( -4.6 )\n    -8.0\n    > y = base.floor2( 9.5 )\n    8.0\n    > y = base.floor2( 13.0 )\n    8.0\n    > y = base.floor2( -13.0 )\n    -16.0\n    > y = base.floor2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor, base.floor10, base.round2\n",
	"base.floorb": "\nbase.floorb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward negative\n    infinity.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.floorb( 3.14159, -4, 10 )\n    3.1415\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.floorb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two toward negative infinity:\n    > y = base.floorb( 5.0, 1, 2 )\n    4.0\n\n    See Also\n    --------\n    base.ceilb, base.floor, base.floorn, base.roundb\n",
	"base.floorn": "\nbase.floorn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward negative\n    infinity.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.floorn( 3.14159, -4 )\n    3.1415\n\n    // If `n = 0`, standard round toward negative infinity behavior:\n    > y = base.floorn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.floorn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floor, base.floorb, base.roundn\n",
	"base.floorsd": "\nbase.floorsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward negative infinity with\n    `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floorsd( 3.14159, 5 )\n    3.1415\n    > y = base.floorsd( 3.14159, 1 )\n    3.0\n    > y = base.floorsd( 12368.0, 2 )\n    12000.0\n    > y = base.floorsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floor, base.roundsd, base.truncsd\n",
	"base.float32ToInt32": "\nbase.float32ToInt32( x )\n    Converts a single-precision floating-point number to a signed 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float32ToInt32( base.float64ToFloat32( 4294967295.0 ) )\n    -1\n    > y = base.float32ToInt32( base.float64ToFloat32( 3.14 ) )\n    3\n    > y = base.float32ToInt32( base.float64ToFloat32( -3.14 ) )\n    -3\n    > y = base.float32ToInt32( base.float64ToFloat32( NaN ) )\n    0\n    > y = base.float32ToInt32( FLOAT32_PINF )\n    0\n    > y = base.float32ToInt32( FLOAT32_NINF )\n    0\n\n    See Also\n    --------\n    base.float32ToUint32",
	"base.float32ToUint32": "\nbase.float32ToUint32( x )\n    Converts a single-precision floating-point number to a unsigned 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: float\n        single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float32ToUint32( base.float64ToFloat32( 4294967297.0 ) )\n    1\n    > y = base.float32ToUint32( base.float64ToFloat32( 3.14 ) )\n    3\n    > y = base.float32ToUint32( base.float64ToFloat32( -3.14 ) )\n    4294967293\n    > y = base.float32ToUint32( base.float64ToFloat32( NaN ) )\n    0\n    > y = base.float32ToUint32( FLOAT32_PINF )\n    0\n    > y = base.float32ToUint32( FLOAT32_NINF )\n    0\n\n    See Also\n    --------\n    base.float32ToInt32",
	"base.float64ToFloat32": "\nbase.float64ToFloat32( x )\n    Converts a double-precision floating-point number to the nearest single-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: float\n        Nearest single-precision floating-point number.\n\n    Examples\n    --------\n    > var y = base.float64ToFloat32( 1.337 )\n    1.3370000123977661\n",
	"base.float64ToInt32": "\nbase.float64ToInt32( x )\n    Converts a double-precision floating-point number to a signed 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float64ToInt32( 4294967295.0 )\n    -1\n    > y = base.float64ToInt32( 3.14 )\n    3\n    > y = base.float64ToInt32( -3.14 )\n    -3\n    > y = base.float64ToInt32( NaN )\n    0\n    > y = base.float64ToInt32( PINF )\n    0\n    > y = base.float64ToInt32( NINF )\n    0\n\n    See Also\n    --------\n    base.float64ToUint32",
	"base.float64ToUint32": "\nbase.float64ToUint32( x )\n    Converts a double-precision floating-point number to a unsigned 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float64ToUint32( 4294967297.0 )\n    1\n    > y = base.float64ToUint32( 3.14 )\n    3\n    > y = base.float64ToUint32( -3.14 )\n    4294967293\n    > y = base.float64ToUint32( NaN )\n    0\n    > y = base.float64ToUint32( PINF )\n    0\n    > y = base.float64ToUint32( NINF )\n    0\n\n    See Also\n    --------\n    base.float64ToInt32",
	"base.fresnel": "\nbase.fresnel( [out,] x )\n    Computes the Fresnel integrals S(x) and C(x).\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Destination array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        S(x) and C(x).\n\n    Examples\n    --------\n    > var y = base.fresnel( 0.0 )\n    [ ~0.0, ~0.0 ]\n    > y = base.fresnel( 1.0 )\n    [ ~0.438, ~0.780 ]\n    > y = base.fresnel( PINF )\n    [ ~0.5, ~0.5 ]\n    > y = base.fresnel( NINF )\n    [ ~-0.5, ~-0.5 ]\n    > y = base.fresnel( NaN )\n    [ NaN, NaN ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.fresnel( out, 0.0 )\n    <Float64Array>[ ~0.0, ~0.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.fresnelc, base.fresnels\n",
	"base.fresnelc": "\nbase.fresnelc( x )\n    Computes the Fresnel integral C(x).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        C(x).\n\n    Examples\n    --------\n    > var y = base.fresnelc( 0.0 )\n    ~0.0\n    > y = base.fresnelc( 1.0 )\n    ~0.780\n    > y = base.fresnelc( PINF )\n    ~0.5\n    > y = base.fresnelc( NINF )\n    ~-0.5\n    > y = base.fresnelc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fresnel, base.fresnels\n",
	"base.fresnels": "\nbase.fresnels( x )\n    Computes the Fresnel integral S(x).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        S(x).\n\n    Examples\n    --------\n    > var y = base.fresnels( 0.0 )\n    ~0.0\n    > y = base.fresnels( 1.0 )\n    ~1.0\n    > y = base.fresnels( PINF )\n    ~0.5\n    > y = base.fresnels( NINF )\n    ~-0.5\n    > y = base.fresnels( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fresnel, base.fresnelc\n",
	"base.frexp": "\nbase.frexp( [out,] x )\n    Splits a double-precision floating-point number into a normalized fraction\n    and an integer power of two.\n\n    The first element of the returned array is the normalized fraction and the\n    second is the exponent. The normalized fraction and exponent satisfy the\n    relation\n\n      x = frac * 2^exp\n\n    If provided positive or negative zero, `NaN`, or positive or negative\n    infinity, the function returns a two-element array containing the input\n    value and an exponent equal to zero.\n\n    For all other numeric input values, the absolute value of the normalized\n    fraction resides on the interval [0.5,1).\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        A normalized fraction and an exponent.\n\n    Examples\n    --------\n    > var out = base.frexp( 4.0 )\n    [ 0.5, 3 ]\n    > out = base.frexp( 0.0 )\n    [ 0.0, 0 ]\n    > out = base.frexp( -0.0 )\n    [ -0.0, 0 ]\n    > out = base.frexp( NaN )\n    [ NaN, 0 ]\n    > out = base.frexp( PINF )\n    [ Infinity, 0 ]\n    > out = base.frexp( NINF )\n    [ -Infinity, 0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var y = base.frexp( 4.0 )\n    <Float64Array>[ 0.5, 3 ]\n    > var bool = ( y === out )\n    true\n\n    See Also\n    --------\n    base.ldexp\n",
	"base.fromBinaryString": "\nbase.fromBinaryString( bstr )\n    Creates a double-precision floating-point number from a literal bit\n    representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var bstr;\n    > bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n    > var val = base.fromBinaryString( bstr )\n    4.0\n    > bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n    > val = base.fromBinaryString( bstr )\n    3.141592653589793\n    > bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n    > val = base.fromBinaryString( bstr )\n    -1.0e308\n\n    // The function handles subnormals:\n    > bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n    > val = base.fromBinaryString( bstr )\n    -3.14e-320\n    > bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n    > val = base.fromBinaryString( bstr )\n    5.0e-324\n\n    // The function handles special values:\n    > bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    0.0\n    > bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    -0.0\n    > bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    NaN\n    > bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    Infinity\n    > bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    -Infinity\n\n    See Also\n    --------\n    base.fromBinaryStringf, base.toBinaryString\n",
	"base.fromBinaryStringf": "\nbase.fromBinaryStringf( bstr )\n    Creates a single-precision floating-point number from an IEEE 754 literal\n    bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: float\n        Single-precision floating-point number.\n\n    Examples\n    --------\n    > var bstr = '01000000100000000000000000000000';\n    > var val = base.fromBinaryStringf( bstr )\n    4.0\n    > bstr = '01000000010010010000111111011011';\n    > val = base.fromBinaryStringf( bstr )\n    ~3.14\n    > bstr = '11111111011011000011101000110011';\n    > val = base.fromBinaryStringf( bstr )\n    ~-3.14e+38\n\n    // The function handles subnormals:\n    > bstr = '10000000000000000000000000010110';\n    > val = base.fromBinaryStringf( bstr )\n    ~-3.08e-44\n    > bstr = '00000000000000000000000000000001';\n    > val = base.fromBinaryStringf( bstr )\n    ~1.40e-45\n\n    // The function handles special values:\n    > bstr = '00000000000000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    0.0\n    > bstr = '10000000000000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    -0.0\n    > bstr = '01111111110000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    NaN\n    > bstr = '01111111100000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    Infinity\n    > bstr = '11111111100000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    -Infinity\n\n    See Also\n    --------\n    base.toBinaryStringf, base.fromBinaryString\n",
	"base.fromBinaryStringUint16": "\nbase.fromBinaryStringUint16( bstr )\n    Creates an unsigned 16-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 16-bit integer.\n\n    Examples\n    --------\n    > var bstr = '0101010101010101';\n    > var val = base.fromBinaryStringUint16( bstr )\n    21845\n    > bstr = '0000000000000000';\n    > val = base.fromBinaryStringUint16( bstr )\n    0\n    > bstr = '0000000000000010';\n    > val = base.fromBinaryStringUint16( bstr )\n    2\n    > bstr = '1111111111111111';\n    > val = base.fromBinaryStringUint16( bstr )\n    65535\n\n    See Also\n    --------\n    base.toBinaryStringUint16, base.fromBinaryStringUint32, base.fromBinaryStringUint8\n",
	"base.fromBinaryStringUint32": "\nbase.fromBinaryStringUint32( bstr )\n    Creates an unsigned 32-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var bstr = '01010101010101010101010101010101';\n    > var val = base.fromBinaryStringUint32( bstr )\n    1431655765\n    > bstr = '00000000000000000000000000000000';\n    > val = base.fromBinaryStringUint32( bstr )\n    0\n    > bstr = '00000000000000000000000000000010';\n    > val = base.fromBinaryStringUint32( bstr )\n    2\n    > bstr = '11111111111111111111111111111111';\n    > val = base.fromBinaryStringUint32( bstr )\n    4294967295\n\n    See Also\n    --------\n    base.fromBinaryStringUint16, base.toBinaryStringUint32, base.fromBinaryStringUint8\n",
	"base.fromBinaryStringUint8": "\nbase.fromBinaryStringUint8( bstr )\n    Creates an unsigned 8-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 8-bit integer.\n\n    Examples\n    --------\n    > var bstr = '01010101';\n    > var val = base.fromBinaryStringUint8( bstr )\n    85\n    > bstr = '00000000';\n    > val = base.fromBinaryStringUint8( bstr )\n    0\n    > bstr = '00000010';\n    > val = base.fromBinaryStringUint8( bstr )\n    2\n    > bstr = '11111111';\n    > val = base.fromBinaryStringUint8( bstr )\n    255\n\n    See Also\n    --------\n    base.fromBinaryStringUint16, base.fromBinaryStringUint32, base.toBinaryStringUint8\n",
	"base.fromWordf": "\nbase.fromWordf( x )\n    Creates a single-precision floating-point number from an unsigned integer\n    corresponding to an IEEE 754 binary representation.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned integer.\n\n    Returns\n    -------\n    out: float\n        Single-precision floating-point number.\n\n    Examples\n    --------\n    > var word = 1068180177; // => 0 01111111 01010110010001011010001\n    > var f32 = base.fromWordf( word ) // when printed, promoted to float64\n    1.3370000123977661\n\n    See Also\n    --------\n    base.fromWords\n",
	"base.fromWords": "\nbase.fromWords( high, low )\n    Creates a double-precision floating-point number from a higher order word\n    (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n\n    Parameters\n    ----------\n    high: integer\n        Higher order word (unsigned 32-bit integer).\n\n    low: integer\n        Lower order word (unsigned 32-bit integer).\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var v = base.fromWords( 1774486211, 2479577218 )\n    3.14e201\n    > v = base.fromWords( 3221823995, 1413754136 )\n    3.141592653589793\n    > v = base.fromWords( 0, 0 )\n    0.0\n    > v = base.fromWords( 2147483648, 0 )\n    -0.0\n    > v = base.fromWords( 2146959360, 0 )\n    NaN\n    > v = base.fromWords( 2146435072, 0 )\n    Infinity\n    > v = base.fromWords( 4293918720, 0 )\n    -Infinity\n\n    See Also\n    --------\n    base.fromWordf\n",
	"base.gamma": "\nbase.gamma( x )\n    Evaluates the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gamma( 4.0 )\n    6.0\n    > y = base.gamma( -1.5 )\n    ~2.363\n    > y = base.gamma( -0.5 )\n    ~-3.545\n    > y = base.gamma( 0.5 )\n    ~1.772\n    > y = base.gamma( 0.0 )\n    Infinity\n    > y = base.gamma( -0.0 )\n    -Infinity\n    > y = base.gamma( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma1pm1, base.gammainc, base.gammaincinv, base.gammaln\n",
	"base.gamma1pm1": "\nbase.gamma1pm1( x )\n    Computes `gamma(x+1) - 1` without cancellation errors, where `gamma(x)` is\n    the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gamma1pm1( 0.2 )\n    ~-0.082\n    > y = base.gamma1pm1( -6.7 )\n    ~-0.991\n    > y = base.gamma1pm1( 0.0 )\n    0.0\n    > y = base.gamma1pm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammainc, base.gammaincinv, base.gammaln\n",
	"base.gammaDeltaRatio": "\nbase.gammaDeltaRatio( z, delta )\n    Computes the ratio of two gamma functions.\n\n    The ratio is defined as: Γ(z) / Γ(z+Δ).\n\n    Parameters\n    ----------\n    z: number\n        First gamma parameter.\n\n    delta: number\n        Difference.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammaDeltaRatio( 2.0, 3.0 )\n    ~0.042\n    > y = base.gammaDeltaRatio( 4.0, 0.5 )\n    2.0\n    > y = base.gammaDeltaRatio( 100.0, 0.0 )\n    1.0\n    > y = base.gammaDeltaRatio( NaN, 3.0 )\n    NaN\n    > y = base.gammaDeltaRatio( 5.0, NaN )\n    NaN\n    > y = base.gammaDeltaRatio( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma\n",
	"base.gammainc": "\nbase.gammainc( x, s[, regularized[, upper]] )\n    Computes the regularized incomplete gamma function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete gamma functions, respectively.\n\n    If provided `x < 0` or `s <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    s: number\n        Second function parameter.\n\n    regularized: boolean (optional)\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete gamma function. Default: `true`.\n\n    upper: boolean (optional)\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete gamma function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammainc( 6.0, 2.0 )\n    ~0.9826\n    > y = base.gammainc( 1.0, 2.0, true, true )\n    ~0.7358\n    > y = base.gammainc( 7.0, 5.0 )\n    ~0.8270\n    > y = base.gammainc( 7.0, 5.0, false )\n    ~19.8482\n    > y = base.gammainc( NaN, 2.0 )\n    NaN\n    > y = base.gammainc( 6.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gamma1pm1, base.gammaincinv, base.gammaln\n",
	"base.gammaincinv": "\nbase.gammaincinv( p, a[, upper] )\n    Computes the inverse of the lower incomplete gamma function.\n\n    In contrast to a more commonly used definition, the first argument is the\n    probability `p` and the second argument is the scale factor `a`.\n\n    By default, the function inverts the lower regularized incomplete gamma\n    function, `P(x,a)`. To invert the upper function `Q(x,a)`, set the `upper`\n    argument to `true`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Probability.\n\n    a: number\n        Scale parameter.\n\n    upper: boolean (optional)\n        Boolean indicating if the function should invert the upper tail of the\n        incomplete gamma function; i.e., compute `xr` such that `Q(a,xr) = p`.\n        Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammaincinv( 0.5, 2.0 )\n    ~1.678\n    > y = base.gammaincinv( 0.1, 10.0 )\n    ~6.221\n    > y = base.gammaincinv( 0.75, 3.0 )\n    ~3.92\n    > y = base.gammaincinv( 0.75, 3.0, true )\n    ~1.727\n    > y = base.gammaincinv( 0.75, NaN )\n    NaN\n    > y = base.gammaincinv( NaN, 3.0 )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gamma1pm1, base.gammainc, base.gammaln\n",
	"base.gammaLanczosSum": "\nbase.gammaLanczosSum( x )\n    Calculates the Lanczos sum for the approximation of the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Lanczos sum.\n\n    Examples\n    --------\n    > var y = base.gammaLanczosSum( 4.0 )\n    ~950.366\n    > y = base.gammaLanczosSum( -1.5 )\n    ~1373366.245\n    > y = base.gammaLanczosSum( -0.5 )\n    ~-699841.735\n    > y = base.gammaLanczosSum( 0.5 )\n    ~96074.186\n    > y = base.gammaLanczosSum( 0.0 )\n    Infinity\n    > y = base.gammaLanczosSum( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammaLanczosSumExpGScaled\n",
	"base.gammaLanczosSumExpGScaled": "\nbase.gammaLanczosSumExpGScaled( x )\n    Calculates the scaled Lanczos sum for the approximation of the gamma\n    function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Scaled Lanczos sum.\n\n    Examples\n    --------\n    > var y = base.gammaLanczosSumExpGScaled( 4.0 )\n    ~0.018\n    > y = base.gammaLanczosSumExpGScaled( -1.5 )\n    ~25.337\n    > y = base.gammaLanczosSumExpGScaled( -0.5 )\n    ~-12.911\n    > y = base.gammaLanczosSumExpGScaled( 0.5 )\n    ~1.772\n    > y = base.gammaLanczosSumExpGScaled( 0.0 )\n    Infinity\n    > y = base.gammaLanczosSumExpGScaled( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammaLanczosSum\n",
	"base.gammaln": "\nbase.gammaln( x )\n    Evaluates the natural logarithm of the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Natural logarithm of the gamma function.\n\n    Examples\n    --------\n    > var y = base.gammaln( 1.0 )\n    0.0\n    > y = base.gammaln( 2.0 )\n    0.0\n    > y = base.gammaln( 4.0 )\n    ~1.792\n    > y = base.gammaln( -0.5 )\n    ~1.266\n    > y = base.gammaln( 0.5 )\n    ~0.572\n    > y = base.gammaln( 0.0 )\n    Infinity\n    > y = base.gammaln( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammainc, base.gammaincinv\n",
	"base.gasum": "\nbase.gasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.gasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.gasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.gasum( N, x1, stride )\n    12.0\n\n\nbase.gasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.gasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n    > sum = base.gasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum, base.sasum\n",
	"base.gaxpy": "\nbase.gaxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.gaxpy( x.length, alpha, x, 1, y, 1 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.gaxpy( N, alpha, x, 2, y, -1 )\n    [ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.gaxpy( N, 5.0, x1, -2, y1, 1 )\n    [ 40.0, 33.0, 22.0 ]\n    > y0\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.gaxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gaxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy, base.saxpy\n",
	"base.gcd": "\nbase.gcd( a, b )\n    Computes the greatest common divisor (gcd).\n\n    If both `a` and `b` are `0`, the function returns `0`.\n\n    Both `a` and `b` must have integer values; otherwise, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        First integer.\n\n    b: integer\n        Second integer.\n\n    Returns\n    -------\n    out: integer\n        Greatest common divisor.\n\n    Examples\n    --------\n    > var v = base.gcd( 48, 18 )\n    6\n\n    See Also\n    --------\n    base.lcm\n",
	"base.gcopy": "\nbase.gcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.gcopy( x.length, x, 1, y, 1 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gcopy( N, x, -2, y, 1 )\n    [ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.gcopy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.gcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n",
	"base.getHighWord": "\nbase.getHighWord( x )\n    Returns an unsigned 32-bit integer corresponding to the more significant 32\n    bits of a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: integer\n        Higher order word (unsigned 32-bit integer).\n\n    Examples\n    --------\n    > var w = base.getHighWord( 3.14e201 )\n    1774486211\n\n    See Also\n    --------\n    base.getLowWord, base.setHighWord\n",
	"base.getLowWord": "\nbase.getLowWord( x )\n    Returns an unsigned 32-bit integer corresponding to the less significant 32\n    bits of a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: integer\n        Lower order word (unsigned 32-bit integer).\n\n    Examples\n    --------\n    > var w = base.getLowWord( 3.14e201 )\n    2479577218\n\n    See Also\n    --------\n    base.getHighWord, base.setHighWord\n",
	"base.hacovercos": "\nbase.hacovercos( x )\n    Computes the half-value coversed cosine.\n\n    The half-value coversed cosine is defined as `(1 + sin(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value coversed cosine.\n\n    Examples\n    --------\n    > var y = base.hacovercos( 3.14 )\n    ~0.5008\n    > y = base.hacovercos( -4.2 )\n    ~0.9358\n    > y = base.hacovercos( -4.6 )\n    ~0.9968\n    > y = base.hacovercos( 9.5 )\n    ~0.4624\n    > y = base.hacovercos( -0.0 )\n    0.5\n\n    See Also\n    --------\n    base.hacoversin, base.havercos\n",
	"base.hacoversin": "\nbase.hacoversin( x )\n    Computes the half-value coversed sine.\n\n    The half-value coversed sine is defined as `(1 - sin(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value coversed sine.\n\n    Examples\n    --------\n    > var y = base.hacoversin( 3.14 )\n    ~0.4992\n    > y = base.hacoversin( -4.2 )\n    ~0.0642\n    > y = base.hacoversin( -4.6 )\n    ~0.0032\n    > y = base.hacoversin( 9.5 )\n    ~0.4624\n    > y = base.hacoversin( -0.0 )\n    0.5\n\n    See Also\n    --------\n    base.hacovercos, base.haversin\n",
	"base.havercos": "\nbase.havercos( x )\n    Computes the half-value versed cosine.\n\n    The half-value versed cosine is defined as `(1 + cos(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value versed cosine.\n\n    Examples\n    --------\n    > var y = base.havercos( 3.14 )\n    ~0.0\n    > y = base.havercos( -4.2 )\n    ~0.2549\n    > y = base.havercos( -4.6 )\n    ~0.4439\n    > y = base.havercos( 9.5 )\n    ~0.0014\n    > y = base.havercos( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.haversin, base.vercos\n",
	"base.haversin": "\nbase.haversin( x )\n    Computes the half-value versed sine.\n\n    The half-value versed sine is defined as `(1 - cos(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value versed sine.\n\n    Examples\n    --------\n    > var y = base.haversin( 3.14 )\n    ~1.0\n    > y = base.haversin( -4.2 )\n    ~0.7451\n    > y = base.haversin( -4.6 )\n    ~0.5561\n    > y = base.haversin( 9.5 )\n    ~0.9986\n    > y = base.haversin( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.havercos, base.versin\n",
	"base.heaviside": "\nbase.heaviside( x[, continuity] )\n    Evaluates the Heaviside function.\n\n    The `continuity` parameter may be one of the following:\n\n    - 'half-maximum': if `x == 0`, the function returns `0.5`.\n    - 'left-continuous': if `x == 0`, the function returns `0`.\n    - 'right-continuous': if `x == 0`, the function returns `1`.\n\n    By default, if `x == 0`, the function returns `NaN` (i.e., the function is\n    discontinuous).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    continuity: string (optional)\n        Specifies how to handle `x == 0`. By default, if `x == 0`, the function\n        returns `NaN`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.heaviside( 3.14 )\n    1.0\n    > y = base.heaviside( -3.14 )\n    0.0\n    > y = base.heaviside( 0.0 )\n    NaN\n    > y = base.heaviside( 0.0, 'half-maximum' )\n    0.5\n    > y = base.heaviside( 0.0, 'left-continuous' )\n    0.0\n    > y = base.heaviside( 0.0, 'right-continuous' )\n    1.0\n\n    See Also\n    --------\n    base.ramp\n",
	"base.hypot": "\nbase.hypot( x, y )\n    Computes the hypotenuse avoiding overflow and underflow.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = base.hypot( -5.0, 12.0 )\n    13.0\n    > h = base.hypot( NaN, 12.0 )\n    NaN\n    > h = base.hypot( -0.0, -0.0 )\n    0.0\n\n",
	"base.int32ToUint32": "\nbase.int32ToUint32( x )\n    Converts a signed 32-bit integer to an unsigned 32-bit integer.\n\n    Parameters\n    ----------\n    x: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.int32ToUint32( base.float64ToInt32( -32 ) )\n    4294967264\n    > y = base.int32ToUint32( base.float64ToInt32( 3 ) )\n    3\n\n    See Also\n    --------\n    base.uint32ToInt32\n",
	"base.inv": "\nbase.inv( x )\n    Computes the multiplicative inverse of `x`.\n\n    The multiplicative inverse is defined as `1/x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Multiplicative inverse.\n\n    Examples\n    --------\n    > var y = base.inv( -1.0 )\n    -1.0\n    > y = base.inv( 2.0 )\n    0.5\n    > y = base.inv( 0.0 )\n    Infinity\n    > y = base.inv( -0.0 )\n    -Infinity\n    > y = base.inv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow\n",
	"base.isEven": "\nbase.isEven( x )\n    Tests if a finite numeric value is an even number.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an even number.\n\n    Examples\n    --------\n    > var bool = base.isEven( 5.0 )\n    false\n    > bool = base.isEven( -2.0 )\n    true\n    > bool = base.isEven( 0.0 )\n    true\n    > bool = base.isEven( NaN )\n    false\n\n    See Also\n    --------\n    base.isOdd\n",
	"base.isEvenInt32": "\nbase.isEvenInt32( x )\n    Tests if a 32-bit integer is even.\n\n    Parameters\n    ----------\n    x: integer\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an even number.\n\n    Examples\n    --------\n    > var bool = base.isEvenInt32( 5 )\n    false\n    > bool = base.isEvenInt32( -2 )\n    true\n    > bool = base.isEvenInt32( 0 )\n    true\n\n    See Also\n    --------\n    base.isEven, base.isOddInt32\n",
	"base.isFinite": "\nbase.isFinite( x )\n    Tests if a numeric value is finite.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is finite.\n\n    Examples\n    --------\n    > var bool = base.isFinite( 5.0 )\n    true\n    > bool = base.isFinite( -2.0e64 )\n    true\n    > bool = base.isFinite( PINF )\n    false\n    > bool = base.isFinite( NINF )\n    false\n\n    See Also\n    --------\n    base.isInfinite\n",
	"base.isInfinite": "\nbase.isInfinite( x )\n    Tests if a numeric value is infinite.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is infinite.\n\n    Examples\n    --------\n    > var bool = base.isInfinite( PINF )\n    true\n    > bool = base.isInfinite( NINF )\n    true\n    > bool = base.isInfinite( 5.0 )\n    false\n    > bool = base.isInfinite( NaN )\n    false\n\n    See Also\n    --------\n    base.isFinite\n",
	"base.isInteger": "\nbase.isInteger( x )\n    Tests if a finite double-precision floating-point number is an integer.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an integer.\n\n    Examples\n    --------\n    > var bool = base.isInteger( 1.0 )\n    true\n    > bool = base.isInteger( 3.14 )\n    false\n\n",
	"base.isnan": "\nbase.isnan( x )\n     Tests if a numeric value is `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is `NaN`.\n\n    Examples\n    --------\n    > var bool = base.isnan( NaN )\n    true\n    > bool = base.isnan( 7.0 )\n    false\n\n",
	"base.isNegativeInteger": "\nbase.isNegativeInteger( x )\n    Tests if a finite double-precision floating-point number is a negative\n    integer.\n\n    The function assumes a finite number. If provided negative infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a negative integer.\n\n    Examples\n    --------\n    > var bool = base.isNegativeInteger( -1.0 )\n    true\n    > bool = base.isNegativeInteger( 0.0 )\n    false\n    > bool = base.isNegativeInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNonNegativeInteger, base.isNonPositiveInteger, base.isPositiveInteger\n",
	"base.isNegativeZero": "\nbase.isNegativeZero( x )\n    Tests if a numeric value is negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is negative zero.\n\n    Examples\n    --------\n    > var bool = base.isNegativeZero( -0.0 )\n    true\n    > bool = base.isNegativeZero( 0.0 )\n    false\n\n    See Also\n    --------\n    base.isPositiveZero\n",
	"base.isNonNegativeInteger": "\nbase.isNonNegativeInteger( x )\n    Tests if a finite double-precision floating-point number is a nonnegative\n    integer.\n\n    The function assumes a finite number. If provided positive infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    The function does not distinguish between positive and negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = base.isNonNegativeInteger( 1.0 )\n    true\n    > bool = base.isNonNegativeInteger( 0.0 )\n    true\n    > bool = base.isNonNegativeInteger( -10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonPositiveInteger, base.isPositiveInteger\n",
	"base.isNonPositiveInteger": "\nbase.isNonPositiveInteger( x )\n    Tests if a finite double-precision floating-point number is a nonpositive\n    integer.\n\n    The function assumes a finite number. If provided negative infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    The function does not distinguish between positive and negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = base.isNonPositiveInteger( -1.0 )\n    true\n    > bool = base.isNonPositiveInteger( 0.0 )\n    true\n    > bool = base.isNonPositiveInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonNegativeInteger, base.isPositiveInteger\n",
	"base.isOdd": "\nbase.isOdd( x )\n    Tests if a finite numeric value is an odd number.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an odd number.\n\n    Examples\n    --------\n    > var bool = base.isOdd( 5.0 )\n    true\n    > bool = base.isOdd( -2.0 )\n    false\n    > bool = base.isOdd( 0.0 )\n    false\n    > bool = base.isOdd( NaN )\n    false\n\n    See Also\n    --------\n    base.isEven\n",
	"base.isOddInt32": "\nbase.isOddInt32( x )\n    Tests if a 32-bit integer is odd.\n\n    Parameters\n    ----------\n    x: integer\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an odd number.\n\n    Examples\n    --------\n    > var bool = base.isOddInt32( 5 )\n    true\n    > bool = base.isOddInt32( -2 )\n    false\n    > bool = base.isOddInt32( 0 )\n    false\n\n    See Also\n    --------\n    base.isEvenInt32, base.isOdd\n",
	"base.isPositiveInteger": "\nbase.isPositiveInteger( x )\n    Tests if a finite double-precision floating-point number is a positive\n    integer.\n\n    The function assumes a finite number. If provided positive infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a positive integer.\n\n    Examples\n    --------\n    > var bool = base.isPositiveInteger( 1.0 )\n    true\n    > bool = base.isPositiveInteger( 0.0 )\n    false\n    > bool = base.isPositiveInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonNegativeInteger, base.isNonPositiveInteger\n",
	"base.isPositiveZero": "\nbase.isPositiveZero( x )\n    Tests if a numeric value is positive zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is positive zero.\n\n    Examples\n    --------\n    > var bool = base.isPositiveZero( 0.0 )\n    true\n    > bool = base.isPositiveZero( -0.0 )\n    false\n\n    See Also\n    --------\n    base.isNegativeZero\n",
	"base.isPow2Uint32": "\nbase.isPow2Uint32( x )\n    Tests whether an unsigned integer is a power of 2.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned integer.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a power of 2.\n\n    Examples\n    --------\n    > var bool = base.isPow2Uint32( 2 )\n    true\n    > bool = base.isPow2Uint32( 5 )\n    false\n\n",
	"base.isProbability": "\nbase.isProbability( x )\n    Tests if a numeric value is a probability.\n\n    A probability is defined as a numeric value on the closed interval `[0,1]`.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a probability.\n\n    Examples\n    --------\n    > var bool = base.isProbability( 0.5 )\n    true\n    > bool = base.isProbability( 3.14 )\n    false\n    > bool = base.isProbability( NaN )\n    false\n\n",
	"base.isSafeInteger": "\nbase.isSafeInteger( x )\n    Tests if a finite double-precision floating-point number is a safe integer.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a safe integer.\n\n    Examples\n    --------\n    > var bool = base.isSafeInteger( 1.0 )\n    true\n    > bool = base.isSafeInteger( 2.0e200 )\n    false\n    > bool = base.isSafeInteger( 3.14 )\n    false\n\n",
	"base.kernelBetainc": "\nbase.kernelBetainc( [out,] x, a, b, regularized, upper )\n    Computes the kernel function for the regularized incomplete beta function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete beta functions, respectively.\n\n    If provided `x < 0` or `x > 1`, the function returns `[ NaN, NaN ]`.\n\n    If provided `a < 0` or `b < 0`, the function returns `[ NaN, NaN ]`.\n\n    If provided `NaN` for `x`, `a`, or `b`, the function returns `[ NaN, NaN ]`.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        First function parameter.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    regularized: boolean\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete beta function.\n\n    upper: boolean\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete beta function.\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        Function value and first derivative.\n\n    Examples\n    --------\n    > var out = base.kernelBetainc( 2.0, 2.0, false, false )\n    [ ~0.083, ~1.5 ]\n    > out = base.kernelBetainc( 0.2, 1.0, 2.0, true, false )\n    [ 0.32, 1.6 ]\n\n    > out = new Array( 2 );\n    > var v = base.kernelBetainc( out, 0.2, 1.0, 2.0, true, true )\n    [ 0.64, 1.6 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.betainc\n",
	"base.kernelBetaincinv": "\nbase.kernelBetaincinv( a, b, p, q )\n    Computes the inverse of the lower incomplete beta function.\n\n    Probabilities `p` and `q` must satisfy `p = 1 - q`.\n\n    Parameters\n    ----------\n    a: number\n        First function parameter (a positive number).\n\n    b: number\n        Second function parameter (a positive number).\n\n    p: number\n        Probability.\n\n    q: number\n        Probability equal to `1-p`.\n\n    Returns\n    -------\n    out: Array\n        Two-element array holding function value `y` and `1-y`.\n\n    Examples\n    --------\n    > var y = base.kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 )\n    [ ~0.327, ~0.673 ]\n    > y = base.kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 )\n    [ ~0.446, ~0.554 ]\n    > y = base.kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 )\n    [ ~0.082, ~0.918 ]\n    > y = base.kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 )\n    [ ~0.235, ~0.765 ]\n\n    See Also\n    --------\n    base.betaincinv\n",
	"base.kernelCos": "\nbase.kernelCos( x, y )\n    Computes the cosine of a number on `[-π/4, π/4]`.\n\n    For increased accuracy, the number for which the cosine should be evaluated\n    can be supplied as a double-double number (i.e., a non-evaluated sum of two\n    double-precision floating-point numbers `x` and `y`).\n\n    The two numbers must satisfy `|y| < 0.5 * ulp( x )`.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    y: number\n        Tail of `x`.\n\n    Returns\n    -------\n    out: number\n        Cosine.\n\n    Examples\n    --------\n    > var out = base.kernelCos( 0.0, 0.0 )\n    ~1.0\n    > out = base.kernelCos( PI/6.0, 0.0 )\n    ~0.866\n    > out = base.kernelCos( 0.785, -1.144e-17 )\n    ~0.707\n    > out = base.kernelCos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.kernelSin, base.kernelTan\n",
	"base.kernelSin": "\nbase.kernelSin( x, y )\n    Computes the sine of a number on `[-π/4, π/4]`.\n\n    For increased accuracy, the number for which the cosine should be evaluated\n    can be supplied as a double-double number (i.e., a non-evaluated sum of two\n    double-precision floating-point numbers `x` and `y`).\n\n    The two numbers must satisfy `|y| < 0.5 * ulp( x )`.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    y: number\n        Tail of `x`.\n\n    Returns\n    -------\n    out: number\n        Sine.\n\n    Examples\n    --------\n    > var y = base.kernelSin( 0.0, 0.0 )\n    ~0.0\n    > y = base.kernelSin( PI/6.0, 0.0 )\n    ~0.5\n    > y = base.kernelSin( 0.619, 9.279e-18 )\n    ~0.581\n\n    > y = base.kernelSin( NaN, 0.0 )\n    NaN\n    > y = base.kernelSin( 2.0, NaN )\n    NaN\n    > y = base.kernelSin( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.kernelCos, base.kernelTan, base.sin\n",
	"base.kernelTan": "\nbase.kernelTan( x, y, k )\n    Computes the tangent of a number on `[-π/4, π/4]`.\n\n    For increased accuracy, the number for which the tangent should be evaluated\n    can be supplied as a double-double number (i.e., a non-evaluated sum of two\n    double-precision floating-point numbers `x` and `y`).\n\n    The numbers `x` and `y` must satisfy `|y| < 0.5 * ulp( x )`.\n\n    If either `x` or `y` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    y: number\n        Tail of `x`.\n\n    k: integer\n        If `k=1`, the function returns `tan(x+y)`. If `k=-1`, the function\n        returns the negative inverse `-1/tan(x+y)`.\n\n    Returns\n    -------\n    out: number\n        Tangent.\n\n    Examples\n    --------\n    > var out = base.kernelTan( PI/4.0, 0.0, 1 )\n    ~1.0\n    > out = base.kernelTan( PI/4.0, 0.0, -1 )\n    ~-1.0\n    > out = base.kernelTan( PI/6.0, 0.0, 1 )\n    ~0.577\n    > out = base.kernelTan( 0.664, 5.288e-17, 1 )\n    ~0.783\n\n    > out = base.kernelTan( NaN, 0.0, 1 )\n    NaN\n    > out = base.kernelTan( 3.0, NaN, 1 )\n    NaN\n    > out = base.kernelTan( 3.0, 0.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.kernelCos, base.kernelSin, base.tan\n",
	"base.kroneckerDelta": "\nbase.kroneckerDelta( i, j )\n    Evaluates the Kronecker delta.\n\n    If `i == j`, the function returns `1`; otherwise, the function returns zero.\n\n    Parameters\n    ----------\n    i: number\n        Input value.\n\n    j: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.kroneckerDelta( 3.14, 0.0 )\n    0.0\n    > y = base.kroneckerDelta( 3.14, 3.14 )\n    1.0\n\n    See Also\n    --------\n    base.diracDelta\n",
	"base.lcm": "\nbase.lcm( a, b )\n    Computes the least common multiple (lcm).\n\n    If either `a` or `b` is `0`, the function returns `0`.\n\n    Both `a` and `b` must have integer values; otherwise, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        First integer.\n\n    b: integer\n        Second integer.\n\n    Returns\n    -------\n    out: integer\n        Least common multiple.\n\n    Examples\n    --------\n    > var v = base.lcm( 21, 6 )\n    42\n\n    See Also\n    --------\n    base.gcd\n",
	"base.ldexp": "\nbase.ldexp( frac, exp )\n    Multiplies a double-precision floating-point number by an integer power of\n    two; i.e., `x = frac * 2^exp`.\n\n    If `frac` equals positive or negative `zero`, `NaN`, or positive or negative\n    infinity, the function returns a value equal to `frac`.\n\n    Parameters\n    ----------\n    frac: number\n        Fraction.\n\n    exp: number\n        Exponent.\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number equal to `frac * 2^exp`.\n\n    Examples\n    --------\n    > var x = base.ldexp( 0.5, 3 )\n    4.0\n    > x = base.ldexp( 4.0, -2 )\n    1.0\n    > x = base.ldexp( 0.0, 20 )\n    0.0\n    > x = base.ldexp( -0.0, 39 )\n    -0.0\n    > x = base.ldexp( NaN, -101 )\n    NaN\n    > x = base.ldexp( PINF, 11 )\n    Infinity\n    > x = base.ldexp( NINF, -118 )\n    -Infinity\n\n    See Also\n    --------\n    base.frexp\n",
	"base.ln": "\nbase.ln( x )\n    Evaluates the natural logarithm.\n\n    For negative numbers, the natural logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ln( 4.0 )\n    ~1.386\n    > y = base.ln( 0.0 )\n    -Infinity\n    > y = base.ln( PINF )\n    Infinity\n    > y = base.ln( NaN )\n    NaN\n    > y = base.ln( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.log10, base.log1p, base.log2\n",
	"base.log": "\nbase.log( x, b )\n    Computes the base `b` logarithm of `x`.\n\n    For negative `b` or `x`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    b: number\n        Base.\n\n    Returns\n    -------\n    y: number\n        Logarithm (base `b`).\n\n    Examples\n    --------\n    > var y = base.log( 100.0, 10.0 )\n    2.0\n    > y = base.log( 16.0, 2.0 )\n    4.0\n    > y = base.log( 5.0, 1.0 )\n    Infinity\n    > y = base.log( NaN, 2.0 )\n    NaN\n    > y = base.log( 1.0, NaN )\n    NaN\n    > y = base.log( -4.0, 2.0 )\n    NaN\n    > y = base.log( 4.0, -2.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.ln, base.log10, base.log1p, base.log2\n",
	"base.log10": "\nbase.log10( x )\n    Evaluates the common logarithm (base 10).\n\n    For negative numbers, the common logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log10( 100.0 )\n    2.0\n    > y = base.log10( 8.0 )\n    ~0.903\n    > y = base.log10( 0.0 )\n    -Infinity\n    > y = base.log10( PINF )\n    Infinity\n    > y = base.log10( NaN )\n    NaN\n    > y = base.log10( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp10, base.ln, base.log\n",
	"base.log1p": "\nbase.log1p( x )\n    Evaluates the natural logarithm of `1+x`.\n\n    For `x < -1`, the function returns `NaN`, as the natural logarithm is not\n    defined for negative numbers.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log1p( 4.0 )\n    ~1.609\n    > y = base.log1p( -1.0 )\n    -Infinity\n    > y = base.log1p( 0.0 )\n    0.0\n    > y = base.log1p( -0.0 )\n    -0.0\n    > y = base.log1p( -2.0 )\n    NaN\n    > y = base.log1p( NaN )\n    NaN\n\n    See Also\n    --------\n    base.ln, base.log\n",
	"base.log2": "\nbase.log2( x )\n    Evaluates the binary logarithm (base two).\n\n    For negative numbers, the binary logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log2( 4.0 )\n    2.0\n    > y = base.log2( 8.0 )\n    3.0\n    > y = base.log2( 0.0 )\n    -Infinity\n    > y = base.log2( PINF )\n    Infinity\n    > y = base.log2( NaN )\n    NaN\n    > y = base.log2( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp2, base.ln, base.log\n",
	"base.logit": "\nbase.logit( p )\n    Evaluates the logit function.\n\n    Let `p` be the probability of some event. The logit function is defined as\n    the logarithm of the odds `p / (1-p)`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.logit( 0.2 )\n    ~-1.386\n    > y = base.logit( 0.9 )\n    ~2.197\n    > y = base.logit( -4.0 )\n    NaN\n    > y = base.logit( 1.5 )\n    NaN\n    > y = base.logit( NaN )\n    NaN\n\n",
	"base.lucas": "\nbase.lucas( n )\n    Computes the nth Lucas number.\n\n    Lucas numbers follow the recurrence relation\n\n      L_n = L_{n-1} + L_{n-2}\n\n    with seed values L_0 = 2 and L_1 = 1.\n\n    If `n` is greater than `76`, the function returns `NaN`, as larger Lucas\n    numbers cannot be accurately represented due to limitations of double-\n    precision floating-point format.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        Lucas number.\n\n    Examples\n    --------\n    > var y = base.lucas( 0 )\n    2\n    > y = base.lucas( 1 )\n    1\n    > y = base.lucas( 2 )\n    3\n    > y = base.lucas( 3 )\n    4\n    > y = base.lucas( 4 )\n    7\n    > y = base.lucas( 77 )\n    NaN\n    > y = base.lucas( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negalucas\n",
	"base.lucaspoly": "\nbase.lucaspoly( n, x )\n    Evaluates a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    x: number\n        Value at which to evaluate the Lucas polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated Lucas polynomial.\n\n    Examples\n    --------\n    // 2^5 + 5*2^3 + 5*2\n    > var v = base.lucaspoly( 5, 2.0 )\n    82.0\n\n\nbase.lucaspoly.factory( n )\n    Returns a function for evaluating a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Lucas polynomial.\n\n    Examples\n    --------\n    > var polyval = base.lucaspoly.factory( 5 );\n\n    // 1^5 + 5*1^2 + 5\n    > var v = polyval( 1.0 )\n    11.0\n\n    // 2^5 + 5*2^3 + 5*2\n    > v = polyval( 2.0 )\n    82.0\n\n    See Also\n    --------\n    base.evalpoly, base.fibpoly\n",
	"base.max": "\nbase.max( [x[, y[, ...args]]] )\n    Returns the maximum value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), negative infinity is the\n    least upper bound. Similar to zero being the identity element for the sum of\n    an empty set and to one being the identity element for the product of an\n    empty set, negative infinity is the identity element for the maximum, and\n    thus, if not provided any arguments, the function returns negative infinity.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var v = base.max( 3.14, 4.2 )\n    4.2\n    > v = base.max( 5.9, 3.14, 4.2 )\n    5.9\n    > v = base.max( 3.14, NaN )\n    NaN\n    > v = base.max( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.maxabs, base.min\n",
	"base.maxabs": "\nbase.maxabs( [x[, y[, ...args]]] )\n    Returns the maximum absolute value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), negative infinity is the\n    least upper bound. Similar to zero being the identity element for the sum of\n    an empty set and to one being the identity element for the product of an\n    empty set, negative infinity is the identity element for the maximum, and\n    thus, if not provided any arguments, the function returns `+infinity` (i.e.,\n    the absolute value of `-infinity`).\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Maximum absolute value.\n\n    Examples\n    --------\n    > var v = base.maxabs( 3.14, -4.2 )\n    4.2\n    > v = base.maxabs( 5.9, 3.14, 4.2 )\n    5.9\n    > v = base.maxabs( 3.14, NaN )\n    NaN\n    > v = base.maxabs( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.max, base.minabs\n",
	"base.min": "\nbase.min( [x[, y[, ...args]]] )\n    Returns the minimum value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), positive infinity is the\n    greatest lower bound. Similar to zero being the identity element for the sum\n    of an empty set and to one being the identity element for the product of an\n    empty set, positive infinity is the identity element for the minimum, and\n    thus, if not provided any arguments, the function returns positive infinity.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var v = base.min( 3.14, 4.2 )\n    3.14\n    > v = base.min( 5.9, 3.14, 4.2 )\n    3.14\n    > v = base.min( 3.14, NaN )\n    NaN\n    > v = base.min( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.max, base.minabs\n",
	"base.minabs": "\nbase.minabs( [x[, y[, ...args]]] )\n    Returns the minimum absolute value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), positive infinity is the\n    greatest upper bound. Similar to zero being the identity element for the sum\n    of an empty set and to one being the identity element for the product of an\n    empty set, positive infinity is the identity element for the minimum, and\n    thus, if not provided any arguments, the function returns positive infinity.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Minimum absolute value.\n\n    Examples\n    --------\n    > var v = base.minabs( 3.14, -4.2 )\n    3.14\n    > v = base.minabs( 5.9, 3.14, 4.2 )\n    3.14\n    > v = base.minabs( 3.14, NaN )\n    NaN\n    > v = base.minabs( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.maxabs, base.min\n",
	"base.minmax": "\nbase.minmax( [out,] x[, y[, ...args]] )\n    Returns the minimum and maximum values.\n\n    If any argument is `NaN`, the function returns `NaN` for both the minimum\n    and maximum values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output object.\n\n    x: number\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Minimum and maximum values.\n\n    Examples\n    --------\n    > var v = base.minmax( 3.14, 4.2 )\n    [ 3.14, 4.2 ]\n    > v = base.minmax( 5.9, 3.14, 4.2 )\n    [ 3.14, 5.9 ]\n    > v = base.minmax( 3.14, NaN )\n    [ NaN, NaN ]\n    > v = base.minmax( +0.0, -0.0 )\n    [ -0.0, +0.0 ]\n    > v = base.minmax( 3.14 )\n    [ 3.14, 3.14 ]\n    > var out = new Array( 2 );\n    > v = base.minmax( out, 3.14 )\n    [ 3.14, 3.14 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.max, base.min\n",
	"base.modf": "\nbase.modf( [out,] x )\n    Decomposes a double-precision floating-point number into integral and\n    fractional parts, each having the same type and sign as the input value.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    parts: Array|TypedArray|Object\n        Integral and fractional parts.\n\n    Examples\n    --------\n    > var parts = base.modf( 3.14 )\n    [ 3.0, 0.14000000000000012 ]\n    > parts = base.modf( 3.14 )\n    [ 3.0, 0.14000000000000012 ]\n    > parts = base.modf( +0.0 )\n    [ +0.0, +0.0 ]\n    > parts = base.modf( -0.0 )\n    [ -0.0, -0.0 ]\n    > parts = base.modf( PINF )\n    [ Infinity, +0.0 ]\n    > parts = base.modf( NINF )\n    [ -Infinity, -0.0 ]\n    > parts = base.modf( NaN )\n    [ NaN, NaN ]\n\n    // Provide an output array:\n    > var out = new Float64Array( 2 );\n    > parts = base.modf( out, 3.14 )\n    <Float64Array>[ 3.0, 0.14000000000000012 ]\n    > var bool = ( parts === out )\n    true\n\n",
	"base.negafibonacci": "\nbase.negafibonacci( n )\n    Computes the nth negaFibonacci number.\n\n    The negaFibonacci numbers follow the recurrence relation\n\n      F_{n-2} = F_{n} - F_{n-1}\n\n    with seed values F_0 = 0 and F_{-1} = 1.\n\n    If `|n|` is greater than `78`, the function returns `NaN` as larger\n    negaFibonacci numbers cannot be accurately represented due to limitations of\n    double-precision floating-point format.\n\n    If not provided a non-positive integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        NegaFibonacci number.\n\n    Examples\n    --------\n    > var y = base.negafibonacci( 0 )\n    0\n    > y = base.negafibonacci( -1 )\n    1\n    > y = base.negafibonacci( -2 )\n    -1\n    > y = base.negafibonacci( -3 )\n    2\n    > y = base.negafibonacci( -4 )\n    -3\n    > y = base.negafibonacci( -79 )\n    NaN\n    > y = base.negafibonacci( -80 )\n    NaN\n    > y = base.negafibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negalucas\n",
	"base.negalucas": "\nbase.negalucas( n )\n    Computes the nth negaLucas number.\n\n    The negaLucas numbers follow the recurrence relation\n\n      L_{n-2} = L_{n} - L_{n-1}\n\n    with seed values L_0 = 2 and L_{-1} = -1.\n\n    If `|n|` is greater than `76`, the function returns `NaN` as larger\n    negaLucas numbers cannot be accurately represented due to limitations of\n    double-precision floating-point format.\n\n    If not provided a non-positive integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        NegaLucas number.\n\n    Examples\n    --------\n    > var y = base.negalucas( 0 )\n    2\n    > y = base.negalucas( -1 )\n    -1\n    > y = base.negalucas( -2 )\n    3\n    > y = base.negalucas( -3 )\n    -4\n    > y = base.negalucas( -4 )\n    7\n    > y = base.negalucas( -77 )\n    NaN\n    > y = base.negalucas( -78 )\n    NaN\n    > y = base.negalucas( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.lucas, base.negafibonacci\n",
	"base.nonfibonacci": "\nbase.nonfibonacci( n )\n    Computes the nth non-Fibonacci number.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Non-Fibonacci number.\n\n    Examples\n    --------\n    > var v = base.nonfibonacci( 1 )\n    4\n    > v = base.nonfibonacci( 2 )\n    6\n    > v = base.nonfibonacci( 3 )\n    7\n    > v = base.nonfibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci\n",
	"base.normalize": "\nbase.normalize( [out,] x )\n    Returns a normal number and exponent satisfying `x = y * 2^exp` as an array.\n\n    The first element of the returned array corresponds to `y` and the second to\n    `exp`.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        An array containing `y` and `exp`.\n\n    Examples\n    --------\n    > var out = base.normalize( 3.14e-319 );\n    [ 1.4141234400356668e-303, -52 ]\n    > var y = out[ 0 ];\n    > var exponent = out[ 1 ];\n    > var bool = ( y*base.pow(2.0, exponent) === 3.14e-319 )\n    true\n\n    // Special cases:\n    > out = base.normalize( 0.0 )\n    [ 0.0, 0 ];\n    > out = base.normalize( PINF )\n    [ Infinity, 0 ]\n    > out = base.normalize( NINF )\n    [ -Infinity, 0 ]\n    > out = base.normalize( NaN )\n    [ NaN, 0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.normalize( out, 3.14e-319 )\n    <Float64Array>[ 1.4141234400356668e-303, -52 ]\n    > bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.normalizef\n",
	"base.normalizef": "\nbase.normalizef( [out,] x )\n    Returns a normal number `y` and exponent `exp` satisfying `x = y * 2^exp` as\n    an array.\n\n    The first element of the returned array corresponds to `y` and the second to\n    `exp`.\n\n    While the function accepts higher precision floating-point numbers, beware\n    that providing such numbers can be a source of subtle bugs as the relation\n    `x = y * 2^exp` may not hold.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        An array containing `y` and `exp`.\n\n    Examples\n    --------\n    > var out = base.normalizef( base.float64ToFloat32( 1.401e-45 ) )\n    [ 1.1754943508222875e-38, -23 ]\n    > var y = out[ 0 ];\n    > var exp = out[ 1 ];\n    > var bool = ( y*base.pow(2,exp) === base.float64ToFloat32(1.401e-45) )\n    true\n\n    // Special cases:\n    > out = base.normalizef( FLOAT32_PINF )\n    [ Infinity, 0 ]\n    > out = base.normalizef( FLOAT32_NINF )\n    [ -Infinity, 0 ]\n    > out = base.normalizef( NaN )\n    [ NaN, 0 ]\n\n    // Provide an output array:\n    > out = new Float32Array( 2 );\n    > var v = base.normalizef( out, base.float64ToFloat32( 1.401e-45 ) )\n    <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n    > bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.normalize\n",
	"base.pdiff": "\nbase.pdiff( x )\n    Returns the positive difference between `x` and `y` if `x > y`; otherwise,\n    returns `0`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Positive difference.\n\n    Examples\n    --------\n    > var v = base.pdiff( 5.9, 3.14 )\n    2.76\n    > v = base.pdiff( 3.14, 4.2 )\n    0.0\n    > v = base.pdiff( 3.14, NaN )\n    NaN\n    > v = base.pdiff( -0.0, +0.0 )\n    +0.0\n\n",
	"base.polygamma": "\nbase.polygamma( n, x )\n    Evaluates the polygamma function of order `n`; i.e., the (n+1)th derivative\n    of the natural logarithm of the gamma function.\n\n    If `n` is not a non-negative integer, the function returns `NaN`.\n\n    If `x` is zero or a negative integer, the function returns `NaN`.\n\n    If provided `NaN` as either parameter, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Derivative order.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.polygamma( 3, 1.2 )\n    ~3.245\n    > v = base.polygamma( 5, 1.2 )\n    ~41.39\n    > v = base.polygamma( 3, -4.9 )\n    ~60014.239\n    > v = base.polygamma( -1, 5.3 )\n    NaN\n    > v = base.polygamma( 2, -1.0 )\n    NaN\n\n    See Also\n    --------\n    base.trigamma, base.digamma, base.gamma\n",
	"base.pow": "\nbase.pow( b, x )\n    Evaluates the exponential function `bˣ`.\n\n    Parameters\n    ----------\n    b: number\n        Base.\n\n    x: number\n        Exponent.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.pow( 2.0, 3.0 )\n    8.0\n    > y = base.pow( 4.0, 0.5 )\n    2.0\n    > y = base.pow( 100.0, 0.0 )\n    1.0\n    > y = base.pow( PI, 5.0 )\n    ~306.0197\n    > y = base.pow( PI, -0.2 )\n    ~0.7954\n    > y = base.pow( NaN, 3.0 )\n    NaN\n    > y = base.pow( 5.0, NaN )\n    NaN\n    > y = base.pow( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.powm1\n",
	"base.powm1": "\nbase.powm1( b, x )\n    Evaluates `bˣ - 1`.\n\n    When `b` is close to `1` and/or `x` is small, this function is more accurate\n    than naively computing `bˣ` and subtracting `1`.\n\n    Parameters\n    ----------\n    b: number\n        Base.\n\n    x: number\n        Exponent.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.powm1( 2.0, 3.0 )\n    7.0\n    > y = base.powm1( 4.0, 0.5 )\n    1.0\n    > y = base.powm1( 0.0, 100.0 )\n    -1.0\n    > y = base.powm1( 100.0, 0.0 )\n    0.0\n    > y = base.powm1( 0.0, 0.0 )\n    0.0\n    > y = base.powm1( PI, 5.0 )\n    ~305.0197\n    > y = base.powm1( NaN, 3.0 )\n    NaN\n    > y = base.powm1( 5.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow\n",
	"base.rad2deg": "\nbase.rad2deg( x )\n    Converts an angle from radians to degrees.\n\n    Parameters\n    ----------\n    x: number\n        Angle in radians.\n\n    Returns\n    -------\n    d: number\n        Angle in degrees.\n\n    Examples\n    --------\n    > var d = base.rad2deg( PI/2.0 )\n    90.0\n    > d = base.rad2deg( -PI/4.0 )\n    -45.0\n    > d = base.rad2deg( NaN )\n    NaN\n\n    // Due to finite precision, canonical values may not be returned:\n    > d = base.rad2deg( PI/6.0 )\n    29.999999999999996\n\n    See Also\n    --------\n    base.deg2rad\n",
	"base.ramp": "\nbase.ramp( x )\n    Evaluates the ramp function.\n\n    If `x >= 0`, the function returns `x`; otherwise, the function returns zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ramp( 3.14 )\n    3.14\n    > y = base.ramp( -3.14 )\n    0.0\n\n    See Also\n    --------\n    base.heaviside\n",
	"base.random.arcsine": "\nbase.random.arcsine( a, b )\n    Returns a pseudorandom number drawn from an arcsine distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.arcsine( 2.0, 5.0 )\n    <number>\n\n\nbase.random.arcsine.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an arcsine distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.arcsine.factory();\n    > var r = rand( 0.0, 1.0 )\n    <number>\n    > r = rand( -2.0, 2.0 )\n    <number>\n\n    // Provide `a` and `b`:\n    > rand = base.random.arcsine.factory( 0.0, 1.0 );\n    > r = rand()\n    <number>\n    > r = rand()\n    <number>\n\n\nbase.random.arcsine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.arcsine.NAME\n    'arcsine'\n\n\nbase.random.arcsine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.arcsine.PRNG;\n\n\nbase.random.arcsine.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.arcsine.SEED;\n\n    See Also\n    --------\n    base.random.beta\n",
	"base.random.beta": "\nbase.random.beta( α, β )\n    Returns a pseudorandom number drawn from a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 );\n\n\nbase.random.beta.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.beta.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.beta.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.beta.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.beta.NAME\n    'beta'\n\n\nbase.random.beta.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.beta.PRNG;\n\n\nbase.random.beta.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.beta.SEED;\n\n",
	"base.random.betaprime": "\nbase.random.betaprime( α, β )\n    Returns a pseudorandom number drawn from a beta prime distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.betaprime( 2.0, 5.0 );\n\n\nbase.random.betaprime.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta prime distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.betaprime.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.betaprime.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.betaprime.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.betaprime.NAME\n    'betaprime'\n\n\nbase.random.betaprime.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.betaprime.PRNG;\n\n\nbase.random.betaprime.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.betaprime.SEED;\n\n",
	"base.random.binomial": "\nbase.random.binomial( n, p )\n    Returns a pseudorandom number drawn from a binomial distribution.\n\n    If `n` is not a positive integer or `p` is not a probability, the function\n    returns `NaN`.\n\n    If `n` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 );\n\n\nbase.random.binomial.factory( [n, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided `n` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `n` and `p`, the returned PRNG requires that both `n` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.binomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `n` and `p`:\n    > rand = base.random.binomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.binomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.binomial.NAME\n    'binomial'\n\n\nbase.random.binomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.binomial.PRNG;\n\n\nbase.random.binomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.binomial.SEED;\n\n",
	"base.random.boxMuller": "\nbase.random.boxMuller()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller();\n\n\nbase.random.boxMuller.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.boxMuller.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.boxMuller.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.boxMuller.NAME\n    'box-muller'\n\n\nbase.random.boxMuller.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.boxMuller.PRNG;\n\n\nbase.random.boxMuller.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.boxMuller.SEED;\n\n",
	"base.random.cauchy": "\nbase.random.cauchy( x0, Ɣ )\n    Returns a pseudorandom number drawn from a Cauchy distribution.\n\n    If `x0` or `Ɣ` is `NaN` or `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 );\n\n\nbase.random.cauchy.factory( [x0, Ɣ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided `x0` and `Ɣ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `x0` and `Ɣ`, the returned PRNG requires that both `x0` and\n    `Ɣ` be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter.\n\n    Ɣ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cauchy.factory();\n    > var r = rand( 0.0, 1.5 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `x0` and `Ɣ`:\n    > rand = base.random.cauchy.factory( 0.0, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cauchy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cauchy.NAME\n    'cauchy'\n\n\nbase.random.cauchy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cauchy.PRNG;\n\n\nbase.random.cauchy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cauchy.SEED;\n\n",
	"base.random.chi": "\nbase.random.chi( k )\n    Returns a pseudorandom number drawn from a chi distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chi( 2 );\n\n\nbase.random.chi.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chi.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chi.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chi.NAME\n    'chi'\n\n\nbase.random.chi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chi.PRNG;\n\n\nbase.random.chi.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chi.SEED;\n\n",
	"base.random.chisquare": "\nbase.random.chisquare( k )\n    Returns a pseudorandom number drawn from a chi-square distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 );\n\n\nbase.random.chisquare.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chisquare.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chisquare.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chisquare.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chisquare.NAME\n    'chisquare'\n\n\nbase.random.chisquare.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chisquare.PRNG;\n\n\nbase.random.chisquare.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chisquare.SEED;\n\n",
	"base.random.cosine": "\nbase.random.cosine( μ, s )\n    Returns a pseudorandom number drawn from a raised cosine distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cosine( 2.0, 5.0 );\n\n\nbase.random.cosine.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a raised cosine distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cosine.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.cosine.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cosine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cosine.NAME\n    'cosine'\n\n\nbase.random.cosine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cosine.PRNG;\n\n\nbase.random.cosine.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cosine.SEED;\n\n",
	"base.random.discreteUniform": "\nbase.random.discreteUniform( a, b )\n    Returns a pseudorandom number drawn from a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.discreteUniform( 2, 50 );\n\n\nbase.random.discreteUniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a discrete uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: integer (optional)\n        Minimum support.\n\n    b: integer (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.discreteUniform.factory();\n    > var r = rand( 0, 10 );\n    > r = rand( -20, 20 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.discreteUniform.factory( 0, 10 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.discreteUniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.discreteUniform.NAME\n    'discrete-uniform'\n\n\nbase.random.discreteUniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.discreteUniform.PRNG;\n\n\nbase.random.discreteUniform.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.discreteUniform.SEED;\n\n",
	"base.random.erlang": "\nbase.random.erlang( k, λ )\n    Returns a pseudorandom number drawn from an Erlang distribution.\n\n    If `k` is not a positive integer or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 );\n\n\nbase.random.erlang.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both `k` and\n    `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: integer (optional)\n        Shape parameter.\n\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.erlang.factory();\n    > var r = rand( 2, 1.0 );\n    > r = rand( 4, 3.14 );\n\n    // Provide `k` and `λ`:\n    > rand = base.random.erlang.factory( 2, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.erlang.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.erlang.NAME\n    'erlang'\n\n\nbase.random.erlang.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.erlang.PRNG;\n\n\nbase.random.erlang.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.erlang.SEED;\n\n",
	"base.random.exponential": "\nbase.random.exponential( λ )\n    Returns a pseudorandom number drawn from an exponential distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 );\n\n\nbase.random.exponential.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.exponential.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.exponential.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.exponential.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.exponential.NAME\n    'exponential'\n\n\nbase.random.exponential.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.exponential.PRNG;\n\n\nbase.random.exponential.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.exponential.SEED;\n\n",
	"base.random.f": "\nbase.random.f( d1, d2 )\n    Returns a pseudorandom number drawn from an F distribution.\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.f( 2.0, 5.0 );\n\n\nbase.random.f.factory( [d1, d2, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided `d1` and `d2`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `d1` and `d2`, the returned PRNG requires that both `d1` and\n    `d2` be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Degrees of freedom.\n\n    d2: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.f.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.0, 3.14 );\n\n    // Provide `d1` and `d2`:\n    > rand = base.random.f.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.f.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.f.NAME\n    'f'\n\n\nbase.random.f.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.f.PRNG;\n\n\nbase.random.f.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.f.SEED;\n\n",
	"base.random.frechet": "\nbase.random.frechet( α, s, m )\n    Returns a pseudorandom number drawn from a Fréchet distribution.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    If either `α`, `s`, or `m` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.frechet( 2.0, 5.0, 3.33 );\n\n\nbase.random.frechet.factory( [α, s, m, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `α`, `s`, and `m`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `α`, `s`, and `m`, the returned PRNG requires that `α`, `s`,\n    and `m` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    m: number (optional)\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.frechet.factory();\n    > var r = rand( 1.0, 1.0, 0.5 );\n    > r = rand( 2.0, 2.0, 1.0 );\n\n    // Provide `α`, `s`, and `m`:\n    > rand = base.random.frechet.factory( 1.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.frechet.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.frechet.NAME\n    'frechet'\n\n\nbase.random.frechet.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.frechet.PRNG;\n\n\nbase.random.frechet.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.frechet.SEED;\n\n",
	"base.random.gamma": "\nbase.random.gamma( α, β )\n    Returns a pseudorandom number drawn from a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 );\n\n\nbase.random.gamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.gamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gamma.NAME\n    'gamma'\n\n\nbase.random.gamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gamma.PRNG;\n\n\nbase.random.gamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gamma.SEED;\n\n",
	"base.random.geometric": "\nbase.random.geometric( p )\n    Returns a pseudorandom number drawn from a geometric distribution.\n\n    If `p < 0` or `p > 1` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.8 );\n\n\nbase.random.geometric.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.geometric.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `λ`:\n    > rand = base.random.geometric.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.geometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.geometric.NAME\n    'geometric'\n\n\nbase.random.geometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.geometric.PRNG;\n\n\nbase.random.geometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.geometric.SEED;\n\n",
	"base.random.gumbel": "\nbase.random.gumbel( μ, β )\n    Returns a pseudorandom number drawn from a Gumbel distribution.\n\n    If `μ` or `β` is `NaN` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 );\n\n\nbase.random.gumbel.factory( [μ, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided `μ` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `β`, the returned PRNG requires that both `μ` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gumbel.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `β`:\n    > rand = base.random.gumbel.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gumbel.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gumbel.NAME\n    'gumbel'\n\n\nbase.random.gumbel.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gumbel.PRNG;\n\n\nbase.random.gumbel.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gumbel.SEED;\n\n",
	"base.random.hypergeometric": "\nbase.random.hypergeometric( N, K, n )\n    Returns a pseudorandom number drawn from a hypergeometric distribution.\n\n    `N`, `K`, and `n` must all be nonnegative integers; otherwise, the function\n    returns `NaN`.\n\n    If `n > N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 7 );\n\n\nbase.random.hypergeometric.factory( [N, K, n, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided `N`, `K`, and `n`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `N`, `K`, and `n`, the returned PRNG requires that `N`, `K`,\n    and `n` be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.hypergeometric.factory();\n    > var r = rand( 20, 10, 15 );\n    > r = rand( 20, 10, 7 );\n\n    // Provide `N`, `K`, and `n`:\n    > rand = base.random.hypergeometric.factory( 20, 10, 15 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.hypergeometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.hypergeometric.NAME\n    'hypergeometric'\n\n\nbase.random.hypergeometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.hypergeometric.PRNG;\n\n\nbase.random.hypergeometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.hypergeometric.SEED;\n\n",
	"base.random.improvedZiggurat": "\nbase.random.improvedZiggurat()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat();\n\n\nbase.random.improvedZiggurat.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.improvedZiggurat.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.improvedZiggurat.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.improvedZiggurat.NAME\n    'improved-ziggurat'\n\n\nbase.random.improvedZiggurat.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.improvedZiggurat.PRNG;\n\n\nbase.random.improvedZiggurat.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.improvedZiggurat.SEED;\n\n",
	"base.random.invgamma": "\nbase.random.invgamma( α, β )\n    Returns a pseudorandom number drawn from an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 );\n\n\nbase.random.invgamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.invgamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.invgamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.invgamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.invgamma.NAME\n    'invgamma'\n\n\nbase.random.invgamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.invgamma.PRNG;\n\n\nbase.random.invgamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.invgamma.SEED;\n\n",
	"base.random.kumaraswamy": "\nbase.random.kumaraswamy( a, b )\n    Returns a pseudorandom number drawn from a Kumaraswamy's double bounded\n    distribution.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.kumaraswamy( 2.0, 5.0 );\n\n\nbase.random.kumaraswamy.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Kumaraswamy's double bounded distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter.\n\n    b: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.kumaraswamy.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.kumaraswamy.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.kumaraswamy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.kumaraswamy.NAME\n    'kumaraswamy'\n\n\nbase.random.kumaraswamy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.kumaraswamy.PRNG;\n\n\nbase.random.kumaraswamy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.kumaraswamy.SEED;\n\n",
	"base.random.laplace": "\nbase.random.laplace( μ, b )\n    Returns a pseudorandom number drawn from a Laplace distribution.\n\n    If `μ` or `b` is `NaN` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 );\n\n\nbase.random.laplace.factory( [μ, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Laplace distribution.\n\n    If provided `μ` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `b`, the returned PRNG requires that both `μ` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    b: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.laplace.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.laplace.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.laplace.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.laplace.NAME\n    'laplace'\n\n\nbase.random.laplace.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.laplace.PRNG;\n\n\nbase.random.laplace.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.laplace.SEED;\n\n",
	"base.random.levy": "\nbase.random.levy( μ, c )\n    Returns a pseudorandom number drawn from a Lévy distribution.\n\n    If `μ` or `c` is `NaN` or `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.levy( 2.0, 5.0 );\n\n\nbase.random.levy.factory( [μ, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Lévy distribution.\n\n    If provided `μ` and `c`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `c`, the returned PRNG requires that both `μ` and\n    `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    c: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.levy.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.levy.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.levy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.levy.NAME\n    'levy'\n\n\nbase.random.levy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.levy.PRNG;\n\n\nbase.random.levy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.levy.SEED;\n\n",
	"base.random.logistic": "\nbase.random.logistic( μ, s )\n    Returns a pseudorandom number drawn from a logistic distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.logistic( 2.0, 5.0 );\n\n\nbase.random.logistic.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.logistic.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.logistic.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.logistic.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.logistic.NAME\n    'logistic'\n\n\nbase.random.logistic.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.logistic.PRNG;\n\n\nbase.random.logistic.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.logistic.SEED;\n\n",
	"base.random.lognormal": "\nbase.random.lognormal( μ, σ )\n    Returns a pseudorandom number drawn from a lognormal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.lognormal( 2.0, 5.0 );\n\n\nbase.random.lognormal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.lognormal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.lognormal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.lognormal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.lognormal.NAME\n    'lognormal'\n\n\nbase.random.lognormal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.lognormal.PRNG;\n\n\nbase.random.lognormal.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.lognormal.SEED;\n\n",
	"base.random.minstd": "\nbase.random.minstd()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) based on Park and Miller.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. More\n    importantly, the \"randomness quality\" of the generator's output is lacking.\n    These defects make the generator unsuitable, for example, in Monte Carlo\n    simulations and in cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd();\n\n\nbase.random.minstd.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd.normalized();\n\n\nbase.random.minstd.factory( [seed] )\n    Returns a linear congruential pseudorandom number generator (LCG).\n\n    Parameters\n    ----------\n    seed: integer (optional)\n        Pseudorandom number generator seed. Must be on the interval\n        `[1, 2147483646]`.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstd.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstd.factory( 1234 );\n    > r = rand()\n    20739838\n\n\nbase.random.minstd.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstd.NAME\n    'minstd'\n\n\nbase.random.minstd.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstd.SEED;\n\n\nbase.random.minstd.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstd.MIN\n    1\n\n\nbase.random.minstd.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstd.MAX\n    2147483646\n\n",
	"base.random.minstdShuffle": "\nbase.random.minstdShuffle()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) whose output is shuffled using the Bays-\n    Durham algorithm. The shuffle step considerably strengthens the \"randomness\n    quality\" of a simple LCG's output.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. In\n    general, this generator is unsuitable for Monte Carlo simulations and\n    cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle();\n\n\nbase.random.minstdShuffle.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle.normalized();\n\n\nbase.random.minstdShuffle.factory( [seed] )\n    Returns a linear congruential pseudorandom number generator (LCG) whose\n    output is shuffled.\n\n    Parameters\n    ----------\n    seed: integer (optional)\n        Pseudorandom number generator seed. Must be on the interval\n        `[1, 2147483646]`.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstdShuffle.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstdShuffle.factory( 1234 );\n    > r = rand()\n    1421600654\n\n\nbase.random.minstdShuffle.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstdShuffle.NAME\n    'minstd-shuffle'\n\n\nbase.random.minstdShuffle.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstdShuffle.SEED;\n\n\nbase.random.minstdShuffle.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstdShuffle.MIN\n    1\n\n\nbase.random.minstdShuffle.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstdShuffle.MAX\n    2147483646\n\n",
	"base.random.negativeBinomial": "\nbase.random.negativeBinomial( r, p )\n    Returns a pseudorandom number drawn from a negative binomial distribution.\n\n    If `p` is not in the interval `(0,1)`, the function returns `NaN`.\n\n    If `r` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.negativeBinomial( 20, 0.8 );\n\n\nbase.random.negativeBinomial.factory( [r, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided `r` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `r` and `p`, the returned PRNG requires that both `r` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    r: integer (optional)\n        Number of successes until experiment is stopped.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.negativeBinomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `r` and `p`:\n    > rand = base.random.negativeBinomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.negativeBinomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.negativeBinomial.NAME\n    'negative-binomial'\n\n\nbase.random.negativeBinomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.negativeBinomial.PRNG;\n\n\nbase.random.negativeBinomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.negativeBinomial.SEED;\n\n",
	"base.random.normal": "\nbase.random.normal( μ, σ )\n    Returns a pseudorandom number drawn from a normal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.normal( 2.0, 5.0 );\n\n\nbase.random.normal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    σ: number (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.normal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.normal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.normal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.normal.NAME\n    'normal'\n\n\nbase.random.normal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.normal.PRNG;\n\n\nbase.random.normal.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.normal.SEED;\n\n",
	"base.random.pareto1": "\nbase.random.pareto1( α, β )\n    Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.pareto1( 2.0, 5.0 );\n\n\nbase.random.pareto1.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.pareto1.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.pareto1.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.pareto1.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.pareto1.NAME\n    'pareto-type1'\n\n\nbase.random.pareto1.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.pareto1.PRNG;\n\n\nbase.random.pareto1.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.pareto1.SEED;\n\n",
	"base.random.poisson": "\nbase.random.poisson( λ )\n    Returns a pseudorandom number drawn from a Poisson distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.poisson( 7.9 );\n\n\nbase.random.poisson.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.poisson.factory();\n    > var r = rand( 4.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.poisson.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.poisson.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.poisson.NAME\n    'poisson'\n\n\nbase.random.poisson.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.poisson.PRNG;\n\n\nbase.random.poisson.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.poisson.SEED;\n\n",
	"base.random.randi": "\nbase.random.randi()\n    Returns a pseudorandom number having an integer value.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.randi();\n\n\nbase.random.randi.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers having integer values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). Default:\n        'minstd-shuffle'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var randi = base.random.randi.factory();\n    > var r = randi();\n    > r = randi();\n\n    // Specify alternative PRNG:\n    > randi = base.random.randi.factory({ 'name': 'minstd' });\n    > r = randi();\n    > r = randi();\n\n\nbase.random.randi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randi.NAME\n    'randi'\n\n\nbase.random.randi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randi.PRNG;\n\n\nbase.random.randi.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randi.SEED;\n\n\nbase.random.randi.MIN\n    Minimum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randi.MIN;\n\n\nbase.random.randi.MAX\n    Maximum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randi.MAX;\n\n",
	"base.random.randn": "\nbase.random.randn()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.randn();\n\n\nbase.random.randn.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG) that samples\n        from a standard normal distribution. Default: 'improved-ziggurat'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randn.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randn.factory({ 'name': 'box-muller' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randn.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randn.NAME\n    'standard-normal'\n\n\nbase.random.randn.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randn.PRNG;\n\n\nbase.random.randn.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randn.SEED;\n\n",
	"base.random.randu": "\nbase.random.randu()\n    Returns a pseudorandom number drawn from a uniform distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number on the interval `[0,1)`.\n\n    Examples\n    --------\n    > var r = base.random.randu();\n\n\nbase.random.randu.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). Default:\n        'minstd-shuffle'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randu.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randu.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randu.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randu.NAME\n    'uniform'\n\n\nbase.random.randu.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randu.PRNG;\n\n\nbase.random.randu.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randu.SEED;\n\n",
	"base.random.rayleigh": "\nbase.random.rayleigh( σ )\n    Returns a pseudorandom number drawn from a Rayleigh distribution.\n\n    If `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.rayleigh( 2.5 );\n\n\nbase.random.rayleigh.factory( [σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided `σ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `σ`, the returned PRNG requires that `σ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.rayleigh.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 10.0 );\n\n    // Provide `σ`:\n    > rand = base.random.rayleigh.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.rayleigh.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.rayleigh.NAME\n    'rayleigh'\n\n\nbase.random.rayleigh.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.rayleigh.PRNG;\n\n\nbase.random.rayleigh.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.rayleigh.SEED;\n\n",
	"base.random.t": "\nbase.random.t( v )\n    Returns a pseudorandom number drawn from a Student's t distribution.\n\n    If `v <= 0` or `v` is `NaN`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.t( 2.0 );\n\n\nbase.random.t.factory( [v, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided `v`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `v`, the returned PRNG requires that `v` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.t.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `v`:\n    > rand = base.random.t.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.t.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.t.NAME\n    't'\n\n\nbase.random.t.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.t.PRNG;\n\n\nbase.random.t.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.t.SEED;\n\n",
	"base.random.triangular": "\nbase.random.triangular( a, b, c )\n    Returns a pseudorandom number drawn from a triangular distribution.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.triangular( 2.0, 5.0, 3.33 );\n\n\nbase.random.triangular.factory( [a, b, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `a`, `b`, and `c`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `a`, `b`, and `c`, the returned PRNG requires that `a`, `b`,\n    and `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    c: number (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.triangular.factory();\n    > var r = rand( 0.0, 1.0, 0.5 );\n    > r = rand( -2.0, 2.0, 1.0 );\n\n    // Provide `a`, `b`, and `c`:\n    > rand = base.random.triangular.factory( 0.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.triangular.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.triangular.NAME\n    'triangular'\n\n\nbase.random.triangular.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.triangular.PRNG;\n\n\nbase.random.triangular.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.triangular.SEED;\n\n",
	"base.random.uniform": "\nbase.random.uniform( a, b )\n    Returns a pseudorandom number drawn from a continuous uniform distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.uniform( 2.0, 5.0 );\n\n\nbase.random.uniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a continuous uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.uniform.factory();\n    > var r = rand( 0.0, 1.0 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.uniform.factory( 0.0, 1.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.uniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.uniform.NAME\n    'uniform'\n\n\nbase.random.uniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.uniform.PRNG;\n\n\nbase.random.uniform.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.uniform.SEED;\n\n",
	"base.random.weibull": "\nbase.random.weibull( k, λ )\n    Returns a pseudorandom number drawn from a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If either `λ` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.weibull( 2.0, 5.0 );\n\n\nbase.random.weibull.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both\n    `k` and `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Scale parameter.\n\n    λ: number (optional)\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.weibull.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `λ` and `k`:\n    > rand = base.random.weibull.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.weibull.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.weibull.NAME\n    'weibull'\n\n\nbase.random.weibull.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.weibull.PRNG;\n\n\nbase.random.weibull.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.weibull.SEED;\n\n",
	"base.rempio2": "\nbase.rempio2( x, y )\n    Computes `x - nπ/2 = r`.\n\n    The function returns `n` and stores the remainder `r` as the two numbers\n    `y[0]` and `y[1]`, such that `y[0] + y[1] = r`.\n\n    For input values larger than `2^20 * π/2` in magnitude, the function only\n    returns the last three binary digits of `n` and not the full result.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: Array|TypedArray|Object\n        Remainder elements.\n\n    Returns\n    -------\n    n: integer\n        Factor of `π/2`.\n\n    Examples\n    --------\n    > var y = new Array( 2 );\n    > var n = base.rempio2( 128.0, y )\n    81\n    > var y1 = y[ 0 ]\n    ~0.765\n    > var y2 = y[ 1 ]\n    ~3.618e-17\n\n\n",
	"base.reldiff": "\nbase.reldiff( x, y[, scale] )\n    Computes the relative difference of two real numbers.\n\n    By default, the function scales the absolute difference by dividing the\n    absolute difference by the maximum absolute value of `x` and `y`. To scale\n    by a different function, specify a scale function name.\n\n    The following `scale` functions are supported:\n\n    - 'max-abs': maximum absolute value of `x` and `y` (default).\n    - 'max': maximum value of `x` and `y`.\n    - 'min-abs': minimum absolute value of `x` and `y`.\n    - 'min': minimum value of `x` and `y`.\n    - 'mean-abs': arithmetic mean of the absolute values of `x` and `y`.\n    - 'mean': arithmetic mean of `x` and `y`.\n    - 'x': `x` (*noncommutative*).\n    - 'y': `y` (*noncommutative*).\n\n    To use a custom scale function, provide a function which accepts two numeric\n    arguments `x` and `y`.\n\n    If the absolute difference of `x` and `y` is `0`, the relative difference is\n    always `0`.\n\n    If `|x| = |y| = infinity`, the function returns `NaN`.\n\n    If `|x| = |-y| = infinity`, the relative difference is `+infinity`.\n\n    If a `scale` function returns `0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    scale: string|Function\n        Scale function. Default: `'max-abs'`.\n\n    Returns\n    -------\n    out: number\n        Relative difference.\n\n    Examples\n    --------\n    > var d = base.reldiff( 2.0, 5.0 )\n    0.6\n    > d = base.reldiff( -1.0, 3.14 )\n    ~1.318\n    > d = base.reldiff( -2.0, 5.0, 'max-abs' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'max' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'min-abs' )\n    3.5\n    > d = base.reldiff( -2.0, 5.0, 'min' )\n    3.5\n    > d = base.reldiff( -2.0, 5.0, 'mean-abs' )\n    2.0\n    > d = base.reldiff( -2.0, 5.0, 'mean' )\n    ~4.67\n    > d = base.reldiff( -2.0, 5.0, 'x' )\n    3.5\n    > d = base.reldiff( 5.0, -2.0, 'x' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'y' )\n    1.4\n    > d = base.reldiff( 5.0, -2.0, 'y' )\n    3.5\n\n    // Custom scale function:\n    > function scale( x, y ) {\n    >     var s;\n    >\n    >     x = base.abs( x );\n    >     y = base.abs( y );\n    >\n    >     // Maximum absolute value:\n    >     s = (x < y ) ? y : x;\n    >\n    >     // Scale in units of epsilon:\n    >     return s * EPS;\n    > };\n    > d = base.reldiff( 12.15, 12.149999999999999, scale )\n    ~0.658\n\n    See Also\n    --------\n    base.absdiff, base.epsdiff\n",
	"base.rotl32": "\nbase.rotl32( x, shift )\n    Performs a bitwise rotation to the left.\n\n    If `shift = 0`, the function returns `x`.\n\n    If `shift >= 32`, the function only considers the five least significant\n    bits of `shift` (i.e., `shift % 32`).\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    shift: integer\n        Number of bits to shift.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var x = 2147483649;\n    > var bStr = base.toBinaryStringUint32( x )\n    '10000000000000000000000000000001'\n    > var y = base.rotl32( x, 10 )\n    1536\n    > bstr = base.toBinaryStringUint32( y )\n    '00000000000000000000011000000000'\n\n    See Also\n    --------\n    base.rotr32\n",
	"base.rotr32": "\nbase.rotr32( x, shift )\n    Performs a bitwise rotation to the right.\n\n    If `shift = 0`, the function returns `x`.\n\n    If `shift >= 32`, the function only considers the five least significant\n    bits of `shift` (i.e., `shift % 32`).\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    shift: integer\n        Number of bits to shift.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var x = 1;\n    > var bStr = base.toBinaryStringUint32( x )\n    '00000000000000000000000000000001'\n    > var y = base.rotr32( x, 10 )\n    4194304\n    > bstr = base.toBinaryStringUint32( y )\n    '00000000010000000000000000000000'\n\n    See Also\n    --------\n    base.rotl32\n",
	"base.risingFactorial": "\nbase.risingFactorial( x, n )\n    Computes the rising factorial of `x` and `n`.\n\n    If provided a non-integer for `n`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    n: integer\n        Second function parameter.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.risingFactorial( 0.9, 5 )\n    ~94.766\n    > v = base.risingFactorial( -9.0, 3 )\n    -504.0\n    > v = base.risingFactorial( 0.0, 2 )\n    0.0\n    > v = base.risingFactorial( 3.0, -2 )\n    0.5\n\n    See Also\n    --------\n    base.fallingFactorial\n",
	"base.round": "\nbase.round( x )\n    Rounds a numeric value to the nearest integer.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round( 3.14 )\n    3.0\n    > y = base.round( -4.2 )\n    -4.0\n    > y = base.round( -4.6 )\n    -5.0\n    > y = base.round( 9.5 )\n    10.0\n    > y = base.round( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.floor, base.roundn, base.trunc\n",
	"base.round10": "\nbase.round10( x )\n    Rounds a numeric value to the nearest power of ten on a linear scale.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round10( 3.14 )\n    1.0\n    > y = base.round10( -4.2 )\n    -1.0\n    > y = base.round10( -4.6 )\n    -1.0\n    > y = base.round10( 9.5 )\n    10.0\n    > y = base.round10( 13.0 )\n    10.0\n    > y = base.round10( -13.0 )\n    -10.0\n    > y = base.round10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor10, base.round, base.round2\n",
	"base.round2": "\nbase.round2( x )\n    Rounds a numeric value to the nearest power of two on a linear scale.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round2( 3.14 )\n    4.0\n    > y = base.round2( -4.2 )\n    -4.0\n    > y = base.round2( -4.6 )\n    -4.0\n    > y = base.round2( 9.5 )\n    8.0\n    > y = base.round2( 13.0 )\n    16.0\n    > y = base.round2( -13.0 )\n    -16.0\n    > y = base.round2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor2, base.round, base.round10\n",
	"base.roundb": "\nbase.roundb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` on a linear scale.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.roundb( 3.14159, -2, 10 )\n    3.14\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.roundb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two:\n    > y = base.roundb( 5.0, 1, 2 )\n    6.0\n\n    See Also\n    --------\n    base.ceilb, base.floorb, base.round, base.roundn\n",
	"base.roundn": "\nbase.roundn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n`.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.roundn( 3.14159, -2 )\n    3.14\n\n    // If `n = 0`, standard round behavior:\n    > y = base.roundn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.roundn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floorn, base.round, base.roundb\n",
	"base.roundsd": "\nbase.roundsd( x, n[, b] )\n    Rounds a numeric value to the nearest number with `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.roundsd( 3.14159, 3 )\n    3.14\n    > y = base.roundsd( 3.14159, 1 )\n    3.0\n    > y = base.roundsd( 12368.0, 2 )\n    12000.0\n    > y = base.roundsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floorsd, base.round, base.truncsd\n",
	"base.sasum": "\nbase.sasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.sasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.sasum( N, x1, stride )\n    12.0\n\n\nbase.sasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.sasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum\n",
	"base.saxpy": "\nbase.saxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy( x.length, alpha, x, 1, y, 1 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy( N, alpha, x, 2, y, -1 )\n    <Float32Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.saxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float32Array>[ 40.0, 33.0, 22.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.saxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy\n",
	"base.scopy": "\nbase.scopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy( x.length, x, 1, y, 1 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy( N, x, -2, y, 1 )\n    <Float32Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.scopy( N, x1, -2, y1, 1 )\n    <Float32Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.scopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n",
	"base.setHighWord": "\nbase.setHighWord( x, high )\n    Sets the more significant 32 bits of a double-precision floating-point\n    number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    high: integer\n        Unsigned 32-bit integer to replace the higher order word of `x`.\n\n    Returns\n    -------\n    out: number\n        Double having the same lower order word as `x`.\n\n    Examples\n    --------\n    // Set the higher order bits of `+infinity` to return `1`:\n    > var high = 1072693248 >>> 0;\n    > var y = base.setHighWord( PINF, high )\n    1.0\n\n    See Also\n    --------\n    base.getHighWord, base.setLowWord\n",
	"base.setLowWord": "\nbase.setLowWord( x, low )\n    Sets the less significant 32 bits of a double-precision floating-point\n    number.\n\n    Setting the lower order bits of `NaN` or positive or negative infinity will\n    return `NaN`, as `NaN` is defined as a double whose exponent bit sequence is\n    all ones and whose fraction can be any bit sequence except all zeros.\n    Positive and negative infinity are defined as doubles with an exponent bit\n    sequence equal to all ones and a fraction equal to all zeros. Hence,\n    changing the less significant bits of positive and negative infinity\n    converts each value to `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    low: integer\n        Unsigned 32-bit integer to replace the lower order word of `x`.\n\n    Returns\n    -------\n    out: number\n        Double having the same higher order word as `x`.\n\n    Examples\n    --------\n    > var low = 5 >>> 0;\n    > var x = 3.14e201;\n    > var y = base.setLowWord( x, low )\n    3.139998651394392e+201\n\n    // Special cases:\n    > var low = 12345678;\n    > var y = base.setLowWord( PINF, low )\n    NaN\n    > y = base.setLowWord( NINF, low )\n    NaN\n    > y = base.setLowWord( NaN, low )\n    NaN\n\n    See Also\n    --------\n    base.getLowWord, base.setHighWord\n",
	"base.sici": "\nbase.sici( [out,] x )\n    Computes the sine and cosine integrals.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Sine and cosine integrals.\n\n    Examples\n    --------\n    > var y = base.sici( 3.0 )\n    [ ~1.849, ~0.12 ]\n    > y = base.sici( 0.0 )\n    [ 0.0, -Infinity ]\n    > y = base.sici( -9.0 )\n    [ ~-1.665, ~0.055 ]\n    > y = base.sici( NaN )\n    [ NaN, NaN ]\n\n    // Provide an output array:\n    > var out = new Float64Array( 2 );\n    > y = base.sici( 3.0 )\n    <Float64Array>[ ~1.849, ~0.12 ]\n    > var bool = ( y === out )\n    true\n\n",
	"base.signbit": "\nbase.signbit( x )\n    Returns a boolean indicating if the sign bit is on (true) or off (false).\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if sign bit is on or off.\n\n    Examples\n    --------\n    > var bool = base.signbit( 4.0 )\n    false\n    > bool = base.signbit( -9.14e-34 )\n    true\n    > bool = base.signbit( 0.0 )\n    false\n    > bool = base.signbit( -0.0 )\n    true\n\n    See Also\n    --------\n    base.signbitf\n",
	"base.signbitf": "\nbase.signbitf( x )\n    Returns a boolean indicating if the sign bit is on (true) or off (false).\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if sign bit is on or off.\n\n    Examples\n    --------\n    > var bool = base.signbitf( base.float64ToFloat32( 4.0 ) )\n    false\n    > bool = base.signbitf( base.float64ToFloat32( -9.14e-34 ) )\n    true\n    > bool = base.signbitf( 0.0 )\n    false\n    > bool = base.signbitf( -0.0 )\n    true\n\n    See Also\n    --------\n    base.signbit\n",
	"base.significandf": "\nbase.significandf( x )\n    Returns an integer corresponding to the significand of a single-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Significand.\n\n    Examples\n    --------\n    > var s = base.significandf( base.float64ToFloat32( 3.14e34 ) )\n    4293751\n    > s = base.significandf( base.float64ToFloat32( 3.14e-34 ) )\n    5288021\n    > s = base.significandf( base.float64ToFloat32( -3.14 ) )\n    4781507\n    > s = base.significandf( 0.0 )\n    0\n    > s = base.significandf( NaN )\n    4194304\n\n",
	"base.signum": "\nbase.signum( x )\n    Evaluates the signum function.\n\n    Value | Sign\n    ----- | -----\n    x > 0 |    +1\n    x < 0 |    -1\n        0 |     0\n       -0 |    -0\n      NaN |   NaN\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    sign: number\n        Function value.\n\n    Examples\n    --------\n    > var sign = base.signum( -5.0 )\n    -1.0\n    > sign = base.signum( 5.0 )\n    1.0\n    > sign = base.signum( -0.0 )\n    -0.0\n    > sign = base.signum( 0.0 )\n    0.0\n    > sign = base.signum( NaN )\n    NaN\n\n",
	"base.sin": "\nbase.sin( x )\n    Computes the sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Sine.\n\n    Examples\n    --------\n    > var y = base.sin( 0.0 )\n    ~0.0\n    > y = base.sin( PI/2.0 )\n    ~1.0\n    > y = base.sin( -PI/6.0 )\n    ~-0.5\n    > y = base.sin( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sinpi, base.tan\n",
	"base.sinc": "\nbase.sinc( x )\n    Computes the normalized cardinal sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cardinal sine.\n\n    Examples\n    --------\n    > var y = base.sinc( 0.5 )\n    ~0.637\n    > y = base.sinc( -1.2 )\n    ~-0.156\n    > y = base.sinc( 0.0 )\n    1.0\n    > y = base.sinc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sin\n",
	"base.sincos": "\nbase.sincos( [out,] x )\n    Simultaneously computes the sine and cosine of a number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Destination array.\n\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        Sine and cosine.\n\n    Examples\n    --------\n    > var y = base.sincos( 0.0 )\n    [ ~0.0, ~1.0 ]\n    > y = base.sincos( PI/2.0 )\n    [ ~1.0, ~0.0 ]\n    > y = base.sincos( -PI/6.0 )\n    [ ~-0.5, ~0.866 ]\n    > y = base.sincos( NaN )\n    [ NaN, NaN ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.sincos( out, 0.0 )\n    <Float64Array>[ ~0.0, ~1.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cos, base.sin, base.sincospi\n",
	"base.sincospi": "\nbase.sincospi( [out,] x )\n    Simultaneously computes the sine and cosine of a number times π.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Destination array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        Two-element array containing sin(πx) and cos(πx).\n\n    Examples\n    --------\n    > var y = base.sincospi( 0.0 )\n    [ 0.0, 1.0 ]\n    > y = base.sincospi( 0.5 )\n    [ 1.0, 0.0 ]\n    > y = base.sincospi( 0.1 )\n    [ ~0.309, ~0.951 ]\n    > y = base.sincospi( NaN )\n    [ NaN, NaN ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.sincospi( out, 0.0 )\n    <Float64Array>[ 0.0, 1.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cospi, base.sincos, base.sinpi\n",
	"base.sinh": "\nbase.sinh( x )\n    Computes the hyperbolic sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Hyperbolic sine.\n\n    Examples\n    --------\n    > var y = base.sinh( 0.0 )\n    0.0\n    > y = base.sinh( 2.0 )\n    ~3.627\n    > y = base.sinh( -2.0 )\n    ~-3.627\n    > y = base.sinh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cosh, base.sin, base.tanh\n",
	"base.sinpi": "\nbase.sinpi( x )\n    Computes the value of `sin(πx)`.\n\n    The function computes `sin(πx)` more accurately than the obvious approach,\n    especially for large `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.sinpi( 0.0 )\n    0.0\n    > y = base.sinpi( 0.5 )\n    1.0\n    > y = base.sinpi( 0.9 )\n    ~0.309\n    > y = base.sinpi( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sin\n",
	"base.spence": "\nbase.spence( x )\n    Evaluates Spence’s function, which is also known as the dilogarithm.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.spence( 3.0 )\n    ~-1.437\n    > y = base.spence( 0.0 )\n    ~1.645\n    > y = base.spence( -9.0 )\n    NaN\n    > y = base.spence( NaN )\n    NaN\n\n",
	"base.sqrt": "\nbase.sqrt( x )\n    Computes the principal square root.\n\n    For `x < 0`, the principal square root is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Principal square root.\n\n    Examples\n    --------\n    > var y = base.sqrt( 4.0 )\n    2.0\n    > y = base.sqrt( 9.0 )\n    3.0\n    > y = base.sqrt( 0.0 )\n    0.0\n    > y = base.sqrt( -4.0 )\n    NaN\n    > y = base.sqrt( NaN )\n    NaN\n\n",
	"base.sqrt1pm1": "\nbase.sqrt1pm1( x )\n    Computes the principal square root of `1+x` minus one.\n\n    This function is more accurate than the obvious approach for small `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Square root of `1+x` minus one.\n\n    Examples\n    --------\n    > var y = base.sqrt1pm1( 3.0 )\n    1.0\n    > y = base.sqrt1pm1( 0.5 )\n    ~0.225\n    > y = base.sqrt1pm1( 0.02 )\n    ~0.01\n    > y = base.sqrt1pm1( -0.5 )\n    ~-0.292\n    > y = base.sqrt1pm1( -1.1 )\n    NaN\n    > y = base.sqrt1pm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sqrt\n",
	"base.sumSeries": "\nbase.sumSeries( generator[, options] )\n    Sum the elements of the series given by the supplied function.\n\n    Parameters\n    ----------\n    generator: Function\n        Series function.\n\n    options: Object (optional)\n        Options.\n\n    options.maxTerms: integer (optional)\n        Maximum number of terms to be added. Default: `1000000`.\n\n    options.tolerance: number (optional)\n        Further terms are only added as long as the next term is greater than\n        the current term times the tolerance. Default: `2.22e-16`.\n\n    options.initialValue: number (optional)\n        Initial value of the resulting sum. Default: `0`.\n\n    Returns\n    -------\n    out: number\n        Sum of series terms.\n\n    Examples\n    --------\n    // Using an ES6 generator function:\n    > function* geometricSeriesGenerator( x ) {\n    >     var exponent = 0;\n    >     while ( true ) {\n    >         yield Math.pow( x, exponent );\n    >         exponent += 1;\n    >     }\n    > }\n    > var gen = geometricSeriesGenerator( 0.9 );\n    > var out = base.sumSeries( gen )\n    10\n\n    // Using a closure:\n    > function geometricSeriesClosure( x ) {\n    >     var exponent = -1;\n    >     return function() {\n    >         exponent += 1;\n    >         return Math.pow( x, exponent );\n    >     };\n    > }\n    > gen = geometricSeriesClosure( 0.9 )\n    > out = base.sumSeries( gen )\n    10\n\n    // Setting an initial value for the sum:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'initialValue': 1 } )\n    3\n    // Changing the maximum number of terms to be summed:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'maxTerms': 10 } )\n    ~1.998 // Infinite sum is 2\n    // Adjusting the used tolerance:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'tolerance': 1e-3 } )\n    ~1.998\n\n",
	"base.tan": "\nbase.tan( x )\n    Computes the tangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Tangent.\n\n    Examples\n    --------\n    > var y = base.tan( 0.0 )\n    ~0.0\n    > y = base.tan( -PI/4.0 )\n    ~-1.0\n    > y = base.tan( PI/4.0 )\n    ~1.0\n    > y = base.tan( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sin\n",
	"base.tanh": "\nbase.tanh( x )\n    Computes the hyperbolic tangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Hyperbolic tangent.\n\n    Examples\n    --------\n    > var y = base.tanh( 0.0 )\n    0.0\n    > var y = base.tanh( -0.0 )\n    -0.0\n    > y = base.tanh( 2.0 )\n    ~0.964\n    > y = base.tanh( -2.0 )\n    ~-0.964\n    > y = base.tanh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cosh, base.sinh, base.tan\n",
	"base.toBinaryString": "\nbase.toBinaryString( x )\n    Returns a string giving the literal bit representation of a double-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    bstr: string\n        Bit representation.\n\n    Examples\n    --------\n    > var str = base.toBinaryString( 4.0 )\n    '0100000000010000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( PI )\n    '0100000000001001001000011111101101010100010001000010110100011000'\n    > str = base.toBinaryString( -1.0e308 )\n    '1111111111100001110011001111001110000101111010111100100010100000'\n    > str = base.toBinaryString( -3.14e-320 )\n    '1000000000000000000000000000000000000000000000000001100011010011'\n    > str = base.toBinaryString( 5.0e-324 )\n    '0000000000000000000000000000000000000000000000000000000000000001'\n    > str = base.toBinaryString( 0.0 )\n    '0000000000000000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( -0.0 )\n    '1000000000000000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( NaN )\n    '0111111111111000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( PINF )\n    '0111111111110000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( NINF )\n    '1111111111110000000000000000000000000000000000000000000000000000'\n\n    See Also\n    --------\n    base.fromBinaryString, base.toBinaryStringf\n",
	"base.toBinaryStringf": "\nbase.toBinaryStringf( x )\n    Returns a string giving the literal bit representation of a single-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var str = base.toBinaryStringf( base.float64ToFloat32( 4.0 ) )\n    '01000000100000000000000000000000'\n    > str = base.toBinaryStringf( base.float64ToFloat32( PI ) )\n    '01000000010010010000111111011011'\n    > str = base.toBinaryStringf( base.float64ToFloat32( -1.0e38 ) )\n    '11111110100101100111011010011001'\n    > str = base.toBinaryStringf( base.float64ToFloat32( -3.14e-39 ) )\n    '10000000001000100011000100001011'\n    > str = base.toBinaryStringf( base.float64ToFloat32( 1.4e-45 ) )\n    '00000000000000000000000000000001'\n    > str = base.toBinaryStringf( 0.0 )\n    '00000000000000000000000000000000'\n    > str = base.toBinaryStringf( -0.0 )\n    '10000000000000000000000000000000'\n    > str = base.toBinaryStringf( NaN )\n    '01111111110000000000000000000000'\n    > str = base.toBinaryStringf( FLOAT32_PINF )\n    '01111111100000000000000000000000'\n    > str = base.toBinaryStringf( FLOAT32_NINF )\n    '11111111100000000000000000000000'\n\n    See Also\n    --------\n    base.fromBinaryStringf, base.toBinaryString\n",
	"base.toBinaryStringUint16": "\nbase.toBinaryStringUint16( x )\n    Returns a string giving the literal bit representation of an unsigned 16-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 16-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 16-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned\n    16-bit integers. Accordingly, care should be taken to ensure that only\n    nonnegative integer values less than `65536` (`2^16`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint16Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint16( a[ 0 ] )\n    '0000000000000001'\n    > str = base.toBinaryStringUint16( a[ 1 ] )\n    '0000000000000100'\n    > str = base.toBinaryStringUint16( a[ 2 ] )\n    '0000000000001001'\n\n    See Also\n    --------\n    base.toBinaryString\n",
	"base.toBinaryStringUint32": "\nbase.toBinaryStringUint32( x )\n    Returns a string giving the literal bit representation of an unsigned 32-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 32-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 32-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned\n    32-bit integers. Accordingly, care should be taken to ensure that only\n    nonnegative integer values less than `4,294,967,296` (`2^32`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint32Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint32( a[ 0 ] )\n    '00000000000000000000000000000001'\n    > str = base.toBinaryStringUint32( a[ 1 ] )\n    '00000000000000000000000000000100'\n    > str = base.toBinaryStringUint32( a[ 2 ] )\n    '00000000000000000000000000001001'\n\n    See Also\n    --------\n    base.toBinaryString\n",
	"base.toBinaryStringUint8": "\nbase.toBinaryStringUint8( x )\n    Returns a string giving the literal bit representation of an unsigned 8-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 8-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 8-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned 8-bit\n    integers. Accordingly, care should be taken to ensure that only nonnegative\n    integer values less than `256` (`2^8`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint8Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint8( a[ 0 ] )\n    '00000001'\n    > str = base.toBinaryStringUint8( a[ 1 ] )\n    '00000100'\n    > str = base.toBinaryStringUint8( a[ 2 ] )\n    '00001001'\n\n    See Also\n    --------\n    base.toBinaryString\n",
	"base.toWordf": "\nbase.toWordf( x )\n    Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary\n    representation of a single-precision floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var f32 = base.float64ToFloat32( 1.337 )\n    1.3370000123977661\n    > var w = base.toWordf( f32 )\n    1068180177\n\n    See Also\n    --------\n    base.fromWordf, base.toWords\n",
	"base.toWords": "\nbase.toWords( [out,] x )\n    Splits a floating-point number into a higher order word (unsigned 32-bit\n    integer) and a lower order word (unsigned 32-bit integer).\n\n    When provided a destination object, the function returns an array with two\n    elements: a higher order word and a lower order word, respectively. The\n    lower order word contains the less significant bits, while the higher order\n    word contains the more significant bits and includes the exponent and sign.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Higher and lower order words.\n\n    Examples\n    --------\n    > var w = base.toWords( 3.14e201 )\n    [ 1774486211, 2479577218 ]\n\n    // Provide an output array:\n    > var out = new Uint32Array( 2 );\n    > w = base.toWords( out, 3.14e201 )\n    <Uint32Array>[ 1774486211, 2479577218 ]\n    > var bool = ( w === out )\n    true\n\n    See Also\n    --------\n    base.fromWords, base.toWordf",
	"base.trigamma": "\nbase.trigamma( x )\n    Evaluates the trigamma function.\n\n    If `x` is `0` or a negative `integer`, the `function` returns `NaN`.\n\n    If provided `NaN`, the `function` returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.trigamma( -2.5 )\n    ~9.539\n    > y = base.trigamma( 1.0 )\n    ~1.645\n    > y = base.trigamma( 10.0 )\n    ~0.105\n    > y = base.trigamma( NaN )\n    NaN\n    > y = base.trigamma( -1.0 )\n    NaN\n\n    See Also\n    --------\n    base.digamma, base.gamma\n",
	"base.trunc": "\nbase.trunc( x )\n    Rounds a numeric value toward zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc( 3.14 )\n    3.0\n    > y = base.trunc( -4.2 )\n    -4.0\n    > y = base.trunc( -4.6 )\n    -4.0\n    > y = base.trunc( 9.5 )\n    9.0\n    > y = base.trunc( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.floor, base.round\n",
	"base.trunc10": "\nbase.trunc10( x )\n    Rounds a numeric value to the nearest power of ten toward zero.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc10( 3.14 )\n    1.0\n    > y = base.trunc10( -4.2 )\n    -1.0\n    > y = base.trunc10( -4.6 )\n    -1.0\n    > y = base.trunc10( 9.5 )\n    1.0\n    > y = base.trunc10( 13.0 )\n    10.0\n    > y = base.trunc10( -13.0 )\n    -10.0\n    > y = base.trunc10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor10, base.round10, base.trunc, base.trunc2\n",
	"base.trunc2": "\nbase.trunc2( x )\n    Rounds a numeric value to the nearest power of two toward zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc2( 3.14 )\n    2.0\n    > y = base.trunc2( -4.2 )\n    -4.0\n    > y = base.trunc2( -4.6 )\n    -4.0\n    > y = base.trunc2( 9.5 )\n    8.0\n    > y = base.trunc2( 13.0 )\n    8.0\n    > y = base.trunc2( -13.0 )\n    -8.0\n    > y = base.trunc2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor2, base.round2, base.trunc, base.trunc10\n",
	"base.truncb": "\nbase.truncb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward zero.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.truncb( 3.14159, -4, 10 )\n    3.1415\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.truncb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two toward zero:\n    > y = base.truncb( 5.0, 1, 2 )\n    4.0\n\n    See Also\n    --------\n    base.ceilb, base.floorb, base.roundb, base.trunc, base.truncn\n",
	"base.truncn": "\nbase.truncn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward zero.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.truncn( 3.14159, -4 )\n    3.1415\n\n    // If `n = 0`, standard round behavior:\n    > y = base.truncn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.truncn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floorn, base.roundn, base.trunc, base.truncb\n",
	"base.truncsd": "\nbase.truncsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward zero with `n`\n    significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.truncsd( 3.14159, 5 )\n    3.1415\n    > y = base.truncsd( 3.14159, 1 )\n    3.0\n    > y = base.truncsd( 12368.0, 2 )\n    12000.0\n    > y = base.truncsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floorsd, base.roundsd, base.trunc\n",
	"base.uint32ToInt32": "\nbase.uint32ToInt32( x )\n    Converts an unsigned 32-bit integer to a signed 32-bit integer.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.uint32ToInt32( base.float64ToUint32( 4294967295 ) )\n    -1\n    > y = base.uint32ToInt32( base.float64ToUint32( 3 ) )\n    3\n\n",
	"base.vercos": "\nbase.vercos( x )\n    Computes the versed cosine.\n\n    The versed cosine is defined as `1 + cos(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Versed cosine.\n\n    Examples\n    --------\n    > var y = base.vercos( 3.14 )\n    ~0.0\n    > y = base.vercos( -4.2 )\n    ~0.5097\n    > y = base.vercos( -4.6 )\n    ~0.8878\n    > y = base.vercos( 9.5 )\n    ~0.0028\n    > y = base.vercos( -0.0 )\n    2.0\n\n    See Also\n    --------\n    base.cos, base.versin\n",
	"base.versin": "\nbase.versin( x )\n    Computes the versed sine.\n\n    The versed sine is defined as `1 - cos(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Versed sine.\n\n    Examples\n    --------\n    > var y = base.versin( 3.14 )\n    ~2.0\n    > y = base.versin( -4.2 )\n    ~1.490\n    > y = base.versin( -4.6 )\n    ~1.112\n    > y = base.versin( 9.5 )\n    ~1.997\n    > y = base.versin( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.cos, base.sin, base.vercos\n",
	"base.wrap": "\nbase.wrap( v, min, max )\n    Wraps a value on the half-open interval `[min,max)`.\n\n    The function does not distinguish between positive and negative zero. Where\n    appropriate, the function returns positive zero.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Value to wrap.\n\n    min: number\n        Minimum value.\n\n    max: number\n        Maximum value.\n\n    Returns\n    -------\n    y: number\n        Wrapped value.\n\n    Examples\n    --------\n    > var y = base.wrap( 3.14, 0.0, 5.0 )\n    3.14\n    > y = base.wrap( -3.14, 0.0, 5.0 )\n    ~1.86\n    > y = base.wrap( 3.14, 0.0, 3.0 )\n    ~0.14\n    > y = base.wrap( -0.0, 0.0, 5.0 )\n    0.0\n    > y = base.wrap( 0.0, -3.14, -0.0 )\n    -3.14\n    > y = base.wrap( NaN, 0.0, 5.0 )\n    NaN\n\n    See Also\n    --------\n    base.clamp\n",
	"base.xlogy": "\nbase.xlogy( x, y )\n    Computes `x * ln(y)` so that the result is `0` if `x = 0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var out = base.xlogy( 3.0, 2.0 )\n    ~2.079\n    > out = base.xlogy( 1.5, 5.9 )\n    ~2.662\n    > out = base.xlogy( 0.9, 1.0 )\n    0.0\n    > out = base.xlogy( 0.0, -2.0 )\n    0.0\n    > out = base.xlogy( 1.5, NaN )\n    NaN\n    > out = base.xlogy( 0.0, NaN )\n    NaN\n    > out = base.xlogy( NaN, 2.3 )\n    NaN\n\n    See Also\n    --------\n    base.ln, base.xlog1py\n",
	"base.xlog1py": "\nbase.xlog1py( x, y )\n    Computes `x * ln(y+1)` so that the result is `0` if `x = 0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var out = base.xlog1py( 3.0, 2.0 )\n    ~3.296\n    > out = base.xlog1py( 1.5, 5.9 )\n    ~2.897\n    > out = base.xlog1py( 0.9, 1.0 )\n    ~0.624\n    > out = base.xlog1py( 1.0, 0.0 )\n    0.0\n    > out = base.xlog1py( 0.0, -2.0 )\n    0.0\n    > out = base.xlog1py( 1.5, NaN )\n    NaN\n    > out = base.xlog1py( 0.0, NaN )\n    NaN\n    > out = base.xlog1py( NaN, 2.3 )\n    NaN\n\n    See Also\n    --------\n    base.log1p, base.xlogy\n",
	"base.zeta": "\nbase.zeta( s )\n    Evaluates the Riemann zeta function as a function of a real variable `s`.\n\n    Parameters\n    ----------\n    s: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.zeta( 1.1 )\n    ~10.584\n    > y = base.zeta( -4.0 )\n    0.0\n    > y = base.zeta( 70.0 )\n    1.0\n    > y = base.zeta( 0.5 )\n    ~-1.46\n    > y = base.zeta( NaN )\n    NaN\n\n    // Evaluate at a pole:\n    > y = base.zeta( 1.0 )\n    NaN\n\n",
	"bifurcate": "\nbifurcate( collection, [options,] filter )\n    Splits values into two groups.\n\n    If an element in `filter` is truthy, then the corresponding element in the\n    input collection belongs to the first group; otherwise, the collection\n    element belongs to the second group.\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    filter: Array|TypedArray|Object\n        A collection indicating which group an element in the input collection\n        belongs to. If an element in `filter` is truthy, the corresponding\n        element in `collection` belongs to the first group; otherwise, the\n        collection element belongs to the second group. If provided an object,\n        the object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var f = [ true, true, false, true ];\n    > var out = bifurcate( collection, f )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n    > f = [ 1, 1, 0, 1 ];\n    > out = bifurcate( collection, f )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as indices:\n    > f = [ true, true, false, true ];\n    > var opts = { 'returns': 'indices' };\n    > out = bifurcate( collection, opts, f )\n    [ [ 0, 1, 3 ], [ 2 ] ]\n\n    // Output group results as index-element pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcate( collection, opts, f )\n    [ [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], [ [2, 'foo'] ] ]\n\n    See Also\n    --------\n    bifurcateBy, bifurcateOwn, group\n",
	"bifurcateBy": "\nbifurcateBy( collection, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If a predicate function returns a truthy value, a collection value is\n    placed in the first group; otherwise, a collection value is placed in the\n    second group.\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function predicate( v ) { v[ 0 ] === 'b' };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = bifurcateBy( collection, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > out = bifurcateBy( collection, opts, predicate )\n    [ [ 0, 1, 3 ], [ 2 ] ]\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateBy( collection, opts, predicate )\n    [ [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], [ [2, 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, groupBy\n",
	"bifurcateByAsync": "\nbifurcateByAsync( collection, [options,] predicate, done )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an predicate function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If a predicate function calls the `next` callback with a truthy group value,\n    a collection value is placed in the first group; otherwise, a collection\n    value is placed in the second group.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty array as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    [ [ 1000, 3000 ], [ 2500 ] ]\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > bifurcateByAsync( arr, opts, predicate, done )\n    1000\n    2500\n    3000\n    [ [ 2, 0 ], [ 1 ] ]\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > bifurcateByAsync( arr, opts, predicate done )\n    1000\n    2500\n    3000\n    [ [ [ 2, 1000 ], [ 0, 3000 ] ], [ [ 1, 2500 ] ] ]\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n\n    // Process sequentially:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n\n\nbifurcateByAsync.factory( [options,] predicate )\n    Returns a function which splits values into two groups according to an\n    predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which splits values into two groups.\n\n    Examples\n    --------\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = bifurcateByAsync.factory( opts, predicate );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    [ [ 2000, 1000 ], [ 1500 ] ]\n\n    See Also\n    --------\n    bifurcateBy, groupByAsync\n",
	"bifurcateIn": "\nbifurcateIn( obj, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    If a predicate function returns a truthy value, a value is placed in the\n    first group; otherwise, a value is placed in the second group.\n\n    If provided an empty object with no prototype, the function returns an empty\n    array.\n\n    The function iterates over an object's own and inherited properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\n    > Foo.prototype = Object.create( null );\n    > Foo.prototype.c = 'foo';\n    > Foo.prototype.d = 'bar';\n    > var obj = new Foo();\n    > function predicate( v ) { v[ 0 ] === 'b' };\n    > var out = bifurcateIn( obj, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = bifurcateIn( obj, opts, predicate )\n    [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateIn( obj, opts, predicate )\n    [ [ ['a', 'beep'], ['b', 'boop'], ['d', 'bar'] ], [ ['c', 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, bifurcateBy, bifurcateOwn, groupIn\n",
	"bifurcateOwn": "\nbifurcateOwn( obj, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    If a predicate function returns a truthy value, a value is placed in the\n    first group; otherwise, a value is placed in the second group.\n\n    If provided an empty object, the function returns an empty array.\n\n    The function iterates over an object's own properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function predicate( v ) { v[ 0 ] === 'b' };\n    > var obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\n    > var out = bifurcateOwn( obj, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = bifurcateOwn( obj, opts, predicate )\n    [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateOwn( obj, opts, predicate )\n    [ [ ['a', 'beep'], ['b', 'boop'], ['d', 'bar'] ], [ ['c', 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, bifurcateBy, bifurcateIn, groupOwn\n",
	"Buffer": "\nBuffer\n    Buffer constructor.\n\n\nBuffer( size )\n    Allocates a buffer having a specified number of bytes.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes to allocate.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = new Buffer( 4 )\n    <Buffer>\n\n\nBuffer( buffer )\n    Copies buffer data to a new Buffer instance.\n\n    Parameters\n    ----------\n    buffer: Buffer\n        Buffer to copy from.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b1 = new Buffer( [ 1, 2, 3, 4 ] );\n    > var b2 = new Buffer( b1 )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n\nBuffer( array )\n    Allocates a buffer using an array of octets.\n\n    Parameters\n    ----------\n    array: Array\n        Array of octets.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = new Buffer( [ 1, 2, 3, 4 ] )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n\nBuffer( str[, encoding] )\n    Allocates a buffer containing a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    encoding: string (optional)\n        Character encoding. Default: 'utf8'.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = new Buffer( 'beep boop' )\n    <Buffer>\n\n\nTODO: add methods and properties\n\n\n    See Also\n    --------\n    ArrayBuffer\n",
	"buffer2json": "\nbuffer2json( buffer )\n    Returns a JSON representation of a buffer.\n\n    The returned JSON object has the following properties:\n\n    - type: value type\n    - data: buffer data as a generic array\n\n    Parameters\n    ----------\n    buffer: Buffer\n        Buffer to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var buf = new allocUnsafe( 2 );\n    > buf[ 0 ] = 1;\n    > buf[ 1 ] = 2;\n    > var json = buffer2json( buf )\n    { 'type': 'Buffer', 'data': [ 1, 2 ] }\n\n    See Also\n    --------\n    typedarray2json, reviveBuffer\n",
	"capitalize": "\ncapitalize( str )\n    Capitalizes the first character in a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Capitalized string.\n\n    Examples\n    --------\n    > var out = capitalize( 'beep' )\n    'Beep'\n    > out = capitalize( 'Boop' )\n    'Boop'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n",
	"capitalizeKeys": "\ncapitalizeKeys( obj )\n    Converts the first letter of each object key to uppercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'aa': 1, 'bb': 2 };\n    > var out = capitalizeKeys( obj )\n    { 'Aa': 1, 'Bb': 2 }\n\n    See Also\n    --------\n    uncapitalizeKeys, uppercaseKeys\n",
	"CATALAN": "\nCATALAN\n    Catalan's constant.\n\n    Examples\n    --------\n    > CATALAN\n    0.915965594177219\n\n",
	"CBRT_EPS": "\nCBRT_EPS\n    Cube root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > CBRT_EPS\n    0.0000060554544523933395\n\n    See Also\n    --------\n    EPS, SQRT_EPS\n",
	"chdir": "\nchdir( path )\n    Changes the current working directory.\n\n    If unable to set the current working directory (e.g., due to a non-existent\n    path), the function returns an error; otherwise, the function returns\n    `null`.\n\n    Parameters\n    ----------\n    path: string\n        Desired working directory.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = chdir( '/path/to/current/working/directory' )\n\n    See Also\n    --------\n    cwd\n",
	"chi2gof": "\nchi2gof( x, y[, ...params][, opts] )\n    Performs a chi-square goodness-of-fit test.\n\n    For an array or typed array of integers `x`, a chi-square goodness-of-fit is\n    computed for the null hypothesis that the values of `x` come from the\n    discrete distribution specified by `y`. `y` can be an `array` of expected\n    frequencies, an `array` of population probabilities that sum to one, or a\n    string with the name of the discrete distribution to test against. In the\n    latter case, the parameters of the distribution must be supplied as\n    additional arguments after `y`. The function returns an object holding the\n    calculated test statistic, the p-value of the test, as well as the test\n    decision.\n\n    By default, the p-value is computed using a chi-square distribution with\n    `k - 1` degrees of freedom, where `k` is the number of levels of `x`. In\n    case distribution parameters were estimated for the calculation of `y`, the\n    degrees of freedom have to be corrected. The `ddof` option can be set to use\n    `n - ddof - 1` degrees of freedom.\n\n    The chi-square approximation may be incorrect if the observed or expected\n    frequencies in each category are too small. It is common to require\n    frequencies greater than five.\n\n    Instead of relying on the chi-square approximation when calculating the\n    p-value, Monte Carlo simulation can be used. To do so, set the `simulate`\n    option. The simulation is carried out by resampling from the discrete\n    distribution given by `y`. By default, `500` iterations are used for the\n    simulation. To set a custom number of iterations, use the `iterations`\n    option.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Observation frequencies.\n\n    y: Array<number>|string\n         Array of expected values or probabilities or a string denoting the name\n         of a distribution.\n\n    params: ...number (optional)\n        Distribution parameters passed to mean function.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.ddof: number (optional)\n        Nonnegative integer giving the \"delta degrees of freedom\" adjustment.\n        Default: `0`.\n\n    options.simulate: boolean (optional)\n        Boolean indicating whether to compute p-values by Monte Carlo\n        simulation. The simulation is carried out by resampling from the\n        discrete distribution given by `p`. Default: `false`.\n\n    options.iterations: number (optional)\n        Positive integer specifying the number of Monte Carlo iterations.\n        Default: `500`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.df: number\n        Degrees of freedom.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Use probabilities for `y`:\n    > var x = [ 89, 37, 30, 28, 2 ];\n    > var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n    > var out = chi2gof( x, p )\n    { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n    > var table = out.print()\n    Null hypothesis: population probabilities are equal to those in p\n        pValue: 0.0406\n        statistic: 9.9901\n        degrees of freedom: 4\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    // Set significance level:\n    > out = chi2gof( x, p, { 'alpha': 0.01 });\n    > table = out.print()\n    Chi-square goodness-of-fit test\n\n    Null hypothesis: population probabilities are equal to those in p\n\n        pValue: 0.0406\n        statistic: 9.9901\n        degrees of freedom: 4\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n    // Calculate the p-value via Monte Carlo simulation:\n    > var x = [ 89, 37, 30, 28, 2 ];\n    > var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n    > var out = chi2gof( x, p, { 'simulate': true, 'iterations': 1000 })\n    {...}\n\n    // Verify that data comes from Poisson distribution:\n    > var lambda = 3.0;\n    > var rpois = base.random.poisson.factory( lambda );\n    > var len = 400;\n    > x = new Array( len );\n    > for ( var i = 0; i < len; i++ ) { x[ i ] = rpois(); }\n    // Generate frequency table:\n    > var freqs = [];\n    > for ( i = 0; i < len; i++ ) {\n    ...     val = x[ i ];\n    ...     freqs[ val ] === void 0 ? freqs[ val ] = 1 : freqs[ val ] += 1;\n    ... }\n    // Fill holes in array:\n    > for ( i = 0; i < freqs.length; i++ ) {\n    ...     if ( freqs[ i ] === void 0 ) { freqs[ i ] = 0; }\n    ... }\n    > out = chi2gof( freqs, 'poisson', lambda );\n    {...}\n\n",
	"complex": "\ncomplex( real, imag[, dtype] )\n    Creates a complex number.\n\n    The function supports the following data types:\n\n    - float64\n    - float32\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    z: Complex\n        Complex number.\n\n    Examples\n    --------\n    > var z = complex( 5.0, 3.0, 'float64' )\n    <Complex128>\n    > z = complex( 5.0, 3.0, 'float32' )\n    <Complex64>\n\n    See Also\n    --------\n    Complex128, Complex64\n",
	"Complex128": "\nComplex128( real, imag )\n    128-bit complex number constructor.\n\n    Both the real and imaginary components are stored as double-precision\n    floating-point numbers.\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    Returns\n    -------\n    z: Complex128\n        128-bit complex number.\n\n    z.re: number\n        Read-only property returning the real component.\n\n    z.im: number\n        Read-only property returning the imaginary component.\n\n    z.BYTES_PER_ELEMENT\n        Size (in bytes) of each component. Value: 8.\n\n    z.byteLength\n        Length (in bytes) of a complex number. Value: 16.\n\n    Examples\n    --------\n    > var z = Complex128( 5.0, 3.0 )\n    <Complex128>\n    > z.re\n    5.0\n    > z.im\n    3.0\n\n    See Also\n    --------\n    complex, Complex64\n",
	"COMPLEX128_NUM_BYTES": "\nCOMPLEX128_NUM_BYTES\n    Size (in bytes) of a 128-bit complex number.\n\n    Examples\n    --------\n    > COMPLEX128_NUM_BYTES\n    16\n\n    See Also\n    --------\n    COMPLEX64_NUM_BYTES, FLOAT64_NUM_BYTES\n",
	"Complex64": "\nComplex64( real, imag )\n    64-bit complex number constructor.\n\n    Both the real and imaginary components are stored as single-precision\n    floating-point numbers.\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    Returns\n    -------\n    z: Complex64\n        64-bit complex number.\n\n    z.re: number\n        Read-only property returning the real component.\n\n    z.im: number\n        Read-only property returning the imaginary component.\n\n    z.BYTES_PER_ELEMENT\n        Size (in bytes) of each component. Value: 4.\n\n    z.byteLength\n        Length (in bytes) of a complex number. Value: 8.\n\n    Examples\n    --------\n    > var z = Complex64( 5.0, 3.0 )\n    <Complex64>\n    > z.re\n    5.0\n    > z.im\n    3.0\n\n    See Also\n    --------\n    complex, Complex128\n",
	"COMPLEX64_NUM_BYTES": "\nCOMPLEX64_NUM_BYTES\n    Size (in bytes) of a 64-bit complex number.\n\n    Examples\n    --------\n    > COMPLEX64_NUM_BYTES\n    8\n\n    See Also\n    --------\n    COMPLEX128_NUM_BYTES, FLOAT32_NUM_BYTES\n",
	"compose": "\ncompose( ...f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as an argument\n    to the next function. The result of the leftmost function is the result\n    of the whole.\n\n    Notes:\n\n    - Only the rightmost function is explicitly permitted to accept multiple\n      arguments. All other functions are evaluated as unary functions.\n    - The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x ) {\n    ...    return 2 * x;\n    ... }\n    > function b( x ) {\n    ...    return x + 3;\n    ... }\n    > function c( x ) {\n    ...    return x / 5;\n    ... }\n    > var f = compose( c, b, a );\n    > var z = f( 6 )\n    3\n\n    See Also\n    --------\n    composeAsync\n",
	"composeAsync": "\ncomposeAsync( ...f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as the first argument\n    of the next function. The result of the leftmost function is the result\n    of the whole.\n\n    The last argument for each provided function is a `next` callback which\n    should be invoked upon function completion. The callback accepts two\n    arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a composed function calls the `next` callback with a truthy `error`\n    argument, the composite function suspends execution and immediately calls\n    the `done` callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Only the rightmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as binary functions.\n\n    The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, 2*x );\n    ...    }\n    ... };\n    > function b( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x+3 );\n    ...    }\n    ... };\n    > function c( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x/5 );\n    ...    }\n    ... };\n    > var f = composeAsync( c, b, a );\n    > function done( error, result ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( result );\n    ... };\n    > f( 6, done )\n    3\n\n    See Also\n    --------\n    compose\n",
	"configdir": "\nconfigdir( [p] )\n    Returns a directory for user-specific configuration files.\n\n    On Windows platforms, the function first checks for a `LOCALAPPDATA`\n    environment variable before checking for an `APPDATA` environment variable.\n    This means that machine specific user configuration files have precedence\n    over roaming user configuration files.\n\n    On non-Windows platforms, if the function is unable to locate the current\n    user's `home` directory, the function returns `null`. Similarly, on Windows\n    platforms, if the function is unable to locate an application data\n    directory, the function also returns `null`.\n\n    Parameters\n    ----------\n    p: string (optional)\n        Path to append to a base directory.\n\n    Returns\n    -------\n    out: string|null\n         Directory.\n\n    Examples\n    --------\n    > var dir = configdir()\n    e.g., '/Users/<username>/Library/Preferences'\n    > dir = configdir( 'appname/config' )\n    e.g., '/Users/<username>/Library/Preferences/appname/config'\n\n    See Also\n    --------\n    homedir, tmpdir\n",
	"conj": "\nconj( z )\n    Returns the complex conjugate of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    out: Complex\n        Complex conjugate.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > z.toString()\n    5 + 3i\n    > var v = conj( z );\n    > v.toString()\n    5 - 3i\n\n    See Also\n    --------\n    imag, real, reim\n",
	"constantFunction": "\nconstantFunction( val )\n    Creates a function which always returns the same value.\n\n    Notes:\n\n    - When provided an object reference, the returned `function` always returns\n      the same reference.\n\n    Parameters\n    ----------\n    val: any\n        Value to always return.\n\n    Returns\n    -------\n    out: Function\n        Constant function.\n\n    Examples\n    --------\n    > var fcn = constantFunction( 3.14 );\n    > var v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n\n    See Also\n    --------\n    argumentFunction, identity\n",
	"constructorName": "\nconstructorName( val )\n    Determines the name of a value's constructor.\n\n    Parameters\n    ----------\n    val: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        Name of a value's constructor.\n\n    Examples\n    --------\n    > var v = constructorName( 'a' )\n    'String'\n    > v = constructorName( {} )\n    'Object'\n    > v = constructorName( true )\n    'Boolean'\n\n    See Also\n    --------\n    functionName\n",
	"contains": "\ncontains( val, searchValue[, position] )\n    Tests if an array-like value contains a search value.\n\n    When `val` is a string, the function checks whether the characters of the\n    search string are found in the input string. The search is case-sensitive.\n\n    When `val` is an array-like object, the function checks whether the input\n    array contains an element strictly equal to the specified search value.\n\n    For strings, this function is modeled after `String.prototype.includes`,\n    part of the ECMAScript 6 specification. This function is different from a\n    call to `String.prototype.includes.call` insofar as type-checking is\n    performed for all arguments.\n\n    The function does not distinguish between positive and negative zero.\n\n    If `position < 0`, the search is performed for the entire input array or\n    string.\n\n\n    Parameters\n    ----------\n    val: ArrayLike\n        Input value.\n\n    searchValue: any\n        Value to search for.\n\n    position: integer (optional)\n        Position at which to start searching for `searchValue`. Default: `0`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input value contains another value.\n\n    Examples\n    --------\n    > var bool = contains( 'Hello World', 'World' )\n    true\n    > bool = contains( 'Hello World', 'world' )\n    false\n    > bool = contains( [ 1, 2, 3, 4 ], 2 )\n    true\n    > bool = contains( [ NaN, 2, 3, 4 ], NaN )\n    true\n\n    // Supply a position:\n    > bool = contains( 'Hello World', 'Hello', 6 )\n    false\n    > bool = contains( [ true, NaN, false ], true, 1 )\n    false\n\n",
	"convertArray": "\nconvertArray( arr, dtype )\n    Converts an input array to an array of a different data type.\n\n    The function supports the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    arr: Array|TypedArray\n        Array to convert.\n\n    dtype: string\n        Output data type.\n\n    Returns\n    -------\n    out: Array|TypedArray\n        Output array.\n\n    Examples\n    --------\n    > var arr = [ 1.0, 2.0, 3.0, 4.0 ];\n    > var out = convertArray( arr, 'float32' )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    See Also\n    --------\n    convertArraySame\n",
	"convertArraySame": "\nconvertArraySame( x, y )\n    Converts an input array to the same data type as a second input array.\n\n    The function supports input arrays having the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    x: Array|TypedArray\n        Array to convert.\n\n    y: Array|TypedArray\n        Array having desired output data type.\n\n    Returns\n    -------\n    out: Array|TypedArray\n        Output array.\n\n    Examples\n    --------\n    > var x = [ 1.0, 2.0, 3.0, 4.0 ];\n    > var y = Float32Array( 0 );\n    > var out = convertArraySame( x, y )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    See Also\n    --------\n    convertArray\n",
	"convertPath": "\nconvertPath( from, to )\n    Converts between POSIX and Windows paths.\n\n    Parameters\n    ----------\n    from: string\n        Input path.\n\n    to: string\n        Output path convention: 'win32', 'mixed', or 'posix'.\n\n    Returns\n    -------\n    out: string\n        Converted path.\n\n    Examples\n    --------\n    > var out = convertPath( '/c/foo/bar/beep.c', 'win32' )\n    'c:\\\\foo\\\\bar\\\\beep.c'\n    > out = convertPath( '/c/foo/bar/beep.c', 'mixed' )\n    'c:/foo/bar/beep.c'\n    > out = convertPath( '/c/foo/bar/beep.c', 'posix' )\n    '/c/foo/bar/beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'win32' )\n    'C:\\\\\\\\foo\\\\bar\\\\beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'mixed' )\n    'C:/foo/bar/beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'posix' )\n    '/c/foo/bar/beep.c'\n\n",
	"copy": "\ncopy( value[, level] )\n    Copy or deep clone a value to an arbitrary depth.\n\n    The implementation can handle circular references.\n\n    If a `Number`, `String`, or `Boolean` object is encountered, the value is\n    cloned as a primitive. This behavior is intentional.\n\n    For objects, the implementation only copies enumerable keys and their\n    associated property descriptors.\n\n    The implementation only checks whether basic `Objects`, `Arrays`, and class\n    instances are extensible, sealed, and/or frozen.\n\n    Functions are not cloned; their reference is copied.\n\n    The implementation supports custom error types which are `Error` instances\n    (e.g., ES2015 subclasses).\n\n    Support for copying class instances is inherently fragile. Any instances\n    with privileged access to variables (e.g., within closures) cannot be\n    cloned. This stated, basic copying of class instances is supported. Provided\n    an environment which supports ES5, the implementation is greedy and performs\n    a deep clone of any arbitrary class instance and its properties. The\n    implementation assumes that the concept of `level` applies only to the class\n    instance reference, but not to its internal state.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    level: integer (optional)\n         Copy depth. Default: Infinity.\n\n    Returns\n    -------\n    out: any\n        Value copy.\n\n    Examples\n    --------\n    > var value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > var out = copy( value )\n    [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]\n    > var bool = ( value[ 0 ].c === out[ 0 ].c )\n    false\n\n    // Set the `level` option to limit the copy depth:\n    > value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > out = copy( value, 1 );\n    > bool = ( value[ 0 ] === out[ 0 ] )\n    false\n    > bool = ( value[ 0 ].c === out[ 0 ].c )\n    true\n\n\n    See Also\n    --------\n    merge\n",
	"copyBuffer": "\ncopyBuffer( buffer )\n    Copies buffer data to a new Buffer instance.\n\n    Parameters\n    ----------\n    buffer: Buffer\n        Buffer to copy from.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b1 = array2buffer( [ 1, 2, 3, 4 ] );\n    > var b2 = copyBuffer( b1 )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    allocUnsafe, Buffer\n",
	"countBy": "\ncountBy( collection, [options,] indicator )\n    Groups values according to an indicator function and returns group counts.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = countBy( collection, indicator )\n    { 'b': 3, 'other': 1 }\n\n    See Also\n    --------\n    group, groupBy\n",
	"countByAsync": "\ncountByAsync( collection, [options,] indicator, done )\n    Groups values according to an indicator function and returns group counts.\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty object as the second argument.\n\n    The `group` returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, indicator, done )\n    1000\n    2500\n    3000\n    { \"even\": 2, \"odd\": 1 }\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    { \"even\": 2, \"odd\": 1 }\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n\n\ncountByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function\n    and returns group counts.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which groups values and returns group counts.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = countByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n    > arr = [ 2000, 1500, 1000, 500 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    500\n    { \"even\": 2, \"odd\": 2 }\n\n    See Also\n    --------\n    countBy, groupByAsync, tabulateByAsync\n",
	"curry": "\ncurry( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curry( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curry( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    ...     'name': 'Ada',\n    ...     'greet': function greet( word1, word2 ) {\n    ...        return word1 + ' ' + word2 + ', ' + this.name + '!'\n    ...     }\n    ... };\n    > f = curry( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curryRight, uncurry, uncurryRight\n",
	"curryRight": "\ncurryRight( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    This function applies arguments starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curryRight( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curryRight( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    ...     'name': 'Ada',\n    ...     'greet': function greet( word1, word2 ) {\n    ...         return word1 + ' ' + word2 + ', ' + this.name + '!'\n    ...     }\n    ... };\n    > f = curryRight( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curry, uncurry, uncurryRight\n",
	"cwd": "\ncwd()\n    Returns the current working directory.\n\n    Returns\n    -------\n    path: string\n        Current working directory of the process.\n\n    Examples\n    --------\n    > var dir = cwd()\n    '/path/to/current/working/directory'\n\n    See Also\n    --------\n    chdir\n",
	"DALE_CHALL_NEW": "\nDALE_CHALL_NEW()\n    Returns a list of familiar English words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of familiar English words.\n\n    Examples\n    --------\n    > var list = DALE_CHALL_NEW()\n    [ 'a', 'able', 'aboard', 'about', 'above', ... ]\n\n    References\n    ----------\n    - Chall, Jeanne Sternlicht, and Edgar Dale. 1995. *Readability revisited:\n    the new Dale-Chall readability formula*. Brookline Books.\n    <https://books.google.com/books?id=2nbuAAAAMAAJ>.\n\n",
	"datasets": "\ndatasets( name[, options] )\n    Returns a dataset.\n\n    The function forwards provided options to the dataset interface specified\n    by `name`.\n\n    Parameters\n    ----------\n    name: string\n        Dataset name.\n\n    options: Object (optional)\n        Function options.\n\n    Returns\n    -------\n    out: any\n        Dataset.\n\n    Examples\n    --------\n    > var out = datasets( 'MONTH_NAMES_EN' )\n    [ 'January', 'February', ... ]\n    > var opts = { 'data': 'cities' };\n    > out = datasets( 'MINARD_NAPOLEONS_MARCH', opts )\n    [ {...}, {...}, ... ]\n\n",
	"dayOfQuarter": "\ndayOfQuarter( [month[, day, year]] )\n    Returns the day of the quarter.\n\n    By default, the function returns the day of the quarter for the current date\n    (according to local time). To determine the day of the quarter for a\n    particular day, provide `month`, `day`, and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    day: integer (optional)\n        Day.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Day of the quarter.\n\n    Examples\n    --------\n    > var day = dayOfQuarter()\n    <number>\n    > day = dayOfQuarter( new Date() )\n    <number>\n    > day = dayOfQuarter( 12, 31, 2017 )\n    92\n\n    // Other ways to supply month:\n    > day = dayOfQuarter( 'dec', 31, 2017 )\n    92\n    > day = dayOfQuarter( 'december', 31, 2017 )\n    92\n\n    See Also\n    --------\n    dayOfYear\n",
	"dayOfYear": "\ndayOfYear( [month[, day, year]] )\n    Returns the day of the year.\n\n    By default, the function returns the day of the year for the current date\n    (according to local time). To determine the day of the year for a particular\n    day, provide `month`, `day`, and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    day: integer (optional)\n        Day.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Day of the year.\n\n    Examples\n    --------\n    > var day = dayOfYear()\n    <number>\n    > day = dayOfYear( new Date() )\n    <number>\n    > day = dayOfYear( 12, 31, 2016 )\n    366\n\n    // Other ways to supply month:\n    > day = dayOfYear( 'dec', 31, 2016 )\n    366\n    > day = dayOfYear( 'december', 31, 2016 )\n    366\n\n    See Also\n    --------\n    dayOfQuarter\n",
	"daysInMonth": "\ndaysInMonth( [month[, year]] )\n    Returns the number of days in a month.\n\n    By default, the function returns the number of days in the current month\n    of the current year (according to local time). To determine the number of\n    days for a particular month and year, provide `month` and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Days in a month.\n\n    Examples\n    --------\n    > var num = daysInMonth()\n    <number>\n    > num = daysInMonth( 2 )\n    <number>\n    > num = daysInMonth( 2, 2016 )\n    29\n    > num = daysInMonth( 2, 2017 )\n    28\n\n    // Other ways to supply month:\n    > num = daysInMonth( 'feb', 2016 )\n    29\n    > num = daysInMonth( 'february', 2016 )\n    29\n\n    See Also\n    --------\n    daysInYear\n",
	"daysInYear": "\ndaysInYear( [value] )\n    Returns the number of days in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of days in the current year\n    (according to local time). To determine the number of days for a particular\n    year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of days in a year.\n\n    Examples\n    --------\n    > var num = daysInYear()\n    <number>\n    > num = daysInYear( 2016 )\n    366\n    > num = daysInYear( 2017 )\n    365\n\n    See Also\n    --------\n    daysInMonth\n",
	"deepGet": "\ndeepGet( obj, path[, options] )\n    Returns a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: any\n        Nested property value.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a.b.c' )\n    'd'\n\n    // Specify a custom separator via the `sep` option:\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a/b/c', { 'sep': '/' } )\n    'd'\n\ndeepGet.factory( path[, options] )\n    Creates a reusable deep get function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get factory.\n\n    Examples\n    --------\n    > var dget = deepGet.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = dget( obj )\n    'd'\n\n    See Also\n    --------\n    deepPluck, deepSet\n",
	"deepHasOwnProp": "\ndeepHasOwnProp( value, path[, options] )\n    Returns a boolean indicating whether an object contains a nested key path.\n\n    The function tests for \"own\" properties and will return `false` for\n    inherited properties.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Key path array elements are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified path.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = deepHasOwnProp( obj, 'a.b.c' )\n    true\n\n    // Specify a custom separator via the `sep` option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > bool = deepHasOwnProp( obj, 'a/b/c', { 'sep': '/' } )\n    true\n\ndeepHasOwnProp.factory( path[, options] )\n    Returns a function which tests whether an object contains a nested key path.\n\n    The returned function tests for \"own\" properties and will return `false` for\n    inherited properties.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Function which tests whether an object contains a nested key path.\n\n    Examples\n    --------\n    > var has = deepHasOwnProp.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = has( obj )\n    true\n\n    See Also\n    --------\n    deepHasProp, hasOwnProp, deepGet, deepPluck, deepSet\n",
	"deepHasProp": "\ndeepHasProp( value, path[, options] )\n    Returns a boolean indicating whether an object contains a nested key path,\n    either own or inherited.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Key path array elements are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified path.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > Foo.prototype.b = { 'c': 'd' };\n    > var obj = { 'a': new Foo() };\n    > var bool = deepHasProp( obj, 'a.b.c' )\n    true\n\n    // Specify a custom separator via the `sep` option:\n    > bool = deepHasProp( obj, 'a/b/c', { 'sep': '/' } )\n    true\n\ndeepHasProp.factory( path[, options] )\n    Returns a function which tests whether an object contains a nested key path,\n    either own or inherited.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Function which tests whether an object contains a nested key path.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > Foo.prototype.b = { 'c': 'd' };\n    > var has = deepHasProp.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': new Foo() };\n    > var bool = has( obj )\n    true\n\n    See Also\n    --------\n    deepHasOwnProp, hasOwnProp, deepGet, deepPluck, deepSet\n",
	"deepPluck": "\ndeepPluck( arr, path[, options] )\n    Extracts a nested property value from each element of an object array.\n\n    If a key path does not exist, the function sets the plucked value as\n    `undefined`.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. Default:\n        true.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    ...     { 'a': { 'b': { 'c': 1 } } },\n    ...     { 'a': { 'b': { 'c': 2 } } }\n    ... ];\n    > var out = deepPluck( arr, 'a.b.c' )\n    [ 1, 2 ]\n    > arr = [\n    ...     { 'a': [ 0, 1, 2 ] },\n    ...     { 'a': [ 3, 4, 5 ] }\n    ... ];\n    > out = deepPluck( arr, [ 'a', 1 ] )\n    [ 1, 4 ]\n\n    See Also\n    --------\n    deepGet, deepSet\n",
	"deepSet": "\ndeepSet( obj, path[, options] )\n    Sets a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    value: any\n        Value to set.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if the property was successfully set.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = deepSet( obj, 'a.b.c', 'beep' )\n    true\n\n    // Specify an alternative separator via the sep option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > bool = deepSet( obj, 'a/b/c', 'beep', { 'sep': '/' } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    // To create a key path which does not exist, set the create option to true:\n    > bool = deepSet( obj, 'a.e.c', 'boop', { 'create': true } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' }, 'e': { 'c': 'boop' } } }\n\n\ndeepSet.factory( path[, options] )\n    Creates a reusable deep set function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get function.\n\n    Examples\n    --------\n    > var dset = deepSet.factory( 'a/b/c', {\n    ...     'create': true,\n    ...     'sep': '/'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = dset( obj, 'beep' )\n    true\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    See Also\n    --------\n    deepGet, deepPluck\n",
	"dirname": "\ndirname( path )\n    Returns a directory name.\n\n    Parameters\n    ----------\n    path: string\n        Path.\n\n    Returns\n    -------\n    out: string\n        Directory name.\n\n    Examples\n    --------\n    > var dir = dirname( './foo/bar/index.js' )\n    './foo/bar'\n\n    See Also\n    --------\n    extname\n",
	"doUntil": "\ndoUntil( fcn, predicate[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to stop invoking a\n        function.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i >= 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > doUntil( beep, predicate )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doUntilEach, doWhile, until, whilst\n",
	"doUntilAsync": "\ndoUntilAsync( fcn, predicate, done[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from one)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is falsy, the function continues invoking `fcn`;\n    otherwise, the function invokes the `done` callback.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function predicate( i, clbk ) { clbk( null, i >= 5 ); };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > doUntilAsync( fcn, predicate, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhileAsync, untilAsync, whileAsync\n",
	"doUntilEach": "\ndoUntilEach( collection, fcn, predicate[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > doUntilEach( arr, logger, predicate )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n    4: NaN\n\n    See Also\n    --------\n    doUntilEachRight, doWhileEach, untilEach\n",
	"doUntilEachRight": "\ndoUntilEachRight( collection, fcn, predicate[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > doUntilEachRight( arr, logger, predicate )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n    1: NaN\n\n    See Also\n    --------\n    doUntilEach, doWhileEachRight, untilEachRight\n",
	"doWhile": "\ndoWhile( fcn, predicate[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i < 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > doWhile( beep, predicate )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhileAsync, doWhileEach, until, whilst\n",
	"doWhileAsync": "\ndoWhileAsync( fcn, predicate, done[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from one)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is truthy, the function continues invoking `fcn`;\n    otherwise, the function invokes the `done` callback.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function predicate( i, clbk ) { clbk( null, i < 5 ); };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > doWhileAsync( fcn, predicate, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhile, untilAsync, whileAsync\n",
	"doWhileEach": "\ndoWhileEach( collection, fcn, predicate[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > doWhileEach( arr, logger, predicate )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n    4: NaN\n\n    See Also\n    --------\n    doUntilEach, doWhileEachRight, whileEach\n",
	"doWhileEachRight": "\ndoWhileEachRight( collection, fcn, predicate[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > doWhileEachRight( arr, logger, predicate )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n    1: NaN\n\n    See Also\n    --------\n    doUntilEachRight, doWhileEach, whileEachRight\n",
	"E": "\nE\n    Euler's number.\n\n    Examples\n    --------\n    > E\n    2.718281828459045\n\n",
	"endsWith": "\nendsWith( str, search[, len] )\n    Tests if a `string` ends with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    len: integer (optional)\n        Substring length. Restricts the search to a substring within the input\n        string beginning from the leftmost character. If provided a negative\n        value, `len` indicates to ignore the last `len` characters, returning\n        the same output as `str.length + len`. Default: `str.length`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` ends with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = endsWith( 'beep', 'ep' )\n    true\n    > bool = endsWith( 'Beep', 'op' )\n    false\n    > bool = endsWith( 'Beep', 'ee', 3 )\n    true\n    > bool = endsWith( 'Beep', 'ee', -1 )\n    true\n    > bool = endsWith( 'beep', '' )\n    true\n\n    See Also\n    --------\n    startsWith\n",
	"ENV": "\nENV\n    An object containing the user environment.\n\n    Examples\n    --------\n    > var user = ENV.USER\n    <string>\n\n    See Also\n    --------\n    ARGV\n",
	"EPS": "\nEPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a double-precision floating-point number.\n\n    Examples\n    --------\n    > EPS\n    2.220446049250313e-16\n\n    See Also\n    --------\n    FLOAT32_EPS\n",
	"EULERGAMMA": "\nEULERGAMMA\n    The Euler-Mascheroni constant.\n\n    Examples\n    --------\n    > EULERGAMMA\n    0.5772156649015329\n\n",
	"error2json": "\nerror2json( error )\n    Returns a JSON representation of an error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    The JSON object is guaranteed to have the following properties:\n\n    - type: error type.\n    - message: error message.\n\n    The only standardized cross-platform property is `message`. Depending on the\n    platform, the following properties *may* be present:\n\n    - name: error name.\n    - stack: stack trace.\n    - code: error code (Node.js system errors).\n    - errno: error code string (Node.js system errors).\n    - syscall: string representing the failed system call (Node.js system\n      errors).\n\n    The function also serializes all enumerable properties.\n\n    The implementation supports custom error types and sets the `type` field to\n    the closest built-in error type.\n\n    Parameters\n    ----------\n    error: Error\n        Error to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var err = new Error( 'beep' );\n    > var json = error2json( err )\n    <Object>\n\n    See Also\n    --------\n    reviveError\n",
	"evil": "\nevil( str )\n    Alias for `eval` global.\n\n    A reference to `eval` is treated differently by the compiler. For example,\n    when evaluating code containing block-scoped declarations  (e.g., `let`,\n    `const`, `function`, `class`), the compiler may throw an `error` complaining\n    that block-scoped declarations are not yet supported outside of\n    `strict mode`. One possible workaround is to include `\"use strict\";` in the\n    evaluated code.\n\n    Parameters\n    ----------\n    str: string\n        Code to evaluate.\n\n    Returns\n    -------\n    out: any\n        Returned value if applicable.\n\n    Examples\n    --------\n    > var v = evil( '5*4*3*2*1' );\n    120\n\n",
	"every": "\nevery( collection )\n    Tests whether all elements in a collection are truthy.\n\n    The function immediately returns upon encountering a falsy value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if all elements are truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 1, 1, 1, 1, 1 ];\n    > var bool = every( arr )\n    true\n\n    See Also\n    --------\n    any, everyBy, forEach, none, some\n",
	"everyBy": "\neveryBy( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a non-truthy return\n    value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a truthy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = everyBy( arr, positive )\n    true\n\n    See Also\n    --------\n    anyBy, everyByRight, forEach, noneBy, someBy\n",
	"everyByAsync": "\neveryByAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-truthy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `false` as the second argument.\n\n    If all elements succeed, the function calls the `done` callback with `null`\n    as the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\neveryByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyBy, everyByRightAsync, forEachAsync, noneByAsync, someByAsync\n",
	"everyByRight": "\neveryByRight( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a non-truthy return\n    value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a truthy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = everyByRight( arr, positive )\n    true\n\n    See Also\n    --------\n    anyBy, every, everyBy, forEachRight, noneByRight, someByRight\n",
	"everyByRightAsync": "\neveryByRightAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-truthy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `false` as the second argument.\n\n    If all elements succeed, the function calls the `done` callback with `null`\n    as the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\neveryByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByAsync, everyByRight, forEachRightAsync, noneByRightAsync, someByRightAsync\n",
	"exists": "\nexists( path, clbk )\n    Asynchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    clbk: Function\n        Callback to invoke after testing for path existence. A callback may\n        accept a single argument, a boolean indicating whether a path exists, or\n        two arguments, an error argument and a boolean, matching the error-first\n        callback convention used in most asynchronous Node.js APIs.\n\n    Examples\n    --------\n    > function done( error, bool ) { console.log( bool ); };\n    > exists( './beep/boop', done );\n\n\nexists.sync( path )\n    Synchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the path exists.\n\n    Examples\n    --------\n    > var bool = exists.sync( './beep/boop' )\n    <boolean>\n\n    See Also\n    --------\n    readFile, readDir\n",
	"expandContractions": "\nexpandContractions( str )\n    Expands all contractions to their formal equivalents.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with expanded contractions.\n\n    Examples\n    --------\n    > var str = 'I won\\'t be able to get y\\'all out of this one.';\n    > var out = expandContractions( str )\n    'I will not be able to get you all out of this one.'\n\n    > str = 'It oughtn't to be my fault, because, you know, I didn't know';\n    > out = expandContractions( str )\n    'It ought not to be my fault, because, you know, I did not know'\n\n",
	"extname": "\nextname( filename )\n    Returns a filename extension.\n\n    Parameters\n    ----------\n    filename: string\n        Filename.\n\n    Returns\n    -------\n    ext: string\n        Filename extension.\n\n    Examples\n    --------\n    > var ext = extname( 'index.js' )\n    '.js'\n\n    See Also\n    --------\n    dirname\n",
	"fastmath.abs": "\nfastmath.abs( x )\n    Computes an absolute value.\n\n    This implementation is not IEEE 754 compliant. If provided `-0`, the\n    function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Absolute value.\n\n    Examples\n    --------\n    > var v = fastmath.abs( -1.0 )\n    1.0\n    > v = fastmath.abs( 2.0 )\n    2.0\n    > v = fastmath.abs( 0.0 )\n    0.0\n    > v = fastmath.abs( -0.0 )\n    -0.0\n    > v = fastmath.abs( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs\n",
	"fastmath.acosh": "\nfastmath.acosh( x )\n    Computes the hyperbolic arccosine of a number.\n\n    The domain of `x` is restricted to `[1,+infinity)`. If `x < 1`, the function\n    will return `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arccosine (in radians).\n\n    Examples\n    --------\n    > var v = fastmath.acosh( 1.0 )\n    0.0\n    > v = fastmath.acosh( 2.0 )\n    ~1.317\n    > v = fastmath.acosh( NaN )\n    NaN\n\n    // The function overflows for large `x`:\n    > v = fastmath.acosh( 1.0e308 )\n    Infinity\n\n    See Also\n    --------\n    base.acosh\n",
	"fastmath.ampbm": "\nfastmath.ampbm( x, y )\n    Computes the hypotenuse using the alpha max plus beta min algorithm.\n\n    The algorithm computes only an approximation.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = fastmath.ampbm( 5.0, 12.0 )\n    ~13.5\n\n\nfastmath.ampbm.factory( alpha, beta, [nonnegative[, ints]] )\n    Returns a function to compute a hypotenuse using the alpha max plus beta min\n    algorithm.\n\n    Parameters\n    ----------\n    alpha: number\n        Alpha.\n\n    beta: number\n        Beta.\n\n    nonnegative: boolean\n        Boolean indicating whether input values are always nonnegative.\n\n    ints: boolean\n        Boolean indicating whether input values are always 32-bit integers.\n\n    Returns\n    -------\n    fcn: Function\n        Function to compute a hypotenuse.\n\n    Examples\n    --------\n    > var hypot = fastmath.ampbm.factory( 1.0, 0.5 )\n    <Function>\n\n    See Also\n    --------\n    base.hypot\n",
	"fastmath.asinh": "\nfastmath.asinh( x )\n    Computes the hyperbolic arcsine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arcsine (in radians).\n\n    Examples\n    --------\n    > var v = fastmath.asinh( 0.0 )\n    0.0\n    > v = fastmath.asinh( 2.0 )\n    ~1.444\n    > v = fastmath.asinh( -2.0 )\n    ~-1.444\n    > v = fastmath.asinh( NaN )\n    NaN\n\n    // The function overflows for large `x`:\n    > v = fastmath.asinh( 1.0e200 )\n    Infinity\n\n    // The function underflows for small `x`:\n    > v = fastmath.asinh( 1.0e-50 )\n    0.0\n\n    See Also\n    --------\n    base.asinh\n",
	"fastmath.atanh": "\nfastmath.atanh( x )\n    Computes the hyperbolic arctangent of a number.\n\n    The domain of `x` is restricted to `[-1,1]`. If `|x| > 1`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arctangent (in radians).\n\n    Examples\n    --------\n    > var v = fastmath.atanh( 0.0 )\n    0.0\n    > v = fastmath.atanh( 0.9 )\n    ~1.472\n    > v = fastmath.atanh( 1.0 )\n    Infinity\n    > v = fastmath.atanh( -1.0 )\n    -Infinity\n    > v = fastmath.atanh( NaN )\n    NaN\n\n    // The function underflows for small `x`:\n    > v = fastmath.atanh( 1.0e-17 )\n    0.0\n\n    See Also\n    --------\n    base.atanh\n",
	"fastmath.hypot": "\nfastmath.hypot( x, y )\n    Computes the hypotenuse.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = fastmath.hypot( -5.0, 12.0 )\n    13.0\n\n    // For a sufficiently large `x` and/or `y`, the function overflows:\n    > h = fastmath.hypot( 1.0e154, 1.0e154 )\n    Infinity\n\n    // For sufficiently small `x` and/or `y`, the function underflows:\n    > h = fastmath.hypot( 1e-200, 1.0e-200 )\n    0.0\n\n    See Also\n    --------\n    base.hypot\n",
	"fastmath.log2Uint32": "\nfastmath.log2Uint32( x )\n    Returns an approximate binary logarithm (base two) of an unsigned 32-bit\n    integer `x`.\n\n    This function provides a performance boost when requiring only approximate\n    computations for integer arguments.\n\n    For high-precision applications, this function is never suitable.\n\n    Parameters\n    ----------\n    x: uinteger\n        Input value.\n\n    Returns\n    -------\n    out: uinteger\n        Integer binary logarithm (base two).\n\n    Examples\n    --------\n    > var v = fastmath.log2Uint32( 4 >>> 0 )\n    2\n    > v = fastmath.log2Uint32( 8 >>> 0 )\n    3\n    > v = fastmath.log2Uint32( 9 >>> 0 )\n    3\n\n    See Also\n    --------\n    base.log2\n",
	"fastmath.max": "\nfastmath.max( x, y )\n    Returns the maximum value.\n\n    The function ignores the sign of `0` and does not check for `NaN` arguments.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var v = fastmath.max( 3.14, 4.2 )\n    4.2\n    > v = fastmath.max( 3.14, NaN )\n    NaN\n    > v = fastmath.max( NaN, 3.14 )\n    3.14\n    > v = fastmath.max( -0.0, +0.0 )\n    +0.0\n    > v = fastmath.max( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.max\n",
	"fastmath.min": "\nfastmath.min( x, y )\n    Returns the minimum value.\n\n    The function ignores the sign of `0` and does not check for `NaN` arguments.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var v = fastmath.min( 3.14, 4.2 )\n    3.14\n    > v = fastmath.min( 3.14, NaN )\n    NaN\n    > v = fastmath.min( NaN, 3.14 )\n    3.14\n    > v = fastmath.min( -0.0, +0.0 )\n    +0.0\n    > v = fastmath.min( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.min\n",
	"fastmath.powint": "\nfastmath.powint( x, y )\n    Evaluates the exponential function given a signed 32-bit integer exponent.\n\n    This function is not recommended for high-precision applications due to\n    error accumulation.\n\n    If provided a negative exponent, the function first computes the reciprocal\n    of the base and then evaluates the exponential function. This can introduce\n    significant error.\n\n    Parameters\n    ----------\n    x: number\n        Base.\n\n    y: integer\n        Signed 32-bit integer exponent.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var v = fastmath.powint( 2.0, 3 )\n    8.0\n    > v = fastmath.powint( 3.14, 0 )\n    1.0\n    > v = fastmath.powint( 2.0, -2 )\n    0.25\n    > v = fastmath.powint( 0.0, 0 )\n    1.0\n    > v = fastmath.powint( -3.14, 1 )\n    -3.14\n    > v = fastmath.powint( NaN, 0 )\n    NaN\n\n    See Also\n    --------\n    base.pow\n",
	"fastmath.sqrtUint32": "\nfastmath.sqrtUint32( x )\n    Returns an approximate square root of an unsigned 32-bit integer `x`.\n\n    Prefer hardware `sqrt` over a software implementation.\n\n    When using a software `sqrt`, this function provides a performance boost\n    when an application requires only approximate computations for integer\n    arguments.\n\n    For applications requiring high-precision, this function is never suitable.\n\n    Parameters\n    ----------\n    x: uinteger\n        Input value.\n\n    Returns\n    -------\n    out: uinteger\n        Integer square root.\n\n    Examples\n    --------\n    > var v = fastmath.sqrtUint32( 9 >>> 0 )\n    3\n    > v = fastmath.sqrtUint32( 2 >>> 0 )\n    1\n    > v = fastmath.sqrtUint32( 3 >>> 0 )\n    1\n    > v = fastmath.sqrtUint32( 0 >>> 0 )\n    0\n\n    See Also\n    --------\n    base.sqrt\n",
	"FEMALE_FIRST_NAMES_EN": "\nFEMALE_FIRST_NAMES_EN()\n    Returns a list of common female first names in English speaking countries.\n\n    Returns\n    -------\n    out: Array<string>\n        List of common female first names.\n\n    Examples\n    --------\n    > var list = FEMALE_FIRST_NAMES_EN()\n    [ 'Aaren', 'Aarika', 'Abagael', 'Abagail', ... ]\n\n    References\n    ----------\n    - Ward, Grady. 2002. \"Moby Word II.\" <http://www.gutenberg.org/files/3201/\n    3201.txt>.\n\n    See Also\n    --------\n    MALE_FIRST_NAMES_EN\n",
	"find": "\nfind( arr, [options,] clbk )\n    Finds elements in an array-like object that satisfy a test condition.\n\n    Parameters\n    ----------\n    arr: Array|TypedArray|string\n        Object from which elements will be tested.\n\n    options: Object (optional)\n        Options.\n\n    options.k: integer (optional)\n        Limits the number of returned elements. The sign determines the\n        direction in which to search. If set to a negative integer, the function\n        searches from last element to first element. Default: arr.length.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'indices'.\n\n    clbk: Function\n        Function invoked for each array element. If the return value is truthy,\n        the value is considered to have satisfied the test condition.\n\n    Returns\n    -------\n    out: Array\n        Array of indices, element values, or arrays of index-value pairs.\n\n    Examples\n    --------\n    > var data = [ 30, 20, 50, 60, 10 ];\n    > function condition( val ) { return val > 20; };\n    > var vals = find( data, condition )\n    [ 0, 2, 3 ]\n\n    // Limit number of results:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > var opts = { 'k': 2, 'returns': 'values' };\n    > vals = find( data, opts, condition )\n    [ 30, 50 ]\n\n    // Return both indices and values as index-value pairs:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > opts = { 'k': -2, 'returns': '*' };\n    > vals = find( data, opts, condition )\n    [ [ 3, 60 ], [ 2, 50 ] ]\n\n",
	"flattenArray": "\nflattenArray( arr[, options] )\n    Flattens an array.\n\n    Parameters\n    ----------\n    arr: Array\n        Input array.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    out: Array\n        Flattened array.\n\n    Examples\n    --------\n    > var arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > var out = flattenArray( arr )\n    [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Set the maximum depth:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2 } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > var bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    true\n\n    // Deep copy:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2, 'copy': true } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    false\n\n\nflattenArray.factory( dims[, options] )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    dims: Array<integer>\n        Dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenArray.factory( [ 2, 2 ], {\n    ...     'copy': false\n    ... });\n    > var out = flatten( [ [ 1, 2 ], [ 3, 4 ] ] )\n    [ 1, 2, 3, 4 ]\n    > out = flatten( [ [ 5, 6 ], [ 7, 8 ] ] )\n    [ 5, 6, 7, 8 ]\n\n    See Also\n    --------\n    flattenObject\n",
	"flattenObject": "\nflattenObject( obj[, options] )\n    Flattens an object.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Object to flatten.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    out: ObjectLike\n        Flattened object.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flattenObject( obj )\n    { 'a.b.c': 'd' }\n\n    // Set the `depth` option to flatten to a specified depth:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'depth': 1 } )\n    { 'a.b': { 'c': 'd' } }\n    > var bool = ( obj.a.b === out[ 'a.b' ] )\n    true\n\n    // Set the `delimiter` option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'delimiter': '-|-' } )\n    { 'a-|-b-|-c': 'd' }\n\n    // Flatten arrays:\n    > obj = { 'a': { 'b': [ 1, 2, 3 ] } };\n    > out = flattenObject( obj, { 'flattenArrays': true } )\n    { 'a.b.0': 1, 'a.b.1': 2, 'a.b.2': 3 }\n\n\nflattenObject.factory( options )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenObject.factory({\n    ...     'depth': 2,\n    ...     'copy': true,\n    ...     'delimiter': '|'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flatten( obj )\n    { 'a|b': { 'c': 'd' } }\n\n    See Also\n    --------\n    flattenArray\n",
	"FLOAT16_CBRT_EPS": "\nFLOAT16_CBRT_EPS\n    Cube root of half-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT16_CBRT_EPS\n    0.09921256574801247\n\n    See Also\n    --------\n    FLOAT16_EPS, FLOAT16_SQRT_EPS, FLOAT32_CBRT_EPS, CBRT_EPS\n",
	"FLOAT16_EPS": "\nFLOAT16_EPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_EPS\n    0.0009765625\n\n    See Also\n    --------\n    FLOAT32_EPS, EPS\n",
	"FLOAT16_EXPONENT_BIAS": "\nFLOAT16_EXPONENT_BIAS\n    The bias of a half-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT16_EXPONENT_BIAS\n    15\n\n    See Also\n    --------\n    FLOAT32_EXPONENT_BIAS, FLOAT64_EXPONENT_BIAS\n",
	"FLOAT16_MAX": "\nFLOAT16_MAX\n    Maximum half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_MAX\n    65504.0\n\n    See Also\n    --------\n    FLOAT32_MAX, FLOAT64_MAX\n",
	"FLOAT16_MAX_SAFE_INTEGER": "\nFLOAT16_MAX_SAFE_INTEGER\n    Maximum safe half-precision floating-point integer.\n\n    The maximum safe half-precision floating-point integer is given by\n    `2^11 - 1`.\n\n    Examples\n    --------\n    > FLOAT16_MAX_SAFE_INTEGER\n    2047\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n",
	"FLOAT16_MIN_SAFE_INTEGER": "\nFLOAT16_MIN_SAFE_INTEGER\n    Minimum safe half-precision floating-point integer.\n\n    The minimum safe half-precision floating-point integer is given by\n    `-(2^11 - 1)`.\n\n    Examples\n    --------\n    > FLOAT16_MIN_SAFE_INTEGER\n    -2047\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n",
	"FLOAT16_NINF": "\nFLOAT16_NINF\n    Half-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > FLOAT16_NINF\n    -Infinity\n\n    See Also\n    --------\n    FLOAT16_PINF, FLOAT32_NINF, NINF\n",
	"FLOAT16_NUM_BYTES": "\nFLOAT16_NUM_BYTES\n    Size (in bytes) of a half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    FLOAT32_NUM_BYTES, FLOAT64_NUM_BYTES\n",
	"FLOAT16_PINF": "\nFLOAT16_PINF\n    Half-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > FLOAT16_PINF\n    Infinity\n\n    See Also\n    --------\n    FLOAT16_NINF, FLOAT32_PINF, PINF\n",
	"FLOAT16_PRECISION": "\nFLOAT16_PRECISION\n    Effective number of bits in the significand of a half-precision floating-\n    point number.\n\n    The effective number of bits is `10` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT16_PRECISION\n    11\n\n    See Also\n    --------\n    FLOAT32_PRECISION, FLOAT64_PRECISION\n",
	"FLOAT16_SMALLEST_NORMAL": "\nFLOAT16_SMALLEST_NORMAL\n    Smallest positive normalized half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_SMALLEST_NORMAL\n    6.103515625e-5\n\n    See Also\n    --------\n    FLOAT16_SMALLEST_SUBNORMAL, FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_NORMAL\n",
	"FLOAT16_SMALLEST_SUBNORMAL": "\nFLOAT16_SMALLEST_SUBNORMAL\n    Smallest positive denormalized half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_SMALLEST_SUBNORMAL\n    5.960464477539063e-8\n\n    See Also\n    --------\n    FLOAT16_SMALLEST_NORMAL, FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_SUBNORMAL\n",
	"FLOAT16_SQRT_EPS": "\nFLOAT16_SQRT_EPS\n    Square root of half-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT16_SQRT_EPS\n    0.03125\n\n    See Also\n    --------\n    FLOAT16_EPS, FLOAT32_SQRT_EPS, SQRT_EPS\n",
	"Float32Array": "\nFloat32Array()\n    A typed array constructor which returns a typed array representing an array\n    of single-precision floating-point numbers in the platform byte order.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array()\n    <Float32Array>\n\n\nFloat32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = new Float32Array( arr1 )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = new Float32Array( arr1 )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Float32Array( buf, 0, 4 )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float32Array.BYTES_PER_ELEMENT\n    4\n\n\nFloat32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float32Array.name\n    Float32Array\n\n\nFloat32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nFloat32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteLength\n    20\n\n\nFloat32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nFloat32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"FLOAT32_CBRT_EPS": "\nFLOAT32_CBRT_EPS\n    Cube root of single-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT32_CBRT_EPS\n    0.004921566601151848\n\n    See Also\n    --------\n    FLOAT32_EPS, FLOAT32_SQRT_EPS, CBRT_EPS\n",
	"FLOAT32_EPS": "\nFLOAT32_EPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_EPS\n    1.1920928955078125e-7\n\n    See Also\n    --------\n    EPS\n",
	"FLOAT32_EXPONENT_BIAS": "\nFLOAT32_EXPONENT_BIAS\n    The bias of a single-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT32_EXPONENT_BIAS\n    127\n\n    See Also\n    --------\n    FLOAT16_EXPONENT_BIAS, FLOAT64_EXPONENT_BIAS\n",
	"FLOAT32_MAX": "\nFLOAT32_MAX\n    Maximum single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_MAX\n    3.4028234663852886e+38\n\n    See Also\n    --------\n    FLOAT16_MAX, FLOAT64_MAX\n",
	"FLOAT32_MAX_SAFE_INTEGER": "\nFLOAT32_MAX_SAFE_INTEGER\n    Maximum safe single-precision floating-point integer.\n\n    The maximum safe single-precision floating-point integer is given by\n    `2^24 - 1`.\n\n    Examples\n    --------\n    > FLOAT32_MAX_SAFE_INTEGER\n    16777215\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n",
	"FLOAT32_MIN_SAFE_INTEGER": "\nFLOAT32_MIN_SAFE_INTEGER\n    Minimum safe single-precision floating-point integer.\n\n    The minimum safe single-precision floating-point integer is given by\n    `-(2^24 - 1)`.\n\n    Examples\n    --------\n    > FLOAT32_MIN_SAFE_INTEGER\n    -16777215\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n",
	"FLOAT32_NINF": "\nFLOAT32_NINF\n    Single-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > FLOAT32_NINF\n    -Infinity\n\n    See Also\n    --------\n    FLOAT32_PINF, NINF\n",
	"FLOAT32_NUM_BYTES": "\nFLOAT32_NUM_BYTES\n    Size (in bytes) of a single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    FLOAT16_NUM_BYTES, FLOAT64_NUM_BYTES\n",
	"FLOAT32_PINF": "\nFLOAT32_PINF\n    Single-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > FLOAT32_PINF\n    Infinity\n\n    See Also\n    --------\n    FLOAT32_NINF, PINF\n",
	"FLOAT32_PRECISION": "\nFLOAT32_PRECISION\n    Effective number of bits in the significand of a single-precision floating-\n    point number.\n\n    The effective number of bits is `23` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT32_PRECISION\n    24\n\n    See Also\n    --------\n    FLOAT16_PRECISION, FLOAT64_PRECISION\n",
	"FLOAT32_SMALLEST_NORMAL": "\nFLOAT32_SMALLEST_NORMAL\n    Smallest positive normalized single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_SMALLEST_NORMAL\n    1.1754943508222875e-38\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_NORMAL\n",
	"FLOAT32_SMALLEST_SUBNORMAL": "\nFLOAT32_SMALLEST_SUBNORMAL\n    Smallest positive denormalized single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_SMALLEST_SUBNORMAL\n    1.401298464324817e-45\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_SUBNORMAL\n",
	"FLOAT32_SQRT_EPS": "\nFLOAT32_SQRT_EPS\n    Square root of single-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT32_SQRT_EPS\n    0.0003452669770922512\n\n    See Also\n    --------\n    FLOAT32_EPS, SQRT_EPS\n",
	"Float64Array": "\nFloat64Array()\n    A typed array constructor which returns a typed array representing an array\n    of double-precision floating-point numbers in the platform byte order.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array()\n    <Float64Array>\n\n\nFloat64Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat64Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = new Float64Array( arr1 )\n    <Float64Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat64Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = new Float64Array( arr1 )\n    <Float64Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat64Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 32 );\n    > var arr = new Float64Array( buf, 0, 4 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat64Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float64Array.BYTES_PER_ELEMENT\n    8\n\n\nFloat64Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float64Array.name\n    Float64Array\n\n\nFloat64Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nFloat64Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteLength\n    40\n\n\nFloat64Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteOffset\n    0\n\n\nFloat64Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"FLOAT64_EXPONENT_BIAS": "\nFLOAT64_EXPONENT_BIAS\n    The bias of a double-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT64_EXPONENT_BIAS\n    1023\n\n    See Also\n    --------\n    FLOAT16_EXPONENT_BIAS, FLOAT32_EXPONENT_BIAS\n",
	"FLOAT64_HIGH_WORD_EXPONENT_MASK": "\nFLOAT64_HIGH_WORD_EXPONENT_MASK\n    High word mask for the exponent of a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_HIGH_WORD_EXPONENT_MASK\n    2146435072\n    > base.toBinaryStringUint32( FLOAT64_HIGH_WORD_EXPONENT_MASK )\n    '01111111111100000000000000000000'\n\n    See Also\n    --------\n    FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n",
	"FLOAT64_HIGH_WORD_SIGNIFICAND_MASK": "\nFLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n    High word mask for the significand of a double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n    1048575\n    > base.toBinaryStringUint32( FLOAT64_HIGH_WORD_SIGNIFICAND_MASK )\n    '00000000000011111111111111111111'\n\n    See Also\n    --------\n    FLOAT64_HIGH_WORD_EXPONENT_MASK\n",
	"FLOAT64_MAX": "\nFLOAT64_MAX\n    Maximum double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX\n    1.7976931348623157e+308\n\n    See Also\n    --------\n    FLOAT16_MAX, FLOAT32_MAX\n",
	"FLOAT64_MAX_BASE10_EXPONENT": "\nFLOAT64_MAX_BASE10_EXPONENT\n    The maximum base 10 exponent for a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE10_EXPONENT\n    308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT\n",
	"FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL": "\nFLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n    The maximum base 10 exponent for a subnormal double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n    -308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MAX_BASE2_EXPONENT": "\nFLOAT64_MAX_BASE2_EXPONENT\n    The maximum biased base 2 exponent for a double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE2_EXPONENT\n    1023\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n",
	"FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL": "\nFLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n    The maximum biased base 2 exponent for a subnormal double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n    -1023\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MAX_LN": "\nFLOAT64_MAX_LN\n    Natural logarithm of the maximum double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_LN\n    709.782712893384\n\n    See Also\n    --------\n    FLOAT64_MIN_LN\n",
	"FLOAT64_MAX_SAFE_FIBONACCI": "\nFLOAT64_MAX_SAFE_FIBONACCI\n    Maximum safe Fibonacci number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_FIBONACCI\n    8944394323791464\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_NTH_FIBONACCI\n",
	"FLOAT64_MAX_SAFE_INTEGER": "\nFLOAT64_MAX_SAFE_INTEGER\n    Maximum safe double-precision floating-point integer.\n\n    The maximum safe double-precision floating-point integer is given by\n    `2^53 - 1`.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_INTEGER\n    9007199254740991\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n",
	"FLOAT64_MAX_SAFE_LUCAS": "\nFLOAT64_MAX_SAFE_LUCAS\n    Maximum safe Lucas number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_LUCAS\n    7639424778862807\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_FIBONACCI, FLOAT64_MAX_SAFE_NTH_LUCAS\n",
	"FLOAT64_MAX_SAFE_NTH_FIBONACCI": "\nFLOAT64_MAX_SAFE_NTH_FIBONACCI\n    Maximum safe nth Fibonacci number when stored in double-precision floating-\n    point format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_NTH_FIBONACCI\n    78\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_FIBONACCI\n",
	"FLOAT64_MAX_SAFE_NTH_LUCAS": "\nFLOAT64_MAX_SAFE_NTH_LUCAS\n    Maximum safe nth Lucas number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_NTH_LUCAS\n    76\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_LUCAS, FLOAT64_MAX_SAFE_NTH_FIBONACCI\n",
	"FLOAT64_MIN_BASE10_EXPONENT": "\nFLOAT64_MIN_BASE10_EXPONENT\n    The minimum base 10 exponent for a normalized double-precision floating-\n    point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE10_EXPONENT\n    -308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n",
	"FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL": "\nFLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n    The minimum base 10 exponent for a subnormal double-precision floating-\n    point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n    -324\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MIN_BASE2_EXPONENT": "\nFLOAT64_MIN_BASE2_EXPONENT\n    The minimum biased base 2 exponent for a normalized double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE2_EXPONENT\n    -1022\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL": "\nFLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n    The minimum biased base 2 exponent for a subnormal double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n    -1074\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n",
	"FLOAT64_MIN_LN": "\nFLOAT64_MIN_LN\n    Natural logarithm of the smallest normalized double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_LN\n    -708.3964185322641\n\n    See Also\n    --------\n    FLOAT64_MAX_LN\n",
	"FLOAT64_MIN_SAFE_INTEGER": "\nFLOAT64_MIN_SAFE_INTEGER\n    Minimum safe double-precision floating-point integer.\n\n    The minimum safe double-precision floating-point integer is given by\n    `-(2^53 - 1)`.\n\n    Examples\n    --------\n    > FLOAT64_MIN_SAFE_INTEGER\n    -9007199254740991\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n",
	"FLOAT64_NUM_BYTES": "\nFLOAT64_NUM_BYTES\n    Size (in bytes) of a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_NUM_BYTES\n    8\n\n    See Also\n    --------\n    FLOAT16_NUM_BYTES, FLOAT32_NUM_BYTES\n",
	"FLOAT64_PRECISION": "\nFLOAT64_PRECISION\n    Effective number of bits in the significand of a double-precision floating-\n    point number.\n\n    The effective number of bits is `52` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT64_PRECISION\n    53\n\n    See Also\n    --------\n    FLOAT16_PRECISION, FLOAT32_PRECISION\n",
	"FLOAT64_SMALLEST_NORMAL": "\nFLOAT64_SMALLEST_NORMAL\n    Smallest positive normalized double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_SMALLEST_NORMAL\n    2.2250738585072014e-308\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_SUBNORMAL\n",
	"FLOAT64_SMALLEST_SUBNORMAL": "\nFLOAT64_SMALLEST_SUBNORMAL\n    Smallest positive denormalized double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_SMALLEST_SUBNORMAL\n    4.940656458412465e-324\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_NORMAL\n",
	"forEach": "\nforEach( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > forEach( arr, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n",
	"forEachAsync": "\nforEachAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, onDuration, done )\n    1000\n    2500\n    3000\n    Done.\n\n    // Limit number of concurrent invocations:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, opts, onDuration, done )\n    2500\n    3000\n    1000\n    Done.\n\n    // Process sequentially:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, opts, onDuration, done )\n    3000\n    2500\n    1000\n    Done.\n\n\nforEachAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n",
	"forEachRight": "\nforEachRight( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection, iterating from right to\n    left.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > forEachRight( arr, logger )\n    3: 4\n    2: 3\n    1: 2\n    0: 1\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n",
	"forEachRightAsync": "\nforEachRightAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection, iterating from\n    right to left.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, onDuration, done )\n    1000\n    2500\n    3000\n    Done.\n\n    // Limit number of concurrent invocations:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, opts, onDuration, done )\n    2500\n    3000\n    1000\n    Done.\n\n    // Process sequentially:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, opts, onDuration, done )\n    3000\n    2500\n    1000\n    Done.\n\n\nforEachRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachRightAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n",
	"forIn": "\nforIn( obj, fcn[, thisArg] )\n    Invokes a function for each own and inherited enumerable property of an\n    object.\n\n    When invoked, the function is provided three arguments:\n\n    - `value`: object property value\n    - `key`: object property\n    - `obj`: the input object\n\n    To terminate iteration before visiting all properties, the provided function\n    must explicitly return `false`.\n\n    Property iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Input object, including arrays, typed arrays, and other collections.\n\n    fcn: Function\n        The function to invoke for each own enumerable property.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Input object.\n\n    Examples\n    --------\n    > function logger( v, k ) { console.log( '%s: %d', k, v ); };\n    > function Foo() { return this; };\n    > Foo.prototype.beep = 'boop';\n    > var obj = new Foo();\n    > forIn( obj, logger )\n    beep: boop\n\n    See Also\n    --------\n    forEach, forOwn\n",
	"forOwn": "\nforOwn( obj, fcn[, thisArg] )\n    Invokes a function for each own enumerable property of an object.\n\n    When invoked, the function is provided three arguments:\n\n    - `value`: object property value\n    - `key`: object property\n    - `obj`: the input object\n\n    To terminate iteration before visiting all properties, the provided function\n    must explicitly return `false`.\n\n    The function determines the list of own enumerable properties *before*\n    invoking the provided function. Hence, any modifications made to the input\n    object *after* calling this function (such as adding and removing\n    properties) will *not* affect the list of visited properties.\n\n    Property iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Input object, including arrays, typed arrays, and other collections.\n\n    fcn: Function\n        The function to invoke for each own enumerable property.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Input object.\n\n    Examples\n    --------\n    > function logger( v, k ) { console.log( '%s: %d', k, v ); };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n    > forOwn( obj, logger )\n    a: 1\n    b: 2\n    c: 3\n    d: 4\n\n    See Also\n    --------\n    forEach, forIn\n",
	"FOURTH_PI": "\nFOURTH_PI\n    One fourth times the mathematical constant `π`.\n\n    Examples\n    --------\n    > FOURTH_PI\n    7.85398163397448309616e-1\n\n    See Also\n    --------\n    PI\n",
	"FOURTH_ROOT_EPS": "\nFOURTH_ROOT_EPS\n    Fourth root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FOURTH_ROOT_EPS\n    0.0001220703125\n\n    See Also\n    --------\n    EPS\n",
	"FRB_SF_WAGE_RIGIDITY": "\nFRB_SF_WAGE_RIGIDITY()\n    Returns wage rates for U.S. workers that have not changed jobs within the\n    year.\n\n    Each array element has the following fields:\n\n    - date: collection date (month/day/year; e.g., 01/01/1980).\n    - all_workers: wage rates for hourly and non-hourly workers.\n    - hourly_workers: wage rates for hourly workers.\n    - non_hourly_workers: wage rates for non-hourly workers.\n    - less_than_high_school: wage rates for workers with less than a high school\n      education.\n    - high_school: wage rates for workers with a high school education.\n    - some_college: wage rates for workers with some college education.\n    - college: wage rates for workers with a college education.\n    - construction: wage rates for workers in the construction industry.\n    - finance: wage rates for workers in the finance industry.\n    - manufacturing: wage rates for workers in the manufacturing industry.\n\n    Returns\n    -------\n    out: Array<Object>\n        Wage rates.\n\n    Examples\n    --------\n    > var data = FRB_SF_WAGE_RIGIDITY()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Federal Reserve Bank of San Francisco. 2017. \"Wage Rigidity.\" <http://www.\n    frbsf.org/economic-research/indicators-data/nominal-wage-rigidity/>.\n\n",
	"fromCodePoint": "\nfromCodePoint( pt1[, pt2[, pt3[, ...]]] )\n    Creates a string from a sequence of Unicode code points.\n\n    In addition to multiple arguments, the function also supports providing an\n    array-like object as a single argument containing a sequence of Unicode code\n    points.\n\n    Parameters\n    ----------\n    pt1: ...integer\n        Sequence of Unicode code points.\n\n    Returns\n    -------\n    out: string\n        Output string.\n\n    Examples\n    --------\n    > var out = fromCodePoint( 9731 )\n    '☃'\n    > out = fromCodePoint( [ 9731 ] )\n    '☃'\n    > out = fromCodePoint( 97, 98, 99 )\n    'abc'\n    > out = fromCodePoint( [ 97, 98, 99 ] )\n    'abc'\n\n",
	"functionName": "\nfunctionName( fcn )\n    Returns the name of a function.\n\n    If provided an anonymous function, the function returns an empty `string` or\n    the string `\"anonymous\"`.\n\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    Returns\n    -------\n    out: string\n        Function name.\n\n    Examples\n    --------\n    > var v = functionName( String )\n    'String'\n    > v = functionName( function foo(){} )\n    'foo'\n    > v = functionName( function(){} )\n    '' || 'anonymous'\n\n    See Also\n    --------\n    constructorName\n",
	"functionSequence": "\nfunctionSequence( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as an argument to the next function. The result of the\n    rightmost function is the result of the whole.\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as unary functions.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x ) { return 2 * x; };\n    > function b( x ) { return x + 3; };\n    > function c( x ) { return x / 5; };\n    > var f = functionSequence( a, b, c );\n    > var z = f( 6 )\n    3\n\n    See Also\n    --------\n    compose, functionSequenceAsync\n",
	"functionSequenceAsync": "\nfunctionSequenceAsync( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as the first argument of the next function. The result of\n    the rightmost function is the result of the whole.\n\n    The last argument for each provided function is a `next` callback which\n    should be invoked upon function completion. The callback accepts two\n    arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the pipeline function suspends execution and immediately calls the\n    `done` callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as binary functions.\n\n    The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, 2*x );\n    ...    }\n    ... };\n    > function b( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x+3 );\n    ...    }\n    ... };\n    > function c( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x/5 );\n    ...    }\n    ... };\n    > var f = functionSequenceAsync( a, b, c );\n    > function done( error, result ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( result );\n    ... };\n    > f( 6, done )\n    3\n\n    See Also\n    --------\n    composeAsync, functionSequence\n",
	"GAMMA_LANCZOS_G": "\nGAMMA_LANCZOS_G\n    Arbitrary constant `g` to be used in Lanczos approximation functions.\n\n    Examples\n    --------\n    > GAMMA_LANCZOS_G\n    10.900511\n\n",
	"getPrototypeOf": "\ngetPrototypeOf( value )\n    Returns the prototype of a provided object.\n\n    In contrast to the native `Object.getPrototypeOf`, this function does not\n    throw when provided `null` or `undefined`. Instead, similar to when provided\n    any value with *no* inherited properties, the function returns `null`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: Object|null\n        Prototype.\n\n    Examples\n    --------\n    > var proto = getPrototypeOf( {} )\n    {}\n\n    See Also\n    --------\n    hasPrototype\n",
	"getegid": "\ngetegid()\n    Returns the effective numeric group identity of the calling process.\n\n    The function only returns an effective group identity on POSIX platforms.\n    For all other platforms (e.g., Windows and Android), the function returns\n    `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Effective numeric group identity.\n\n    Examples\n    --------\n    > var gid = getegid()\n\n    See Also\n    --------\n    geteuid, getgid, getuid\n",
	"geteuid": "\ngeteuid()\n    Returns the effective numeric user identity of the calling process.\n\n    The function only returns an effective user identity on POSIX platforms. For\n    all other platforms (e.g., Windows and Android), the function returns\n    `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Effective numeric user identity.\n\n    Examples\n    --------\n    > var uid = geteuid()\n\n    See Also\n    --------\n    getegid, getgid, getuid\n",
	"getgid": "\ngetgid()\n    Returns the numeric group identity of the calling process.\n\n    The function only returns a group identity on POSIX platforms. For all other\n    platforms (e.g., Windows and Android), the function returns `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Numeric group identity.\n\n    Examples\n    --------\n    > var gid = getgid()\n\n    See Also\n    --------\n    getegid, geteuid, getuid\n",
	"getuid": "\ngetuid()\n    Returns the numeric user identity of the calling process.\n\n    The function only returns a user identity on POSIX platforms. For all other\n    platforms (e.g., Windows and Android), the function returns `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Numeric user identity.\n\n    Examples\n    --------\n    > var uid = getuid()\n\n    See Also\n    --------\n    getegid, geteuid, getgid\n",
	"GLAISHER": "\nGLAISHER\n    Glaisher-Kinkelin constant.\n\n    Examples\n    --------\n    > GLAISHER\n    1.2824271291006226\n\n",
	"group": "\ngroup( collection, [options,] groups )\n    Groups values as arrays associated with distinct keys.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    groups: Array|TypedArray|Object\n        A collection defining which group an element in the input collection\n        belongs to. Each value in `groups` should resolve to a value which can\n        be serialized as an object key. If provided an object, the object must\n        be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var groups = [ 'b', 'b', 'f', 'b' ];\n    > var out = group( collection, groups )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n    > groups = [ 1, 1, 2, 1 ];\n    > out = group( collection, groups )\n    { '1': [ 'beep', 'boop', 'bar' ], '2': [ 'foo' ] }\n\n    // Output group results as indices:\n    > groups = [ 'b', 'b', 'f', 'b' ];\n    > var opts = { 'returns': 'indices' };\n    > out = group( collection, opts, groups )\n    { '1': [ 0, 1, 3 ], '2': [ 2 ] }\n\n    // Output group results as index-element pairs:\n    > opts = { 'returns': '*' };\n    > out = group( collection, opts, groups )\n    { '1': [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], '2': [ [2, 'foo'] ] }\n\n    See Also\n    --------\n    bifurcate, countBy, groupBy\n",
	"groupBy": "\ngroupBy( collection, [options,] indicator )\n    Groups values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = groupBy( collection, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > out = groupBy( collection, opts, indicator )\n    { 'b': [ 0, 1, 3 ], 'other': [ 2 ] }\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupBy( collection, opts, indicator )\n    { 'b': [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], 'f': [ [2, 'foo' ] ] }\n\n    See Also\n    --------\n    bifurcateBy, countBy, group\n",
	"groupByAsync": "\ngroupByAsync( collection, [options,] indicator, done )\n    Groups values according to an indicator function.\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty object as the second argument.\n\n    The `group` returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ 1000, 3000 ], \"false\": [ 2500 ] }\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > groupByAsync( arr, opts, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ 2, 0 ], \"false\": [ 1 ] }\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > groupByAsync( arr, opts, indicator done )\n    1000\n    2500\n    3000\n    { \"true\": [ [ 2, 1000 ], [ 0, 3000 ] ], \"false\": [ [ 1, 2500 ] ] }\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n\n\ngroupByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A group-by function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = groupByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    { \"true\": [ 2000, 1000 ], \"false\": [ 1500 ] }\n\n    See Also\n    --------\n    bifurcateByAsync, countByAsync, groupBy\n",
	"groupIn": "\ngroupIn( obj, [options,] indicator )\n    Group values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty object with no prototype, the function returns an empty\n    object.\n\n    The function iterates over an object's own and inherited properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\n    > Foo.prototype = Object.create( null );\n    > Foo.prototype.c = 'foo';\n    > Foo.prototype.d = 'bar';\n    > var obj = new Foo();\n    > var out = groupIn( obj, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = groupIn( obj, opts, indicator )\n    { 'b': [ 'a', 'b', 'd' ], 'other': [ 'c' ] }\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupIn( obj, opts, indicator )\n    { 'b': [['a','beep'], ['b','boop'], ['d','bar']], 'other': [['c','foo' ]] }\n\n    See Also\n    --------\n    bifurcateIn, groupBy, groupOwn\n",
	"groupOwn": "\ngroupOwn( obj, [options,] indicator )\n    Group values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty object, the function returns an empty object.\n\n    The function iterates over an object's own properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\n    > var out = groupOwn( obj, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = groupOwn( obj, opts, indicator )\n    { 'b': [ 'a', 'b', 'd' ], 'other': [ 'c' ] }\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupOwn( obj, opts, indicator )\n    { 'b': [['a','beep'], ['b','boop'], ['d','bar']], 'other': [['c','foo' ]] }\n\n    See Also\n    --------\n    bifurcateOwn, group, groupBy\n",
	"HALF_LN2": "\nHALF_LN2\n    One half times the natural logarithm of `2`.\n\n    Examples\n    --------\n    > HALF_LN2\n    3.46573590279972654709e-01\n\n    See Also\n    --------\n    LN2\n",
	"HALF_PI": "\nHALF_PI\n    One half times the mathematical constant `π`.\n\n    Examples\n    --------\n    > HALF_PI\n    1.5707963267948966\n\n    See Also\n    --------\n    PI\n",
	"hasArrayBufferSupport": "\nhasArrayBufferSupport()\n    Tests for native `ArrayBuffer` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `ArrayBuffer` support.\n\n    Examples\n    --------\n    > var bool = hasArrayBufferSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasFloat32ArraySupport, hasFloat64ArraySupport, hasInt16ArraySupport, hasInt32ArraySupport, hasInt8ArraySupport, hasNodeBufferSupport, hasSharedArrayBufferSupport, hasUint16ArraySupport, hasUint32ArraySupport, hasUint8ArraySupport, hasUint8ClampedArraySupport\n",
	"hasAsyncAwaitSupport": "\nhasAsyncAwaitSupport()\n    Tests for native `async`/`await` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `async`/`await` support.\n\n    Examples\n    --------\n    > var bool = hasAsyncAwaitSupport()\n    <boolean>\n\n",
	"hasClassSupport": "\nhasClassSupport()\n    Tests for native `class` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `class` support.\n\n    Examples\n    --------\n    > var bool = hasClassSupport()\n    <boolean>\n\n",
	"hasFloat32ArraySupport": "\nhasFloat32ArraySupport()\n    Tests for native `Float32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Float32Array` support.\n\n    Examples\n    --------\n    > var bool = hasFloat32ArraySupport()\n    <boolean>\n\n",
	"hasFloat64ArraySupport": "\nhasFloat64ArraySupport()\n    Tests for native `Float64Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Float64Array` support.\n\n    Examples\n    --------\n    > var bool = hasFloat64ArraySupport()\n    <boolean>\n\n",
	"hasFunctionNameSupport": "\nhasFunctionNameSupport()\n    Tests for native function `name` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has function `name` support.\n\n    Examples\n    --------\n    > var bool = hasFunctionNameSupport()\n    <boolean>\n\n",
	"hasGeneratorSupport": "\nhasGeneratorSupport()\n    Tests whether an environment supports native generator functions.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment support generator functions.\n\n    Examples\n    --------\n    > var bool = hasGeneratorSupport()\n    <boolean>\n\n",
	"hasInt16ArraySupport": "\nhasInt16ArraySupport()\n    Tests for native `Int16Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int16Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt16ArraySupport()\n    <boolean>\n\n",
	"hasInt32ArraySupport": "\nhasInt32ArraySupport()\n    Tests for native `Int32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int32Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt32ArraySupport()\n    <boolean>\n\n",
	"hasInt8ArraySupport": "\nhasInt8ArraySupport()\n    Tests for native `Int8Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int8Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt8ArraySupport()\n    <boolean>\n\n",
	"hasMapSupport": "\nhasMapSupport()\n    Tests for native `Map` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Map` support.\n\n    Examples\n    --------\n    > var bool = hasMapSupport()\n    <boolean>\n\n",
	"hasNodeBufferSupport": "\nhasNodeBufferSupport()\n    Tests for native `Buffer` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Buffer` support.\n\n    Examples\n    --------\n    > var bool = hasNodeBufferSupport()\n    <boolean>\n\n",
	"hasOwnProp": "\nhasOwnProp( value, property )\n    Tests if an object has a specified property.\n\n    In contrast to the native `Object.prototype.hasOwnProperty`, this function\n    does not throw when provided `null` or `undefined`. Instead, the function\n    returns `false`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasOwnProp( beep, 'boop' )\n    true\n    > bool = hasOwnProp( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasProp\n",
	"hasProp": "\nhasProp( value, property )\n    Tests if an object has a specified property, either own or inherited.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasProp( beep, 'boop' )\n    true\n    > bool = hasProp( beep, 'toString' )\n    true\n    > bool = hasProp( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasOwnProp\n",
	"hasPrototype": "\nhasPrototype( value, proto )\n    Tests if an object's prototype chain contains a provided prototype.\n\n    The function returns `false` if provided a primitive value.\n\n    This function is generally more robust than the `instanceof` operator (e.g.,\n    where inheritance is performed without using constructors).\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    proto: Object|Function\n        Prototype.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a provided prototype exists in a prototype chain.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > function Bar() { return this; };\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var bool = hasPrototype( bar, Foo.prototype )\n    true\n\n    See Also\n    --------\n    getPrototypeOf\n",
	"hasProxySupport": "\nhasProxySupport()\n    Tests whether an environment has native `Proxy` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Proxy` support.\n\n    Examples\n    --------\n    > var bool = hasProxySupport()\n    <boolean>\n\n",
	"hasSetSupport": "\nhasSetSupport()\n    Tests for native `Set` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Set` support.\n\n    Examples\n    --------\n    > var bool = hasSetSupport()\n    <boolean>\n\n",
	"hasSharedArrayBufferSupport": "\nhasSharedArrayBufferSupport()\n    Tests for native `SharedArrayBuffer` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `SharedArrayBuffer` support.\n\n    Examples\n    --------\n    > var bool = hasSharedArrayBufferSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasArrayBufferSupport, hasFloat32ArraySupport, hasFloat64ArraySupport, hasInt16ArraySupport, hasInt32ArraySupport, hasInt8ArraySupport, hasNodeBufferSupport, hasUint16ArraySupport, hasUint32ArraySupport, hasUint8ArraySupport, hasUint8ClampedArraySupport\n",
	"hasSymbolSupport": "\nhasSymbolSupport()\n    Tests for native `Symbol` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Symbol` support.\n\n    Examples\n    --------\n    > var bool = hasSymbolSupport()\n    <boolean>\n\n",
	"hasToStringTagSupport": "\nhasToStringTagSupport()\n    Tests for native `toStringTag` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `toStringTag` support.\n\n    Examples\n    --------\n    > var bool = hasToStringTagSupport()\n    <boolean>\n\n",
	"hasUint16ArraySupport": "\nhasUint16ArraySupport()\n    Tests for native `Uint16Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint16Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint16ArraySupport()\n    <boolean>\n\n",
	"hasUint32ArraySupport": "\nhasUint32ArraySupport()\n    Tests for native `Uint32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint32Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint32ArraySupport()\n    <boolean>\n\n",
	"hasUint8ArraySupport": "\nhasUint8ArraySupport()\n    Tests for native `Uint8Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint8Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint8ArraySupport()\n    <boolean>\n\n",
	"hasUint8ClampedArraySupport": "\nhasUint8ClampedArraySupport()\n    Tests for native `Uint8ClampedArray` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint8ClampedArray` support.\n\n    Examples\n    --------\n    > var bool = hasUint8ClampedArraySupport()\n    <boolean>\n\n",
	"hasWeakMapSupport": "\nhasWeakMapSupport()\n    Tests for native `WeakMap` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `WeakMap` support.\n\n    Examples\n    --------\n    > var bool = hasWeakMapSupport()\n    <boolean>\n\n",
	"hasWeakSetSupport": "\nhasWeakSetSupport()\n    Tests for native `WeakSet` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `WeakSet` support.\n\n    Examples\n    --------\n    > var bool = hasWeakSetSupport()\n    <boolean>\n\n",
	"hasWebAssemblySupport": "\nhasWebAssemblySupport()\n    Tests for native WebAssembly support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native WebAssembly support.\n\n    Examples\n    --------\n    > var bool = hasWebAssemblySupport()\n    <boolean>\n\n",
	"homedir": "\nhomedir()\n    Returns the current user's home directory.\n\n    If unable to locate a home directory, the function returns `null`.\n\n    Returns\n    -------\n    out: string|null\n         Home directory.\n\n    Examples\n    --------\n    > var home = homedir()\n    e.g., '/Users/<username>'\n\n    See Also\n    --------\n    configdir, tmpdir\n",
	"HOURS_IN_DAY": "\nHOURS_IN_DAY\n    Number of hours in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var hrs = days * HOURS_IN_DAY\n    75.36\n\n    See Also\n    --------\n    HOURS_IN_WEEK\n",
	"HOURS_IN_WEEK": "\nHOURS_IN_WEEK\n    Number of hours in a week.\n\n    Examples\n    --------\n    > var wkrs = 3.14;\n    > var hrs = wks * HOURS_IN_WEEK\n    527.52\n\n    See Also\n    --------\n    HOURS_IN_DAY\n",
	"hoursInMonth": "\nhoursInMonth( [month[, year]] )\n    Returns the number of hours in a month.\n\n    By default, the function returns the number of hours in the current month of\n    the current year (according to local time). To determine the number of hours\n    for a particular month and year, provide `month` and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also supports providing a `Date` object.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Hours in a month.\n\n    Examples\n    --------\n    > var num = hoursInMonth()\n    <number>\n    > num = hoursInMonth( 2 )\n    <number>\n    > num = hoursInMonth( 2, 2016 )\n    696\n    > num = hoursInMonth( 2, 2017 )\n    672\n\n    // Other ways to supply month:\n    > num = hoursInMonth( 'feb', 2016 )\n    696\n    > num = hoursInMonth( 'february', 2016 )\n    696\n\n    See Also\n    --------\n    hoursInYear\n",
	"hoursInYear": "\nhoursInYear( [value] )\n    Returns the number of hours in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of hours in the current year\n    (according to local time). To determine the number of hours for a particular\n    year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of hours in a year.\n\n    Examples\n    --------\n    > var num = hoursInYear()\n    <number>\n    > num = hoursInYear( 2016 )\n    8784\n    > num = hoursInYear( 2017 )\n    8760\n\n    See Also\n    --------\n    hoursInMonth\n",
	"httpServer": "\nhttpServer( [options,] [requestListener] )\n    Returns a function to create an HTTP server.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.port: integer (optional)\n        Server port. Default: `0` (i.e., randomly assigned).\n\n    options.maxport: integer (optional)\n        Max server port when port hunting. Default: `maxport = port`.\n\n    options.hostname: string (optional)\n        Server hostname.\n\n    options.address: string (optional)\n        Server address. Default: `'127.0.0.1'`.\n\n    requestListener: Function (optional)\n        Request callback.\n\n    Returns\n    -------\n    createServer: Function\n        Function to create an HTTP server.\n\n    Examples\n    --------\n    // Basic usage:\n    > var createServer = httpServer()\n    <Function>\n\n    // Provide a request callback:\n    > function onRequest( request, response ) {\n    >    console.log( request.url );\n    >    response.end( 'OK' );\n    > };\n    > createServer = httpServer( onRequest )\n    <Function>\n\n    // Specify a specific port:\n    > var opts = { 'port': 7331 };\n    > createServer = httpServer( opts )\n    <Function>\n\n\ncreateServer( done )\n    Creates an HTTP server.\n\n    Parameters\n    ----------\n    done: Function\n        Callback to invoke after creating a server.\n\n    Examples\n    --------\n    > function done( error, server ) {\n    >    if ( error ) {\n    >        throw error;\n    >    }\n    >    console.log( 'Success!' );\n    >    server.close();\n    > };\n    > var createServer = httpServer();\n    > createServer( done );\n\n",
	"identity": "\nidentity( x )\n    Identity function.\n\n    Parameters\n    ----------\n    x: any\n        Input value.\n\n    Returns\n    -------\n    out: any\n        Input value.\n\n    Examples\n    --------\n    > var v = identity( 3.14 )\n    3.14\n\n    See Also\n    --------\n    constantFunction\n",
	"ifelse": "\nifelse( bool, x, y )\n    If a condition is truthy, returns `x`; otherwise, returns `y`.\n\n    Parameters\n    ----------\n    bool: boolean\n        Condition.\n\n    x: any\n        Value to return if a condition is truthy.\n\n    y: any\n        Value to return if a condition is falsy.\n\n    Returns\n    -------\n    z: any\n        Either `x` or `y`.\n\n    Examples\n    --------\n    > var z = ifelse( true, 1.0, -1.0 )\n    1.0\n    > z = ifelse( false, 1.0, -1.0 )\n    -1.0\n\n    See Also\n    --------\n    ifelseAsync, ifthen\n",
	"ifelseAsync": "\nifelseAsync( predicate, x, y, done )\n    If a predicate function returns a truthy value, returns `x`; otherwise,\n    returns `y`.\n\n    A predicate function is provided a single argument:\n\n    - clbk: callback to invoke upon predicate completion\n\n    The callback function accepts two arguments:\n\n    - error: error object\n    - bool: condition used to determine whether to invoke `x` or `y`\n\n    The `done` callback is invoked upon function completion and is provided at\n    most two arguments:\n\n    - error: error object\n    - result: either `x` or `y`\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function.\n\n    x: any\n        Value to return if a condition is truthy.\n\n    y: any\n        Value to return if a condition is falsy.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function predicate( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, true );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > ifelseAsync( predicate, 'beep', 'boop', done )\n    'beep'\n\n    See Also\n    --------\n    ifelse, ifthenAsync\n",
	"ifthen": "\nifthen( bool, x, y )\n    If a condition is truthy, invoke `x`; otherwise, invoke `y`.\n\n    Parameters\n    ----------\n    bool: boolean\n        Condition.\n\n    x: Function\n        Function to invoke if a condition is truthy.\n\n    y: Function\n        Function to invoke if a condition is falsy.\n\n    Returns\n    -------\n    z: any\n        Return value of either `x` or `y`.\n\n    Examples\n    --------\n    > function x() { return 1.0; };\n    > function y() { return -1.0; };\n    > var z = ifthen( true, x, y )\n    1.0\n    > z = ifthen( false, x, y )\n    -1.0\n\n    See Also\n    --------\n    ifelse, ifthenAsync\n",
	"ifthenAsync": "\nifthenAsync( predicate, x, y, done )\n    If a predicate function returns a truthy value, invokes `x`; otherwise,\n    invokes `y`.\n\n    The predicate function is provided a single argument:\n\n    - clbk: callback to invoke upon predicate function completion\n\n    The predicate function callback accepts two arguments:\n\n    - error: error object\n    - bool: condition used to determine whether to invoke `x` or `y`\n\n    Both `x` and `y` are provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the `done` callback is invoked with its\n    first argument as `null` and all other provided arguments.\n\n    If the error argument is truthy, the `done` callback is invoked with only an\n    error argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function.\n\n    x: Function\n        Function to invoke if a condition is truthy.\n\n    y: Function\n        Function to invoke if a condition is falsy.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function predicate( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, false );\n    ...     }\n    ... };\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'beep' );\n    ...     }\n    ... };\n    > function y( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'boop' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > ifthenAsync( predicate, x, y, done )\n    'boop'\n\n    See Also\n    --------\n    ifelseAsync, ifthen\n",
	"imag": "\nimag( z )\n    Returns the imaginary component of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    im: number\n        Imaginary component.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var im = imag( z )\n    3.0\n\n    See Also\n    --------\n    real, reim\n",
	"IMG_ACANTHUS_MOLLIS": "\nIMG_ACANTHUS_MOLLIS()\n    Returns a `Buffer` containing image data of Karl Blossfeldt's gelatin silver\n    print *Acanthus mollis*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_ACANTHUS_MOLLIS()\n    <Buffer>\n\n    References\n    ----------\n    - Blossfeldt, Karl. 1928. *Acanthus mollis*. <http://www.getty.edu/art/\n    collection/objects/35443/karl-blossfeldt-acanthus-mollis-german-1928/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_ALLIUM_OREOPHILUM\n",
	"IMG_AIRPLANE_FROM_ABOVE": "\nIMG_AIRPLANE_FROM_ABOVE()\n    Returns a `Buffer` containing image data of Fédèle Azari's gelatin silver\n    print of an airplane, viewed from above looking down.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_AIRPLANE_FROM_ABOVE()\n    <Buffer>\n\n    References\n    ----------\n    - Azari, Fédèle. 1929. (no title). <http://www.getty.edu/art/collection/\n    objects/134512/fedele-azari-airplane-viewed-from-above-looking-down-italian-\n    1914-1929/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_ALLIUM_OREOPHILUM": "\nIMG_ALLIUM_OREOPHILUM()\n    Returns a `Buffer` containing image data of Karl Blossfeldt's gelatin silver\n    print *Allium ostrowskianum*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_ALLIUM_OREOPHILUM()\n    <Buffer>\n\n    References\n    ----------\n    - Blossfeldt, Karl. 1928. *Allium ostrowskianum*. <http://www.getty.edu/art/\n    collection/objects/35448/karl-blossfeldt-allium-ostrowskianum-\n    knoblauchpflanze-german-1928/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_ACANTHUS_MOLLIS\n",
	"IMG_BLACK_CANYON": "\nIMG_BLACK_CANYON()\n    Returns a `Buffer` containing image data of Timothy H. O'Sullivan's albumen\n    silver print *Black Cañon, Colorado River, From Camp 8, Looking Above*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_BLACK_CANYON()\n    <Buffer>\n\n    References\n    ----------\n    - O'Sullivan, Timothy H. 1871. *Black Cañon, Colorado River, From Camp 8,\n    Looking Above*. <http://www.getty.edu/art/collection/objects/40209/timothy-\n    h-o'sullivan-black-canon-colorado-river-from-camp-8-looking-above-american-\n    1871/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_DUST_BOWL_HOME": "\nIMG_DUST_BOWL_HOME()\n    Returns a `Buffer` containing image data of Dorothea Lange's gelatin silver\n    print of an abandoned Dust Bowl home.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_DUST_BOWL_HOME()\n    <Buffer>\n\n    References\n    ----------\n    - Lange, Dorothea. 1940. *Abandoned Dust Bowl Home*. <http://www.getty.edu/\n    art/collection/objects/128362/dorothea-lange-abandoned-dust-bowl-home-\n    american-about-1935-1940/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_FRENCH_ALPINE_LANDSCAPE": "\nIMG_FRENCH_ALPINE_LANDSCAPE()\n    Returns a `Buffer` containing image data of Adolphe Braun's carbon print of\n    a French alpine landscape.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_FRENCH_ALPINE_LANDSCAPE()\n    <Buffer>\n\n    References\n    ----------\n    - Braun, Adolphe. 1870. (no title). <http://www.getty.edu/art/collection/\n    objects/54324/adolphe-braun-alpine-landscape-french-1865-1870/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_LOCOMOTION_HOUSE_CAT": "\nIMG_LOCOMOTION_HOUSE_CAT()\n    Returns a `Buffer` containing image data of Eadweard J. Muybridge's\n    collotype of a house cat (24 views).\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_LOCOMOTION_HOUSE_CAT()\n    <Buffer>\n\n    References\n    ----------\n    - Muybridge, Eadweard J. 1887. *Animal Locomotion*. <http://www.getty.edu/\n    art/collection/objects/40918/eadweard-j-muybridge-animal-locomotion-american\n    -1887/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_LOCOMOTION_NUDE_MALE\n",
	"IMG_LOCOMOTION_NUDE_MALE": "\nIMG_LOCOMOTION_NUDE_MALE()\n    Returns a `Buffer` containing image data of Eadweard J. Muybridge's\n    collotype of a nude male moving in place (48 views).\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_LOCOMOTION_NUDE_MALE()\n    <Buffer>\n\n    References\n    ----------\n    - Muybridge, Eadweard J. 1887. *Animal Locomotion*. <http://www.getty.edu/\n    art/collection/objects/40918/eadweard-j-muybridge-animal-locomotion-american\n    -1887/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_LOCOMOTION_HOUSE_CAT\n",
	"IMG_MARCH_PASTORAL": "\nIMG_MARCH_PASTORAL()\n    Returns a `Buffer` containing image data of Peter Henry Emerson's\n    photogravure of sheep in a pastoral setting.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_MARCH_PASTORAL()\n    <Buffer>\n\n    References\n    ----------\n    - Emerson, Peter Henry. 1888. *A March Pastoral*. <http://www.getty.edu/art/\n    collection/objects/141994/peter-henry-emerson-a-march-pastoral-suffolk-\n    british-1888/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_NAGASAKI_BOATS": "\nIMG_NAGASAKI_BOATS()\n    Returns a `Buffer` containing image data of Felice Beato's albumen silver\n    print of boats in a river in Nagasaki.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_NAGASAKI_BOATS()\n    <Buffer>\n\n    References\n    ----------\n    - Beato, Felice. 1865. (no title). <http://www.getty.edu/art/collection/\n    objects/241797/felice-beato-boats-in-river-nagasaki-british-about-1865/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"incrcount": "\nincrcount()\n    Returns an accumulator function which incrementally updates a count.\n\n    If provided a value, the accumulator function returns an updated count. If\n    not provided a value, the accumulator function returns the current count.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrcount();\n    > var v = accumulator()\n    0\n    > v = accumulator( 2.0 )\n    1\n    > v = accumulator( -5.0 )\n    2\n    > v = accumulator()\n    2\n\n    See Also\n    --------\n    incrmean, incrsum, incrsummary\n",
	"incrcovariance": "\nincrcovariance( [mx, my] )\n    Returns an accumulator function which incrementally computes an unbiased\n    sample covariance.\n\n    If provided values, the accumulator function returns an updated unbiased\n    sample covariance. If not provided values, the accumulator function returns\n    the current unbiased sample covariance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrcovariance();\n    > var v = accumulator()\n    0.0\n    > v = accumulator( 2.0, 1.0 )\n    0.0\n    > v = accumulator( -5.0, 3.14 )\n    ~-7.49\n    > v = accumulator()\n    ~-7.49\n\n    See Also\n    --------\n    incrpcorr, incrvariance\n",
	"increwmean": "\nincrewmean( α )\n    Returns an accumulator function which incrementally computes an\n    exponentially weighted mean, where α is a smoothing factor between 0 and 1.\n\n    If provided a value, the accumulator function returns an updated mean. If\n    not provided a value, the accumulator function returns the current mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = increwmean( 0.5 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( -5.0 )\n    -1.5\n    > v = accumulator()\n    -1.5\n\n    See Also\n    --------\n    incrmean, incrmmean\n",
	"incrgmean": "\nincrgmean()\n    Returns an accumulator function which incrementally computes a geometric\n    mean.\n\n    If provided a value, the accumulator function returns an updated geometric\n    mean. If not provided a value, the accumulator function returns the current\n    geometric mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    If provided a negative value, the accumulated value is `NaN` for all future\n    invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrgmean();\n    > var v = accumulator()\n    1.0\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( 5.0 )\n    ~3.16\n    > v = accumulator()\n    ~3.16\n\n    See Also\n    --------\n    incrhmean, incrmean, incrsummary\n",
	"incrhmean": "\nincrhmean()\n    Returns an accumulator function which incrementally computes a harmonic\n    mean.\n\n    If provided a value, the accumulator function returns an updated harmonic\n    mean. If not provided a value, the accumulator function returns the current\n    harmonic mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrhmean();\n    > var v = accumulator()\n    0.0\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( 5.0 )\n    ~2.86\n    > v = accumulator()\n    ~2.86\n\n    See Also\n    --------\n    incrgmean, incrmean, incrsummary\n",
	"incrkurtosis": "\nincrkurtosis()\n    Returns an accumulator function which incrementally computes a corrected\n    sample excess kurtosis.\n\n    If provided a value, the accumulator function returns an updated corrected\n    sample excess kurtosis. If not provided a value, the accumulator function\n    returns the current corrected sample excess kurtosis.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrkurtosis();\n    > var v = accumulator( 2.0 )\n    null\n    > v = accumulator( 2.0 )\n    null\n    > v = accumulator( -4.0 )\n    null\n    > v = accumulator( -4.0 )\n    -6.0\n\n    See Also\n    --------\n    incrmean, incrskewness, incrstdev, incrsummary, incrvariance\n",
	"incrmax": "\nincrmax()\n    Returns an accumulator function which incrementally computes a maximum\n    value.\n\n    If provided a value, the accumulator function returns an updated maximum\n    value. If not provided a value, the accumulator function returns the current\n    maximum value.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmax();\n    > var m = accumulator()\n    null\n    > m = accumulator( 3.14 )\n    3.14\n    > m = accumulator( -5.0 )\n    3.14\n    > m = accumulator( 10.1 )\n    10.1\n    > m = accumulator()\n    10.1\n\n    See Also\n    --------\n    incrmidrange, incrmin, incrrange, incrsummary\n",
	"incrmean": "\nincrmean()\n    Returns an accumulator function which incrementally computes an arithmetic\n    mean.\n\n    If provided a value, the accumulator function returns an updated mean. If\n    not provided a value, the accumulator function returns the current mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmean();\n    > var mu = accumulator()\n    0.0\n    > mu = accumulator( 2.0 )\n    2.0\n    > mu = accumulator( -5.0 )\n    -1.5\n    > mu = accumulator()\n    -1.5\n\n    See Also\n    --------\n    incrmidrange, incrmmean, incrstdev, incrsum, incrsummary, incrvariance\n",
	"incrmidrange": "\nincrmidrange()\n    Returns an accumulator function which incrementally computes a mid-range.\n\n    The mid-range is the arithmetic mean of maximum and minimum values.\n    Accordingly, the mid-range is the midpoint of the range and a measure of\n    central tendency.\n\n    If provided a value, the accumulator function returns an updated mid-range.\n    If not provided a value, the accumulator function returns the current mid-\n    range.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmidrange();\n    > var v = accumulator()\n    null\n    > v = accumulator( 3.14 )\n    3.14\n    > v = accumulator( -5.0 )\n    ~-0.93\n    > v = accumulator( 10.1 )\n    2.55\n    > v = accumulator()\n    2.55\n\n    See Also\n    --------\n    incrmean, incrmax, incrmin, incrsummary\n",
	"incrmin": "\nincrmin()\n    Returns an accumulator function which incrementally computes a minimum\n    value.\n\n    If provided a value, the accumulator function returns an updated minimum\n    value. If not provided a value, the accumulator function returns the current\n    minimum value.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmin();\n    > var m = accumulator()\n    null\n    > m = accumulator( 3.14 )\n    3.14\n    > m = accumulator( -5.0 )\n    -5.0\n    > m = accumulator( 10.1 )\n    -5.0\n    > m = accumulator()\n    -5.0\n\n    See Also\n    --------\n    incrmax, incrmidrange, incrrange, incrsummary\n",
	"incrmmean": "\nincrmmean( window )\n    Returns an accumulator function which incrementally computes a moving\n    arithmetic mean.\n\n    The `window` parameter defines the number of values over which to compute\n    the moving mean.\n\n    If provided a value, the accumulator function returns an updated moving\n    mean. If not provided a value, the accumulator function returns the current\n    moving mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    The first `W-1` returned mean values will have less statistical support than\n    subsequent mean values, as `W` values are needed to fill the window buffer.\n    Until the window is full, the returned mean equals the arithmetic mean of\n    all provided values.\n\n    Parameters\n    ----------\n    window: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmean( 3 );\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0 )\n    2.0\n    > mu = accumulator( -5.0 )\n    -1.5\n    > mu = accumulator( 3.0 )\n    0.0\n    > mu = accumulator( 5.0 )\n    1.0\n    > mu = accumulator()\n    1.0\n\n    See Also\n    --------\n    incrmean, incrmsum, incrmstdev, incrmsummary, incrmvariance\n",
	"incrmstdev": "\nincrmstdev( window[, mean] )\n    Returns an accumulator function which incrementally computes a moving\n    corrected sample standard deviation.\n\n    The `window` parameter defines the number of values over which to compute\n    the moving corrected sample standard deviation.\n\n    If provided a value, the accumulator function returns an updated moving\n    corrected sample standard deviation. If not provided a value, the\n    accumulator function returns the current moving corrected sample standard\n    deviation.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    The first `W-1` returned corrected sample standard deviation values will\n    have less statistical support than subsequent corrected sample standard\n    deviation values, as `W` values are needed to fill the window buffer. Until\n    the window is full, the returned corrected sample standard deviation equals\n    the corrected sample standard deviation of all provided values.\n\n    Parameters\n    ----------\n    window: integer\n        Window size.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmstdev( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    0.0\n    > s = accumulator( -5.0 )\n    ~4.95\n    > s = accumulator( 3.0 )\n    ~4.36\n    > s = accumulator( 5.0 )\n    ~5.29\n    > s = accumulator()\n    ~5.29\n\n    See Also\n    --------\n    incrmmean, incrmsummary, incrmvariance, incrstdev\n",
	"incrmsum": "\nincrmsum( window )\n    Returns an accumulator function which incrementally computes a moving sum.\n\n    The `window` parameter defines the number of values over which to compute\n    the moving sum.\n\n    If provided a value, the accumulator function returns an updated moving sum.\n    If not provided a value, the accumulator function returns the current moving\n    sum.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    The first `W-1` returned sums will have less statistical support than\n    subsequent sums, as `W` values are needed to fill the window buffer. Until\n    the window is full, the returned sum equals the sum of all provided values.\n\n    Parameters\n    ----------\n    window: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsum( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    2.0\n    > s = accumulator( -5.0 )\n    -3.0\n    > s = accumulator( 3.0 )\n    0.0\n    > s = accumulator( 5.0 )\n    3.0\n    > s = accumulator()\n    3.0\n\n    See Also\n    --------\n    incrmmean, incrmsummary, incrsum\n",
	"incrmsummary": "\nincrmsummary( window )\n    Returns an accumulator function which incrementally computes a moving\n    statistical summary.\n\n    The `window` parameter defines the number of values over which to compute\n    the moving statistical summary.\n\n    If provided a value, the accumulator function returns an updated moving\n    statistical summary. If not provided a value, the accumulator function\n    returns the current moving statistical summary.\n\n    The returned summary is an object containing the following fields:\n\n    - window: window size.\n    - sum: sum.\n    - mean: arithmetic mean.\n    - variance: unbiased sample variance.\n    - stdev: corrected sample standard deviation.\n\n    The first `W-1` returned summaries will have less statistical support than\n    subsequent summaries, as `W` values are needed to fill the window buffer.\n    Until the window is full, the returned summary is computed from all provided\n    values.\n\n    Parameters\n    ----------\n    window: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsummary( 3 );\n    > var s = accumulator()\n    {}\n    > s = accumulator( 2.0 )\n    {...}\n    > s = accumulator( -5.0 )\n    {...}\n    > s = accumulator()\n    {...}\n\n    See Also\n    --------\n    incrmmean, incrmstdev, incrmsum, incrmvariance, incrsummary\n",
	"incrmvariance": "\nincrmvariance( window[, mean] )\n    Returns an accumulator function which incrementally computes a moving\n    unbiased sample variance.\n\n    The `window` parameter defines the number of values over which to compute\n    the moving unbiased sample variance.\n\n    If provided a value, the accumulator function returns an updated moving\n    unbiased sample variance. If not provided a value, the accumulator function\n    returns the current moving unbiased sample variance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    The first `W-1` returned unbiased sample variance values will have less\n    statistical support than subsequent unbiased sample variance values, as `W`\n    values are needed to fill the window buffer. Until the window is full, the\n    returned unbiased sample variance equals the unbiased sample variance of all\n    provided values.\n\n    Parameters\n    ----------\n    window: integer\n        Window size.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmvariance( 3 );\n    > var s2 = accumulator()\n    null\n    > s2 = accumulator( 2.0 )\n    0.0\n    > s2 = accumulator( -5.0 )\n    24.5\n    > s2 = accumulator( 3.0 )\n    19.0\n    > s2 = accumulator( 5.0 )\n    28.0\n    > s2 = accumulator()\n    28.0\n\n    See Also\n    --------\n    incrmmean, incrmstdev, incrmsummary, incrvariance\n",
	"incrpcorr": "\nincrpcorr( [mx, my] )\n    Returns an accumulator function which incrementally computes a sample\n    Pearson product-moment correlation coefficient.\n\n    If provided values, the accumulator function returns an updated sample\n    correlation coefficient. If not provided values, the accumulator function\n    returns the current sample correlation coefficient.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorr();\n    > var r = accumulator()\n    0.0\n    > r = accumulator( 2.0, 1.0 )\n    0.0\n    > r = accumulator( -5.0, 3.14 )\n    ~-1.0\n    > r = accumulator()\n    ~-1.0\n\n    See Also\n    --------\n    incrcovariance, incrsummary\n",
	"incrpcorrdist": "\nincrpcorrdist( [mx, my] )\n    Returns an accumulator function which incrementally computes a sample\n    Pearson product-moment correlation distance.\n\n    The correlation distance is defined as one minus the Pearson product-moment\n    correlation coefficient and, thus, resides on the interval [0,2].\n\n    If provided values, the accumulator function returns an updated sample\n    correlation distance. If not provided values, the accumulator function\n    returns the current sample correlation distance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorrdist();\n    > var d = accumulator()\n    1.0\n    > d = accumulator( 2.0, 1.0 )\n    1.0\n    > d = accumulator( -5.0, 3.14 )\n    ~2.0\n    > d = accumulator()\n    ~2.0\n\n    See Also\n    --------\n    incrcovariance, incrpcorr, incrsummary\n",
	"incrprod": "\nincrprod()\n    Returns an accumulator function which incrementally computes a product.\n\n    If provided a value, the accumulator function returns an updated product. If\n    not provided a value, the accumulator function returns the current product.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow. Note, however, that overflow/underflow\n    may be transient, as the accumulator does not use a double-precision\n    floating-point number to store an accumulated product. Instead, the\n    accumulator splits an accumulated product into a normalized fraction and\n    exponent and updates each component separately. Doing so guards against a\n    loss in precision.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrprod();\n    > var v = accumulator()\n    1.0\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( -5.0 )\n    -10.0\n    > v = accumulator()\n    -10.0\n\n    See Also\n    --------\n    incrsum, incrsummary\n",
	"incrrange": "\nincrrange()\n    Returns an accumulator function which incrementally computes a range.\n\n    If provided a value, the accumulator function returns an updated range. If\n    not provided a value, the accumulator function returns the current range.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrrange();\n    > var v = accumulator()\n    0.0\n    > v = accumulator( -2.0 )\n    0.0\n    > v = accumulator( 1.0 )\n    3.0\n    > v = accumulator( 3.0 )\n    5.0\n    > v = accumulator()\n    5.0\n\n    See Also\n    --------\n    incrmax, incrmean, incrmin, incrsummary\n",
	"incrskewness": "\nincrskewness()\n    Returns an accumulator function which incrementally computes a corrected\n    sample skewness.\n\n    If provided a value, the accumulator function returns an updated corrected\n    sample skewness. If not provided a value, the accumulator function returns\n    the current corrected sample skewness.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrskewness();\n    > var v = accumulator( 2.0 )\n    null\n    > v = accumulator( -5.0 )\n    null\n    > v = accumulator( -10.0 )\n    ~0.492\n    > v = accumulator()\n    ~0.492\n\n    See Also\n    --------\n    incrkurtosis, incrmean, incrstdev, incrsummary, incrvariance\n",
	"incrspace": "\nincrspace( start, stop[, increment] )\n    Generates a linearly spaced numeric array using a provided increment.\n\n    If an `increment` is not provided, the default `increment` is `1`.\n\n    The output array is guaranteed to include the `start` value but does not\n    include the `stop` value.\n\n    Parameters\n    ----------\n    start: number\n        First array value.\n\n    stop: number\n        Array element bound.\n\n    increment: number (optional)\n        Increment. Default: `1`.\n\n    Returns\n    -------\n    arr: Array\n        Linearly spaced numeric array.\n\n    Examples\n    --------\n    > var arr = incrspace( 0, 11, 2 )\n    [ 0, 2, 4, 6, 8, 10 ]\n\n    See Also\n    --------\n    linspace, logspace\n",
	"incrstdev": "\nincrstdev( [mean] )\n    Returns an accumulator function which incrementally computes a corrected\n    sample standard deviation.\n\n    If provided a value, the accumulator function returns an updated corrected\n    sample standard deviation. If not provided a value, the accumulator function\n    returns the current corrected sample standard deviation.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrstdev();\n    > var s = accumulator()\n    0.0\n    > s = accumulator( 2.0 )\n    0.0\n    > s = accumulator( -5.0 )\n    ~4.95\n    > s = accumulator()\n    ~4.95\n\n    See Also\n    --------\n    incrkurtosis, incrmean, incrmstdev, incrskewness, incrsummary, incrvariance\n",
	"incrsum": "\nincrsum()\n    Returns an accumulator function which incrementally computes a sum.\n\n    If provided a value, the accumulator function returns an updated sum. If not\n    provided a value, the accumulator function returns the current sum.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsum();\n    > var s = accumulator()\n    0.0\n    > s = accumulator( 2.0 )\n    2.0\n    > s = accumulator( -5.0 )\n    -3.0\n    > s = accumulator()\n    -3.0\n\n    See Also\n    --------\n    incrcount, incrmean, incrprod, incrsummary\n",
	"incrsummary": "\nincrsummary()\n    Returns an accumulator function which incrementally computes a statistical\n    summary.\n\n    If provided a value, the accumulator function returns an updated summary. If\n    not provided a value, the accumulator function returns the current summary.\n\n    The returned summary is an object containing the following fields:\n\n    - count: count.\n    - max: maximum value.\n    - min: minimum value.\n    - range: range.\n    - midrange: mid-range.\n    - sum: sum.\n    - mean: arithmetic mean.\n    - variance: unbiased sample variance.\n    - stdev: corrected sample standard deviation.\n    - skewness: corrected sample skewness.\n    - kurtosis: corrected sample excess kurtosis.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsummary();\n    > var s = accumulator()\n    {}\n    > s = accumulator( 2.0 )\n    {...}\n    > s = accumulator( -5.0 )\n    {...}\n    > s = accumulator()\n    {...}\n\n    See Also\n    --------\n    incrcount, incrkurtosis, incrmax, incrmean, incrmidrange, incrmin, incrmsummary, incrrange, incrskewness, incrstdev, incrsum, incrvariance\n",
	"incrvariance": "\nincrvariance( [mean] )\n    Returns an accumulator function which incrementally computes an unbiased\n    sample variance.\n\n    If provided a value, the accumulator function returns an updated unbiased\n    sample variance. If not provided a value, the accumulator function returns\n    the current unbiased sample variance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrvariance();\n    > var s2 = accumulator()\n    0.0\n    > s2 = accumulator( 2.0 )\n    0.0\n    > s2 = accumulator( -5.0 )\n    24.5\n    > s2 = accumulator()\n    24.5\n\n    See Also\n    --------\n    incrkurtosis, incrmean, incrmstdev, incrskewness, incrstdev, incrsummary\n",
	"indexOf": "\nindexOf( arr, searchElement[, fromIndex] )\n    Returns the first index at which a given element can be found.\n\n    Search is performed using *strict equality* comparison.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Array-like object.\n\n    searchElement: any\n        Element to find.\n\n    fromIndex: integer (optional)\n        Starting index (if negative, the start index is determined relative to\n        last element).\n\n    Returns\n    -------\n    out: integer\n        Index or -1.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ 4, 3, 2, 1 ];\n    > var idx = indexOf( arr, 3 );\n    1\n    > arr = [ 4, 3, 2, 1 ];\n    > idx = indexOf( arr, 5 );\n    -1\n\n    // Using a `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, 3 )\n    5\n\n    // `fromIndex` which exceeds `array` length:\n    > arr = [ 1, 2, 3, 4, 2, 5 ];\n    > idx = indexOf( arr, 2, 10 )\n    -1\n\n    // Negative `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\n    > idx = indexOf( arr, 2, -4 )\n    5\n    > idx = indexOf( arr, 2, -1 )\n    7\n\n    // Negative `fromIndex` exceeding input `array` length:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, -10 )\n    1\n\n    // Array-like objects:\n    > var str = 'bebop';\n    > idx = indexOf( str, 'o' )\n    3\n\n",
	"inherit": "\ninherit( ctor, superCtor )\n    Prototypical inheritance by replacing the prototype of one constructor with\n    the prototype of another constructor.\n\n    This function is not designed to work with ES2015/ES6 classes. For\n    ES2015/ES6 classes, use `class` with `extends`.\n\n    Parameters\n    ----------\n    ctor: Object|Function\n        Constructor which will inherit.\n\n    superCtor: Object|Function\n        Super (parent) constructor.\n\n    Returns\n    -------\n    out: Object|Function\n        Child constructor.\n\n    Examples\n    --------\n    // Create a parent constructor:\n    > function Foo() { return this; };\n    > Foo.prototype.beep = function beep() { return 'boop'; };\n\n    // Create a child constructor:\n    > function Bar() { Foo.call( this ); return this; };\n\n    // Setup inheritance:\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var v = bar.beep()\n    'boop'\n\n",
	"inmap": "\ninmap( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection and updates the\n    collection in-place.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    fcn: Function\n        Function to invoke for each element in the input collection. The\n        function's return value is used to update the collection in-place.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function foo( v, i ) { return v * i; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = inmap( arr, foo )\n    [ 0.0, 2.0, 6.0 ]\n    > var bool = ( out === arr )\n    true\n\n    See Also\n    --------\n    forEach, inmapRight\n",
	"inmapAsync": "\ninmapAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection and updates a\n    collection in-place.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: value used to update the collection\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling. Note, however, that the function\n    may have mutated an input collection during prior invocations, resulting in\n    a partially mutated collection.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, fcn, done )\n    1000\n    2500\n    3000\n    true\n    [ 0, 2500, 2000 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, opts, fcn, done )\n    2500\n    3000\n    1000\n    true\n    [ 0, 2500, 2000 ]\n\n    // Process sequentially:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, opts, fcn, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n\n\ninmapAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 2000 ]\n\n    See Also\n    --------\n    forEachAsync, inmap, inmapRightAsync\n",
	"inmapRight": "\ninmapRight( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection and updates the\n    collection in-place, iterating from right to left.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    fcn: Function\n        Function to invoke for each element in the input collection. The\n        function's return value is used to update the collection in-place.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function foo( v, i ) { console.log( '%s: %d', i, v ); return v * i; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = inmapRight( arr, foo )\n    2: 3.0\n    1: 2.0\n    0: 1.0\n    [ 0.0, 2.0, 6.0 ]\n    > var bool = ( out === arr )\n    true\n\n    See Also\n    --------\n    forEachRight, inmap\n",
	"inmapRightAsync": "\ninmapRightAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection and updates a\n    collection in-place, iterating from right to left.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: value used to update the collection\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling. Note, however, that the function\n    may have mutated an input collection during prior invocations, resulting in\n    a partially mutated collection.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, fcn, done )\n    1000\n    2500\n    3000\n    true\n    [ 0, 2500, 6000 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, opts, fcn, done )\n    2500\n    3000\n    1000\n    true\n    [ 0, 2500, 6000 ]\n\n    // Process sequentially:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, opts, fcn, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n\n\ninmapRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapRightAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 4000 ]\n\n    See Also\n    --------\n    forEachRightAsync, inmapAsync, inmapRight\n",
	"instanceOf": "\ninstanceOf( value, constructor )\n    Tests whether a value has in its prototype chain a specified constructor as\n    a prototype property.\n\n    While the prototype of an `object` created using object literal notion is\n    `undefined`, the function returns `true` when provided an `object` literal\n    and the `Object` constructor. This maintains consistent behavior with the\n    `instanceof` operator.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    constructor: Function\n        Constructor.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an instance of a provided constructor.\n\n    Examples\n    --------\n    > var bool = instanceOf( [], Array )\n    true\n    > bool = instanceOf( {}, Object )\n    true\n    > bool = instanceOf( null, Object )\n    false\n\n    See Also\n    --------\n    hasPrototype, constructorName, inherit, typeOf\n",
	"Int16Array": "\nInt16Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 16-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array()\n    <Int16Array>\n\n\nInt16Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 )\n    <Int16Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt16Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int16Array( arr1 )\n    <Int16Array>[ 5, 5, 5 ]\n\n\nInt16Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int16Array( arr1 )\n    <Int16Array>[ 5, 5, 5 ]\n\n\nInt16Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 8 );\n    > var arr = new Int16Array( buf, 0, 4 )\n    <Int16Array>[ 0, 0, 0, 0 ]\n\n\nInt16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int16Array.BYTES_PER_ELEMENT\n    2\n\n\nInt16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int16Array.name\n    Int16Array\n\n\nInt16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteLength\n    10\n\n\nInt16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"INT16_MAX": "\nINT16_MAX\n    Maximum signed 16-bit integer.\n\n    The maximum signed 16-bit integer is given by `2^15 - 1`.\n\n    Examples\n    --------\n    > INT16_MAX\n    32767\n\n    See Also\n    --------\n    INT16_MIN\n",
	"INT16_MIN": "\nINT16_MIN\n    Minimum signed 16-bit integer.\n\n    The minimum signed 16-bit integer is given by `-(2^15)`.\n\n    Examples\n    --------\n    > INT16_MIN\n    -32768\n\n    See Also\n    --------\n    INT16_MAX\n",
	"INT16_NUM_BYTES": "\nINT16_NUM_BYTES\n    Size (in bytes) of a 16-bit signed integer.\n\n    Examples\n    --------\n    > INT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    INT32_NUM_BYTES, INT8_NUM_BYTES, UINT16_NUM_BYTES\n",
	"Int32Array": "\nInt32Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 32-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array()\n    <Int32Array>\n\n\nInt32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int32Array( arr1 )\n    <Int32Array>[ 5, 5, 5 ]\n\n\nInt32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int32Array( arr1 )\n    <Int32Array>[ 5, 5, 5 ]\n\n\nInt32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Int32Array( buf, 0, 4 )\n    <Int32Array>[ 0, 0, 0, 0 ]\n\n\nInt32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int32Array.BYTES_PER_ELEMENT\n    4\n\n\nInt32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int32Array.name\n    Int32Array\n\n\nInt32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteLength\n    20\n\n\nInt32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"INT32_MAX": "\nINT32_MAX\n    Maximum signed 32-bit integer.\n\n    The maximum signed 32-bit integer is given by `2^31 - 1`.\n\n    Examples\n    --------\n    > INT32_MAX\n    2147483647\n\n    See Also\n    --------\n    INT32_MIN\n",
	"INT32_MIN": "\nINT32_MIN\n    Minimum signed 32-bit integer.\n\n    The minimum signed 32-bit integer is given by `-(2^31)`.\n\n    Examples\n    --------\n    > INT32_MIN\n    -2147483648\n\n    See Also\n    --------\n    INT32_MAX\n",
	"INT32_NUM_BYTES": "\nINT32_NUM_BYTES\n    Size (in bytes) of a 32-bit signed integer.\n\n    Examples\n    --------\n    > INT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    INT16_NUM_BYTES, INT8_NUM_BYTES, UINT32_NUM_BYTES\n",
	"Int8Array": "\nInt8Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 8-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array()\n    <Int8Array>\n\n\nInt8Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 )\n    <Int8Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt8Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int8Array( arr1 )\n    <Int8Array>[ 5, 5, 5 ]\n\n\nInt8Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int8Array( arr1 )\n    <Int8Array>[ 5, 5, 5 ]\n\n\nInt8Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Int8Array( buf, 0, 4 )\n    <Int8Array>[ 0, 0, 0, 0 ]\n\n\nInt8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int8Array.BYTES_PER_ELEMENT\n    1\n\n\nInt8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int8Array.name\n    Int8Array\n\n\nInt8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteLength\n    5\n\n\nInt8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"INT8_MAX": "\nINT8_MAX\n    Maximum signed 8-bit integer.\n\n    The maximum signed 8-bit integer is given by `2^7 - 1`.\n\n    Examples\n    --------\n    > INT8_MAX\n    127\n\n    See Also\n    --------\n    INT8_MIN\n",
	"INT8_MIN": "\nINT8_MIN\n    Minimum signed 8-bit integer.\n\n    The minimum signed 8-bit integer is given by `-(2^7)`.\n\n    Examples\n    --------\n    > INT8_MIN\n    -128\n\n    See Also\n    --------\n    INT8_MAX\n",
	"INT8_NUM_BYTES": "\nINT8_NUM_BYTES\n    Size (in bytes) of an 8-bit signed integer.\n\n    Examples\n    --------\n    > INT8_NUM_BYTES\n    1\n\n    See Also\n    --------\n    INT16_NUM_BYTES, INT32_NUM_BYTES, UINT8_NUM_BYTES\n",
	"isAbsolutePath": "\nisAbsolutePath( value )\n    Tests if a value is an absolute path.\n\n    Function behavior is platform-specific. On Windows platforms, the function\n    is equal to `.win32()`. On POSIX platforms, the function is equal to\n    `.posix()`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an absolute path.\n\n    Examples\n    --------\n    // Windows environment:\n    > var bool = isAbsolutePath( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n\n    // POSIX environment:\n    > bool = isAbsolutePath( '/foo/bar/baz' )\n    true\n\n\nisAbsolutePath.posix( value )\n    Tests if a value is a POSIX absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a POSIX absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.posix( '/foo/bar/baz' )\n    true\n    > bool = isAbsolutePath.posix( 'foo/bar/baz' )\n    false\n\n\nisAbsolutePath.win32( value )\n    Tests if a value is a Windows absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a Windows absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.win32( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isAbsolutePath.win32( 'foo\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isRelativePath\n",
	"isAlphagram": "\nisAlphagram( value )\n    Tests if a value is an alphagram (i.e., a sequence of characters arranged in\n    alphabetical order).\n\n    The function first checks that an input value is a string before validating\n    that the value is an alphagram. For non-string values, the function returns\n    `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an alphagram.\n\n    Examples\n    --------\n    > var out = isAlphagram( 'beep' )\n    true\n    > out = isAlphagram( 'zba' )\n    false\n    > out = isAlphagram( '' )\n    false\n\n    See Also\n    --------\n    isAnagram\n",
	"isAnagram": "\nisAnagram( str, value )\n    Tests if a value is an anagram.\n\n    Parameters\n    ----------\n    str: string\n        Comparison string.\n\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an anagram.\n\n    Examples\n    --------\n    > var str1 = 'I am a weakish speller';\n    > var str2 = 'William Shakespeare';\n    > var bool = isAnagram( str1, str2 )\n    true\n    > bool = isAnagram( 'bat', 'tabba' )\n    false\n\n    See Also\n    --------\n    isAlphagram\n",
	"isArguments": "\nisArguments( value )\n    Tests if a value is an arguments object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an arguments object.\n\n    Examples\n    --------\n    > function foo() { return arguments; };\n    > var bool = isArguments( foo() )\n    true\n    > bool = isArguments( [] )\n    false\n\n",
	"isArray": "\nisArray( value )\n    Tests if a value is an array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array.\n\n    Examples\n    --------\n    > var bool = isArray( [] )\n    true\n    > bool = isArray( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n",
	"isArrayArray": "\nisArrayArray( value )\n    Tests if a value is an array of arrays.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of arrays.\n\n    Examples\n    --------\n    > var bool = isArrayArray( [ [], [] ] )\n    true\n    > bool = isArrayArray( [ {}, {} ] )\n    false\n    > bool = isArrayArray( [] )\n    false\n\n",
	"isArrayBuffer": "\nisArrayBuffer( value )\n    Tests if a value is an ArrayBuffer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an ArrayBuffer.\n\n    Examples\n    --------\n    > var bool = isArrayBuffer( new ArrayBuffer( 10 ) )\n    true\n    > bool = isArrayBuffer( [] )\n    false\n\n    See Also\n    --------\n    isSharedArrayBuffer, isTypedArray\n",
	"isArrayLength": "\nisArrayLength( value )\n    Tests if a value is a valid array length.\n\n    A valid length property for an Array instance is any integer value on the\n    interval [0, 2^32-1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a valid array length.\n\n    Examples\n    --------\n    > var bool = isArrayLength( 5 )\n    true\n    > bool = isArrayLength( 2.0e200 )\n    false\n    > bool = isArrayLength( -3.14 )\n    false\n    > bool = isArrayLength( null )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isArrayLike": "\nisArrayLike( value )\n    Tests if a value is array-like.\n\n    If provided a string, the function returns `true`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is array-like.\n\n    Examples\n    --------\n    > var bool = isArrayLike( [] )\n    true\n    > bool = isArrayLike( { 'length': 10 } )\n    true\n    > bool = isArrayLike( 'beep' )\n    true\n    > bool = isArrayLike( null )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLikeObject\n",
	"isArrayLikeObject": "\nisArrayLikeObject( value )\n    Tests if a value is an array-like object.\n\n    If provided a string, the function returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object.\n\n    Examples\n    --------\n    > var bool = isArrayLikeObject( [] )\n    true\n    > bool = isArrayLikeObject( { 'length': 10 } )\n    true\n    > bool = isArrayLikeObject( 'beep' )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike\n",
	"isASCII": "\nisASCII( str )\n    Tests whether a character belongs to the ASCII character set and whether\n    this is true for all characters in a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string has all ASCII characters.\n\n    Examples\n    --------\n    > var str = 'beep boop';\n    > var bool = isASCII( str )\n    true\n    > bool = isASCII( fromCodePoint( 130 ) )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isBetween": "\nisBetween( value, a, b[, left, right] )\n    Tests if a value is between two values.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    a: any\n        Left comparison value.\n\n    b: any\n        Right comparison value.\n\n    left: string (optional)\n        Indicates whether the left comparison value is inclusive. Must be either\n        'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    right: string (optional)\n        Indicates whether the right comparison value is inclusive. Must be\n        either 'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is between two values.\n\n    Examples\n    --------\n    > var bool = isBetween( 3.14, 3.0, 4.0 )\n    true\n    > bool = isBetween( 3.0, 3.0, 4.0 )\n    true\n    > bool = isBetween( 4.0, 3.0, 4.0 )\n    true\n    > bool = isBetween( 3.0, 3.14, 4.0 )\n    false\n    > bool = isBetween( 3.14, 3.14, 4.0, 'open', 'closed' )\n    false\n    > bool = isBetween( 3.14, 3.0, 3.14, 'closed', 'open' )\n    false\n\n    See Also\n    --------\n    isBetweenArray\n",
	"isBetweenArray": "\nisBetweenArray( value, a, b[, left, right] )\n    Tests if a value is an array-like object where every element is between two\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    a: any\n        Left comparison value.\n\n    b: any\n        Right comparison value.\n\n    left: string (optional)\n        Indicates whether the left comparison value is inclusive. Must be either\n        'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    right: string (optional)\n        Indicates whether the right comparison value is inclusive. Must be\n        either 'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object where every\n        element is between two values.\n\n    Examples\n    --------\n    > var arr = [ 3.0, 3.14, 4.0 ];\n    > var bool = isBetweenArray( arr, 3.0, 4.0 )\n    true\n    > bool = isBetweenArray( arr, 3.14, 4.0 )\n    false\n    > bool = isBetweenArray( arr, 3.0, 3.14 )\n    false\n    > bool = isBetweenArray( arr, 3.0, 4.0, 'open', 'closed' )\n    false\n    > bool = isBetweenArray( arr, 3.0, 4.0, 'closed', 'open' )\n    false\n\n    See Also\n    --------\n    isBetween\n",
	"isBinaryString": "\nisBinaryString( value )\n    Tests if a value is a binary string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a binary string.\n\n    Examples\n    --------\n    > var bool = isBinaryString( '1000101' )\n    true\n    > bool = isBinaryString( 'beep' )\n    false\n    > bool = isBinaryString( '' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isBoolean": "\nisBoolean( value )\n    Tests if a value is a boolean.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean.\n\n    Examples\n    --------\n    > var bool = isBoolean( false )\n    true\n    > bool = isBoolean( new Boolean( false ) )\n    true\n\n\nisBoolean.isPrimitive( value )\n    Tests if a value is a boolean primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean primitive.\n\n    Examples\n    --------\n    > var bool = isBoolean.isPrimitive( true )\n    true\n    > bool = isBoolean.isPrimitive( false )\n    true\n    > bool = isBoolean.isPrimitive( new Boolean( true ) )\n    false\n\n\nisBoolean.isObject( value )\n    Tests if a value is a boolean object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean object.\n\n    Examples\n    --------\n    > var bool = isBoolean.isObject( true )\n    false\n    > bool = isBoolean.isObject( new Boolean( false ) )\n    true\n\n",
	"isBooleanArray": "\nisBooleanArray( value )\n    Tests if a value is an array-like object of booleans.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object of booleans.\n\n    Examples\n    --------\n    > var bool = isBooleanArray( [ true, false, true ] )\n    true\n    > bool = isBooleanArray( [ true, 'abc', false ] )\n    false\n\n\nisBooleanArray.primitives( value )\n    Tests if a value is an array-like object containing only boolean primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        boolean primitives.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.primitives( [ true, false ] )\n    true\n    > bool = isBooleanArray.primitives( [ false, new Boolean( true ) ] )\n    false\n\n\nisBooleanArray.objects( value )\n    Tests if a value is an array-like object containing only Boolean objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        Boolean objects.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.objects( [ new Boolean( false ), true ] )\n    false\n    > bool = isBooleanArray.objects( [ new Boolean( false ), new Boolean( true ) ] )\n    true\n\n",
	"isBuffer": "\nisBuffer( value )\n    Tests if a value is a Buffer instance.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Buffer instance.\n\n    Examples\n    --------\n    > var bool = isBuffer( new Buffer( 'beep' ) )\n    true\n    > bool = isBuffer( new Buffer( [ 1, 2, 3, 4 ] ) )\n    true\n    > bool = isBuffer( {} )\n    false\n    > bool = isBuffer( [] )\n    false\n\n",
	"isCapitalized": "\nisCapitalized( value )\n    Tests if a value is a string having an uppercase first character.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string with an uppercase first\n        character.\n\n    Examples\n    --------\n    > var bool = isCapitalized( 'Hello' )\n    true\n    > bool = isCapitalized( 'world' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isCollection": "\nisCollection( value )\n    Tests if a value is a collection.\n\n    A collection is defined as an array, typed array, or an array-like object\n    (excluding strings and functions).\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a collection.\n\n    Examples\n    --------\n    > var bool = isCollection( [] )\n    true\n    > bool = isCollection( { 'length': 0 } )\n    true\n    > bool = isCollection( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n",
	"isComplex": "\nisComplex( value )\n    Tests if a value is a 64-bit or 128-bit complex number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 64-bit or 128-bit complex number.\n\n    Examples\n    --------\n    > var bool = isComplex( Complex64( 2.0, 2.0 ) )\n    true\n    > bool = isComplex( Complex128( 3.0, 1.0 ) )\n    true\n    > bool = isComplex( 3.14 )\n    false\n    > bool = isComplex( {} )\n    false\n\n    See Also\n    --------\n    isComplex64, isComplex128\n",
	"isComplex64": "\nisComplex64( value )\n    Tests if a value is a 64-bit complex number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 64-bit complex number.\n\n    Examples\n    --------\n    > var bool = isComplex64( Complex64( 2.0, 2.0 ) )\n    true\n    > bool = isComplex64( Complex128( 3.0, 1.0 ) )\n    false\n    > bool = isComplex64( 3.14 )\n    false\n    > bool = isComplex64( {} )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex128\n",
	"isComplex128": "\nisComplex128( value )\n    Tests if a value is a 128-bit complex number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 128-bit complex number.\n\n    Examples\n    --------\n    > var bool = isComplex128( Complex128( 3.0, 1.0 ) )\n    true\n    > bool = isComplex128( Complex64( 2.0, 2.0 ) )\n    false\n    > bool = isComplex128( 3.14 )\n    false\n    > bool = isComplex128( {} )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex64\n",
	"isDateObject": "\nisDateObject( value )\n    Tests if a value is a Date object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Date object.\n\n    Examples\n    --------\n    > var bool = isDateObject( new Date() )\n    true\n    > bool = isDateObject( '2017-01-01' )\n    false\n\n",
	"isDigitString": "\nisDigitString( str )\n    Tests whether a string contains only numeric digits.\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only numeric digits.\n\n    Examples\n    --------\n    > var bool = isDigitString( '0123456789' )\n    true\n    > bool = isDigitString( 'abcdef' )\n    false\n    > bool = isDigitString( '0xff' )\n    false\n    > bool = isDigitString( '' )\n    false\n\n    See Also\n    --------\n    isHexString, isString\n",
	"isEmailAddress": "\nisEmailAddress( value )\n    Tests if a value is an email address.\n\n    Validation is not rigorous. *9* RFCs relate to email addresses, and\n    accounting for all of them is a fool's errand. The function performs the\n    simplest validation; i.e., requiring at least one `@` symbol.\n\n    For rigorous validation, send a confirmation email. If the email bounces,\n    consider the email invalid.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an email address.\n\n    Examples\n    --------\n    > var bool = isEmailAddress( 'beep@boop.com' )\n    true\n    > bool = isEmailAddress( 'beep' )\n    false\n    > bool = isEmailAddress( null )\n    false\n\n",
	"isEmptyArray": "\nisEmptyArray( value )\n    Tests if a value is an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty array.\n\n    Examples\n    --------\n    > var bool = isEmptyArray( [] )\n    true\n    > bool = isEmptyArray( [ 1, 2, 3 ] )\n    false\n    > bool = isEmptyArray( {} )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isEmptyObject": "\nisEmptyObject( value )\n    Tests if a value is an empty object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty object.\n\n    Examples\n    --------\n    > var bool = isEmptyObject( {} )\n    true\n    > bool = isEmptyObject( { 'beep': 'boop' } )\n    false\n    > bool = isEmptyObject( [] )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n",
	"isEmptyString": "\nisEmptyString( value )\n    Tests if a value is an empty string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty string.\n\n    Examples\n    --------\n    > var bool = isEmptyString( '' )\n    true\n    > bool = isEmptyString( new String( '' ) )\n    true\n    > bool = isEmptyString( 'beep' )\n    false\n    > bool = isEmptyString( [] )\n    false\n\n\nisEmptyString.isPrimitive( value )\n    Tests if a value is an empty string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty string primitive.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isPrimitive( '' )\n    true\n    > bool = isEmptyString.isPrimitive( new String( '' ) )\n    false\n\n\nisEmptyString.isObject( value )\n    Tests if a value is an empty `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty `String` object.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isObject( new String( '' ) )\n    true\n    > bool = isEmptyString.isObject( '' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isEnumerableProperty": "\nisEnumerableProperty( value, property )\n    Tests if an object property is enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object property is enumerable.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = isEnumerableProperty( beep, 'boop' )\n    true\n    > bool = isEnumerableProperty( beep, 'hasOwnProperty' )\n    false\n\n",
	"isError": "\nisError( value )\n    Tests if a value is an Error object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Error object.\n\n    Examples\n    --------\n    > var bool = isError( new Error( 'beep' ) )\n    true\n    > bool = isError( {} )\n    false\n\n",
	"isEvalError": "\nisEvalError( value )\n    Tests if a value is an EvalError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided an EvalError (or a descendant) object,\n    false positives may occur due to the fact that the EvalError constructor\n    inherits from Error and has no internal class of its own. Hence, EvalError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an EvalError object.\n\n    Examples\n    --------\n    > var bool = isEvalError( new EvalError( 'beep' ) )\n    true\n    > bool = isEvalError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isEven": "\nisEven( value )\n    Tests if a value is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether is an even number.\n\n    Examples\n    --------\n    > var bool = isEven( 4.0 )\n    true\n    > bool = isEven( new Number( 4.0 ) )\n    true\n    > bool = isEven( 3.0 )\n    false\n    > bool = isEven( -3.14 )\n    false\n    > bool = isEven( null )\n    false\n\n\nisEven.isPrimitive( value )\n    Tests if a value is a number primitive that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isPrimitive( -4.0 )\n    true\n    > bool = isEven.isPrimitive( new Number( -4.0 ) )\n    false\n\n\nisEven.isObject( value )\n    Tests if a value is a number object that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isObject( 4.0 )\n    false\n    > bool = isEven.isObject( new Number( 4.0 ) )\n    true\n\n    See Also\n    --------\n    isOdd\n",
	"isFalsy": "\nisFalsy( value )\n    Tests if a value is a value which translates to `false` when evaluated in a\n    boolean context.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is falsy.\n\n    Examples\n    --------\n    > var bool = isFalsy( false )\n    true\n    > bool = isFalsy( '' )\n    true\n    > bool = isFalsy( 0 )\n    true\n    > bool = isFalsy( null )\n    true\n    > bool = isFalsy( void 0 )\n    true\n    > bool = isFalsy( NaN )\n    true\n    > bool = isFalsy( {} )\n    false\n    > bool = isFalsy( [] )\n    false\n\n    See Also\n    --------\n    isFalsyArray, isTruthy\n",
	"isFalsyArray": "\nisFalsyArray( value )\n    Tests if a value is an array-like object containing only falsy values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only falsy values.\n\n    Examples\n    --------\n    > var bool = isFalsyArray( [ null, '' ] )\n    true\n    > bool = isFalsyArray( [ {}, [] ] )\n    false\n    > bool = isFalsyArray( [] )\n    false\n\n    See Also\n    --------\n    isFalsy, isTruthyArray\n",
	"isFinite": "\nisFinite( value )\n    Tests if a value is a finite number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a finite number.\n\n    Examples\n    --------\n    > var bool = isFinite( 5.0 )\n    true\n    > bool = isFinite( new Number( 5.0 ) )\n    true\n    > bool = isFinite( 1.0/0.0 )\n    false\n    > bool = isFinite( null )\n    false\n\n\nisFinite.isPrimitive( value )\n    Tests if a value is a number primitive having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isPrimitive( -3.0 )\n    true\n    > bool = isFinite.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisFinite.isObject( value )\n    Tests if a value is a number object having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isObject( 3.0 )\n    false\n    > bool = isFinite.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isFiniteArray, isInfinite\n",
	"isFiniteArray": "\nisFiniteArray( value )\n    Tests if a value is an array-like object of finite numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object of finite\n        numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isFiniteArray( [ -3.0, 1.0/0.0 ] )\n    false\n\n\nisFiniteArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive finite\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive finite numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisFiniteArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having finite values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having finite values.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isFiniteArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isFiniteArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isFinite, isInfinite\n",
	"isFloat32Array": "\nisFloat32Array( value )\n    Tests if a value is a Float32Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Float32Array.\n\n    Examples\n    --------\n    > var bool = isFloat32Array( new Float32Array( 10 ) )\n    true\n    > bool = isFloat32Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat64Array\n",
	"isFloat64Array": "\nisFloat64Array( value )\n    Tests if a value is a Float64Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Float64Array.\n\n    Examples\n    --------\n    > var bool = isFloat64Array( new Float64Array( 10 ) )\n    true\n    > bool = isFloat64Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat32Array\n",
	"isFunction": "\nisFunction( value )\n    Tests if a value is a function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a function.\n\n    Examples\n    --------\n    > function beep() {};\n    > var bool = isFunction( beep )\n    true\n    > bool = isFunction( {} )\n    false\n\n",
	"isFunctionArray": "\nisFunctionArray( value )\n    Tests if a value is an array-like object containing only functions.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        functions.\n\n    Examples\n    --------\n    > function beep() {};\n    > function boop() {};\n    > var bool = isFunctionArray( [ beep, boop ] )\n    true\n    > bool = isFunctionArray( [ {}, beep ] )\n    false\n    > bool = isFunctionArray( [] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isHexString": "\nisHexString( str )\n    Tests whether a string contains only hexadecimal digits.\n\n    The function does not recognize `x` (as in the standard `0x` prefix).\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only hexadecimal digits.\n\n    Examples\n    --------\n    > var bool = isHexString( '0123456789abcdefABCDEF' )\n    true\n    > bool = isHexString( '0xffffff' )\n    false\n    > bool = isHexString( 'x' )\n    false\n    > bool = isHexString( '' )\n\n    See Also\n    --------\n    isString\n",
	"isInfinite": "\nisInfinite( value )\n    Tests if a value is an infinite number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an infinite number.\n\n    Examples\n    --------\n    > var bool = isInfinite( 1.0/0.0 )\n    true\n    > bool = isInfinite( new Number( -1.0/0.0 ) )\n    true\n    > bool = isInfinite( 5.0 )\n    false\n    > bool = isInfinite( '1.0/0.0' )\n    false\n\n\nisInfinite.isPrimitive( value )\n    Tests if a value is a number primitive having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having an\n        infinite value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isPrimitive( -1.0/0.0 )\n    true\n    > bool = isInfinite.isPrimitive( new Number( -1.0/0.0 ) )\n    false\n\n\nisInfinite.isObject( value )\n    Tests if a value is a number object having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having an infinite\n        value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isObject( 1.0/0.0 )\n    false\n    > bool = isInfinite.isObject( new Number( 1.0/0.0 ) )\n    true\n\n    See Also\n    --------\n    isFinite\n",
	"isInt16Array": "\nisInt16Array( value )\n    Tests if a value is an Int16Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Int16Array.\n\n    Examples\n    --------\n    > var bool = isInt16Array( new Int16Array( 10 ) )\n    true\n    > bool = isInt16Array( [] )\n    false\n\n    See Also\n    --------\n    isInt32Array, isInt8Array\n",
	"isInt32Array": "\nisInt32Array( value )\n    Tests if a value is an Int32Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Int32Array.\n\n    Examples\n    --------\n    > var bool = isInt32Array( new Int32Array( 10 ) )\n    true\n    > bool = isInt32Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt8Array\n",
	"isInt8Array": "\nisInt8Array( value )\n    Tests if a value is an Int8Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Int8Array.\n\n    Examples\n    --------\n    > var bool = isInt8Array( new Int8Array( 10 ) )\n    true\n    > bool = isInt8Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt32Array\n",
	"isInteger": "\nisInteger( value )\n    Tests if a value is an integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an integer.\n\n    Examples\n    --------\n    > var bool = isInteger( 5.0 )\n    true\n    > bool = isInteger( new Number( 5.0 ) )\n    true\n    > bool = isInteger( -3.14 )\n    false\n    > bool = isInteger( null )\n    false\n\n\nisInteger.isPrimitive( value )\n    Tests if a value is a number primitive having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isPrimitive( -3.0 )\n    true\n    > bool = isInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisInteger.isObject( value )\n    Tests if a value is a number object having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isObject( 3.0 )\n    false\n    > bool = isInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isIntegerArray": "\nisIntegerArray( value )\n    Tests if a value is an array-like object of integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object of integer\n        values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isIntegerArray( [ -3.0, '3.0' ] )\n    false\n\n\nisIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive integer\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isIntegerArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isIntegerArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isJSON": "\nisJSON( value )\n    Tests if a value is a parseable JSON string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a parseable JSON string.\n\n    Examples\n    --------\n    > var bool = isJSON( '{\"a\":5}' )\n    true\n    > bool = isJSON( '{a\":5}' )\n    false\n\n",
	"isLeapYear": "\nisLeapYear( value )\n    Tests whether a value corresponds to a leap year in the Gregorian calendar.\n\n    A leap year is defined as any year which is exactly divisible by 4, except\n    for years which are exactly divisible by 100 and not by 400. In this\n    definition, 100 corresponds to years marking a new century, and 400\n    corresponds to the length of the *leap cycle*.\n\n    If not provided any arguments, the function returns a boolean indicating\n    if the current year (according to local time) is a leap year.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value corresponds to a leap year.\n\n    Examples\n    --------\n    > var bool = isLeapYear( new Date() )\n    <boolean>\n    > bool = isLeapYear( 1996 )\n    true\n    > bool = isLeapYear( 2001 )\n    false\n\n",
	"isLowercase": "\nisLowercase( value )\n    Tests if a value is a lowercase string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a lowercase string.\n\n    Examples\n    --------\n    > var bool = isLowercase( 'hello' )\n    true\n    > bool = isLowercase( 'World' )\n    false\n\n    See Also\n    --------\n    isString, isUppercase\n",
	"isMatrixLike": "\nisMatrixLike( value )\n    Tests if a value is a 2-dimensional ndarray-like object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 2-dimensional ndarray-like\n        object.\n\n    Examples\n    --------\n    > var M = {};\n    > M.data = [ 0, 0, 0, 0 ];\n    > M.ndims = 2;\n    > M.shape = [ 2, 2 ];\n    > M.strides = [ 2, 1 ];\n    > M.offset = 0;\n    > M.order = 'row-major';\n    > M.dtype = 'generic';\n    > M.length = 4;\n    > M.flags = {};\n    > M.get = function get( i, j ) {};\n    > M.set = function set( i, j ) {};\n    > var bool = isMatrixLike( M )\n    true\n    > bool = isMatrixLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isMatrixLike( 3.14 )\n    false\n    > bool = isMatrixLike( {} )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike, isndarrayLike, isTypedArrayLike, isVectorLike\n",
	"isnan": "\nisnan( value )\n    Tests if a value is NaN.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is NaN.\n\n    Examples\n    --------\n    > var bool = isnan( NaN )\n    true\n    > bool = isnan( new Number( NaN ) )\n    true\n    > bool = isnan( 3.14 )\n    false\n    > bool = isnan( null )\n    false\n\n\nisnan.isPrimitive( value )\n    Tests if a value is a NaN number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a NaN number primitive.\n\n    Examples\n    --------\n    > var bool = isnan.isPrimitive( NaN )\n    true\n    > bool = isnan.isPrimitive( 3.14 )\n    false\n    > bool = isnan.isPrimitive( new Number( NaN ) )\n    false\n\n\nisnan.isObject( value )\n    Tests if a value is a number object having a value of NaN.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value of\n        NaN.\n\n    Examples\n    --------\n    > var bool = isnan.isObject( NaN )\n    false\n    > bool = isnan.isObject( new Number( NaN ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isNaNArray": "\nisNaNArray( value )\n    Tests if a value is an array-like object containing only NaN values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray( [ NaN, NaN, NaN ] )\n    true\n    > bool = isNaNArray( [ NaN, 2 ] )\n    false\n\n\nisNaNArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive NaN\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.primitives( [ NaN, new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.primitives( [ NaN, NaN, NaN ] )\n    true\n\n\nisNaNArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having NaN values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.objects( [ new Number( NaN ), new Number( NaN ) ] )\n    true\n    > bool = isNaNArray.objects( [ NaN, new Number( NaN ), new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.objects( [ NaN, NaN, NaN ] )\n    false\n\n    See Also\n    --------\n    isnan\n",
	"isNativeFunction": "\nisNativeFunction( value )\n    Tests if a value is a native function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a native function.\n\n    Examples\n    --------\n    > var bool = isNativeFunction( Date )\n    true\n    > function beep() {};\n    > bool = isNativeFunction( beep )\n    false\n    > bool = isNativeFunction( {} )\n    false\n\n    See Also\n    --------\n    isFunction\n",
	"isndarrayLike": "\nisndarrayLike( value )\n    Tests if a value is ndarray-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is ndarray-like.\n\n    Examples\n    --------\n    > var M = {};\n    > M.data = [ 0, 0, 0, 0 ];\n    > M.ndims = 2;\n    > M.shape = [ 2, 2 ];\n    > M.strides = [ 2, 1 ];\n    > M.offset = 0;\n    > M.order = 'row-major';\n    > M.dtype = 'generic';\n    > M.length = 4;\n    > M.flags = {};\n    > M.get = function get( i, j ) {};\n    > M.set = function set( i, j ) {};\n    > var bool = isndarrayLike( M )\n    true\n    > bool = isndarrayLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isndarrayLike( 3.14 )\n    false\n    > bool = isndarrayLike( {} )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike, isMatrixLike, isTypedArrayLike, isVectorLike\n",
	"isNegativeInteger": "\nisNegativeInteger( value )\n    Tests if a value is a negative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative integer.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger( -5.0 )\n    true\n    > bool = isNegativeInteger( new Number( -5.0 ) )\n    true\n    > bool = isNegativeInteger( 5.0 )\n    false\n    > bool = isNegativeInteger( -3.14 )\n    false\n    > bool = isNegativeInteger( null )\n    false\n\n\nisNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeInteger.isObject( value )\n    Tests if a value is a number object having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isObject( -3.0 )\n    false\n    > bool = isNegativeInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNegativeIntegerArray": "\nisNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only negative integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative integers.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only negative primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNegativeNumber": "\nisNegativeNumber( value )\n    Tests if a value is a negative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative number.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber( -5.0 )\n    true\n    > bool = isNegativeNumber( new Number( -5.0 ) )\n    true\n    > bool = isNegativeNumber( -3.14 )\n    true\n    > bool = isNegativeNumber( 5.0 )\n    false\n    > bool = isNegativeNumber( null )\n    false\n\n\nisNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeNumber.isObject( value )\n    Tests if a value is a number object having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isObject( -3.0 )\n    false\n    > bool = isNegativeNumber.isObject( new Number( -3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isNegativeNumberArray": "\nisNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only negative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive negative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative number values.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNegativeZero": "\nisNegativeZero( value )\n    Tests if a value is negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero( -0.0 )\n    true\n    > bool = isNegativeZero( new Number( -0.0 ) )\n    true\n    > bool = isNegativeZero( -3.14 )\n    true\n    > bool = isNegativeZero( 0.0 )\n    false\n    > bool = isNegativeZero( null )\n    false\n\n\nisNegativeZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isPrimitive( -0.0 )\n    true\n    > bool = isNegativeZero.isPrimitive( new Number( -0.0 ) )\n    false\n\n\nisNegativeZero.isObject( value )\n    Tests if a value is a number object having a value equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isObject( -0.0 )\n    false\n    > bool = isNegativeZero.isObject( new Number( -0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isPositiveZero\n",
	"isNodeBuiltin": "\nisNodeBuiltin( str )\n    Tests whether a string matches a Node.js built-in module name.\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string matches a Node.js built-in module name.\n\n    Examples\n    --------\n    > var bool = isNodeBuiltin( 'cluster' )\n    true\n    > bool = isNodeBuiltin( 'crypto' )\n    true\n    > bool = isNodeBuiltin( 'fs-extra' )\n    false\n    > bool = isNodeBuiltin( '' )\n    false\n\n",
	"isNodeDuplexStreamLike": "\nisNodeDuplexStreamLike( value )\n    Tests if a value is Node duplex stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node duplex stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Duplex;\n    > s = new Stream();\n    > var bool = isNodeDuplexStreamLike( s )\n    true\n    > bool = isNodeDuplexStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNodeReadableStreamLike": "\nisNodeReadableStreamLike( value )\n    Tests if a value is Node readable stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node readable stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Readable;\n    > s = new Stream();\n    > var bool = isNodeReadableStreamLike( s )\n    true\n    > bool = isNodeReadableStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNodeREPL": "\nisNodeREPL()\n    Returns a boolean indicating if running in a Node.js REPL environment.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if running in a Node.js REPL environment.\n\n    Examples\n    --------\n    > var bool = isNodeREPL()\n    <boolean>\n\n",
	"isNodeStreamLike": "\nisNodeStreamLike( value )\n    Tests if a value is Node stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Stream;\n    > s = new Stream();\n    > var bool = isNodeStreamLike( s )\n    true\n    > bool = isNodeStreamLike( {} )\n    false\n\n",
	"isNodeTransformStreamLike": "\nisNodeTransformStreamLike( value )\n    Tests if a value is Node transform stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node transform stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Transform;\n    > s = new Stream();\n    > var bool = isNodeTransformStreamLike( s )\n    true\n    > bool = isNodeTransformStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNodeWritableStreamLike": "\nisNodeWritableStreamLike( value )\n    Tests if a value is Node writable stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node writable stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Writable;\n    > s = new Stream();\n    > var bool = isNodeWritableStreamLike( s )\n    true\n    > bool = isNodeWritableStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNonNegativeInteger": "\nisNonNegativeInteger( value )\n    Tests if a value is a nonnegative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger( 5.0 )\n    true\n    > bool = isNonNegativeInteger( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeInteger( 3.14 )\n    false\n    > bool = isNonNegativeInteger( -5.0 )\n    false\n    > bool = isNonNegativeInteger( null )\n    false\n\n\nisNonNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeInteger.isObject( value )\n    Tests if a value is a number object having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isObject( 3.0 )\n    false\n    > bool = isNonNegativeInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNonNegativeIntegerArray": "\nisNonNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative integers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonnegative\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonNegativeNumber": "\nisNonNegativeNumber( value )\n    Tests if a value is a nonnegative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative number.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber( 5.0 )\n    true\n    > bool = isNonNegativeNumber( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeNumber( 3.14 )\n    true\n    > bool = isNonNegativeNumber( -5.0 )\n    false\n    > bool = isNonNegativeNumber( null )\n    false\n\n\nisNonNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeNumber.isObject( value )\n    Tests if a value is a number object having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isObject( 3.0 )\n    false\n    > bool = isNonNegativeNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNonNegativeNumberArray": "\nisNonNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonnegative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative number values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeNumberArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonPositiveInteger": "\nisNonPositiveInteger( value )\n    Tests if a value is a nonpositive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger( -5.0 )\n    true\n    > bool = isNonPositiveInteger( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveInteger( 5.0 )\n    false\n    > bool = isNonPositiveInteger( -3.14 )\n    false\n    > bool = isNonPositiveInteger( null )\n    false\n\n\nisNonPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveInteger.isObject( value )\n    Tests if a value is a number object having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isObject( -3.0 )\n    false\n    > bool = isNonPositiveInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNonPositiveIntegerArray": "\nisNonPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive integers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonpositive\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonPositiveNumber": "\nisNonPositiveNumber( value )\n    Tests if a value is a nonpositive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive number.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber( -5.0 )\n    true\n    > bool = isNonPositiveNumber( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveNumber( -3.14 )\n    true\n    > bool = isNonPositiveNumber( 5.0 )\n    false\n    > bool = isNonPositiveNumber( null )\n    false\n\n\nisNonPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveNumber.isObject( value )\n    Tests if a value is a number object having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isObject( -3.0 )\n    false\n    > bool = isNonPositiveNumber.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNonPositiveNumberArray": "\nisNonPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonpositive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive number values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNull": "\nisNull( value )\n    Tests if a value is null.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is null.\n\n    Examples\n    --------\n    > var bool = isNull( null )\n    true\n    > bool = isNull( true )\n    false\n\n    See Also\n    --------\n    isUndefined, isUndefinedOrNull\n",
	"isNullArray": "\nisNullArray( value )\n    Tests if a value is an array-like object containing only null values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        null values.\n\n    Examples\n    --------\n    > var bool = isNullArray( [ null, null, null ] )\n    true\n    > bool = isNullArray( [ NaN, 2, null ] )\n    false\n\n    See Also\n    --------\n    isArray, isNull\n",
	"isNumber": "\nisNumber( value )\n    Tests if a value is a number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number.\n\n    Examples\n    --------\n    > var bool = isNumber( 3.14 )\n    true\n    > bool = isNumber( new Number( 3.14 ) )\n    true\n    > bool = isNumber( NaN )\n    true\n    > bool = isNumber( null )\n    false\n\n\nisNumber.isPrimitive( value )\n    Tests if a value is a number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive.\n\n    Examples\n    --------\n    > var bool = isNumber.isPrimitive( 3.14 )\n    true\n    > bool = isNumber.isPrimitive( NaN )\n    true\n    > bool = isNumber.isPrimitive( new Number( 3.14 ) )\n    false\n\n\nisNumber.isObject( value )\n    Tests if a value is a `Number` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object.\n\n    Examples\n    --------\n    > var bool = isNumber.isObject( 3.14 )\n    false\n    > bool = isNumber.isObject( new Number( 3.14 ) )\n    true\n\n",
	"isNumberArray": "\nisNumberArray( value )\n    Tests if a value is an array-like object containing only numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        numbers.\n\n    Examples\n    --------\n    > var bool = isNumberArray( [ 1, 2, 3 ] )\n    true\n    > bool = isNumberArray( [ '1', 2, 3 ] )\n    false\n\n\nisNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only number primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number primitives.\n\n    Examples\n    --------\n    > var arr = [ 1, 2, 3 ];\n    > var bool = isNumberArray.primitives( arr )\n    true\n    > arr = [ 1, new Number( 2 ) ];\n    > bool = isNumberArray.primitives( arr )\n    false\n\n\nisNumberArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects.\n\n    Examples\n    --------\n    > var arr = [ new Number( 1 ), new Number( 2 ) ];\n    > var bool = isNumberArray.objects( arr )\n    true\n    > arr = [ new Number( 1 ), 2 ];\n    > bool = isNumberArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isNumericArray\n",
	"isNumericArray": "\nisNumericArray( value )\n    Tests if a value is a numeric array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a numeric array.\n\n    Examples\n    --------\n    > var bool = isNumericArray( new Int8Array( 10 ) )\n    true\n    > bool = isNumericArray( [ 1, 2, 3 ] )\n    true\n    > bool = isNumericArray( [ '1', '2', '3' ] )\n    false\n\n",
	"isObject": "\nisObject( value )\n    Tests if a value is an object; e.g., `{}`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an object.\n\n    Examples\n    --------\n    > var bool = isObject( {} )\n    true\n    > bool = isObject( true )\n    false\n\n    See Also\n    --------\n    isObjectLike, isPlainObject\n",
	"isObjectArray": "\nisObjectArray( value )\n    Tests if a value is an array-like object containing only objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        objects.\n\n    Examples\n    --------\n    > var bool = isObjectArray( [ {}, new Number(3.0) ] )\n    true\n    > bool = isObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isObject\n",
	"isObjectLike": "\nisObjectLike( value )\n    Tests if a value is object-like.\n\n    Return values are the same as would be obtained using the built-in `typeof`\n    operator except that `null` is not considered an object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is object-like.\n\n    Examples\n    --------\n    > var bool = isObjectLike( {} )\n    true\n    > bool = isObjectLike( [] )\n    true\n    > bool = isObjectLike( null )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n",
	"isOdd": "\nisOdd( value )\n    Tests if a value is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an odd number.\n\n    Examples\n    --------\n    > var bool = isOdd( 5.0 )\n    true\n    > bool = isOdd( new Number( 5.0 ) )\n    true\n    > bool = isOdd( 4.0 )\n    false\n    > bool = isOdd( new Number( 4.0 ) )\n    false\n    > bool = isOdd( -3.14 )\n    false\n    > bool = isOdd( null )\n    false\n\nisOdd.isPrimitive( value )\n    Tests if a value is a number primitive that is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an odd\n        number.\n\n    Examples\n    --------\n    > var bool = isOdd.isPrimitive( -5.0 )\n    true\n    > bool = isOdd.isPrimitive( new Number( -5.0 ) )\n    false\n\n\nisOdd.isObject( value )\n    Tests if a value is a number object that has an odd number value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that has an odd\n        number value.\n\n    Examples\n    --------\n    > var bool = isOdd.isObject( 5.0 )\n    false\n    > bool = isOdd.isObject( new Number( 5.0 ) )\n    true\n\n    See Also\n    --------\n    isEven\n",
	"isoWeeksInYear": "\nisoWeeksInYear( [year] )\n    Returns the number of ISO weeks in a year according to the Gregorian\n    calendar.\n\n    By default, the function returns the number of ISO weeks in the current year\n    (according to local time). To determine the number of ISO weeks for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Number of ISO weeks in a year.\n\n    Examples\n    --------\n    > var num = isoWeeksInYear()\n    <number>\n    > num = isoWeeksInYear( 2015 )\n    53\n    > num = isoWeeksInYear( 2017 )\n    52\n\n",
	"isPlainObject": "\nisPlainObject( value )\n    Tests if a value is a plain object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a plain object.\n\n    Examples\n    --------\n    > var bool = isPlainObject( {} )\n    true\n    > bool = isPlainObject( null )\n    false\n\n    See Also\n    --------\n    isObject\n",
	"isPlainObjectArray": "\nisPlainObjectArray( value )\n    Tests if a value is an array-like object containing only plain objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        plain objects.\n\n    Examples\n    --------\n    > var bool = isPlainObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isPlainObjectArray( [ {}, new Number(3.0) ] )\n    false\n    > bool = isPlainObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPlainObject\n",
	"isPositiveInteger": "\nisPositiveInteger( value )\n    Tests if a value is a positive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive integer.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger( 5.0 )\n    true\n    > bool = isPositiveInteger( new Number( 5.0 ) )\n    true\n    > bool = isPositiveInteger( 3.14 )\n    false\n    > bool = isPositiveInteger( -5.0 )\n    false\n    > bool = isPositiveInteger( null )\n    false\n\n\nisPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        positive integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveInteger.isObject( value )\n    Tests if a value is a number object having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isObject( 3.0 )\n    false\n    > bool = isPositiveInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isPositiveIntegerArray": "\nisPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only positive integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive integers.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveIntegerArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isInteger, isPositiveInteger\n",
	"isPositiveNumber": "\nisPositiveNumber( value )\n    Tests if a value is a positive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive number.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber( 5.0 )\n    true\n    > bool = isPositiveNumber( new Number( 5.0 ) )\n    true\n    > bool = isPositiveNumber( 3.14 )\n    true\n    > bool = isPositiveNumber( -5.0 )\n    false\n    > bool = isPositiveNumber( null )\n    false\n\n\nisPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveNumber.isObject( value )\n    Tests if a value is a number object having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isObject( 3.0 )\n    false\n    > bool = isPositiveNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isPositiveNumberArray": "\nisPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only positive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive numbers.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive number values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveNumberArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isPositiveNumber\n",
	"isPositiveZero": "\nisPositiveZero( value )\n    Tests if a value is positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero( 0.0 )\n    true\n    > bool = isPositiveZero( new Number( 0.0 ) )\n    true\n    > bool = isPositiveZero( -3.14 )\n    true\n    > bool = isPositiveZero( -0.0 )\n    false\n    > bool = isPositiveZero( null )\n    false\n\n\nisPositiveZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isPrimitive( 0.0 )\n    true\n    > bool = isPositiveZero.isPrimitive( new Number( 0.0 ) )\n    false\n\n\nisPositiveZero.isObject( value )\n    Tests if a value is a number object having a value equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isObject( 0.0 )\n    false\n    > bool = isPositiveZero.isObject( new Number( 0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isNegativeZero\n",
	"isPrimitive": "\nisPrimitive( value )\n    Tests if a value is a JavaScript primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a JavaScript primitive.\n\n    Examples\n    --------\n    > var bool = isPrimitive( true )\n    true\n    > bool = isPrimitive( {} )\n    false\n\n",
	"isPrimitiveArray": "\nisPrimitiveArray( value )\n    Tests if a value is an array-like object containing only JavaScript\n    primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        JavaScript primitives.\n\n    Examples\n    --------\n    > var bool = isPrimitiveArray( [ '3', 2, null ] )\n    true\n    > bool = isPrimitiveArray( [ {}, 2, 1 ] )\n    false\n    > bool = isPrimitiveArray( [ new String('abc'), '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPrimitive\n",
	"isProbability": "\nisProbability( value )\n    Tests if a value is a probability.\n\n    A probability is defined as a numeric value on the interval [0,1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability( 0.5 )\n    true\n    > bool = isProbability( new Number( 0.5 ) )\n    true\n    > bool = isProbability( 3.14 )\n    false\n    > bool = isProbability( -5.0 )\n    false\n    > bool = isProbability( null )\n    false\n\n\nisProbability.isPrimitive( value )\n    Tests if a value is a number primitive which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive which is a\n        probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isPrimitive( 0.3 )\n    true\n    > bool = isProbability.isPrimitive( new Number( 0.3 ) )\n    false\n\n\nisProbability.isObject( value )\n    Tests if a value is a number object having a value which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value which\n        is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isObject( 0.77 )\n    false\n    > bool = isProbability.isObject( new Number( 0.77 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isProbabilityArray": "\nisProbabilityArray( value )\n    Tests if a value is an array-like object containing only probabilities.\n\n    A probability is defined as a numeric value on the interval [0,1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray( [ 0.5, new Number(0.8) ] )\n    true\n    > bool = isProbabilityArray( [ 0.8, 1.2 ] )\n    false\n    > bool = isProbabilityArray( [ 0.8, '0.2' ] )\n    false\n\n\nisProbabilityArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    probabilities.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.primitives( [ 1.0, 0.0, 0.5 ] )\n    true\n    > bool = isProbabilityArray.primitives( [ 0.3, new Number(0.4) ] )\n    false\n\n\nisProbabilityArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having probability values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having probability values.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.objects( [ new Number(0.7), new Number(1.0) ] )\n    true\n    > bool = isProbabilityArray.objects( [ 1.0, 0.0, new Number(0.7) ] )\n    false\n\n    See Also\n    --------\n    isArray, isProbability\n",
	"isRangeError": "\nisRangeError( value )\n    Tests if a value is a RangeError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a RangeError (or a descendant) object,\n    false positives may occur due to the fact that the RangeError constructor\n    inherits from Error and has no internal class of its own. Hence, RangeError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a RangeError object.\n\n    Examples\n    --------\n    > var bool = isRangeError( new RangeError( 'beep' ) )\n    true\n    > bool = isRangeError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isReferenceError": "\nisReferenceError( value )\n    Tests if a value is a ReferenceError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a ReferenceError (or a descendant)\n    object, false positives may occur due to the fact that the ReferenceError\n    constructor inherits from Error and has no internal class of its own.\n    Hence, ReferenceError impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a ReferenceError object.\n\n    Examples\n    --------\n    > var bool = isReferenceError( new ReferenceError( 'beep' ) )\n    true\n    > bool = isReferenceError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isRegExp": "\nisRegExp( value )\n    Tests if a value is a regular expression.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression.\n\n    Examples\n    --------\n    > var bool = isRegExp( /\\.+/ )\n    true\n    > bool = isRegExp( {} )\n    false\n\n",
	"isRegExpString": "\nisRegExpString( value )\n    Tests if a value is a regular expression string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression string.\n\n    Examples\n    --------\n    > var bool = isRegExpString( '/beep/' )\n    true\n    > bool = isRegExpString( 'beep' )\n    false\n    > bool = isRegExpString( '' )\n    false\n    > bool = isRegExpString( null )\n    false\n\n    See Also\n    --------\n    isRegExp\n",
	"isRelativePath": "\nisRelativePath( value )\n    Tests if a value is a relative path.\n\n    Function behavior is platform-specific. On Windows platforms, the function\n    is equal to `.win32()`. On POSIX platforms, the function is equal to\n    `.posix()`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a relative path.\n\n    Examples\n    --------\n    // Windows environments:\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n\n    // POSIX environments:\n    > bool = isRelativePath( './foo/bar/baz' )\n    true\n\n\nisRelativePath.posix( value )\n    Tests if a value is a POSIX relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a POSIX relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath.posix( './foo/bar/baz' )\n    true\n    > bool = isRelativePath.posix( '/foo/../bar/baz' )\n    false\n\n\nisRelativePath.win32( value )\n    Tests if a value is a Windows relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Windows relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n    > bool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isAbsolutePath\n",
	"isSafeInteger": "\nisSafeInteger( value )\n    Tests if a value is a safe integer.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a safe integer.\n\n    Examples\n    --------\n    > var bool = isSafeInteger( 5.0 )\n    true\n    > bool = isSafeInteger( new Number( 5.0 ) )\n    true\n    > bool = isSafeInteger( 2.0e200 )\n    false\n    > bool = isSafeInteger( -3.14 )\n    false\n    > bool = isSafeInteger( null )\n    false\n\n\nisSafeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isSafeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisSafeInteger.isObject( value )\n    Tests if a value is a `Number` object having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isObject( 3.0 )\n    false\n    > bool = isSafeInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isInteger, isNumber\n",
	"isSafeIntegerArray": "\nisSafeIntegerArray( value )\n    Tests if a value is an array-like object containing only safe integers.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing\n        only safe integers.\n\n    Examples\n    --------\n    > var arr = [ -3.0, new Number(0.0), 2.0 ];\n    > var bool = isSafeIntegerArray( arr )\n    true\n    > arr = [ -3.0, '3.0' ];\n    > bool = isSafeIntegerArray( arr )\n    false\n\n\nisSafeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive safe\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive safe integer values.\n\n    Examples\n    --------\n    > var arr = [ -1.0, 10.0 ];\n    > var bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -1.0, 0.0, 5.0 ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    false\n\n\nisSafeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects\n    having safe integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects having safe integer values.\n\n    Examples\n    --------\n    > var arr = [ new Number(1.0), new Number(3.0) ];\n    > var bool = isSafeIntegerArray.objects( arr )\n    true\n    > arr = [ -1.0, 0.0, 3.0 ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n    > arr = [ 3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isSafeInteger\n",
	"isSameValue": "\nisSameValue( a, b )\n    Tests if two arguments are the same value.\n\n    The function differs from the `===` operator in that the function treats\n    `-0` and `+0` as distinct and `NaNs` as the same.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are the same value.\n\n    Examples\n    --------\n    > var bool = isSameValue( true, true )\n    true\n    > bool = isSameValue( {}, {} )\n    false\n    > bool = isSameValue( -0.0, -0.0 )\n    true\n    > bool = isSameValue( -0.0, 0.0 )\n    false\n    > bool = isSameValue( NaN, NaN )\n    true\n\n    See Also\n    --------\n    isStrictEqual\n",
	"isSharedArrayBuffer": "\nisSharedArrayBuffer( value )\n    Tests if a value is a SharedArrayBuffer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a SharedArrayBuffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffer...\n    > var bool = isSharedArrayBuffer( new SharedArrayBuffer( 10 ) )\n    true\n    > bool = isSharedArrayBuffer( [] )\n    false\n\n    See Also\n    --------\n    isArrayBuffer, isTypedArray\n",
	"isStrictEqual": "\nisStrictEqual( a, b )\n    Tests if two arguments are strictly equal.\n\n    The function differs from the `===` operator in that the function treats\n    `-0` and `+0` as distinct.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are strictly equal.\n\n    Examples\n    --------\n    > var bool = isStrictEqual( true, true )\n    true\n    > bool = isStrictEqual( {}, {} )\n    false\n    > bool = isStrictEqual( -0.0, -0.0 )\n    true\n    > bool = isStrictEqual( -0.0, 0.0 )\n    false\n    > bool = isStrictEqual( NaN, NaN )\n    false\n\n    See Also\n    --------\n    isSameValue\n",
	"isString": "\nisString( value )\n    Tests if a value is a string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string.\n\n    Examples\n    --------\n    > var bool = isString( 'beep' )\n    true\n    > bool = isString( new String( 'beep' ) )\n    true\n    > bool = isString( 5 )\n    false\n\n\nisString.isPrimitive( value )\n    Tests if a value is a string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string primitive.\n\n    Examples\n    --------\n    > var bool = isString.isPrimitive( 'beep' )\n    true\n    > bool = isString.isPrimitive( new String( 'beep' ) )\n    false\n\n\nisString.isObject( value )\n    Tests if a value is a `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `String` object.\n\n    Examples\n    --------\n    > var bool = isString.isObject( new String( 'beep' ) )\n    true\n    > bool = isString.isObject( 'beep' )\n    false\n\n",
	"isStringArray": "\nisStringArray( value )\n    Tests if a value is an array of strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of strings.\n\n    Examples\n    --------\n    > var bool = isStringArray( [ 'abc', 'def' ] )\n    true\n    > bool = isStringArray( [ 'abc', 123 ] )\n    false\n\n\nisStringArray.primitives( value )\n    Tests if a value is an array containing only string primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only string\n        primitives.\n\n    Examples\n    --------\n    > var arr = [ 'abc', 'def' ];\n    > var bool = isStringArray.primitives( arr )\n    true\n    > arr = [ 'abc', new String( 'def' ) ];\n    > bool = isStringArray.primitives( arr )\n    false\n\n\nisStringArray.objects( value )\n    Tests if a value is an array containing only `String` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only `String`\n        objects.\n\n    Examples\n    --------\n    > var arr = [ new String( 'ab' ), new String( 'cd' ) ];\n    > var bool = isStringArray.objects( arr )\n    true\n    > arr = [ new String( 'abc' ), 'def' ];\n    > bool = isStringArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isString\n",
	"isSymbol": "\nisSymbol( value )\n    Tests if a value is a symbol.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a symbol.\n\n    Examples\n    --------\n    > var bool = isSymbol( Symbol( 'beep' ) )\n    true\n    > bool = isSymbol( Object( Symbol( 'beep' ) ) )\n    true\n    > bool = isSymbol( {} )\n    false\n    > bool = isSymbol( null )\n    false\n    > bool = isSymbol( true )\n    false\n\n",
	"isSymbolArray": "\nisSymbolArray( value )\n    Tests if a value is an array-like object containing only symbols.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only symbols.\n\n    Examples\n    --------\n    > var bool = isSymbolArray( [ Symbol( 'beep' ), Symbol( 'boop' ) ] )\n    true\n    > bool = isSymbolArray( Symbol( 'beep' ) )\n    false\n    > bool = isSymbolArray( [] )\n    false\n    > bool = isSymbolArray( {} )\n    false\n    > bool = isSymbolArray( null )\n    false\n    > bool = isSymbolArray( true )\n    false\n\n\nisSymbolArray.primitives( value )\n    Tests if a value is an array-like object containing only `symbol`\n    primitives.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `symbol` primitives.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.primitives( [ Symbol( 'beep' ) ] )\n    true\n    > bool = isSymbolArray.primitives( [ Object( Symbol( 'beep' ) ) ] )\n    false\n    > bool = isSymbolArray.primitives( [] )\n    false\n    > bool = isSymbolArray.primitives( {} )\n    false\n    > bool = isSymbolArray.primitives( null )\n    false\n    > bool = isSymbolArray.primitives( true )\n    false\n\n\nisSymbolArray.objects( value )\n    Tests if a value is an array-like object containing only `Symbol`\n    objects.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `Symbol` objects.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.objects( [ Object( Symbol( 'beep' ) ) ] )\n    true\n    > bool = isSymbolArray.objects( [ Symbol( 'beep' ) ] )\n    false\n    > bool = isSymbolArray.objects( [] )\n    false\n    > bool = isSymbolArray.objects( {} )\n    false\n    > bool = isSymbolArray.objects( null )\n    false\n    > bool = isSymbolArray.objects( true )\n    false\n\n    See Also\n    --------\n    isArray, isSymbol\n",
	"isSyntaxError": "\nisSyntaxError( value )\n    Tests if a value is a SyntaxError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a SyntaxError (or a descendant) object,\n    false positives may occur due to the fact that the SyntaxError constructor\n    inherits from Error and has no internal class of its own. Hence, SyntaxError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a SyntaxError object.\n\n    Examples\n    --------\n    > var bool = isSyntaxError( new SyntaxError( 'beep' ) )\n    true\n    > bool = isSyntaxError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isTruthy": "\nisTruthy( value )\n    Tests if a value is a value which translates to `true` when evaluated in a\n    boolean context.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is truthy.\n\n    Examples\n    --------\n     > var bool = isTruthy( true )\n    true\n    > bool = isTruthy( {} )\n    true\n    > bool = isTruthy( [] )\n    true\n    > bool = isTruthy( false )\n    false\n    > bool = isTruthy( '' )\n    false\n    > bool = isTruthy( 0 )\n    false\n    > bool = isTruthy( null )\n    false\n    > bool = isTruthy( void 0 )\n    false\n    > bool = isTruthy( NaN )\n    false\n\n    See Also\n    --------\n    isFalsy\n",
	"isTruthyArray": "\nisTruthyArray( value )\n    Tests if a value is an array-like object containing only truthy values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only truthy values.\n\n    Examples\n    --------\n    > var bool = isTruthyArray( [ {}, [] ] )\n    true\n    > bool = isTruthyArray( [ null, '' ] )\n    false\n    > bool = isTruthyArray( [] )\n    false\n\n    See Also\n    --------\n    isFalsyArray, isTruthy\n",
	"isTypeError": "\nisTypeError( value )\n    Tests if a value is a TypeError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a TypeError (or a descendant) object,\n    false positives may occur due to the fact that the TypeError constructor\n    inherits from Error and has no internal class of its own. Hence, TypeError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a TypeError object.\n\n    Examples\n    --------\n    > var bool = isTypeError( new TypeError( 'beep' ) )\n    true\n    > bool = isTypeError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isTypedArray": "\nisTypedArray( value )\n    Tests if a value is a typed array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a typed array.\n\n    Examples\n    --------\n    > var bool = isTypedArray( new Int8Array( 10 ) );\n    true\n\n    See Also\n    --------\n    isArray, isTypedArrayLike\n",
	"isTypedArrayLength": "\nisTypedArrayLength( value )\n    Tests if a value is a valid typed array length.\n\n    A valid length property for a typed array instance is any integer value on\n    the interval [0, 2^53-1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a valid typed array length.\n\n    Examples\n    --------\n    > var bool = isTypedArrayLength( 5 )\n    true\n    > bool = isTypedArrayLength( 2.0e200 )\n    false\n    > bool = isTypedArrayLength( -3.14 )\n    false\n    > bool = isTypedArrayLength( null )\n    false\n\n    See Also\n    --------\n    isArrayLength, isTypedArray\n",
	"isTypedArrayLike": "\nisTypedArrayLike( value )\n    Tests if a value is typed-array-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is typed-array-like.\n\n    Examples\n    --------\n    > var bool = isTypedArrayLike( new Int16Array() )\n    true\n    > bool = isTypedArrayLike({\n    >    'length': 10,\n    >    'byteOffset': 0,\n    >    'byteLength': 10,\n    >    'BYTES_PER_ELEMENT': 4\n    > })\n    true\n\n    See Also\n    --------\n    isTypedArray\n",
	"isUint16Array": "\nisUint16Array( value )\n    Tests if a value is a Uint16Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint16Array.\n\n    Examples\n    --------\n    > var bool = isUint16Array( new Uint16Array( 10 ) )\n    true\n    > bool = isUint16Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint32Array, isUint8Array\n",
	"isUint32Array": "\nisUint32Array( value )\n    Tests if a value is a Uint32Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint32Array.\n\n    Examples\n    --------\n    > var bool = isUint32Array( new Uint32Array( 10 ) )\n    true\n    > bool = isUint32Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint8Array\n",
	"isUint8Array": "\nisUint8Array( value )\n    Tests if a value is a Uint8Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint8Array.\n\n    Examples\n    --------\n    > var bool = isUint8Array( new Uint8Array( 10 ) )\n    true\n    > bool = isUint8Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint32Array\n",
	"isUint8ClampedArray": "\nisUint8ClampedArray( value )\n    Tests if a value is a Uint8ClampedArray.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint8ClampedArray.\n\n    Examples\n    --------\n    > var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) )\n    true\n    > bool = isUint8ClampedArray( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint8Array\n",
	"isUNCPath": "\nisUNCPath( value )\n    Tests if a value is a UNC path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a UNC path.\n\n    Examples\n    --------\n    > var bool = isUNCPath( '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isUNCPath( '/foo/bar/baz' )\n    false\n\n",
	"isUndefined": "\nisUndefined( value )\n    Tests if a value is undefined.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is undefined.\n\n    Examples\n    --------\n    > var bool = isUndefined( void 0 )\n    true\n    > bool = isUndefined( null )\n    false\n\n    See Also\n    --------\n    isNull, isUndefinedOrNull\n",
	"isUndefinedOrNull": "\nisUndefinedOrNull( value )\n    Tests if a value is undefined or null.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is undefined or null.\n\n    Examples\n    --------\n    > var bool = isUndefinedOrNull( void 0 )\n    true\n    > bool = isUndefinedOrNull( null )\n    true\n    > bool = isUndefinedOrNull( false )\n    false\n\n    See Also\n    --------\n    isNull, isUndefined\n",
	"isUnityProbabilityArray": "\nisUnityProbabilityArray( value )\n    Tests if a value is an array of probabilities that sum to one.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of probabilities that sum\n        to one.\n\n    Examples\n    --------\n    > var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] )\n    true\n    > bool = isUnityProbabilityArray( Uint8Array( [ 0, 1 ] )\n    true\n    > bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] )\n    false\n    > bool = isUnityProbabilityArray( [ 3.14, 0.0 ] )\n    false\n\n    See Also\n    --------\n    isProbability, isProbabilityArray\n",
	"isUppercase": "\nisUppercase( value )\n    Tests if a value is an uppercase string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an uppercase string.\n\n    Examples\n    --------\n    > var bool = isUppercase( 'HELLO' )\n    true\n    > bool = isUppercase( 'World' )\n    false\n\n    See Also\n    --------\n    isLowercase, isString\n",
	"isURI": "\nisURI( value )\n    Tests if a value is a URI.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a URI.\n\n    Examples\n    --------\n    > var bool = isURI( 'http://google.com' )\n    true\n    > bool = isURI( 'http://localhost/' )\n    true\n    > bool = isURI( 'http://example.w3.org/path%20with%20spaces.html' )\n    true\n    > bool = isURI( 'ftp://ftp.is.co.za/rfc/rfc1808.txt' )\n    true\n\n    // No scheme:\n    > bool = isURI( '' )\n    false\n    > bool = isURI( 'foo@bar' )\n    false\n    > bool = isURI( '://foo/' )\n    false\n\n    // Illegal characters:\n    > bool = isURI( 'http://<foo>' )\n    false\n\n    // Invalid path:\n    > bool = isURI( 'http:////foo.html' )\n    false\n\n    // Incomplete hex escapes:\n    > bool = isURI( 'http://example.w3.org/%a' )\n    false\n\n",
	"isURIError": "\nisURIError( value )\n    Tests if a value is a URIError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a URIError (or a descendant) object,\n    false positives may occur due to the fact that the URIError constructor\n    inherits from Error and has no internal class of its own. Hence, URIError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a URIError object.\n\n    Examples\n    --------\n    > var bool = isURIError( new URIError( 'beep' ) )\n    true\n    > bool = isURIError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isVectorLike": "\nisVectorLike( value )\n    Tests if a value is a 1-dimensional ndarray-like object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 1-dimensional ndarray-like\n        object.\n\n    Examples\n    --------\n    > var M = {};\n    > M.data = [ 0, 0, 0, 0 ];\n    > M.ndims = 1;\n    > M.shape = [ 4 ];\n    > M.strides = [ 1 ];\n    > M.offset = 0;\n    > M.order = 'row-major';\n    > M.dtype = 'generic';\n    > M.length = 4;\n    > M.flags = {};\n    > M.get = function get( i, j ) {};\n    > M.set = function set( i, j ) {};\n    > var bool = isVectorLike( M )\n    true\n    > bool = isVectorLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isVectorLike( 3.14 )\n    false\n    > bool = isVectorLike( {} )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike, isMatrixLike, isndarrayLike, isTypedArrayLike\n",
	"isWhitespace": "\nisWhitespace( str )\n    Tests whether a string contains only white space characters.\n\n    A white space character is defined as one of the 25 characters defined as a\n    white space (\"WSpace=Y\",\"WS\") character in the Unicode 9.0 character\n    database, as well as one related white space character without the Unicode\n    character property \"WSpace=Y\" (zero width non-breaking space which was\n    deprecated as of Unicode 3.2).\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only white space\n        characters.\n\n    Examples\n    --------\n    > var bool = isWhitespace( '       ' )\n    true\n    > bool = isWhitespace( 'abcdef' )\n    false\n    > bool = isWhitespace( '' )\n    false\n\n    See Also\n    --------\n    RE_WHITESPACE\n",
	"IS_BROWSER": "\nIS_BROWSER\n    Boolean indicating if the runtime is a web browser.\n\n    Examples\n    --------\n    > IS_BROWSER\n    <boolean>\n\n",
	"IS_DARWIN": "\nIS_DARWIN\n    Boolean indicating if the current process is running on Darwin.\n\n    Examples\n    --------\n    > IS_DARWIN\n    <boolean>\n\n",
	"IS_ELECTRON": "\nIS_ELECTRON\n    Boolean indicating if the runtime is Electron.\n\n    Examples\n    --------\n    > IS_ELECTRON\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON_MAIN, IS_ELECTRON_RENDERER\n",
	"IS_ELECTRON_MAIN": "\nIS_ELECTRON_MAIN\n    Boolean indicating if the runtime is the main Electron process.\n\n    Examples\n    --------\n    > IS_ELECTRON_MAIN\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON, IS_ELECTRON_RENDERER\n",
	"IS_ELECTRON_RENDERER": "\nIS_ELECTRON_RENDERER\n    Boolean indicating if the runtime is the Electron renderer process.\n\n    Examples\n    --------\n    > IS_ELECTRON_RENDERER\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON, IS_ELECTRON_MAIN\n",
	"IS_LITTLE_ENDIAN": "\nIS_LITTLE_ENDIAN\n    Boolean indicating if the environment is little endian.\n\n    Examples\n    --------\n    > IS_LITTLE_ENDIAN\n    <boolean>\n\n",
	"IS_NODE": "\nIS_NODE\n    Boolean indicating if the runtime is Node.js.\n\n    Examples\n    --------\n    > IS_NODE\n    <boolean>\n\n",
	"IS_WEB_WORKER": "\nIS_WEB_WORKER\n    Boolean indicating if the runtime is a web worker.\n\n    Examples\n    --------\n    > IS_WEB_WORKER\n    <boolean>\n\n",
	"IS_WINDOWS": "\nIS_WINDOWS\n    Boolean indicating if the current process is running on Windows.\n\n    Examples\n    --------\n    > IS_WINDOWS\n    <boolean>\n\n",
	"keysIn": "\nkeysIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    keys: Array\n        Value array.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var keys = keysIn( obj )\n    e.g., [ 'beep', 'foo' ]\n\n    See Also\n    --------\n    objectEntriesIn, objectValuesIn\n",
	"keyBy": "\nkeyBy( collection, fcn[, thisArg] )\n    Converts a collection to an object whose keys are determined by a provided\n    function and whose values are the collection values.\n\n    When invoked, the input function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If more than one element in a collection resolves to the same key, the key\n    value is the collection element which last resolved to the key.\n\n    Object values are shallow copies.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Output object.\n\n    Examples\n    --------\n    > function toKey( v ) { return v.a; };\n    > var arr = [ { 'a': 1 }, { 'a': 2 } ];\n    > keyBy( arr, toKey )\n    { '1': { 'a': 1 }, '2': { 'a': 2 } }\n\n    See Also\n    --------\n    forEach\n",
	"keyByRight": "\nkeyByRight( collection, fcn[, thisArg] )\n    Converts a collection to an object whose keys are determined by a provided\n    function and whose values are the collection values, iterating from right to\n    left.\n\n    When invoked, the input function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If more than one element in a collection resolves to the same key, the key\n    value is the collection element which last resolved to the key.\n\n    Object values are shallow copies.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Output object.\n\n    Examples\n    --------\n    > function toKey( v ) { return v.a; };\n    > var arr = [ { 'a': 1 }, { 'a': 2 } ];\n    > keyByRight( arr, toKey )\n    { '2': { 'a': 2 }, '1': { 'a': 1 } }\n\n    See Also\n    --------\n    forEachRight, keyBy\n",
	"kstest": "\nkstest( x, y[, ...params][, opts] )\n    Computes a Kolmogorov-Smirnov goodness-of-fit test.\n\n    For a numeric array or typed array `x`, a Kolmogorov-Smirnov goodness-of-fit\n    is computed for the null hypothesis that the values of `x` come from the\n    distribution specified by `y`. `y` can be either a string with the name of\n    the distribution to test against, or a function.\n\n    In the latter case, `y` is expected to be the cumulative distribution\n    function (CDF) of the distribution to test against, with its first parameter\n    being the value at which to evaluate the CDF and the remaining parameters\n    constituting the parameters of the distribution. The parameters of the\n    distribution are passed as additional arguments after `y` from `kstest` to\n    the chosen CDF. The function returns an object holding the calculated test\n    statistic `statistic` and the `pValue` of the test.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the hypothesis test results.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Input array holding numeric values.\n\n    y: Function|string\n        Either a CDF function or a string denoting the name of a distribution.\n\n    params: ...number (optional)\n        Distribution parameters passed to reference CDF.\n\n    options: Object (optional)\n        Function options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.sorted: boolean (optional)\n        Boolean indicating if the input array is already in sorted order.\n        Default: `false`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that the true distribution of `x` is not equal\n        to the reference distribution specified by `y` (`two-sided`), whether it\n        is `less` than the reference distribution or `greater` than the\n        reference distribution. Default: `'two-sided'`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.alternative: string\n        Used test alternative. Either `two-sided`, `less` or `greater`.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Verify that data is drawn from a normal distribution:\n    > var rnorm = base.random.normal.factory({ 'seed': 4839 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < 100; i++ ) { x[ i ] = rnorm( 3.0, 1.0 ); }\n    // Test against N(0,1)\n    > var out = kstest( x, 'normal', 0.0, 1.0 );\n    { pValue: 0.0, statistic: 0.847, ... }\n    // Test against N(3,1)\n    > out = kstest( x, 'normal', 3.0, 1.0 )\n    { pValue: 0.6282, statistic: 0.0733, ... }\n\n    // Verify that data is drawn from a uniform distribution:\n    > runif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 })\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\n    > out = kstest( x, 'uniform', 0.0, 1.0 )\n    { pValue: ~0.703, statistic: ~0.069, ... }\n\n    // Print output:\n    > out.print()\n    Kolmogorov-Smirnov goodness-of-fit test.\n\n    Null hypothesis: the CDF of `x` is equal equal to the reference CDF.\n\n        pValue: 0.7039\n        statistic: 0.0689\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Set custom significance level:\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alpha': 0.1 })\n    { pValue: ~0.7039, statistic: ~0.069, ... }\n\n    // Carry out one-sided hypothesis tests:\n    > runif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'less' });\n    { pValue: ~0.358, statistic: ~0.07, ... }\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'greater' });\n    { pValue: ~0.907, statistic: ~0.02, ... }\n\n    // Set `sorted` option to true when data is in increasing order:\n    > x = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ];\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'sorted': true })\n    { pValue: ~1, statistic: 0.1, ... }\n\n",
	"linspace": "\nlinspace( start, stop[, length] )\n    Generates a linearly spaced numeric array.\n\n    If a `length` is not provided, the default output array length is `100`.\n\n    The output array is guaranteed to include the `start` and `stop` values.\n\n    Parameters\n    ----------\n    start: number\n        First array value.\n\n    stop: number\n        Last array value.\n\n    length: integer (optional)\n        Length of output array. Default: `100`.\n\n    Returns\n    -------\n    arr: Array\n        Linearly spaced numeric array.\n\n    Examples\n    --------\n    > var arr = linspace( 0, 100, 6 )\n    [ 0, 20, 40, 60, 80, 100 ]\n\n    See Also\n    --------\n    incrspace, logspace\n",
	"LIU_NEGATIVE_OPINION_WORDS_EN": "\nLIU_NEGATIVE_OPINION_WORDS_EN()\n    Returns a list of negative opinion words.\n\n    A word's appearance in a sentence does *not* necessarily imply a positive or\n    negative opinion.\n\n    The list includes misspelled words. Their presence is intentional, as such\n    misspellings frequently occur in social media content.\n\n    Returns\n    -------\n    out: Array<string>\n        List of negative opinion words.\n\n    Examples\n    --------\n    > var list = LIU_NEGATIVE_OPINION_WORDS_EN()\n    [ '2-faced', '2-faces', 'abnormal', 'abolish', ... ]\n\n    References\n    ----------\n    - Hu, Minqing, and Bing Liu. 2004. \"Mining and Summarizing Customer\n    Reviews.\" In *Proceedings of the Tenth Acm Sigkdd International Conference\n    on Knowledge Discovery and Data Mining*, 168–77. KDD '04. New York, NY, USA:\n    ACM. doi:10.1145/1014052.1014073.\n    - Liu, Bing, Minqing Hu, and Junsheng Cheng. 2005. \"Opinion Observer:\n    Analyzing and Comparing Opinions on the Web.\" In *Proceedings of the 14th\n    International Conference on World Wide Web*, 342–51. WWW '05. New York, NY,\n    USA: ACM. doi:10.1145/1060745.1060797.\n\n    * If you use the list for publication or third party consumption, please\n    cite one of the listed references.\n\n    See Also\n    --------\n    LIU_POSITIVE_OPINION_WORDS_EN\n",
	"LIU_POSITIVE_OPINION_WORDS_EN": "\nLIU_POSITIVE_OPINION_WORDS_EN()\n    Returns a list of positive opinion words.\n\n    A word's appearance in a sentence does *not* necessarily imply a positive or\n    negative opinion.\n\n    The list includes misspelled words. Their presence is intentional, as such\n    misspellings frequently occur in social media content.\n\n    Returns\n    -------\n    out: Array<string>\n        List of positive opinion words.\n\n    Examples\n    --------\n    > var list = LIU_POSITIVE_OPINION_WORDS_EN()\n    [ 'a+', 'abound', 'abounds', 'abundance', ... ]\n\n    References\n    ----------\n    - Hu, Minqing, and Bing Liu. 2004. 'Mining and Summarizing Customer\n    Reviews.' In *Proceedings of the Tenth Acm Sigkdd International Conference\n    on Knowledge Discovery and Data Mining*, 168–77. KDD '04. New York, NY, USA:\n    ACM. doi:10.1145/1014052.1014073.\n    - Liu, Bing, Minqing Hu, and Junsheng Cheng. 2005. 'Opinion Observer:\n    Analyzing and Comparing Opinions on the Web.' In *Proceedings of the 14th\n    International Conference on World Wide Web*, 342–51. WWW '05. New York, NY,\n    USA: ACM. doi:10.1145/1060745.1060797.\n\n    * If you use the list for publication or third party consumption, please\n    cite one of the listed references.\n\n    See Also\n    --------\n    LIU_NEGATIVE_OPINION_WORDS_EN\n",
	"LN_HALF": "\nLN_HALF\n    Natural logarithm of `1/2`.\n\n    Examples\n    --------\n    > LN_HALF\n    -0.6931471805599453\n\n",
	"LN_PI": "\nLN_PI\n    Natural logarithm of the mathematical constant `π`.\n\n    Examples\n    --------\n    > LN_PI\n    1.1447298858494002\n\n    See Also\n    --------\n    PI\n",
	"LN_SQRT_TWO_PI": "\nLN_SQRT_TWO_PI\n    Natural logarithm of the square root of `2π`.\n\n    Examples\n    --------\n    > LN_SQRT_TWO_PI\n    0.9189385332046728\n\n    See Also\n    --------\n    PI\n",
	"LN_TWO_PI": "\nLN_TWO_PI\n    Natural logarithm of `2π`.\n\n    Examples\n    --------\n    > LN_TWO_PI\n    1.8378770664093456\n\n    See Also\n    --------\n    TWO_PI\n",
	"LN10": "\nLN10\n    Natural logarithm of `10`.\n\n    Examples\n    --------\n    > LN10\n    2.302585092994046\n\n    See Also\n    --------\n    LN2\n",
	"LN2": "\nLN2\n    Natural logarithm of `2`.\n\n    Examples\n    --------\n    > LN2\n    0.6931471805599453\n\n    See Also\n    --------\n    LN10\n",
	"logspace": "\nlogspace( a, b[, length] )\n    Generates a logarithmically spaced numeric array between `10^a` and `10^b`.\n\n    If a `length` is not provided, the default output array length is `10`.\n\n    The output array includes the values `10^a` and `10^b`.\n\n    Parameters\n    ----------\n    a: number\n        Exponent of start value.\n\n    b: number\n        Exponent of end value.\n\n    length: integer (optional)\n        Length of output array. Default: `10`.\n\n    Returns\n    -------\n    arr: Array\n        Logarithmically spaced numeric array.\n\n    Examples\n    --------\n    > var arr = logspace( 0, 2, 6 )\n    [ 1, ~2.5, ~6.31, ~15.85, ~39.81, 100 ]\n\n    See Also\n    --------\n    incrspace, linspace\n",
	"LOG10E": "\nLOG10E\n    Base 10 logarithm of Euler's number.\n\n    Examples\n    --------\n    > LOG10E\n    0.4342944819032518\n\n    See Also\n    --------\n    E, LOG2E\n",
	"LOG2E": "\nLOG2E\n    Base 2 logarithm of Euler's number.\n\n    Examples\n    --------\n    > LOG2E\n    1.4426950408889634\n\n    See Also\n    --------\n    E, LOG10E\n",
	"lowercase": "\nlowercase( str )\n    Converts a `string` to lowercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Lowercase string.\n\n    Examples\n    --------\n    > var out = lowercase( 'bEEp' )\n    'beep'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n",
	"lowercaseKeys": "\nlowercaseKeys( obj )\n    Converts each object key to lowercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'A': 1, 'B': 2 };\n    > var out = lowercaseKeys( obj )\n    { 'a': 1, 'b': 2 }\n\n    See Also\n    --------\n    uncapitalizeKeys, uppercaseKeys\n",
	"lowess": "\nlowess( x, y[, opts] )\n    Locally-weighted polynomial regression via the LOWESS algorithm.\n\n    Parameters\n    ----------\n    x: Array<number>\n        x-axis values (abscissa values).\n\n    y: Array<number>\n        Corresponding y-axis values (ordinate values).\n\n    options: Object (optional)\n        Function options.\n\n    options.f: number (optional)\n        Positive number specifying the smoothing span, i.e., the proportion of\n        points which influence smoothing at each value. Larger values\n        correspond to more smoothing. Default: `2/3`.\n\n    options.nsteps: number (optional)\n        Number of iterations in the robust fit (fewer iterations translates to\n        faster function execution). If set to zero, the nonrobust fit is\n        returned. Default: `3`.\n\n    options.delta: number (optional)\n        Nonnegative number which may be used to reduce the number of\n        computations. Default: 1/100th of the range of `x`.\n\n    options.sorted: boolean (optional)\n        Boolean indicating if the input array `x` is sorted. Default: `false`.\n\n    Returns\n    -------\n    out: Object\n        Object with ordered x-values and fitted values.\n\n    Examples\n    --------\n    > var x = new Float64Array( 100 );\n    > var y = new Float64Array( x.length );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = i;\n    ...     y[ i ] = ( 0.5*i ) + ( 10.0*{{alias:@stdlib/random/randn}}() );\n    > }\n    > var out = lowess( x, y );\n    > var yhat = out.y;\n    >\n    > var h = plot( [ x, x ], [ y, yhat ] );\n    > h.lineStyle = [ 'none', '-' ];\n    > h.symbols = [ 'closed-circle', 'none' ];\n    >\n    > h.view( 'window' );\n\n",
	"lpad": "\nlpad( str, len[, pad] )\n    Left pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = lpad( 'a', 5 )\n    '    a'\n    > out = lpad( 'beep', 10, 'b' )\n    'bbbbbbbeep'\n    > out = lpad( 'boop', 12, 'beep' )\n    'beepbeepboop'\n\n    See Also\n    --------\n    pad, rpad\n",
	"ltrim": "\nltrim( str )\n    Trims whitespace from the beginning of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = ltrim( ' \\r\\n\\t  Beep \\t\\t\\n  ' )\n    'Beep \\t\\t\\n  '\n\n    See Also\n    --------\n    trim, rtrim\n",
	"MALE_FIRST_NAMES_EN": "\nMALE_FIRST_NAMES_EN()\n    Returns a list of common male first names in English speaking countries.\n\n    Returns\n    -------\n    out: Array<string>\n        List of common male first names.\n\n    Examples\n    --------\n    > var list = MALE_FIRST_NAMES_EN()\n    [ 'Aaron', 'Ab', 'Abba', 'Abbe', ... ]\n\n    References\n    ----------\n    - Ward, Grady. 2002. 'Moby Word II.' <http://www.gutenberg.org/files/3201/\n    3201.txt>.\n\n    See Also\n    --------\n    FEMALE_FIRST_NAMES_EN\n",
	"mapFun": "\nmapFun( fcn, n[, thisArg] )\n    Invokes a function `n` times and returns an array of accumulated function\n    return values.\n\n    The invoked function is provided a single argument: the invocation index\n    (zero-based).\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke.\n\n    n: integer\n        Number of times to invoke a function.\n\n    thisArg: any (optional)\n        Function execution context.\n\n    Returns\n    -------\n    out: Array\n        Array of accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i ) { return i; };\n    > var arr = mapFun( fcn, 5 )\n    [ 0, 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    mapFunAsync\n",
	"mapFunAsync": "\nmapFunAsync( fcn, n, [options,] done )\n    Invokes a function `n` times and returns an array of accumulated function\n    return values.\n\n    For each iteration, the provided function is invoked with two arguments:\n\n    - `index`: invocation index (starting from zero)\n    - `next`: callback to be invoked upon function completion\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke.\n\n    n: integer\n        Number of times to invoke a function.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    done: Function\n        A callback invoked upon executing a provided function `n` times or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > mapFunAsync( fcn, 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > var opts = { 'limit': 2 };\n    > mapFunAsync( fcn, 10, opts, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Sequential invocation:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > var opts = { 'series': true };\n    > mapFunAsync( fcn, 10, opts, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n\nmapFunAsync.factory( [options,] fcn )\n    Returns a function which invokes a function `n` times and returns an array\n    of accumulated function return values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        Function to invoke.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function `n` times and returns an array of\n        accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapFunAsync.factory( opts, fcn );\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > mapFunAsync( 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    See Also\n    --------\n    mapFun\n",
	"mapKeys": "\nmapKeys( obj, transform )\n    Maps keys from one object to a new object having the same values.\n\n    The transform function is provided three arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n\n    The value returned by a transform function should be a value which can be\n    serialized as an object key.\n\n    The function only maps own properties. Hence, the function does not map\n    inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    transform: Function\n        Transform function. Return values specify the keys of the output object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function transform( key, value ) { return key + value; };\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = mapKeys( obj, transform )\n    { 'a1': 1, 'b2': 2 }\n\n    See Also\n    --------\n    mapValues\n",
	"mapKeysAsync": "\nmapKeysAsync( obj, [options,] transform, done )\n    Maps keys from one object to a new object having the same values.\n\n    When invoked, `transform` is provided a maximum of four arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n    - `next`: a callback to be invoked after processing an object `key`\n\n    The actual number of provided arguments depends on function length. If\n    `transform` accepts two arguments, `transform` is provided:\n\n    - `key`\n    - `next`\n\n    If `transform` accepts three arguments, `transform` is provided:\n\n    - `key`\n    - `value`\n    - `next`\n\n    For every other `transform` signature, `transform` is provided all four\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `key`: transformed key\n\n    If a `transform` function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The key returned by a transform function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function only maps own properties. Hence, the function does not map\n    inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration and insertion order are *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    done: Function\n        A callback invoked either upon processing all own properties or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2 };\n    > mapKeysAsync( obj, transform, done )\n    { 'a:1': 1, 'b:2': 2 }\n\n    // Limit number of concurrent invocations:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapKeysAsync( obj, opts, transform, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n\n    // Process sequentially:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'series': true };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapKeysAsync( obj, opts, transform, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n\n\nmapKeysAsync.factory( [options,] transform )\n    Returns a function which maps keys from one object to a new object having\n    the same values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps keys from one object to a new object having the\n        same values.\n\n    Examples\n    --------\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapKeysAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep:boop': 'beep' }\n\n    See Also\n    --------\n    mapKeys, mapValuesAsync\n",
	"mapValues": "\nmapValues( obj, transform )\n    Maps values from one object to a new object having the same keys.\n\n    The transform function is provided three arguments:\n\n    - `value`: object value corresponding to `key`\n    - `key`: object key\n    - `obj`: the input object\n\n    The function only maps values from own properties. Hence, the function does\n    not map inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function transform( value, key ) { return key + value; };\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = mapValues( obj, transform )\n    { 'a': 'a1', 'b': 'b2' }\n\n    See Also\n    --------\n    mapKeys, omitBy, pickBy\n",
	"mapValuesAsync": "\nmapValuesAsync( obj, [options,] transform, done )\n    Maps values from one object to a new object having the same keys.\n\n    When invoked, `transform` is provided a maximum of four arguments:\n\n    - `value`: object value corresponding to `key`\n    - `key`: object key\n    - `obj`: the input object\n    - `next`: a callback to be invoked after processing an object `value`\n\n    The actual number of provided arguments depends on function length. If\n    `transform` accepts two arguments, `transform` is provided:\n\n    - `value`\n    - `next`\n\n    If `transform` accepts three arguments, `transform` is provided:\n\n    - `value`\n    - `key`\n    - `next`\n\n    For every other `transform` signature, `transform` is provided all four\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `value`: transformed value\n\n    If a `transform` function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function only maps values from own properties. Hence, the function does\n    not map inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration and insertion order are *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    done: Function\n        A callback invoked either upon processing all own properties or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2 };\n    > mapValuesAsync( obj, transform, done )\n    { 'a': 'a:1', 'b': 'b:2' }\n\n    // Limit number of concurrent invocations:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapValuesAsync( obj, opts, transform, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n\n    // Process sequentially:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'series': true };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapValuesAsync( obj, opts, transform, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n\n\nmapValuesAsync.factory( [options,] transform )\n    Returns a function which maps values from one object to a new object having\n    the same keys.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps values from one object to a new object having the\n        same keys.\n\n    Examples\n    --------\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapValuesAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep': 'beep:boop' }\n\n    See Also\n    --------\n    mapKeysAsync, mapValues\n",
	"MAX_ARRAY_LENGTH": "\nMAX_ARRAY_LENGTH\n    Maximum length for a generic array.\n\n    Examples\n    --------\n    > MAX_ARRAY_LENGTH\n    4294967295\n\n    See Also\n    --------\n    MAX_TYPED_ARRAY_LENGTH\n",
	"MAX_TYPED_ARRAY_LENGTH": "\nMAX_TYPED_ARRAY_LENGTH\n    Maximum length for a typed array.\n\n    Examples\n    --------\n    > MAX_TYPED_ARRAY_LENGTH\n    9007199254740991\n\n    See Also\n    --------\n    MAX_ARRAY_LENGTH\n",
	"memoize": "\nmemoize( fcn[, hashFunction] )\n    Returns a memoized function.\n\n    The function does not set the `length` property of the returned function.\n    Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    The function serializes provided arguments as a string and stores results\n    using the string as an identifier. To use a custom hash function, provide a\n    hash function argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to memoize.\n\n    hashFunction: Function (optional)\n        Function to map a set of arguments to a single value identifying that\n        set.\n\n    Returns\n    -------\n    out: Function\n        Memoized function.\n\n    Examples\n    --------\n    > function factorial( n ) {\n    ...     var prod;\n    ...     var i;\n    ...     prod = 1;\n    ...     for ( i = n; i > 1; i-- ) {\n    ...         prod *= i;\n    ...     }\n    ...     return prod;\n    ... };\n    > var memoized = memoize( factorial );\n    > var v = memoized( 5 )\n    120\n    > v = memoized( 5 )\n    120\n\n",
	"merge": "\nmerge( target, ...source )\n    Merges objects into a target object.\n\n    The target object is mutated.\n\n    Only plain objects are merged and extended. Other values/types are either\n    deep copied or assigned.\n\n    Support for deep merging class instances is inherently fragile.\n\n    `Number`, `String`, and `Boolean` objects are merged as primitives.\n\n    Functions are not deep copied.\n\n    Parameters\n    ----------\n    target: Object\n        Target object.\n\n    source: ...Object\n        Source objects (i.e., objects to be merged into the target object).\n\n    Returns\n    -------\n    out: Object\n        Merged (target) object.\n\n    Examples\n    --------\n    > var target = { 'a': 'beep' };\n    > var source = { 'a': 'boop', 'b': 'bap' };\n    > var out = merge( target, source )\n    { 'a': 'boop', 'b': 'bap' }\n    > var bool = ( out === target )\n    true\n\n\nmerge.factory( options )\n    Returns a function for merging and extending objects.\n\n    Parameters\n    ----------\n    options: Object\n        Options.\n\n    options.level: integer (optional)\n        Merge level. Default: Infinity.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy merged values. Deep copying\n        prevents shared references and source object mutation. Default: true.\n\n    options.override: boolean|Function (optional)\n        Defines the merge strategy. If `true`, source object values will always\n        override target object values. If `false`, source values never override\n        target values (useful for adding, but not overwriting, properties). To\n        define a custom merge strategy, provide a function. Default: true.\n\n    options.extend: boolean (optional)\n        Boolean indicating whether new properties can be added to the target\n        object. If `false`, only shared properties are merged. Default: true.\n\n    Returns\n    -------\n    fcn: Function\n        Function which can be used to merge objects.\n\n    Examples\n    --------\n    > var opts = {\n    ...     'level': 100,\n    ...     'copy': true,\n    ...     'override': true,\n    ...     'extend': true\n    ... };\n    > var merge = merge.factory( opts )\n    <Function>\n\n    // Set the `level` option to limit the merge depth:\n    > merge = merge.factory( { 'level': 2 } );\n    > var target = {\n    ...     '1': { 'a': 'beep', '2': { '3': null, 'b': [ 5, 6, 7 ] } }\n    ... };\n    > var source = {\n    ...     '1': { 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } }\n    ... };\n    > var out = merge( target, source )\n    { '1': { 'a': 'beep', 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } } }\n\n    // Set the `copy` option to `false` to allow shared references:\n    > merge = merge.factory( { 'copy': false } );\n    > target = {};\n    > source = { 'a': [ 1, 2, 3 ] };\n    > out = merge( target, source );\n    > var bool = ( out.a === source.a )\n    true\n\n    // Set the `override` option to `false` to preserve existing properties:\n    > merge = merge.factory( { 'override': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'a': null, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'boop', 'c': 'bop' }\n\n    // Define a custom merge strategy:\n    > function strategy( a, b, key ) {\n    ...     // a => target value\n    ...     // b => source value\n    ...     // key => object key\n    ...     if ( key === 'a' ) {\n    ...         return b;\n    ...     }\n    ...     if ( key === 'b' ) {\n    ...         return a;\n    ...     }\n    ...     return 'bebop';\n    ... };\n    > merge = merge.factory( { 'override': strategy } );\n    > target = { 'a': 'beep', 'b': 'boop', 'c': 1234 };\n    > source = { 'a': null, 'b': {}, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': null, 'b': 'boop', 'c': 'bebop' }\n\n    // Prevent non-existent properties from being added to the target object:\n    > merge = merge.factory( { 'extend': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'b': 'hello', 'c': 'world' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'hello' }\n\n    See Also\n    --------\n    copy\n",
	"MILLISECONDS_IN_DAY": "\nMILLISECONDS_IN_DAY\n    Number of milliseconds in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var ms = days * MILLISECONDS_IN_DAY\n    271296000\n\n",
	"MILLISECONDS_IN_HOUR": "\nMILLISECONDS_IN_HOUR\n    Number of milliseconds in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var ms = hrs * MILLISECONDS_IN_HOUR\n    11304000\n\n",
	"MILLISECONDS_IN_MINUTE": "\nMILLISECONDS_IN_MINUTE\n    Number of milliseconds in a minute.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var ms = mins * MILLISECONDS_IN_MINUTE\n    188400\n\n",
	"MILLISECONDS_IN_SECOND": "\nMILLISECONDS_IN_SECOND\n    Number of milliseconds in a second.\n\n    Examples\n    --------\n    > var secs = 3.14;\n    > var ms = secs * MILLISECONDS_IN_SECOND\n    3140\n\n",
	"MILLISECONDS_IN_WEEK": "\nMILLISECONDS_IN_WEEK\n    Number of milliseconds in a week.\n\n    Examples\n    --------\n    > var weeks = 3.14;\n    > var ms = weeks * MILLISECONDS_IN_WEEK\n    1899072000\n\n",
	"MINARD_NAPOLEONS_MARCH": "\nMINARD_NAPOLEONS_MARCH( [options] )\n    Returns data for Charles Joseph Minard's cartographic depiction of\n    Napoleon's Russian campaign of 1812.\n\n    Data includes the following:\n\n    - army: army size\n    - cities: cities\n    - labels: map labels\n    - temperature: temperature during the army's return from Russia\n    - rivers: river data\n\n    Temperatures are on the Réaumur scale. Multiply each temperature by `1.25`\n    to convert to Celsius.\n\n    River data is formatted as GeoJSON.\n\n    River data is incomplete, with portions of rivers missing.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.data: string (optional)\n        Dataset name.\n\n    Returns\n    -------\n    out: Object|Array<Object>\n        Minard's data.\n\n    Examples\n    --------\n    > var data = MINARD_NAPOLEONS_MARCH();\n    > var army = data.army\n    [...]\n    > var cities = data.cities\n    [...]\n    > var labels = data.labels\n    [...]\n    > var river = data.river\n    {...}\n    > var t = data.temperature\n    [...]\n\n    References\n    ----------\n    - Minard, Charles Joseph. 1869. *Tableaux graphiques et cartes figuratives*.\n    Ecole nationale des ponts et chaussées.\n    - Wilkinson, Leland. 2005. *The Grammar of Graphics*. Springer-Verlag New\n    York. doi:10.1007/0-387-28695-0.\n\n",
	"MINUTES_IN_DAY": "\nMINUTES_IN_DAY\n    Number of minutes in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var mins = days * MINUTES_IN_DAY\n    4521.6\n\n",
	"MINUTES_IN_HOUR": "\nMINUTES_IN_HOUR\n    Number of minutes in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var mins = hrs * MINUTES_IN_HOUR\n    188.4\n\n",
	"MINUTES_IN_WEEK": "\nMINUTES_IN_WEEK\n    Number of minutes in a week.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var mins = wks * MINUTES_IN_WEEK\n    31651.2\n\n",
	"minutesInMonth": "\nminutesInMonth( [month[, year]] )\n    Returns the number of minutes in a month.\n\n    By default, the function returns the number of minutes in the current month\n    of the current year (according to local time). To determine the number of\n    minutes for a particular month and year, provide `month` and `year`\n    arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also supports providing a `Date` object.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Minutes in a month.\n\n    Examples\n    --------\n    > var num = minutesInMonth()\n    <number>\n    > num = minutesInMonth( 2 )\n    <number>\n    > num = minutesInMonth( 2, 2016 )\n    41760\n    > num = minutesInMonth( 2, 2017 )\n    40320\n\n    // Other ways to supply month:\n    > num = minutesInMonth( 'feb', 2016 )\n    41760\n    > num = minutesInMonth( 'february', 2016 )\n    41760\n\n    See Also\n    --------\n    minutesInYear\n",
	"minutesInYear": "\nminutesInYear( [value] )\n    Returns the number of minutes in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of minutes in the current year\n    (according to local time). To determine the number of minutes for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of minutes in a year.\n\n    Examples\n    --------\n    > var num = minutesInYear()\n    <number>\n    > num = minutesInYear( 2016 )\n    527040\n    > num = minutesInYear( 2017 )\n    525600\n\n    See Also\n    --------\n    minutesInMonth\n",
	"MOBY_DICK": "\nMOBY_DICK()\n    Returns the text of Moby Dick by Herman Melville.\n\n    Each array element has the following fields:\n\n    - chapter: book chapter (number or identifier)\n    - title: chapter title (if available; otherwise, empty)\n    - text: chapter text\n\n    Returns\n    -------\n    out: Array<Object>\n        Book text.\n\n    Examples\n    --------\n    > var data = MOBY_DICK()\n    [ {...}, {...}, ... ]\n\n",
	"MONTHS_IN_YEAR": "\nMONTHS_IN_YEAR\n    Number of months in a year.\n\n    Examples\n    --------\n    > var yrs = 3.14;\n    > var mons = yrs * MONTHS_IN_YEAR\n    37.68\n\n",
	"MONTH_NAMES_EN": "\nMONTH_NAMES_EN()\n    Returns a list of month names (English).\n\n    Returns\n    -------\n    out: Array<string>\n        List of month names.\n\n    Examples\n    --------\n    > var list = MONTH_NAMES_EN()\n    [ 'January', 'February', 'March', 'April', ... ]\n\n",
	"moveProperty": "\nmoveProperty( source, prop, target )\n    Moves a property from one object to another object.\n\n    The property is deleted from the source object and the property's descriptor\n    is preserved during transfer.\n\n    If a source property is not configurable, the function throws an error, as\n    the property cannot be deleted from the source object.\n\n    Parameters\n    ----------\n    source: Object\n        Source object.\n\n    prop: string\n        Property to move.\n\n    target: Object\n        Target object.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether operation was successful.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 'b' };\n    > var obj2 = {};\n    > var bool = moveProperty( obj1, 'a', obj2 )\n    true\n    > bool = moveProperty( obj1, 'c', obj2 )\n    false\n\n",
	"nativeClass": "\nnativeClass( value )\n    Returns a string value indicating a specification defined classification of\n    an object.\n\n    The function is *not* robust for ES2015+ environments. In ES2015+,\n    `Symbol.toStringTag` allows overriding the default description of an object.\n    While measures are taken to uncover the default description, such measures\n    can be thwarted. While this function remains useful for type-checking, be\n    aware that value impersonation is possible. Where possible, prefer functions\n    tailored to checking for particular value types, as specialized functions\n    are better equipped to address `Symbol.toStringTag`.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        String value indicating a specification defined classification of the\n        input value.\n\n    Examples\n    --------\n    > var str = nativeClass( 'a' )\n    '[object String]'\n    > str = nativeClass( 5 )\n    '[object Number]'\n    > function Beep(){};\n    > str = nativeClass( new Beep() )\n    '[object Object]'\n\n    See Also\n    --------\n    constructorName, typeOf\n",
	"NIGHTINGALES_ROSE": "\nNIGHTINGALES_ROSE()\n    Returns data for Nightingale's famous polar area diagram.\n\n    Returns\n    -------\n    out: Array<Object>\n        Nightingale's data.\n\n    Examples\n    --------\n    > var data = NIGHTINGALES_ROSE()\n    [{...}, {...}, ...]\n\n    References\n    ----------\n    - Nightingale, Florence. 1859. *A contribution to the sanitary history of\n    the British army during the late war with Russia*. London, United Kingdom:\n    John W. Parker and Son. <http://ocp.hul.harvard.edu/dl/contagion/010164675>.\n\n",
	"NINF": "\nNINF\n    Double-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > NINF\n    -Infinity\n\n    See Also\n    --------\n    FLOAT16_NINF, FLOAT32_NINF, PINF\n",
	"NODE_VERSION": "\nNODE_VERSION\n    Node version.\n\n    Examples\n    --------\n    > NODE_VERSION\n    <string>\n\n",
	"none": "\nnone( collection )\n    Tests whether all elements in a collection are falsy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if all elements are falsy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 0, 0, 0 ];\n    > var bool = none( arr )\n    true\n\n    See Also\n    --------\n    any, every, forEach, noneBy, some\n",
	"noneBy": "\nnoneBy( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a falsy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = noneBy( arr, negative )\n    true\n\n    See Also\n    --------\n    anyBy, everyBy, forEach, none, noneByRight, someBy\n",
	"noneByAsync": "\nnoneByAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a truthy `result` value\n    and calls the `done` callback with `null` as the first argument and `false`\n    as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null` as\n    the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\nnoneByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneBy, noneByRightAsync, someByAsync\n",
	"noneByRight": "\nnoneByRight( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a falsy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ -1, -2, -3, -4 ];\n    > var bool = noneByRight( arr, positive )\n    true\n\n    See Also\n    --------\n    anyByRight, everyByRight, forEachRight, none, noneBy, someByRight\n",
	"noneByRightAsync": "\nnoneByRightAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a truthy `result` value\n    and calls the `done` callback with `null` as the first argument and `false`\n    as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null` as\n    the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\nnoneByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByAsync, noneByRight, someByRightAsync\n",
	"noop": "\nnoop()\n    A function which does nothing.\n\n    Examples\n    --------\n    > noop();\n\n",
	"now": "\nnow()\n    Returns the time in seconds since the epoch.\n\n    The Unix epoch is 00:00:00 UTC on 1 January 1970.\n\n    Returns\n    -------\n    out: integer\n        Time in seconds since the epoch.\n\n    Examples\n    --------\n    > var ts = now()\n    <number>\n\n",
	"Number": "\nNumber( value )\n    Returns a Number object.\n\n    This constructor should be used sparingly. Always prefer number primitives.\n\n    Parameters\n    ----------\n    value: number\n        Value to wrap in a Number object.\n\n    Returns\n    -------\n    out: Number\n        Number object.\n\n    Examples\n    --------\n    > var v = new Number( 5 )\n    <Number>\n\n",
	"NUM_CPUS": "\nNUM_CPUS\n    Number of CPUs.\n\n    In browser environments, the number of CPUs is determined by querying the\n    hardware concurrency API.\n\n    In Node.js environments, the number of CPUs is determined via the `os`\n    module.\n\n    Examples\n    --------\n    > NUM_CPUS\n    <number>\n\n",
	"objectEntries": "\nobjectEntries( obj )\n    Returns an array of an object's own enumerable property `[key, value]`\n    pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var entries = objectEntries( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectEntriesIn, objectFromEntries, objectValues\n",
	"objectEntriesIn": "\nobjectEntriesIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    `[key, value]` pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var entries = objectEntriesIn( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectEntries, objectFromEntries, keysIn, objectValuesIn\n",
	"objectFromEntries": "\nobjectFromEntries( entries )\n    Creates an object from an array of key-value pairs.\n\n    Parameters\n    ----------\n    entries: Array<Array>\n        Input object.\n\n    Returns\n    -------\n    out: Object\n        Object created from `[key, value]` pairs.\n\n    Examples\n    --------\n    > var entries = [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ];\n    > var obj = objectFromEntries( entries )\n    { 'beep': 'boop', 'foo': 'bar' }\n\n    See Also\n    --------\n    objectEntries\n",
	"objectInverse": "\nobjectInverse( obj[, options] )\n    Inverts an object, such that keys become values and values become keys.\n\n    Beware when providing objects having values which are themselves objects.\n    The function relies on native object serialization (`#toString`) when\n    converting values to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverse( obj )\n    { 'beep': 'a', 'boop': 'b' }\n\n    // Duplicate values:\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverse( obj )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverse( obj, { 'duplicates': false } )\n    { 'beep': 'c', 'boop': 'b' }\n\n    See Also\n    --------\n    objectInverseBy\n",
	"objectInverseBy": "\nobjectInverseBy( obj, [options,] transform )\n    Inverts an object, such that keys become values and values become keys,\n    according to a transform function.\n\n    The transform function is provided three arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n\n    The value returned by a transform function should be a value which can be\n    serialized as an object key. Hence, beware when providing objects having\n    values which are themselves objects. The function relies on native object\n    serialization (`#toString`) when converting transform function return values\n    to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    transform: function\n        Transform function.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( key, value ) { return key + value; };\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverseBy( obj, transform )\n    { 'abeep': 'a', 'bboop': 'b' }\n\n    // Duplicate values:\n    > function transform( key, value ) { return value; };\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverseBy( obj, transform )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverseBy( obj, { 'duplicates': false }, transform )\n    { 'beep': 'c', 'boop': 'b' }\n\n    See Also\n    --------\n    objectInverse\n",
	"objectValues": "\nobjectValues( obj )\n    Returns an array of an object's own enumerable property values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var vals = objectValues( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntries\n",
	"objectValuesIn": "\nobjectValuesIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var values = objectValuesIn( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntriesIn, keysIn, objectValues\n",
	"omit": "\nomit( obj, keys )\n    Returns a partial object copy excluding specified keys.\n\n    The function returns a shallow copy.\n\n    The function ignores non-existent keys.\n\n    The function only copies own properties. Hence, the function never copies\n    inherited properties.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to exclude.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = omit( obj1, 'b' )\n    { 'a': 1 }\n\n    See Also\n    --------\n    omitBy\n",
	"omitBy": "\nomitBy( obj, predicate )\n    Returns a partial object copy excluding properties for which a predicate\n    returns a truthy value.\n\n    The function returns a shallow copy.\n\n    The function only copies own properties. Hence, the function never copies\n    inherited properties.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) { return ( value > 1 ); };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = omitBy( obj1, predicate )\n    { 'a': 1 }\n\n    See Also\n    --------\n    omit\n",
	"openURL": "\nopenURL( url )\n    Opens a URL in a user's default browser.\n\n    In a non-browser environment, the function returns an unreferenced child\n    process. In a browser environment, the function returns a reference to a\n    `window` object.\n\n    Parameters\n    ----------\n    url: string\n        URL to open.\n\n    Returns\n    -------\n    out: process|Window\n        Child process or `window` object.\n\n    Examples\n    --------\n    > var out = openURL( 'https://google.com' );\n\n",
	"pad": "\npad( str, len[, options] )\n    Pads a `string` such that the padded `string` has length `len`.\n\n    Any padding which does not evenly divide available space is trimmed such\n    that the returned string length is always `len`.\n\n    If `len < str.length`, the input string is trimmed.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Output string length.\n\n    options: Object (optional)\n        Options.\n\n    options.lpad: string (optional)\n        String used to left pad.\n\n    options.rpad: string (optional)\n        String used to right pad.\n\n    options.centerRight: boolean (optional)\n        Boolean indicating whether to center right in the event of a tie.\n        Default: `false` (i.e., center left).\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = pad( 'a', 5 )\n    'a    '\n\n    // Left pad:\n    > out = pad( 'a', 10, { 'lpad': 'b' })\n    'bbbbbbbbba'\n\n    // Right pad:\n    > out = pad( 'a', 12, { 'rpad': 'b' })\n    'abbbbbbbbbbb'\n\n    // Center an input string:\n    > var opts = { 'lpad': 'a', 'rpad': 'c' };\n    > out = pad( 'b', 11, opts )\n    'aaaaabccccc'\n\n    // Left center:\n    > opts.centerRight = false;\n    > out = pad( 'b', 10, opts )\n    'aaaabccccc'\n\n    // Right center:\n    > opts.centerRight = true;\n    > out = pad( 'b', 10, opts )\n    'aaaaabcccc'\n\n    // Output string always length `len`:\n    > opts = { 'lpad': 'boop', 'rpad': 'woot' };\n    > out = pad( 'beep', 10, opts )\n    'boobeepwoo'\n\n    // Pad right, trim right:\n    > out = pad( 'beep', 2 )\n    'be'\n\n    // Pad left, trim left:\n    > opts = { 'lpad': 'b' };\n    > out = pad( 'beep', 2, opts )\n    'ep'\n\n    // Pad both, trim both:\n    > opts = { 'lpad': '@', 'rpad': '!' };\n    > out = pad( 'beep', 2, opts )\n    'ee'\n\n    // Pad both, trim both starting from left:\n    > out = pad( 'abcdef', 3, opts )\n    'cde'\n\n    // Pad both, trim both starting from right:\n    > opts.centerRight = true;\n    > out = pad( 'abcdef', 3, opts )\n    'bcd'\n\n    See Also\n    --------\n    lpad, rpad\n",
	"papply": "\npapply( fcn, ...args )\n    Returns a function of smaller arity by partially applying arguments.\n\n    The implementation does not set the `length` property of the returned\n    function. Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to partially apply.\n\n    args: ...any\n        Arguments to partially apply.\n\n    Returns\n    -------\n    out: Function\n        Partially applied function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var add2 = papply( add, 2 );\n    > var sum = add2( 3 )\n    5\n\n    See Also\n    --------\n    papplyRight\n",
	"papplyRight": "\npapplyRight( fcn, ...args )\n    Returns a function of smaller arity by partially applying arguments from the\n    right.\n\n    The implementation does not set the `length` property of the returned\n    function. Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to partially apply.\n\n    args: ...any\n        Arguments to partially apply.\n\n    Returns\n    -------\n    out: Function\n        Partially applied function.\n\n    Examples\n    --------\n    > function say( text, name ) { return text + ', ' + name + '.'; };\n    > var toGrace = papplyRight( say, 'Grace Hopper' );\n    > var str = toGrace( 'Hello' )\n    'Hello, Grace Hopper.'\n    > str = toGrace( 'Thank you' )\n    'Thank you, Grace Hopper.'\n\n    See Also\n    --------\n    papply\n",
	"parallel": "\nparallel( files, [options,] clbk )\n    Executes scripts in parallel.\n\n    Relative file paths are resolved relative to the current working directory.\n\n    Ordered script output does not imply that scripts are executed in order. To\n    preserve script order, execute the scripts sequentially via some other\n    means.\n\n    Parameters\n    ----------\n    files: Array<string>\n        Script file paths.\n\n    options: Object (optional)\n        Options.\n\n    options.cmd: string (optional)\n        Executable file/command. Default: `'node'`.\n\n    options.concurrency: integer (optional)\n        Number of scripts to execute concurrently. Script concurrency cannot\n        exceed the number of scripts. By specifying a concurrency greater than\n        the number of workers, a worker may be executing more than `1` script at\n        any one time. While not likely to be advantageous for synchronous\n        scripts, setting a higher concurrency may be advantageous for scripts\n        performing asynchronous tasks. If the script concurrency is less than\n        the number of workers, the number of workers is reduced to match the\n        specified concurrency. Default: `options.workers`.\n\n    options.workers: integer (optional)\n        Number of workers. Default: number of CPUs minus `1`.\n\n    options.ordered: boolean (optional)\n        Boolean indicating whether to preserve the order of script output. By\n        default, the `stdio` output for each script is interleaved; i.e., the\n        `stdio` output from one script may be interleaved with the `stdio`\n        output from one or more other scripts. To preserve the `stdio` output\n        order for each script, set the `ordered` option to `true`. Default:\n        `false`.\n\n    options.uid: integer (optional)\n        Process user identity.\n\n    options.gid: integer (optional)\n        Process group identity.\n\n    options.maxBuffer: integer (optional)\n        Max child process `stdio` buffer size. This option is only applied when\n        `options.ordered = true`. Default: `200*1024*1024`.\n\n    clbk: Function\n        Callback to invoke after executing all scripts.\n\n    Examples\n    --------\n    > function done( error ) { if ( error ) { throw error; } };\n    > var files = [ './a.js', './b.js' ];\n    > parallel( files, done );\n\n    // Specify the number of workers:\n    > var opts = { 'workers': 8 };\n    > parallel( files, opts, done );\n\n",
	"parseJSON": "\nparseJSON( str[, reviver] )\n    Attempts to parse a string as JSON.\n\n    Function behavior differs from `JSON.parse()` as follows:\n\n    - throws a `TypeError` if provided any value which is not a string.\n    - throws a `TypeError` if provided a `reviver` argument which is not a\n      function.\n    - returns, rather than throws, a `SyntaxError` if unable to parse a string\n      as JSON.\n\n    Parameters\n    ----------\n    str: string\n        String to parse.\n\n    reviver: Function\n        Transformation function.\n\n    Returns\n    -------\n    out: any|Error\n        Parsed value or an error.\n\n    Examples\n    --------\n    > var obj = parseJSON( '{\"beep\":\"boop\"}' )\n    { 'beep': 'boop' }\n\n    // Provide a reviver:\n    > function reviver( key, value ) {\n    ...     if ( key === '' ) { return value; }\n    ...     if ( key === 'beep' ) { return value; }\n    ... };\n    > var str = '{\"beep\":\"boop\",\"a\":\"b\"}';\n    > var out = parseJSON( str, reviver )\n    { 'beep': 'boop' }\n\n",
	"PATH_DELIMITER": "\nPATH_DELIMITER\n    Platform-specific path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER\n    <string>\n\n    // POSIX environment:\n    > var path = '/usr/bin:/bin:/usr/sbin';\n    > var parts = path.split( PATH_DELIMITER )\n    [ '/usr/bin', '/bin', '/usr/sbin' ]\n\n    // Windows environment:\n    > path = 'C:\\\\Windows\\\\system32;C:\\\\Windows';\n    > parts = path.split( PATH_DELIMITER )\n    [ 'C:\\\\Windows\\system32', 'C:\\\\Windows' ]\n\n    See Also\n    --------\n    PATH_DELIMITER_POSIX, PATH_DELIMITER_WIN32\n",
	"PATH_DELIMITER_POSIX": "\nPATH_DELIMITER_POSIX\n    POSIX path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_POSIX\n    ':'\n    > var PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n    > var paths = PATH.split( PATH_DELIMITER_POSIX )\n    [ '/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_WIN32\n",
	"PATH_DELIMITER_WIN32": "\nPATH_DELIMITER_WIN32\n    Windows path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_WIN32\n    ';'\n    > var PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n    > var paths = PATH.split( PATH_DELIMITER_WIN32 )\n    [ 'C:\\\\Windows\\\\system32', 'C:\\\\Windows', 'C:\\\\Program Files\\\\node\\\\' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_POSIX\n",
	"PATH_SEP": "\nPATH_SEP\n    Platform-specific path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP\n    <string>\n\n    // Windows environment:\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    // POSIX environment:\n    > parts = 'foo/bar/baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP_POSIX, PATH_SEP_WIN32\n",
	"PATH_SEP_POSIX": "\nPATH_SEP_POSIX\n    POSIX path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_POSIX\n    '/'\n    > var parts = 'foo/bar/baz'.split( PATH_SEP_POSIX )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_WIN32\n",
	"PATH_SEP_WIN32": "\nPATH_SEP_WIN32\n    Windows path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_WIN32\n    '\\\\'\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_POSIX\n",
	"pcorrtest": "\npcorrtest( x, y[, options] )\n    Computes a Pearson product-moment correlation test between paired samples.\n\n    By default, the function performs a t-test for the null hypothesis that the\n    data in arrays or typed arrays `x` and `y` is not correlated. A test against\n    a different population correlation can be carried out by supplying the `rho`\n    option. In this case, a test using the Fisher's z transform is conducted.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Nnumber in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.rho: number (optional)\n        Number denoting the correlation under the null hypothesis.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number.\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the Pearson product-moment correlation\n        coefficient. The confidence interval is calculated using Fisher's\n        z-transform.\n\n    out.nullValue: number\n        Assumed correlation under H0 (equal to the supplied `rho` option).\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var rho = 0.5;\n    > var x = new Array( 300 );\n    > var y = new Array( 300 );\n    > for ( var i = 0; i < 300; i++ ) {\n    ...    x[ i ] = base.random.normal( 0.0, 1.0 );\n    ...    y[ i ] = ( rho * x[ i ] ) + base.random.normal( 0.0, base.sqrt( 1.0 - (rho*rho) ) );\n    ... }\n    > var out = pcorrtest( x, y )\n    {\n        alpha: 0.05,\n        rejected: true,\n        pValue: 0,\n        statistic: 10.115805615994121,\n        ci: [ 0.4161679018930295, 0.5853122968949995 ],\n        alternative: 'two-sided',\n        method: 't-test for Pearson correlation coefficient',\n        nullValue: 0,\n        pcorr: 0.505582072355616,\n    }\n\n    // Print output:\n    > var table = out.print()\n    t-test for Pearson correlation coefficient\n\n    Alternative hypothesis: True correlation coefficient is not equal to 0\n\n        pValue: 0\n        statistic: 9.2106\n        95% confidence interval: [0.3776,0.5544]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n",
	"percentEncode": "\npercentEncode( str )\n    Percent-encodes a UTF-16 encoded string according to RFC 3986.\n\n    Parameters\n    ----------\n    str: string\n        UTF-16 encoded string.\n\n    Returns\n    -------\n    out: string\n        Percent-encoded string.\n\n    Examples\n    --------\n    > var out = percentEncode( '☃' )\n    '%E2%98%83'\n\n",
	"PHI": "\nPHI\n    Golden ratio.\n\n    Examples\n    --------\n    > PHI\n    1.618033988749895\n\n",
	"PI": "\nPI\n    The mathematical constant `π`.\n\n    Examples\n    --------\n    > PI\n    3.141592653589793\n\n    See Also\n    --------\n    TWO_PI\n",
	"PI_SQUARED": "\nPI_SQUARED\n    Square of the mathematical constant `π`.\n\n    Examples\n    --------\n    > PI_SQUARED\n    9.869604401089358\n\n    See Also\n    --------\n    PI\n",
	"pick": "\npick( obj, keys )\n    Returns a partial object copy containing only specified keys.\n\n    If a key does not exist as an own property in a source object, the key is\n    ignored.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to copy.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pick( obj1, 'b' )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pickBy\n",
	"pickBy": "\npickBy( obj, predicate )\n    Returns a partial object copy containing properties for which a predicate\n    returns a truthy value.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) {\n    ...     return ( value > 1 );\n    ... };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pickBy( obj1, predicate )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pick\n",
	"PINF": "\nPINF\n    Double-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > PINF\n    Infinity\n\n    See Also\n    --------\n    NINF\n",
	"PLATFORM": "\nPLATFORM\n    Platform on which the current process is running.\n\n    Possible values:\n\n    - win32\n    - darwin\n    - linux\n    - freebsd\n    - sunos\n\n    Examples\n    --------\n    > PLATFORM\n    <string>\n\n    See Also\n    --------\n    ARCH\n",
	"plot": "\nplot( [x, y,] [options] )\n    Returns a plot instance for creating 2-dimensional plots.\n\n    `x` and `y` arguments take precedence over `x` and `y` options.\n\n    Parameters\n    ----------\n    x: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing x-coordinate values.\n\n    y: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing y-coordinate values.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.autoView: boolean (optional)\n        Boolean indicating whether to generate an updated view on a 'render'\n        event. Default: false.\n\n    options.colors: string|Array<string> (optional)\n        Data color(s). Default: 'category10'.\n\n    options.description: string (optional)\n        Plot description.\n\n    options.engine: string (optional)\n        Plot engine. Default: 'svg'.\n\n    options.height: number (optional)\n        Plot height (in pixels). Default: 400.\n\n    options.labels: Array|Array<string> (optional)\n        Data labels.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.lineStyle: string|Array<string> (optional)\n        Data line style(s). Must be one of: '-', '--', ':', '-.', or 'none'.\n        Default: '-'.\n\n    options.lineOpacity: number|Array<number> (optional)\n        Data line opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.lineWidth: integer|Array<integer> (optional)\n        Data line width (in pixels). Default: 2.\n\n    options.paddingBottom: integer (optional)\n        Bottom padding (in pixels). Default: 80.\n\n    options.paddingLeft: integer (optional)\n        Left padding (in pixels). Default: 90.\n\n    options.paddingRight: integer (optional)\n        Right padding (in pixels). Default: 20.\n\n    options.paddingTop: integer (optional)\n        Top padding (in pixels). Default: 80.\n\n    options.renderFormat: string (optional)\n        Plot render format. Must be one of 'vdom' or 'html'. Default: 'vdom'.\n\n    options.symbols: string|Array<string> (optional)\n        Data symbols. Must be one of 'closed-circle', 'open-circle', or 'none'.\n        Default: 'none'.\n\n    options.symbolsOpacity: number|Array<number> (optional)\n        Symbols opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.symbolsSize: integer|Array<integer> (optional)\n        Symbols size (in pixels). Default: 6.\n\n    options.title: string (optional)\n        Plot title.\n\n    options.viewer: string (optional)\n        Plot viewer. Must be one of 'browser', 'terminal', 'stdout', 'window',\n        or 'none'. Default: 'none'.\n\n    options.width: number (optional)\n        Plot width (in pixels). Default: 400.\n\n    options.x: Array<Array>|Array<TypedArray> (optional)\n        x-coordinate values.\n\n    options.xAxisOrient: string (optional)\n        x-axis orientation. Must be either 'bottom' or 'top'. Default: 'bottom'.\n\n    options.xLabel: string (optional)\n        x-axis label. Default: 'x'.\n\n    options.xMax: number|null (optional)\n        Maximum value of the x-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.xMin: number|null (optional)\n        Minimum value of the x-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.xNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.xRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the x-axis.\n\n    options.xRugOrient: string|Array<string> (optional)\n        x-axis rug plot orientation(s). Must be either 'bottom' or 'top'.\n        Default: 'bottom'.\n\n    options.xRugOpacity: number|Array<number> (optional)\n       x-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.xRugSize: integer|Array<integer> (optional)\n       x-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.xScale: string\n       x-axis scale. Default: 'linear'.\n\n    options.xTickFormat: string|null\n       x-axis tick format. Default: null.\n\n    options.y: Array<Array>|Array<TypedArray> (optional)\n        y-coordinate values.\n\n    options.yAxisOrient: string (optional)\n        x-axis orientation. Must be either 'left' or 'right'. Default: 'left'.\n\n    options.yLabel: string (optional)\n        y-axis label. Default: 'y'.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.yNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.yRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the y-axis.\n\n    options.yRugOrient: string|Array<string> (optional)\n        y-axis rug plot orientation(s). Must be either 'left' or 'right'.\n        Default: 'left'.\n\n    options.yRugOpacity: number|Array<number> (optional)\n       y-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.yRugSize: integer|Array<integer> (optional)\n       y-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.yScale: string\n       y-axis scale. Default: 'linear'.\n\n    options.yTickFormat: string|null\n       y-axis tick format. Default: null.\n\n    Returns\n    -------\n    plot: Plot\n        Plot instance.\n\n    plot.render()\n        Renders a plot as a virtual DOM tree.\n\n    plot.view( [viewer] )\n        Generates a plot view.\n\n    plot.x\n        x-coordinate values. An assigned value must be an array where each\n        element corresponds to a plotted dataset.\n\n    plot.y\n        y-coordinate values. An assigned value must be an array, where each\n        element corresponds to a plotted dataset.\n\n    plot.labels\n        Data labels. During plot creation, each plotted dataset is assigned a\n        label. If the number of labels is less than the number of plotted\n        datasets, labels are reused using modulo arithmetic.\n\n    plot.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    plot.colors\n        Data colors. To set the color all plotted datasets, provide a color\n        name. To specify the colors for each dataset, provide an array of\n        colors. During plot creation, each plotted dataset is assigned one of\n        the provided colors. If the number of colors is less than the number of\n        plotted datasets, colors are reused using modulo arithmetic. Lastly,\n        colors may also be specified by providing the name of a predefined color\n        scheme. The following schemes are supported: 'category10', 'category20',\n        'category20b', and 'category20c'.\n\n    plot.lineStyle\n        Data line style(s). The following line styles are supported: '-' (solid\n        line), '--' (dashed line), ':' (dotted line), '-.' (alternating dashes\n        and dots), and 'none' (no line). To specify the line style for each\n        dataset, provide an array of line styles. During plot creation, each\n        plotted dataset is assigned a line style. If the number of line styles\n        is less than the number of plotted datasets, line styles are reused\n        using modulo arithmetic.\n\n    plot.lineOpacity\n        Data line opacity, where an opacity of `0.0` make a line completely\n        transparent and an opacity of `1.0` makes a line completely opaque. To\n        specify the line opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.lineWidth\n        Data line width(s). To specify the line width for each dataset, provide\n        an array of widths. During plot creation, each plotted dataset is\n        assigned a line width. If the number of line widths is less than the\n        number of plotted datasets, line widths are reused using modulo\n        arithmetic.\n\n    plot.symbols\n        Data symbols. The following symbols are supported: 'closed-circle'\n        (closed circles), 'open-circle' (open circles), and 'none' (no symbols).\n        To specify the symbols used for each dataset, provide an array of\n        symbols. During plot creation, each plotted dataset is assigned a\n        symbol. If the number of symbols is less than the number of plotted\n        datasets, symbols are reused using modulo arithmetic.\n\n    plot.symbolSize\n        Symbols size. To specify the symbols size for each dataset, provide an\n        array of sizes. During plot creation, each plotted dataset is assigned\n        a symbols size. If the number of sizes is less than the number of\n        plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.symbolsOpacity\n        Symbols opacity, where an opacity of `0.0` makes a symbol completely\n        transparent and an opacity of `1.0` makes a symbol completely opaque. To\n        specify the opacity for each dataset, provide an array of opacities.\n        During plot creation, each plotted dataset is assigned an opacity. If\n        the number of opacities is less than the number of plotted datasets,\n        opacities are reused using modulo arithmetic.\n\n    plot.width\n        Plot width (in pixels).\n\n    plot.height\n        Plot height (in pixels).\n\n    plot.paddingLeft\n        Plot left padding (in pixels). Left padding is typically used to create\n        space for a left-oriented y-axis.\n\n    plot.paddingRight\n        Plot right padding (in pixels). Right padding is typically used to\n        create space for a right-oriented y-axis.\n\n    plot.paddingTop\n        Plot top padding (in pixels). Top padding is typically used to create\n        space for a title or top-oriented x-axis.\n\n    plot.paddingBottom\n        Plot bottom padding (in pixels). Bottom padding is typically used to\n        create space for a bottom-oriented x-axis.\n\n    plot.xMin\n        Minimum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.xMax\n        Maximum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.yMin\n        Minimum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.yMax\n        Maximum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.xScale\n        Scale function for mapping values to a coordinate along the x-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.yScale\n        Scale function for mapping values to a coordinate along the y-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.xTickFormat\n        x-axis tick format (e.g., '%H:%M'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.yTickFormat\n        y-axis tick format (e.g., '%%'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.xNumTicks\n        Number of x-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.yNumTicks\n        Number of y-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.xAxisOrient\n        x-axis orientation. The following orientations are supported: 'bottom'\n        and 'top'.\n\n    plot.yAxisOrient\n        y-axis orientation. The following orientations are supported: 'left' and\n        'right'.\n\n    plot.xRug\n        Boolean flag(s) indicating whether to display a rug plot along the x-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.yRug\n        Boolean flag(s) indicating whether to display a rug plot along the y-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.xRugOrient\n        x-axis rug orientation. The following orientations are supported:\n        'bottom' or 'top'. To specify the x-axis rug orientation for each\n        dataset, provide an array of orientations. During plot creation, each\n        plotted dataset is assigned an orientation. If the number of\n        orientations is less than the number of plotted datasets, orientations\n        are reused using modulo arithmetic.\n\n    plot.yRugOrient\n        y-axis rug orientation. The following orientations are supported: 'left'\n        or 'right'. To specify the y-axis rug orientation for each dataset,\n        provide an array of orientations. During plot creation, each plotted\n        dataset is assigned an orientation. If the number of orientations is\n        less than the number of plotted datasets, orientations are reused using\n        modulo arithmetic.\n\n    plot.xRugOpacity\n        x-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the x-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.yRugOpacity\n        y-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the y-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.xRugSize\n        x-axis rug tick (tassel) size. To specify the x-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.yRugSize\n        y-axis rug tick (tassel) size. To specify the y-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.description\n        Plot description.\n\n    plot.title\n        Plot title.\n\n    plot.xLabel\n        x-axis label.\n\n    plot.yLabel\n        y-axis label.\n\n    plot.engine\n        Plot rendering engine. The following engines are supported: 'svg'.\n\n    plot.renderFormat\n        Plot render format. The following formats are supported: 'vdom' and\n        'html'.\n\n    plot.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    plot.viewer\n        Plot viewer. The following viewers are supported: 'none', 'stdout',\n        'window', and 'browser'.\n\n    plot.autoView\n        Viewer mode. If `true`, an instance generates an updated view on each\n        'render' event; otherwise, generating a view must be triggered manually.\n\n    plot.graphWidth\n        Computed property corresponding to the expected graph width.\n\n    plot.graphHeight\n        Computed property corresponding to the expected graph height.\n\n    plot.xDomain\n        Computed property corresponding to the x-axis domain.\n\n    plot.yDomain\n        Computed property corresponding to the y-axis domain.\n\n    plot.xRange\n        Computed property corresponding to the x-axis range.\n\n    plot.yRange\n        Computed property correspond to the y-axis range.\n\n    plot.xPos\n        A function which maps values to x-axis coordinate values.\n\n    plot.yPos\n        A function which maps values to y-axis coordinate values.\n\n    Examples\n    --------\n    > var plot = plot()\n    <Plot>\n\n    // Provide plot data at instantiation:\n    > var x = [[0.10, 0.20, 0.30]];\n    > var y = [[0.52, 0.79, 0.64]];\n    > plot = plot( x, y )\n    <Plot>\n\n    See Also\n    --------\n    Plot\n",
	"Plot": "\nPlot( [x, y,] [options] )\n    Returns a plot instance for creating 2-dimensional plots.\n\n    `x` and `y` arguments take precedence over `x` and `y` options.\n\n    Parameters\n    ----------\n    x: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing x-coordinate values.\n\n    y: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing y-coordinate values.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.autoView: boolean (optional)\n        Boolean indicating whether to generate an updated view on a 'render'\n        event. Default: false.\n\n    options.colors: string|Array<string> (optional)\n        Data color(s). Default: 'category10'.\n\n    options.description: string (optional)\n        Plot description.\n\n    options.engine: string (optional)\n        Plot engine. Default: 'svg'.\n\n    options.height: number (optional)\n        Plot height (in pixels). Default: 400.\n\n    options.labels: Array|Array<string> (optional)\n        Data labels.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.lineStyle: string|Array<string> (optional)\n        Data line style(s). Must be one of: '-', '--', ':', '-.', or 'none'.\n        Default: '-'.\n\n    options.lineOpacity: number|Array<number> (optional)\n        Data line opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.lineWidth: integer|Array<integer> (optional)\n        Data line width (in pixels). Default: 2.\n\n    options.paddingBottom: integer (optional)\n        Bottom padding (in pixels). Default: 80.\n\n    options.paddingLeft: integer (optional)\n        Left padding (in pixels). Default: 90.\n\n    options.paddingRight: integer (optional)\n        Right padding (in pixels). Default: 20.\n\n    options.paddingTop: integer (optional)\n        Top padding (in pixels). Default: 80.\n\n    options.renderFormat: string (optional)\n        Plot render format. Must be one of 'vdom' or 'html'. Default: 'vdom'.\n\n    options.symbols: string|Array<string> (optional)\n        Data symbols. Must be one of 'closed-circle', 'open-circle', or 'none'.\n        Default: 'none'.\n\n    options.symbolsOpacity: number|Array<number> (optional)\n        Symbols opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.symbolsSize: integer|Array<integer> (optional)\n        Symbols size (in pixels). Default: 6.\n\n    options.title: string (optional)\n        Plot title.\n\n    options.viewer: string (optional)\n        Plot viewer. Must be one of 'browser', 'terminal', 'stdout', 'window',\n        or 'none'. Default: 'none'.\n\n    options.width: number (optional)\n        Plot width (in pixels). Default: 400.\n\n    options.x: Array<Array>|Array<TypedArray> (optional)\n        x-coordinate values.\n\n    options.xAxisOrient: string (optional)\n        x-axis orientation. Must be either 'bottom' or 'top'. Default: 'bottom'.\n\n    options.xLabel: string (optional)\n        x-axis label. Default: 'x'.\n\n    options.xMax: number|null (optional)\n        Maximum value of the x-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.xMin: number|null (optional)\n        Minimum value of the x-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.xNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.xRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the x-axis.\n\n    options.xRugOrient: string|Array<string> (optional)\n        x-axis rug plot orientation(s). Must be either 'bottom' or 'top'.\n        Default: 'bottom'.\n\n    options.xRugOpacity: number|Array<number> (optional)\n       x-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.xRugSize: integer|Array<integer> (optional)\n       x-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.xScale: string\n       x-axis scale. Default: 'linear'.\n\n    options.xTickFormat: string|null\n       x-axis tick format. Default: null.\n\n    options.y: Array<Array>|Array<TypedArray> (optional)\n        y-coordinate values.\n\n    options.yAxisOrient: string (optional)\n        x-axis orientation. Must be either 'left' or 'right'. Default: 'left'.\n\n    options.yLabel: string (optional)\n        y-axis label. Default: 'y'.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.yNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.yRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the y-axis.\n\n    options.yRugOrient: string|Array<string> (optional)\n        y-axis rug plot orientation(s). Must be either 'left' or 'right'.\n        Default: 'left'.\n\n    options.yRugOpacity: number|Array<number> (optional)\n       y-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.yRugSize: integer|Array<integer> (optional)\n       y-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.yScale: string\n       y-axis scale. Default: 'linear'.\n\n    options.yTickFormat: string|null\n       y-axis tick format. Default: null.\n\n    Returns\n    -------\n    plot: Plot\n        Plot instance.\n\n    plot.render()\n        Renders a plot as a virtual DOM tree.\n\n    plot.view( [viewer] )\n        Generates a plot view.\n\n    plot.x\n        x-coordinate values. An assigned value must be an array where each\n        element corresponds to a plotted dataset.\n\n    plot.y\n        y-coordinate values. An assigned value must be an array, where each\n        element corresponds to a plotted dataset.\n\n    plot.labels\n        Data labels. During plot creation, each plotted dataset is assigned a\n        label. If the number of labels is less than the number of plotted\n        datasets, labels are reused using modulo arithmetic.\n\n    plot.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    plot.colors\n        Data colors. To set the color all plotted datasets, provide a color\n        name. To specify the colors for each dataset, provide an array of\n        colors. During plot creation, each plotted dataset is assigned one of\n        the provided colors. If the number of colors is less than the number of\n        plotted datasets, colors are reused using modulo arithmetic. Lastly,\n        colors may also be specified by providing the name of a predefined color\n        scheme. The following schemes are supported: 'category10', 'category20',\n        'category20b', and 'category20c'.\n\n    plot.lineStyle\n        Data line style(s). The following line styles are supported: '-' (solid\n        line), '--' (dashed line), ':' (dotted line), '-.' (alternating dashes\n        and dots), and 'none' (no line). To specify the line style for each\n        dataset, provide an array of line styles. During plot creation, each\n        plotted dataset is assigned a line style. If the number of line styles\n        is less than the number of plotted datasets, line styles are reused\n        using modulo arithmetic.\n\n    plot.lineOpacity\n        Data line opacity, where an opacity of `0.0` make a line completely\n        transparent and an opacity of `1.0` makes a line completely opaque. To\n        specify the line opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.lineWidth\n        Data line width(s). To specify the line width for each dataset, provide\n        an array of widths. During plot creation, each plotted dataset is\n        assigned a line width. If the number of line widths is less than the\n        number of plotted datasets, line widths are reused using modulo\n        arithmetic.\n\n    plot.symbols\n        Data symbols. The following symbols are supported: 'closed-circle'\n        (closed circles), 'open-circle' (open circles), and 'none' (no symbols).\n        To specify the symbols used for each dataset, provide an array of\n        symbols. During plot creation, each plotted dataset is assigned a\n        symbol. If the number of symbols is less than the number of plotted\n        datasets, symbols are reused using modulo arithmetic.\n\n    plot.symbolSize\n        Symbols size. To specify the symbols size for each dataset, provide an\n        array of sizes. During plot creation, each plotted dataset is assigned\n        a symbols size. If the number of sizes is less than the number of\n        plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.symbolsOpacity\n        Symbols opacity, where an opacity of `0.0` makes a symbol completely\n        transparent and an opacity of `1.0` makes a symbol completely opaque. To\n        specify the opacity for each dataset, provide an array of opacities.\n        During plot creation, each plotted dataset is assigned an opacity. If\n        the number of opacities is less than the number of plotted datasets,\n        opacities are reused using modulo arithmetic.\n\n    plot.width\n        Plot width (in pixels).\n\n    plot.height\n        Plot height (in pixels).\n\n    plot.paddingLeft\n        Plot left padding (in pixels). Left padding is typically used to create\n        space for a left-oriented y-axis.\n\n    plot.paddingRight\n        Plot right padding (in pixels). Right padding is typically used to\n        create space for a right-oriented y-axis.\n\n    plot.paddingTop\n        Plot top padding (in pixels). Top padding is typically used to create\n        space for a title or top-oriented x-axis.\n\n    plot.paddingBottom\n        Plot bottom padding (in pixels). Bottom padding is typically used to\n        create space for a bottom-oriented x-axis.\n\n    plot.xMin\n        Minimum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.xMax\n        Maximum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.yMin\n        Minimum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.yMax\n        Maximum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.xScale\n        Scale function for mapping values to a coordinate along the x-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.yScale\n        Scale function for mapping values to a coordinate along the y-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.xTickFormat\n        x-axis tick format (e.g., '%H:%M'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.yTickFormat\n        y-axis tick format (e.g., '%%'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.xNumTicks\n        Number of x-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.yNumTicks\n        Number of y-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.xAxisOrient\n        x-axis orientation. The following orientations are supported: 'bottom'\n        and 'top'.\n\n    plot.yAxisOrient\n        y-axis orientation. The following orientations are supported: 'left' and\n        'right'.\n\n    plot.xRug\n        Boolean flag(s) indicating whether to display a rug plot along the x-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.yRug\n        Boolean flag(s) indicating whether to display a rug plot along the y-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.xRugOrient\n        x-axis rug orientation. The following orientations are supported:\n        'bottom' or 'top'. To specify the x-axis rug orientation for each\n        dataset, provide an array of orientations. During plot creation, each\n        plotted dataset is assigned an orientation. If the number of\n        orientations is less than the number of plotted datasets, orientations\n        are reused using modulo arithmetic.\n\n    plot.yRugOrient\n        y-axis rug orientation. The following orientations are supported: 'left'\n        or 'right'. To specify the y-axis rug orientation for each dataset,\n        provide an array of orientations. During plot creation, each plotted\n        dataset is assigned an orientation. If the number of orientations is\n        less than the number of plotted datasets, orientations are reused using\n        modulo arithmetic.\n\n    plot.xRugOpacity\n        x-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the x-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.yRugOpacity\n        y-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the y-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.xRugSize\n        x-axis rug tick (tassel) size. To specify the x-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.yRugSize\n        y-axis rug tick (tassel) size. To specify the y-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.description\n        Plot description.\n\n    plot.title\n        Plot title.\n\n    plot.xLabel\n        x-axis label.\n\n    plot.yLabel\n        y-axis label.\n\n    plot.engine\n        Plot rendering engine. The following engines are supported: 'svg'.\n\n    plot.renderFormat\n        Plot render format. The following formats are supported: 'vdom' and\n        'html'.\n\n    plot.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    plot.viewer\n        Plot viewer. The following viewers are supported: 'none', 'stdout',\n        'window', and 'browser'.\n\n    plot.autoView\n        Viewer mode. If `true`, an instance generates an updated view on each\n        'render' event; otherwise, generating a view must be triggered manually.\n\n    plot.graphWidth\n        Computed property corresponding to the expected graph width.\n\n    plot.graphHeight\n        Computed property corresponding to the expected graph height.\n\n    plot.xDomain\n        Computed property corresponding to the x-axis domain.\n\n    plot.yDomain\n        Computed property corresponding to the y-axis domain.\n\n    plot.xRange\n        Computed property corresponding to the x-axis range.\n\n    plot.yRange\n        Computed property correspond to the y-axis range.\n\n    plot.xPos\n        A function which maps values to x-axis coordinate values.\n\n    plot.yPos\n        A function which maps values to y-axis coordinate values.\n\n    Examples\n    --------\n    > var plot = Plot()\n    <Plot>\n\n    // Provide plot data at instantiation:\n    > var x = [[0.10, 0.20, 0.30]];\n    > var y = [[0.52, 0.79, 0.64]];\n    > plot = Plot( x, y )\n    <Plot>\n\n    See Also\n    --------\n    plot\n",
	"pluck": "\npluck( arr, prop[, options] )\n    Extracts a property value from each element of an object array.\n\n    The function skips `null` and `undefined` array elements.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    prop: string\n        Property to access.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. To mutate the\n        input data structure (e.g., when input values can be discarded or when\n        optimizing memory usage), set the `copy` option to `false`. Default:\n        true.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    ...     { 'a': 1, 'b': 2 },\n    ...     { 'a': 0.5, 'b': 3 }\n    ... ];\n    > var out = pluck( arr, 'a' )\n    [ 1, 0.5 ]\n\n    > arr = [\n    ...     { 'a': 1, 'b': 2 },\n    ...     { 'a': 0.5, 'b': 3 }\n    ... ];\n    > out = pluck( arr, 'a', { 'copy': false } )\n    [ 1, 0.5 ]\n    > var bool = ( arr[ 0 ] === out[ 0 ] )\n    true\n\n    See Also\n    --------\n    deepPluck, pick\n",
	"pop": "\npop( collection )\n    Removes and returns the last element of a collection.\n\n    The function returns an array with two elements: the shortened collection\n    and the removed element.\n\n    If the input collection is a typed array whose length is greater than `0`,\n    the first return value does not equal the input reference.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the value should be\n        array-like.\n\n    Returns\n    -------\n    out: Array\n        Updated collection and the removed item.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var out = pop( arr )\n    [ [ 1.0, 2.0, 3.0, 4.0 ], 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > out = pop( arr )\n    [ <Float64Array>[ 1.0 ], 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 2, '0': 1.0, '1': 2.0 };\n    > out = pop( arr )\n    [ { 'length': 1, '0': 1.0 }, 2.0 ]\n\n    See Also\n    --------\n    push, shift, unshift\n",
	"prepend": "\nprepend( collection1, collection2 )\n    Adds the elements of one collection to the beginning of another collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection1: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    collection2: Array|TypedArray|Object\n        A collection containing the elements to add. If the collection is an\n        `Object`, the collection should be array-like.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = prepend( arr, [ 6.0, 7.0 ] )\n    [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = prepend( arr, [ 3.0, 4.0 ] )\n    <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 1, '0': 1.0 };\n    > arr = prepend( arr, [ 2.0, 3.0 ] )\n    { 'length': 3, '0': 2.0, '1': 3.0, '2': 1.0 }\n\n    See Also\n    --------\n    append, unshift\n",
	"push": "\npush( collection, ...items )\n    Adds one or more elements to the end of a collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    items: ...any\n        Items to add.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = push( arr, 6.0, 7.0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = push( arr, 3.0, 4.0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 0 };\n    > arr = push( arr, 1.0, 2.0 )\n    { 'length': 2, '0': 1.0, '1': 2.0 }\n\n    See Also\n    --------\n    pop, shift, unshift\n",
	"quarterOfYear": "\nquarterOfYear( [month] )\n    Returns the quarter of the year.\n\n    By default, the function returns the quarter of the year for the current\n    month in the current year (according to local time). To determine the\n    quarter for a particular month, provide either a month or a `Date`\n    object.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    Parameters\n    ----------\n    month: integer|string|Date (optional)\n        Month (or `Date`).\n\n    Returns\n    -------\n    out: integer\n        Quarter of the year.\n\n    Examples\n    --------\n    > var q = quarterOfYear( new Date() )\n    <number>\n    > q = quarterOfYear( 4 )\n    2\n    > q = quarterOfYear( 'June' )\n    2\n\n    // Other ways to supply month:\n    > q = quarterOfYear( 'April' )\n    2\n    > q = quarterOfYear( 'apr' )\n    2\n\n    See Also\n    --------\n    dayOfYear\n",
	"readDir": "\nreadDir( path, clbk )\n    Asynchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    clbk: Function\n        Callback to invoke after reading directory contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readDir( './beep/boop', onRead );\n\n\nreadDir.sync( path )\n    Synchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        Directory contents.\n\n    Examples\n    --------\n    > var out = readDir.sync( './beep/boop' );\n\n    See Also\n    --------\n    exists, readFile\n",
	"readFile": "\nreadFile( file[, options,] clbk )\n    Asynchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readFile( './beep/boop.js', onRead );\n\n\nreadFile.sync( file[, options] )\n    Synchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var out = readFile.sync( './beep/boop.js' );\n\n    See Also\n    --------\n    exists, readDir, readJSON, writeFile\n",
	"readFileList": "\nreadFileList( filepaths[, options,] clbk )\n    Asynchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Each file is represented by an object with the following fields:\n\n    - file: file path\n    - data: file contents as either a Buffer or string\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > readFileList( filepaths, onRead );\n\n\nreadFileList.sync( filepaths[, options] )\n    Synchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        File contents.\n\n    out[ i ].file: string\n        File path.\n\n    out[ i ].data: Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > var out = readFileList.sync( filepaths );\n\n",
	"readJSON": "\nreadJSON( file[, options,] clbk )\n    Asynchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readJSON( './beep/boop.json', onRead );\n\n\nreadJSON.sync( file[, options] )\n    Synchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    Returns\n    -------\n    out: Error|JSON\n        File contents.\n\n    Examples\n    --------\n    > var out = readJSON.sync( './beep/boop.json' );\n\n    See Also\n    --------\n    readFile\n",
	"readWASM": "\nreadWASM( file, [options,] clbk )\n    Asynchronously reads a file as WebAssembly.\n\n    The function returns file contents as a Uint8Array.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readWASM( './beep/boop.wasm', onRead );\n\n\nreadWASM.sync( file[, options] )\n    Synchronously reads a file as WebAssembly.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Uint8Array\n        File contents.\n\n    Examples\n    --------\n    > var out = readWASM.sync( './beep/boop.wasm' );\n\n    See Also\n    --------\n    readFile\n",
	"real": "\nreal( z )\n    Returns the real component of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    re: number\n        Real component.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var re = real( z )\n    5.0\n\n    See Also\n    --------\n    imag, reim\n",
	"realmax": "\nrealmax( dtype )\n    Returns the maximum finite value capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum finite value.\n\n    Examples\n    --------\n    > var m = realmax( 'float16' )\n    65504.0\n    > m = realmax( 'float32' )\n    3.4028234663852886e+38\n\n    See Also\n    --------\n    realmin, typemax\n",
	"realmin": "\nrealmin( dtype )\n    Returns the smallest positive normal value capable of being represented by a\n    numeric real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Smallest finite normal value.\n\n    Examples\n    --------\n    > var m = realmin( 'float16' )\n    0.00006103515625\n    > m = realmin( 'float32' )\n    1.1754943508222875e-38\n\n    See Also\n    --------\n    realmax, typemin\n",
	"reduce": "\nreduce( collection, initial, reducer[, thisArg] )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result.\n\n    When invoked, the reduction function is provided four arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, the function returns the initial value.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    reducer: Function\n        Function to invoke for each element in the input collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: any\n        Accumulated result.\n\n    Examples\n    --------\n    > function sum( acc, v ) { return acc + v; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = reduce( arr, 0, sum )\n    6.0\n\n    See Also\n    --------\n    forEach, reduceAsync, reduceRight\n",
	"reduceAsync": "\nreduceAsync( collection, initial, [options,] reducer, done )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result.\n\n    When invoked, `reducer` is provided a maximum of five arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If\n    `reducer` accepts three arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `next`\n\n    If `reducer` accepts four arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `reducer` signature, `reducer` is provided all five\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `accumulator`: accumulated value\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    If provided an empty collection, the function invokes the `done` callback\n    with the `initial` value as the second argument.\n\n    The function does not skip `undefined` elements.\n\n    When processing collection elements concurrently, *beware* of race\n    conditions when updating an accumulator. This is especially true when an\n    accumulator is a primitive (e.g., a number). In general, prefer object\n    accumulators.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, fcn, done )\n    3000\n    2500\n    1000\n    6500\n\n    // Limit number of concurrent invocations:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, opts, fcn, done )\n    2500\n    3000\n    1000\n    6500\n\n    // Process concurrently:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'series': false };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, opts, fcn, done )\n    1000\n    2500\n    3000\n    6500\n\n\nreduceAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachAsync, reduce, reduceRightAsync\n",
	"reduceRight": "\nreduceRight( collection, initial, reducer[, thisArg] )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result, iterating from right to left.\n\n    When invoked, the reduction function is provided four arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, the function returns the initial value.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    reducer: Function\n        Function to invoke for each element in the input collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: any\n        Accumulated result.\n\n    Examples\n    --------\n    > function sum( acc, v ) { console.log( '%s: %d', i, v ); return acc + v; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = reduceRight( arr, 0, sum )\n    2: 3.0\n    1: 2.0\n    0: 1.0\n    6.0\n\n    See Also\n    --------\n    forEachRight, reduce, reduceRightAsync\n",
	"reduceRightAsync": "\nreduceRightAsync( collection, initial, [options,] reducer, done )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result, iterating from right to left.\n\n    When invoked, `reducer` is provided a maximum of five arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If\n    `reducer` accepts three arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `next`\n\n    If `reducer` accepts four arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `reducer` signature, `reducer` is provided all five\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `accumulator`: accumulated value\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    If provided an empty collection, the function invokes the `done` callback\n    with the `initial` value as the second argument.\n\n    The function does not skip `undefined` elements.\n\n    When processing collection elements concurrently, *beware* of race\n    conditions when updating an accumulator. This is especially true when an\n    accumulator is a primitive (e.g., a number). In general, prefer object\n    accumulators.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, fcn, done )\n    3000\n    2500\n    1000\n    6500\n\n    // Limit number of concurrent invocations:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, opts, fcn, done )\n    2500\n    3000\n    1000\n    6500\n\n    // Process concurrently:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'series': false };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, opts, fcn, done )\n    1000\n    2500\n    3000\n    6500\n\n\nreduceRightAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result, iterating from\n    right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceRightAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachRightAsync, reduceAsync, reduceRight\n",
	"reFromString": "\nreFromString( str )\n    Parses a regular expression string and returns a new regular expression.\n\n    Provided strings should be properly escaped.\n\n    If unable to parse a string as a regular expression, the function returns\n    `null`.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: RegExp|null\n        Regular expression or null.\n\n    Examples\n    --------\n    > var re = reFromString( '/beep/' )\n    /beep/\n    > re = reFromString( '/beep' )\n    null\n\n",
	"reim": "\nreim( z )\n    Returns the real and imaginary components of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    out: Float64Array|Float32Array\n        Array containing the real and imaginary components, respectively.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var out = reim( z )\n    <Float64Array>[ 5.0, 3.0 ]\n\n    See Also\n    --------\n    imag, real\n",
	"removeFirst": "\nremoveFirst( str )\n    Removes the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Updated string.\n\n    Examples\n    --------\n    > var out = removeFirst( 'beep' )\n    'eep'\n    > out = removeFirst( 'Boop' )\n    'oop'\n\n    See Also\n    --------\n    removeLast\n",
	"removeLast": "\nremoveLast( str )\n    Removes the last character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Updated string.\n\n    Examples\n    --------\n    > var out = removeLast( 'beep' )\n    'bee'\n    > out = removeLast( 'Boop' )\n    'Boo'\n\n    See Also\n    --------\n    removeFirst\n",
	"removePunctuation": "\nremovePunctuation( str )\n    Removes punctuation characters from a `string`.\n\n    The function removes the following characters:\n\n    - Apostrophe: `\n    - Braces : { }\n    - Brackets: [ ]\n    - Colon: :\n    - Comma: ,\n    - Exclamation Mark: !\n    - Fraction Slash: /\n    - Guillemets: < >\n    - Parentheses: ( )\n    - Period: .\n    - Semicolon: ;\n    - Tilde: ~\n    - Vertical Bar: |\n    - Question Mark: ?\n    - Quotation Marks: ' \"\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with punctuation characters removed.\n\n    Examples\n    --------\n    > var str = 'Sun Tzu said: \"A leader leads by example not by force.\"';\n    > var out = {{alias }}( str )\n    'Sun Tzu said A leader leads by example not by force'\n\n    > str = 'This function removes these characters: `{}[]:,!/<>().;~|?\\'\"';\n    > out = removePunctuation( str )\n    'This function removes these characters'\n\n",
	"removeUTF8BOM": "\nremoveUTF8BOM( str )\n    Removes a UTF-8 byte order mark (BOM) from the beginning of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with BOM removed.\n\n    Examples\n    --------\n    > var out = removeUTF8BOM( '\\ufeffbeep' )\n    'beep'\n\n",
	"removeWords": "\nremoveWords( str, words[, ignoreCase] )\n    Removes all occurrences of the given words from a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    words: Array<string>\n        Array of words to be removed.\n\n    ignoreCase: boolean\n        Boolean indicating whether to perform a case-insensitive operation.\n        Default: `false`.\n\n    Returns\n    -------\n    out: string\n        String with words removed.\n\n    Examples\n    --------\n    > var out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ] )\n    'beep  Foo bar'\n\n    // Case-insensitive:\n    > out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ], true )\n    'beep   bar'\n\n",
	"rename": "\nrename( oldPath, newPath, clbk )\n    Asynchronously renames a file.\n\n    The old path can specify a directory. In this case, the new path must either\n    not exist, or it must specify an empty directory.\n\n    The old pathname should not name an ancestor directory of the new pathname.\n\n    If the old path points to the pathname of a file that is not a directory,\n    the new path should not point to the pathname of a directory.\n\n    Write access permission is required for both the directory containing the\n    old path and the directory containing the new path.\n\n    If the link named by the new path exists, the new path is removed and the\n    old path is renamed to the new path. The link named by the new path will\n    remain visible to other threads throughout the renaming operation and refer\n    to either the file referred to by the new path or to the file referred to by\n    the old path before the operation began.\n\n    If the old path and the new path resolve to either the same existing\n    directory entry or to different directory entries for the same existing\n    file, no action is taken, and no error is returned.\n\n    If the old path points to a pathname of a symbolic link, the symbolic link\n    is renamed. If the new path points to a pathname of a symbolic link, the\n    symbolic link is removed.\n\n    If a link named by the new path exists and the file's link count becomes 0\n    when it is removed and no process has the file open, the space occupied by\n    the file is freed and the file is no longer accessible. If one or more\n    processes have the file open when the last link is removed, the link is\n    removed before the function returns, but the removal of file contents is\n    postponed until all references to the file are closed.\n\n    Parameters\n    ----------\n    oldPath: string|Buffer\n        Old path.\n\n    newPath: string|Buffer\n        New path.\n\n    clbk: Function\n        Callback to invoke upon renaming a file.\n\n    Examples\n    --------\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     }\n    ... };\n    > rename( './beep/boop.txt', './beep/foo.txt', done );\n\n\nrename.sync( oldPath, newPath )\n    Synchronously renames a file.\n\n    Parameters\n    ----------\n    oldPath: string|Buffer\n        Old path.\n\n    newPath: string|Buffer\n        New path.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = rename.sync( './beep/boop.txt', './beep/foo.txt' );\n\n    See Also\n    --------\n    exists, readFile, writeFile, unlink\n",
	"reorderArguments": "\nreorderArguments( fcn, indices[, thisArg] )\n    Returns a function that invokes a provided function with reordered\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    indices: Array<integer>\n        Argument indices.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reordered arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 1, 2 ]\n\n    See Also\n    --------\n    reverseArguments\n",
	"repeat": "\nrepeat( str, n )\n    Repeats a string `n` times and returns the concatenated result.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    n: integer\n        Number of repetitions.\n\n    Returns\n    -------\n    out: string\n        Repeated string.\n\n    Examples\n    --------\n    > var out = repeat( 'a', 5 )\n    'aaaaa'\n    > out = repeat( '', 100 )\n    ''\n    > out = repeat( 'beep', 0 )\n    ''\n\n    See Also\n    --------\n    pad\n",
	"replace": "\nreplace( str, search, newval )\n    Replaces `search` occurrences with a replacement `string`.\n\n    When provided a `string` as the `search` value, the function replaces *all*\n    occurrences. To remove only the first match, use a regular expression.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string|RegExp\n        Search expression.\n\n    newval: string|Function\n        Replacement value or function.\n\n    Returns\n    -------\n    out: string\n        String containing replacement(s).\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = replace( 'beep', 'e', 'o' )\n    'boop'\n\n    // Replacer function:\n    > function replacer( match, p1 ) { return '/'+p1+'/'; };\n    > var str = 'Oranges and lemons';\n    > out = replace( str, /([^\\s]+)/gi, replacer )\n    '/Oranges/ /and/ /lemons/'\n\n    // Replace only first match:\n    > out = replace( 'beep', /e/, 'o' )\n    'boep'\n\n",
	"rescape": "\nrescape( str )\n    Escapes a regular expression string.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: string\n        Escaped string.\n\n    Examples\n    --------\n    > var str = rescape( '[A-Z]*' )\n    '\\\\[A\\\\-Z\\\\]\\\\*'\n\n",
	"resolveParentPath": "\nresolveParentPath( path[, options,] clbk )\n    Asynchronously resolves a path by walking parent directories.\n\n    If unable to resolve a path, the function returns `null` as the path result.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    clbk: Function\n        Callback to invoke after resolving a path.\n\n    Examples\n    --------\n    > function onPath( error, path ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( path );\n    ...     }\n    ... };\n    > resolveParentPath( 'package.json', onPath );\n\n\nresolveParentPath.sync( path[, options] )\n    Synchronously resolves a path by walking parent directories.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    Returns\n    -------\n    out: string|null\n        Resolved path.\n\n    Examples\n    --------\n    > var out = resolveParentPath.sync( 'package.json' );\n\n",
	"reverseArguments": "\nreverseArguments( fcn[, thisArg] )\n    Returns a function that invokes a provided function with arguments in\n    reverse order.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reversed arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reverseArguments( foo );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 2, 1 ]\n\n    See Also\n    --------\n    reorderArguments\n",
	"reverseString": "\nreverseString( str )\n    Reverses a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Reversed string.\n\n    Examples\n    --------\n    > var out = reverseString( 'foo' )\n    'oof'\n    > out = reverseString( 'abcdef' )\n    'fedcba'\n\n",
	"reviveBuffer": "\nreviveBuffer( key, value )\n    Revives a JSON-serialized Buffer.\n\n    The serialization format for a Buffer is an object having the following\n    fields:\n\n    - type: value type (Buffer)\n    - data: buffer data as an array of integers\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or Buffer.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Buffer\",\"data\":[5,3]}';\n    > var buf = parseJSON( str, reviveBuffer )\n    <Buffer>[ 5, 3 ]\n\n    See Also\n    --------\n    buffer2json\n",
	"reviveComplex": "\nreviveComplex( key, value )\n    Revives a JSON-serialized complex number.\n\n    The serialization format for complex numbers is an object having the\n    following fields:\n\n    - type: complex number type (e.g., \"Complex128\", \"Complex64\")\n    - re: real component (number)\n    - im: imaginary component (number)\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex )\n    <Complex128>\n\n    See Also\n    --------\n    Complex128, Complex64, reviveComplex128, reviveComplex64\n",
	"reviveComplex128": "\nreviveComplex128( key, value )\n    Revives a JSON-serialized 128-bit complex number.\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex128 )\n    <Complex128>\n\n    See Also\n    --------\n    Complex128, reviveComplex64, reviveComplex\n",
	"reviveComplex64": "\nreviveComplex64( key, value )\n    Revives a JSON-serialized 64-bit complex number.\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex64 )\n    <Complex64>\n\n    See Also\n    --------\n    Complex64, reviveComplex128, reviveComplex\n",
	"reviveError": "\nreviveError( key, value )\n    Revives a JSON-serialized error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or error object.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n    > var err = JSON.parse( str, reviveError )\n    <TypeError>\n\n    See Also\n    --------\n    error2json\n",
	"reviveTypedArray": "\nreviveTypedArray( key, value )\n    Revives a JSON-serialized typed array.\n\n    The serialization format for typed array is an object having the following\n    fields:\n\n    - type: typed array type (e.g., \"Float64Array\", \"Int8Array\")\n    - data: typed array data as an array of numbers\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or typed array.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Float64Array\",\"data\":[5,3]}';\n    > var arr = parseJSON( str, reviveTypedArray )\n    <Float64Array>[ 5.0, 3.0 ]\n\n    See Also\n    --------\n    typedarray2json\n",
	"RE_BASENAME": "\nRE_BASENAME\n    Regular expression to capture the last part of a path.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_BASENAME.posix\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n\n\nRE_BASENAME.win32\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n\n    See Also\n    --------\n    RE_BASENAME_POSIX, RE_BASENAME_WINDOWS\n",
	"RE_BASENAME_POSIX": "\nRE_BASENAME_POSIX\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    '.gitignore'\n    > base = RE_BASENAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'file.pdf'\n    > base = RE_BASENAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    'file'\n    > base = RE_BASENAME_POSIX.exec( 'index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_BASENAME, RE_BASENAME_WINDOWS\n",
	"RE_BASENAME_WINDOWS": "\nRE_BASENAME_WINDOWS\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    '.gitignore'\n    > base = RE_BASENAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'file.pdf'\n    > base = RE_BASENAME_WINDOWS.exec( 'foo\\\\bar\\\\file' )[ 1 ]\n    'file'\n    > base = RE_BASENAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_WINDOWS.exec( '.' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_BASENAME, RE_BASENAME_POSIX\n",
	"RE_COLOR_HEXADECIMAL": "\nRE_COLOR_HEXADECIMAL\n    Regular expression to match a hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.test( '000' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.test( 'beep' )\n    false\n\n\nRE_COLOR_HEXADECIMAL.shorthand\n    Regular expression to match a shorthand hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'ffffff' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'beep' )\n    false\n\n\nRE_COLOR_HEXADECIMAL.either\n    Regular expression to match either a shorthand or full length hexadecimal\n    color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.either.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( 'beep' )\n    false\n\n",
	"RE_DECIMAL_NUMBER": "\nRE_DECIMAL_NUMBER\n    Regular expression to capture a decimal number.\n\n    A leading digit is not required.\n\n    A decimal point and at least one trailing digit is required.\n\n    Examples\n    --------\n    > var bool = RE_DECIMAL_NUMBER.test( '1.234' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '-1.234' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '0.0' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '.0' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '0' )\n    false\n    > bool = RE_DECIMAL_NUMBER.test( 'beep' )\n    false\n\n    // Create a RegExp to capture all decimal numbers:\n    > var re = new RegExp( RE_DECIMAL_NUMBER.source, 'g' );\n    > var str = '1.234 5.6, 7.8';\n    > var out = str.match( re );\n    [ '1.234', '5.6', '7.8' ]\n\n\n",
	"RE_DIRNAME": "\nRE_DIRNAME\n    Regular expression to capture a path dirname.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_DIRNAME.posix\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n\n\nRE_DIRNAME.win32\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n\n    See Also\n    --------\n    RE_DIRNAME_POSIX, RE_DIRNAME_WINDOWS, dirname\n",
	"RE_DIRNAME_POSIX": "\nRE_DIRNAME_POSIX\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    './foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_WINDOWS, dirname\n",
	"RE_DIRNAME_WINDOWS": "\nRE_DIRNAME_WINDOWS\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\bar\\\\index.js' )[ 1 ]\n    'foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    '\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_POSIX, dirname\n",
	"RE_EOL": "\nRE_EOL\n    Regular expression to match a newline character sequence: /\\r?\\n/.\n\n    Examples\n    --------\n    > var bool = RE_EOL.test( '\\n' )\n    true\n    > bool = RE_EOL.test( '\\r\\n' )\n    true\n    > bool = RE_EOL.test( '\\\\r\\\\n' )\n    false\n\n",
	"RE_EXTENDED_LENGTH_PATH": "\nRE_EXTENDED_LENGTH_PATH\n    Regular expression to test if a string is an extended-length path.\n\n    Extended-length paths are Windows paths which begin with `\\\\?\\`.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\?\\\\C:\\\\foo\\\\bar';\n    > var bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    true\n    > path = '\\\\\\\\?\\\\UNC\\\\server\\\\share';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    true\n    > path = 'C:\\\\foo\\\\bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n    > path = '/c/foo/bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n\n",
	"RE_EXTNAME": "\nRE_EXTNAME\n    Regular expression to capture a filename extension.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_EXTNAME.posix\n    Regular expression to capture a POSIX filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n\n\nRE_EXTNAME.win32\n    Regular expression to capture a Windows filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n\n    See Also\n    --------\n    RE_EXTNAME_POSIX, RE_EXTNAME_WINDOWS, extname\n",
	"RE_EXTNAME_POSIX": "\nRE_EXTNAME_POSIX\n    Regular expression to capture a POSIX filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( '.' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( './' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_WINDOWS, extname\n",
	"RE_EXTNAME_WINDOWS": "\nRE_EXTNAME_WINDOWS\n    Regular expression to capture a Windows filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( beep\\\\boop.' )[ 1 ]\n    '.'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_POSIX, extname\n",
	"RE_FILENAME": "\nRE_FILENAME\n    Regular expression to split a filename.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_FILENAME.posix\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = '/foo/bar/index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n\n\nRE_FILENAME.win32\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = 'C:\\\\foo\\\\bar\\\\index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n\n    See Also\n    --------\n    RE_FILENAME_POSIX, RE_FILENAME_WINDOWS\n",
	"RE_FILENAME_POSIX": "\nRE_FILENAME_POSIX\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var parts = RE_FILENAME_POSIX.exec( '/foo/bar/index.js' ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n    > parts = RE_FILENAME_POSIX.exec( './foo/bar/.gitignore' ).slice()\n    [ './foo/bar/.gitignore', '', './foo/bar/', '.gitignore', '' ]\n    > parts = RE_FILENAME_POSIX.exec( 'foo/file.pdf' ).slice()\n    [ 'foo/file.pdf', '', 'foo/', 'file.pdf', '.pdf' ]\n    > parts = RE_FILENAME_POSIX.exec( '/foo/bar/file' ).slice()\n    [ '/foo/bar/file', '/', 'foo/bar/', 'file', '' ]\n    > parts = RE_FILENAME_POSIX.exec( 'index.js' ).slice()\n    [ 'index.js', '', '', 'index.js', '.js' ]\n    > parts = RE_FILENAME_POSIX.exec( '.' ).slice()\n    [ '.', '', '', '.', '' ]\n    > parts = RE_FILENAME_POSIX.exec( './' ).slice()\n    [ './', '', '.', '.', '' ]\n    > parts = RE_FILENAME_POSIX.exec( '' ).slice()\n    [ '', '', '', '', '' ]\n\n    See Also\n    --------\n    RE_FILENAME, RE_FILENAME_WINDOWS\n",
	"RE_FILENAME_WINDOWS": "\nRE_FILENAME_WINDOWS\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var parts = RE_FILENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\.gitignore' ).slice()\n    [ '\\\\foo\\\\bar\\\\.gitignore', '', '\\\\', 'foo\\\\bar\\\\', '.gitignore', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( 'foo\\\\file.pdf' ).slice()\n    [ 'foo\\\\file.pdf', '', '', 'foo\\\\', 'file.pdf', '.pdf' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' ).slice()\n    [ '\\\\foo\\\\bar\\\\file', '', '\\\\', 'foo\\\\bar\\\\', 'file', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( 'index.js' ).slice()\n    [ 'index.js', '', '', '', 'index.js', '.js' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '.' ).slice()\n    [ '.', '', '', '', '.', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( './' ).slice()\n    [ './', '', '', '.', '.', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '' ).slice()\n    [ '', '', '', '', '', '' ]\n\n    See Also\n    --------\n    RE_FILENAME, RE_FILENAME_POSIX\n",
	"RE_FUNCTION_NAME": "\nRE_FUNCTION_NAME\n    Regular expression to capture a function name.\n\n    Examples\n    --------\n    > function beep() { return 'boop'; };\n    > var name = RE_FUNCTION_NAME.exec( beep.toString() )[ 1 ]\n    'beep'\n    > name = RE_FUNCTION_NAME.exec( function () {} )[ 1 ]\n    ''\n\n    See Also\n    --------\n    functionName\n",
	"RE_NATIVE_FUNCTION": "\nRE_NATIVE_FUNCTION\n    Regular expression to match a native function.\n\n    Examples\n    --------\n    > var bool = RE_NATIVE_FUNCTION.test( Date.toString() )\n    true\n    > bool = RE_NATIVE_FUNCTION.test( (function noop() {}).toString() )\n    false\n\n    See Also\n    --------\n    RE_FUNCTION_NAME, functionName\n",
	"RE_REGEXP": "\nRE_REGEXP\n    Regular expression to parse a regular expression string.\n\n    Regular expression strings should be escaped.\n\n    Examples\n    --------\n    > var bool = RE_REGEXP.test( '/^beep$/' )\n    true\n    > bool = RE_REGEXP.test( '/boop' )\n    false\n\n    // Escape regular expression strings:\n    > bool = RE_REGEXP.test( '/^\\/([^\\/]+)\\/(.*)$/' )\n    false\n    > bool = RE_REGEXP.test( '/^\\\\/([^\\\\/]+)\\\\/(.*)$/' )\n    true\n\n    See Also\n    --------\n    reFromString\n",
	"RE_UNC_PATH": "\nRE_UNC_PATH\n    Regular expression to parse a UNC path.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b';\n    > var bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::b';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'beep boop \\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b:c';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '//server/share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = './foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/../bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n\n    See Also\n    --------\n    isUNCPath\n",
	"RE_UTF16_SURROGATE_PAIR": "\nRE_UTF16_SURROGATE_PAIR\n    Regular expression to match a UTF-16 surrogate pair.\n\n    Examples\n    --------\n    > var bool = RE_UTF16_SURROGATE_PAIR.test( 'abc\\uD800\\uDC00def' )\n    true\n    > bool = RE_UTF16_SURROGATE_PAIR.test( 'abcdef' )\n    false\n\n    See Also\n    --------\n    RE_UTF16_UNPAIRED_SURROGATE\n",
	"RE_UTF16_UNPAIRED_SURROGATE": "\nRE_UTF16_UNPAIRED_SURROGATE\n    Regular expression to match an unpaired UTF-16 surrogate.\n\n    Examples\n    --------\n    > var bool = RE_UTF16_UNPAIRED_SURROGATE.test( 'abc' )\n    false\n    > bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\\uD800' )\n    true\n\n    See Also\n    --------\n    RE_UTF16_SURROGATE_PAIR\n",
	"RE_WHITESPACE": "\nRE_WHITESPACE\n    Regular expression to match a white space character.\n\n    Matches the 25 characters defined as white space (\"WSpace=Y\",\"WS\")\n    characters in the Unicode 9.0 character database.\n\n    Matches one related white space character without the Unicode character\n    property \"WSpace=Y\" (zero width non-breaking space which was deprecated as\n    of Unicode 3.2).\n\n    Examples\n    --------\n    > var bool = RE_WHITESPACE.test( '\\n' )\n    true\n    > bool = RE_WHITESPACE.test( ' ' )\n    true\n    > bool = RE_WHITESPACE.test( 'a' )\n    false\n\n    See Also\n    --------\n    isWhitespace\n",
	"rpad": "\nrpad( str, len[, pad] )\n    Right pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = rpad( 'a', 5 )\n    'a    '\n    > out = rpad( 'beep', 10, 'p' )\n    'beeppppppp'\n    > out = rpad( 'beep', 12, 'boop' )\n    'beepboopboop'\n\n    See Also\n    --------\n    lpad, pad\n",
	"rtrim": "\nrtrim( str )\n    Trims whitespace from the end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = rtrim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    ' \\t\\t\\n  Beep'\n\n    See Also\n    --------\n    ltrim, trim\n",
	"safeintmax": "\nsafeintmax( dtype )\n    Returns the maximum safe integer capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum safe integer.\n\n    Examples\n    --------\n    > var m = safeintmax( 'float16' )\n    2047\n    > m = safeintmax( 'float32' )\n    16777215\n\n    See Also\n    --------\n    safeintmin, realmax, typemax\n",
	"safeintmin": "\nsafeintmin( dtype )\n    Returns the minimum safe integer capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Minimum safe integer.\n\n    Examples\n    --------\n    > var m = safeintmin( 'float16' )\n    -2047\n    > m = safeintmin( 'float32' )\n    -16777215\n\n    See Also\n    --------\n    safeintmax, realmin, typemin\n",
	"sample": "\nsample( x[, options] )\n    Samples elements from an array-like object.\n\n    Parameters\n    ----------\n    x: ArrayLike\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.size: integer (optional)\n        Sample size. By default, the function returns an array having the same\n        length as `x`. Specify the `size` option to generate a sample of a\n        different size.\n\n    options.probs: Array<number> (optional)\n        Element probabilities. By default, the probability of sampling an\n        element is the same for all elements. To assign elements different\n        probabilities, set the `probs` option. The `probs` option must be a\n        numeric array consisting of nonnegative values which sum to one. When\n        sampling without replacement, note that the `probs` option denotes the\n        initial element probabilities which are then updated after each draw.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. If the `replace`\n        option is set to `false`, the `size` option cannot be an integer larger\n        than the number of elements in `x`. Default: `true`.\n\n    Returns\n    -------\n    out: Array\n        Sample.\n\n    Examples\n    --------\n    > var out = sample( 'abc' )\n    e.g., [ 'a', 'a', 'b' ]\n    > out = sample( [ 3, 6, 9 ] )\n    e.g., [ 3, 9, 6 ]\n    > var bool = ( out.length === 3 )\n    true\n\n    > out = sample( [ 3, null, NaN, 'abc', function(){} ] )\n    e.g., [ 3, 'abc', null, 3, null ]\n\n    // Set sample size:\n    > out = sample( [ 3, 6, 9 ], { 'size': 10 })\n    e.g., [ 6, 3, 9, 9, 9, 6, 9, 6, 9, 3 ]\n    > out = sample( [ 0, 1 ], { 'size': 20 })\n    e.g., [ 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0 ]\n\n    // Draw without replacement:\n    > out = sample( [ 1, 2, 3, 4, 5, 6 ], { 'replace': false, 'size': 3 })\n    e.g., [ 6, 1, 5 ]\n    > out = sample( [ 0, 1 ], { 'replace': false })\n    e.g., [ 0, 1 ]\n\n    // Assigning non-uniform element probabilities:\n    > var x = [ 1, 2, 3, 4, 5, 6 ];\n    > var probs = [ 0.1, 0.1, 0.1, 0.1, 0.1, 0.5 ];\n    > out = sample( x, { 'probs': probs })\n    e.g., [ 5, 6, 6, 5, 6, 4 ]\n    > out = sample( x, { 'probs': probs, 'size': 3, 'replace': false })\n    e.g., [ 6, 4, 1 ]\n\n\nsample.factory( [pool, ][options] )\n    Returns a function to sample elements from an array-like object.\n\n    If provided an array-like object `pool`, the returned function will always\n    sample from the supplied object.\n\n    Parameters\n    ----------\n    pool: ArrayLike (optional)\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: integer (optional)\n        Integer-valued seed.\n\n    options.size: integer (optional)\n        Sample size.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. Default: `true`.\n\n    options.mutate: boolean (optional)\n        Boolean indicating whether to mutate the `pool` when sampling without\n        replacement. If a population from which to sample is provided, the\n        underlying `pool` remains by default constant for each function\n        invocation. To mutate the `pool` by permanently removing observations\n        when sampling without replacement, set the `mutate` option to `true`.\n        The returned function returns `null` after all population units are\n        exhausted. Default: `false`.\n\n    Returns\n    -------\n    fcn: Function\n        Function to sample elements from an array-like object.\n\n    Examples\n    --------\n    // Set a seed:\n    > var mysample = sample.factory({ 'seed': 232 });\n    > var out = mysample( 'abcdefg' )\n    [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n\n    // Provide `pool` and set a seed plus a default sample size:\n    > var pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, { 'seed': 232, 'size': 2 });\n    > out = mysample()\n    [ 6, 4 ]\n    > out = mysample()\n    [ 6, 5 ]\n\n    // Mutate the `pool`:\n    > var opts = { 'seed': 474, 'size': 3, 'mutate': true, 'replace': false };\n    > pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, opts );\n    > out = mysample()\n    [ 4, 3, 6 ]\n    > out = mysample()\n    [ 1, 5, 2 ]\n    > out = mysample()\n    null\n\n    // Override default `size` parameter when invoking created function:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'size': 10 })\n    e.g, [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n\n    // Sample with and without replacement:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'replace': false })\n    e.g., [ 0, 1 ] or [ 1, 0 ]\n    > out = mysample()\n    e.g., [ 1, 1 ]\n\n",
	"SAVOY_STOPWORDS_FIN": "\nSAVOY_STOPWORDS_FIN()\n    Returns a list of Finnish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_FIN()\n    [ 'aiemmin', 'aika', 'aikaa', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_FR": "\nSAVOY_STOPWORDS_FR()\n    Returns a list of French stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_FR()\n    [ 'a', 'à', 'â', 'abord', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_GER": "\nSAVOY_STOPWORDS_GER()\n    Returns a list of German stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_GER()\n    [ 'a', 'ab', 'aber', 'ach', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_IT": "\nSAVOY_STOPWORDS_IT()\n    Returns a list of Italian stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_IT()\n    [ 'a', 'abbastanza', 'accidenti', 'ad', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_POR": "\nSAVOY_STOPWORDS_POR()\n    Returns a list of Portuguese stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_POR()\n    [ 'aiemmin', 'aika', 'aikaa', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_SP": "\nSAVOY_STOPWORDS_SP()\n    Returns a list of Spanish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_SP()\n    [ 'a', 'acuerdo', 'adelante', 'ademas', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_SWE": "\nSAVOY_STOPWORDS_SWE()\n    Returns a list of Swedish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_SWE()\n    [ 'aderton', 'adertonde', 'adjö', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SECONDS_IN_DAY": "\nSECONDS_IN_DAY\n    Number of seconds in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var secs = days * SECONDS_IN_DAY\n    271296\n\n",
	"SECONDS_IN_HOUR": "\nSECONDS_IN_HOUR\n    Number of seconds in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var secs = hrs * SECONDS_IN_HOUR\n    11304\n\n",
	"SECONDS_IN_MINUTE": "\nSECONDS_IN_MINUTE\n    Number of seconds in a minute.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var secs = mins * SECONDS_IN_MINUTE\n    188.4\n\n",
	"SECONDS_IN_WEEK": "\nSECONDS_IN_WEEK\n    Number of seconds in a week.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var secs = wks * SECONDS_IN_WEEK\n    1899072\n\n",
	"secondsInMonth": "\nsecondsInMonth( [month[, year]] )\n    Returns the number of seconds in a month.\n\n    By default, the function returns the number of seconds in the current month\n    of the current year (according to local time). To determine the number of\n    seconds for a particular month and year, provide `month` and `year`\n    arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also supports providing a `Date` object.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Seconds in a month.\n\n    Examples\n    --------\n    > var num = secondsInMonth()\n    <number>\n    > num = secondsInMonth( 2 )\n    <number>\n    > num = secondsInMonth( 2, 2016 )\n    2505600\n    > num = secondsInMonth( 2, 2017 )\n    2419200\n\n    // Other ways to supply month:\n    > num = secondsInMonth( 'feb', 2016 )\n    2505600\n    > num = secondsInMonth( 'february', 2016 )\n    2505600\n\n    See Also\n    --------\n    secondsInYear\n",
	"secondsInYear": "\nsecondsInYear( [value] )\n    Returns the number of seconds in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of seconds in the current year\n    (according to local time). To determine the number of seconds for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of seconds in a year.\n\n    Examples\n    --------\n    > var num = secondsInYear()\n    <number>\n    > num = secondsInYear( 2016 )\n    31622400\n    > num = secondsInYear( 2017 )\n    31536000\n\n    See Also\n    --------\n    secondsInMonth\n",
	"setReadOnly": "\nsetReadOnly( obj, prop, value )\n    Defines a read-only property.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setReadOnly( obj, 'foo', 'bar' );\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n",
	"SharedArrayBuffer": "\nSharedArrayBuffer( size )\n    Returns a shared array buffer having a specified number of bytes.\n\n    A shared array buffer behaves similarly to a non-shared array buffer, except\n    that a shared array buffer allows creating views of memory shared between\n    threads.\n\n    Buffer contents are initialized to 0.\n\n    If an environment does not support shared array buffers, the function throws\n    an error.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes.\n\n    Returns\n    -------\n    out: SharedArrayBuffer\n        A shared array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var buf = new SharedArrayBuffer( 5 )\n    <SharedArrayBuffer>\n\n\nSharedArrayBuffer.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > SharedArrayBuffer.length\n    1\n\n\nSharedArrayBuffer.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var buf = new SharedArrayBuffer( 5 );\n    > buf.byteLength\n    5\n\n\nSharedArrayBuffer.prototype.slice( [start[, end]] )\n    Copies the bytes of a shared array buffer to a new shared array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: SharedArrayBuffer\n        A new shared array buffer whose contents have been copied from the\n        calling shared array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var b1 = new SharedArrayBuffer( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------\n    Buffer, ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"shift": "\nshift( collection )\n    Removes and returns the first element of a collection.\n\n    The function returns an array with two elements: the shortened collection\n    and the removed element.\n\n    If the input collection is a typed array whose length is greater than `0`,\n    the first return value does not equal the input reference.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the value should be\n        array-like.\n\n    Returns\n    -------\n    out: Array\n        Updated collection and the removed item.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var out = shift( arr )\n    [ [ 2.0, 3.0, 4.0, 5.0 ], 1.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > out = shift( arr )\n    [ <Float64Array>[ 2.0 ], 1.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 2, '0': 1.0, '1': 2.0 };\n    > out = shift( arr )\n    [ { 'length': 1, '0': 2.0 }, 1.0 ]\n\n    See Also\n    --------\n    pop, push, unshift\n",
	"sizeOf": "\nsizeOf( dtype )\n    Returns the size (in bytes) of the canonical binary representation of a\n    specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n    - complex128: 128-bit complex numbers\n    - complex64: 64-bit complex numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Size (in bytes).\n\n    Examples\n    --------\n    > var s = sizeOf( 'int8' )\n    1\n    > s = sizeOf( 'uint32' )\n    4\n\n    See Also\n    --------\n    realmax, typemax\n",
	"some": "\nsome( collection, n )\n    Tests whether at least `n` elements in a collection are truthy.\n\n    The function immediately returns upon finding `n` truthy elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of truthy elements.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n` truthy\n        elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 1, 2, 3 ];\n    > var bool = some( arr, 3 )\n    true\n\n    See Also\n    --------\n    any, every, forEach, none, someBy\n",
	"someBy": "\nsomeBy( collection, n, predicate[, thisArg ] )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon finding `n` successful elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n`\n        successful elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, -3, 4, -1 ];\n    > var bool = someBy( arr, 2, negative )\n    true\n\n    See Also\n    --------\n    anyBy, everyBy, forEach, noneBy, someByAsync, someByRight\n",
	"someByAsync": "\nsomeByAsync( collection, n, [options,] predicate, done )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon receiving `n` non-falsy `result`\n    values and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nsomeByAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneByAsync, someBy, someByRightAsync\n",
	"someByRight": "\nsomeByRight( collection, n, predicate[, thisArg ] )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon finding `n` successful elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n`\n        successful elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ -1, 1, -2, 3, 4 ];\n    > var bool = someByRight( arr, 2, negative )\n    true\n\n    See Also\n    --------\n    anyByRight, everyByRight, forEachRight, noneByRight, someBy, someByRightAsync\n",
	"someByRightAsync": "\nsomeByRightAsync( collection, n, [options,] predicate, done )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon receiving `n` non-falsy `result`\n    values and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nsomeByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function, iterating\n    from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByAsync, someByRight\n",
	"SOTU": "\nSOTU( [options] )\n    Returns State of the Union (SOTU) addresses.\n\n    Each State of the Union address is represented by an object with the\n    following fields:\n\n    - year: speech year\n    - name: President name\n    - party: the President's political party\n    - text: speech text\n\n    The following political parties are recognized:\n\n    - Democratic\n    - Republican\n    - Democratic-Republican\n    - Federalist\n    - National Union\n    - Whig\n    - Whig & Democratic\n    - none\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.name: String|Array<string> (optional)\n        President name(s).\n\n    options.party: String|Array<string> (optional)\n        Political party (or parties).\n\n    options.year: integer|Array<integer> (optional)\n        Year(s).\n\n    options.range: Array<integer> (optional)\n        Two-element array specifying a year range.\n\n    Returns\n    -------\n    out: Array<Object>\n        State of the Union addresses.\n\n    Examples\n    --------\n    > var out = SOTU()\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses by one or more Presidents...\n    > var opts = { 'name': 'Barack Obama' };\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses by one or more political parties...\n    > opts = { 'party': [ 'Democratic', 'Federalist' ] };\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses from one or more years...\n    > opts = { 'year': [ 2008, 2009, 2011 ] };\n    > out = SOTU( opts )\n    [ {...}, {...}, {...} ]\n\n    // Retrieve addresses from a range of consecutive years...\n    > opts = { 'range': [ 2008-2016 ] }\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n",
	"SPACHE_REVISED": "\nSPACHE_REVISED()\n    Returns a list of simple American-English words (revised Spache).\n\n    Returns\n    -------\n    out: Array<string>\n        List of simple American-English words.\n\n    Examples\n    --------\n    > var list = SPACHE_REVISED()\n    [ 'a', 'able', 'about', 'above', ... ]\n\n    References\n    ----------\n    - Spache, George. 1953. \"A New Readability Formula for Primary-Grade Reading\n    Materials.\" *The Elementary School Journal* 53 (7): 410–13. doi:10.1086/\n    458513.\n    - Klare, George R. 1974. \"Assessing Readability.\" *Reading Research\n    Quarterly* 10 (1). Wiley, International Reading Association: 62–102.\n    <http://www.jstor.org/stable/747086>.\n    - Stone, Clarence R. 1956. \"Measuring Difficulty of Primary Reading\n    Material: A Constructive Criticism of Spache's Measure.\" *The Elementary\n    School Journal* 57 (1). University of Chicago Press: 36–41.\n    <http://www.jstor.org/stable/999700>.\n    - Perera, Katherine. 2012. \"The assessment of linguistic difficulty in\n    reading material.\" In *Linguistics and the Teacher*, edited by Ronald\n    Carter, 101–13. Routledge Library Editions: Education. Taylor & Francis.\n    <https://books.google.com/books?id=oNXFQ9Gn6XIC>.\n\n",
	"SPAM_ASSASSIN": "\nSPAM_ASSASSIN()\n    Returns the Spam Assassin public mail corpus.\n\n    Each array element has the following fields:\n\n    - id: message id (relative to message group)\n    - group: message group\n    - checksum: object containing checksum info\n    - text: message text (including headers)\n\n    The message group may be one of the following:\n\n    - easy-ham-1: easier to detect non-spam e-mails (2500 messages)\n    - easy-ham-2: easier to detect non-spam e-mails collected at a later date\n      (1400 messages)\n    - hard-ham-1: harder to detect non-spam e-mails (250 messages)\n    - spam-1: spam e-mails (500 messages)\n    - spam-2: spam e-mails collected at a later date (1396 messages)\n\n    The checksum object contains the following fields:\n\n    - type: checksum type (e.g., MD5)\n    - value: checksum value\n\n    Returns\n    -------\n    out: Array<Object>\n        Corpus.\n\n    Examples\n    --------\n    > var data = SPAM_ASSASSIN()\n    [ {...}, {...}, ... ]\n\n",
	"SparklineBase": "\nSparklineBase( [data,] [options] )\n    Returns a Sparkline instance.\n\n    This constructor is a base Sparkline constructor from which constructors\n    tailored to generating particular types of Sparkline graphics should be\n    derived.\n\n    At a minimum, descendants should implement a private `_render()` method\n    which will be automatically invoked by the public `render()` method.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Sparkline data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Sparkline data.\n\n    options.description: string (optional)\n        Sparkline description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    sparkline: Sparkline\n        Sparkline instance.\n\n    sparkline.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    sparkline.bufferSize\n        Data buffer size.\n\n    sparkline.description\n        Sparkline description.\n\n    sparkline.data\n        Sparkline data.\n\n    sparkline.label\n        Data label.\n\n    sparkline.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    sparkline.render()\n        Renders a sparkline. This method calls `_render()` which must be\n        implemented by instances and child classes. The default behavior is\n        throw an error.\n\n    Examples\n    --------\n    > var sparkline = new SparklineBase()\n    <Sparkline>\n\n    // Provide sparkline data at instantiation:\n    > var data = [ 1, 2, 3 ];\n    > sparkline = new SparklineBase( data )\n    <Sparkline>\n\n    See Also\n    --------\n    plot, Plot, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeWinLossChartSparkline\n",
	"SQRT_EPS": "\nSQRT_EPS\n    Square root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > SQRT_EPS\n    0.14901161193847656e-7\n\n    See Also\n    --------\n    EPS\n",
	"SQRT_HALF": "\nSQRT_HALF\n    Square root of `1/2`.\n\n    Examples\n    --------\n    > SQRT_HALF\n    0.7071067811865476\n\n    See Also\n    --------\n    LN_HALF\n",
	"SQRT_HALF_PI": "\nSQRT_HALF_PI\n    Square root of the mathematical constant `π` divided by `2`.\n\n    Examples\n    --------\n    > SQRT_HALF_PI\n    1.2533141373155003\n\n    See Also\n    --------\n    PI\n",
	"SQRT_PHI": "\nSQRT_PHI\n    Square root of the golden ratio.\n\n    Examples\n    --------\n    > SQRT_PHI\n    1.272019649514069\n\n    See Also\n    --------\n    PHI\n",
	"SQRT_PI": "\nSQRT_PI\n    Square root of the mathematical constant `π`.\n\n    Examples\n    --------\n    > SQRT_PI\n    1.7724538509055160\n\n    See Also\n    --------\n    PI\n",
	"SQRT_THREE": "\nSQRT_THREE\n    Square root of `3`.\n\n    Examples\n    --------\n    > SQRT_THREE\n    1.7320508075688772\n\n",
	"SQRT_TWO": "\nSQRT_TWO\n    Square root of `2`.\n\n    Examples\n    --------\n    > SQRT_TWO\n    1.4142135623730951\n\n    See Also\n    --------\n    LN2\n",
	"SQRT_TWO_PI": "\nSQRT_TWO_PI\n    Square root of the mathematical constant `π` times `2`.\n\n    Examples\n    --------\n    > SQRT_TWO_PI\n    2.5066282746310007\n\n    See Also\n    --------\n    TWO_PI\n",
	"startcase": "\nstartcase( str )\n    Capitalizes the first letter of each word in an input `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String containing words where each first letter is capitalized.\n\n    Examples\n    --------\n    > var out = startcase( 'beep boop' )\n    'Beep Boop'\n\n    See Also\n    --------\n    lowercase, uppercase\n",
	"startsWith": "\nstartsWith( str, search[, position] )\n    Tests if a `string` starts with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    position: integer (optional)\n        Position at which to start searching for `search`. If less than `0`, the\n        start position is determined relative to the end of the input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` starts with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = startsWith( 'Beep', 'Be' )\n    true\n    > bool = startsWith( 'Beep', 'ep' )\n    false\n    > bool = startsWith( 'Beep', 'ee', 1 )\n    true\n    > bool = startsWith( 'Beep', 'ee', -3 )\n    true\n    > bool = startsWith( 'Beep', '' )\n    true\n\n    See Also\n    --------\n    endsWith\n",
	"STOPWORDS_EN": "\nSTOPWORDS_EN()\n    Returns a list of English stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = STOPWORDS_EN()\n    [ 'a', 'about', 'above', 'across', ... ]\n\n",
	"string2buffer": "\nstring2buffer( str[, encoding] )\n    Allocates a buffer containing a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    encoding: string (optional)\n        Character encoding. Default: 'utf8'.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = string2buffer( 'beep boop' )\n    <Buffer>\n    > b = string2buffer( '7468697320697320612074c3a97374', 'hex' );\n    > b.toString()\n    this is a tést\n\n    See Also\n    --------\n    Buffer, array2buffer, arraybuffer2buffer, copyBuffer\n",
	"tabulate": "\ntabulate( collection )\n    Generates a frequency table.\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to tabulate. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Frequency table.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'beep' ];\n    > var out = tabulate( collection )\n    [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]\n\n    See Also\n    --------\n    countBy, groupBy, tabulateBy\n",
	"tabulateBy": "\ntabulateBy( collection, [options,] indicator )\n    Generates a frequency table according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to tabulate. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Frequency table.\n\n    Examples\n    --------\n    > function indicator( value ) { return value[ 0 ]; };\n    > var collection = [ 'beep', 'boop', 'foo', 'beep' ];\n    > var out = tabulateBy( collection, indicator )\n    [ [ 'b', 3, 0.75 ], [ 'f', 1, 0.25 ] ]\n\n    See Also\n    --------\n    countBy, groupBy, tabulate\n",
	"tabulateByAsync": "\ntabulateByAsync( collection, [options,] indicator, done )\n    Generates a frequency table according to an indicator function.\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty array as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, indicator, done )\n    750\n    1000\n    2500\n    3000\n    [ [ 'odd', 2, 0.5 ], [ 'even', 2, 0.5 ] ]\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    750\n    [ [ 'odd', 2, 0.5 ], [ 'even', 2, 0.5 ] ]\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n\ntabulateByAsync.factory( [options,] indicator )\n    Returns a function which generates a frequency table according to an\n    indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Function\n        A function which generates a frequency table according to an indicator\n        function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = tabulateByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n    > arr = [ 2000, 1500, 1000, 750 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n    See Also\n    --------\n    countByAsync, groupByAsync, tabulateBy\n",
	"tic": "\ntic()\n    Returns a high-resolution time.\n\n    The returned array has the following format: `[seconds, nanoseconds]`.\n\n    Returns\n    -------\n    out: Array<integer>\n        High resolution time.\n\n    Examples\n    --------\n    > var t = tic()\n    [ <number>, <number> ]\n\n    See Also\n    --------\n    toc\n",
	"timeit": "\ntimeit( code, [options,] clbk )\n    Times a snippet.\n\n    If the `asynchronous` option is set to `true`, the implementation assumes\n    that `before`, `after`, and `code` snippets are all asynchronous.\n    Accordingly, these snippets should invoke a `next( [error] )` callback\n    once complete. The implementation wraps the snippet within a function\n    accepting two arguments: `state` and `next`.\n\n    The `state` parameter is simply an empty object which allows the `before`,\n    `after`, and `code` snippets to share state.\n\n    Notes:\n\n    - Snippets always run in strict mode.\n    - Always verify results. Doing so prevents the compiler from performing dead\n      code elimination and other optimization techniques, which would render\n      timing results meaningless.\n    - Executed code is not sandboxed and has access to the global state. You are\n      strongly advised against timing untrusted code. To time untrusted code,\n      do so in an isolated environment (e.g., a separate process with restricted\n      access to both global state and the host environment).\n    - Wrapping asynchronous code does add overhead, but, in most cases, the\n      overhead should be negligible compared to the execution cost of the timed\n      snippet.\n    - When the `asynchronous` options is `true`, ensure that the main `code`\n      snippet is actually asynchronous. If a snippet releases the zalgo, an\n      error complaining about exceeding the maximum call stack size is highly\n      likely.\n    - While many benchmark frameworks calculate various statistics over raw\n      timing results (e.g., mean and standard deviation), do not do this.\n      Instead, consider the fastest time an approximate lower bound for how fast\n      an environment can execute a snippet. Slower times are more likely\n      attributable to other processes interfering with timing accuracy rather\n      than attributable to variability in JavaScript's speed. In which case, the\n      minimum time is most likely the only result of interest. When considering\n      all raw timing results, apply common sense rather than statistics.\n\n    Parameters\n    ----------\n    code: string\n         Snippet to time.\n\n    options: Object (optional)\n        Options.\n\n    options.before: string (optional)\n        Setup code. Default: `''`.\n\n    options.after: string (optional)\n        Cleanup code. Default: `''`.\n\n    options.iterations: integer|null (optional)\n        Number of iterations. If `null`, the number of iterations is determined\n        by trying successive powers of `10` until the total time is at least\n        `0.1` seconds. Default: `1e6`.\n\n    options.repeats: integer (optional)\n        Number of repeats. Default: `3`.\n\n    options.asynchronous: boolean (optional)\n        Boolean indicating whether a snippet is asynchronous. Default: `false`.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > var code = 'var x = Math.pow( Math.random(), 3 );';\n    > code += 'if ( x !== x ) {';\n    > code += 'throw new Error( \\'Something went wrong.\\' );';\n    > code += '}';\n    > function done( error, results ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.dir( results );\n    ... };\n    > timeit( code, done );\n    e.g.,\n    {\n        \"iterations\": 1000000,\n        \"repeats\": 3,\n        \"min\": [ 0, 135734733 ],    // [seconds,nanoseconds]\n        \"elapsed\": 0.135734733,     // seconds\n        \"rate\": 7367311.062526641,  // iterations/second\n        \"times\": [                  // raw timing results\n            [ 0, 145641393 ],\n            [ 0, 135734733 ],\n            [ 0, 140462721 ]\n        ]\n    }\n\n",
	"tmpdir": "\ntmpdir()\n    Returns the directory for storing temporary files.\n\n    Returns\n    -------\n    dir: string\n         Directory for temporary files.\n\n    Examples\n    --------\n    > var dir = tmpdir()\n    e.g., '/path/to/temporary/files/directory'\n\n    See Also\n    --------\n    configdir, homedir\n",
	"toc": "\ntoc( time )\n    Returns a high-resolution time difference, where `time` is a two-element\n    array with format `[seconds, nanoseconds]`.\n\n    Similar to `time`, the returned array has format `[seconds, nanoseconds]`.\n\n    Parameters\n    ----------\n    time: Array<integer>\n        High-resolution time.\n\n    Returns\n    -------\n    out: Array<integer>\n        High resolution time difference.\n\n    Examples\n    --------\n    > var start = tic();\n    > var delta = toc( start )\n    [ <number>, <number> ]\n\n    See Also\n    --------\n    tic\n",
	"tokenize": "\ntokenize( str[, keepWhitespace] )\n    Tokenizes a string.\n\n    To include whitespace characters (spaces, tabs, line breaks) in the output\n    array, set `keepWhitespace` to `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    keepWhitespace: boolean\n        Boolean indicating whether whitespace characters should be returned as\n        part of the token array. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of tokens.\n\n    Examples\n    --------\n    > var out = tokenize( 'Hello Mrs. Maple, could you call me back?' )\n    [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]\n\n    > out = tokenize( 'Hello World!', true )\n    [ 'Hello', ' ', 'World', '!' ]\n\n",
	"trim": "\ntrim( str )\n    Trims whitespace from the beginning and end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = trim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    'Beep'\n\n    See Also\n    --------\n    ltrim, pad, rtrim\n",
	"trycatch": "\ntrycatch( x, y )\n    If a function does not throw, returns the function return value; otherwise,\n    returns `y`.\n\n    Parameters\n    ----------\n    x: Function\n        Function to try invoking.\n\n    y: any\n        Value to return if a function throws an error.\n\n    Returns\n    -------\n    z: any\n        Either the return value of `x` or the provided argument `y`.\n\n    Examples\n    --------\n    > function x() {\n    ...     if ( base.random.randu() < 0.5 ) {\n    ...         throw new Error( 'beep' );\n    ...     }\n    ...     return 1.0;\n    ... };\n    > var z = trycatch( x, -1.0 )\n    <number>\n\n    See Also\n    --------\n    trycatchAsync, trythen\n",
	"trycatchAsync": "\ntrycatchAsync( x, y, done )\n    If a function does not return an error, invokes a callback with the function\n    result; otherwise, invokes a callback with a value `y`.\n\n    A function `x` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts two arguments:\n\n    - error: error object\n    - result: function result\n\n    The `done` callback is invoked upon function completion and is provided two\n    arguments:\n\n    - error: error object\n    - result: either the result of `x` or the provided argument `y`\n\n    If `x` invokes `clbk` with an error argument, the function invokes the\n    `done` callback with both the error and the argument `y`.\n\n    If `x` does not invoke `clbk` with an error argument, the function invokes\n    the `done` callback with a first argument equal to `null` and the function\n    `result`.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    x: Function\n        Function to invoke.\n\n    y: any\n        Value to return if `x` returns an error.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( new Error( 'beep' ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         // process error...\n    ...     }\n    ...     console.log( result );\n    ... };\n    > trycatchAsync( x, 'boop', done )\n    'boop'\n\n    See Also\n    --------\n    trycatch, trythenAsync\n",
	"tryFunction": "\ntryFunction( fcn[, thisArg] )\n    Wraps a function in a try/catch block.\n\n    If provided an asynchronous function, the returned function only traps\n    errors which occur during the current event loop tick.\n\n    If a function throws a literal, the literal is serialized as a string and\n    returned as an `Error` object.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to wrap.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Wrapped function.\n\n    Examples\n    --------\n    > function fcn() { throw new Error( 'beep boop' ); };\n    > var f = wrap( fcn );\n    > var out = f();\n    > out.message\n    'beep boop'\n\n",
	"tryRequire": "\ntryRequire( id )\n    Wraps `require` in a `try/catch` block.\n\n    This function traps and returns any errors encountered when attempting to\n    require a module.\n\n    Use caution when attempting to resolve a relative path or a local module.\n    This function attempts to resolve a module from its current path. Thus, the\n    function is unable to resolve anything which is not along its search path.\n    For local requires, use an absolute file path.\n\n    Parameters\n    ----------\n    id: string\n        Module id.\n\n    Returns\n    -------\n    out: any|Error\n        Resolved module or an `Error`.\n\n    Examples\n    --------\n    > var out = tryRequire( '_unknown_module_id_' )\n    <Error>\n\n",
	"trythen": "\ntrythen( x, y )\n    If a function does not throw, returns the function return value; otherwise,\n    returns the value returned by a second function `y`.\n\n    The function `y` is provided a single argument:\n\n    - error: the error thrown by `x`\n\n    Parameters\n    ----------\n    x: Function\n        Function to try invoking.\n\n    y: Function\n        Function to invoke if an initial function throws an error.\n\n    Returns\n    -------\n    z: any\n        The return value of either `x` or `y`.\n\n    Examples\n    --------\n    > function x() {\n    ...     if ( base.random.randu() < 0.5 ) {\n    ...         throw new Error( 'beep' );\n    ...     }\n    ...     return 1.0;\n    ... };\n    > function y() {\n    ...     return -1.0;\n    ... };\n    > var z = trythen( x, y )\n    <number>\n\n    See Also\n    --------\n    trycatch, trythenAsync\n",
	"trythenAsync": "\ntrythenAsync( x, y, done )\n    If a function does not return an error, invokes a callback with the function\n    result; otherwise, invokes a second function `y`.\n\n    A function `x` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the function invokes a `done` callback with\n    its first argument as `null` and all other provided arguments.\n\n    If the error argument is truthy, the function invokes a function `y`. The\n    number of arguments provided to `y` depends on the function's length. If `y`\n    is a unary function, `y` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    Otherwise, `y` is provided two arguments:\n\n    - error: the error from `x`\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the `done` callback is invoked with its\n    first argument equal to `null` and all other arguments provided by `y`.\n\n    If the error argument is truthy, the `done` callback is invoked with only\n    the error argument provided by `y`.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    x: Function\n        Function to invoke.\n\n    y: Function\n        Function to invoke if `x` returns an error.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( new Error( 'beep' ) );\n    ...     }\n    ... };\n    > function y( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'boop' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > trythenAsync( x, y, done )\n    'boop'\n\n    See Also\n    --------\n    trycatchAsync, trythen\n",
	"ttest": "\nttest( x[, y][, options] )\n    Computes a one-sample or paired Student's t test.\n\n    When no `y` is supplied, the function performs a one-sample t-test for the\n    null hypothesis that the data in array or typed array `x` is drawn from a\n    normal distribution with mean zero and unknown variance.\n\n    When array or typed array `y` is supplied, the function tests whether the\n    differences `x - y` come from a normal distribution with mean zero and\n    unknown variance via the paired t-test.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Data array.\n\n    y: Array<number> (optional)\n        Paired data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.mu: number (optional)\n        Hypothesized true mean under the null hypothesis. Set this option to\n        test whether the data comes from a distribution with the specified `mu`.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number.\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed mean under H0 (or difference in means when `y` is supplied).\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.df: number\n        Degrees of freedom.\n\n    out.mean: number\n        Sample mean of `x` or `x - y`, respectively.\n\n    out.sd: number\n        Standard error of the mean.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // One-sample t-test:\n    > var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 5776 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ... }\n    > var out = ttest( x )\n    {\n        rejected: false,\n        pValue: ~0.722,\n        statistic: ~0.357,\n        ci: [~-0.333,~0.479],\n        // ...\n    }\n\n    // Paired t-test:\n    > rnorm = base.random.normal.factory( 1.0, 2.0, { 'seed': 786 });\n    > x = new Array( 100 );\n    > var y = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ...     y[ i ] = rnorm();\n    ... }\n    > out = ttest( x, y )\n    {\n        rejected: false,\n        pValue: ~0.191,\n        statistic: ~1.315,\n        ci: [ ~-0.196, ~0.964 ],\n        // ...\n    }\n\n    // Print formatted output:\n    > var table = out.print()\n    Paired t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.1916\n        statistic: 1.3148\n        df: 99\n        95% confidence interval: [-0.1955,0.9635]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose custom significance level:\n    > arr = [ 2, 4, 3, 1, 0 ];\n    > out = ttest( arr, { 'alpha': 0.01 });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is not equal to 0\n\n        pValue: 0.0474\n        statistic: 2.8284\n        df: 4\n        99% confidence interval: [-1.2556,5.2556]\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n    // Test for a mean equal to five:\n    > var arr = [ 4, 4, 6, 6, 5 ];\n    > out = ttest( arr, { 'mu': 5 })\n    {\n        rejected: false,\n        pValue: 1,\n        statistic: 0,\n        ci: [ ~3.758, ~6.242 ],\n        // ...\n    }\n\n    // Perform one-sided tests:\n    > arr = [ 4, 4, 6, 6, 5 ];\n    > out = ttest( arr, { 'alternative': 'less' });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is less than 0\n\n        pValue: 0.9998\n        statistic: 11.1803\n        df: 4\n        95% confidence interval: [-Infinity,5.9534]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    > out = ttest( arr, { 'alternative': 'greater' });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is greater than 0\n\n        pValue: 0.0002\n        statistic: 11.1803\n        df: 4\n        95% confidence interval: [4.0466,Infinity]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    See Also\n    --------\n    ttest2\n",
	"ttest2": "\nttest2( x, y[, options] )\n    Computes a two-sample Student's t test.\n\n    By default, the function performs a two-sample t-test for the null\n    hypothesis that the data in arrays or typed arrays `x` and `y` is\n    independently drawn from normal distributions with equal means.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.difference: number (optional)\n        Number denoting the difference in means under the null hypothesis.\n        Default: `0`.\n\n    options.variance: string (optional)\n        String indicating if the test should be conducted under the assumption\n        that the unknown variances of the normal distributions are `equal` or\n        `unequal`. As a default choice, the function carries out the Welch test\n        (using the Satterthwaite approximation for the degrees of freedom),\n        which does not have the requirement that the variances of the underlying\n        distributions are equal. If the equal variances assumption seems\n        warranted, set the option to `equal`. Default: `unequal`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed difference in means under H0.\n\n    out.xmean: number\n        Sample mean of `x`.\n\n    out.ymean: number\n        Sample mean of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.df: number\n        Degrees of freedom.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Student's sleep data:\n    > var x = [ 0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0.0, 2.0 ];\n    > var y = [ 1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 5.5, 1.6, 4.6, 3.4 ];\n    > var out = ttest2( x, y )\n    {\n        rejected: false,\n        pValue: ~0.079,\n        statistic: ~-1.861,\n        ci: [ ~-3.365, ~0.205 ],\n        // ...\n    }\n\n    // Print table output:\n    > var table = out.print();\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.0794\n        statistic: -1.8608\n        95% confidence interval: [-3.3655,0.2055]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose a different significance level than `0.05`:\n    > out = ttest2( x, y, { 'alpha': 0.1 });\n    > table = out.print();\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.0794\n        statistic: -1.8608\n        90% confidence interval: [-3.0534,-0.1066]\n\n    Test Decision: Reject null in favor of alternative at 10% significance level\n\n    // Perform one-sided tests:\n    > out = ttest2( x, y, { 'alternative': 'less' });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is less than 0\n\n        pValue: 0.0397\n        statistic: -1.8608\n        df: 17.7765\n        95% confidence interval: [-Infinity,-0.1066]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    > out = ttest2( x, y, { 'alternative': 'greater' });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is greater than 0\n\n        pValue: 0.9603\n        statistic: -1.8608\n        df: 17.7765\n        95% confidence interval: [-3.0534,Infinity]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Run tests with equal variances assumption:\n    > x = [ 2, 3, 1, 4 ];\n    > y = [ 1, 2, 3, 1, 2, 5, 3, 4 ];\n    > out = ttest2( x, y, { 'variance': 'equal' });\n    > table = out.print();\n    Two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.8848\n        statistic: -0.1486\n        df: 10\n        95% confidence interval: [-1.9996,1.7496]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Test for a difference in means besides zero:\n    > var rnorm = base.random.normal.factory({ 'seed': 372 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm( 2.0, 3.0 );\n    ... }\n    > y = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     y[ i ] = rnorm( 1.0, 3.0 );\n    ... }\n    > out = ttest2( x, y, { 'difference': 1.0, 'variance': 'equal' })\n    {\n        rejected: false,\n        pValue: ~0.642,\n        statistic: ~-0.466,\n        ci: [ ~-0.0455, ~1.646 ],\n        // ...\n    }\n\n    See Also\n    --------\n    ttest\n",
	"TWO_PI": "\nTWO_PI\n    The mathematical constant `π` times `2`.\n\n    Examples\n    --------\n    > TWO_PI\n    6.283185307179586\n\n    See Also\n    --------\n    PI\n",
	"typedarray2json": "\ntypedarray2json( arr )\n    Returns a JSON representation of a typed array.\n\n    The following typed array types are supported:\n\n    - Float64Array\n    - Float32Array\n    - Int32Array\n    - Uint32Array\n    - Int16Array\n    - Uint16Array\n    - Int8Array\n    - Uint8Array\n    - Uint8ClampedArray\n\n    The returned JSON object has the following properties:\n\n    - type: typed array type\n    - data: typed array data as a generic array\n\n    The implementation supports custom typed arrays and sets the `type` field to\n    the closest known typed array type.\n\n    Parameters\n    ----------\n    arr: TypedArray\n        Typed array to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 2 );\n    > arr[ 0 ] = 5.0;\n    > arr[ 1 ] = 3.0;\n    > var json = typedarray2json( arr )\n    { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }\n\n    See Also\n    --------\n    reviveTypedArray\n",
	"typedarray": "\ntypedarray( [dtype] )\n    Creates a typed array.\n\n    The function supports the following data types:\n\n    - float64: double-precision floating-point numbers (IEEE 754)\n    - float32: single-precision floating-point numbers (IEEE 754)\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    The default typed array data type is `float64`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = typedarray()\n    <Float64Array>\n    > arr = typedarray( 'float32' )\n    <Float32Array>\n\n\ntypedarray( length[, dtype] )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = typedarray( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n    > arr = typedarray( 5, 'int32' )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\ntypedarray( typedarray[, dtype] )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = typedarray( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = typedarray( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarray( obj[, dtype] )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = typedarray( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarray( buffer[, byteOffset[, length]][, dtype] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = typedarray( buf, 0, 4, 'float32' )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n    See Also\n    --------\n    Float64Array, Float32Array, Int32Array, Uint32Array, Int16Array, Uint16Array, Int8Array, Uint8Array, Uint8ClampedArray\n",
	"typedarrayCtors": "\ntypedarrayCtors( dtype )\n    Returns a typed array constructor.\n\n    The function returns constructors for the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    dtype: string\n        Data type.\n\n    Returns\n    -------\n    out: Function|null\n        Typed array constructor.\n\n    Examples\n    --------\n    > var ctor = typedarrayCtors( 'float64' )\n    <Function>\n    > ctor = typedarrayCtors( 'float' )\n    null\n\n    See Also\n    --------\n    arrayCtors\n",
	"typedarrayDataTypes": "\ntypedarrayDataTypes()\n    Returns a list of typed array data types.\n\n    The output array contains the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Returns\n    -------\n    out: Array<string>\n        List of typed array data types.\n\n    Examples\n    --------\n    > var out = typedarrayDataTypes()\n    <Array>\n\n    See Also\n    --------\n    arrayDataTypes\n",
	"typemax": "\ntypemax( dtype )\n    Returns the maximum value of a specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var m = typemax( 'int8' )\n    127\n    > m = typemax( 'uint32' )\n    4294967295\n\n    See Also\n    --------\n    realmax, typemin\n",
	"typemin": "\ntypemin( dtype )\n    Returns the minimum value of a specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var m = typemin( 'int8' )\n    -128\n    > m = typemin( 'uint32' )\n    0\n\n    See Also\n    --------\n    realmin, typemax\n",
	"typeOf": "\ntypeOf( value )\n    Determines a value's type.\n\n    The following values are not natively provided in older JavaScript engines:\n\n    - Map\n    - Set\n    - WeakMap\n    - WeakSet\n    - Symbol\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        The value's type.\n\n    Examples\n    --------\n    // Built-ins:\n    > var t = typeOf( 'a' )\n    'string'\n    > t = typeOf( 5 )\n    'number'\n    > t = typeOf( NaN )\n    'number'\n    > t = typeOf( true )\n    'boolean'\n    > t = typeOf( false )\n    'boolean'\n    > t = typeOf( null )\n    'null'\n    > t = typeOf( undefined )\n    'undefined'\n    > t = typeOf( [] )\n    'array'\n    > t = typeOf( {} )\n    'object'\n    > t = typeOf( function noop() {} )\n    'function'\n    > t = typeOf( new Symbol( 'beep' ) )\n    'symbol'\n    > t = typeOf( /.+/ )\n    'regexp'\n    > t = typeOf( new String( 'beep' ) )\n    'string'\n    > t = typeOf( new Number( 5 ) )\n    'number'\n    > t = typeOf( new Boolean( false ) )\n    'boolean'\n    > t = typeOf( new Array() )\n    'array'\n    > t = typeOf( new Object() )\n    'object'\n    > t = typeOf( new Int8Array( 10 ) )\n    'int8array'\n    > t = typeOf( new Uint8Array( 10 ) )\n    'uint8array'\n    > t = typeOf( new Uint8ClampedArray( 10 ) )\n    'uint8clampedarray'\n    > t = typeOf( new Int16Array( 10 ) )\n    'int16array'\n    > t = typeOf( new Uint16Array( 10 ) )\n    'uint16array'\n    > t = typeOf( new Int32Array( 10 ) )\n    'int32array'\n    > t = typeOf( new Uint32Array( 10 ) )\n    'uint32array'\n    > t = typeOf( new Float32Array( 10 ) )\n    'float32array'\n    > t = typeOf( new Float64Array( 10 ) )\n    'float64array'\n    > t = typeOf( new ArrayBuffer( 10 ) )\n    'arraybuffer'\n    > t = typeOf( new Date() )\n    'date'\n    > t = typeOf( new RegExp( '.+ )') )\n    'regexp'\n    > t = typeOf( new Map() )\n    'map'\n    > t = typeOf( new Set() )\n    'set'\n    > t = typeOf( new WeakMap() )\n    'weakmap'\n    > t = typeOf( new WeakSet() )\n    'weakset'\n    > t = typeOf( new Error( 'beep' ) )\n    'error'\n    > t = typeOf( new TypeError( 'beep' ) )\n    'typeerror'\n    > t = typeOf( new SyntaxError( 'beep' ) )\n    'syntaxerror'\n    > t = typeOf( new ReferenceError( 'beep' ) )\n    'referenceerror'\n    > t = typeOf( new URIError( 'beep' ) )\n    'urierror'\n    > t = typeOf( new RangeError( 'beep' ) )\n    'rangeerror'\n    > t = typeOf( new EvalError( 'beep' ) )\n    'evalerror'\n    > t = typeOf( Math )\n    'math'\n    > t = typeOf( JSON )\n    'json'\n\n    // Arguments object:\n    > function beep() { return arguments; };\n    > t = typeOf( beep() )\n    'arguments'\n\n    // Node.js Buffer object:\n    > t = typeOf( new Buffer( 10 ) )\n    'buffer'\n\n    // Custom constructor:\n    > function Person() { return this };\n    > t = typeOf( new Person() )\n    'person'\n\n    // Anonymous constructor:\n    > var Foo = function () { return this; };\n    > t = typeOf new Foo() )\n    ''\n\n    See Also\n    --------\n    constructorName, nativeClass\n",
	"Uint16Array": "\nUint16Array()\n    A typed array constructor which returns a typed array representing an array\n    of 16-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array()\n    <Uint16Array>\n\n\nUint16Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 )\n    <Uint16Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint16Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint16Array( arr1 )\n    <Uint16Array>[ 5, 5, 5 ]\n\n\nUint16Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint16Array( arr1 )\n    <Uint16Array>[ 5, 5, 5 ]\n\n\nUint16Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 8 );\n    > var arr = new Uint16Array( buf, 0, 4 )\n    <Uint16Array>[ 0, 0, 0, 0 ]\n\n\nUint16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint16Array.BYTES_PER_ELEMENT\n    2\n\n\nUint16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint16Array.name\n    Uint16Array\n\n\nUint16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteLength\n    10\n\n\nUint16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"UINT16_MAX": "\nUINT16_MAX\n    Maximum unsigned 16-bit integer.\n\n    The maximum unsigned 16-bit integer is given by `2^16 - 1`.\n\n    Examples\n    --------\n    > UINT16_MAX\n    65535\n\n    See Also\n    --------\n    INT16_MAX\n",
	"UINT16_NUM_BYTES": "\nUINT16_NUM_BYTES\n    Size (in bytes) of a 16-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    INT16_NUM_BYTES, UINT32_NUM_BYTES, UINT8_NUM_BYTES\n",
	"Uint32Array": "\nUint32Array()\n    A typed array constructor which returns a typed array representing an array\n    of 32-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array()\n    <Uint32Array>\n\n\nUint32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 )\n    <Uint32Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint32Array( arr1 )\n    <Uint32Array>[ 5, 5, 5 ]\n\n\nUint32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint32Array( arr1 )\n    <Uint32Array>[ 5, 5, 5 ]\n\n\nUint32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Uint32Array( buf, 0, 4 )\n    <Uint32Array>[ 0, 0, 0, 0 ]\n\n\nUint32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint32Array.BYTES_PER_ELEMENT\n    4\n\n\nUint32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint32Array.name\n    Uint32Array\n\n\nUint32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteLength\n    20\n\n\nUint32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint8Array, Uint8ClampedArray\n",
	"UINT32_MAX": "\nUINT32_MAX\n    Maximum unsigned 32-bit integer.\n\n    The maximum unsigned 32-bit integer is given by `2^32 - 1`.\n\n    Examples\n    --------\n    > UINT32_MAX\n    4294967295\n\n    See Also\n    --------\n    INT32_MAX\n",
	"UINT32_NUM_BYTES": "\nUINT32_NUM_BYTES\n    Size (in bytes) of a 32-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    INT32_NUM_BYTES, UINT16_NUM_BYTES, UINT8_NUM_BYTES\n",
	"Uint8Array": "\nUint8Array()\n    A typed array constructor which returns a typed array representing an array\n    of 8-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array()\n    <Uint8Array>\n\n\nUint8Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 )\n    <Uint8Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint8Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint8Array( arr1 )\n    <Uint8Array>[ 5, 5, 5 ]\n\n\nUint8Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint8Array( arr1 )\n    <Uint8Array>[ 5, 5, 5 ]\n\n\nUint8Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Uint8Array( buf, 0, 4 )\n    <Uint8Array>[ 0, 0, 0, 0 ]\n\n\nUint8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8Array.BYTES_PER_ELEMENT\n    1\n\n\nUint8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8Array.name\n    Uint8Array\n\n\nUint8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteLength\n    5\n\n\nUint8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8ClampedArray\n",
	"Uint8ClampedArray": "\nUint8ClampedArray()\n    A typed array constructor which returns a typed array representing an array\n    of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray()\n    <Uint8ClampedArray>\n\n\nUint8ClampedArray( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 )\n    <Uint8ClampedArray>[ 0, 0, 0, 0, 0 ]\n\n\nUint8ClampedArray( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint8ClampedArray( arr1 )\n    <Uint8ClampedArray>[ 5, 5, 5 ]\n\n\nUint8ClampedArray( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint8ClampedArray( arr1 )\n    <Uint8ClampedArray>[ 5, 5, 5 ]\n\n\nUint8ClampedArray( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Uint8ClampedArray( buf, 0, 4 )\n    <Uint8ClampedArray>[ 0, 0, 0, 0 ]\n\n\nUint8ClampedArray.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8ClampedArray.BYTES_PER_ELEMENT\n    1\n\n\nUint8ClampedArray.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8ClampedArray.name\n    Uint8ClampedArray\n\n\nUint8ClampedArray.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint8ClampedArray.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteLength\n    5\n\n\nUint8ClampedArray.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteOffset\n    0\n\n\nUint8ClampedArray.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array\n",
	"UINT8_MAX": "\nUINT8_MAX\n    Maximum unsigned 8-bit integer.\n\n    The maximum unsigned 8-bit integer is given by `2^8 - 1`.\n\n    Examples\n    --------\n    > UINT8_MAX\n    255\n\n    See Also\n    --------\n    INT8_MAX\n",
	"UINT8_NUM_BYTES": "\nUINT8_NUM_BYTES\n    Size (in bytes) of an 8-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT8_NUM_BYTES\n    1\n\n    See Also\n    --------\n    INT8_NUM_BYTES, UINT16_NUM_BYTES, UINT32_NUM_BYTES\n",
	"umask": "\numask( [mask,] [options] )\n    Returns the current process mask, if not provided a mask; otherwise, sets\n    the process mask and returns the previous mask.\n\n    A mask is a set of bits, each of which restricts how its corresponding\n    permission is set for newly created files.\n\n    On POSIX platforms, each file has a set of attributes that control who can\n    read, write, or execute that file. Upon creating a file, file permissions\n    must be set to an initial setting. The process mask restricts those\n    permission settings.\n\n    If the mask contains a bit set to \"1\", the corresponding initial file\n    permission is disabled. If the mask contains a bit set to \"0\", the\n    corresponding permission is left to be determined by the requesting process\n    and the system.\n\n    The process mask is thus a filter that removes permissions as a file is\n    created; i.e., each bit set to a \"1\" removes its corresponding permission.\n\n    In octal representation, a mask is a four digit number, e.g., 0077,\n    comprised as follows:\n\n    - 0: special permissions (setuid, setgid, sticky bit)\n    - 0: (u)ser/owner permissions\n    - 7: (g)roup permissions\n    - 7: (o)thers/non-group permissions\n\n    Octal codes correspond to the following permissions:\n\n    - 0: read, write, execute\n    - 1: read, write\n    - 2: read, execute\n    - 3: read\n    - 4: write, execute\n    - 5: write\n    - 6: execute\n    - 7: no permissions\n\n    If provided fewer than four digits, the mask is left-padded with zeros.\n\n    Note, however, that only the last three digits (i.e., the file permissions\n    digits) of the mask are actually used when the mask is applied.\n\n    Permissions can be represented using the following symbolic form:\n\n        u=rwx,g=rwx,o=rwx\n\n    where\n\n    - u: user permissions\n    - g: group permissions\n    - o: other/non-group permissions\n    - r: read\n    - w: write\n    - x: execute\n\n    When setting permissions using symbolic notation, the function accepts a\n    mask expression of the form:\n\n        [<classes>]<operator><symbols>\n\n    where \"classes\" may be a combination of\n\n    - u: user\n    - g: group\n    - o: other/non-group\n    - a: all\n\n    \"symbols\" may be a combination of\n\n    - r: read\n    - w: write\n    - x: execute\n    - X: special execute\n    - s: setuid/gid on execution\n    - t: sticky\n\n    and \"operator\" may be one of\n\n    - `+`: enable\n    - `-`: disable\n    - `=`: enable specified and disable unspecified permissions\n\n    For example,\n\n    - `u-w`: disable user write permissions\n    - `u+w`: enable user write permissions\n    - `u=w`: enable user write permissions and disable user read and execute\n\n    To specify multiple changes, provide a comma-separated list of mask\n    expressions. For example,\n\n        u+rwx,g-x,o=r\n\n    would enable user read, write, and execute permissions, disable group\n    execute permissions, enable other read permissions, and disable other\n    write and execute permissions.\n\n    The `a` class indicates \"all\", which is the same as specifying \"ugo\". This\n    is the default class if a class is omitted when specifying permissions. For\n    example, `+x` is equivalent to `a+x` which is equivalent to `ugo+x` which\n    is equivalent to `u+x,g+x,o+x` and enables execution for all classes.\n\n    Parameters\n    ----------\n    mask: integer|string (optional)\n        Mask or mask expression. If the mask is a string, the mask is assumed to\n        be in symbolic notation.\n\n    options: Object (optional)\n        Options.\n\n    options.symbolic: boolean (optional)\n        Boolean indicating whether to return the mask using symbolic notation.\n\n    Returns\n    -------\n    mask: integer|string\n        Process mask. If provided a mask, the returned value is the previous\n        mask; otherwise, the returned value is the current process mask.\n\n    Examples\n    --------\n    > var mask = umask()\n    <number>\n    > mask = umask( { 'symbolic': true } )\n    <string>\n\n",
	"uncapitalize": "\nuncapitalize( str )\n    Lowercases the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uncapitalized string.\n\n    Examples\n    --------\n    > var out = uncapitalize( 'Beep' )\n    'beep'\n    > out = uncapitalize( 'bOOp' )\n    'bOOp'\n\n    See Also\n    --------\n    capitalize, lowercase\n",
	"uncapitalizeKeys": "\nuncapitalizeKeys( obj )\n    Converts the first letter of each object key to lowercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'AA': 1, 'BB': 2 };\n    > var out = uncapitalizeKeys( obj )\n    { 'aA': 1, 'bB': 2 }\n\n    See Also\n    --------\n    capitalizeKeys, lowercaseKeys\n",
	"uncurry": "\nuncurry( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    ...     return function addY( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > var fcn = uncurry( addX );\n    > var sum = fcn( 2, 3 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( x ) {\n    ...     return function add( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > fcn = uncurry( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addX( x ) {\n    ...     this.x = x;\n    ...     return addY;\n    ... };\n    > function addY( y ) {\n    ...     return this.x + y;\n    ... };\n    > fcn = uncurry( addX, {} );\n    > sum = fcn( 2, 3 )\n    5\n\n    See Also\n    --------\n    curry, uncurryRight\n",
	"uncurryRight": "\nuncurryRight( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Provided arguments are applied starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    ...     return function addY( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > var fcn = uncurryRight( addX );\n    > var sum = fcn( 3, 2 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( y ) {\n    ...     return function add( x ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > fcn = uncurryRight( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addY( y ) {\n    ...     this.y = y;\n    ...     return addX;\n    ... };\n    > function addX( x ) {\n    ...     return x + this.y;\n    ... };\n    > fcn = uncurryRight( addY, {} );\n    > sum = fcn( 3, 2 )\n    5\n\n    See Also\n    --------\n    curry, curryRight, uncurry\n",
	"UnicodeColumnChartSparkline": "\nUnicodeColumnChartSparkline( [data,] [options] )\n    Returns a sparkline column chart instance.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.infinities: boolean (optional)\n        Boolean indicating whether to encode infinite values. Default: false.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    Returns\n    -------\n    chart: ColumnChart\n        Column chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.infinities\n        Indicates whether to encode infinite values.\n\n    chart.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a column chart sparkline.\n\n    chart.yMax\n        Maximum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    chart.yMin\n        Minimum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    Examples\n    --------\n    > var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\n    > var chart = new UnicodeColumnChartSparkline( data );\n    > chart.render()\n    '▁█▅▃▆▆▅'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n",
	"UnicodeLineChartSparkline": "\nUnicodeLineChartSparkline( [data,] [options] )\n    Returns a sparkline line chart instance.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.infinities: boolean (optional)\n        Boolean indicating whether to encode infinite values. Default: false.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    Returns\n    -------\n    chart: LineChart\n        Line chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.infinities\n        Indicates whether to encode infinite values.\n\n    chart.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a line chart sparkline.\n\n    chart.yMax\n        Maximum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    chart.yMin\n        Minimum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    Examples\n    --------\n    > var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\n    > var chart = new UnicodeLineChartSparkline( data );\n    > chart.render()\n    '⡈⠑⠢⠔⠒⠒⠒'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n",
	"UnicodeSparkline": "\nUnicodeSparkline( [data,] [options] )\n    Returns a Unicode sparkline instance.\n\n    The following chart types are supported:\n\n    - column: column chart (e.g., ▃▆▂▄▁▅▅).\n    - line: line chart (e.g., ⡈⠑⠢⠔⠒⠒⠒).\n    - tristate: tristate chart (e.g., ▄▀──▀▄▄▀).\n    - up-down: up/down chart (e.g., ↓↑↑↑↑↓↓↑).\n    - win-loss: win/loss chart (e.g., ┌╵└┴╵╷╷╵).\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.infinities: boolean (optional)\n        Boolean indicating whether to encode infinite values. Default: false.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    options.type: string (optional)\n        Chart type. Default: 'column'.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    Returns\n    -------\n    chart: ColumnChart\n        Column chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.infinities\n        Indicates whether to encode infinite values.\n\n    chart.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a column chart sparkline.\n\n    chart.type\n        Chart type.\n\n    chart.yMax\n        Maximum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    chart.yMin\n        Minimum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    Examples\n    --------\n    > var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\n    > var chart = new UnicodeSparkline( data );\n    > chart.render()\n    '▁█▅▃▆▆▅'\n    > chart.type = 'line';\n    > chart.render()\n    '⡈⠑⠢⠔⠒⠒⠒'\n\n    See Also\n    --------\n    plot, Plot, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n",
	"UnicodeTristateChartSparkline": "\nUnicodeTristateChartSparkline( [data,] [options] )\n    Returns a sparkline tristate chart instance.\n\n    In a tristate chart, negative values are encoded as lower blocks, positive\n    values are encoded as upper blocks, and values equal to zero are encoded as\n    middle lines.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    chart: TristateChart\n        Tristate chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a tristate chart sparkline.\n\n    Examples\n    --------\n    > var data = [ -1, 1, 0, 0, 1, -1, -1, 1 ];\n    > var chart = new UnicodeTristateChartSparkline( data );\n    > chart.render()\n    '▄▀──▀▄▄▀'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n",
	"UnicodeUpDownChartSparkline": "\nUnicodeUpDownChartSparkline( [data,] [options] )\n    Returns a sparkline up/down chart instance.\n\n    Glyphs:\n\n    | Value | Glyph |\n    |:-----:|:-----:|\n    |   1   |   ↑   |\n    |   -1  |   ↓   |\n\n    If provided any other value other than 1 or -1, the value is encoded as a\n    missing value.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    chart: UpDownChart\n        Chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore any values which are not 1 or -1.\n\n    chart.render()\n        Renders an up/down chart sparkline.\n\n    Examples\n    --------\n    > var data = [ -1, 1, 1, 1, 1, -1, -1, 1 ];\n    > var chart = new UnicodeUpDownChartSparkline( data );\n    > chart.render()\n    '↓↑↑↑↑↓↓↑'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeWinLossChartSparkline\n",
	"UnicodeWinLossChartSparkline": "\nUnicodeWinLossChartSparkline( [data,] [options] )\n    Returns a sparkline win/loss chart instance.\n\n    Glyphs:\n\n    | Value | Glyph |\n    |:-----:|:-----:|\n    |   1   |   ╵   |\n    |   -1  |   ╷   |\n    |   2   |   └   |\n    |   -2  |   ┌   |\n\n    If a `2` or `-2` is preceded by a `2` or `-2`,\n\n    | Value | Glyph |\n    |:-----:|:-----:|\n    |   2   |   ┴   |\n    |   -2  |   ┬   |\n\n    Based on the win/loss analogy,\n\n    - 1: win away\n    - 2: win at home\n    - -1: loss away\n    - -2: loss at home\n\n    If provided any other value other than 1, -1, 2, or -2, the value is encoded\n    as a missing value.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    chart: WinLossChart\n        Chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.isDefined()\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore any values which are not 1, -1, 2, or -2.\n\n    chart.render()\n        Renders a win/loss chart sparkline.\n\n    Examples\n    --------\n    > var data = [ -2, 1, 2, 2, 1, -1, -1, 1 ];\n    > var chart = new UnicodeWinLossChartSparkline( data );\n    > chart.render()\n    '┌╵└┴╵╷╷╵'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline\n",
	"UNICODE_MAX": "\nUNICODE_MAX\n    Maximum Unicode code point.\n\n    Examples\n    --------\n    > UNICODE_MAX\n    1114111\n\n    See Also\n    --------\n    UNICODE_MAX_BMP\n",
	"UNICODE_MAX_BMP": "\nUNICODE_MAX_BMP\n    Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n\n    Examples\n    --------\n    > UNICODE_MAX_BMP\n    65535\n\n    See Also\n    --------\n    UNICODE_MAX\n",
	"unlink": "\nunlink( path, clbk )\n    Asynchronously removes a directory entry.\n\n    If a provided path is a symbolic link, the function removes the symbolic\n    link named by the path and does not affect any file or directory named by\n    the contents of the symbolic link.\n\n    Otherwise, the function removes the link named by the provided path and\n    decrements the link count of the file referenced by the link.\n\n    When a file's link count becomes 0 and no process has the file open, the\n    space occupied by the file is freed and the file is no longer accessible.\n\n    If one or more processes have the file open when the last link is removed,\n    the link is removed before the function returns; however, the removal of\n    file contents is postponed until all references to the file are closed.\n\n    If the path refers to a socket, FIFO, or device, processes which have the\n    object open may continue to use it.\n\n    The path argument should *not* be a directory. To remove a directory, use\n    rmdir().\n\n    Parameters\n    ----------\n    path: string|Buffer|integer\n        Entry path.\n\n    clbk: Function\n        Callback to invoke upon removing an entry.\n\n    Examples\n    --------\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     }\n    ... };\n    > unlink( './beep/boop.txt', done );\n\n\nunlink.sync( path )\n    Synchronously removes a directory entry.\n\n   Parameters\n    ----------\n    path: string|Buffer|integer\n        Entry path.\n\n    Returns\n    -------\n    out: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var out = unlink.sync( './beep/boop.txt' );\n\n    See Also\n    --------\n    exists\n",
	"unshift": "\nunshift( collection, ...items )\n    Adds one or more elements to the beginning of a collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    items: ...any\n        Items to add.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = unshift( arr, 6.0, 7.0 )\n    [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = unshift( arr, 3.0, 4.0 )\n    <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 1, '0': 1.0 };\n    > arr = unshift( arr, 2.0, 3.0 )\n    { 'length': 3, '0': 2.0, '1': 3.0, '2': 1.0 }\n\n    See Also\n    --------\n    pop, push, shift\n",
	"until": "\nuntil( predicate, fcn[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to stop invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i >= 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > until( predicate, beep )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhile, untilAsync, untilEach, whilst\n",
	"untilAsync": "\nuntilAsync( predicate, fcn, done[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is falsy, the function invokes `fcn`; otherwise, the\n    function invokes the `done` callback.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i, clbk ) { clbk( null, i >= 5 ); };\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > untilAsync( predicate, fcn, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhileAsync, until, whileAsync\n",
	"untilEach": "\nuntilEach( collection, predicate, fcn[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > untilEach( arr, predicate, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    untilEachRight, whileEach\n",
	"untilEachRight": "\nuntilEachRight( collection, predicate, fcn[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > untilEachRight( arr, predicate, logger )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n\n    See Also\n    --------\n    untilEach, whileEachRight\n",
	"unzip": "\nunzip( arr[, idx] )\n    Unzips a zipped array (i.e., a nested array of tuples).\n\n    Parameters\n    ----------\n    arr: Array\n        Zipped array.\n\n    idx: Array<number> (optional)\n        Array of indices specifying which tuple elements to unzip.\n\n    Returns\n    -------\n    out: Array\n        Array of unzipped arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > var out = unzip( arr )\n    [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n\n    // Provide indices:\n    > arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > out = unzip( arr, [ 0, 2 ] )\n    [ [ 1, 2 ], [ 3, 4 ] ]\n\n    See Also\n    --------\n    zip\n",
	"uppercase": "\nuppercase( str )\n    Converts a `string` to uppercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uppercase string.\n\n    Examples\n    --------\n    > var out = uppercase( 'bEEp' )\n    'BEEP'\n\n    See Also\n    --------\n    capitalize, lowercase\n",
	"uppercaseKeys": "\nuppercaseKeys( obj )\n    Converts each object key to uppercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = uppercaseKeys( obj )\n    { 'A': 1, 'B': 2 }\n\n    See Also\n    --------\n    capitalizeKeys, lowercaseKeys\n",
	"US_STATES_ABBR": "\nUS_STATES_ABBR()\n    Returns a list of US state two-letter abbreviations in alphabetical order\n    according to state name.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state two-letter abbreviations.\n\n    Examples\n    --------\n    > var list = US_STATES_ABBR()\n    [ 'AL', 'AK', 'AZ', 'AR', ... ]\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES\n",
	"US_STATES_CAPITALS": "\nUS_STATES_CAPITALS()\n    Returns a list of US state capitals in alphabetical order according to state\n    name.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state capitals.\n\n    Examples\n    --------\n    > var list = US_STATES_CAPITALS()\n    [ 'Montgomery', 'Juneau', 'Phoenix', ... ]\n\n    See Also\n    --------\n    US_STATES_ABBR, US_STATES_CAPITALS_NAMES, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n",
	"US_STATES_CAPITALS_NAMES": "\nUS_STATES_CAPITALS_NAMES()\n    Returns an object mapping US state capitals to state names.\n\n    Returns\n    -------\n    out: Object\n        An object mapping US state capitals to state names.\n\n    Examples\n    --------\n    > var out = US_STATES_CAPITALS_NAMES()\n    { 'Montgomery': 'Alabama', 'Juneau': 'Alaska', ... }\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n",
	"US_STATES_NAMES": "\nUS_STATES_NAMES()\n    Returns a list of US state names in alphabetical order.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state names.\n\n    Examples\n    --------\n    > var list = US_STATES_NAMES()\n    [ 'Alabama', 'Alaska', 'Arizona', ... ]\n\n    See Also\n    --------\n    US_STATES_ABBR, US_STATES_CAPITALS, US_STATES_CAPITALS_NAMES, US_STATES_NAMES_CAPITALS\n",
	"US_STATES_NAMES_CAPITALS": "\nUS_STATES_NAMES_CAPITALS()\n    Returns an object mapping US state names to state capitals.\n\n    Returns\n    -------\n    out: Object\n        An object mapping US state names to state capitals.\n\n    Examples\n    --------\n    > var out = US_STATES_NAMES_CAPITALS()\n    { 'Alabama': 'Montgomery', 'Alaska': 'Juneau', ... }\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n",
	"utf16ToUTF8Array": "\nutf16ToUTF8Array( str )\n    Converts a UTF-16 encoded string to an array of integers using UTF-8\n    encoding.\n\n    The following byte sequences are used to represent a character. The sequence\n    depends on the code point:\n\n        0x00000000 - 0x0000007F:\n            0xxxxxxx\n\n        0x00000080 - 0x000007FF:\n            110xxxxx 10xxxxxx\n\n        0x00000800 - 0x0000FFFF:\n            1110xxxx 10xxxxxx 10xxxxxx\n\n        0x00010000 - 0x001FFFFF:\n            11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n    The `x` bit positions correspond to code point bits.\n\n    Only the shortest possible multi-byte sequence which can represent a code\n    point is used.\n\n    Parameters\n    ----------\n    str: string\n        UTF-16 encoded string.\n\n    Returns\n    -------\n    out: Array\n        Array of integers.\n\n    Examples\n    --------\n    > var str = '☃';\n    > var out = utf16ToUTF8Array( str )\n    [ 226, 152, 131 ]\n\n",
	"waterfall": "\nwaterfall( fcns, clbk[, thisArg] )\n    Executes functions in series, passing the results of one function as\n    arguments to the next function.\n\n    The last argument applied to each waterfall function is a callback. The\n    callback should be invoked upon a series function completion. The first\n    argument is reserved as an error argument (which can be `null`). Any results\n    which should be passed to the next function in the series should be provided\n    beginning with the second argument.\n\n    If any function calls the provided callback with a truthy `error` argument,\n    the waterfall suspends execution and immediately calls the completion\n    callback for subsequent error handling.\n\n    Execution is *not* guaranteed to be asynchronous. To ensure asynchrony, wrap\n    the completion callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > waterfall( fcns, done );\n\n\nwaterfall.factory( fcns, clbk[, thisArg] )\n    Returns a reusable waterfall function.\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    fcn: Function\n        Waterfall function.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > var waterfall = waterfall.factory( fcns, done );\n    > waterfall();\n    > waterfall();\n    > waterfall();\n\n",
	"whilst": "\nwhilst( predicate, fcn[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i < 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > whilst( predicate, beep )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhile, until, whileAsync, whileEach\n",
	"whileAsync": "\nwhileAsync( predicate, fcn, done[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is truthy, the function invokes `fcn`; otherwise, the\n    function invokes the `done` callback.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i, clbk ) { clbk( null, i < 5 ); };\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > whileAsync( predicate, fcn, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhileAsync, untilAsync, whilst\n",
	"whileEach": "\nwhileEach( collection, predicate, fcn[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > whileEach( arr, predicate, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    untilEach, whileEachRight\n",
	"whileEachRight": "\nwhileEachRight( collection, predicate, fcn[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > whileEachRight( arr, predicate, logger )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n\n    See Also\n    --------\n    whileEach, untilEachRight\n",
	"writeFile": "\nwriteFile( file, data[, options,] clbk )\n    Asynchronously writes data to a file.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    data: string|Buffer\n        Data to write.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. The encoding option is ignored if the data argument is a\n        buffer. Default: 'utf8'.\n\n    options.flag: string (optional)\n        Flag. Default: 'w'.\n\n    options.mode: integer (optional)\n        Mode. Default: 0o666;\n\n    clbk: Function\n        Callback to invoke upon writing data to a file.\n\n    Examples\n    --------\n    > function onWrite( error ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     }\n    ... };\n    > writeFile( './beep/boop.txt', 'beep boop', onWrite );\n\n\nwriteFile.sync( file, data[, options] )\n    Synchronously writes data to a file.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    data: string|Buffer\n        Data to write.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. The encoding option is ignored if the data argument is a\n        buffer. Default: 'utf8'.\n\n    options.flag: string (optional)\n        Flag. Default: 'w'.\n\n    options.mode: integer (optional)\n        Mode. Default: 0o666;\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = writeFile.sync( './beep/boop.txt', 'beep boop' );\n\n    See Also\n    --------\n    exists, readFile\n",
	"zip": "\nzip( arr[, options] )\n    Generates array tuples from input arrays.\n\n    Parameters\n    ----------\n    arr: ...Array\n        Input arrays to be zipped.\n\n    options: Object (optional)\n        Options.\n\n    options.trunc: boolean (optional)\n        Boolean indicating whether to truncate arrays longer than the shortest\n        input array. Default: `true`.\n\n    options.fill: any (optional)\n        Fill value used for arrays of unequal length. Default: `null`.\n\n    options.arrays: boolean (optional)\n        Boolean indicating whether an input array should be interpreted as an\n        array of arrays to be zipped. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var out = zip( [ 1, 2 ], [ 'a', 'b' ] )\n    [ [ 1, 'a' ], [ 2, 'b' ] ]\n\n    // Turn off truncation:\n    > var opts = { 'trunc': false };\n    > out = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts )\n    [ [ 1, 'a' ], [ 2, 'b' ], [ 3, null ] ]\n\n    See Also\n    --------\n    unzip\n",
	"ztest": "\nztest( x, sigma[, options] )\n    Computes a one-sample z-test.\n\n    The function performs a one-sample z-test for the null hypothesis that the\n    data in array or typed array `x` is drawn from a normal distribution with\n    mean zero and standard deviation `sigma`.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Data array.\n\n    sigma: number\n        Known standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.mu: number (optional)\n        Hypothesized true mean under the null hypothesis. Set this option to\n        test whether the data comes from a distribution with the specified `mu`.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for mean.\n\n    out.nullValue: number\n        Assumed mean value under H0.\n\n    out.sd: number\n        Standard error.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test (`One-Sample z-test`).\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // One-sample z-test:\n    > var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 212 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ... }\n    > var out = ztest( x, 2.0 )\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: ~0.180,\n        statistic: ~-1.34,\n        ci: [ ~-0.66, ~0.124 ],\n        ...\n    }\n\n    // Choose custom significance level and print output:\n    > arr = [ 2, 4, 3, 1, 0 ];\n    > out = ztest( arr, 2.0, { 'alpha': 0.01 });\n    > table = out.print()\n    One-sample z-test\n\n    Alternative hypothesis: True mean is not equal to 0\n\n        pValue: 0.0253\n        statistic: 2.2361\n        99% confidence interval: [-0.3039,4.3039]\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n\n    // Test for a mean equal to five:\n    > var arr = [ 4, 4, 6, 6, 5 ];\n    > out = ztest( arr, 1.0, { 'mu': 5 })\n    {\n        rejected: false,\n        pValue: 1,\n        statistic: 0,\n        ci: [ ~4.123, ~5.877 ],\n        // ...\n    }\n\n    // Perform one-sided tests:\n    > arr = [ 4, 4, 6, 6, 5 ];\n    > out = ztest( arr, 1.0, { 'alternative': 'less' });\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: 1,\n        statistic: 11.180339887498949,\n        ci: [ -Infinity, 5.735600904580115 ],\n        // ...\n    }\n    > out = ztest( arr, 1.0, { 'alternative': 'greater' });\n    {\n        alpha: 0.05,\n        rejected: true,\n        pValue: 0,\n        statistic: 11.180339887498949,\n        ci: [ 4.264399095419885, Infinity ],\n        //...\n    }\n\n    See Also\n    --------\n    ztest2\n",
	"ztest2": "\nztest2( x, y, sigmax, sigmay[, options] )\n    Computes a two-sample z-test.\n\n    By default, the function performs a two-sample z-test for the null\n    hypothesis that the data in arrays or typed arrays `x` and `y` is\n    independently drawn from normal distributions with equal means and known\n    standard deviations `sigmax` and `sigmay`.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    sigmax: number\n        Known standard deviation of first group.\n\n    sigmay: number\n        Known standard deviation of second group.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.difference: number (optional)\n        Number denoting the difference in means under the null hypothesis.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed difference in means under H0.\n\n    out.xmean: number\n        Sample mean of `x`.\n\n    out.ymean: number\n        Sample mean of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Drawn from Normal(0,2):\n    > var x = [ -0.21, 0.14, 1.65, 2.11, -1.86, -0.29, 1.48, 0.81, 0.86, 1.04 ];\n    // Drawn from Normal(1,2):\n    > var y = [ -1.53, -2.93, 2.34, -1.15, 2.7, -0.12, 4.22, 1.66, 3.43, 4.66 ];\n    > var out = ztest2( x, y, 2.0, 2.0 )\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: ~0.398,\n        statistic: ~-0.844\n        ci: [ ~-2.508, ~0.988 ],\n        alternative: 'two-sided',\n        method: 'Two-sample z-test',\n        nullValue: 0,\n        xmean: ~0.573,\n        ymean: ~1.328\n    }\n\n    // Print table output:\n    > var table = out.print();\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.3986\n        statistic: -0.8441\n        95% confidence interval: [-2.508,0.998]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose a different significance level than `0.05`:\n    > out = ztest2( x, y, 2.0, 2.0, { 'alpha': 0.4 });\n    > table = out.print();\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.3986\n        statistic: -0.8441\n        60% confidence interval: [-1.5078,-0.0022]\n\n    Test Decision: Reject null in favor of alternative at 40% significance level\n\n    // Perform one-sided tests:\n    > out = ztest2( x, y, 2.0, 2.0, { 'alternative': 'less' });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is less than 0\n\n        pValue: 0.1993\n        statistic: -0.8441\n        95% confidence interval: [-Infinity,0.7162]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n\n    > out = ztest2( x, y, 2.0, 2.0, { 'alternative': 'greater' });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is greater than 0\n\n        pValue: 0.8007\n        statistic: -0.8441\n        95% confidence interval: [-2.2262,Infinity]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Test for a difference in means besides zero:\n    > var rnorm = base.random.normal.factory({ 'seed': 372 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm( 2.0, 1.0 );\n    ... }\n    > y = new Array( 100 );\n    ... for ( i = 0; i < x.length; i++ ) {\n    ...     y[ i ] = rnorm( 0.0, 2.0 );\n    ... }\n    > out = ztest2( x, y, 1.0, 2.0, { 'difference': 2.0 })\n    {\n        rejected: false,\n        pValue: ~0.35,\n        statistic: ~-0.935\n        ci: [ ~1.353, ~2.229 ],\n        // ...\n    }\n\n    See Also\n    --------\n    ztest\n"
};

module.exports = db;
