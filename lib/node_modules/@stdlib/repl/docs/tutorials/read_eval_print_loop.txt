| \*Tutorial: REPL\s

• At the command prompt, enter

  ```javascript
  pres();
  ```

  followed by \*RETURN\s to see the list of available commands.

• Enter

  ```javascript
  n();
  ```

  followed by \*RETURN\s to advance the tutorial.

---

• As this tutorial is a REPL presentation, enter

  ```javascript
  presentationStop();
  ```

  followed by \*RETURN\s to end this tutorial at any time.

• Enter

  ```javascript
  quit();
  ```

  to exit the REPL altogether.

---

| This tutorial introduces you to the REPL environment.

---

| REPL stands for \*r\sead-\*e\sval-\*p\srint \*l\soop\s.

---

| A REPL...

\s

--

• ...is an interactive programming environment

--

• ...which receives individual user inputs (e.g., single expressions)

--

• ...evaluates those inputs

--

• ...and returns the result.

---


| Accordingly, an entered program is executed piecewise and sequentially.

---

In this tutorial, you've already been using the REPL when you've advanced
the tutorial and printed the list of available commands.

As another simple example, evaluate the following input

```javascript
1+1
```

--

\s
In this case, we entered `1+1` (user inputs) and instructed the REPL to evaluate
those inputs (\*RETURN\s), and the REPL returned (and printed) the result.

--

\s
After returning the result, the REPL provides another prompt, thus completing
the \*r\sead-\*e\sval-\*p\srint \*l\soop.

---

| REPLs are useful for...
\s

--

• learning programming languages (such as JavaScript)

--

• debugging (including when embedded in running applications)

--

• demos (including live coding)

--

• interactivity (such as during iterative development)

---

To get started using this REPL, a few commands will prove immensely useful.

---

The first command is

```javascript
help()
```

Run the above command to see a list of REPL commands.

---

To see the documentation for a specific REPL alias, provide the alias to the
\*help()\s command.

For example, run

```javascript
help( 'base.sin' )
```

to see the documentation for the 'base.sin' function.

---

On the previous slide, you specified the alias via a string representing the
alias name.

You can also provide a reference pointing to the aliased value.

For example, run

```javascript
help( base.sin )
```

to see the same documentation as before.

---

Additionally, for objects having known methods, you can print method
documentation.

For example, run

```javascript
help( base.random.randu.factory )
```

to see the \*factory()\s method documentation.

---

Lastly, for select objects having a known constructor, you can provide
instances.

For example, create a \*Float64Array\s

```javascript
var x = new Float64Array( 10 );
```

and then run

```javascript
help( x )
```

which will print the documentation for \*Float64Array\s.

---

The \*help()\s command provides detailed API documentation.

Sometimes, you just want to know the function signature and a brief
description.

For this use case, you can use another command: \*info()\s.

For example, run

```javascript
info( 'base.sin' )
```

to see abbreviated API documentation for \*base.sin\s.

---

Similar to \*help()\s, you can provide a variable reference.

For example, run

```javascript
info( base.sin )
```

to see the same abbreviated API documentation.

---

Another useful command is \*example()\s, which runs the example code found in
the documentation printed by \*help()\s.

For example, run

```javascript
example( 'base.sin' )
```

to run the example code found in the documentation for \*base.sin\s.

---

Similarly to \*help()\s and \*info()\s, you can provide a variable reference.

For example, run

```javascript
example( base.sin )
```

to again run the example code for \*base.sin\s.

---

Finally, two other commands are useful when wanting to resolve aliases and
package implementations.

---

To determine which package corresponds to a specified alias, use
\*alias2pkg()\s.

For example, run

```javascript
alias2pkg( 'base.sin' )
```

or

```javascript
alias2pkg( base.sin )
```

to resolve the package for \*base.sin\s.

---

To determine which alias corresponds to a specified package, use
\*pkg2alias()\s.

For example, run

```javascript
pkg2alias( '@stdlib/math/base/special/sin' )
```

to resolve the alias for \*@stdlib/math/base/special/sin\s.

---

When you're working in a REPL, you're often interested in viewing the
results of the previously invoked command.

Accordingly, when you run

```javascript
1+1
```

you should see the result \*2\s.

---

However, at other times you'll want to silence printed output.

To do so, add a \*semicolon\s to any statement.

For example, when you add a semicolon to the previous statement

```javascript
1+1;
```

no result is printed.

---

During iterative development, you'll occasionally forget to assign the
results of the last expression or statement.

Fortunately, the REPL has a special variable which stores the last result:
\*ans\s.

For example, run the previous statement

```javascript
1+1;
```

followed by

```javascript
ans
```

to see that \*ans\s is assigned the value \*2\s.

---

While not encouraged for general use, \*ans\s can be used just like any
other variable within the top-level scope.

---

TODO: vars()

---

TODO: TAB completion (FS APIs)

---

TODO: TAB completion (computed properties)

---

TODO: TAB completion (local scope)

---

TODO: workspaces

---

TODO: top-level await

---

TODO: rerun

---

TODO: rerequire

---

TODO: plotting

---

| The End
