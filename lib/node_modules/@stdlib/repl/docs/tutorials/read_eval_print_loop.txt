| \*Tutorial: REPL\s

• At the command prompt, enter

```javascript
pres();
```

followed by \*RETURN\s to see the list of available commands.

• Enter

```javascript
n();
```

followed by \*RETURN\s to advance the tutorial.

---

| This tutorial introduces you to the REPL environment.

---

| REPL stands for \*r\sead-\*e\sval-\*p\srint \*l\soop\s.

---

| A REPL...

\s

--

• ...is an interactive programming environment

--

• ...which receives individual user inputs (e.g., single expressions)

--

• ...evaluates those inputs

--

• ...and returns the result.

---


| Accordingly, an entered program is executed piecewise and sequentially.

---

In this tutorial, you've already been using the REPL when you've advanced
the tutorial and printed the list of available commands.

As another simple example, evaluate the following input

```javascript
1+1
```

--

\s
In this case, we entered `1+1` (user inputs) and instructed the REPL to evaluate
those inputs (\*RETURN\s), and the REPL returned (and printed) the result.

--

\s
After returning the result, the REPL provides another prompt, thus completing
the \*r\sead-\*e\sval-\*p\srint \*l\soop.

---

| REPLs are useful for...
\s

--

• learning programming languages (such as JavaScript)

--

• debugging (including when embedded in running applications)

--

• interactivity

---

TODO: help and docs

---

TODO: silencing printing

---

TODO: TAB completion (FS APIs)

---

TODO: TAB completion (computed properties)

---

TODO: TAB completion (local scope)

---

TODO: workspaces

---

TODO: top-level await

---

TODO: rerun

---

TODO: rerequire

---

TODO: plotting

---

| The End
