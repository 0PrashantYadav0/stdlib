'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var repl = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof repl, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		function foo() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			repl( value, noop );
		};
	}
});

tape( 'the function throws an error if provided a callback argument which is not a function (no options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			repl( value );
		};
	}
});

tape( 'the function throws an error if provided a callback argument which is not a function (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			repl( {}, value );
		};
	}
});

tape( 'the function starts a REPL environment', function test( t ) {
	repl( onStart );

	function onStart( error, server ) {
		if ( error ) {
			t.ok( false, error.message );
			return t.end();
		}
		t.ok( true, 'starts a REPL' );
		server.rli.on( 'close', onClose );
		server.rli.write( '.exit\n' );
	}

	function onClose() {
		setTimeout( onEnd, 1000 );
	}

	function onEnd() {
		t.end();
	}
});

tape( 'the function starts a REPL environment (options)', function test( t ) {
	repl( {}, onStart );

	function onStart( error, server ) {
		if ( error ) {
			t.ok( false, error.message );
			return t.end();
		}
		t.ok( true, 'starts a REPL' );
		server.rli.on( 'close', onClose );
		server.rli.write( '.exit\n' );
	}

	function onClose() {
		setTimeout( onEnd, 1000 );
	}

	function onEnd() {
		t.end();
	}
});
