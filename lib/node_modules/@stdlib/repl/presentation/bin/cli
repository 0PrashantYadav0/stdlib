#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var REPL = require( '@stdlib/repl' );
var lowercase = require( '@stdlib/string/lowercase' );
var Presentation = require( './../lib' ); // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var opts1;
	var opts2;
	var repl;
	var pres; // eslint-disable-line no-unused-vars
	var args;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line flags:
	flags = cli.flags();

	// Handle REPL options...
	opts1 = {};
	if ( flags.input_prompt ) {
		opts1.inputPrompt = flags.input_prompt;
	}
	if ( flags.logfile ) {
		opts1.log = flags.logfile;
	}
	if ( flags.output_prompt ) {
		opts1.outputPrompt = flags.output_prompt;
	}
	if ( flags.padding ) {
		opts1.padding = parseInt( flags.padding, 10 );
	}
	if ( flags.quiet ) {
		opts1.quiet = flags.quiet;
	}
	if ( flags.save ) {
		opts1.save = flags.save;
	}
	if ( flags.timeout ) {
		opts1.timeout = parseInt( flags.timeout, 10 );
	}

	// Handle presentation options...
	if ( flags.border_top ) {
		opts2.borderTop = flags.border_top;
	}
	if ( flags.border_bottom ) {
		opts2.borderBottom = flags.border_bottom;
	}
	if ( flags.border_left ) {
		opts2.borderLeft = flags.border_left;
	}
	if ( flags.border_right ) {
		opts2.borderRight = flags.border_right;
	}
	if ( flags.width ) {
		opts2.width = parseInt( flags.width, 10 );
	}
	if ( flags.height ) {
		opts2.height = parseInt( flags.height, 10 );
	}
	if ( flags.workspace ) {
		opts2.workspace = flags.workspace;
	}
	if ( flags.counter ) {
		flags.counter = lowercase( flags.counter );
		if ( flags.counter === 'true' || flags.counter === 't' ) {
			opts2.counter = true;
		} else if ( flags.counter === 'false' || flags.counter === 'f' ) {
			opts2.counter = false;
		} else {
			opts2.counter = flags.counter;
		}
	}
	opts2.load = args[ 0 ];

	// Create a new REPL instance:
	repl = new REPL( opts1 );

	// Create a new REPL presentation:
	pres = new Presentation( repl, opts2 );
}

main();
