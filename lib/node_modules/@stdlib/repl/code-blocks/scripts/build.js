/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolvePath = require( 'path' ).resolve;
var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var replace = require( '@stdlib/string/replace' );
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var aliases = require( '@stdlib/namespace/aliases' );
var help = require( '@stdlib/repl/help' );


// VARIABLES //

var debug = logger( 'repl:code-blocks:build' );

// Output file paths:
var OUTPUT_JSON = resolvePath( __dirname, '..', 'data', 'data.json' );
var OUTPUT_CSV = resolvePath( __dirname, '..', 'data', 'data.csv' );

// Identifier for inserting 'See Also' links:
var SEE_ALSO = '\n    See Also\n    --------\n';

// Identifier for an examples section:
var EXAMPLES = '    Examples';

// Identifier for an examples heading underline:
var EXAMPLES_UNDERLINE = '    --------';

// Regular expression for a line that starts with a space:
var RE_SPACE = /^\s/;

// Regular expression for a command prompt:
var RE_PROMPT = /^(\s{4}>\s*)/;

// Regular expression for a command continuation:
var RE_CONTINUATION = /^(\s{4}\.{3}\s)/;

// Regular expression for command input:
var RE_COMMAND_INPUT = /^(\s{4}(?:>|\.{3})\s*)/;

// Regular expression for a comment:
var RE_COMMENT = /^(\s{4}\/\/.+)/;

// Regular expression for indentation:
var RE_IDENTATION = /^(\s{4})/;

// Regular expression for indentation (global):
var RE_IDENTATION_GLOBAL = /^(\s{4})/g;


// FUNCTIONS //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var ALIASES;
	var alias;
	var fopts;
	var lines;
	var line;
	var json;
	var keys;
	var csv;
	var acc;
	var txt;
	var flg;
	var tmp;
	var i;
	var j;

	debug( 'Generating REPL examples.' );
	fopts = {
		'encoding': 'utf8'
	};
	json = {};

	ALIASES = aliases();
	for ( i = 0; i < ALIASES.length; i++ ) {
		alias = ALIASES[ i ];

		debug( 'Loading REPL text: %s', alias );
		txt = help( alias );
		if ( txt === null ) {
			debug( 'Unable to resolve alias help text: %s', alias );
			continue;
		}
		debug( 'Extracting examples section.' );
		lines = txt.split( '\n' );
		flg = false;
		acc = '';

		// NOTE: the following only extracts the first example!!!
		for ( j = 0; j < lines.length; j++ ) {
			line = lines[ j ];
			if (
				line === EXAMPLES &&
				lines[ j+1 ] === EXAMPLES_UNDERLINE
			) {
				debug( 'Found an examples section.' );
				flg = true;
				acc = '';
				j += 1; // skip the next line
				continue;
			}
			if ( flg === false ) {
				continue;
			}
			if (
				line !== SEE_ALSO &&
				RE_SPACE.test( line )
			) {
				if ( RE_COMMAND_INPUT.test( line ) ) {
					line = replace( line, RE_PROMPT, '' );
					line = replace( line, RE_CONTINUATION, '' );
					line = replace( line, RE_IDENTATION_GLOBAL, '  ' );
					acc += line + '\n';
				} else if ( RE_COMMENT.test( line ) ) {
					line = replace( line, RE_IDENTATION, '' );
					acc += '\n' + line + '\n';
				}
			} else if ( line !== '' ) {
				debug( 'Finished extracting section.' );
				flg = false;
				break;
			}
		}
		if ( acc === '' ) {
			debug( 'Unable to extract an examples section.' );
		} else {
			json[ alias ] = acc;
		}
	}
	debug( 'Writing to JSON file.' );
	writeFile( OUTPUT_JSON, JSON.stringify( json ), fopts );

	debug( 'Writing to CSV file.' );
	keys = objectKeys( json );
	csv = '';
	for ( i = 0; i < keys.length; i++ ) {
		tmp = replace( json[ keys[i] ], /\r?\n/g, '\\n' );
		tmp = replace( tmp, '"', '\\"' );
		csv += keys[ i ] + ',"' + tmp + '"\n'; // Note: ensures trailing newline
	}
	writeFile( OUTPUT_CSV, csv, fopts );
}


// MAIN //

main();
