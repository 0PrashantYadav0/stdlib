/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var logger = require( 'debug' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// VARIABLES //

var debug = logger( 'repl:command:presentation_stop' );


// MAIN //

/**
* Returns a callback to be invoked upon calling the `presentationStop` command.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Function} callback
*/
function command( repl ) {
	return onCommand;

	/**
	* Stops a REPL presentation.
	*
	* @private
	* @param {NonNegativeInteger} id - presentation identifier
	*/
	function onCommand( id ) {
		var FLG;
		var err;
		var o;

		if ( !isNonNegativeInteger( id ) ) {
			err = new TypeError( 'invalid argument. Invalid presentation identifier. Must be a nonnegative integer. Value: `' + id + '`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		if ( !hasOwnProp( repl._internal.presentation.cache, id ) ) {
			return;
		}
		// Retrieve the presentation data:
		o = repl._internal.presentation.cache[ id ];

		// Delete the presentation workspace...
		if ( o.w !== 'base' ) {
			FLG = repl._quiet;
			repl._quiet = true; // temporarily silence logging
			repl._context.deleteWorkspace( o.w );
			repl._quiet = FLG;
		}
		// Ensure that we no longer watch presentation files (if enabled):
		o.p.unwatch();

		// Update the internal resource cache for tracking presentations:
		delete repl._internal.presentation.cache[ id ];
	}
}


// EXPORTS //

module.exports = command;
