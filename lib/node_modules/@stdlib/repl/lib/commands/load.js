/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;


// VARIABLES //

var debug = logger( 'repl:command:load' );


// MAIN //

/**
* Returns a callback to be invoked upon calling the `load` command.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Function} callback
*/
function command( repl ) {
	return onCommand;

	/**
	* Loads and evaluates a JavaScript file line-by-line.
	*
	* @private
	* @param {string} fpath - file path
	* @returns {void}
	*/
	function onCommand( fpath ) {
		var err;
		if ( !isString( fpath ) ) {
			err = new TypeError( 'invalid argument. Must provide a string. Value: `'+fpath+'`.' );
			debug( 'Error: %s', err.message );
			repl._ostream.write( 'Error: '+err.message+'\n' );
			return;
		}
		repl.once( 'drain', onDrain );

		/**
		* Callback invoked upon a 'drain' event.
		*
		* @private
		*/
		function onDrain() {
			try {
				debug( 'Loading a file...' );
				repl.load( fpath, clbk );
			} catch ( error ) {
				debug( 'Error: %s', error.message );

				// TODO: determine whether we need to perform ANSI escape magic here! (the error message gets printed on the wrong line!)
				repl._ostream.write( 'Error: '+error.message+'\n' );
			}
		}

		/**
		* Callback invoked upon loading a file.
		*
		* @private
		* @param {Error} [error] - error object
		*/
		function clbk( error ) {
			if ( error ) {
				debug( 'Error: %s', error.message );
				return;
			}
			debug( 'Successfully loaded file.' );
		}
	}
}


// EXPORTS //

module.exports = command;
