'use strict';

var NS = {};


// MODULES //

var getKeys = require( 'object-keys' ).shim();
NS.FLOAT16_PRECISION = require( '@stdlib/math/constants/float16-precision' );
NS.FLOAT32_NINF = require( '@stdlib/math/constants/float32-ninf' );
NS.FLOAT32_PINF = require( '@stdlib/math/constants/float32-pinf' );
NS.FLOAT32_PRECISION = require( '@stdlib/math/constants/float32-precision' );
NS.FLOAT32_SMALLEST_NORMAL = require( '@stdlib/math/constants/float32-smallest-normal' );
NS.FLOAT32_SMALLEST_SUBNORMAL = require( '@stdlib/math/constants/float32-smallest-subnormal' );
NS.CATALAN = require( '@stdlib/math/constants/float64-catalan' );
NS.E = require( '@stdlib/math/constants/float64-e' );
NS.EPS = require( '@stdlib/math/constants/float64-eps' );
NS.EULERGAMMA = require( '@stdlib/math/constants/float64-eulergamma' );
NS.FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
NS.GLAISHER = require( '@stdlib/math/constants/float64-glaisher-kinkelin' );
NS.HALF_LN2 = require( '@stdlib/math/constants/float64-half-ln2' );
NS.LN_SQRT_TWO_PI = require( '@stdlib/math/constants/float64-ln-sqrt-two-pi' );
NS.LN2 = require( '@stdlib/math/constants/float64-ln2' );
NS.FLOAT64_MAX = require( '@stdlib/math/constants/float64-max' );
NS.FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/math/constants/float64-max-base10-exponent' );
NS.FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base10-exponent-subnormal' );
NS.FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
NS.FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
NS.FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/math/constants/float64-max-safe-integer' );
NS.FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/math/constants/float64-min-base10-exponent' );
NS.FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base10-exponent-subnormal' );
NS.FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent' );
NS.FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
NS.FLOAT64_MIN_SAFE_INTEGER = require( '@stdlib/math/constants/float64-min-safe-integer' );
NS.NINF = require( '@stdlib/math/constants/float64-ninf' );
NS.PHI = require( '@stdlib/math/constants/float64-phi' );
NS.PI = require( '@stdlib/math/constants/float64-pi' );
NS.PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );
NS.PINF = require( '@stdlib/math/constants/float64-pinf' );
NS.FLOAT64_PRECISION = require( '@stdlib/math/constants/float64-precision' );
NS.FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
NS.FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/math/constants/float64-smallest-subnormal' );
NS.SQRT_EPS = require( '@stdlib/math/constants/float64-sqrt-eps' );
NS.SQRT_HALF = require( '@stdlib/math/constants/float64-sqrt-half' );
NS.SQRT_PHI = require( '@stdlib/math/constants/float64-sqrt-phi' );
NS.SQRT_TWO = require( '@stdlib/math/constants/float64-sqrt-two' );
NS.SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );
NS.TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
NS.INT16_MAX = require( '@stdlib/math/constants/int16-max' );
NS.INT16_MIN = require( '@stdlib/math/constants/int16-min' );
NS.INT32_MAX = require( '@stdlib/math/constants/int32-max' );
NS.INT32_MIN = require( '@stdlib/math/constants/int32-min' );
NS.INT8_MAX = require( '@stdlib/math/constants/int8-max' );
NS.INT8_MIN = require( '@stdlib/math/constants/int8-min' );
NS.UINT16_MAX = require( '@stdlib/math/constants/uint16-max' );
NS.UINT32_MAX = require( '@stdlib/math/constants/uint32-max' );
NS.UINT8_MAX = require( '@stdlib/math/constants/uint8-max' );


// VARIABLES //

var KEYS = getKeys( NS );


// BIND //

/**
* Binds functions to a REPL namespace.
*
* @private
* @param {Object} ns - namespace
* @returns {Object} input namespace
*
* @example
* var ns = {};
* bind( ns );
* // returns <input_namespace>
*/
function bind( ns ) {
	var key;
	var i;
	for ( i = 0; i < KEYS.length; i++ ) {
		key = KEYS[ i ];
		ns[ key ] = NS[ key ];
	}
	return ns;
} // end FUNCTION bind()


// EXPORTS //

module.exports = bind;

