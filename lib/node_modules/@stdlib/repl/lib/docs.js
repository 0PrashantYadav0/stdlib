// This file is generated by scripts/build.js.
'use strict';

/* eslint-disable quotes */

module.exports = {
	"base.dasum": "\nbase.dasum( N, x, stride )\n    Compute the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* normm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: double\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n\n    > var sum = base.dasum( x.length, x, 1 );\n    19.0\n\n    // Sum every other value:\n    > var N = floor( x.length / 2 );\n\n    > var stride = 2;\n\n    > sum = base.dasum( N, x, stride );\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n\n    > N = floor( x0.length / 2 );\n\n    > sum = base.dasum( N, x1, stride );\n    12.0\n\n\nbase.dasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: double\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n\n    > var sum = base.dasum.ndarray( x.length, x, 1, 0 );\n    19.0\n\n    // Sum the last three elements:\n    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n\n    > sum = base.dasum.ndarray( 3, x, -1, x.length-1 );\n    15.0\n\n    See Also\n    --------\n    base.daxpy, base.dcopy\n",
	"base.daxpy": "\nbase.daxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n\n    > var alpha = 5.0;\n\n    > base.daxpy( x.length, alpha, x, 1, y, 1 );\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = floor( x.length / 2 );\n\n    > base.daxpy( N, alpha, x, 2, y, -1 );\n    [ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n\n    // Create offset views:\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n\n    > N = floor( x0.length / 2 );\n\n    > base.daxpy( N, 5.0, x1, -2, y1, 1 );\n    [ 7.0, 8.0, 9.0, 40.0, 33.0, 22.0 ]\n\n\nbase.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n\n    > var alpha = 5.0;\n\n    > base.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 );\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n\n    > var N = floor( x.length / 2 );\n\n    > base.daxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 );\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.dasum, base.dcopy\n",
	"base.dcopy": "\nbase.dcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n\n    > base.dcopy( x.length, x, 1, y, 1 );\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n\n    > var N = floor( x.length / 2 );\n\n    > base.dcopy( N, x, -2, y, 1 );\n    [ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n\n    > N = floor( x0.length / 2 );\n\n    > base.dcopy( N, x1, -2, y1, 1 );\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n\n    > base.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n\n    > var N = floor( x.length / 2 );\n\n    > base.dcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 );\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dasum, base.daxpy\n",
	"base.random.beta": "\nbase.random.beta( α, β )\n    Returns a pseudorandom number drawn from a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: double\n        First shape parameter.\n\n    β: double\n        Second shape parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 );\n\n\nbase.random.beta.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: double (optional)\n        First shape parameter.\n\n    β: double (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.beta.factory();\n\n    > var r = rand( 1.5, 1.5 );\n\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.beta.factory( 1.5, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.beta.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.beta.NAME;\n    'beta'\n\n\nbase.random.beta.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.beta.PRNG\n\n\nbase.random.beta.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.beta.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.binomial": "\nbase.random.binomial( n, p )\n    Returns a pseudorandom number drawn from a binomial distribution.\n\n    If `n` is not a positive integer or `p` is not a probability, the function\n    returns `NaN`.\n\n    If `n` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: double\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 );\n\n\nbase.random.binomial.factory( [n, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided `n` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `n` and `p`, the returned PRNG requires that both `n` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: double (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.binomial.factory();\n\n    > var r = rand( 20, 0.3 );\n\n    > r = rand( 10, 0.77 );\n\n    // Provide `n` and `p`:\n    > rand = base.random.binomial.factory( 10, 0.8 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.binomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.binomial.NAME;\n    'binomial'\n\n\nbase.random.binomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.binomial.PRNG\n\n\nbase.random.binomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.binomial.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.boxMuller": "\nbase.random.boxMuller()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller();\n\n\nbase.random.boxMuller.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.boxMuller.factory();\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.boxMuller.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.boxMuller.NAME;\n    'box-muller'\n\n\nbase.random.boxMuller.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.boxMuller.PRNG\n\n\nbase.random.boxMuller.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.boxMuller.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.cauchy": "\nbase.random.cauchy( x0, Ɣ )\n    Returns a pseudorandom number drawn from a Cauchy distribution.\n\n    If `x0` or `Ɣ` is `NaN` or `Ɣ <= 0`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x0: double\n        Location parameter.\n\n    Ɣ: double\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 );\n\n\nbase.random.cauchy.factory( [x0, Ɣ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided `x0` and `Ɣ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `x0` and `Ɣ`, the returned PRNG requires that both `x0` and\n    `Ɣ` be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: double (optional)\n        Location parameter.\n\n    Ɣ: double (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cauchy.factory();\n\n    > var r = rand( 0.0, 1.5 );\n\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `x0` and `Ɣ`:\n    > rand = base.random.cauchy.factory( 0.0, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.cauchy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.cauchy.NAME;\n    'cauchy'\n\n\nbase.random.cauchy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cauchy.PRNG\n\n\nbase.random.cauchy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cauchy.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.chisquare": "\nbase.random.chisquare( k )\n    Returns a pseudorandom number drawn from a chi-square distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    k: scalar\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 );\n\n\nbase.random.chisquare.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: scalar (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chisquare.factory();\n\n    > var r = rand( 5 );\n\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chisquare.factory( 3 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.chisquare.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.chisquare.NAME;\n    'chisquare'\n\n\nbase.random.chisquare.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chisquare.PRNG\n\n\nbase.random.chisquare.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chisquare.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.erlang": "\nbase.random.erlang( k, λ )\n    Returns a pseudorandom number drawn from an Erlang distribution.\n\n    If `k` is not a positive integer or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: double\n        Rate parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 );\n\n\nbase.random.erlang.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both `k` and\n    `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: integer (optional)\n        Shape parameter.\n\n    λ: double (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.erlang.factory();\n\n    > var r = rand( 2, 1.0 );\n\n    > r = rand( 4, 3.14 );\n\n    // Provide `k` and `λ`:\n    > rand = base.random.erlang.factory( 2, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.erlang.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.erlang.NAME;\n    'erlang'\n\n\nbase.random.erlang.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.erlang.PRNG\n\n\nbase.random.erlang.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.erlang.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.exponential": "\nbase.random.exponential( λ )\n    Returns a pseudorandom number drawn from an exponential distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: double\n        Rate parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 );\n\n\nbase.random.exponential.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: double (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.exponential.factory();\n\n    > var r = rand( 5.0 );\n\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.exponential.factory( 10.0 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.exponential.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.exponential.NAME;\n    'exponential'\n\n\nbase.random.exponential.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.exponential.PRNG\n\n\nbase.random.exponential.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.exponential.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.f": "\nbase.random.f( d1, d2 )\n    Returns a pseudorandom number drawn from an F distribution.\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: double\n        Degrees of freedom.\n\n    d2: double\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.f( 2.0, 5.0 );\n\n\nbase.random.f.factory( [d1, d2, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided `d1` and `d2`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `d1` and `d2`, the returned PRNG requires that both `d1` and\n    `d2` be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: double (optional)\n        Degrees of freedom.\n\n    d2: double (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.f.factory();\n\n    > var r = rand( 1.5, 1.5 );\n\n    > r = rand( 3.0, 3.14 );\n\n    // Provide `d1` and `d2`:\n    > rand = base.random.f.factory( 1.5, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.f.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.f.NAME;\n    'f'\n\n\nbase.random.f.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.f.PRNG\n\n\nbase.random.f.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.f.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.gamma": "\nbase.random.gamma( α, β )\n    Returns a pseudorandom number drawn from a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: double\n        Shape parameter.\n\n    β: double\n        Rate parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 );\n\n\nbase.random.gamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: double (optional)\n        Shape parameter.\n\n    β: double (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gamma.factory();\n\n    > var r = rand( 1.5, 1.5 );\n\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.gamma.factory( 1.5, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.gamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.gamma.NAME;\n    'gamma'\n\n\nbase.random.gamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gamma.PRNG\n\n\nbase.random.gamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gamma.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.geometric": "\nbase.random.geometric( p )\n    Returns a pseudorandom number drawn from a geometric distribution.\n\n    If `p < 0` or `p > 1` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: double\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.8 );\n\n\nbase.random.geometric.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: double (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.geometric.factory();\n\n    > var r = rand( 0.3 );\n\n    > r = rand( 0.59 );\n\n    // Provide `λ`:\n    > rand = base.random.geometric.factory( 0.3 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.geometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.geometric.NAME;\n    'geometric'\n\n\nbase.random.geometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.geometric.PRNG\n\n\nbase.random.geometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.geometric.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.gumbel": "\nbase.random.gumbel( μ, β )\n    Returns a pseudorandom number drawn from a Gumbel distribution.\n\n    If `μ` or `β` is `NaN` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: double\n        Mean.\n\n    β: double\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 );\n\n\nbase.random.gumbel.factory( [μ, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided `μ` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `β`, the returned PRNG requires that both `μ` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: double (optional)\n        Mean.\n\n    β: double (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gumbel.factory();\n\n    > var r = rand( 0.1, 1.5 );\n\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `β`:\n    > rand = base.random.gumbel.factory( 0.1, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.gumbel.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.gumbel.NAME;\n    'gumbel'\n\n\nbase.random.gumbel.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gumbel.PRNG\n\n\nbase.random.gumbel.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gumbel.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.hypergeometric": "\nbase.random.hypergeometric( N, K, n )\n    Returns a pseudorandom number drawn from a hypergeometric distribution.\n\n    `N`, `K`, and `n` must all be nonnegative integers; otherwise, the function\n    returns `NaN`.\n\n    If `n > N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 7 );\n\n\nbase.random.hypergeometric.factory( [N, K, n, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided `N`, `K`, and `n`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `N`, `K`, and `n`, the returned PRNG requires that `N`, `K`,\n    and `n` be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.hypergeometric.factory();\n\n    > var r = rand( 20, 10, 15 );\n\n    > r = rand( 20, 10, 7 );\n\n    // Provide `N`, `K`, and `n`:\n    > rand = base.random.hypergeometric.factory( 20, 10, 15 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.hypergeometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.hypergeometric.NAME;\n    'hypergeometric'\n\n\nbase.random.hypergeometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.hypergeometric.PRNG\n\n\nbase.random.hypergeometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.hypergeometric.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.improvedZiggurat": "\nbase.random.improvedZiggurat()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat();\n\n\nbase.random.improvedZiggurat.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.improvedZiggurat.factory();\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.improvedZiggurat.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.improvedZiggurat.NAME;\n    'improved-ziggurat'\n\n\nbase.random.improvedZiggurat.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.improvedZiggurat.PRNG\n\n\nbase.random.improvedZiggurat.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.improvedZiggurat.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.invgamma": "\nbase.random.invgamma( α, β )\n    Returns a pseudorandom number drawn from an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: double\n        Shape parameter.\n\n    β: double\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 );\n\n\nbase.random.invgamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: double (optional)\n        Shape parameter.\n\n    β: double (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.invgamma.factory();\n\n    > var r = rand( 1.5, 1.5 );\n\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.invgamma.factory( 1.5, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.invgamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.invgamma.NAME;\n    'invgamma'\n\n\nbase.random.invgamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.invgamma.PRNG\n\n\nbase.random.invgamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.invgamma.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"base.random.laplace": "\nbase.random.laplace( μ, b )\n    Returns a pseudorandom number drawn from a Laplace distribution.\n\n    If `μ` or `b` is `NaN` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: double\n        Mean.\n\n    b: double\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 );\n\n\nbase.random.laplace.factory( [μ, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Laplace distribution.\n\n    If provided `μ` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `b`, the returned PRNG requires that both `μ` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: double (optional)\n        Mean.\n\n    b: double (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.laplace.factory();\n\n    > var r = rand( 0.1, 1.5 );\n\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.laplace.factory( 0.1, 1.5 );\n\n    > r = rand();\n\n    > r = rand();\n\n\nbase.random.laplace.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.laplace.NAME;\n    'laplace'\n\n\nbase.random.laplace.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.laplace.PRNG\n\n\nbase.random.laplace.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.laplace.SEED;\n\n    See Also\n    --------\n    base.random\n",
	"exists": "\nexists( path )\n    Synchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the path exists.\n\n    Examples\n    --------\n    > var bool = exists( './beep/boop' );\n\n    See Also\n    --------\n    readFile, readDir\n",
	"readDir": "\nreadDir( path )\n    Synchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        Directory contents.\n\n    Examples\n    --------\n    > var out = readDir( './beep/boop' );\n\n    See Also\n    --------\n    exists, readFile\n",
	"readFile": "\nreadFile( file[, options] )\n    Synchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var out = readFile( './beep/boop.js' );\n\n    See Also\n    --------\n    exists, readDir, readJSON\n",
	"readFileList": "\nreadFileList( filepaths[, options] )\n    Synchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        File contents.\n\n    out[ i ].file: string\n        File path.\n\n    out[ i ].data: Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n\n    > var out = readFileList( filepaths );\n\n",
	"readJSON": "\nreadJSON( file[, options] )\n    Synchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    Returns\n    -------\n    out: Error|JSON\n        File contents.\n\n    Examples\n    --------\n    > var out = readJSON( './beep/boop.json' );\n\n    See Also\n    --------\n    readFile\n",
	"resolveParentPath": "\nresolveParentPath( path[, options] )\n    Synchronously resolves a path by walking parent directories.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    Returns\n    -------\n    out: string|null\n        Resolved path.\n\n    Examples\n    --------\n    > var out = resolveParentPath( 'package.json' );\n\n"
};
