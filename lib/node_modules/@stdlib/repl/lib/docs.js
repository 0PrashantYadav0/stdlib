// This file is generated by scripts/build.js.
'use strict';

/* eslint-disable quotes */

module.exports = {
	"base.asum": "\nbase.asum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: double\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.asum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.asum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.asum( N, x1, stride )\n    12.0\n\n\nbase.asum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: double\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.asum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n    > sum = base.asum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum, base.sasum\n",
	"base.axpy": "\nbase.axpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.axpy( x.length, alpha, x, 1, y, 1 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.axpy( N, alpha, x, 2, y, -1 )\n    [ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.axpy( N, 5.0, x1, -2, y1, 1 )\n    [ 40.0, 33.0, 22.0 ]\n    > y0\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.axpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.axpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.axpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy, base.saxpy\n",
	"base.copy": "\nbase.copy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.copy( x.length, x, 1, y, 1 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.copy( N, x, -2, y, 1 )\n    [ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.copy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.copy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.copy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.copy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n",
	"base.dasum": "\nbase.dasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: double\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.dasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.dasum( N, x1, stride )\n    12.0\n\n\nbase.dasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: double\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.dasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.daxpy, base.dcopy\n",
	"base.daxpy": "\nbase.daxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy( x.length, alpha, x, 1, y, 1 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy( N, alpha, x, 2, y, -1 )\n    <Float64Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.daxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float64Array>[ 40.0, 33.0, 22.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.dasum, base.dcopy\n",
	"base.dcopy": "\nbase.dcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy( x.length, x, 1, y, 1 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy( N, x, -2, y, 1 )\n    <Float64Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.dcopy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dasum, base.daxpy\n",
	"base.random.beta": "\nbase.random.beta( α, β )\n    Returns a pseudorandom number drawn from a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: scalar\n        First shape parameter.\n\n    β: scalar\n        Second shape parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 );\n\n\nbase.random.beta.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: scalar (optional)\n        First shape parameter.\n\n    β: scalar (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.beta.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.beta.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.beta.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.beta.NAME\n    'beta'\n\n\nbase.random.beta.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.beta.PRNG;\n\n\nbase.random.beta.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.beta.SEED;\n\n",
	"base.random.binomial": "\nbase.random.binomial( n, p )\n    Returns a pseudorandom number drawn from a binomial distribution.\n\n    If `n` is not a positive integer or `p` is not a probability, the function\n    returns `NaN`.\n\n    If `n` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: double\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 );\n\n\nbase.random.binomial.factory( [n, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided `n` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `n` and `p`, the returned PRNG requires that both `n` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: double (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.binomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `n` and `p`:\n    > rand = base.random.binomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.binomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.binomial.NAME\n    'binomial'\n\n\nbase.random.binomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.binomial.PRNG;\n\n\nbase.random.binomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.binomial.SEED;\n\n",
	"base.random.boxMuller": "\nbase.random.boxMuller()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller();\n\n\nbase.random.boxMuller.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.boxMuller.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.boxMuller.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.boxMuller.NAME\n    'box-muller'\n\n\nbase.random.boxMuller.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.boxMuller.PRNG;\n\n\nbase.random.boxMuller.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.boxMuller.SEED;\n\n",
	"base.random.cauchy": "\nbase.random.cauchy( x0, Ɣ )\n    Returns a pseudorandom number drawn from a Cauchy distribution.\n\n    If `x0` or `Ɣ` is `NaN` or `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: scalar\n        Location parameter.\n\n    Ɣ: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 );\n\n\nbase.random.cauchy.factory( [x0, Ɣ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided `x0` and `Ɣ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `x0` and `Ɣ`, the returned PRNG requires that both `x0` and\n    `Ɣ` be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: scalar (optional)\n        Location parameter.\n\n    Ɣ: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cauchy.factory();\n    > var r = rand( 0.0, 1.5 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `x0` and `Ɣ`:\n    > rand = base.random.cauchy.factory( 0.0, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cauchy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.cauchy.NAME\n    'cauchy'\n\n\nbase.random.cauchy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cauchy.PRNG;\n\n\nbase.random.cauchy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cauchy.SEED;\n\n",
	"base.random.chisquare": "\nbase.random.chisquare( k )\n    Returns a pseudorandom number drawn from a chi-square distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    k: scalar\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 );\n\n\nbase.random.chisquare.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: scalar (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chisquare.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chisquare.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chisquare.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.chisquare.NAME\n    'chisquare'\n\n\nbase.random.chisquare.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chisquare.PRNG;\n\n\nbase.random.chisquare.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chisquare.SEED;\n\n",
	"base.random.erlang": "\nbase.random.erlang( k, λ )\n    Returns a pseudorandom number drawn from an Erlang distribution.\n\n    If `k` is not a positive integer or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: scalar\n        Rate parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 );\n\n\nbase.random.erlang.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both `k` and\n    `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: integer (optional)\n        Shape parameter.\n\n    λ: scalar (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.erlang.factory();\n    > var r = rand( 2, 1.0 );\n    > r = rand( 4, 3.14 );\n\n    // Provide `k` and `λ`:\n    > rand = base.random.erlang.factory( 2, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.erlang.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.erlang.NAME\n    'erlang'\n\n\nbase.random.erlang.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.erlang.PRNG;\n\n\nbase.random.erlang.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.erlang.SEED;\n\n",
	"base.random.exponential": "\nbase.random.exponential( λ )\n    Returns a pseudorandom number drawn from an exponential distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: scalar\n        Rate parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 );\n\n\nbase.random.exponential.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: scalar (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.exponential.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.exponential.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.exponential.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.exponential.NAME\n    'exponential'\n\n\nbase.random.exponential.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.exponential.PRNG;\n\n\nbase.random.exponential.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.exponential.SEED;\n\n",
	"base.random.f": "\nbase.random.f( d1, d2 )\n    Returns a pseudorandom number drawn from an F distribution.\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: scalar\n        Degrees of freedom.\n\n    d2: scalar\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.f( 2.0, 5.0 );\n\n\nbase.random.f.factory( [d1, d2, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided `d1` and `d2`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `d1` and `d2`, the returned PRNG requires that both `d1` and\n    `d2` be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: scalar (optional)\n        Degrees of freedom.\n\n    d2: scalar (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.f.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.0, 3.14 );\n\n    // Provide `d1` and `d2`:\n    > rand = base.random.f.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.f.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.f.NAME\n    'f'\n\n\nbase.random.f.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.f.PRNG;\n\n\nbase.random.f.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.f.SEED;\n\n",
	"base.random.gamma": "\nbase.random.gamma( α, β )\n    Returns a pseudorandom number drawn from a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: scalar\n        Shape parameter.\n\n    β: scalar\n        Rate parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 );\n\n\nbase.random.gamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: scalar (optional)\n        Shape parameter.\n\n    β: scalar (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.gamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.gamma.NAME\n    'gamma'\n\n\nbase.random.gamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gamma.PRNG;\n\n\nbase.random.gamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gamma.SEED;\n\n",
	"base.random.geometric": "\nbase.random.geometric( p )\n    Returns a pseudorandom number drawn from a geometric distribution.\n\n    If `p < 0` or `p > 1` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: double\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.8 );\n\n\nbase.random.geometric.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: double (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.geometric.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `λ`:\n    > rand = base.random.geometric.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.geometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.geometric.NAME\n    'geometric'\n\n\nbase.random.geometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.geometric.PRNG;\n\n\nbase.random.geometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.geometric.SEED;\n\n",
	"base.random.gumbel": "\nbase.random.gumbel( μ, β )\n    Returns a pseudorandom number drawn from a Gumbel distribution.\n\n    If `μ` or `β` is `NaN` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: scalar\n        Mean.\n\n    β: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 );\n\n\nbase.random.gumbel.factory( [μ, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided `μ` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `β`, the returned PRNG requires that both `μ` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: scalar (optional)\n        Mean.\n\n    β: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gumbel.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `β`:\n    > rand = base.random.gumbel.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gumbel.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.gumbel.NAME\n    'gumbel'\n\n\nbase.random.gumbel.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gumbel.PRNG;\n\n\nbase.random.gumbel.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gumbel.SEED;\n\n",
	"base.random.hypergeometric": "\nbase.random.hypergeometric( N, K, n )\n    Returns a pseudorandom number drawn from a hypergeometric distribution.\n\n    `N`, `K`, and `n` must all be nonnegative integers; otherwise, the function\n    returns `NaN`.\n\n    If `n > N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 7 );\n\n\nbase.random.hypergeometric.factory( [N, K, n, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided `N`, `K`, and `n`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `N`, `K`, and `n`, the returned PRNG requires that `N`, `K`,\n    and `n` be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.hypergeometric.factory();\n    > var r = rand( 20, 10, 15 );\n    > r = rand( 20, 10, 7 );\n\n    // Provide `N`, `K`, and `n`:\n    > rand = base.random.hypergeometric.factory( 20, 10, 15 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.hypergeometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.hypergeometric.NAME\n    'hypergeometric'\n\n\nbase.random.hypergeometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.hypergeometric.PRNG;\n\n\nbase.random.hypergeometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.hypergeometric.SEED;\n\n",
	"base.random.improvedZiggurat": "\nbase.random.improvedZiggurat()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat();\n\n\nbase.random.improvedZiggurat.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.improvedZiggurat.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.improvedZiggurat.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.improvedZiggurat.NAME\n    'improved-ziggurat'\n\n\nbase.random.improvedZiggurat.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.improvedZiggurat.PRNG;\n\n\nbase.random.improvedZiggurat.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.improvedZiggurat.SEED;\n\n",
	"base.random.invgamma": "\nbase.random.invgamma( α, β )\n    Returns a pseudorandom number drawn from an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: scalar\n        Shape parameter.\n\n    β: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 );\n\n\nbase.random.invgamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: scalar (optional)\n        Shape parameter.\n\n    β: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.invgamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.invgamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.invgamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.invgamma.NAME\n    'invgamma'\n\n\nbase.random.invgamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.invgamma.PRNG;\n\n\nbase.random.invgamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.invgamma.SEED;\n\n",
	"base.random.laplace": "\nbase.random.laplace( μ, b )\n    Returns a pseudorandom number drawn from a Laplace distribution.\n\n    If `μ` or `b` is `NaN` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: scalar\n        Mean.\n\n    b: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 );\n\n\nbase.random.laplace.factory( [μ, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Laplace distribution.\n\n    If provided `μ` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `b`, the returned PRNG requires that both `μ` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: scalar (optional)\n        Mean.\n\n    b: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.laplace.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.laplace.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.laplace.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.laplace.NAME\n    'laplace'\n\n\nbase.random.laplace.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.laplace.PRNG;\n\n\nbase.random.laplace.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.laplace.SEED;\n\n",
	"base.random.logistic": "\nbase.random.logistic( μ, s )\n    Returns a pseudorandom number drawn from a logistic distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: scalar\n        Mean.\n\n    s: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.logistic( 2.0, 5.0 );\n\n\nbase.random.logistic.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: scalar (optional)\n        Mean.\n\n    s: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.logistic.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.logistic.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.logistic.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.logistic.NAME\n    'logistic'\n\n\nbase.random.logistic.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.logistic.PRNG;\n\n\nbase.random.logistic.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.logistic.SEED;\n\n",
	"base.random.lognormal": "\nbase.random.lognormal( μ, σ )\n    Returns a pseudorandom number drawn from a lognormal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: scalar\n        Location parameter.\n\n    σ: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.lognormal( 2.0, 5.0 );\n\n\nbase.random.lognormal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: scalar (optional)\n        Location parameter.\n\n    σ: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.lognormal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.lognormal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.lognormal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.lognormal.NAME\n    'lognormal'\n\n\nbase.random.lognormal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.lognormal.PRNG;\n\n\nbase.random.lognormal.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.lognormal.SEED;\n\n",
	"base.random.minstd": "\nbase.random.minstd()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) based on Park and Miller.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. More\n    importantly, the \"randomness quality\" of the generator's output is lacking.\n    These defects make the generator unsuitable, for example, in Monte Carlo\n    simulations and in cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd();\n\n\nbase.random.minstd.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd.normalized();\n\n\nbase.random.minstd.factory( [seed] )\n    Returns a linear congruential pseudorandom number generator (LCG).\n\n    Parameters\n    ----------\n    seed: integer (optional)\n        Pseudorandom number generator seed. Must be on the interval\n        `[1, 2147483646]`.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstd.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstd.factory( 1234 );\n    > r = rand()\n    20739838\n\n\nbase.random.minstd.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.minstd.NAME\n    'minstd'\n\n\nbase.random.minstd.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstd.SEED;\n\n",
	"base.random.minstdShuffle": "\nbase.random.minstdShuffle()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) whose output is shuffled using the Bays-\n    Durham algorithm. The shuffle step considerably strengthens the \"randomness\n    quality\" of a simple LCG's output.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. In\n    general, this generator is unsuitable for Monte Carlo simulations and\n    cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle();\n\n\nbase.random.minstdShuffle.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle.normalized();\n\n\nbase.random.minstdShuffle.factory( [seed] )\n    Returns a linear congruential pseudorandom number generator (LCG) whose\n    output is shuffled.\n\n    Parameters\n    ----------\n    seed: integer (optional)\n        Pseudorandom number generator seed. Must be on the interval\n        `[1, 2147483646]`.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstdShuffle.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstdShuffle.factory( 1234 );\n    > r = rand()\n    1421600654\n\n\nbase.random.minstdShuffle.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.minstdShuffle.NAME\n    'minstd-shuffle'\n\n\nbase.random.minstdShuffle.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstdShuffle.SEED;\n\n",
	"base.random.negativeBinomial": "\nbase.random.negativeBinomial( r, p )\n    Returns a pseudorandom number drawn from a negative binomial distribution.\n\n    If `p` is not the interval `(0,1)`, the function returns `NaN`.\n\n    If `r` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of successes until experiment is stopped.\n\n    p: double\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.negativeBinomial( 20, 0.8 );\n\n\nbase.random.negativeBinomial.factory( [r, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided `r` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `r` and `p`, the returned PRNG requires that both `r` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    r: integer (optional)\n        Number of successes until experiment is stopped.\n\n    p: double (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.negativeBinomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `r` and `p`:\n    > rand = base.random.negativeBinomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.negativeBinomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.negativeBinomial.NAME\n    'negative-binomial'\n\n\nbase.random.negativeBinomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.negativeBinomial.PRNG;\n\n\nbase.random.negativeBinomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.negativeBinomial.SEED;\n\n",
	"base.random.normal": "\nbase.random.normal( μ, σ )\n    Returns a pseudorandom number drawn from a normal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: scalar\n        Mean.\n\n    σ: scalar\n        Standard deviation.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.normal( 2.0, 5.0 );\n\n\nbase.random.normal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: scalar (optional)\n        Mean.\n\n    σ: scalar (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.normal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.normal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.normal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.normal.NAME\n    'normal'\n\n\nbase.random.normal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.normal.PRNG;\n\n\nbase.random.normal.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.normal.SEED;\n\n",
	"base.random.pareto1": "\nbase.random.pareto1( α, β )\n    Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: scalar\n        Shape parameter.\n\n    β: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.pareto1( 2.0, 5.0 );\n\n\nbase.random.pareto1.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: scalar (optional)\n        Shape parameter.\n\n    β: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.pareto1.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.pareto1.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.pareto1.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.pareto1.NAME\n    'pareto-type1'\n\n\nbase.random.pareto1.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.pareto1.PRNG;\n\n\nbase.random.pareto1.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.pareto1.SEED;\n\n",
	"base.random.poisson": "\nbase.random.poisson( λ )\n    Returns a pseudorandom number drawn from a Poisson distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: scalar\n        Mean.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.poisson( 7.9 );\n\n\nbase.random.poisson.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: scalar (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.poisson.factory();\n    > var r = rand( 4.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.poisson.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.poisson.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.poisson.NAME\n    'poisson'\n\n\nbase.random.poisson.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.poisson.PRNG;\n\n\nbase.random.poisson.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.poisson.SEED;\n\n",
	"base.random.randn": "\nbase.random.randn()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.randn();\n\n\nbase.random.randn.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG) that samples\n        from a standard normal distribution. Default: 'improved-ziggurat'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randn.factory();\n    > r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randn.factory({ 'name': 'box-muller' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randn.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.randn.NAME\n    'standard-normal'\n\n\nbase.random.randn.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randn.PRNG;\n\n\nbase.random.randn.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randn.SEED;\n\n",
	"base.random.randu": "\nbase.random.randu()\n    Returns a pseudorandom number drawn from a uniform distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number on the interval `[0,1)`.\n\n    Examples\n    --------\n    > var r = base.random.randu();\n\n\nbase.random.randu.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). Default:\n        'minstd-shuffle'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randu.factory();\n    > r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randu.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randu.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.randu.NAME\n    'uniform'\n\n\nbase.random.randu.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randu.PRNG;\n\n\nbase.random.randu.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randu.SEED;\n\n",
	"base.random.rayleigh": "\nbase.random.rayleigh( σ )\n    Returns a pseudorandom number drawn from a Rayleigh distribution.\n\n    If `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.rayleigh( 2.5 );\n\n\nbase.random.rayleigh.factory( [σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided `σ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `σ`, the returned PRNG requires that `σ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    σ: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.rayleigh.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 10.0 );\n\n    // Provide `σ`:\n    > rand = base.random.rayleigh.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.rayleigh.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.rayleigh.NAME\n    'rayleigh'\n\n\nbase.random.rayleigh.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.rayleigh.PRNG;\n\n\nbase.random.rayleigh.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.rayleigh.SEED;\n\n",
	"base.random.t": "\nbase.random.t( v )\n    Returns a pseudorandom number drawn from a Student's t distribution.\n\n    If `v <= 0` or `v` is `NaN`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    v: scalar\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.t( 2.0 );\n\n\nbase.random.t.factory( [v, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided `v`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `v`, the returned PRNG requires that `v` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    v: scalar (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.t.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `v`:\n    > rand = base.random.t.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.t.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.t.NAME\n    't'\n\n\nbase.random.t.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.t.PRNG;\n\n\nbase.random.t.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.t.SEED;\n\n",
	"base.random.triangular": "\nbase.random.triangular( a, b, c )\n    Returns a pseudorandom number drawn from a triangular distribution.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: scalar\n        Minimum support.\n\n    b: scalar\n        Maximum support.\n\n    c: scalar\n        Mode.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.triangular( 2.0, 5.0, 3.33 );\n\n\nbase.random.triangular.factory( [a, b, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `a`, `b`, and `c`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `a`, `b`, and `c`, the returned PRNG requires that `a`, `b`,\n    and `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: scalar (optional)\n        Minimum support.\n\n    b: scalar (optional)\n        Maximum support.\n\n    c: scalar (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.triangular.factory();\n    > var r = rand( 0.0, 1.0, 0.5 );\n    > r = rand( -2.0, 2.0, 1.0 );\n\n    // Provide `a`, `b`, and `c`:\n    > rand = base.random.triangular.factory( 0.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.triangular.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.triangular.NAME\n    'triangular'\n\n\nbase.random.triangular.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.triangular.PRNG;\n\n\nbase.random.triangular.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.triangular.SEED;\n\n",
	"base.random.uniform": "\nbase.random.uniform( a, b )\n    Returns a pseudorandom number drawn from a continuous uniform distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: scalar\n        Minimum support.\n\n    b: scalar\n        Maximum support.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.uniform( 2.0, 5.0 );\n\n\nbase.random.uniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a continuous uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: scalar (optional)\n        Minimum support.\n\n    b: scalar (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.uniform.factory();\n    > var r = rand( 0.0, 1.0 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.uniform.factory( 0.0, 1.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.uniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.uniform.NAME\n    'uniform'\n\n\nbase.random.uniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.uniform.PRNG;\n\n\nbase.random.uniform.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.uniform.SEED;\n\n",
	"base.random.weibull": "\nbase.random.weibull( λ, k )\n    Returns a pseudorandom number drawn from a Weibull distribution.\n\n    If `λ <= 0` or `k <= 0`, the function returns `NaN`.\n\n    If either `λ` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: scalar\n        Shape parameter.\n\n    k: scalar\n        Scale parameter.\n\n    Returns\n    -------\n    r: double\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.weibull( 2.0, 5.0 );\n\n\nbase.random.weibull.factory( [λ, k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided `λ` and `k`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `λ` and `k`, the returned PRNG requires that both `λ` and\n    `k` be provided at each invocation.\n\n    Parameters\n    ----------\n    λ: scalar (optional)\n        Shape parameter.\n\n    k: scalar (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.weibull.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `λ` and `k`:\n    > rand = base.random.weibull.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.weibull.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var name = base.random.weibull.NAME\n    'weibull'\n\n\nbase.random.weibull.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.weibull.PRNG;\n\n\nbase.random.weibull.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.weibull.SEED;\n\n",
	"base.sasum": "\nbase.sasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.sasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.sasum( N, x1, stride )\n    12.0\n\n\nbase.sasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.sasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum\n",
	"base.saxpy": "\nbase.saxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy( x.length, alpha, x, 1, y, 1 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy( N, alpha, x, 2, y, -1 )\n    <Float32Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.saxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float32Array>[ 40.0, 33.0, 22.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.saxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: scalar\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy\n",
	"base.scopy": "\nbase.scopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy( x.length, x, 1, y, 1 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy( N, x, -2, y, 1 )\n    <Float32Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.scopy( N, x1, -2, y1, 1 )\n    <Float32Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.scopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n",
	"capitalize": "\ncapitalize( str )\n    Capitalizes the first character in a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Capitalized string.\n\n    Examples\n    --------\n    > var out = capitalize( 'beep' )\n    'Beep'\n    > out = capitalize( 'Boop' )\n    'Boop'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n",
	"compose": "\ncompose( f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as an argument\n    to the next function. The result of the leftmost function is the result\n    of the whole.\n\n    Notes:\n\n    - Only the rightmost function is explicitly permitted to accept multiple\n      arguments. All other functions are evaluated as unary functions.\n    - The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x ) {\n    >    return 2 * x;\n    > }\n    > function b( x ) {\n    >    return x + 3;\n    > }\n    > function c( x ) {\n    >    return x / 5;\n    > }\n    > var f = compose( c, b, a );\n    > var z = f( 6 )\n    3\n\n",
	"constantFunction": "\nconstantFunction( val )\n    Creates a function which always returns the same value.\n\n    Notes:\n\n    - When provided an object reference, the returned `function` always returns\n      the same reference.\n\n    Parameters\n    ----------\n    val: any\n        Value to always return.\n\n    Returns\n    -------\n    out: Function\n        Constant function.\n\n    Examples\n    --------\n    > var fcn = constantFunction( 3.14 );\n    > var v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n\n    See Also\n    --------\n    identity\n",
	"constructorName": "\nconstructorName( val )\n    Determines the name of a value's constructor.\n\n    Parameters\n    ----------\n    val: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        Name of a value's constructor.\n\n    Examples\n    --------\n    > var v = constructorName( 'a' )\n    'String'\n    > v = constructorName( {} )\n    'Object'\n    > v = constructorName( true )\n    'Boolean'\n\n    See Also\n    --------\n    functionName\n",
	"contains": "\ncontains( val, searchValue[, position] )\n    Tests if a value is found in an array-like object.\n\n    When `val` is a `string`, the function checks whether the characters of the\n    search string are found in the input string. The search is case-sensitive.\n\n    When `val` is an `array-like` object, but not a `string`, the function\n    checks whether the input array contains an element equal to the specified\n    search value. Equality is determined via the strict equality operator `===`.\n\n    Notes:\n\n    - For `strings`, this function is modeled after String.prototype.includes,\n      part of the ECMAScript 6 specification. This function is different from a\n      call to `String.prototype.includes.call` insofar as type-checking is\n      performed for all arguments.\n    - If `position < 0`, the search is performed for the entire input array or\n      string.\n\n\n    Parameters\n    ----------\n    val: ArrayLike\n        Input value.\n\n    searchValue: any\n        Value to search for.\n\n    position: integer (optional)\n        Position at which to start searching for `searchValue`. Default: `0`.\n\n    Returns\n    -------\n    out: boolean\n        Boolean indicating if `searchValue` is contained in `str`.\n\n    Examples\n    --------\n    > var out = contains( 'Hello World', 'World' )\n    true\n    > out = contains( 'Hello World', 'world' )\n    false\n    > out = contains( [ 1, 2, 3, 4 ], 2 )\n    true\n    > out = contains( [ NaN, 2, 3, 4 ], NaN )\n    true\n\n    // Supply a position:\n    > out = contains( 'Hello World', 'Hello', 6 )\n    false\n    > out = contains( [ true, NaN, false ], true, 1 )\n    false\n\n",
	"copy": "\ncopy( value[, level] )\n    Copy or deep clone a value to an arbitrary depth.\n\n    The implementation can handle circular references.\n\n    If a `Number`, `String`, or `Boolean` object is encountered, the value is\n    cloned as a primitive. This behavior is intentional.\n\n    For objects, the implementation only copies enumerable keys and their\n    associated property descriptors.\n\n    The implementation only checks whether basic `Objects`, `Arrays`, and class\n    instances are extensible, sealed, and/or frozen.\n\n    Functions are not cloned; their reference is copied.\n\n    The implementation supports custom error types which are `Error` instances\n    (e.g., ES2015 subclasses).\n\n    Support for copying class instances is inherently fragile. Any instances\n    with privileged access to variables (e.g., within closures) cannot be\n    cloned. This stated, basic copying of class instances is supported. Provided\n    an environment which supports ES5, the implementation is greedy and performs\n    a deep clone of any arbitrary class instance and its properties. The\n    implementation assumes that the concept of `level` applies only to the class\n    instance reference, but not to its internal state.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    level: integer (optional)\n         Copy depth. Default: +infinity.\n\n    Returns\n    -------\n    out: any\n        Value copy.\n\n    Examples\n    --------\n    > var value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > var out = copy( value )\n    [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]\n    > var bool = ( value[ 0 ].c === out[ 0 ].c )\n    false\n\n    // Set the `level` option to limit the copy depth:\n    > value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > out = copy( value, 1 );\n    > bool = ( value[ 0 ] === out[ 0 ] )\n    false\n    > bool = ( value[ 0 ].c === out[ 0 ].c )\n    true\n\n\n    See Also\n    --------\n    merge\n",
	"curry": "\ncurry( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curry( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curry( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    >     'name': 'Ada',\n    >     'greet': function greet( word1, word2 ) {\n    >         return word1 + ' ' + word2 + ', ' + this.name + '!'\n    >     }\n    > };\n    > f = curry( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curryRight, uncurry, uncurryRight\n",
	"curryRight": "\ncurryRight( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    This function applies arguments starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curryRight( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curryRight( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    >     'name': 'Ada',\n    >     'greet': function greet( word1, word2 ) {\n    >         return word1 + ' ' + word2 + ', ' + this.name + '!'\n    >     }\n    > };\n    > f = curryRight( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curry, uncurry, uncurryRight\n",
	"cwd": "\ncwd()\n    Returns the current working directory.\n\n    Returns\n    -------\n    path: string\n        Current working directory of the process.\n\n    Examples\n    --------\n    > var dir = cwd()\n    '/path/to/current/working/directory'\n\n",
	"deepGet": "\ndeepGet( obj, path[, options] )\n    Returns a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: any\n        Nested property value.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a.b.c' )\n    'd'\n\n    // Specify a custom separator via the `sep` option:\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a/b/c', { 'sep': '/' } )\n    'd'\n\ndeepGet.factory( path[, options] )\n    Creates a reusable deep get function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get factory.\n\n    Examples\n    --------\n    > var dget = deepGet.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = dget( obj )\n    'd'\n\n    See Also\n    --------\n    deepPluck, deepSet\n",
	"deepPluck": "\ndeepPluck( arr, path[, options] )\n    Extracts a nested property value from each element of an object array.\n\n    If a key path does not exist, the function sets the plucked value as\n    `undefined`.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. Default:\n        true.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    >     { 'a': { 'b': { 'c': 1 } } },\n    >     { 'a': { 'b': { 'c': 2 } } }\n    > ];\n    > var out = deepPluck( arr, 'a.b.c' )\n    [ 1, 2 ]\n    > arr = [\n    >     { 'a': [ 0, 1, 2 ] },\n    >     { 'a': [ 3, 4, 5 ] }\n    > ];\n    > out = deepPluck( arr, [ 'a', 1 ] )\n    [ 1, 4 ]\n\n    See Also\n    --------\n    deepGet, deepSet\n",
	"deepSet": "\ndeepSet( obj, path[, options] )\n    Sets a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    value: any\n        Value to set.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if the property was successfully set.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = deepSet( obj, 'a.b.c', 'beep' )\n    true\n\n    // Specify an alternative separator via the sep option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > bool = deepSet( obj, 'a/b/c', 'beep', { 'sep': '/' } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    // To create a key path which does not exist, set the create option to true:\n    > bool = deepSet( obj, 'a.e.c', 'boop', { 'create': true } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' }, 'e': { 'c': 'boop' } } }\n\n\ndeepSet.factory( path[, options] )\n    Creates a reusable deep set function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get function.\n\n    Examples\n    --------\n    > var dset = deepSet.factory( 'a/b/c', {\n    >     'create': true,\n    >     'sep': '/'\n    > });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = dset( obj, 'beep' )\n    true\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    See Also\n    --------\n    deepGet, deepPluck\n",
	"dirname": "\ndirname( path )\n    Returns a directory name.\n\n    Parameters\n    ----------\n    path: string\n        Path.\n\n    Returns\n    -------\n    out: string\n        Directory name.\n\n    Examples\n    --------\n    > var dir = dirname( './foo/bar/index.js' )\n    './foo/bar'\n\n    See Also\n    --------\n    extname\n",
	"endsWith": "\nendsWith( str, search[, len] )\n    Tests if a `string` ends with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    len: integer (optional)\n        Substring length. Restricts the search to a substring within the input\n        string beginning from the leftmost character. If provided a negative\n        value, `len` indicates to ignore the last `len` characters, returning\n        the same output as `str.length + len`. Default: `str.length`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` ends with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = endsWith( 'beep', 'ep' )\n    true\n    > bool = endsWith( 'Beep', 'op' )\n    false\n    > bool = endsWith( 'Beep', 'ee', 3 )\n    true\n    > bool = endsWith( 'Beep', 'ee', -1 )\n    true\n    > bool = endsWith( 'beep', '' )\n    true\n\n    See Also\n    --------\n    startsWith\n",
	"ENV": "\nENV\n    An object containing the user environment.\n\n    Examples\n    --------\n    > var user = ENV.USER\n    <string>\n\n",
	"err2json": "\nerr2json( error )\n    Returns a JSON representation of an error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    The JSON object is guaranteed to have the following properties:\n\n    - type: error type.\n    - message: error message.\n\n    The only standardized cross-platform property is `message`. Depending on the\n    platform, the following properties *may* be present:\n\n    - name: error name.\n    - stack: stack trace.\n    - code: error code (Node.js system errors).\n    - errno: error code string (Node.js system errors).\n    - syscall: string representing the failed system call (Node.js system\n      errors).\n\n    The function also serializes all enumerable properties.\n\n    The implementation supports custom error types and sets the `type` field to\n    the closest built-in error type.\n\n    Parameters\n    ----------\n    error: Error\n        Error to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var err = new Error( 'beep' );\n    > var json = err2json( err );\n    <Object>\n\n    See Also\n    --------\n    reviveError\n",
	"evil": "\nevil( str )\n    Alias for `eval` global.\n\n    A reference to `eval` is treated differently by the compiler. For example,\n    when evaluating code containing block-scoped declarations  (e.g., `let`,\n    `const`, `function`, `class`), the compiler may throw an `error` complaining\n    that block-scoped declarations are not yet supported outside of\n    `strict mode`. One possible workaround is to include `\"use strict\";` in the\n    evaluated code.\n\n    Parameters\n    ----------\n    str: string\n        Code to evaluate.\n\n    Returns\n    -------\n    out: any\n        Returned value if applicable.\n\n    Examples\n    --------\n    > var v = evil( '5*4*3*2*1' );\n    120\n\n",
	"exists": "\nexists( path )\n    Synchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the path exists.\n\n    Examples\n    --------\n    > var bool = exists( './beep/boop' );\n\n    See Also\n    --------\n    readFile, readDir\n",
	"extname": "\nextname( filename )\n    Returns a filename extension.\n\n    Parameters\n    ----------\n    filename: string\n        Filename.\n\n    Returns\n    -------\n    ext: string\n        Filename extension.\n\n    Examples\n    --------\n    > var ext = extname( 'index.js' )\n    '.js'\n\n    See Also\n    --------\n    dirname\n",
	"find": "\nfind( arr, [options,] clbk )\n    Finds elements in an array-like object that satisfy a test condition.\n\n    Parameters\n    ----------\n    arr: Array|TypedArray|string\n        Object from which elements will be tested.\n\n    options: Object (optional)\n        Options.\n\n    options.k: integer (optional)\n        Limits the number of returned elements. The sign determines the\n        direction in which to search. If set to a negative integer, the function\n        searches from last element to first element. Default: arr.length.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'indices'.\n\n    clbk: Function\n        Function invoked for each array element. If the return value is truthy,\n        the value is considered to have satisfied the test condition.\n\n    Returns\n    -------\n    out: Array\n        Array of indices, element values, or arrays of index-value pairs.\n\n    Examples\n    --------\n    > var data = [ 30, 20, 50, 60, 10 ];\n    > function condition( val ) { return val > 20; };\n    > var vals = find( data, condition )\n    [ 0, 2, 3 ]\n\n    // Limit number of results:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > var opts = { 'k': 2, 'returns': 'values' };\n    > vals = find( data, opts, condition )\n    [ 30, 50 ]\n\n    // Return both indices and values as index-value pairs:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > opts = { 'k': -2, 'returns': '*' };\n    > vals = find( data, opts, condition )\n    [ [ 3, 60 ], [ 2, 50 ] ]\n\n",
	"flattenArray": "\nflattenArray( arr[, options] )\n    Flattens an array.\n\n    If all array elements have the same dimensions, setting the `equalDims`\n    option to `true` allows the implementation to make performance\n    optimizations.\n\n    Parameters\n    ----------\n    arr: Array\n        Input array.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    options.equalDims: boolean (optional)\n        Boolean indicating whether all array elements have equal dimensions.\n        Default: false.\n\n    Returns\n    -------\n    out: Array\n        Flattened array.\n\n    Examples\n    --------\n    > var arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > var out = flattenArray( arr )\n    [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Set the maximum depth:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2 } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > var bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    true\n\n    // Deep copy:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2, 'copy': true } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    false\n\n\nflattenArray.factory( dims[, options] )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    dims: Array<integer>\n        Dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenArray.factory( [ 2, 2 ], {\n    >     'copy': false\n    > });\n    > var out = flatten( [ [ 1, 2 ], [ 3, 4 ] ] )\n    [ 1, 2, 3, 4 ]\n    > out = flatten( [ [ 5, 6 ], [ 7, 8 ] ] )\n    [ 5, 6, 7, 8 ]\n\n    See Also\n    --------\n    flattenObject\n",
	"flattenObject": "\nflattenObject( obj[, options] )\n    Flattens an object.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Object to flatten.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    out: ObjectLike\n        Flattened object.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flattenObject( obj )\n    { 'a.b.c': 'd' }\n\n    // Set the `depth` option to flatten to a specified depth:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'depth': 1 } )\n    { 'a.b': { 'c': 'd' } }\n    > var bool = ( obj.a.b === out[ 'a.b' ] )\n    true\n\n    // Set the `delimiter` option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'delimiter': '-|-' } )\n    { 'a-|-b-|-c': 'd' }\n\n    // Flatten arrays:\n    > obj = { 'a': { 'b': [ 1, 2, 3 ] } };\n    > out = flattenObject( obj, { 'flattenArrays': true } )\n    { 'a.b.0': 1, 'a.b.1': 2, 'a.b.2': 3 }\n\n\nflattenObject.factory( options )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenObject.factory({\n    >     'depth': 2,\n    >     'copy': true,\n    >     'delimiter': '|'\n    > });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flatten( obj )\n    { 'a|b': { 'c': 'd' } }\n\n    See Also\n    --------\n    flattenArray\n",
	"functionName": "\nfunctionName( fcn )\n    Returns the name of a function.\n\n    If provided an anonymous function, the function returns an empty `string` or\n    the string `\"anonymous\"`.\n\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    Returns\n    -------\n    out: string\n        Function name.\n\n    Examples\n    --------\n    > var v = functionName( String )\n    'String'\n    > v = functionName( function foo(){} )\n    'foo'\n    > v = functionName( function(){} )\n    '' || 'anonymous'\n\n    See Also\n    --------\n    constructorName\n",
	"functionSequence": "\nfunctionSequence( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as an argument to the next function. The result of the\n    rightmost function is the result of the whole.\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as unary functions.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x ) { return 2 * x; };\n    > function b( x ) { return x + 3; };\n    > function c( x ) { return x / 5; };\n    > var f = functionSequence( a, b, c );\n    > var z = f( 6 )\n    3\n\n",
	"getPrototypeOf": "\ngetPrototypeOf( value )\n    Returns the prototype of a provided object.\n\n    In contrast to the native `Object.getPrototypeOf`, this function does not\n    throw when provided `null` or `undefined`. Instead, similar to when provided\n    any value with *no* inherited properties, the function returns `null`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: Object|null\n        Prototype.\n\n    Examples\n    --------\n    > var proto = getPrototypeOf( {} )\n    {}\n\n    See Also\n    --------\n    hasPrototype\n",
	"getuid": "\ngetuid()\n    Returns the numeric user identity of the calling process.\n\n    The function only returns a user identity on POSIX platforms. For all other\n    platforms (e.g., Windows and Android), the function returns `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Numeric user identity.\n\n    Examples\n    --------\n    > var uid = getuid();\n\n",
	"hasClassSupport": "\nhasClassSupport()\n    Tests for native `class` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has native `class` support.\n\n    Examples\n    --------\n    > var bool = hasClassSupport()\n    <boolean>\n\n",
	"hasFunctionNameSupport": "\nhasFunctionNameSupport()\n    Tests for native function `name` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has function `name` support.\n\n    Examples\n    --------\n    > var bool = hasFunctionNameSupport()\n    <boolean>\n\n",
	"hasGeneratorSupport": "\nhasGeneratorSupport()\n    Tests whether an environment supports native generator functions.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment support generator functions.\n\n    Examples\n    --------\n    > var bool = hasGeneratorSupport()\n    <boolean>\n\n",
	"hasMapSupport": "\nhasMapSupport()\n    Tests for native `Map` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has `Map` support.\n\n    Examples\n    --------\n    > var bool = hasMapSupport()\n    <boolean>\n\n",
	"hasOwnProp": "\nhasOwnProp( value, property )\n    Tests if an object has a specified property.\n\n    In contrast to the native `Object.prototype.hasOwnProperty`, this function\n    does not throw when provided `null` or `undefined`. Instead, the function\n    returns `false`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasOwnProp( beep, 'boop' )\n    true\n    > bool = hasOwnProp( beep, 'bop' )\n    false\n\n",
	"hasPrototype": "\nhasPrototype( value, proto )\n    Tests if an object's prototype chain contains a provided prototype.\n\n    The function returns `false` if provided a primitive value.\n\n    This function is generally more robust than the `instanceof` operator (e.g.,\n    where inheritance is performed without using constructors).\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    proto: Object|Function\n        Prototype.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a provided prototype exists in a prototype chain.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > function Bar() { return this; };\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var bool = hasPrototype( bar, Foo.prototype )\n    true\n\n    See Also\n    --------\n    getPrototypeOf\n",
	"hasSetSupport": "\nhasSetSupport()\n    Tests for native `Set` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has native `Set` support.\n\n    Examples\n    --------\n    > var bool = hasSetSupport()\n    <boolean>\n\n",
	"hasSymbolSupport": "\nhasSymbolSupport()\n    Tests for native `Symbol` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has native `Symbol` support.\n\n    Examples\n    --------\n    > var bool = hasSymbolSupport()\n    <boolean>\n\n",
	"hasToStringTagSupport": "\nhasToStringTagSupport()\n    Tests for native `toStringTag` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has `toStringTag` support.\n\n    Examples\n    --------\n    > var bool = hasToStringTagSupport()\n    <boolean>\n\n",
	"hasWeakMapSupport": "\nhasWeakMapSupport()\n    Tests for native `WeakMap` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has `WeakMap` support.\n\n    Examples\n    --------\n    > var bool = hasWeakMapSupport()\n    <boolean>\n\n",
	"hasWeakSetSupport": "\nhasWeakSetSupport()\n    Tests for native `WeakSet` support.\n\n    Returns\n    -------\n    bool: boolean\n         Boolean indicating if an environment has `WeakSet` support.\n\n    Examples\n    --------\n    > var bool = hasWeakSetSupport()\n    <boolean>\n\n",
	"HOURS_IN_DAY": "\nHOURS_IN_DAY\n    Number of hours in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var hrs = days * HOURS_IN_DAY\n    75.36\n\n    See Also\n    --------\n    HOURS_IN_WEEK\n",
	"HOURS_IN_WEEK": "\nHOURS_IN_WEEK\n    Number of hours in a week.\n\n    Examples\n    --------\n    > var wkrs = 3.14;\n    > var hrs = wks * HOURS_IN_WEEK\n    527.52\n\n    See Also\n    --------\n    HOURS_IN_DAY\n",
	"httpServer": "\nhttpServer( [options,] [requestListener] )\n    Returns a function to create an HTTP server.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.port: integer (optional)\n        Server port. Default: `0` (i.e., randomly assigned).\n\n    options.maxport: integer (optional)\n        Max server port when port hunting. Default: `maxport = port`.\n\n    options.hostname: string (optional)\n        Server hostname.\n\n    options.address: string (optional)\n        Server address. Default: `'127.0.0.1'`.\n\n    requestListener: Function (optional)\n        Request callback.\n\n    Returns\n    -------\n    createServer: Function\n        Function to create an HTTP server.\n\n    Examples\n    --------\n    // Basic usage:\n    > var createServer = httpServer()\n    <Function>\n\n    // Provide a request callback:\n    > function onRequest( request, response ) {\n    >    console.log( request.url );\n    >    response.end( 'OK' );\n    > };\n    > createServer = httpServer( onRequest )\n    <Function>\n\n    // Specify a specific port:\n    > var opts = { 'port': 7331 };\n    > createServer = httpServer( opts )\n    <Function>\n\n\ncreateServer( done )\n    Creates an HTTP server.\n\n    Parameters\n    ----------\n    done: Function\n        Callback to invoke after creating a server.\n\n    Examples\n    --------\n    > function done( error, server ) {\n    >    if ( error ) {\n    >        throw error;\n    >    }\n    >    console.log( 'Success!' );\n    >    server.close();\n    > };\n    > var createServer = httpServer();\n    > createServer( done );\n\n",
	"identity": "\nidentity( x )\n    Identity function.\n\n    Parameters\n    ----------\n    x: any\n        Input value.\n\n    Returns\n    -------\n    out: any\n        Input value.\n\n    Examples\n    --------\n    > var v = identity( 3.14 )\n    3.14\n\n    See Also\n    --------\n    constantFunction\n",
	"indexOf": "\nindexOf( arr, searchElement[, fromIndex] )\n    Returns the first index at which a given element can be found.\n\n    Search is performed using *strict equality* comparison.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Array-like object.\n\n    searchElement: any\n        Element to find.\n\n    fromIndex: integer (optional)\n        Starting index (if negative, the start index is determined relative to\n        last element).\n\n    Returns\n    -------\n    out: integer\n        Index or -1.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ 4, 3, 2, 1 ];\n    > var idx = indexOf( arr, 3 );\n    1\n    > arr = [ 4, 3, 2, 1 ];\n    > idx = indexOf( arr, 5 );\n    -1\n\n    // Using a `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, 3 )\n    5\n\n    // `fromIndex` which exceeds `array` length:\n    > arr = [ 1, 2, 3, 4, 2, 5 ];\n    > idx = indexOf( arr, 2, 10 )\n    -1\n\n    // Negative `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\n    > idx = indexOf( arr, 2, -4 )\n    5\n    > idx = indexOf( arr, 2, -1 )\n    7\n\n    // Negative `fromIndex` exceeding input `array` length:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, -10 )\n    1\n\n    // Array-like objects:\n    > var str = 'bebop';\n    > idx = indexOf( str, 'o' )\n    3\n\n",
	"inherit": "\ninherit( ctor, superCtor )\n    Prototypical inheritance by replacing the prototype of one constructor with\n    the prototype of another constructor.\n\n    This function is not designed to work with ES2015/ES6 classes. For\n    ES2015/ES6 classes, use `class` with `extends`.\n\n    Parameters\n    ----------\n    ctor: Object|Function\n        Constructor which will inherit.\n\n    superCtor: Object|Function\n        Super (parent) constructor.\n\n    Returns\n    -------\n    out: Object|Function\n        Child constructor.\n\n    Examples\n    --------\n    // Create a parent constructor:\n    > function Foo() { return this; };\n    > Foo.prototype.beep = function beep() { return 'boop'; };\n\n    // Create a child constructor:\n    > function Bar() { Foo.call( this ); return this; };\n\n    // Setup inheritance:\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var v = bar.beep()\n    'boop'\n\n",
	"isArguments": "\nisArguments( value )\n    Tests if a value is an `arguments` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `arguments` object.\n\n    Examples\n    --------\n    > function foo() { return arguments; };\n    > var bool = isArguments( foo() )\n    true\n    > bool = isArguments( [] )\n    false\n\n",
	"isArray": "\nisArray( value )\n    Tests if a value is an array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array.\n\n    Examples\n    --------\n    > var bool = isArray( [] )\n    true\n    > bool = isArray( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n",
	"isArrayArray": "\nisArrayArray( value )\n    Tests if a value is an array of arrays.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of arrays.\n\n    Examples\n    --------\n    > var bool = isArrayArray( [ [], [] ] )\n    true\n    > bool = isArrayArray( [ {}, {} ] )\n    false\n    > bool = isArrayArray( [] )\n    false\n\n",
	"isArrayLike": "\nisArrayLike( value )\n    Tests if a value is array-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is array-like.\n\n    Examples\n    --------\n    > var bool = isArrayLike( [] )\n    true\n    > bool = isArrayLike({ 'length': 10 })\n    true\n\n    See Also\n    --------\n    isArray\n",
	"isBinaryString": "\nisBinaryString( value )\n    Tests if a value is a binary string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a binary string.\n\n    Examples\n    --------\n    > var bool = isBinaryString( '1000101' )\n    true\n    > bool = isBinaryString( 'beep' )\n    false\n    > bool = isBinaryString( '' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isBoolean": "\nisBoolean( value )\n    Tests if a value is a boolean.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean.\n\n    Examples\n    --------\n    > var bool = isBoolean( false )\n    true\n    > bool = isBoolean( new Boolean( false ) )\n    true\n\n\nisBoolean.isPrimitive( value )\n    Tests if a value is a boolean primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean primitive.\n\n    Examples\n    --------\n    > var bool = isBoolean.isPrimitive( true )\n    true\n    > bool = isBoolean.isPrimitive( false )\n    true\n    > bool = isBoolean.isPrimitive( new Boolean( true ) )\n    false\n\n\nisBoolean.isObject( value )\n    Tests if a value is a boolean object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean object.\n\n    Examples\n    --------\n    > var bool = isBoolean.isObject( true )\n    false\n    > bool = isBoolean.isObject( new Boolean( false ) )\n    true\n\n",
	"isBooleanArray": "\nisBooleanArray( value )\n    Tests if a value is an array-like object of booleans.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object of booleans.\n\n    Examples\n    --------\n    > var bool = isBooleanArray( [ true, false, true ] )\n    true\n    > bool = isBooleanArray( [ true, 'abc', false ] )\n    false\n\n\nisBooleanArray.primitives( value )\n    Tests if a value is an array-like object containing only boolean primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        boolean primitives.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.primitives( [ true, false ] )\n    true\n    > bool = isBooleanArray.primitives( [ false, new Boolean( true ) ] )\n    false\n\n\nisBooleanArray.objects( value )\n    Tests if a value is an array-like object containing only Boolean objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        Boolean objects.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.objects( [ new Boolean( false ), true ] )\n    false\n    > bool = isBooleanArray.objects( [ new Boolean( false ), new Boolean( true ) ] )\n    true\n\n",
	"isBuffer": "\nisBuffer( value )\n    Tests if a value is a `Buffer` instance.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Buffer` instance.\n\n    Examples\n    --------\n    > var bool = isBuffer( new Buffer( 'beep' ) )\n    true\n    > bool = isBuffer( new Buffer( [ 1, 2, 3, 4 ] ) )\n    true\n    > bool = isBuffer( {} )\n    false\n    > bool = isBuffer( [] )\n    false\n\n",
	"isCapitalized": "\nisCapitalized( value )\n    Tests if a value is a string having an uppercase first character.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string with an uppercase first\n        character.\n\n    Examples\n    --------\n    > var bool = isCapitalized( 'Hello' )\n    true\n    > bool = isCapitalized( 'world' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isDateObject": "\nisDateObject( value )\n    Tests if a value is a `Date` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Date` object.\n\n    Examples\n    --------\n    > var bool = isDateObject( new Date() )\n    true\n    > bool = isDateObject( '2017-01-01' )\n    false\n\n",
	"isEmailAddress": "\nisEmailAddress( value )\n    Tests if a value is an email address.\n\n    Validation is not rigorous. *9* RFCs relate to email addresses, and\n    accounting for all of them is a fool's errand. The function performs the\n    simplest validation; i.e., requiring at least one `@` symbol.\n\n    For rigorous validation, send a confirmation email. If the email bounces,\n    consider the email invalid.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an email address.\n\n    Examples\n    --------\n    > var bool = isEmailAddress( 'beep@boop.com' )\n    true\n    > bool = isEmailAddress( 'beep' )\n    false\n    > bool = isEmailAddress( null )\n    false\n\n",
	"isEmptyArray": "\nisEmptyArray( value )\n    Tests if a value is an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty array.\n\n    Examples\n    --------\n    > var bool = isEmptyArray( [] )\n    true\n    > bool = isEmptyArray( [ 1, 2, 3 ] )\n    false\n    > bool = isEmptyArray( {} )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isEnumerableProperty": "\nisEnumerableProperty( value, property )\n    Tests if an object property is enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object property is enumerable.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = isEnumerableProperty( beep, 'boop' )\n    true\n    > bool = isEnumerableProperty( beep, 'hasOwnProperty' )\n    false\n\n",
	"isEven": "\nisEven( value )\n    Tests if a value is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether is an even number.\n\n    Examples\n    --------\n    > var bool = isEven( 4.0 )\n    true\n    > bool = isEven( new Number( 4.0 ) )\n    true\n    > bool = isEven( 3.0 )\n    false\n    > bool = isEven( -3.14 )\n    false\n    > bool = isEven( null )\n    false\n\n\nisEven.isPrimitive( value )\n    Tests if a value is a number primitive that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isPrimitive( -4.0 )\n    true\n    > bool = isEven.isPrimitive( new Number( -4.0 ) )\n    false\n\n\nisEven.isObject( value )\n    Tests if a value is a number object that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isObject( 4.0 )\n    false\n    > bool = isEven.isObject( new Number( 4.0 ) )\n    true\n\n    See Also\n    --------\n    isOdd\n",
	"isFloat32Array": "\nisFloat32Array( value )\n    Tests if a value is a `Float32Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Float32Array`.\n\n    Examples\n    --------\n    > var bool = isFloat32Array( new Float32Array( 10 ) )\n    true\n    > bool = isFloat32Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat64Array\n",
	"isFloat64Array": "\nisFloat64Array( value )\n    Tests if a value is a `Float64Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Float64Array`.\n\n    Examples\n    --------\n    > var bool = isFloat64Array( new Float64Array( 10 ) )\n    true\n    > bool = isFloat64Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat32Array\n",
	"isFunction": "\nisFunction( value )\n    Tests if a value is a function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a function.\n\n    Examples\n    --------\n    > function beep() {};\n    > var bool = isFunction( beep )\n    true\n    > bool = isFunction( {} )\n    false\n\n",
	"isFunctionArray": "\nisFunctionArray( value )\n    Tests if a value is an array-like object containing only functions.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        functions.\n\n    Examples\n    --------\n    > function beep() {};\n    > function boop() {};\n    > var bool = isFunctionArray( [ beep, boop ] )\n    true\n    > bool = isFunctionArray( [ {}, beep ] )\n    false\n    > bool = isFunctionArray( [] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isInt16Array": "\nisInt16Array( value )\n    Tests if a value is an `Int16Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Int16Array`.\n\n    Examples\n    --------\n    > var bool = isInt16Array( new Int16Array( 10 ) )\n    true\n    > bool = isInt16Array( [] )\n    false\n\n    See Also\n    --------\n    isInt32Array, isInt8Array\n",
	"isInt32Array": "\nisInt32Array( value )\n    Tests if a value is an `Int32Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Int32Array`.\n\n    Examples\n    --------\n    > var bool = isInt32Array( new Int32Array( 10 ) )\n    true\n    > bool = isInt32Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt8Array\n",
	"isInt8Array": "\nisInt8Array( value )\n    Tests if a value is an `Int8Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Int8Array`.\n\n    Examples\n    --------\n    > var bool = isInt8Array( new Int8Array( 10 ) )\n    true\n    > bool = isInt8Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt32Array\n",
	"isInteger": "\nisInteger( value )\n    Tests if a value is an integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an integer.\n\n    Examples\n    --------\n    > var bool = isInteger( 5.0 )\n    true\n    > bool = isInteger( new Number( 5.0 ) )\n    true\n    > bool = isInteger( -3.14 )\n    false\n    > bool = isInteger( null )\n    false\n\n\nisInteger.isPrimitive( value )\n    Tests if a value is a number primitive having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isPrimitive( -3.0 )\n    true\n    > bool = isInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisInteger.isObject( value )\n    Tests if a value is a number object having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isObject( 3.0 )\n    false\n    > bool = isInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isIntegerArray": "\nisIntegerArray( value )\n    Tests if a value is an array-like object of integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object of integer\n        values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isIntegerArray( [ -3.0, '3.0' ] )\n    false\n\n\nisIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive integer\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isIntegerArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isIntegerArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isJSON": "\nisJSON( value )\n    Tests if a value is a parseable JSON string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a parseable JSON string.\n\n    Examples\n    --------\n    > var bool = isJSON( '{\"a\":5}' )\n    true\n    > bool = isJSON( '{a\":5}' )\n    false\n\n",
	"isLeapYear": "\nisLeapYear( value )\n    Tests whether a value corresponds to a leap year in the Gregorian calendar.\n\n    A leap year is defined as any year which is exactly divisible by `4`, except\n    for years which are exactly divisible by `100` and not by `400`. In this\n    definition, `100` corresponds to years marking a new century, and `400`\n    corresponds to the length of the *leap cycle*.\n\n    If not provided any `arguments`, the function returns a `boolean` indicating\n    if the current year (according to local time) is a leap year.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value corresponds to a leap year.\n\n    Examples\n    --------\n    > var bool = isLeapYear( new Date() )\n    <boolean>\n    > bool = isLeapYear( 1996 )\n    true\n    > bool = isLeapYear( 2001 )\n    false\n\n",
	"isLowercase": "\nisLowercase( value )\n    Tests if a value is a lowercase string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a lowercase string.\n\n    Examples\n    --------\n    > var bool = isLowercase( 'hello' )\n    true\n    > bool = isLowercase( 'World' )\n    false\n\n    See Also\n    --------\n    isString, isUppercase\n",
	"isnan": "\nisnan( value )\n    Tests if a value is `NaN`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `NaN`.\n\n    Examples\n    --------\n    > var bool = isnan( NaN )\n    true\n    > bool = isnan( new Number( NaN ) )\n    true\n    > bool = isnan( 3.14 )\n    false\n    > bool = isnan( null )\n    false\n\n\nisnan.isPrimitive( value )\n    Tests if a value is a `NaN` number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `NaN` number primitive.\n\n    Examples\n    --------\n    > var bool = isnan.isPrimitive( NaN )\n    true\n    > bool = isnan.isPrimitive( 3.14 )\n    false\n    > bool = isnan.isPrimitive( new Number( NaN ) )\n    false\n\n\nisnan.isObject( value )\n    Tests if a value is a number object having a value of `NaN`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value of\n        `NaN`.\n\n    Examples\n    --------\n    > var bool = isnan.isObject( NaN )\n    false\n    > bool = isnan.isObject( new Number( NaN ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isNaNArray": "\nisNaNArray( value )\n    Tests if a value is an array-like object containing only `NaN` values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `NaN` values.\n\n    Examples\n    --------\n    > var bool = isNaNArray( [ NaN, NaN, NaN ] )\n    true\n    > bool = isNaNArray( [ NaN, 2 ] )\n    false\n\n\nisNaNArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive `NaN`\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive `NaN` values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.primitives( [ NaN, new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.primitives( [ NaN, NaN, NaN ] )\n    true\n\n\nisNaNArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having `NaN` values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having `NaN` values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.objects( [ new Number( NaN ), new Number( NaN ) ] )\n    true\n    > bool = isNaNArray.objects( [ NaN, new Number( NaN ), new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.objects( [ NaN, NaN, NaN ] )\n    false\n\n    See Also\n    --------\n    isnan\n",
	"isNegativeInteger": "\nisNegativeInteger( value )\n    Tests if a value is a negative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative integer.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger( -5.0 )\n    true\n    > bool = isNegativeInteger( new Number( -5.0 ) )\n    true\n    > bool = isNegativeInteger( 5.0 )\n    false\n    > bool = isNegativeInteger( -3.14 )\n    false\n    > bool = isNegativeInteger( null )\n    false\n\n\nisNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeInteger.isObject( value )\n    Tests if a value is a number object having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isObject( -3.0 )\n    false\n    > bool = isNegativeInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNegativeIntegerArray": "\nisNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only negative integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative integers.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only negative primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNegativeNumber": "\nisNegativeNumber( value )\n    Tests if a value is a negative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative number.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber( -5.0 )\n    true\n    > bool = isNegativeNumber( new Number( -5.0 ) )\n    true\n    > bool = isNegativeNumber( -3.14 )\n    true\n    > bool = isNegativeNumber( 5.0 )\n    false\n    > bool = isNegativeNumber( null )\n    false\n\n\nisNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeNumber.isObject( value )\n    Tests if a value is a number object having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isObject( -3.0 )\n    false\n    > bool = isNegativeNumber.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNegativeNumberArray": "\nisNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only negative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive negative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative number values.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonNegativeInteger": "\nisNonNegativeInteger( value )\n    Tests if a value is a nonnegative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger( 5.0 )\n    true\n    > bool = isNonNegativeInteger( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeInteger( 3.14 )\n    false\n    > bool = isNonNegativeInteger( -5.0 )\n    false\n    > bool = isNonNegativeInteger( null )\n    false\n\n\nisNonNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeInteger.isObject( value )\n    Tests if a value is a number object having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isObject( 3.0 )\n    false\n    > bool = isNonNegativeInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNonNegativeIntegerArray": "\nisNonNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative integers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonnegative\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonNegativeNumber": "\nisNonNegativeNumber( value )\n    Tests if a value is a nonnegative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative number.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber( 5.0 )\n    true\n    > bool = isNonNegativeNumber( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeNumber( 3.14 )\n    true\n    > bool = isNonNegativeNumber( -5.0 )\n    false\n    > bool = isNonNegativeNumber( null )\n    false\n\n\nisNonNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeNumber.isObject( value )\n    Tests if a value is a number object having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isObject( 3.0 )\n    false\n    > bool = isNonNegativeNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNonNegativeNumberArray": "\nisNonNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonnegative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative number values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeNumberArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonPositiveInteger": "\nisNonPositiveInteger( value )\n    Tests if a value is a nonpositive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger( -5.0 )\n    true\n    > bool = isNonPositiveInteger( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveInteger( 5.0 )\n    false\n    > bool = isNonPositiveInteger( -3.14 )\n    false\n    > bool = isNonPositiveInteger( null )\n    false\n\n\nisNonPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveInteger.isObject( value )\n    Tests if a value is a number object having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isObject( -3.0 )\n    false\n    > bool = isNonPositiveInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNonPositiveIntegerArray": "\nisNonPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive integers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonpositive\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonPositiveNumber": "\nisNonPositiveNumber( value )\n    Tests if a value is a nonpositive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive number.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber( -5.0 )\n    true\n    > bool = isNonPositiveNumber( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveNumber( -3.14 )\n    true\n    > bool = isNonPositiveNumber( 5.0 )\n    false\n    > bool = isNonPositiveNumber( null )\n    false\n\n\nisNonPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveNumber.isObject( value )\n    Tests if a value is a number object having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isObject( -3.0 )\n    false\n    > bool = isNonPositiveNumber.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNonPositiveNumberArray": "\nisNonPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonpositive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive number values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNull": "\nisNull( value )\n    Tests if a value is `null`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `null`.\n\n    Examples\n    --------\n    > var bool = isNull( null )\n    true\n    > bool = isNull( true )\n    false\n\n    See Also\n    --------\n    isUndefined, isUndefinedOrNull\n",
	"isNullArray": "\nisNullArray( value )\n    Tests if a value is an array-like object containing only `null` values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `null` values.\n\n    Examples\n    --------\n    > var bool = isNullArray( [ null, null, null ] )\n    true\n    > bool = isNullArray( [ NaN, 2, null ] )\n    false\n\n    See Also\n    --------\n    isArray, isNull\n",
	"isObject": "\nisObject( value )\n    Tests if a value is an object; e.g., `{}`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an object.\n\n    Examples\n    --------\n    > var bool = isObject( {} )\n    true\n    > bool = isObject( true )\n    false\n\n    See Also\n    --------\n    isObjectLike, isPlainObject\n",
	"isObjectArray": "\nisObjectArray( value )\n    Tests if a value is an array-like object containing only objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        objects.\n\n    Examples\n    --------\n    > var bool = isObjectArray( [ {}, new Number(3.0) ] )\n    true\n    > bool = isObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isObject\n",
	"isObjectLike": "\nisObjectLike( value )\n    Tests if a value is object-like.\n\n    Return values are the same as would be obtained using the built-in `typeof`\n    operator except that `null` is not considered an `object`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is object-like.\n\n    Examples\n    --------\n    > var bool = isObjectLike( {} )\n    true\n    > bool = isObjectLike( [] )\n    true\n    > bool = isObjectLike( null )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n",
	"isPlainObject": "\nisPlainObject( value )\n    Tests if a value is a plain object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a plain object.\n\n    Examples\n    --------\n    > var bool = isPlainObject( {} )\n    true\n    > bool = isPlainObject( null )\n    false\n\n    See Also\n    --------\n    isObject\n",
	"isPlainObjectArray": "\nisPlainObjectArray( value )\n    Tests if a value is an array-like object containing only plain objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        plain objects.\n\n    Examples\n    --------\n    > var bool = isPlainObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isPlainObjectArray( [ {}, new Number(3.0) ] )\n    false\n    > bool = isPlainObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPlainObject\n",
	"isPositiveInteger": "\nisPositiveInteger( value )\n    Tests if a value is a positive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive integer.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger( 5.0 )\n    true\n    > bool = isPositiveInteger( new Number( 5.0 ) )\n    true\n    > bool = isPositiveInteger( 3.14 )\n    false\n    > bool = isPositiveInteger( -5.0 )\n    false\n    > bool = isPositiveInteger( null )\n    false\n\n\nisPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        positive integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveInteger.isObject( value )\n    Tests if a value is a number object having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isObject( 3.0 )\n    false\n    > bool = isPositiveInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isPositiveIntegerArray": "\nisPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only positive integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive integers.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveIntegerArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isInteger, isPositiveInteger\n",
	"isPositiveNumber": "\nisPositiveNumber( value )\n    Tests if a value is a positive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive number.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber( 5.0 )\n    true\n    > bool = isPositiveNumber( new Number( 5.0 ) )\n    true\n    > bool = isPositiveNumber( 3.14 )\n    true\n    > bool = isPositiveNumber( -5.0 )\n    false\n    > bool = isPositiveNumber( null )\n    false\n\n\nisPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveNumber.isObject( value )\n    Tests if a value is a number object having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isObject( 3.0 )\n    false\n    > bool = isPositiveNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isPositiveNumberArray": "\nisPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only positive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive numbers.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive number values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveNumberArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isPositiveNumber\n",
	"isPrimitive": "\nisPrimitive( value )\n    Tests if a value is a JavaScript primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a JavaScript primitive.\n\n    Examples\n    --------\n    > var bool = isPrimitive( true )\n    true\n    > bool = isPrimitive( {} )\n    false\n\n",
	"isPrimitiveArray": "\nisPrimitiveArray( value )\n    Tests if a value is an array-like object containing only JavaScript\n    primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        JavaScript primitives.\n\n    Examples\n    --------\n    > var bool = isPrimitiveArray( [ '3', 2, null ] )\n    true\n    > bool = isPrimitiveArray( [ {}, 2, 1 ] )\n    false\n    > bool = isPrimitiveArray( [ new String('abc'), '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPrimitive\n",
	"isProbability": "\nisProbability( value )\n    Tests if a value is a probability.\n\n    A probability is defined as a numeric value on the interval `[0,1]`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability( 0.5 )\n    true\n    > bool = isProbability( new Number( 0.5 ) )\n    true\n    > bool = isProbability( 3.14 )\n    false\n    > bool = isProbability( -5.0 )\n    false\n    > bool = isProbability( null )\n    false\n\n\nisProbability.isPrimitive( value )\n    Tests if a value is a number primitive which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive which is a\n        probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isPrimitive( 0.3 )\n    true\n    > bool = isProbability.isPrimitive( new Number( 0.3 ) )\n    false\n\n\nisProbability.isObject( value )\n    Tests if a value is a number object having a value which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value which\n        is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isObject( 0.77 )\n    false\n    > bool = isProbability.isObject( new Number( 0.77 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isProbabilityArray": "\nisProbabilityArray( value )\n    Tests if a value is an array-like object containing only probabilities.\n\n    A probability is defined as a numeric value on the interval `[0,1]`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray( [ 0.5, new Number(0.8) ] )\n    true\n    > bool = isProbabilityArray( [ 0.8, 1.2 ] )\n    false\n    > bool = isProbabilityArray( [ 0.8, '0.2' ] )\n    false\n\n\nisProbabilityArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    probabilities.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.primitives( [ 1.0, 0.0, 0.5 ] )\n    true\n    > bool = isProbabilityArray.primitives( [ 0.3, new Number(0.4) ] )\n    false\n\n\nisProbabilityArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having probability values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having probability values.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.objects( [ new Number(0.7), new Number(1.0) ] )\n    true\n    > bool = isProbabilityArray.objects( [ 1.0, 0.0, new Number(0.7) ] )\n    false\n\n    See Also\n    --------\n    isArray, isProbability\n",
	"isRegExp": "\nisRegExp( value )\n    Tests if a value is a regular expression.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression.\n\n    Examples\n    --------\n    > var bool = isRegExp( /\\.+/ )\n    true\n    > bool = isRegExp( {} )\n    false\n\n",
	"isRegExpString": "\nisRegExpString( value )\n    Tests if a value is a regular expression string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression string.\n\n    Examples\n    --------\n    > var bool = isRegExpString( '/beep/' )\n    true\n    > bool = isRegExpString( 'beep' )\n    false\n    > bool = isRegExpString( '' )\n    false\n    > bool = isRegExpString( null )\n    false\n\n    See Also\n    --------\n    isRegExp\n",
	"isSymbol": "\nisSymbol( value )\n    Tests if a value is a symbol.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a symbol.\n\n    Examples\n    --------\n    > var bool = isSymbol( Symbol( 'beep' ) )\n    true\n    > bool = isSymbol( Object( Symbol( 'beep' ) ) )\n    true\n    > bool = isSymbol( {} )\n    false\n    > bool = isSymbol( null )\n    false\n    > bool = isSymbol( true )\n    false\n\n",
	"isSymbolArray": "\nisSymbolArray( value )\n    Tests if a value is an array-like object containing only symbols.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only symbols.\n\n    Examples\n    --------\n    > var bool = isSymbolArray( [ Symbol( 'beep' ), Symbol( 'boop' ) ] )\n    true\n    > bool = isSymbolArray( Symbol( 'beep' ) )\n    false\n    > bool = isSymbolArray( [] )\n    false\n    > bool = isSymbolArray( {} )\n    false\n    > bool = isSymbolArray( null )\n    false\n    > bool = isSymbolArray( true )\n    false\n\n\nisSymbolArray.primitives( value )\n    Tests if a value is an array-like object containing only `symbol`\n    primitives.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `symbol` primitives.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.primitives( [ Symbol( 'beep' ) ] )\n    true\n    > bool = isSymbolArray.primitives( [ Object( Symbol( 'beep' ) ) ] )\n    false\n    > bool = isSymbolArray.primitives( [] )\n    false\n    > bool = isSymbolArray.primitives( {} )\n    false\n    > bool = isSymbolArray.primitives( null )\n    false\n    > bool = isSymbolArray.primitives( true )\n    false\n\n\nisSymbolArray.objects( value )\n    Tests if a value is an array-like object containing only `Symbol`\n    objects.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `Symbol` objects.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.objects( [ Object( Symbol( 'beep' ) ) ] )\n    true\n    > bool = isSymbolArray.objects( [ Symbol( 'beep' ) ] )\n    false\n    > bool = isSymbolArray.objects( [] )\n    false\n    > bool = isSymbolArray.objects( {} )\n    false\n    > bool = isSymbolArray.objects( null )\n    false\n    > bool = isSymbolArray.objects( true )\n    false\n\n    See Also\n    --------\n    isArray, isSymbol\n",
	"isTypedArray": "\nisTypedArray( value )\n    Tests if a value is a typed array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a typed array.\n\n    Examples\n    --------\n    > var bool = isTypedArray( new Int8Array( 10 ) );\n    true\n\n    See Also\n    --------\n    isArray, isTypedArrayLike\n",
	"isTypedArrayLike": "\nisTypedArrayLike( value )\n    Tests if a value is typed-array-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is typed-array-like.\n\n    Examples\n    --------\n    > var bool = isTypedArrayLike( new Int16Array() )\n    true\n    > bool = isTypedArrayLike({\n    >    'length': 10,\n    >    'byteOffset': 0,\n    >    'byteLength': 10,\n    >    'BYTES_PER_ELEMENT': 4\n    > })\n    true\n\n    See Also\n    --------\n    isTypedArray\n",
	"isUint16Array": "\nisUint16Array( value )\n    Tests if a value is a `Uint16Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint16Array`.\n\n    Examples\n    --------\n    > var bool = isUint16Array( new Uint16Array( 10 ) )\n    true\n    > bool = isUint16Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint32Array, isUint8Array\n",
	"isUint32Array": "\nisUint32Array( value )\n    Tests if a value is a `Uint32Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint32Array`.\n\n    Examples\n    --------\n    > var bool = isUint32Array( new Uint32Array( 10 ) )\n    true\n    > bool = isUint32Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint8Array\n",
	"isUint8Array": "\nisUint8Array( value )\n    Tests if a value is a `Uint8Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint8Array`.\n\n    Examples\n    --------\n    > var bool = isUint8Array( new Uint8Array( 10 ) )\n    true\n    > bool = isUint8Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint32Array\n",
	"isUint8ClampedArray": "\nisUint8ClampedArray( value )\n    Tests if a value is a `Uint8ClampedArray`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint8ClampedArray`.\n\n    Examples\n    --------\n    > var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) )\n    true\n    > bool = isUint8ClampedArray( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint8Array\n",
	"isUNCPath": "\nisUNCPath( value )\n    Tests if a value is a UNC path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a UNC path.\n\n    Examples\n    --------\n    > var bool = isUNCPath( '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isUNCPath( '/foo/bar/baz' )\n    false\n\n",
	"isUndefined": "\nisUndefined( value )\n    Tests if a value is `undefined`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `undefined`.\n\n    Examples\n    --------\n    > var bool = isUndefined( void 0 )\n    true\n    > bool = isUndefined( null )\n    false\n\n    See Also\n    --------\n    isNull, isUndefinedOrNull\n",
	"isUndefinedOrNull": "\nisUndefinedOrNull( value )\n    Tests if a value is `undefined` or `null`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `undefined` or `null`.\n\n    Examples\n    --------\n    > var bool = isUndefinedOrNull( void 0 )\n    true\n    > bool = isUndefinedOrNull( null )\n    true\n    > bool = isUndefinedOrNull( false )\n    false\n\n    See Also\n    --------\n    isNull, isUndefined\n",
	"isUnityProbabilityArray": "\nisUnityProbabilityArray( value )\n    Tests if a value is an array of probabilities that sum to one.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of probabilities that sum\n        to one.\n\n    Examples\n    --------\n    > var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] )\n    true\n    > bool = isUnityProbabilityArray( Uint8Array( [ 0, 1 ] )\n    true\n    > bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] )\n    false\n    > bool = isUnityProbabilityArray( [ 3.14, 0.0 ] )\n    false\n\n    See Also\n    --------\n    isProbability, isProbabilityArray\n",
	"isUppercase": "\nisUppercase( value )\n    Tests if a value is an uppercase `string`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an uppercase `string`.\n\n    Examples\n    --------\n    > var bool = isUppercase( 'HELLO' )\n    true\n    > bool = isUppercase( 'World' )\n    false\n\n    See Also\n    --------\n    isLowercase, isString\n",
	"isURI": "\nisURI( value )\n    Tests if a value is a URI.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a URI.\n\n    Examples\n    --------\n    > var bool = isURI( 'http://google.com' )\n    true\n    > bool = isURI( 'http://localhost/' )\n    true\n    > bool = isURI( 'http://example.w3.org/path%20with%20spaces.html' )\n    true\n    > bool = isURI( 'ftp://ftp.is.co.za/rfc/rfc1808.txt' )\n    true\n\n    // No scheme:\n    > bool = isURI( '' )\n    false\n    > bool = isURI( 'foo@bar' )\n    false\n    > bool = isURI( '://foo/' )\n    false\n\n    // Illegal characters:\n    > bool = isURI( 'http://<foo>' )\n    false\n\n    // Invalid path:\n    > bool = isURI( 'http:////foo.html' )\n    false\n\n    // Incomplete hex escapes:\n    > bool = isURI( 'http://example.w3.org/%a' )\n    false\n\n",
	"isWebWorker": "\nisWebWorker\n    Boolean indicating if the runtime is a web worker.\n\n    Examples\n    --------\n    > isWebWorker\n    <boolean>\n\n",
	"isWindows": "\nisWindows\n    Boolean indicating if the current process is running on Windows.\n\n    Examples\n    --------\n    > isWindows\n    <boolean>\n\n",
	"lowercase": "\nlowercase( str )\n    Converts a `string` to lowercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Lowercase string.\n\n    Examples\n    --------\n    > var out = lowercase( 'bEEp' )\n    'beep'\n\n    See Also\n    --------\n    uppercase\n",
	"lpad": "\nlpad( str, len[, pad] )\n    Left pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = lpad( 'a', 5 )\n    '    a'\n    > out = lpad( 'beep', 10, 'b' )\n    'bbbbbbbeep'\n    > out = lpad( 'boop', 12, 'beep' )\n    'beepbeepboop'\n\n    See Also\n    --------\n    pad, rpad\n",
	"ltrim": "\nltrim( str )\n    Trims whitespace from the beginning of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u00a0\n    - \\u1680\n    - \\u180e\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = ltrim( ' \\r\\n\\t  Beep \\t\\t\\n  ' )\n    'Beep \\t\\t\\n  '\n\n    See Also\n    --------\n    trim, rtrim\n",
	"MILLISECONDS_IN_DAY": "\nMILLISECONDS_IN_DAY\n    Number of milliseconds in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var ms = days * MILLISECONDS_IN_DAY\n    271296000\n\n",
	"MILLISECONDS_IN_HOUR": "\nMILLISECONDS_IN_HOUR\n    Number of milliseconds in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var ms = hrs * MILLISECONDS_IN_HOUR\n    11304000\n\n",
	"MILLISECONDS_IN_MINUTE": "\nMILLISECONDS_IN_MINUTE\n    Number of milliseconds in a minute.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var ms = mins * MILLISECONDS_IN_MINUTE\n    188400\n\n",
	"MILLISECONDS_IN_SECOND": "\nMILLISECONDS_IN_SECOND\n    Number of milliseconds in a second.\n\n    Examples\n    --------\n    > var secs = 3.14;\n    > var ms = secs * MILLISECONDS_IN_SECOND\n    3140\n\n",
	"MILLISECONDS_IN_WEEK": "\nMILLISECONDS_IN_WEEK\n    Number of milliseconds in a week.\n\n    Examples\n    --------\n    > var weeks = 3.14;\n    > var ms = weeks * MILLISECONDS_IN_WEEK\n    1899072000\n\n",
	"MINUTES_IN_DAY": "\nMINUTES_IN_DAY\n    Number of minutes in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var mins = days * MINUTES_IN_DAY\n    4521.6\n\n",
	"MINUTES_IN_HOUR": "\nMINUTES_IN_HOUR\n    Number of minutes in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var mins = hrs * MINUTES_IN_HOUR\n    188.4\n\n",
	"MINUTES_IN_WEEK": "\nMINUTES_IN_WEEK\n    Number of minutes in a week.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var mins = wks * MINUTES_IN_WEEK\n    31651.2\n\n",
	"MONTHS_IN_YEAR": "\nMONTHS_IN_YEAR\n    Number of months in a year.\n\n    Examples\n    --------\n    > var yrs = 3.14;\n    > var mons = yrs * MONTHS_IN_YEAR\n    37.68\n\n",
	"objectEntries": "\nobjectEntries( obj )\n    Returns an array of an object's own enumerable property `[key, value]`\n    pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var entries = objectEntries( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectFromEntries, objectValues\n",
	"objectFromEntries": "\nobjectFromEntries( entries )\n    Creates an object from an array of key-value pairs.\n\n    Parameters\n    ----------\n    entries: Array<Array>\n        Input object.\n\n    Returns\n    -------\n    out: Object\n        Object created from `[key, value]` pairs.\n\n    Examples\n    --------\n    > var entries = [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ];\n    > var obj = objectFromEntries( entries )\n    { 'beep': 'boop', 'foo': 'bar' }\n\n    See Also\n    --------\n    objectEntries\n",
	"objectInverse": "\nobjectInverse( obj[, options] )\n    Inverts an object, such that keys become values and values become keys.\n\n    Beware when providing objects having values which are themselves objects.\n    The function relies on native object serialization (`#toString`) when\n    converting values to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverse( obj )\n    { 'beep': 'a', 'boop': 'b' }\n\n    // Duplicate values:\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverse( obj )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverse( obj, { 'duplicates': false } )\n    { 'beep': 'c', 'boop': 'b' }\n\n",
	"objectValues": "\nobjectValues( obj )\n    Returns an array of an object's own enumerable property values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var vals = objectValues( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntries\n",
	"openURL": "\nopenURL( url )\n    Opens a URL in a user's default browser.\n\n    In a non-browser environment, the function returns an unreferenced child\n    process. In a browser environment, the function returns a reference to a\n    `window` object.\n\n    Parameters\n    ----------\n    url: string\n        URL to open.\n\n    Returns\n    -------\n    out: process|Window\n        Child process or `window` object.\n\n    Examples\n    --------\n    > var out = openURL( 'https://google.com' );\n\n",
	"pad": "\npad( str, len[, options] )\n    Pads a `string` such that the padded `string` has length `len`.\n\n    Any padding which does not evenly divide available space is trimmed such\n    that the returned string length is always `len`.\n\n    If `len < str.length`, the input string is trimmed.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Output string length.\n\n    options: Object (optional)\n        Options.\n\n    options.lpad: string (optional)\n        String used to left pad.\n\n    options.rpad: string (optional)\n        String used to right pad.\n\n    options.centerRight: boolean (optional)\n        Boolean indicating whether to center right in the event of a tie.\n        Default: `false` (i.e., center left).\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = pad( 'a', 5 )\n    'a    '\n\n    // Left pad:\n    > out = pad( 'a', 10, { 'lpad': 'b' })\n    'bbbbbbbbba'\n\n    // Right pad:\n    > out = pad( 'a', 12, { 'rpad': 'b' })\n    'abbbbbbbbbbb'\n\n    // Center an input string:\n    > var opts = { 'lpad': 'a', 'rpad': 'c' };\n    > out = pad( 'b', 11, opts )\n    'aaaaabccccc'\n\n    // Left center:\n    > opts.centerRight = false;\n    > out = pad( 'b', 10, opts )\n    'aaaabccccc'\n\n    // Right center:\n    > opts.centerRight = true;\n    > out = pad( 'b', 10, opts )\n    'aaaaabcccc'\n\n    // Output string always length `len`:\n    > opts = { 'lpad': 'boop', 'rpad': 'woot' };\n    > out = pad( 'beep', 10, opts )\n    'boobeepwoo'\n\n    // Pad right, trim right:\n    > out = pad( 'beep', 2 )\n    'be'\n\n    // Pad left, trim left:\n    > opts = { 'lpad': 'b' };\n    > out = pad( 'beep', 2, opts )\n    'ep'\n\n    // Pad both, trim both:\n    > opts = { 'lpad': '@', 'rpad': '!' };\n    > out = pad( 'beep', 2, opts )\n    'ee'\n\n    // Pad both, trim both starting from left:\n    > out = pad( 'abcdef', 3, opts )\n    'cde'\n\n    // Pad both, trim both starting from right:\n    > opts.centerRight = true;\n    > out = pad( 'abcdef', 3, opts )\n    'bcd'\n\n    See Also\n    --------\n    lpad, rpad\n",
	"PATH_DELIMITER": "\nPATH_DELIMITER\n    Platform-specific path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER\n    <string>\n\n    // POSIX environment:\n    > var path = '/usr/bin:/bin:/usr/sbin';\n    > var parts = path.split( PATH_DELIMITER )\n    [ '/usr/bin', '/bin', '/usr/sbin' ]\n\n    // Windows environment:\n    > path = 'C:\\\\Windows\\\\system32;C:\\\\Windows';\n    > parts = path.split( PATH_DELIMITER )\n    [ 'C:\\\\Windows\\system32', 'C:\\\\Windows' ]\n\n    See Also\n    --------\n    PATH_DELIMITER_POSIX, PATH_DELIMITER_WIN32\n",
	"PATH_DELIMITER_POSIX": "\nPATH_DELIMITER_POSIX\n    POSIX path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_POSIX\n    ':'\n    > var PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n    > var paths = PATH.split( PATH_DELIMITER_POSIX )\n    [ '/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_WIN32\n",
	"PATH_DELIMITER_WIN32": "\nPATH_DELIMITER_WIN32\n    Windows path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_WIN32\n    ';'\n    > var PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n    > var paths = PATH.split( PATH_DELIMITER_WIN32 )\n    [ 'C:\\\\Windows\\\\system32', 'C:\\\\Windows', 'C:\\\\Program Files\\\\node\\\\' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_POSIX\n",
	"PATH_SEP": "\nPATH_SEP\n    Platform-specific path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP\n    <string>\n\n    // Windows environment:\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    // POSIX environment:\n    > parts = 'foo/bar/baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP_POSIX, PATH_SEP_WIN32\n",
	"PATH_SEP_POSIX": "\nPATH_SEP_POSIX\n    POSIX path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_POSIX\n    '/'\n    > var parts = 'foo/bar/baz'.split( PATH_SEP_POSIX )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_WIN32\n",
	"PATH_SEP_WIN32": "\nPATH_SEP_WIN32\n    Windows path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_WIN32\n    '\\\\'\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_POSIX\n",
	"pick": "\npick( obj, keys )\n    Returns a partial object copy containing only specified keys.\n\n    If a key does not exist as an own property in a source object, the key is\n    ignored.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to copy.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pick( obj1, 'b' )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pickBy\n",
	"pickBy": "\npickBy( obj, predicate )\n    Returns a partial object copy containing properties for which a predicate\n    returns a truthy value.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) {\n    >     return ( value > 1 );\n    > };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pickBy( obj1, predicate )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pick\n",
	"readDir": "\nreadDir( path )\n    Synchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        Directory contents.\n\n    Examples\n    --------\n    > var out = readDir( './beep/boop' );\n\n    See Also\n    --------\n    exists, readFile\n",
	"readFile": "\nreadFile( file[, options] )\n    Synchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var out = readFile( './beep/boop.js' );\n\n    See Also\n    --------\n    exists, readDir, readJSON\n",
	"readFileList": "\nreadFileList( filepaths[, options] )\n    Synchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        File contents.\n\n    out[ i ].file: string\n        File path.\n\n    out[ i ].data: Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > var out = readFileList( filepaths );\n\n",
	"readJSON": "\nreadJSON( file[, options] )\n    Synchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    Returns\n    -------\n    out: Error|JSON\n        File contents.\n\n    Examples\n    --------\n    > var out = readJSON( './beep/boop.json' );\n\n    See Also\n    --------\n    readFile\n",
	"removeUTF8BOM": "\nremoveUTF8BOM( str )\n    Removes a UTF-8 byte order mark (BOM) from the beginning of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with BOM removed.\n\n    Examples\n    --------\n    > var out = removeUTF8BOM( '\\ufeffbeep' )\n    'beep'\n\n",
	"reorderArguments": "\nreorderArguments( fcn, indices[, thisArg] )\n    Returns a function that invokes a provided function with reordered\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    indices: Array<integer>\n        Argument indices.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reordered arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 1, 2 ]\n\n    See Also\n    --------\n    reverseArguments\n",
	"repeat": "\nrepeat( str, n )\n    Repeats a string `n` times and returns the concatenated result.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    n: integer\n        Number of repetitions.\n\n    Returns\n    -------\n    out: string\n        Repeated string.\n\n    Examples\n    --------\n    > var out = repeat( 'a', 5 )\n    'aaaaa'\n    > out = repeat( '', 100 )\n    ''\n    > out = repeat( 'beep', 0 )\n    ''\n\n    See Also\n    --------\n    pad\n",
	"replace": "\nreplace( str, search, newval )\n    Replaces `search` occurrences with a replacement `string`.\n\n    When provided a `string` as the `search` value, the function replaces *all*\n    occurrences. To remove only the first match, use a regular expression.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string|RegExp\n        Search expression.\n\n    newval: string|Function\n        Replacement value or function.\n\n    Returns\n    -------\n    out: string\n        String containing replacement(s).\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = replace( 'beep', 'e', 'o' )\n    'boop'\n\n    // Replacer function:\n    > function replacer( match, p1 ) { return '/'+p1+'/'; };\n    > var str = 'Oranges and lemons';\n    > out = replace( str, /([^\\s]+)/gi, replacer )\n    '/Oranges/ /and/ /lemons/'\n\n    // Replace only first match:\n    > out = replace( 'beep', /e/, 'o' )\n    'boep'\n\n",
	"rescape": "\nrescape( str )\n    Escapes a regular expression string.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: string\n        Escaped string.\n\n    Examples\n    --------\n    > var str = rescape( '[A-Z]*' )\n    '\\\\[A\\\\-Z\\\\]\\\\*'\n\n",
	"resolveParentPath": "\nresolveParentPath( path[, options] )\n    Synchronously resolves a path by walking parent directories.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    Returns\n    -------\n    out: string|null\n        Resolved path.\n\n    Examples\n    --------\n    > var out = resolveParentPath( 'package.json' );\n\n",
	"reverseArguments": "\nreverseArguments( fcn[, thisArg] )\n    Returns a function that invokes a provided function with arguments in\n    reverse order.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reversed arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reverseArguments( foo );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 2, 1 ]\n\n    See Also\n    --------\n    reorderArguments\n",
	"reviveError": "\nreviveError( obj, path[, options] )\n    Revives a JSON-serialized error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or error object.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n    > var err = JSON.parse( str, reviveError )\n    <TypeError>\n\n    See Also\n    --------\n    err2json\n",
	"RE_DIRNAME": "\nRE_DIRNAME\n    Regular expression to capture a path dirname.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_DIRNAME.posix\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n\n\nRE_DIRNAME.win32\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n\n    See Also\n    --------\n    RE_DIRNAME_POSIX, RE_DIRNAME_WINDOWS, dirname\n",
	"RE_DIRNAME_POSIX": "\nRE_DIRNAME_POSIX\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    './foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_WINDOWS, dirname\n",
	"RE_DIRNAME_WINDOWS": "\nRE_DIRNAME_WINDOWS\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\bar\\\\index.js' )[ 1 ]\n    'foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    '\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_POSIX, dirname\n",
	"RE_EOL": "\nRE_EOL\n    Regular expression to match a newline character sequence: /\\r?\\n/.\n\n    Examples\n    --------\n    > var bool = RE_EOL.test( '\\n' )\n    true\n    > bool = RE_EOL.test( '\\r\\n' )\n    true\n    > bool = RE_EOL.test( \\\\r\\\\n' )\n    false\n\n",
	"RE_EXTNAME": "\nRE_EXTNAME\n    Regular expression to capture a filename extension.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_EXTNAME.posix\n    Regular expression to capture a POSIX filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n\n\nRE_EXTNAME.win32\n    Regular expression to capture a Windows filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n\n    See Also\n    --------\n    RE_EXTNAME_POSIX, RE_EXTNAME_WINDOWS, extname\n",
	"RE_EXTNAME_POSIX": "\nRE_EXTNAME_POSIX\n    Regular expression to capture a POSIX filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( '.' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( './' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_WINDOWS, extname\n",
	"RE_EXTNAME_WINDOWS": "\nRE_EXTNAME_WINDOWS\n    Regular expression to capture a Windows filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( beep\\\\boop.' )[ 1 ]\n    '.'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_POSIX, extname\n",
	"RE_FUNCTION_NAME": "\nRE_FUNCTION_NAME\n    Regular expression to capture a function name.\n\n    Examples\n    --------\n    > function beep() { return 'boop'; };\n    > var name = RE_FUNCTION_NAME.exec( beep.toString() )[ 1 ]\n    'beep'\n    > name = RE_FUNCTION_NAME.exec( function () {} )[ 1 ]\n    ''\n\n    See Also\n    --------\n    functionName\n",
	"RE_REGEXP": "\nRE_REGEXP\n    Regular expression to parse a regular expression string.\n\n    Regular expression strings should be escaped.\n\n    Examples\n    --------\n    > var bool = RE_REGEXP.test( '/^beep$/' )\n    true\n    > bool = RE_REGEXP.test( '/boop' )\n    false\n\n    // Escape regular expression strings:\n    > bool = RE_REGEXP.test( '/^\\/([^\\/]+)\\/(.*)$/' )\n    false\n    > bool = RE_REGEXP.test( '/^\\\\/([^\\\\/]+)\\\\/(.*)$/' )\n    true\n\n    See Also\n    --------\n    reFromString\n",
	"RE_UNC_PATH": "\nRE_UNC_PATH\n    Regular expression to parse a UNC path.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b';\n    > var bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::b';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'beep boop \\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b:c';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '//server/share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = './foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/../bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n\n    See Also\n    --------\n    isUNCPath\n",
	"rpad": "\nrpad( str, len[, pad] )\n    Right pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = rpad( 'a', 5 )\n    'a    '\n    > out = rpad( 'beep', 10, 'p' )\n    'beeppppppp'\n    > out = rpad( 'beep', 12, 'boop' )\n    'beepboopboop'\n\n    See Also\n    --------\n    lpad, pad\n",
	"rtrim": "\nrtrim( str )\n    Trims whitespace from the end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u00a0\n    - \\u1680\n    - \\u180e\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = rtrim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    ' \\t\\t\\n  Beep'\n\n    See Also\n    --------\n    ltrim, trim\n",
	"SECONDS_IN_DAY": "\nSECONDS_IN_DAY\n    Number of seconds in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var secs = days * SECONDS_IN_DAY\n    271296\n\n",
	"SECONDS_IN_HOUR": "\nSECONDS_IN_HOUR\n    Number of seconds in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var secs = hrs * SECONDS_IN_HOUR\n    11304\n\n",
	"SECONDS_IN_MINUTE": "\nSECONDS_IN_MINUTE\n    Number of seconds in a minute.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var secs = mins * SECONDS_IN_MINUTE\n    188.4\n\n",
	"SECONDS_IN_WEEK": "\nSECONDS_IN_WEEK\n    Number of seconds in a week.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var secs = wks * SECONDS_IN_WEEK\n    1899072\n\n",
	"setReadOnly": "\nsetReadOnly( obj, prop, value )\n    Defines a read-only property.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setReadOnly( obj, 'foo', 'bar' );\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n",
	"startsWith": "\nstartsWith( str, search[, position] )\n    Tests if a `string` starts with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    position: integer (optional)\n        Position at which to start searching for `search`. If less than `0`, the\n        start position is determined relative to the end of the input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` starts with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = startsWith( 'Beep', 'Be' )\n    true\n    > bool = startsWith( 'Beep', 'ep' )\n    false\n    > bool = startsWith( 'Beep', 'ee', 1 )\n    true\n    > bool = startsWith( 'Beep', 'ee', -3 )\n    true\n    > bool = startsWith( 'Beep', '' )\n    true\n\n    See Also\n    --------\n    endsWith\n",
	"tmpdir": "\ntmpdir()\n    Returns the directory for storing temporary files.\n\n    Returns\n    -------\n    dir: string\n         Directory for temporary files.\n\n    Examples\n    --------\n    > var dir = tmpdir()\n    e.g., '/path/to/temporary/files/directory'\n\n    See Also\n    --------\n    configdir, homedir\n",
	"trim": "\ntrim( str )\n    Trims whitespace from the beginning and end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u00a0\n    - \\u1680\n    - \\u180e\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = trim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    'Beep'\n\n    See Also\n    --------\n    ltrim, pad, rtrim\n",
	"tryFunction": "\ntryFunction( fcn[, thisArg] )\n    Wraps a function in a try/catch block.\n\n    If provided an asynchronous function, the returned function only traps\n    errors which occur during the current event loop tick.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to wrap.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Wrapped function.\n\n    Examples\n    --------\n    > function fcn() {\n    >     throw new Error( 'beep boop' );\n    > };\n    > var f = wrap( fcn );\n    > var out = f();\n    > out.message\n    'beep boop'\n\n",
	"tryRequire": "\ntryRequire( id )\n    Wraps `require` in a `try/catch` block.\n\n    This function traps and returns any errors encountered when attempting to\n    require a module.\n\n    Use caution when attempting to resolve a relative path or a local module.\n    This function attempts to resolve a module from its current path. Thus, the\n    function is unable to resolve anything which is not along its search path.\n    For local requires, use an absolute file path.\n\n    Parameters\n    ----------\n    id: string\n        Module id.\n\n    Returns\n    -------\n    out: any|Error\n        Resolved module or an `Error`.\n\n    Examples\n    --------\n    > var out = tryRequire( '_unknown_module_id_' )\n    <Error>\n\n",
	"typeOf": "\ntypeOf( value )\n    Determines a value's type.\n\n    The following values are not natively provided in older JavaScript engines:\n\n    - Map\n    - Set\n    - WeakMap\n    - WeakSet\n    - Symbol\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        The value's type.\n\n    Examples\n    --------\n    // Built-ins:\n    > var t = typeOf( 'a' )\n    'string'\n    > t = typeOf( 5 )\n    'number'\n    > t = typeOf( NaN )\n    'number'\n    > t = typeOf( true )\n    'boolean'\n    > t = typeOf( false )\n    'boolean'\n    > t = typeOf( null )\n    'null'\n    > t = typeOf( undefined )\n    'undefined'\n    > t = typeOf( [] )\n    'array'\n    > t = typeOf( {} )\n    'object'\n    > t = typeOf( function noop() {} )\n    'function'\n    > t = typeOf( new Symbol( 'beep' ) )\n    'symbol'\n    > t = typeOf( /.+/ )\n    'regexp'\n    > t = typeOf( new String( 'beep' ) )\n    'string'\n    > t = typeOf( new Number( 5 ) )\n    'number'\n    > t = typeOf( new Boolean( false ) )\n    'boolean'\n    > t = typeOf( new Array() )\n    'array'\n    > t = typeOf( new Object() )\n    'object'\n    > t = typeOf( new Int8Array( 10 ) )\n    'int8array'\n    > t = typeOf( new Uint8Array( 10 ) )\n    'uint8array'\n    > t = typeOf( new Uint8ClampedArray( 10 ) )\n    'uint8clampedarray'\n    > t = typeOf( new Int16Array( 10 ) )\n    'int16array'\n    > t = typeOf( new Uint16Array( 10 ) )\n    'uint16array'\n    > t = typeOf( new Int32Array( 10 ) )\n    'int32array'\n    > t = typeOf( new Uint32Array( 10 ) )\n    'uint32array'\n    > t = typeOf( new Float32Array( 10 ) )\n    'float32array'\n    > t = typeOf( new Float64Array( 10 ) )\n    'float64array'\n    > t = typeOf( new ArrayBuffer( 10 ) )\n    'arraybuffer'\n    > t = typeOf( new Date() )\n    'date'\n    > t = typeOf( new RegExp( '.+ )') )\n    'regexp'\n    > t = typeOf( new Map() )\n    'map'\n    > t = typeOf( new Set() )\n    'set'\n    > t = typeOf( new WeakMap() )\n    'weakmap'\n    > t = typeOf( new WeakSet() )\n    'weakset'\n    > t = typeOf( new Error( 'beep' ) )\n    'error'\n    > t = typeOf( new TypeError( 'beep' ) )\n    'typeerror'\n    > t = typeOf( new SyntaxError( 'beep' ) )\n    'syntaxerror'\n    > t = typeOf( new ReferenceError( 'beep' ) )\n    'referenceerror'\n    > t = typeOf( new URIError( 'beep' ) )\n    'urierror'\n    > t = typeOf( new RangeError( 'beep' ) )\n    'rangeerror'\n    > t = typeOf( new EvalError( 'beep' ) )\n    'evalerror'\n    > t = typeOf( Math )\n    'math'\n    > t = typeOf( JSON )\n    'json'\n\n    // Arguments object:\n    > function beep() { return arguments; };\n    > t = typeOf( beep() )\n    'arguments'\n\n    // Node.js Buffer object:\n    > t = typeOf( new Buffer( 10 ) )\n    'buffer'\n\n    // Custom constructor:\n    > function Person() { return this };\n    > t = typeOf( new Person() )\n    'person'\n\n    // Anonymous constructor:\n    > var Foo = function () { return this; };\n    > t = typeOf new Foo() )\n    ''\n\n    See Also\n    --------\n    constructorName, nativeClass\n",
	"uncapitalize": "\nuncapitalize( str )\n    Lowercases the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uncapitalized string.\n\n    Examples\n    --------\n    > var out = uncapitalize( 'Beep' )\n    'beep'\n    > out = uncapitalize( 'bOOp' )\n    'bOOp'\n\n    See Also\n    --------\n    capitalize, lowercase\n",
	"uncurry": "\nuncurry( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    >     return function addY( y ) {\n    >         return x + y;\n    >     };\n    > };\n    > var fcn = uncurry( addX );\n    > var sum = fcn( 2, 3 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( x ) {\n    >     return function add( y ) {\n    >         return x + y;\n    >     };\n    > };\n    > fcn = uncurry( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addX( x ) {\n    >     this.x = x;\n    >     return addY;\n    > };\n    > function addY( y ) {\n    >     return this.x + y;\n    > };\n    > fcn = uncurry( addX, {} );\n    > sum = fcn( 2, 3 )\n    5\n\n    See Also\n    --------\n    curry, uncurryRight\n",
	"uncurryRight": "\nuncurryRight( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Provided arguments are applied starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    >     return function addY( y ) {\n    >         return x + y;\n    >     };\n    > };\n    > var fcn = uncurryRight( addX );\n    > var sum = fcn( 3, 2 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( y ) {\n    >     return function add( x ) {\n    >         return x + y;\n    >     };\n    > };\n    > fcn = uncurryRight( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addY( y ) {\n    >     this.y = y;\n    >     return addX;\n    > };\n    > function addX( x ) {\n    >     return x + this.y;\n    > };\n    > fcn = uncurryRight( addY, {} );\n    > sum = fcn( 3, 2 )\n    5\n\n    See Also\n    --------\n    curry, curryRight, uncurry\n",
	"unzip": "\nunzip( arr[, idx] )\n    Unzips a zipped array (i.e., a nested array of tuples).\n\n    Parameters\n    ----------\n    arr: Array\n        Zipped array.\n\n    idx: Array<number> (optional)\n        Array of indices specifying which tuple elements to unzip.\n\n    Returns\n    -------\n    out: Array\n        Array of unzipped arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > var out = unzip( arr )\n    [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n\n    // Provide indices:\n    > arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > out = unzip( arr, [ 0, 2 ] )\n    [ [ 1, 2 ], [ 3, 4 ] ]\n\n    See Also\n    --------\n    zip\n",
	"uppercase": "\nuppercase( str )\n    Converts a `string` to uppercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uppercase string.\n\n    Examples\n    --------\n    > var out = uppercase( 'bEEp' )\n    'BEEP'\n\n    See Also\n    --------\n    capitalize, lowercase\n",
	"zip": "\nzip( arr[, options] )\n    Generates array tuples from input arrays.\n\n    Parameters\n    ----------\n    arr: ...Array\n        Input arrays to be zipped.\n\n    options: Object (optional)\n        Options.\n\n    options.trunc: boolean (optional)\n        Boolean indicating whether to truncate arrays longer than the shortest\n        input array. Default: `true`.\n\n    options.fill: any (optional)\n        Fill value used for arrays of unequal length. Default: `null`.\n\n    options.arrays: boolean (optional)\n        Boolean indicating whether an input array should be interpreted as an\n        array of arrays to be zipped. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var out = zip( [ 1, 2 ], [ 'a', 'b' ] )\n    [ [ 1, 'a' ], [ 2, 'b' ] ]\n\n    // Turn off truncation:\n    > var opts = { 'trunc': false };\n    > out = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts )\n    [ [ 1, 'a' ], [ 2, 'b' ], [ 3, null ] ]\n\n    See Also\n    --------\n    unzip\n"
};
