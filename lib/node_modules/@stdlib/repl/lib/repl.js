'use strict';

// MODULES //

var r = require( 'repl' );
var getKeys = require( 'object-keys' ).shim();
var isFunction = require( '@stdlib/utils/is-function' );
var namespace = require( '@stdlib/namespace' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var validate = require( './validate.js' );
var defaults = require( './defaults.js' );


// MAIN //

/**
* Starts a REPL environment.
*
* @param {Options} [options] - REPL options
* @param {Callback} clbk - callback to invoke upon starting a REPL
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} callback argument must be a function
*
* @example
* repl( onStart );
*
* function onStart( error, server ) {
*     if ( error ) {
*         throw error;
*     }
*     server.close();
* }
*/
function repl( options, clbk ) {
	var context;
	var server;
	var opts;
	var keys;
	var key;
	var err;
	var cb;
	var i;

	opts = defaults();
	if ( arguments.length === 1 ) {
		cb = options;
	} else {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
		cb = clbk;
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( 'invalid input argument. Callback argument must be a function. Value: `'+cb+'`.' );
	}
	// Start the REPL server:
	server = r.start( opts );

	// Create a REPL context:
	context = namespace( {} );

	// Bind all context values to the REPL server...
	keys = getKeys( context );
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		setReadOnly( server.context, key, context[ key ] );
	}
	// Don't release the zalgo!
	setTimeout( onTimeout, 0 );

	/**
	* Callback invoked during a subsequent tick.
	*
	* @private
	*/
	function onTimeout() {
		cb( null, server );
	} // end FUNCTION onTimeout()
} // end FUNCTION repl()


// EXPORTS //

module.exports = repl;
