'use strict';

/*
* When adding names to the namespace, ensure that they are added in alphabetical order according to alias (namespace key).
*/

var ns = [];

ns.push({
	'alias': 'identity',
	'path': '@stdlib/utils/identity-function',
	'value': require( '@stdlib/utils/identity-function' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/constant-function'
	]
});

ns.push({
	'alias': 'indexOf',
	'path': '@stdlib/utils/index-of',
	'value': require( '@stdlib/utils/index-of' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'inherit',
	'path': '@stdlib/utils/inherit',
	'value': require( '@stdlib/utils/inherit' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'inmap',
	'path': '@stdlib/utils/inmap',
	'value': require( '@stdlib/utils/inmap' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each',
		'@stdlib/utils/inmap-right',
		'@stdlib/utils/map'
	]
});

ns.push({
	'alias': 'inmapAsync',
	'path': '@stdlib/utils/inmap-async',
	'value': require( '@stdlib/utils/inmap-async' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each-async',
		'@stdlib/utils/inmap',
		'@stdlib/utils/map-async'
	]
});

ns.push({
	'alias': 'inmapRight',
	'path': '@stdlib/utils/inmap-right',
	'value': require( '@stdlib/utils/inmap-right' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each-right',
		'@stdlib/utils/inmap',
		'@stdlib/utils/map-right'
	]
});

ns.push({
	'alias': 'INT16_MAX',
	'path': '@stdlib/math/constants/int16-max',
	'value': require( '@stdlib/math/constants/int16-max' ),
	'type': 'number',
	'related': [
		'@stdlib/math/constants/int16-min'
	]
});

ns.push({
	'alias': 'INT16_MIN',
	'path': '@stdlib/math/constants/int16-min',
	'value': require( '@stdlib/math/constants/int16-min' ),
	'type': 'number',
	'related': [
		'@stdlib/math/constants/int16-max'
	]
});

ns.push({
	'alias': 'INT32_MAX',
	'path': '@stdlib/math/constants/int32-max',
	'value': require( '@stdlib/math/constants/int32-max' ),
	'type': 'number',
	'related': [
		'@stdlib/math/constants/int32-min'
	]
});

ns.push({
	'alias': 'INT32_MIN',
	'path': '@stdlib/math/constants/int32-min',
	'value': require( '@stdlib/math/constants/int32-min' ),
	'type': 'number',
	'related': [
		'@stdlib/math/constants/int32-max'
	]
});

ns.push({
	'alias': 'INT8_MAX',
	'path': '@stdlib/math/constants/int8-max',
	'value': require( '@stdlib/math/constants/int8-max' ),
	'type': 'number',
	'related': [
		'@stdlib/math/constants/int8-min'
	]
});

ns.push({
	'alias': 'INT8_MIN',
	'path': '@stdlib/math/constants/int8-min',
	'value': require( '@stdlib/math/constants/int8-min' ),
	'type': 'number',
	'related': [
		'@stdlib/math/constants/int8-max'
	]
});

ns.push({
	'alias': 'isAbsolutePath',
	'path': '@stdlib/assert/is-absolute-path',
	'value': require( '@stdlib/assert/is-absolute-path' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-relative-path'
	]
});

ns.push({
	'alias': 'isAlphagram',
	'path': '@stdlib/assert/is-alphagram',
	'value': require( '@stdlib/assert/is-alphagram' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-anagram'
	]
});

ns.push({
	'alias': 'isAnagram',
	'path': '@stdlib/assert/is-anagram',
	'value': require( '@stdlib/assert/is-anagram' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-alphagram'
	]
});

ns.push({
	'alias': 'isArguments',
	'path': '@stdlib/assert/is-arguments',
	'value': require( '@stdlib/assert/is-arguments' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isArray',
	'path': '@stdlib/assert/is-array',
	'value': require( '@stdlib/assert/is-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array-like'
	]
});

ns.push({
	'alias': 'isArrayArray',
	'path': '@stdlib/assert/is-array-array',
	'value': require( '@stdlib/assert/is-array-array' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isArrayBuffer',
	'path': '@stdlib/assert/is-arraybuffer',
	'value': require( '@stdlib/assert/is-arraybuffer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isArrayLength',
	'path': '@stdlib/assert/is-array-length',
	'value': require( '@stdlib/assert/is-array-length' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isArrayLike',
	'path': '@stdlib/assert/is-array-like',
	'value': require( '@stdlib/assert/is-array-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like-object'
	]
});

ns.push({
	'alias': 'isArrayLikeObject',
	'path': '@stdlib/assert/is-array-like-object',
	'value': require( '@stdlib/assert/is-array-like-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like'
	]
});

ns.push({
	'alias': 'isASCII',
	'path': '@stdlib/assert/is-ascii',
	'value': require( '@stdlib/assert/is-ascii' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isBinaryString',
	'path': '@stdlib/assert/is-binary-string',
	'value': require( '@stdlib/assert/is-binary-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isBoolean',
	'path': '@stdlib/assert/is-boolean',
	'value': require( '@stdlib/assert/is-boolean' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isBooleanArray',
	'path': '@stdlib/assert/is-boolean-array',
	'value': require( '@stdlib/assert/is-boolean-array' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isBuffer',
	'path': '@stdlib/assert/is-buffer',
	'value': require( '@stdlib/assert/is-buffer' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isCapitalized',
	'path': '@stdlib/assert/is-capitalized',
	'value': require( '@stdlib/assert/is-capitalized' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isCollection',
	'path': '@stdlib/assert/is-collection',
	'value': require( '@stdlib/assert/is-collection' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array-like'
	]
});

ns.push({
	'alias': 'isDateObject',
	'path': '@stdlib/assert/is-date-object',
	'value': require( '@stdlib/assert/is-date-object' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isDigitString',
	'path': '@stdlib/assert/is-digit-string',
	'value': require( '@stdlib/assert/is-digit-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-hex-string',
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isEmailAddress',
	'path': '@stdlib/assert/is-email-address',
	'value': require( '@stdlib/assert/is-email-address' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isEmptyArray',
	'path': '@stdlib/assert/is-empty-array',
	'value': require( '@stdlib/assert/is-empty-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isEmptyObject',
	'path': '@stdlib/assert/is-empty-object',
	'value': require( '@stdlib/assert/is-empty-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isEnumerableProperty',
	'path': '@stdlib/assert/is-enumerable-property',
	'value': require( '@stdlib/assert/is-enumerable-property' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isError',
	'path': '@stdlib/assert/is-error',
	'value': require( '@stdlib/assert/is-error' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isEvalError',
	'path': '@stdlib/assert/is-eval-error',
	'value': require( '@stdlib/assert/is-eval-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isEven',
	'path': '@stdlib/assert/is-even',
	'value': require( '@stdlib/assert/is-even' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-odd'
	]
});

ns.push({
	'alias': 'isFloat32Array',
	'path': '@stdlib/assert/is-float32array',
	'value': require( '@stdlib/assert/is-float32array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-float64array'
	]
});

ns.push({
	'alias': 'isFloat64Array',
	'path': '@stdlib/assert/is-float64array',
	'value': require( '@stdlib/assert/is-float64array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-float32array'
	]
});

ns.push({
	'alias': 'isFunction',
	'path': '@stdlib/assert/is-function',
	'value': require( '@stdlib/assert/is-function' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isFunctionArray',
	'path': '@stdlib/assert/is-function-array',
	'value': require( '@stdlib/assert/is-function-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isHexString',
	'path': '@stdlib/assert/is-hex-string',
	'value': require( '@stdlib/assert/is-hex-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isInt16Array',
	'path': '@stdlib/assert/is-int16array',
	'value': require( '@stdlib/assert/is-int16array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-int32array',
		'@stdlib/assert/is-int8array'
	]
});

ns.push({
	'alias': 'isInt32Array',
	'path': '@stdlib/assert/is-int32array',
	'value': require( '@stdlib/assert/is-int32array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-int16array',
		'@stdlib/assert/is-int8array'
	]
});

ns.push({
	'alias': 'isInt8Array',
	'path': '@stdlib/assert/is-int8array',
	'value': require( '@stdlib/assert/is-int8array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-int16array',
		'@stdlib/assert/is-int32array'
	]
});

ns.push({
	'alias': 'isInteger',
	'path': '@stdlib/assert/is-integer',
	'value': require( '@stdlib/assert/is-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isIntegerArray',
	'path': '@stdlib/assert/is-integer-array',
	'value': require( '@stdlib/assert/is-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isJSON',
	'path': '@stdlib/assert/is-json',
	'value': require( '@stdlib/assert/is-json' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isLeapYear',
	'path': '@stdlib/assert/is-leap-year',
	'value': require( '@stdlib/assert/is-leap-year' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isLowercase',
	'path': '@stdlib/assert/is-lowercase',
	'value': require( '@stdlib/assert/is-lowercase' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string',
		'@stdlib/assert/is-uppercase'
	]
});

ns.push({
	'alias': 'isnan',
	'path': '@stdlib/assert/is-nan',
	'value': require( '@stdlib/assert/is-nan' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNaNArray',
	'path': '@stdlib/assert/is-nan-array',
	'value': require( '@stdlib/assert/is-nan-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-nan'
	]
});

ns.push({
	'alias': 'isNativeFunction',
	'path': '@stdlib/assert/is-native-function',
	'value': require( '@stdlib/assert/is-native-function' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-function'
	]
});

ns.push({
	'alias': 'isNegativeInteger',
	'path': '@stdlib/assert/is-negative-integer',
	'value': require( '@stdlib/assert/is-negative-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isNegativeIntegerArray',
	'path': '@stdlib/assert/is-negative-integer-array',
	'value': require( '@stdlib/assert/is-negative-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNegativeNumber',
	'path': '@stdlib/assert/is-negative-number',
	'value': require( '@stdlib/assert/is-negative-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNegativeNumberArray',
	'path': '@stdlib/assert/is-negative-number-array',
	'value': require( '@stdlib/assert/is-negative-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNodeDuplexStreamLike',
	'path': '@stdlib/assert/is-node-duplex-stream-like',
	'value': require( '@stdlib/assert/is-node-duplex-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNodeReadableStreamLike',
	'path': '@stdlib/assert/is-node-readable-stream-like',
	'value': require( '@stdlib/assert/is-node-readable-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNodeStreamLike',
	'path': '@stdlib/assert/is-node-stream-like',
	'value': require( '@stdlib/assert/is-node-stream-like' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isNodeTransformStreamLike',
	'path': '@stdlib/assert/is-node-transform-stream-like',
	'value': require( '@stdlib/assert/is-node-transform-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNodeWritableStreamLike',
	'path': '@stdlib/assert/is-node-writable-stream-like',
	'value': require( '@stdlib/assert/is-node-writable-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNonNegativeInteger',
	'path': '@stdlib/assert/is-nonnegative-integer',
	'value': require( '@stdlib/assert/is-nonnegative-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isNonNegativeIntegerArray',
	'path': '@stdlib/assert/is-nonnegative-integer-array',
	'value': require( '@stdlib/assert/is-nonnegative-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonNegativeNumber',
	'path': '@stdlib/assert/is-nonnegative-number',
	'value': require( '@stdlib/assert/is-nonnegative-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNonNegativeNumberArray',
	'path': '@stdlib/assert/is-nonnegative-number-array',
	'value': require( '@stdlib/assert/is-nonnegative-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonPositiveInteger',
	'path': '@stdlib/assert/is-nonpositive-integer',
	'value': require( '@stdlib/assert/is-nonpositive-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isNonPositiveIntegerArray',
	'path': '@stdlib/assert/is-nonpositive-integer-array',
	'value': require( '@stdlib/assert/is-nonpositive-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonPositiveNumber',
	'path': '@stdlib/assert/is-nonpositive-number',
	'value': require( '@stdlib/assert/is-nonpositive-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNonPositiveNumberArray',
	'path': '@stdlib/assert/is-nonpositive-number-array',
	'value': require( '@stdlib/assert/is-nonpositive-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNull',
	'path': '@stdlib/assert/is-null',
	'value': require( '@stdlib/assert/is-null' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-undefined',
		'@stdlib/assert/is-undefined-or-null'
	]
});

ns.push({
	'alias': 'isNullArray',
	'path': '@stdlib/assert/is-null-array',
	'value': require( '@stdlib/assert/is-null-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-null'
	]
});

ns.push({
	'alias': 'isNumber',
	'path': '@stdlib/assert/is-number',
	'value': require( '@stdlib/assert/is-number' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isNumberArray',
	'path': '@stdlib/assert/is-number-array',
	'value': require( '@stdlib/assert/is-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-number',
		'@stdlib/assert/is-numeric-array'
	]
});

ns.push({
	'alias': 'isNumericArray',
	'path': '@stdlib/assert/is-numeric-array',
	'value': require( '@stdlib/assert/is-numeric-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-number-array',
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isObject',
	'path': '@stdlib/assert/is-object',
	'value': require( '@stdlib/assert/is-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object-like',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isObjectArray',
	'path': '@stdlib/assert/is-object-array',
	'value': require( '@stdlib/assert/is-object-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-object'
	]
});

ns.push({
	'alias': 'isObjectLike',
	'path': '@stdlib/assert/is-object-like',
	'value': require( '@stdlib/assert/is-object-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isOdd',
	'path': '@stdlib/assert/is-odd',
	'value': require( '@stdlib/assert/is-odd' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-even'
	]
});

ns.push({
	'alias': 'isoWeeksInYear',
	'path': '@stdlib/time/iso-weeks-in-year',
	'value': require( '@stdlib/time/iso-weeks-in-year' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isPlainObject',
	'path': '@stdlib/assert/is-plain-object',
	'value': require( '@stdlib/assert/is-plain-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object'
	]
});

ns.push({
	'alias': 'isPlainObjectArray',
	'path': '@stdlib/assert/is-plain-object-array',
	'value': require( '@stdlib/assert/is-plain-object-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isPositiveInteger',
	'path': '@stdlib/assert/is-positive-integer',
	'value': require( '@stdlib/assert/is-positive-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isPositiveIntegerArray',
	'path': '@stdlib/assert/is-positive-integer-array',
	'value': require( '@stdlib/assert/is-positive-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-integer',
		'@stdlib/assert/is-positive-integer'
	]
});

ns.push({
	'alias': 'isPositiveNumber',
	'path': '@stdlib/assert/is-positive-number',
	'value': require( '@stdlib/assert/is-positive-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isPositiveNumberArray',
	'path': '@stdlib/assert/is-positive-number-array',
	'value': require( '@stdlib/assert/is-positive-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-number',
		'@stdlib/assert/is-positive-number'
	]
});

ns.push({
	'alias': 'isPrimitive',
	'path': '@stdlib/assert/is-primitive',
	'value': require( '@stdlib/assert/is-primitive' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isPrimitiveArray',
	'path': '@stdlib/assert/is-primitive-array',
	'value': require( '@stdlib/assert/is-primitive-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-primitive'
	]
});

ns.push({
	'alias': 'isProbability',
	'path': '@stdlib/assert/is-probability',
	'value': require( '@stdlib/assert/is-probability' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isProbabilityArray',
	'path': '@stdlib/assert/is-probability-array',
	'value': require( '@stdlib/assert/is-probability-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-probability'
	]
});

ns.push({
	'alias': 'isRangeError',
	'path': '@stdlib/assert/is-range-error',
	'value': require( '@stdlib/assert/is-range-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isReferenceError',
	'path': '@stdlib/assert/is-reference-error',
	'value': require( '@stdlib/assert/is-reference-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isRegExp',
	'path': '@stdlib/assert/is-regexp',
	'value': require( '@stdlib/assert/is-regexp' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isRegExpString',
	'path': '@stdlib/assert/is-regexp-string',
	'value': require( '@stdlib/assert/is-regexp-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-regexp'
	]
});

ns.push({
	'alias': 'isRelativePath',
	'path': '@stdlib/assert/is-relative-path',
	'value': require( '@stdlib/assert/is-relative-path' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-absolute-path'
	]
});

ns.push({
	'alias': 'isSafeInteger',
	'path': '@stdlib/assert/is-safe-integer',
	'value': require( '@stdlib/assert/is-safe-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer',
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isSafeIntegerArray',
	'path': '@stdlib/assert/is-safe-integer-array',
	'value': require( '@stdlib/assert/is-safe-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-safe-integer'
	]
});

ns.push({
	'alias': 'isString',
	'path': '@stdlib/assert/is-string',
	'value': require( '@stdlib/assert/is-string' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isStringArray',
	'path': '@stdlib/assert/is-string-array',
	'value': require( '@stdlib/assert/is-string-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isSymbol',
	'path': '@stdlib/assert/is-symbol',
	'value': require( '@stdlib/assert/is-symbol' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isSymbolArray',
	'path': '@stdlib/assert/is-symbol-array',
	'value': require( '@stdlib/assert/is-symbol-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-symbol'
	]
});

ns.push({
	'alias': 'isSyntaxError',
	'path': '@stdlib/assert/is-syntax-error',
	'value': require( '@stdlib/assert/is-syntax-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isTypeError',
	'path': '@stdlib/assert/is-type-error',
	'value': require( '@stdlib/assert/is-type-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isTypedArray',
	'path': '@stdlib/assert/is-typed-array',
	'value': require( '@stdlib/assert/is-typed-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-typed-array-like'
	]
});

ns.push({
	'alias': 'isTypedArrayLike',
	'path': '@stdlib/assert/is-typed-array-like',
	'value': require( '@stdlib/assert/is-typed-array-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isUint16Array',
	'path': '@stdlib/assert/is-uint16array',
	'value': require( '@stdlib/assert/is-uint16array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint32array',
		'@stdlib/assert/is-uint8array'
	]
});

ns.push({
	'alias': 'isUint32Array',
	'path': '@stdlib/assert/is-uint32array',
	'value': require( '@stdlib/assert/is-uint32array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint16array',
		'@stdlib/assert/is-uint8array'
	]
});

ns.push({
	'alias': 'isUint8Array',
	'path': '@stdlib/assert/is-uint8array',
	'value': require( '@stdlib/assert/is-uint8array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint16array',
		'@stdlib/assert/is-uint32array'
	]
});

ns.push({
	'alias': 'isUint8ClampedArray',
	'path': '@stdlib/assert/is-uint8array-clamped',
	'value': require( '@stdlib/assert/is-uint8array-clamped' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint8array'
	]
});

ns.push({
	'alias': 'isUNCPath',
	'path': '@stdlib/assert/is-unc-path',
	'value': require( '@stdlib/assert/is-unc-path' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isUndefined',
	'path': '@stdlib/assert/is-undefined',
	'value': require( '@stdlib/assert/is-undefined' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-null',
		'@stdlib/assert/is-undefined-or-null'
	]
});

ns.push({
	'alias': 'isUndefinedOrNull',
	'path': '@stdlib/assert/is-undefined-or-null',
	'value': require( '@stdlib/assert/is-undefined-or-null' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-null',
		'@stdlib/assert/is-undefined'
	]
});

ns.push({
	'alias': 'isUnityProbabilityArray',
	'path': '@stdlib/assert/is-unity-probability-array',
	'value': require( '@stdlib/assert/is-unity-probability-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-probability',
		'@stdlib/assert/is-probability-array'
	]
});

ns.push({
	'alias': 'isUppercase',
	'path': '@stdlib/assert/is-uppercase',
	'value': require( '@stdlib/assert/is-uppercase' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-lowercase',
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isURI',
	'path': '@stdlib/assert/is-uri',
	'value': require( '@stdlib/assert/is-uri' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isURIError',
	'path': '@stdlib/assert/is-uri-error',
	'value': require( '@stdlib/assert/is-uri-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isWhitespace',
	'path': '@stdlib/assert/is-whitespace',
	'value': require( '@stdlib/assert/is-whitespace' ),
	'type': 'Function',
	'related': [
		'@stdlib/regexp/whitespace'
	]
});

ns.push({
	'alias': 'IS_BROWSER',
	'path': '@stdlib/assert/is-browser',
	'value': require( '@stdlib/assert/is-browser' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_DARWIN',
	'path': '@stdlib/assert/is-darwin',
	'value': require( '@stdlib/assert/is-darwin' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_ELECTRON',
	'path': '@stdlib/assert/is-electron',
	'value': require( '@stdlib/assert/is-electron' ),
	'type': 'boolean',
	'related': [
		'@stdlib/assert/is-electron-main',
		'@stdlib/assert/is-electron-renderer'
	]
});

ns.push({
	'alias': 'IS_ELECTRON_MAIN',
	'path': '@stdlib/assert/is-electron-main',
	'value': require( '@stdlib/assert/is-electron-main' ),
	'type': 'boolean',
	'related': [
		'@stdlib/assert/is-electron',
		'@stdlib/assert/is-electron-renderer'
	]
});

ns.push({
	'alias': 'IS_ELECTRON_RENDERER',
	'path': '@stdlib/assert/is-electron-renderer',
	'value': require( '@stdlib/assert/is-electron-renderer' ),
	'type': 'boolean',
	'related': [
		'@stdlib/assert/is-electron',
		'@stdlib/assert/is-electron-main'
	]
});

ns.push({
	'alias': 'IS_LITTLE_ENDIAN',
	'path': '@stdlib/assert/is-little-endian',
	'value': require( '@stdlib/assert/is-little-endian' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_NODE',
	'path': '@stdlib/assert/is-node',
	'value': require( '@stdlib/assert/is-node' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_WEB_WORKER',
	'path': '@stdlib/assert/is-web-worker',
	'value': require( '@stdlib/assert/is-web-worker' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_WINDOWS',
	'path': '@stdlib/assert/is-windows',
	'value': require( '@stdlib/assert/is-windows' ),
	'type': 'boolean',
	'related': []
});


// EXPORTS //

module.exports = ns;
