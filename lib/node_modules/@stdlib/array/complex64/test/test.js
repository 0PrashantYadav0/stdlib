/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ArrayBuffer = require( '@stdlib/array/buffer' );
var Float32Array = require( '@stdlib/array/float32' );
var Complex64Array = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof Complex64Array, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (no argument)', function test( t ) {
	var arr = new Complex64Array();
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (length)', function test( t ) {
	var arr = new Complex64Array( 0 );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (array)', function test( t ) {
	var arr = new Complex64Array( [] );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (typed array)', function test( t ) {
	var arr = new Complex64Array( new Float32Array( 0 ) );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (iterable)', function test( t ) {
	var iter;
	var arr;

	iter = {
		'next': next
	};
	arr = new Complex64Array( iter );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();

	function next() {
		return {
			'done': true
		};
	}
});

tape( 'the function returns a 64-bit complex number array (ArrayBuffer)', function test( t ) {
	var arr = new Complex64Array( new ArrayBuffer( 0 ) );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (ArrayBuffer, byte offset)', function test( t ) {
	var arr = new Complex64Array( new ArrayBuffer( 8 ), 8 );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a 64-bit complex number array (ArrayBuffer, byte offset, length)', function test( t ) {
	var arr = new Complex64Array( new ArrayBuffer( 8 ), 8, 0 );
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );
	t.end();
});

tape( 'the function does not require the `new` keyword', function test( t ) {
	var ctor;
	var arr;

	ctor = Complex64Array;

	arr = ctor();
	t.strictEqual( arr instanceof Complex64Array, true, 'returns an instance' );

	t.end();
});
