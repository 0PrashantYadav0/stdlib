'use strict';

// MODULES //

var tape = require( 'tape' );
var prga = require( './../lib/prga.js' );


// FIXTURES //

var S = require( './fixtures/ksa.json' );
var byte_array = require( './fixtures/prga.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof prga, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	t.equal( typeof prga( S ), 'function', 'returns a function' );
	t.end();
});

tape( 'the returned function mutates a provided permutation vector', function test( t ) {
	var expected;
	var f;
	var i;

	expected = new Uint8Array( byte_array );

	// Generate the PRGA and iterate once:
	f = prga( S );
	f();

	// Test for the expected updated state...
	for ( i = 0; i < S.length; i++ ) {
		t.equal( S[i], expected[i], 'has expected value for element '+i );
	}
	t.end();
});

// TODO: remove skip
tape( 'the returned function mutates a provided permutation vector', {'skip': true}, function test( t ) {
	var expected;
	var hex;
	var S;
	var f;
	var b;
	var i;

	// test vectors: https://tools.ietf.org/html/rfc6229
	S = [1, 2, 3, 4, 5];
	f = prga( S );

	expected = 'b2 39 63 05 f0 3d c0 27 cc c3 52 4a 0a 11 18 a8'.split( ' ' );

	for ( i = 0; i < 16; i++ ) {
		b = f();
		hex = b.toString( 16 );
		t.equal( hex, expected[ i ], 'returns expected element' );
	}
	t.end();
});

tape( 'the returned function returns a pseudorandom byte', function test( t ) {
	var b;
	var f;
	var i;
	f = prga( S );
	for ( i = 0; i < 1e3; i++ ) {
		b = f();
		t.equal( b >= 0 && b <= 255, true, 'returns a value on the interval [0,255]' );
	}
	t.end();
});
