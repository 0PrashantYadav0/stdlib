'use strict';

// MODULES //

var Global = require( 'system.global' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var isObject = require( '@stdlib/utils/is-object' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var globalScope = require( './global_scope.js' );


// VARIABLES //

var RE = /node|io\.js/;


// IS NODE //

/**
* Returns a boolean indicating if the runtime is Node.js.
*
* @returns {boolean} boolean indicating if runtime is Node.js
*
* @example
* var bool = isNode;
* // returns <boolean>
*/
function isNode() {
	return (
		// Check for presence of `global` variable:
		typeof global === 'object' &&

		// Check that the `global` variable matches the determined global variable:
		global === Global &&

		// Check for a circular reference to the global variable:
		Global === Global.GLOBAL &&

		// Check that the global variable has the expected internal class:
		nativeClass( Global ) === '[object global]' &&

		// Check that the `global` variable is equal to the global scope:
		globalScope === true &&

		// Check for a `require` global variable:
		typeof require === 'function' &&

		// Check for a `process` global variable:
		typeof process === 'object' &&

		// Check that the `process` global variable has the expected internal class:
		nativeClass( process ) === '[object process]' &&

		// Check for a `versions` property:
		isObject( process.versions ) &&

		// Check for a `node` property:
		isString( process.versions.node ) &&

		// Check for a `release` property:
		isObject( process.release ) &&

		// Check for a `name` property:
		isString( process.release.name ) &&

		// Check that the release name contains either `node` or `io.js` (in Node.js/io.js, the release name is read-only):
		RE.test( process.release.name )
	);
} // end FUNCTION isNode()


// EXPORTS //

module.exports = isNode;
