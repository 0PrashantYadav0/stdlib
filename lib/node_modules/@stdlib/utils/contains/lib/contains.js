'use strict';

// MODULES //

var isArrayLike = require( '@stdlib/utils/is-array-like' );
var isInteger = require( '@stdlib/utils/is-integer' ).isPrimitive;
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isnan = require( '@stdlib/utils/is-nan' ).isPrimitive;


// CONTAINS //

/**
* Test if a value is found in an array-like object.
*
* @param {ArrayLike} val - input value
* @param {*} searchValue - value to search for
* @param {Integer} [position=0] - position at which to start searching for `searchValue`
* @throws {TypeError} val must be array-like
* @throws {TypeError} searchValue must be a string primitive when val is a string
* @throws {TypeError} position must be an integer (if supplied)
* @returns {boolean} true if `searchValue` is contained in `str`, false otherwise
*
* @example
* var out = contains( 'last man standing', 'stand' );
* // returns true
* @example
* var out = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
* @example
* var out = contains( 'presidential election', 'president' );
* // returns true
* @example
* var out = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
* @example
* var out = contains( 'javaScript', 'js' );
* // returns false
* @example
* var out = contains( [ 1, 2, 3, {} ], {} );
* // returns false
* @example
* var out = contains( 'Hidden Treasures', '' );
* // returns true
*/
function contains( val, searchValue, position ) {
	var len;
	var pos;
	var i;

	if ( !isArrayLike( val ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a array-like. Value: `' + val + '`.' );
	}
	pos = 0;
	if ( arguments.length > 2 ) {
		if ( !isInteger( position ) ) {
			throw new TypeError( 'invalid input argument. Third argument must be an integer. Value: `' + position + '`.' );
		}
		pos = position;
	}

	if ( isString( val ) ) {
		if ( !isString( searchValue ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be a string primitive. Value: `' + searchValue + '`.' );
		}
		return val.indexOf( searchValue, pos ) > -1;
	}
	len = val.length;
	if ( isnan( searchValue ) ) {
		for ( i = pos; i < len; i++ ) {
			if ( isnan( val[ i ] ) ) {
				return true;
			}
		}
		return false;
	}
	for ( i = pos; i < len; i++ ) {
		if ( val[ i ] === searchValue ) {
			return true;
		}
	}
	return false;
} // end FUNCTION contains()


// EXPORTS //

module.exports = contains;
