'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var detect = require( './../lib' );


// VARIABLES //

var hasUint8ClampedArray = ( typeof Uint8ClampedArray === 'function' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof detect, 'function', 'main export is a function' );
	t.end();
});

tape( 'feature detection result is a boolean', function test( t ) {
	t.strictEqual( typeof detect(), 'boolean', 'detection result is a boolean' );
	t.end();
});

tape( 'if `Uint8ClampedArray` is supported, detection result is `true`', function test( t ) {
	var mocked;
	if ( hasUint8ClampedArray ) {
		t.strictEqual( detect(), true, 'detection result is `true`' );
	} else {
		t.strictEqual( detect(), false, 'detection result is `false`' );
	}
	mocked = proxyquire( './../lib/detect_uint8clampedarray_support.js', {
		'./uint8clampedarray.js': Mock,
		'@stdlib/utils/is-uint8array-clamped': isArray
	});
	t.strictEqual( mocked(), true, 'detection result is `true` (mocked)' );

	t.end();

	function isArray() {
		return true;
	}

	function Mock( arr ) {
		var out = [];
		var v;
		var i;

		for ( i = 0; i < arr.length; i++ ) {
			v = arr[ i ];
			if ( v < 0 ) {
				v = 0;
			} else if ( v > 255 ) {
				v = 255;
			}
			out.push( v );
		}
		return out;
	}
});

tape( 'if `Uint8ClampedArray` is not supported, detection result is `false`', function test( t ) {
	var mocked;
	if ( hasUint8ClampedArray ) {
		t.strictEqual( detect(), true, 'detection result is `true`' );
	} else {
		t.strictEqual( detect(), false, 'detection result is `false`' );
	}
	mocked = proxyquire( './../lib/detect_uint8clampedarray_support.js', {
		'./uint8clampedarray.js': {}
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_uint8clampedarray_support.js', {
		'./uint8clampedarray.js': Mock1
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_uint8clampedarray_support.js', {
		'./uint8clampedarray.js': Mock2,
		'@stdlib/utils/is-uint8array-clamped': isArray
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_uint8clampedarray_support.js', {
		'./uint8clampedarray.js': Mock3,
		'@stdlib/utils/is-uint8array-clamped': isArray
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	t.end();

	function isArray() {
		return true;
	}

	function Mock1() {
		// Not a typed array:
		return [];
	}

	function Mock2( arr ) {
		var out = [];
		var v;
		var i;

		// Does not clamp...
		for ( i = 0; i < arr.length; i++ ) {
			v = arr[ i ];
			out.push( v );
		}
		return out;
	}

	function Mock3( arr ) {
		var out = [];
		var v;
		var i;

		// Does not clamp...
		for ( i = 0; i < arr.length; i++ ) {
			v = arr[ i ];
			if ( v < 0 ) {
				v = 0;
			}
			out.push( v );
		}
		return out;
	}
});
