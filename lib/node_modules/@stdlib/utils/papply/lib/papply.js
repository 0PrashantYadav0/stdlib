'use strict';

// MODULES //

var isFunction = require( '@stdlib/utils/is-function' );


// MAIN //

/**
* Returns a function of smaller arity by partially applying arguments.
*
* @param {Function} fcn - function to partially apply
* @param {...*} [args] - arguments to partially apply
* @throws {TypeError} first argument must be a function
*
* @example
* function add( x, y ) {
*     return x + y;
* }
*
* var add2 = papply( add, 2 );
*
* var sum = f( 3 );
* // returns 5
*/
function papply( fcn ) {
	var pargs;
	var i;
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a function. Value: `' + fcn + '`.' );
	}
	pargs = new Array( arguments.length-1 );
	for ( i = 1; i < arguments.length; i++ ) {
		pargs[ i-1 ] = arguments[ i ];
	}
	/**
	* Partially applied function.
	*
	* @private
	* @param {...*} [args] - function arguments
	* @returns {*} partially applied function result
	*/
	return function papply() {
		var args;
		var j;
		args = pargs.slice();
		for ( j = 0; j < arguments.length; j++ ) {
			args.push( arguments[ j ] );
		}
		return fcn.apply( null, args );
	}; // end FUNCTION papply()
} // end FUNCTION papply()


// EXPORTS //

module.exports = papply;
