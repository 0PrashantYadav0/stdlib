'use strict';

// MODULES //

var isCollection = require( '@stdlib/assert/is-collection' );
var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

/**
* Tests whether at least one element in a collection passes a test implemented by a predicate function, iterating from right to left.
*
* @param {Collection} collection - input collection
* @param {Function} predicate - test function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a function
* @returns {boolean} boolean indicating whether at least one element passes a test
*
* @example
* function isNegative( v ) {
*     return ( v < 0 );
* }
*
* var arr = [ -1, 1, 2, 3, 4 ];
*
* var bool = someRight( arr, isNegative );
* // returns true
*/
function someRight( collection, predicate, thisArg ) {
	var out;
	var len;
	var i;
	if ( !isCollection( collection ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a collection. Value: `'+collection+'`.' );
	}
	if ( !isFunction( predicate ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+predicate+'`.' );
	}
	len = collection.length;
	for ( i = len-1; i >= 0; i-- ) {
		out = predicate.call( thisArg, collection[ i ], i, collection );
		if ( out ) {
			return true;
		}
		// Account for dynamically resizing a collection...
		if ( len !== collection.length ) {
			i += ( collection.length - len );
			len = collection.length;
		}
	}
	return false;
} // end FUNCTION someRight()


// EXPORTS //

module.exports = someRight;
