'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var detect = require( './../lib' );


// VARIABLES //

var hasWeakSet = ( typeof WeakSet === 'function' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof detect, 'function', 'main export is a function' );
	t.end();
});

tape( 'feature detection result is a boolean', function test( t ) {
	t.equal( typeof detect(), 'boolean', 'detection result is a boolean' );
	t.end();
});

tape( 'if `WeakSet` is supported, detection result is `true`', function test( t ) {
	var mocked;
	if ( hasWeakSet ) {
		t.equal( detect(), true, 'detection result is `true`' );
	} else {
		t.equal( detect(), false, 'detection result is `false`' );
	}
	mocked = proxyquire( './../lib/detect_weakset_support.js', {
		'./weakset.js': Mock
	});
	t.equal( mocked(), true, 'detection result is `true` (mocked)' );

	t.end();

	function Mock() {
		var arr = [];

		function has( value ) {
			return arr.indexOf( value ) !== -1;
		}
		function add( value ) {
			if ( has( value ) ) {
				return;
			}
			arr.push( value );
		}

		return {
			'has': has,
			'add': add
		};
	}
});

tape( 'if `WeakSet` is not supported, detection result is `false`', function test( t ) {
	var mocked;
	if ( hasWeakSet ) {
		t.equal( detect(), true, 'detection result is `true`' );
	} else {
		t.equal( detect(), false, 'detection result is `false`' );
	}
	mocked = proxyquire( './../lib/detect_weakset_support.js', {
		'./weakset.js': {}
	});
	t.equal( mocked(), false, 'detection result is `false` (mocked)' );

	mocked = proxyquire( './../lib/detect_weakset_support.js', {
		'./weakset.js': Mock1
	});
	t.equal( mocked(), false, 'detection result is `false` (no `has` method)' );

	mocked = proxyquire( './../lib/detect_weakset_support.js', {
		'./weakset.js': Mock2
	});
	t.equal( mocked(), false, 'detection result is `false` (no `add` method)' );

	t.end();

	function Mock1() {
		var arr = [];

		function add( value ) {
			arr.push( value );
		}

		return {
			'add': add
		};
	}

	function Mock2() {
		var arr = [];

		function has( value ) {
			return arr.indexOf( value ) !== -1;
		}

		return {
			'has': has
		};
	}
});
