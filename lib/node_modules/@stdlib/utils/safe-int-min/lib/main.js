'use strict';

// MODULES //

var FLOAT16 = require( '@stdlib/constants/math/float16-min-safe-integer' );
var FLOAT32 = require( '@stdlib/constants/math/float32-min-safe-integer' );
var FLOAT64 = require( '@stdlib/constants/math/float64-min-safe-integer' );


// MAIN //

/**
* Returns the minimum safe integer capable of being represented by a numeric real type.
*
* @param {string} dtype - numeric type
* @throws {TypeError} must provide a recognized numeric type
* @returns {number} minimum safe integer
*
* @example
* var m = safeintmin( 'float64' );
* // returns -9007199254740991
*
* @example
* var m = safeintmin( 'float16' );
* // returns -2047
*
* @example
* var m = safeintmin( 'float32' );
* // returns -16777215
*/
function safeintmin( dtype ) {
	switch ( dtype ) {
	case 'float64':
		return FLOAT64;
	case 'float32':
		return FLOAT32;
	case 'float16':
		return FLOAT16;
	default:
		throw new TypeError( 'invalid input argument. Must provide a recognized type. Value: `'+dtype+'`.' );
	}
}


// EXPORTS //

module.exports = safeintmin;
