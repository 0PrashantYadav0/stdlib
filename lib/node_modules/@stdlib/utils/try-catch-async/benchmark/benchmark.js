'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var trycatchAsync = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var i;

	i = 0;
	b.tic();

	return next();

	function next( error, result ) {
		i += 1;
		if ( i <= b.iterations ) {
			return trycatchAsync( x, -1.0, next );
		}
		b.toc();
		if ( error ) {
			b.pass( 'receiving an error is okay' );
		}
		if ( isnan( result ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}

	function x( clbk ) {
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			if ( randu() > 0.5 ) {
				return clbk( null, 1.0 );
			}
			clbk( new Error( 'beep' ) );
		}
	}
});
