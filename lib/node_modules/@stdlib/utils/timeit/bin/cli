#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var stdin = require( '@stdlib/utils/read-stdin' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Prints results as JSON.
*
* @private
* @param {Object} results - results
*/
function printJSON( results ) {
	console.log( JSON.stringify( results ) );
} // end FUNCTION printJSON()

/**
* Prints results as CSV.
*
* @private
* @param {Object} results - results
*/
function printCSV( results ) {
	var times = results.times;
	var i;

	console.log( '%s,%s', 'seconds', 'nanoseconds' );
	for ( i = 0; i < times.length; i++ ) {
		console.log( '%d,%d', times[i][0], times[i][1] );
	}
} // end FUNCTION printJSON()

/**
* Pretty prints results.
*
* @private
* @param {Object} results - results
*/
function prettyPrint( results ) {
	var unit;
	var r;

	r = results.elapsed*1e6 / results.iterations;
	if ( r < 1000 ) {
		unit = 'usec';
	} else {
		r /= 1000;
		if ( r < 1000 ) {
			unit = 'msec';
		} else {
			r /= 1000;
			unit = 'sec';
		}
	}
	console.log( '' );
	console.log( 'iterations: %d', results.iterations );
	console.log( 'repeats: %d', results.repeats );
	console.log( 'iterations/s: %d', results.rate );
	console.log( 'elapsed time: %d sec', results.elapsed );
	console.log( 'lower bound: %d %s/iteration', r, unit );
	console.log( '' );
} // end FUNCTION prettyPrint()


// VARIABLES //

var code;
var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}

opts = {};
if ( args.iterations ) {
	opts.iterations = parseInt( args.iterations, 10 );
}
if ( args.repeats ) {
	opts.repeats = parseInt( args.repeats, 10 );
}
if ( args.before ) {
	opts.before = args.before;
}
if ( args.after ) {
	opts.after = args.after;
}
if ( args.async ) {
	opts.asynchronous = args.async;
}

// Check if we are receiving data from `stdin`...
if ( !process.stdin.isTTY ) {
	return stdin( onRead );
}
code = args._[ 0 ];
process.nextTick( next );

/**
* Callback invoked upon reading from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - data
*/
function onRead( error, data ) {
	if ( error ) {
		return done( error );
	}
	code = data.toString();
	next();
} // end FUNCTION onRead()

/**
* Times a snippet.
*
* @private
*/
function next() {
	main( code, opts, done );
} // end FUNCTION next()

/**
* Callback invoked upon completion.
*
* @private
* @param {(Error|null)} error - error object
* @param {Object} results - results
*/
function done( error, results ) {
	if ( error ) {
		console.error( error.message );
		return process.exit( 1 );
	}
	if ( args.format === 'json' ) {
		printJSON( results );
	} else if ( args.format === 'csv' ) {
		printCSV( results );
	} else {
		prettyPrint( results );
	}
} // end FUNCTION done()
