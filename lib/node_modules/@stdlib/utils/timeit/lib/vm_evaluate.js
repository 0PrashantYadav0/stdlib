'use strict';

// MODULES //

var minstd = require( '@stdlib/math/base/random/minstd-shuffle' );
var sandbox = require( './sandbox.js' );
var wrappedRequire = require( './wrapped_require.js' );
var asyncSource = require( './async.js' );
var syncSource = require( './sync.js' );
var compile = require( './vm_compile.js' );


// MAIN //

/**
* Evaluates source code within a V8 virtual machine context.
*
* @private
* @param {string} src - source code
* @param {Object} opts - options
* @param {string} filename - filename
* @param {string} dirname - directory name
* @param {Callback} clbk - callback to invoke upon completion
*/
function evaluate( src, opts, filename, dirname, clbk ) {
	var tmp;
	var fcn;
	var err;
	var id;
	var s;

	// Create an id:
	id = minstd();

	// Create a new sandbox:
	s = sandbox();
	s.__done__ = done;

	// Generate the source code to evaluate...
	if ( opts.asynchronous ) {
		src = asyncSource( id, src, opts );
	} else {
		src = syncSource( id, src, opts );
	}
	// Compile the source code:
	fcn = compile( filename, src, s );

	// Execute the source code:
	tmp = fcn( wrappedRequire, filename, dirname );

	// Check that the snippet did not prematurely return...
	if ( tmp !== id ) {
		err = new Error( 'evaluation error. Unable to retrieve evaluation results. Ensure that the provided snippet does not return prematurely.' );
		return done( err );
	}
	/**
	* Callback invoked upon executing source code.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {NonNegativeIntegerArray} results - results
	*/
	function done( error, results ) {
		if ( error ) {
			return clbk( error );
		}
		return clbk( null, results );
	} // end FUNCTION done()
} // end FUNCTION evaluate()


// EXPORTS //

module.exports = evaluate;
