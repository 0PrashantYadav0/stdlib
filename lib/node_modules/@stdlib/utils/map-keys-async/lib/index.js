'use strict';

/**
* Map keys from one object to a new object having the same values.
*
* @module @stdlib/utils/map-keys-async
*
* @example
* var readFile = require( '@stdlib/fs/read-file' );
* var mapKeysAsync = require( '@stdlib/utils/map-keys-async' );
*
* function read( key, value, next ) {
*     var opts = {
*         'encoding': 'utf8'
*     };
*     readFile( value, opts, onFile );
*
*     function onFile( error ) {
*         if ( error ) {
*             return next( null, key+':unreadable' );
*         }
*         next( null, key+':readable' );
*     }
* }
*
* // Define a callback which handles errors:
* function done( error, out ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( out );
* }
*
* // Create a dictionary of file names:
* var files = {
*     'file1': './beep.js',
*     'file2': './boop.js'
* };
*
* var opts = {
*     'series': true
* };
*
* // Process each file in `files`:
* mapKeysAsync( files, opts, read, done );
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mapKeysAsync = require( './map_keys.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mapKeysAsync, 'factory', factory );


// EXPORTS //

module.exports = mapKeysAsync;
