'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var detect = require( './../lib' );


// VARIABLES //

var hasFloat32Array = ( typeof Float32Array === 'function' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof detect, 'function', 'main export is a function' );
	t.end();
});

tape( 'feature detection result is a boolean', function test( t ) {
	t.strictEqual( typeof detect(), 'boolean', 'detection result is a boolean' );
	t.end();
});

tape( 'if `Float32Array` is supported, detection result is `true`', function test( t ) {
	var mocked;
	if ( hasFloat32Array ) {
		t.strictEqual( detect(), true, 'detection result is `true`' );
	} else {
		t.strictEqual( detect(), false, 'detection result is `false`' );
	}
	mocked = proxyquire( './../lib/detect_float32array_support.js', {
		'./float32array.js': Mock,
		'@stdlib/assert/is-float32array': isArray
	});
	t.strictEqual( mocked(), true, 'detection result is `true` (mocked)' );

	t.end();

	function isArray() {
		return true;
	}

	function Mock() {
		return [
			1.0,
			3.140000104904175,
			-3.140000104904175,
			Number.POSITIVE_INFINITY
		];
	}
});

tape( 'if `Float32Array` is not supported, detection result is `false`', function test( t ) {
	var mocked;
	if ( hasFloat32Array ) {
		t.strictEqual( detect(), true, 'detection result is `true`' );
	} else {
		t.strictEqual( detect(), false, 'detection result is `false`' );
	}
	mocked = proxyquire( './../lib/detect_float32array_support.js', {
		'./float32array.js': {}
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_float32array_support.js', {
		'./float32array.js': Mock1
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_float32array_support.js', {
		'./float32array.js': Mock2,
		'@stdlib/assert/is-float32array': isArray
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_float32array_support.js', {
		'./float32array.js': Mock3,
		'@stdlib/assert/is-float32array': isArray
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	mocked = proxyquire( './../lib/detect_float32array_support.js', {
		'./float32array.js': Mock4
	});
	t.strictEqual( mocked(), false, 'detection result is `false`' );

	t.end();

	function isArray() {
		return true;
	}

	function Mock1() {
		// Not a typed array:
		return [];
	}

	function Mock2() {
		// Does not lose precision...
		return [ 1.0, 3.14, -3.14, Number.POSITIVE_INFINITY ];
	}

	function Mock3() {
		// Does not overflow...
		return [ 1.0, 3.140000104904175, -3.140000104904175, 5.0e40 ];
	}

	function Mock4() {
		throw new Error( 'beep' );
	}
});
