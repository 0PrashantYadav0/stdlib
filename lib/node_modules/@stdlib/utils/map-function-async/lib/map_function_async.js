'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var validate = require( './validate.js' );


// MAIN //

/**
* Invokes a function `n` times and returns an array of accumulated function return values.
*
* @param {Function} fcn - function to invoke
* @param {NonNegativeInteger} n - number of function invocations
* @param {Options} [options] - function options
* @param {*} [options.thisArg] - execution context
* @param {Function} done - callback to invoke upon invoking a function `n` times
* @throws {TypeError} first argument must be a function
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} last argument must be a function
* @returns {void}
*
* @example
* function fcn( i, next ) {
*     setTimeout( onTimeout, i );
*     function onTimeout() {
*         next( null, i );
*     }
* }
*
* function done( error, out ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( JSON.stringify( out ) );
*     // => [ 0, 1, 2, 3, 4 ]
* }
*
* mapFunAsync( fcn, 5, done );
*/
function mapFunAsync( fcn, n, options, done ) {
	var count;
	var opts;
	var clbk;
	var out;
	var err;
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a function. Value: `'+fcn+'`.' );
	}
	if ( !isNonNegativeInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `'+n+'`.' );
	}
	opts = {};
	if ( arguments.length === 3 ) {
		clbk = options;
	} else {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
		clbk = done;
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( 'invalid input argument. Last argument must be a function. Value: `'+clbk+'`.' );
	}
	// Note: we explicitly do not preallocate in order to ensure "fast" elements for large output arrays (i.e., >64K elements).
	out = [];
	if ( n === 0 ) {
		return clbk( null, out );
	}
	count = 0;
	fcn.call( opts.thisArg, count, next );

	/**
	* Callback invoked upon function completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {*} result - function result
	* @returns {void}
	*/
	function next( error, result ) {
		if ( error ) {
			return clbk( error );
		}
		count += 1;
		out.push( result );
		if ( count === n ) {
			return clbk( null, out );
		}
		fcn.call( opts.thisArg, count, next );
	} // end FUNCTION next()
} // end FUNCTION mapFunAsync()


// EXPORTS //

module.exports = mapFunAsync;
