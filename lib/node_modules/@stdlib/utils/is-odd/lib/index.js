'use strict';

/**
* Tests if a value is an odd number.
*
* @module @stdlib/utils/is-odd
*
* @example
* var isOdd = require( '@stdlib/utils/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( new Number( 5.0 ) );
* // returns true
*
* bool = isOdd( 4.0 );
* // returns false
*
* bool = isOdd( new Number( 4.0 ) );
* // returns false
*
* bool = isOdd( -3.14 );
* // returns false
*
* bool = isOdd( null );
* // returns false
* @example
* // Use interface to check for odd number primitives...
* var isOdd = require( '@stdlib/utils/is-odd' ).isPrimitive;
*
* var bool = isOdd( -5.0 );
* // returns true
*
* bool = isOdd( new Number( -5.0 ) );
* // returns false
* @example
* // Use interface to check for odd number objects...
* var isOdd = require( '@stdlib/utils/is-odd' ).isObject;
*
* var bool = isOdd( 5.0 );
* // returns false
*
* bool = isOdd( new Number( 5.0 ) );
* // returns true
* @example
* // Use interface to check for odd number arrays...
* var isOdd = require( '@stdlib/utils/is-odd' ).isOddArray;
*
* var bool = isOdd( [ -3.0, new Number(3.0) ] );
* // returns true
*
* bool = isOdd( [ 3.0, '3.0' ] );
* // returns false
* @example
* // Use interface to check for arrays of odd number primitives...
* var isOdd = require( '@stdlib/utils/is-odd' ).isPrimitiveOddArray;
*
* var bool = isOdd( [ 3.0, -3.0 ] );
* // returns true
*
* bool = isOdd( [ 3.0, new Number(-3.0) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isOdd = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// METHODS //

setReadOnly( isOdd, 'isPrimitive', isPrimitive );
setReadOnly( isOdd, 'isObject', isObject );
setReadOnly( isOdd, 'isOddArray', arrayfun.create( isOdd ) );
setReadOnly( isOdd, 'isPrimitiveOddArray', arrayfun.create( isPrimitive ) );


// EXPORTS //

module.exports = isOdd;
