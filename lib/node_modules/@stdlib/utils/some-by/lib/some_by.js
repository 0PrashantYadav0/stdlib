'use strict';

// MODULES //

var isCollection = require( '@stdlib/assert/is-collection' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

/**
* Tests whether a collection contains at least `n` elements which pass a test implemented by a predicate function.
*
* @param {Collection} collection - input collection
* @param {PositiveInteger} n - number of elements
* @param {Function} predicate - test function
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a positive integer
* @throws {TypeError} third argument must be a function
* @returns {boolean} boolean indicating whether a collection contains at least `n` elements which pass a test
*
* @example
* function isNegative( v ) {
*     return ( v < 0 );
* }
*
* var arr = [ 1, 2, -3, 4, -1 ];
*
* var bool = someBy( arr, 2, isNegative );
* // returns true
*/
function someBy( collection, n, predicate, thisArg ) {
	var count;
	var out;
	var len;
	var i;
	if ( !isCollection( collection ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a collection. Value: `'+collection+'`.' );
	}
	if ( !isPositiveInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a positive integer. Value: `'+n+'`.' );
	}
	if ( !isFunction( predicate ) ) {
		throw new TypeError( 'invalid input argument. Third argument must be a function. Value: `'+predicate+'`.' );
	}
	len = collection.length;
	count = 0;
	for ( i = 0; i < len; i++ ) {
		out = predicate.call( thisArg, collection[ i ], i, collection );
		if ( out ) {
			count += 1;
			if ( count === n ) {
				return true;
			}
		}
		// Account for dynamically resizing a collection:
		len = collection.length;
	}
	return false;
}


// EXPORTS //

module.exports = someBy;
