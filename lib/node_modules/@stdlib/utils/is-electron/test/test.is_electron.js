'use strict';

// MODULES //

var tape = require( 'tape' );
var Global = require( 'system.global' )();
var proxyquire = require( 'proxyquire' );
var isElectron = require( './../lib/is_electron.js' );


// FIXTURES //

function process() {
	/* jshint validthis:true */ // TODO: eslint
	this.type = 'browser';
	this.versions = {
		'electron': '1.0.0',
		'chrome': '42.1.34'
	};
	return this;
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isElectron, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if runtime is Electron (browser/main)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	proc = Global.process;
	Global.process = new process();
	Global.process.type = 'browser';

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, true, 'returns true' );

	t.end();

	function nativeClass() {
		return '[object process]';
	}
});

tape( 'the function returns `true` if runtime is Electron (renderer)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	proc = Global.process;
	Global.process = new process();
	Global.process.type = 'renderer';

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, true, 'returns true' );

	t.end();

	function nativeClass() {
		return '[object process]';
	}
});

tape( 'the function returns `false` if runtime is not Electron (`process` variable has wrong class)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	function nativeClass() {
		return '[object beeeeeep]';
	}

	proc = Global.process;
	Global.process = new process();
	Global.process.type = 'browser';

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if runtime is not Electron (`process.versions` is not an object)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	proc = Global.process;
	Global.process = new process();
	Global.process.versions = true;

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, false, 'returns false' );

	t.end();

	function nativeClass() {
		return '[object process]';
	}
});

tape( 'the function returns `false` if runtime is not Electron (`process.versions.electron` is not a string primitive)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	proc = Global.process;
	Global.process = new process();
	Global.process.versions.electron = null;

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, false, 'returns false' );

	t.end();

	function nativeClass() {
		return '[object process]';
	}
});

tape( 'the function returns `false` if runtime is not Electron (`process.versions.chrome` is not a string primitive)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	proc = Global.process;
	Global.process = new process();
	Global.process.versions.chrome = {};

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, false, 'returns false' );

	t.end();

	function nativeClass() {
		return '[object process]';
	}
});

tape( 'the function returns `false` if runtime is not Electron (`process.type` is not equal to `browser` or `renderer`)', function test( t ) {
	var isElectron;
	var proc;
	var bool;

	proc = Global.process;
	Global.process = new process();
	Global.process.type = 'beeeeep';

	isElectron = proxyquire( './../lib/is_electron.js', {
		'@stdlib/utils/native-class': nativeClass
	});

	bool = isElectron();
	Global.process = proc;

	t.equal( bool, false, 'returns false' );

	t.end();

	function nativeClass() {
		return '[object process]';
	}
});
