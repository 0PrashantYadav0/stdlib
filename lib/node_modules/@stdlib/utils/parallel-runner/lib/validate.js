'use strict';

// MODULES //

var isObject = require( '@stdlib/utils/is-object' ); // TODO: plain object
var isPositiveInteger = require( '@stdlib/utils/is-positive-integer' ).isPrimitive;


// VALIDATE //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - options to validate
* @param {PositiveInteger} [options.concurrency] - number of scripts to execute concurrently
* @param {PositiveInteger} [options.workers] - number of workers
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'concurrency': 4,
*     'workers': 2
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( options.hasOwnProperty( 'concurrency' ) ) {
		opts.concurrency = options.concurrency;
		if ( !isPositiveInteger( opts.concurrency ) ) {
			return new TypeError( 'invalid option. `concurrency` option must be a positive integer. Option: `' + opts.concurrency + '`.' );
		}
	}
	if ( options.hasOwnProperty( 'workers' ) ) {
		opts.workers = options.workers;
		if ( !isPositiveInteger( opts.workers ) ) {
			return new TypeError( 'invalid option. `workers` option must be a positive integer. Option: `' + opts.workers + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
