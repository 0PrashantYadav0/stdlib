'use strict';

// MODULES //

var path = require( 'path' );
var isStringArray = require( '@stdlib/utils/is-string' ).isPrimitiveStringArray;
var isFunction = require( '@stdlib/utils/is-function' );
var cwd = require( '@stdlib/utils/cwd' );
var copy = require( '@stdlib/utils/copy' );
var defaults = require( './defaults.js' );
var validate = require( './validate.js' );
var exec = require( './node' );


// RUNNER //

/**
* Executes scripts in parallel.
*
* @param {StringArray} files - script filenames
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.concurrency] - number of scripts to execute concurrently
* @param {PositiveInteger} [options.workers] - number of workers
* @param {Callback} clbk - callback to invoke after executing all scripts
*/
function runner() {
	var options;
	var files;
	var opts;
	var clbk;
	var err;
	var dir;
	var i;

	files = arguments[ 0 ].slice();
	if ( !isStringArray( files ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an array of string primitives. Value: `' + files + '`.' );
	}
	opts = copy( defaults );
	if ( arguments.length > 2 ) {
		options = arguments[ 1 ];
		clbk = arguments[ 2 ];
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	} else {
		clbk = arguments[ 1 ];
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( 'invalid input argument. Callback argument must be a function. Value: `' + clbk + '`.' );
	}
	// Prevent the number of workers exceeding the number of concurrent scripts (excess capacity), as some workers would never be allocated scripts to run and always be idle.
	if ( opts.workers > opts.concurrency ) {
		opts.workers = opts.concurrency;
	}
	// Resolve any relative paths to absolute paths...
	dir = cwd();
	for ( i = 0; i < files.length; i++ ) {
		files[ i ] = path.resolve( cwd, files[ i ] );
	}
	exec( files, opts, done );

	/**
	* Callback invoked after executing all scripts.
	*
	* @private
	* @param {Error} error - error object
	*/
	function done( error ) {
		if ( error ) {
			return clbk( error );
		}
		clbk();
	} // end FUNCTION done()
} // end FUNCTION runner()


// EXPORTS //

module.exports = runner;
