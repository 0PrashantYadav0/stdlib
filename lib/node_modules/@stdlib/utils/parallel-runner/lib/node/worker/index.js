'use strict';

// MODULES //

var execFile = require( 'child_process' ).execFile;
var getKeys = require( 'object-keys' ).shim();


// VARIABLES //

var CHILDREN = {};


// FUNCTIONS //

/**
* Callback invoked upon receiving a message from a parent process.
*
* @private
* @param {string} message - message from parent
*/
function onMessage( message ) {
	if ( message === 'close' ) {
		return close();
	}
	runScript( 'node', message );
} // end FUNCTION onMessage()

/**
* Closes all child processes.
*
* @private
*/
function close() {
	var keys;
	var pid;
	var i;

	// Kill all child processes...
	keys = getKeys( CHILDREN );
	for ( i = 0; i < keys.length; i++ ) {
		pid = keys[ i ];
		CHILDREN[ pid ].kill();
		delete CHILDREN[ pid ];
	}
	// Disconnect this process from the parent to allow this process to gracefully close:
	process.disconnect();
} // end FUNCTION close()

/**
* Runs a script.
*
* @private
* @param {string} file - name or path of executable to run
* @param {string} filepath - script filepath
*/
function runScript( file, filepath ) {
	var args;
	var proc;

	args = [ filepath ];
	proc = execFile( file, args, done );

	proc.stdout.pipe( process.stdout );
	proc.stderr.pipe( process.stderr );

	CHILDREN[ proc.pid ] = true;

	/*
	* Callback invoked once a script finishes executing.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(Buffer|string)} stdout - standard output
	* @param {(Buffer|string)} stderr - standard error
	*/
	function done( error ) {
		delete CHILDREN[ proc.pid ];
		if ( error ) {
			throw error;
		}
		process.send( filepath );
	} // end FUNCTION done()
} // end FUNCTION runScript()


// MAIN //

process.on( 'message', onMessage );
