'use strict';

// MODULES //

var debug = require( 'debug' )( 'parallel-runner:worker' );
var spawn = require( 'child_process' ).spawn;
var getKeys = require( 'object-keys' ).shim();
var cwd = require( '@stdlib/utils/cwd' );


// VARIABLES //

var CHILDREN = {};


// FUNCTIONS //

/**
* Callback invoked upon receiving a message from a parent process.
*
* @private
* @param {string} message - message from parent
*/
function onMessage( message ) {
	if ( message === 'close' ) {
		debug( 'Received a message to close. Closing...' );
		return close();
	}
	debug( 'Received a message to run a script: %s. pid: %s.', message, process.pid );

	// TODO: get cmd/alias from process args
	runScript( 'node', message );
} // end FUNCTION onMessage()

/**
* Closes all child processes.
*
* @private
*/
function close() {
	var keys;
	var pid;
	var i;

	debug( 'Killing all child processes...' );
	keys = getKeys( CHILDREN );
	for ( i = 0; i < keys.length; i++ ) {
		pid = keys[ i ];
		debug( 'Killing child process (pid: %d)...', pid );
		CHILDREN[ pid ].kill();
		delete CHILDREN[ pid ];
	}
	// Disconnect this process from the parent to allow this process to gracefully close:
	debug( 'Disconnecting worker from parent process...' );
	process.disconnect();
} // end FUNCTION close()

/**
* Runs a script.
*
* @private
* @param {string} cmd - command used to run the script
* @param {string} filepath - script filepath
*/
function runScript( cmd, filepath ) {
	var child;
	var args;
	var opts;

	debug( 'Creating child process...' );
	args = [ filepath ];
	opts = {
		'cwd': cwd(),
		'env': process.env,
		'shell': false,
		'stdio': 'inherit' // use stdio of worker process
	};
	child = spawn( cmd, args, opts );

	child.on( 'error', onError );
	child.on( 'close', onClose );
	child.on( 'exit', onExit );
	child.on( 'disconnect', onDisconnect );

	debug( 'Child process created. pid: %d.', child.pid );
	CHILDREN[ child.pid ] = true;

	/*
	* Callback invoked upon child process close.
	*
	* @private
	* @param {(number|null)} code - exit code
	* @param {(string|null)} signal - termination signal
	*/
	function onClose( code, signal ) {
		debug( 'Child process closed. Code: %d. Signal: %s. pid: %d.', code, signal, child.pid );
		delete CHILDREN[ child.pid ];

		// Inform the parent process that the script has finished:
		process.send( filepath );
	} // end FUNCTION onClose()

	/**
	* Callback invoked upon child process exit.
	*
	* @private
	* @param {(number|null)} code - exit code
	* @param {(string|null)} signal - termination signal
	*/
	function onExit( code, signal ) {
		debug( 'Child process exited. Code: %d. Signal: %s. pid: %d.', code, signal, child.pid );
	} // end FUNCTION onExit()

	/**
	* Callback invoked upon child process disconnect.
	*
	* @private
	*/
	function onDisconnect() {
		debug( 'Child process disconnected. pid: %d.', child.pid );
	} // end FUNCTION onDisconnect()

	/**
	* Callback invoked upon child process error.
	*
	* @private
	* @param {Error} error - error object
	*/
	function onError( error ) {
		debug( 'Child process error: %s. pid: %d.', error.message, child.pid );
		close();
		throw error;
	} // end FUNCTION onError()
} // end FUNCTION runScript()


// MAIN //

process.on( 'message', onMessage );
