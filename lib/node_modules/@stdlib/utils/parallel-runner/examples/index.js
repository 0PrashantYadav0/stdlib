'use strict';

var fs = require( 'fs' );
var path = require( 'path' );
var runner = require( './../lib' );

var nFiles = 100;
var files;
var opts;
var dir;

/**
* Returns a generated script.
*
* @private
* @param {string} id - script id
* @returns {string} script content
*/
function template( id ) {
	var file = '';

	file += '\'use strict\';';

	file += 'var randu = require( \'@stdlib/math/base/random/randu\' );';
	file += 'var floor = require ( \'@stdlib/math/base/special/floor\' );';

	file += 'var timeout;';
	file += 'var id;';
	file += 'var N;';
	file += 'var i;';

	file += 'id = '+id+';';
	file += 'timeout = floor( randu()*100 );';
	file += 'N = floor( randu()*1000 );';
	file += 'console.log( \'File: %s. Timeout: %d. N: %d.\', __filename, timeout, N );';

	file += 'for ( i = 0; i < N; i++ ) {';
	file += 'console.log( \'id: %s. v: %d.\', id, i );';
	file += '}';

	file += 'setTimeout( onTimeout, timeout );';

	file += 'function onTimeout() {}';

	return file;
}

/**
* Creates a temporary directory.
*
* @private
* @returns {string} directory path
*/
function createDir() {
	var dir = path.join( __dirname, 'fixtures' );
	fs.mkdirSync( dir );
	return dir;
}

/**
* Creates temporary scripts.
*
* @private
* @param {string} dir - destination directory
* @param {NonNegativeInteger} nFiles - number of scripts to create
* @returns {StringArray} array of script file paths
*/
function createScripts( dir, nFiles ) {
	var content;
	var fpath;
	var files;
	var i;

	files = new Array( nFiles );
	for ( i = 0; i < nFiles; i++ ) {
		content = template( i.toString() );
		fpath = path.join( dir, i+'.js' );
		fs.writeFileSync( fpath, content, {
			'encoding': 'utf8'
		});
		files[ i ] = fpath;
	}
	return files;
}

/**
* Performs clean-up tasks once all scripts have run.
*
* @private
*/
function cleanup() {
	var i;

	// Delete the temporary files...
	for ( i = 0; i < files.length; i++ ) {
		fs.unlinkSync( files[ i ] );
	}
	// Remove temporary directory:
	fs.rmdirSync( dir );
}

function done( error ) {
	if ( error ) {
		throw error;
	}
	cleanup();
	console.log( 'Done!' );
}

// Make a temporary directory to store files...
dir = createDir();

// Create temporary files...
files = createScripts( dir, nFiles );

// Set the runner options:
opts = {
	'concurrency': 3,
	'workers': 3
};

// Run all temporary scripts:
runner( files, opts, done );
