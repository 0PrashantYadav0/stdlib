'use strict';

// MODULES //

var getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );
var typeOf = require( '@stdlib/utils/type-of' );
var isError = require( '@stdlib/utils/is-error' );


// MAIN //

/**
* Tests if a value is a `SyntaxError` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is a `SyntaxError` object
*
* @example
* var bool = isSyntaxError( new SyntaxError( 'beep' ) );
* // returns true
*
* @example
* var bool = isSyntaxError( {} );
* // returns false
*/
function isSyntaxError( value ) {
	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for `SyntaxError` objects from the same realm (same Node.js `vm` or same `Window` object)...
	if ( value instanceof SyntaxError ) {
		return true;
	}
	// All `SyntaxError` objects are `Error` objects...
	if ( isError( value ) ) {
		// Walk the prototype tree until we find the desired constructor...
		while ( value ) {
			if ( typeOf( value ) === 'syntaxerror' ) {
				return true;
			}
			value = getPrototypeOf( value );
		}
	}
	return false;
} // end FUNCTION isSyntaxError()


// EXPORTS //

module.exports = isSyntaxError;
