'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );


// VARIABLES //

var mpath = './../lib/homedir.js';


// FUNCTIONS //

/**
* Returns a copy of the default proxyquire options.
*
* @private
* @returns {Object} options object
*/
function makeOpts() {
	var opts = {
		'@stdlib/utils/platform': 'darwin',
		'@stdlib/utils/is-windows': false
	};
	return opts;
} // end FUNCTION makeOpts()


// TESTS //

tape( 'main export is a function', function test( t ) {
	var homedir;

	t.ok( true, __filename );
	homedir = require( mpath );
	t.strictEqual( typeof homedir, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function supports older Node versions', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	homedir = proxyquire( mpath, opts );
	env = process.env;
	process.env = {
		'HOME': '/Users/beep'
	};

	t.strictEqual( homedir(), '/Users/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a non-windows environment (HOME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'darwin';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'HOME': '/Users/beep'
	};

	t.strictEqual( homedir(), '/Users/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Mac OSX environment (LOGNAME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'darwin';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'LOGNAME': 'beep'
	};

	t.strictEqual( homedir(), '/Users/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Linux environment (LOGNAME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'linux';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'LOGNAME': 'beep'
	};

	t.strictEqual( homedir(), '/home/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Mac OSX environment (USER)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'darwin';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'USER': 'beep'
	};

	t.strictEqual( homedir(), '/Users/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Linux environment (USER)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'linux';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'USER': 'beep'
	};

	t.strictEqual( homedir(), '/home/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Mac OSX environment (LNAME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'darwin';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'LNAME': 'beep'
	};

	t.strictEqual( homedir(), '/Users/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Linux environment (LNAME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'linux';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'LNAME': 'beep'
	};

	t.strictEqual( homedir(), '/home/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Mac OSX environment (USERNAME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'darwin';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'USERNAME': 'beep'
	};

	t.strictEqual( homedir(), '/Users/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory in a Linux environment (USERNAME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'linux';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'USERNAME': 'beep'
	};

	t.strictEqual( homedir(), '/home/beep', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns `null` if unable to locate a home directory in a Mac OS X environment', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'darwin';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {};

	t.strictEqual( homedir(), null, 'returns null' );
	process.env = env;
	t.end();
});

tape( 'the function returns `null` if unable to locate a home directory in a linux environment', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'linux';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {};

	t.strictEqual( homedir(), null, 'returns null' );
	process.env = env;
	t.end();
});

tape( 'the function returns the `/root` directory if run as `root` in a linux environment', function test( t ) {
	var homedir;
	var opts;
	var env;
	var fcn;

	opts = makeOpts();
	opts[ '@stdlib/utils/platform' ] = 'linux';
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {};

	fcn = process.getuid;
	process.getuid = getuid;

	t.strictEqual( homedir(), '/root', 'returns root directory' );

	process.env = env;
	process.getuid = fcn;

	t.end();

	function getuid() {
		return 0;
	}
});

tape( 'the function returns a home directory on Windows (USERPROFILE)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/is-windows' ] = true;
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'USERPROFILE': 'C:\\Users\\boop'
	};

	t.strictEqual( homedir(), 'C:\\Users\\boop', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory on Windows (HOMEDRIVE+HOMEPATH)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/is-windows' ] = true;
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'HOMEDRIVE': 'C:',
		'HOMEPATH': '\\Users\\boop'
	};

	t.strictEqual( homedir(), 'C:\\Users\\boop', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns a home directory on Windows (HOME)', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/is-windows' ] = true;
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {
		'HOME': 'C:\\Users\\boop'
	};

	t.strictEqual( homedir(), 'C:\\Users\\boop', 'returns home directory' );
	process.env = env;
	t.end();
});

tape( 'the function returns `null` if unable to locate a home directory on Windows', function test( t ) {
	var homedir;
	var opts;
	var env;

	opts = makeOpts();
	opts[ '@stdlib/utils/is-windows' ] = true;
	homedir = proxyquire( mpath, opts );

	env = process.env;
	process.env = {};

	t.strictEqual( homedir(), null, 'returns null' );
	process.env = env;
	t.end();
});
