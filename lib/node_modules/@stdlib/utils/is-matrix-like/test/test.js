'use strict';

// MODULES //

var tape = require( 'tape' );
var isMatrixLike = require( './../lib' );


// FUNCTION //

/**
* FUNCTION: create()
*	Creates an matrix-like object.
*
* @returns {Object} matrix-like object
*/
function create() {
	var matrix = {};
	matrix.data = new Int8Array( 10 );
	matrix.shape = [5,2];
	matrix.offset = 0;
	matrix.strides = [2,1];
	matrix.dtype = 'int8';
	matrix.length = 10;
	return matrix;
} // end FUNCTION create()


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isMatrixLike, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a matrix-like object', function test( t ) {
	t.equal( isMatrixLike( isMatrixLike( create() ) ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided a matrix-like object', function test( t ) {
	var values;
	var mat;
	var i;

	values = [
		5,
		'5',
		null,
		undefined,
		NaN,
		true,
		[],
		{},
		function(){}
	];

	mat = create();
	delete mat.data;
	values.push( mat );

	mat = create();
	mat.shape = true;
	values.push( mat );

	mat = create();
	mat.offset = [];
	values.push( mat );

	mat = create();
	mat.strides = 0;
	values.push( mat );

	mat = create();
	mat.dtype = false;
	values.push( mat );

	mat = create();
	mat.length = new Number( NaN );
	values.push( mat );

	mat = create();
	mat.length = null;
	values.push( mat );

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isMatrixLike( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
