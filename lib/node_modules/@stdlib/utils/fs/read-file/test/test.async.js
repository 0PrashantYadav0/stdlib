'use strict';

// MODULES //

var tape = require( 'tape' );
var fs = require( 'fs' );
var readFile = require( './../lib/async.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof readFile, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function aliases `fs.readFile`', function test( t ) {
	t.equal( readFile, fs.readFile, 'is an alias' );
	t.end();
});

tape( 'the function reads the entire contents of a file', function test( t ) {
	var expected;

	expected = fs.readFileSync( __filename );
	readFile( __filename, onFile );

	function onFile( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.deepEqual( expected, actual, 'returns file contents' );

		t.end();
	}
});

tape( 'the function reads the contents of a file using provided options (string)', function test( t ) {
	var expected;

	expected = fs.readFileSync( __filename, 'utf8' );
	readFile( __filename, 'utf8', onFile );

	function onFile( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( expected, actual, 'returns file contents' );
		t.end();
	}
});

tape( 'the function reads the contents of a file using provided options (object)', function test( t ) {
	var expected;

	expected = fs.readFileSync( __filename, {
		'encoding': 'utf8'
	});
	readFile( __filename, {
		'encoding': 'utf8'
	}, onFile );

	function onFile( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( expected, actual, 'returns file contents' );
		t.end();
	}
});

tape( 'if the function encounters an error, the function returns the error', function test( t ) {
	readFile( 'beepboopbapbop', onFile );

	function onFile( error ) {
		t.equal( error instanceof Error, true, 'returns an error: '+error.message );

		t.end();
	}
});

tape( 'if the function encounters an error, the function returns the error (string options)', function test( t ) {
	readFile( 'beepboopbapbop', 'utf8', onFile );

	function onFile( error ) {
		t.equal( error instanceof Error, true, 'returns an error: '+error.message );
		t.end();
	}
});

tape( 'if the function encounters an error, the function returns the error (object options)', function test( t ) {
	readFile( 'beepboopbapbop', {
		'encoding': 'utf8'
	}, onFile );

	function onFile( error ) {
		t.equal( error instanceof Error, true, 'returns an error: '+error.message );
		t.end();
	}
});
