'use strict';

var mpath = './../lib/async.js';


// MODULES //

var tape = require( 'tape' );
var fs = require( 'fs' );
var proxyquire = require( 'proxyquire' ).noCallThru();
var exists = require( mpath );


// FIXME //

if ( typeof window !== 'undefined'  ) {
	// Don't run tests in the browser...for now...
	return;
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof exists, 'function', 'export is a function' );
	t.end();
});

tape( 'function returns true if a path exists', function test( t ) {
	exists( __filename, onExists );
	function onExists( bool ) {
		t.equal( bool, true, 'returns true' );
		t.end();
	}
});

tape( 'function returns false if a path does not exist', function test( t ) {
	exists( 'beepboopbebop', onExists );
	function onExists( bool ) {
		t.equal( bool, false, 'returns false' );
		t.end();
	}
});

tape( 'if `fs.access` is not supported, the function uses `fs.stat`', function test( t ) {
	var exists = proxyquire( mpath, {
		'fs': {
			'stat': fs.stat
		}
	});
	exists( __filename, onExists );
	function onExists( bool ) {
		t.equal( bool, true, 'returns true' );
		t.end();
	}
});

tape( 'if `fs.access` is not supported, the function uses `fs.stat`', function test( t ) {
	var exists = proxyquire( mpath, {
		'fs': {
			'stat': fs.stat
		}
	});
	exists( 'beepboopbebop', onExists );
	function onExists( bool ) {
		t.equal( bool, false, 'returns false' );
		t.end();
	}
});

tape( 'function supports error-first callbacks', function test( t ) {
	exists( __filename, onExists );
	function onExists( error, bool ) {
		t.equal( error, null, 'error is null' );
		t.equal( bool, true, 'returns true' );
		t.end();
	}
});

tape( 'function supports error-first callbacks', function test( t ) {
	exists( 'beepboopbebop', onExists );
	function onExists( error, bool ) {
		t.ok( error, 'returns an error' );
		t.equal( bool, false, 'returns false' );
		t.end();
	}
});

tape( 'function supports using `fs.stat` with error-first callbacks', function test( t ) {
	var exists = proxyquire( mpath, {
		'fs': {
			'stat': fs.stat
		}
	});
	exists( __filename, onExists );
	function onExists( error, bool ) {
		t.equal( error, null, 'error is null' );
		t.equal( bool, true, 'returns true' );
		t.end();
	}
});

tape( 'function supports using `fs.stat` with error-first callbacks', function test( t ) {
	var exists = proxyquire( mpath, {
		'fs': {
			'stat': fs.stat
		}
	});
	exists( 'beepboopbebop', onExists );
	function onExists( error, bool ) {
		t.ok( error, 'returns an error' );
		t.equal( bool, false, 'returns false' );
		t.end();
	}
});
