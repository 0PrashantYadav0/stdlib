'use strict';

// MODULES //

var isCollection = require( '@stdlib/assert/is-collection' );
var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

/**
* While a test condition is true, invokes a function once for each element in a collection, iterating from right to left.
*
* ## Notes
*
* * For dynamic array resizing, the only behavior made intentionally consistent with `doWhileEach` (iterating from left to right) is when elements are pushed onto the beginning (end) of an array. In other words, for `doWhileEach()`, `[].push()` behavior is consistent with `doWhileEachRight()` `[].unshift()` behavior.
* * The condition is evaluated __after__ executing the function to invoke; thus, the provided function __always__ executes at least once.
* * If provided an empty collection, the function invokes the provided function with the collection index set to `undefined`.
*
*
* @param {Collection} collection - input collection
* @param {Function} fcn - function to invoke
* @param {Function} predicate - function which indicates whether to continue iterating over a collection
* @param {*} [thisArg] - execution context for the applied function
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a function
* @throws {TypeError} third argument must be a function
* @returns {Collection} input collection
*
* @example
* function predicate( v, key, collection ) {
*     return ( v === v );
* }
*
* function log( v, key, collection ) {
*     console.log( '%s: %d', key, v );
* }
*
* var arr = [ 1, NaN, 2, 3, 4, 5 ];
*
* doWhileEachRight( arr, log, predicate );
*/
function doWhileEachRight( collection, fcn, predicate, thisArg ) {
	var len;
	var i;
	if ( !isCollection( collection ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a collection. Value: `'+collection+'`.' );
	}
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. Third argument must be a function. Value: `'+fcn+'`.' );
	}
	if ( !isFunction( predicate ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+predicate+'`.' );
	}
	len = collection.length;
	if ( len === 0 ) {
		fcn.call( thisArg, void 0, void 0, collection );
		len = collection.length;
		if ( len === 0 ) {
			return collection;
		}
	}
	i = len - 1;
	do {
		fcn.call( thisArg, collection[ i ], i, collection );

		// Account for dynamically resizing a collection...
		if ( len !== collection.length ) {
			i += ( collection.length - len );
			len = collection.length;
		}
		i -= 1;
	} while (
		i >= 0 &&
		predicate( collection[ i+1 ], i+1, collection )
	);
	return collection;
} // end FUNCTION doWhileEachRight()


// EXPORTS //

module.exports = doWhileEachRight;
