'use strict';

// MODULES //

var isCollection = require( '@stdlib/assert/is-collection' );
var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

/**
* Invokes a function once for each element in a collection and updates the collection in-place.
*
* @param {Collection} collection - input collection
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a function
* @returns {Collection} input collection
*
* @example
* function scale( v, key, collection ) {
*     return v * key;
* }
*
* var arr = [ 1, 2, 3, 4 ];
*
* var out = inmap( arr, scale );
* // returns [ 0, 2, 6, 8 ]
*
* var bool = ( out === arr );
* // returns true
*/
function inmap( collection, fcn, thisArg ) {
	var len;
	var i;
	if ( !isCollection( collection ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a collection. Value: `'+collection+'`.' );
	}
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+fcn+'`.' );
	}
	len = collection.length;
	for ( i = 0; i < len; i++ ) {
		collection[ i ] = fcn.call( thisArg, collection[ i ], i, collection );

		// Account for dynamically resizing a collection:
		len = collection.length;
	}
	return collection;
} // end FUNCTION inmap()


// EXPORTS //

module.exports = inmap;
