'use strict';

/**
* Tests if a value is `NaN`.
*
* @module @stdlib/utils/is-nan
*
* @example
* var isnan = require( '@stdlib/utils/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* // Use interface to check for `NaN` primitives...
* var isnan = require( '@stdlib/utils/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
* @example
* // Use interface to check for `NaN` objects...
* var isnan = require( '@stdlib/utils/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
* @example
* // Use interface to check for `NaN` arrays...
* var isnan = require( '@stdlib/utils/is-nan' ).isNaNArray;
*
* var bool = isnan( [NaN,2] );
* // returns false
*
* bool = isnan( [NaN,NaN,NaN] );
* // returns true
* @example
* // Use interface to check for array of `NaN` primitives...
* var isnan = require( '@stdlib/utils/is-nan' ).isPrimitiveNaNArray;
*
* var bool = isnan( [NaN,new Number( NaN )] );
* // returns false
*
* bool = isnan( [NaN,NaN,NaN] );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isnan = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// METHODS //

setReadOnly( isnan, 'isPrimitive', isPrimitive );
setReadOnly( isnan, 'isObject', isObject );
setReadOnly( isnan, 'isNaNArray', arrayfun.create( isnan ) );
setReadOnly( isnan, 'isPrimitiveNaNArray', arrayfun.create( isPrimitive ) );


// EXPORTS //

module.exports = isnan;
