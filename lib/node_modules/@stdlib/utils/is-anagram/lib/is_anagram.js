'use strict';

// MODULES //

var lowercase = require( '@stdlib/string/lowercase' );
var replace = require( '@stdlib/string/replace' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;


// FUNCTIONS //

/**
* Comparator function for sorting characters in ascending order.
*
* @private
* @param {string} a - character
* @param {string} b - character
* @returns {number} comparison value
*/
function ascending( a, b ) {
	if ( a < b ) {
		return -1;
	}
	if ( a === b ) {
		return 0;
	}
	return 1;
} // end FUNCTION ascending()


// MAIN //

/**
* Tests if a value is an anagram.
*
* @param {string} str - comparison string
* @param {*} x - value to test
* @throws {TypeError} first argument must be a string primitive
* @returns {boolean} boolean indicating if a value is an anagram
*
* @example
* var bool = isAnagram( 'I am a weakish speller', 'William Shakespeare' );
* // returns true
*
* @example
* var bool = isAnagram( 'bat', 'tabba' );
* // returns false
*/
function isAnagram( str, x ) {
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + str + '`.' );
	}
	if ( !isString( x ) ) {
		return false;
	}
	str = lowercase( str );
	str = replace( str, /[^a-z0-9]/g, '' );
	x = lowercase( x );
	x = replace( x, /[^a-z0-9]/g, '' );
	if ( str.length !== x.length ) {
		return false;
	}
	str = str.split( '' )
		.sort( ascending )
		.join( '' );
	x = x.split( '' )
		.sort( ascending )
		.join( '' );
	return ( str === x );
} // end FUNCTION isAnagram()


// EXPORTS //

module.exports = isAnagram;
