'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pkg = require( './../package.json' ).name;
var funseqAsync = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var f;
	var i;

	f = funseqAsync( c, d, e );

	i = 0;
	b.tic();

	return next();

	function next( error, result ) {
		i += 1;
		if ( error ) {
			b.fail( 'should not return an error' );
		}
		if ( i <= b.iterations ) {
			return f( randu()*100.0, next );
		}
		b.toc();
		if ( isnan( result ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}

	function c( x, next ) {
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			next( null, 2.0*x );
		}
	}

	function d( x, next ) {
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			next( null, x+3.0 );
		}
	}

	function e( x, next ) {
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			next( null, x/5.0 );
		}
	}
});
