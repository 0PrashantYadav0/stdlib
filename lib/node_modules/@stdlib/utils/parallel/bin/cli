#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var parallel = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var files;
var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}

opts = {};
if ( args.cmd ) {
	opts.cmd = args.cmd;
}
if ( args.workers ) {
	opts.workers = parseInt( args.workers, 10 );
}
if ( args.concurrency ) {
	opts.concurrency = parseInt( args.concurrency, 10 );
}
if ( args.ordered ) {
	opts.ordered = args.ordered;
}
if ( args.uid ) {
	opts.uid = parseInt( args.uid, 10 );
}
if ( args.gid ) {
	opts.gid = parseInt( args.gid, 10 );
}
if ( args.maxbuffer ) {
	opts.maxBuffer = parseInt( args.maxbuffer, 10 );
}
files = args._;

// Run main:
parallel( files, opts, done );

/**
* Callback invoked upon executing all scripts.
*
* @private
* @param {Error} [error] - error object
* @throws {Error} unexpected error
*/
function done( error ) {
	if ( error ) {
		throw error;
	}
} // end FUNCTION done()
