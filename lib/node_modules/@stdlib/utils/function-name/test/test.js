'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var functionName = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof functionName, 'function', 'export is a function' );
	t.end();
});

tape( 'if not provided a function, the function will throw a type error', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a TypeError when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			functionName( value );
		};
	}
});

tape( 'the function returns a function\'s name', function test( t ) {
	function beep() {
		return 'boop';
	}
	t.equal( functionName( beep ), 'beep', 'returns beep' );
	t.equal( functionName( Date ), 'Date', 'returns Date' );
	t.equal( functionName( Buffer ), 'Buffer', 'returns Buffer' );
	t.equal( functionName( Number ), 'Number', 'returns Number' );
	t.equal( functionName( Math.sqrt ), 'sqrt', 'returns sqrt' );
	t.equal( functionName( Int8Array ), 'Int8Array', 'returns Int8Array' );
	t.equal( functionName( Boolean ), 'Boolean', 'returns Boolean' );
	t.equal( functionName( String ), 'String', 'returns String' );
	t.equal( functionName( Function ), 'Function', 'returns Function' );
	t.end();
});

tape( 'if provided an anonymous function, the function returns an empty string', function test( t ) {
	/* jshint evil:true */
	t.equal( functionName( function(){} ), '', 'returns an empty string' );
	t.equal( functionName( new Function('a', 'b', 'return') ), '', 'returns an empty string' );
	t.end();
});

tape( 'the function supports returning a function name in ES5 and earlier environments', function test( t ) {
	var functionName = proxyquire( './../lib', {
		'@stdlib/utils/detect-function-name-support': stub
	});
	t.equal( functionName( beep ), 'beep', 'returns beep' );
	t.end();

	function beep() {
		return 'boop';
	}

	// Earlier environments did not have a `name` property:
	function stub() {
		return false;
	}
});
