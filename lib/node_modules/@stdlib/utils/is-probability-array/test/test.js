'use strict';

// MODULES //

var tape = require( 'tape' );
var isProbabilityArray = require( './../lib' );


// TESTS //


tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isProbabilityArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a probability array', function test( t ) {
	var values;
	var i;

	values = [
		new Int8Array( [ 0, 0, 1 ] ),
		new Uint8Array( [ 1, 0, 0 ] ),
		new Uint8ClampedArray( [ 0, 1 ] ),
		new Int16Array( [ 0, 0, 1, 0 ] ),
		new Uint16Array( [ 1 ] ),
		new Int32Array( [ 1, 0, 0 ] ),
		new Uint32Array( [ 0, 1, 0 ] ),
		new Float32Array( [ 0.0, 0.5, 0.5 ] ),
		new Float64Array( [ 0.25, 0.25, 0.5 ] ),
		[ 0.5, 0.25, 0.25 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isProbabilityArray( values[i] ), true, 'returns true when provided '+values[i] );
	}
	t.end();
});

tape( 'the function allows a difference in sum within floating-point epsilon', function test( t ) {
	var bool = isProbabilityArray( [ 0.1, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1 ] );
	t.strictEqual( bool, true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided a probability array', function test( t ) {
	var values;
	var i;

	values = [
		'10',
		'01',
		'0.5',
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		[ 5, null ],
		[ 5, '5' ],
		[ 1.0, 3.14 ],
		[ -1.0, 1.0, 1.0 ],
		[ 0.25, 0.33, 0.5 ],
		{},
		function(){},
		new Buffer( 10 )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isProbabilityArray( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
