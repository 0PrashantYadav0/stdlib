'use strict';

// MODULES //

var tape = require( 'tape' );
var isProbabilityArray = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isProbabilityArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function tests for an array-like object containing only probabilities', function test( t ) {
	var arr;

	arr = [ 0.9, new Number( 0.8 ), 0.0 ];
	t.equal( isProbabilityArray( arr ), true, 'returns true' );

	arr = new Float64Array( [ 0.9, 0.5, 0.3 ] );
	t.equal( isProbabilityArray( arr ), true, 'returns true' );

	arr = {
		'length': 2,
		'0': 0.3,
		'1': 0.8
	};
	t.equal( isProbabilityArray( arr ), true, 'returns true' );

	arr = [ 0.9, '3', null ];
	t.equal( isProbabilityArray( arr ), false, 'returns false' );

	arr = new Float64Array( [ 0.9, NaN, 0.3 ] );
	t.equal( isProbabilityArray( arr ), false, 'returns false' );

	t.end();
});

tape( 'the function provides a method to test for an array-like object containing only primitive probabilities', function test( t ) {
	var arr;

	arr = [ 1.0, 0.0 ];
	t.equal( isProbabilityArray.primitives( arr ), true, 'returns true' );

	arr = [ new Number( 5 ), 1.0, 1.0 ];
	t.equal( isProbabilityArray.primitives( arr ), false, 'returns false' );

	t.end();
});

tape( 'the function provides a method to test for an array-like object containing only containing only Number objects whose values are probabilities', function test( t ) {
	var arr;

	arr = [ new Number( 0.5 ), new Number( 0.5 ) ];
	t.equal( isProbabilityArray.objects( arr ), true, 'returns true' );

	arr = [ 0.5, 0.0 ];
	t.equal( isProbabilityArray.objects( arr ), false, 'returns false' );

	t.end();
});
