'use strict';

/**
* Test if a value is an array-like object containing only probabilities.
*
* @module @stdlib/utils/is-probability-array
*
* @example
* var isNonNegativeNumberArray = require( '@stdlib/utils/is-probability-array' );
*
* var bool = isProbabilityArray( [ 0.5, new Number(0.8) ] );
* // returns true
*
* bool = isProbabilityArray( [ 0.8, 1.2 ] );
* // returns false
*
* bool = isProbabilityArray( [ 0.8, '0.2' ] );
* // returns false
*
* @example
* // Use interface to check for primitives...
* var isProbabilityArray = require( '@stdlib/utils/is-probability-array' ).primitives;
*
* var bool = isProbabilityArray( [ 1.0, 0.0, 0.5 ] );
* // returns true
*
* bool = isProbabilityArray( [ 0.3, new Number(0.4) ] );
* // returns false
*
* @example
* // Use interface to check for objects...
* var isProbabilityArray = require( '@stdlib/utils/is-probability-array' ).objects;
*
* var bool = isProbabilityArray( [ new Number(0.7), new Number(1.0) ] );
* // returns true
*
* bool = isProbabilityArray( [ 1.0, 0.0, new Number(0.7) ] );
* // returns false
*/

// MODULES //

var isProbability = require( '@stdlib/utils/is-probability' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );


// VARIABLES //

var isProbabilityArray = arrayfun.create( isProbability );


// METHODS //

setReadOnly( isProbabilityArray, 'primitives', arrayfun.create( isProbability.isPrimitive ) );
setReadOnly( isProbabilityArray, 'objects', arrayfun.create( isProbability.isObject ) );


// EXPORTS //

module.exports = isProbabilityArray;
