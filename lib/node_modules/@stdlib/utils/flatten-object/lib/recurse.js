'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isArray = require( '@stdlib/assert/is-array' );


// MAIN //

/**
* Recursively flattens an object.
*
* @private
* @param {Object} out - output object
* @param {ObjectLike} obj - input object
* @param {string} prefix - key prefix
* @param {NonNegativeInteger} depth - recursion depth
* @param {Options} opts - options
* @param {boolean} opts.flattenArrays - boolean indicating whether to flatten arrays
* @param {string} opts.delimiter - key path delimiter
* @returns {Object} output object
*/
function recurse( out, obj, prefix, depth, opts ) {
	var keys;
	var val;
	var key;
	var i;
	if ( prefix ) {
		prefix += opts.delimiter;
	}
	keys = getKeys( obj );
	for ( i = 0; i < keys.length; i++ ) {
		val = obj[ keys[i] ];
		key = prefix + keys[ i ];
		if ( depth ) {
			if (
				(isPlainObject( val ) && getKeys( val ).length) ||
				(opts.flattenArrays && isArray( val ))
			) {
				recurse( out, val, key, depth-1, opts );
				continue;
			}
		}
		out[ key ] = val;
	}
	return out;
} // end FUNCTION recurse()


// EXPORTS //

module.exports = recurse;
