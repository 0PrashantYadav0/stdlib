'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/utils/is-object-like' );
var copy = require( '@stdlib/utils/copy' );
var defaults = require( './defaults.js' );
var validate = require( './validate.js' );
var flatten = require( './flatten.js' );


// MAIN //

/**
* Returns a function to flatten an object.
*
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten
* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy
* @param {boolean} [options.flattenArrays=false] - boolean indicating whether to flatten arrays
* @param {string} [options.delimiter='.'] - key path delimiter
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} flatten function
*
* @example
* var flatten = factory({
*     'copy': true,
*     'delimiter': '|'
* });
*
* var obj = {'a':{'b':{'c':'d'}}};
* var out = flatten( obj );
* // returns {'a|b|c':'d'}
*/
function factory( options ) {
	var opts;
	var err;

	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	return flattenObject;

	/**
	* Flattens an object.
	*
	* @param {ObjectLike} obj - object to flatten
	* @throws {TypeError} first argument must be object-like
	* @returns {Object} flattened object
	*/
	function flattenObject( obj ) {
		if ( !isObjectLike( obj ) ) {
			throw new TypeError( 'invalid input argument. Must provide an object-like value. Value: `' + obj + '`.' );
		}
		return flatten( obj, opts );
	} // end FUNCTION flattenObject()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
