'use strict';

// MODULES //

var isFunction = require( '@stdlib/utils/is-function' );
var isInteger = require( '@stdlib/utils/is-integer' ).isPrimitive;
var isObject = require( '@stdlib/utils/is-object' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isArrayLike = require( '@stdlib/utils/is-array-like' );


// FIND //

/**
* Finds elements in an array-like object that satisfy a test condition.
*
* @param {(Array|TypedArray|string)} arr - object from which elements will be tested
* @param {Options} [opts] - function options
* @param {Integer} [opts.k=arr.length] - limits the number of returned elements
* @param {string} [opts.returns='indices'] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned
* @param {Function} clbk - function invoked for each array element. If the return value is truthy, the value is considered to have satisfied the test condition.
* @throws {TypeError} arr must be an array-like object
* @throws {TypeError} options must be an options object
* @throws {TypeError} callback argument must be a function
* @throws {TypeError} option `k` must be an integer
* @throws {TypeError} option `returns` must be a string equal to `values`, `indices` or `*`
* @returns {Array} array of indices, element values, or arrays of index-value pairs
*
* @example
* var data = [ 30, 20, 50, 60, 10 ];
* var vals = find( data, condition );
* // returns [ 0, 2, 3 ]
*
* function condition( val ) {
*     return val > 20;
* }
*
* @example
* var data = [ 30, 20, 50, 60, 10 ];
* var opts = {
*     'k': 2,
*     'returns': 'values'
* };
* var vals = find( data, opts, condition );
* // returns [ 30, 50 ]
*
* function condition( val ) {
*     return val > 20;
* }
*
* @example
* var data = [ 30, 20, 50, 60, 10 ];
* var vals = find( data, condition );
* // returns []
*
* function condition( val ) {
*     return val > 1000;
* }
*
* @example
* var data = [ 30, 20, 50, 60, 10 ];
* var opts = {
*     'k': -2,
*     'returns': 'values'
* };
* var vals = find( data, opts, condition );
* // returns [ 60, 50 ]
*
* function condition( val ) {
*     return val > 20;
* }
*
* @example
* var data = [ 30, 20, 50, 60, 10 ];
* var opts = {
*     'k': -2,
*     'returns': '*'
* };
* var vals = find( data, opts, condition );
* // returns [ [3, 60], [2, 50] ]
*
* function condition( val ) {
*     return val > 20;
* }
*/
function find( arr, opts, clbk ) {
	var returns;
	var count;
	var mode;
	var len;
	var out;
	var ret;
	var i;
	var k;
	var v;

	mode = 0;
	returns = [ 'values', 'indices', '*' ];

	if ( !isArrayLike( arr ) ) {
		throw new TypeError( 'invalid input argument. Must provide an array-like object. Value: `' + arr + '`' );
	}
	len = arr.length;
	if ( arguments.length < 3 ) {
		clbk = opts;
		opts = {};
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( 'invalid input argument. Callback argument must be a function. Value: `' + clbk + '`' );
	}
	if ( !isObject( opts ) ) {
		throw new TypeError( 'invalid input argument. Options must be an object. Value: `' + opts + '`' );
	}
	if ( opts.hasOwnProperty( 'k' ) ) {
		k = opts.k;
		if ( !isInteger( k ) ) {
			throw new TypeError( 'invalid input argument. `k` must be an integer. Value: `' + k + '`' );
		}
	} else {
		k = len;
	}
	if ( opts.hasOwnProperty( 'returns' ) ) {
		ret = opts.returns;
		if ( !isString( ret ) || returns.indexOf( ret ) === -1 ) {
			throw new TypeError( 'invalid input argument. `returns` option must be a string and have one of the following values: `values`, `indices`, `all`. Value: `' + ret + '`' );
		}
		if ( ret === 'values' ) {
			mode = 1;
		} else if ( ret === '*' ) {
			mode = 2;
		}
	}
	out = [];
	count = 0;

	if ( k === 0 ) {
		return out;
	}
	if ( k > 0 ) {
		// Search moving from begin-to-end [0,1,...]:
		for ( i = 0; i < len; i++ ) {
			v = arr[ i ];
			if ( clbk( v, i, arr ) ) {
				if ( mode === 2 ) {
					out.push( [ i, v ] );
				} else if ( mode === 1 ) {
					out.push( v );
				} else {
					out.push( i );
				}
				if ( ++count === k ) {
					break;
				}
			}
		}
		return out;
	}
	// Search moving from end-to-begin [...,2,1,0]:
	k = -k;
	for ( i = len-1; i >= 0; i-- ) {
		v = arr[ i ];
		if ( clbk( v, i, arr ) ) {
			if ( mode === 2 ) {
				out.push( [ i, v ] );
			} else if ( mode === 1 ) {
				out.push( v );
			} else {
				out.push( i );
			}
			if ( ++count === k ) {
				break;
			}
		}
	}
	return out;
} // end FUNCTION find()


// EXPORTS //

module.exports = find;
