'use strict';

/**
* Tests if a provided prototype exists in an object's prototype chain.
*
* @param {*} value - value to test
* @param {(Object|Function)} proto - prototype
* @throws {TypeError} second argument must be an object and not null
* @returns {boolean} boolean indicating if a provided prototype exists in a prototype chain
*
* @example
* var inherit = require( '@stdlib/utils/inherit' );
*
* function Foo() {
*     return this;
* }
*
* function Bar() {
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
*
* var bool = isPrototypeOf( bar, Foo.prototype );
* // returns true
*/
function isPrototypeOf( value, proto ) {
	var type = typeof proto;
	if (
		proto === null ||
		(type !== 'object' && type !== 'function')
	) {
		throw new TypeError( 'invalid input argument. Second argument must be either an object (except null) or a function. Value: `'+proto+'`.' );
	}
	type = typeof value;
	if (
		value === null ||
		(type !== 'object' && type !== 'function')
	) {
		return false;
	}
	return proto.isPrototypeOf( value );
} // end FUNCTION isPrototypeOf()


// EXPORTS //

module.exports = isPrototypeOf;
