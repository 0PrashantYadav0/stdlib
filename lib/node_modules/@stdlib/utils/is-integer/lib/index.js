'use strict';

/**
* Tests if a value is an integer.
*
* @module @stdlib/utils/is-integer
*
* @example
* var isInteger = require( '@stdlib/utils/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/utils/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/utils/is-integer' ).isObject;
*
* var bool = isInteger.isObject( 3.0 );
* // returns false
*
* bool = isInteger.isObject( new Number( 3.0 ) );
* // returns true
* @example
* // Use interface to check for integer arrays...
* var isInteger = require( '@stdlib/utils/is-integer' ).isIntegerArray;
*
* var bool = isInteger( [ -3.0, new Number(3.0) ] );
* // returns true
*
* bool = isInteger( [ 3.0, '-3.0' ] );
* // returns false
* @example
* // Use interface to check for array of integer primitives...
* var isInteger = require( '@stdlib/utils/is-integer' ).isPrimitiveIntegerArray;
*
* var bool = isInteger( [ 1.0, -1.0 ] );
* // returns true
*
* bool = isInteger( [ 3.0, new Number(-1.0) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// METHODS //

setReadOnly( isInteger, 'isPrimitive', isPrimitive );
setReadOnly( isInteger, 'isObject', isObject );
setReadOnly( isInteger, 'isIntegerArray', arrayfun.create( isInteger ) );
setReadOnly( isInteger, 'isPrimitiveIntegerArray', arrayfun.create( isPrimitive ) );


// EXPORTS //

module.exports = isInteger;
