'use strict';

// MODULES //

var FLOAT16 = require( '@stdlib/math/constants/float16-max-safe-integer' );
var FLOAT32 = require( '@stdlib/math/constants/float32-max-safe-integer' );
var FLOAT64 = require( '@stdlib/math/constants/float64-max-safe-integer' );


// MAIN //

/**
* Returns the maximum safe integer capable of being represented by a numeric real type.
*
* @param {string} dtype - numeric type
* @throws {TypeError} must provide a recognized numeric type
* @returns {number} maximum safe integer
*
* @example
* var m = safeintmax( 'float64' );
* // returns 9007199254740991
*
* @example
* var m = safeintmax( 'float16' );
* // returns 2047
*
* @example
* var m = safeintmax( 'float32' );
* // returns 16777215
*/
function safeintmax( dtype ) {
	switch ( dtype ) {
	case 'float64':
		return FLOAT64;
	case 'float32':
		return FLOAT32;
	case 'float16':
		return FLOAT16;
	default:
		throw new TypeError( 'invalid input argument. Must provide a recognized type. Value: `'+dtype+'`.' );
	}
} // end FUNCTION safeintmax()


// EXPORTS //

module.exports = safeintmax;
