'use strict';

/**
* Tests if a value is a number.
*
* @module @stdlib/utils/is-number
*
* @example
* var isNumber = require( '@stdlib/utils/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
* @example
* // Use interface to check for number primitives...
* var isNumber = require( '@stdlib/utils/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
* @example
* // Use interface to check for number objects...
* var isNumber = require( '@stdlib/utils/is-number' ).isObject;
*
* var bool = isNumber.isObject( 3.14 );
* // returns false
*
* bool = isNumber.isObject( new Number( 3.14 ) );
* // returns true
* @example
* // Use interface to check for number arrays...
* var isNumber = require( '@stdlib/utils/is-number' ).isNumberArray;
*
* var bool = isNumber( [ 3.14, new Number(3.14) ] );
* // returns true
*
* bool = isNumber( [ 3.14, '3.14' ] );
* // returns false
* @example
* // Use interface to check for primitive number arrays...
* var isNumber = require( '@stdlib/utils/is-number' ).isPrimitiveNumberArray;
*
* var bool = isNumber( [ 3.14, -1.0 ] );
* // returns true
*
* bool = isNumber( [ 3.14, new Number(-1.0) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// METHODS //

setReadOnly( isNumber, 'isPrimitive', isPrimitive );
setReadOnly( isNumber, 'isObject', isObject );
setReadOnly( isNumber, 'isNumberArray', arrayfun.create( isNumber ) );
setReadOnly( isNumber, 'isPrimitiveNumberArray', arrayfun.create( isPrimitive ) );


// EXPORTS //

module.exports = isNumber;
