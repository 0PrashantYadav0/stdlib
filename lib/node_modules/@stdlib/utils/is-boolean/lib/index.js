'use strict';

/**
* Tests if a value is a boolean.
*
* @module @stdlib/utils/is-boolean
*
* @example
* var isBoolean = require( '@stdlib/utils/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* // Use interface to check for boolean primitives...
* var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
* @example
* // Use interface to check for boolean objects...
* var isBoolean = require( '@stdlib/utils/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
* @example
* // Use interface to check for boolean arrays...
* var isBoolean = require( '@stdlib/utils/is-boolean' ).isBooleanArray;
*
* var bool = isBoolean( [ true, new Boolean(false) ] );
* // returns true
*
* bool = isBoolean( [ true, 'true' ] );
* // returns false
* @example
* // Use interface to check for array of boolean primitives...
* var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitiveBooleanArray;
*
* var bool = isBoolean( [ true, false ] );
* // returns true
*
* bool = isBoolean( [ true, new Boolean(true) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isBoolean = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// METHODS //

setReadOnly( isBoolean, 'isPrimitive', isPrimitive );
setReadOnly( isBoolean, 'isObject', isObject );
setReadOnly( isBoolean, 'isBooleanArray', arrayfun.create( isBoolean ) );
setReadOnly( isBoolean, 'isPrimitiveBooleanArray', arrayfun.create( isPrimitive ) );


// EXPORTS //

module.exports = isBoolean;
