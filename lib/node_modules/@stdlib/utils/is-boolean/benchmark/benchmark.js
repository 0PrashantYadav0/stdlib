'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var pkg = require( './../package.json' ).name;
var isBoolean = require( '@stdlib/utils/is-boolean' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var bool;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		if ( randu() < 0.5 ) {
			bool = 0|0;
		} else {
			bool = 1|0;
		}
		bool = isBoolean( bool );
		if ( !isBoolean.isPrimitive( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean.isPrimitive( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+':isPrimitive', function benchmark( b ) {
	var bool;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		if ( randu() < 0.5 ) {
			bool = false;
		} else {
			bool = true;
		}
		bool = isBoolean.isPrimitive( bool );
		if ( !isBoolean.isPrimitive( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+':isObject', function benchmark( b ) {
	var bool;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		if ( randu() < 0.5 ) {
			bool = {};
		} else {
			bool = [];
		}
		bool = isBoolean.isObject( bool );
		if ( !isBoolean.isPrimitive( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean.isPrimitive( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});
