'use strict';

// MODULES //

var copy = require( '@stdlib/utils/copy' );
var isArray = require( '@stdlib/utils/is-array' );
var defaults = require( './defaults.js' );
var validate = require( './validate.js' );
var dims = require( './dims.js' );
var genFcn = require( './equal_dims.js' );
var recurse = require( './recurse.js' );


// MAIN //

/**
* Flattens an array.
*
* @param {Array} arr - input array
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten
* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements
* @param {boolean} [options.equalDims=false] - boolean indicating whether all array elements have equal dimensions
* @throws {TypeError} first argument must be an array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Array} flattened array
*
* @example
* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];
*
* var out = flattenArray( arr );
* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
*/
function flattenArray( arr, options ) {
	var opts;
	var err;
	var out;
	var d;
	if ( !isArray( arr ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an array. Value: `' + arr + '`.' );
	}
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.depth === 0 ) {
		out = arr;
	} else if ( opts.equalDims ) {
		d = dims( arr, opts.depth );
		out = genFcn( d )( arr );
	} else {
		out = recurse( [], arr, opts.depth );
	}
	if ( opts.copy ) {
		return copy( out );
	}
	return out;
} // end FUNCTION flattenArray()


// EXPORTS //

module.exports = flattenArray;
