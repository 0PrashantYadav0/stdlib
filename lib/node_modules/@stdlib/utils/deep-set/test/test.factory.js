'use strict';

// MODULES //

var tape = require( 'tape' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided a key path argument which is not either a string primitive or a key array', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		undefined,
		NaN,
		true,
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		true,
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 'a', value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		{},
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function() {
			factory( 'a', {
				'create': value
			});
		};
	}
});

tape( 'the function returns a function', function test( t ) {
	var dset = factory( 'a/b', {
		'create': true,
		'sep': '/'
	});
	t.equal( typeof dset, 'function', 'returns a function' );
	t.end();
});

tape( 'the created function returns `false` if provided a non-object or null', function test( t ) {
	var values;
	var dset;
	var i;

	values = [
		'5',
		5,
		null,
		undefined,
		NaN,
		true,
		function(){}
	];

	dset = factory( 'a/b', {
		'create': true,
		'sep': '/'
	});

	for ( i = 0; i < values.length; i++ ) {
		t.equal( dset( values[ i ], 5 ), false, 'returns false' );
	}
	t.end();
});

tape( 'the created function returns a boolean', function test( t ) {
	var bool;
	var dset;

	dset = factory( 'a', {
		'create': false,
		'sep': '.'
	});

	bool = dset( {'a':5}, 4 );
	t.equal( bool, true, 'returns true' );

	bool = dset( {'b':5}, 4 );
	t.equal( bool, false, 'returns false' );

	dset = factory( 'a', {
		'create': true
	});

	bool = dset( {'b':5}, 4 );
	t.equal( bool, true, 'returns true' );

	t.end();
});

tape( 'the created function deep sets', function test( t ) {
	var expected;
	var dset;
	var bool;
	var obj;

	dset = factory( ['a','b'] );

	obj = { 'a': { 'b': 0 } };

	bool = dset( obj, 4 );
	expected = { 'a': { 'b': 4 } };

	t.equal( bool, true, 'returns true' );
	t.deepEqual( obj, expected, 'deep sets object' );

	bool = dset( obj, 40 );
	expected = { 'a': { 'b': 40 } };

	t.equal( bool, true, 'returns true' );
	t.deepEqual( obj, expected, 'deep sets object' );
	t.end();
});
