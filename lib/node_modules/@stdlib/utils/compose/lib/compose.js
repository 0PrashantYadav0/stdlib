'use strict';

// MODULES //

var isFunction = require( '@stdlib/utils/is-function' );
var isArray = require( '@stdlib/utils/is-array' );


// MAIN //

/**
* Function composition.
*
* @param {...Function} f - functions to compose
* @returns {Function} composite function
*
* @example
* function a( x ) {
*     return 2 * x;
* }
*
* function b( x ) {
*     return x + 3;
* }
*
* function c( x ) {
*     return x / 5;
* }
*
* var f = compose( c, b, a );
*
* var z = f( 6 );
* // returns 3
*/
function compose() {
	var f;
	var i;
	f = new Array( arguments.length );
	for ( i = 0; i < f.length; i++ ) {
		f[ i ] = arguments[ i ];
		if ( !isFunction( f[ i ] ) ) {
			throw new TypeError( 'invalid input argument. All arguments must be functions. Value: `'+f[ i ]+'`.' );
		}
	}
	/**
	* Composite function.
	*
	* @private
	* @param {...*} args - arguments
	* @returns {*} result
	*/
	return function composite() {
		var args;
		var i;
		args = new Array( arguments.length );
		for ( i = 0; i < args.length; i++ ) {
			args[ i ] = arguments[ i ];
		}
		for ( i = f.length-1; i > 0; i-- ) {
			args = f[ i ].apply( null, args );
			if ( !isArray( args ) ) {
				args = [ args ];
			}
		}
		return f[ 0 ].apply( null, args );
	}; // end FUNCTION composite()
} // end FUNCTION compose()


// EXPORTS //

module.exports = compose;
