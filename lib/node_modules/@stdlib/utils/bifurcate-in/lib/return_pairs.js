'use strict';

// MAIN //

/**
* Splits values into two groups according to a predicate function and outputs results as key-value values.
*
* ## Notes
*
* -   We need to cache the object value to prevent the edge case where, during the invocation of the predicate function, the value at key `k` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.
*
*
* @private
* @param {(Object|Array|TypedArray)} obj - input object
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} predicate - predicate function indicating which group an element in the input object belongs to
* @returns {(Array<Array>|Array)} results
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
*
* function Foo() {
*     this.a = 'beep';
*     this.b = 'boop';
*     return this;
* }
*
* Foo.prototype = Object.create( null );
* Foo.prototype.c = 'foo';
* Foo.prototype.d = 'bar';
*
* var obj = new Foo();
*
* var out = bifurcateIn( obj, {}, predicate );
* // e.g., returns [ [ [ 'a', 'beep' ], [ 'b', 'boop' ], [ 'd', 'bar' ] ], [ [ 'c', 'foo' ] ] ]
*/
function bifurcateIn( obj, opts, predicate ) {
	var thisArg;
	var bool;
	var out;
	var key;
	var flg;
	var v;

	thisArg = opts.thisArg;
	out = [ [], [] ];
	flg = true;
	for ( key in obj ) { // eslint-disable-line guard-for-in
		flg = false;
		v = obj[ key ];
		bool = predicate.call( thisArg, v, key );
		if ( bool ) {
			out[ 0 ].push( [ key, v ] );
		} else {
			out[ 1 ].push( [ key, v ] );
		}
	}
	if ( flg ) {
		out.length = 0;
	}
	return out;
} // end FUNCTION bifurcateIn()


// EXPORTS //

module.exports = bifurcateIn;
