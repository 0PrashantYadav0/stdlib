'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();
var tryToString = require( './../lib/try2tostring.js' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof tryToString, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `false` if not provided a symbol', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( tryToString( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `false` if provided an empty object without a prototype', function test( t ) {
	var o = Object.create( null );
	t.strictEqual( tryToString( o ), false, 'returns false' );
	t.end();
});

tape( 'the function returns `false` if provided an object whose primitive value is a symbol', opts, function test( t ) {
	var o = Object.create( null );
	o.valueOf = valueOf;

	t.strictEqual( tryToString( o ), false, 'returns false' );
	t.end();

	function valueOf() {
		return Symbol( 'beep' );
	}
});

tape( 'the function returns `true` if able to successfully call a Symbol method', opts, function test( t ) {
	var tryToString;
	var o;

	tryToString = proxyquire( './../lib/try2tostring.js', {
		'./tostring.js': toStr
	});

	o = Object.create( null );
	o.valueOf = valueOf;

	t.strictEqual( tryToString( o ), true, 'returns true' );
	t.end();

	function valueOf() {
		return Symbol( 'beep' );
	}

	function toStr() {
		return 'Symbol(beep)';
	}
});

tape( 'if an environment supports symbols, the function returns `true`', opts, function test( t ) {
	t.strictEqual( tryToString( Symbol( 'beep' ) ), true, 'returns true' );
	t.strictEqual( tryToString( Object( Symbol( 'beep' ) ) ), true, 'returns true' );
	t.end();
});
