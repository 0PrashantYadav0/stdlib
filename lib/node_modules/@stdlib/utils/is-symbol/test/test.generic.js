'use strict';

// MODULES //

var tape = require( 'tape' );
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();
var isSymbol = require( './../lib/generic.js' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isSymbol, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a symbol', opts, function test( t ) {
	t.strictEqual( isSymbol( Symbol( 'a' ) ), true, 'returns true' );
	t.strictEqual( isSymbol( Object( Symbol( 'a' ) ) ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided a symbol', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isSymbol( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
