/* eslint-disable no-new-wrappers, no-undefined, no-empty-function */
'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isBoolean = require( '@stdlib/utils/is-boolean' ).isPrimitive;
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' );
var pkg = require( './../package.json' ).name;
var isSymbol = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols()
};


// MAIN //

bench( pkg+'::primitives', function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::objects', function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		[],
		{},
		function noop() {},
		new String( 'beep' )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::primitives:isPrimitive', function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isPrimitive( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::objects:isPrimitive', function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		[],
		{},
		function noop() {},
		new String( 'beep' )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isPrimitive( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::primitives:isObject', function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isObject( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::objects:isObject', function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		[],
		{},
		function noop() {},
		new String( 'beep' )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isObject( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::primitives,symbols', opts, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		Symbol( 'beep' ),
		Symbol( 'boop' ),
		Symbol( 'foo' ),
		Symbol( 'bar' )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::objects,symbols', opts, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		Object( Symbol( 'beep' ) ),
		Object( Symbol( 'boop' ) ),
		Object( Symbol( 'foo' ) ),
		Object( Symbol( 'bar' ) )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::primitives,symbols:isPrimitive', opts, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		Symbol( 'beep' ),
		Symbol( 'boop' ),
		Symbol( 'foo' ),
		Symbol( 'bar' )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isPrimitive( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::objects,symbols:isPrimitive', opts, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		Object( Symbol( 'beep' ) ),
		Object( Symbol( 'boop' ) ),
		Object( Symbol( 'foo' ) ),
		Object( Symbol( 'bar' ) )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isPrimitive( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::primitives,symbols:isObject', opts, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		Symbol( 'beep' ),
		Symbol( 'boop' ),
		Symbol( 'foo' ),
		Symbol( 'bar' )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isObject( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

bench( pkg+'::objects,symbols:isObject', opts, function benchmark( b ) {
	var values;
	var bool;
	var i;

	values = [
		Object( Symbol( 'beep' ) ),
		Object( Symbol( 'boop' ) ),
		Object( Symbol( 'foo' ) ),
		Object( Symbol( 'bar' ) )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		bool = isSymbol.isObject( values[ i % values.length ] );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( isBoolean( bool ) ) {
		b.pass( 'benchmark finished' );
	} else {
		b.fail( 'should return a boolean' );
	}
	b.end();
});

