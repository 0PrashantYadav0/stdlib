'use strict';

// MODULES //

var tape = require( 'tape' );
var parseJSON = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof parseJSON, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a JSON object if provided valid JSON', function test( t ) {
	var expected;
	var actual;

	expected = {
		'beep': 'boop'
	};
	actual = parseJSON( '{"beep":"boop"}' );

	t.deepEqual( actual, expected, 'deep equal' );
	t.end();
});

tape( 'the function returns an error if provided invalid JSON', function test( t ) {
	var out = parseJSON( '{"beep":"boop}' );
	t.equal( out instanceof Error, true, 'returns an error' );
	t.end();
});

tape( 'the function accepts numbers', function test( t ) {
	var out;

	out = parseJSON( 3.14 );
	t.equal( out, 3.14, 'returns 3.14' );

	out = parseJSON( '3.14' );
	t.equal( out, 3.14, 'returns 3.14' );

	t.end();
});

tape( 'the function accepts booleans', function test( t ) {
	var out;

	out = parseJSON( true );
	t.equal( out, true, 'returns true' );

	out = parseJSON( 'true' );
	t.equal( out, true, 'returns true' );

	t.end();
});

tape( 'the function accepts null', function test( t ) {
	var out;

	out = parseJSON( null );
	t.equal( out, null, 'returns null' );

	out = parseJSON( 'null' );
	t.equal( out, null, 'returns null' );

	t.end();
});

tape( 'the function returns an error if provided a value which cannot be parsed as JSON', function test( t ) {
	var values;
	var out;
	var i;

	values = [
		NaN,
		undefined,
		'beep',
		{},
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		out = parseJSON( values[ i ] );
		t.equal( out instanceof Error, true, 'returns an error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function supports providing a custom reviver function', function test( t ) {
	var expected;
	var actual;
	var str;

	str = '{"beep":"boop","a":"b"}';
	expected = {
		'beep': 'boop'
	};
	actual = parseJSON( str, reviver );

	t.deepEqual( actual, expected, 'supports custom reviver' );

	t.end();

	function reviver( key, value ) {
		if ( key === '' ) {
			return value;
		}
		if ( key === 'beep' ) {
			return value;
		}
	}
});
