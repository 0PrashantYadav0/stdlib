
{{alias}}( names[, options] )
    Returns a named typed tuple factory.

    Named typed tuples may be one the following data types:

    - float64: double-precision floating-point numbers (IEEE 754)
    - float32: single-precision floating-point numbers (IEEE 754)
    - int32: 32-bit two's complement signed integers
    - uint32: 32-bit unsigned integers
    - int16: 16-bit two's complement signed integers
    - uint16: 16-bit unsigned integers
    - int8: 8-bit two's complement signed integers
    - uint8: 8-bit unsigned integers
    - uint8c: 8-bit unsigned integers clamped to 0-255

    Parameters
    ----------
    names: Array<string>
        Field (property) names.

    options: Object (optional)
        Function options.

    options.dtype: string (optional)
        Default tuple data type. Default: 'float64'.

    options.name: string (optional)
        Tuple name. Default: 'tuple'.

    Returns
    -------
    factory: Function
        Named typed tuple factory.

    Examples
    --------
    > var opts = {};
    > opts.name = 'Point';
    > var factory = {{alias}}( [ 'x', 'y' ], opts );
    > var tuple = factory();


factory()
    Returns a named typed tuple of the default data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory();
    > p.x
    0.0
    > p.y
    0.0
    > p[ 0 ]
    0.0
    > p[ 1 ]
    0.0


factory( dtype )
    Returns a named typed tuple of the specified data type.

    Parameters
    ----------
    dtype: string
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory( 'int32' );
    > p.x
    0
    > p.y
    0
    > p[ 0 ]
    0
    > p[ 1 ]
    0


factory( typedarray[, dtype] )
    Creates a named typed tuple from a typed array.

    Parameters
    ----------
    typedarray: TypedArray
        Typed array from which to generate a named typed tuple.

    dtype: string (optional)
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory( {{alias:@stdlib/array/float64}}[ 1.0, -1.0 ] );
    > p.x
    1.0
    > p.y
    -1.0
    > p[ 0 ]
    1.0
    > p[ 1 ]
    -1.0


factory( obj[, dtype] )
    Creates a named typed tuple from an array-like object or iterable.

    Parameters
    ----------
    obj: Object
        Array-like object or iterable from which to generate a named typed
        tuple.

    dtype: string (optional)
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory( [ 1, -1 ], 'int32' );
    > p.x
    1
    > p.y
    -1
    > p[ 0 ]
    1
    > p[ 1 ]
    -1


factory( buffer[, byteOffset][, dtype] )
    Returns a named typed tuple view of an ArrayBuffer.

    The view length equals the number of tuple fields.

    Parameters
    ----------
    buffer: ArrayBuffer
        Underlying ArrayBuffer.

    byteOffset: integer (optional)
        Integer byte offset specifying the location of the first tuple element.
        Default: 0.

    dtype: string (optional)
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var buf = new {{alias:@stdlib/array/buffer}}( 16 );
    > var p = factory( buf, 4, 'float32' );
    > p.x
    0.0
    > p.y
    0.0
    > p[ 0 ]
    0.0
    > p[ 1 ]
    0.0


factory.from( TODO )
tuple.<TODO>

    See Also
    --------

