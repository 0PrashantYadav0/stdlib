
{{alias}}( fields[, options] )
    Returns a named typed tuple factory.

    Named tuples assign a property name, and thus a meaning, to each position in
    a tuple and allow for more readable, self-documenting code.

    Named typed tuples can be used wherever typed arrays are used, with the
    added benefit that they allow accessing fields by both field name and
    position index.

    Named typed tuples may be one the following data types:

    - float64: double-precision floating-point numbers (IEEE 754)
    - float32: single-precision floating-point numbers (IEEE 754)
    - int32: 32-bit two's complement signed integers
    - uint32: 32-bit unsigned integers
    - int16: 16-bit two's complement signed integers
    - uint16: 16-bit unsigned integers
    - int8: 8-bit two's complement signed integers
    - uint8: 8-bit unsigned integers
    - uint8c: 8-bit unsigned integers clamped to 0-255

    Parameters
    ----------
    fields: Array<string>
        Field (property) names.

    options: Object (optional)
        Function options.

    options.dtype: string (optional)
        Default tuple data type. If a data type is not provided to a named typed
        tuple factory, this option specifies the underlying tuple data type.
        Default: 'float64'.

    options.name: string (optional)
        Tuple name. Default: 'tuple'.

    Returns
    -------
    factory: Function
        Named typed tuple factory.

    Examples
    --------
    > var opts = {};
    > opts.name = 'Point';
    > var factory = {{alias}}( [ 'x', 'y' ], opts );
    > var tuple = factory();


factory()
    Returns a named typed tuple of the default data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory();
    > p.x
    0.0
    > p.y
    0.0
    > p[ 0 ]
    0.0
    > p[ 1 ]
    0.0


factory( dtype )
    Returns a named typed tuple of the specified data type.

    Parameters
    ----------
    dtype: string
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory( 'int32' );
    > p.x
    0
    > p.y
    0
    > p[ 0 ]
    0
    > p[ 1 ]
    0


factory( typedarray[, dtype] )
    Creates a named typed tuple from a typed array.

    Parameters
    ----------
    typedarray: TypedArray
        Typed array from which to generate a named typed tuple.

    dtype: string (optional)
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory( {{alias:@stdlib/array/float64}}[ 1.0, -1.0 ] );
    > p.x
    1.0
    > p.y
    -1.0
    > p[ 0 ]
    1.0
    > p[ 1 ]
    -1.0


factory( obj[, dtype] )
    Creates a named typed tuple from an array-like object or iterable.

    Parameters
    ----------
    obj: Object
        Array-like object or iterable from which to generate a named typed
        tuple.

    dtype: string (optional)
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > p = factory( [ 1, -1 ], 'int32' );
    > p.x
    1
    > p.y
    -1
    > p[ 0 ]
    1
    > p[ 1 ]
    -1


factory( buffer[, byteOffset][, dtype] )
    Returns a named typed tuple view of an ArrayBuffer.

    The view length equals the number of tuple fields.

    Parameters
    ----------
    buffer: ArrayBuffer
        Underlying ArrayBuffer.

    byteOffset: integer (optional)
        Integer byte offset specifying the location of the first tuple element.
        Default: 0.

    dtype: string (optional)
        Tuple data type.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var buf = new {{alias:@stdlib/array/buffer}}( 16 );
    > var p = factory( buf, 4, 'float32' );
    > p.x
    0.0
    > p.y
    0.0
    > p[ 0 ]
    0.0
    > p[ 1 ]
    0.0


factory.from( src[, map[, thisArg]] )
    Creates a new named typed tuple from an array-like object or an iterable.

    A callback is provided the following arguments:

    - value: source value.
    - index: source index.
    - field: tuple field.

    Parameters
    ----------
    src: ArrayLike|Iterable
        Source of tuple elements.

    map: Function (optional)
        Callback to invoke for each source element.

    thisArg: Any (optional)
        Callback execution context.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > function mapFcn( v ) { return v * 2.0; };
    > var p = factory.from( [ 1.0, -1.0 ], mapFcn );
    > p.x
    2.0
    > p.y
    -2.0
    > p[ 0 ]
    2.0
    > p[ 1 ]
    -2.0


factory.fromObject( obj[, map[, thisArg]] )
    Creates a new named typed tuple from an object containing tuple fields.

    A callback is provided the following arguments:

    - value: source object tuple field value.
    - field: source object tuple field name.

    Parameters
    ----------
    obj: Object
        Source object.

    map: Function (optional)
        Callback to invoke for each source object tuple field.

    thisArg: Any (optional)
        Callback execution context.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory.fromObject( { 'x': 2.0, 'y': -2.0 } );
    > p.x
    2.0
    > p.y
    -2.0
    > p[ 0 ]
    2.0
    > p[ 1 ]
    -2.0


factory.of( element0[, element1[, element2[, ...]]] )
    Creates a new named typed tuple from a variable number of arguments.

    The number of arguments *must* equal the number of tuple fields.

    Parameters
    ----------
    element: ...number
        Tuple elements.

    Returns
    -------
    tuple: TypedArray
        Named typed tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory.of( 2.0, -2.0 );
    > p.x
    2.0
    > p.y
    -2.0
    > p[ 0 ]
    2.0
    > p[ 1 ]
    -2.0


tuple.BYTES_PER_ELEMENT
    Size (in bytes) of each tuple element.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.BYTES_PER_ELEMENT
    8


tuple.buffer
    Returns the underlying ArrayBuffer.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.buffer
    <ArrayBuffer>


tuple.byteLength
    Length (in bytes) of the tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.byteLength
    16


tuple.byteOffset
    Offset (in bytes) of a tuple from the start of its underlying ArrayBuffer.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.byteOffset
    0


tuple.length
    Tuple length (i.e., number of elements).

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.length
    2


tuple.name
    Tuple name.

    Examples
    --------
    > var opts = { 'name': 'Point' };
    > var factory = {{alias}}( [ 'x', 'y' ], opts );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.name
    'Point'


tuple.fields
    Returns the list of tuple fields.

    Returns
    -------
    fields: Array<string>
        Tuple fields.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p.fields
    [ 'x', 'y' ]


tuple.orderedFields
    Returns the list of tuple fields in index order.

    Returns
    -------
    fields: Array<string>
        Tuple fields.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > p[ 0 ]
    1.0
    > p.sort();
    > p[ 0 ]
    -1.0
    > p.fields
    [ 'x', 'y' ]
    > p.orderedFields
    [ 'y', 'x' ]


tuple.copyWithin( target, start[, end] )
    Copies a sequence of elements within the tuple starting at `start` and
    ending at `end` (non-inclusive) to the position starting at `target`.

    Parameters
    ----------
    target: integer
        Target start index position.

    start: integer
        Source start index position.

    end: integer (optional)
        Source end index position. Default: tuple.length.

    Returns
    -------
    tuple: TypedArray
        Modified tuple.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y', 'z', 'w', 'v' ] );
    > var p = factory( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );
    > p.copyWithin( 3, 0, 2 );
    > p.w
    2.0
    > p.v
    -2.0


tuple.entries()
    Returns an iterator for iterating over tuple key-value pairs.

    Returns
    -------
    iter: Iterator
        Iterator for iterating over tuple key-value pairs.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > it = p.entries();
    > it.next().value
    [ 1.0, 0, 'x' ]
    > it.next().value
    [ -1.0, 1, 'y' ]
    > it.next().done
    true


tuple.every( predicate[, thisArg] )
    Tests whether all tuple elements pass a test implemented by a predicate
    function.

    Parameters
    ----------
    predicate: Function
        Predicate function which tests tuple elements. If the function returns
        a truthy value, a tuple elements passes; otherwise, a tuple element
        fails.

    thisArg: Any (optional)
        Callback execution context.

    Returns
    -------
    bool: boolean
        Boolean indicating whether all tuple elements pass.

    Examples
    --------
    > var factory = {{alias}}( [ 'x', 'y' ] );
    > var p = factory( [ 1.0, -1.0 ] );
    > function predicate( v ) { return ( v >= 0.0 ); };
    > p.every( predicate )
    false

    See Also
    --------

