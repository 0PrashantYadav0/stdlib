/* eslint-disable no-new-wrappers */
'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();
var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var isDateObject = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isDateObject, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a `Date` object', function test( t ) {
	t.equal( isDateObject( new Date() ), true, 'returns true' );
	t.end();
});

tape( 'if `Symbol.toStringTag` is supported, the function guards against objects masquerading as `Date` objects', opts, function test( t ) {
	var isDateObject;
	var mock;

	isDateObject = proxyquire( './../lib/is_date_object.js', {
		'@stdlib/utils/detect-tostringtag-support': detect
	});

	mock = {
		'toString': toString,
		'getDay': getDay
	};
	if ( hasToStringTag ) {
		mock[ Symbol.toStringTag ] = 'Date';
	}
	t.equal( isDateObject( mock ), false, 'returns false' );
	t.end();

	function detect() {
		return true;
	}
	function toString() {
		return 'a';
	}
	function getDay() {
		return 'a';
	}
});

tape( 'if `Symbol.toStringTag` is not supported, the function attempts to determine the native class', function test( t ) {
	var isDateObject = proxyquire( './../lib/is_date_object.js', {
		'@stdlib/utils/detect-tostringtag-support': detect
	});

	t.equal( isDateObject( new Date() ), true, 'returns true' );
	t.equal( isDateObject( {} ), false, 'returns false' );

	t.end();

	function detect() {
		return false;
	}
});

tape( 'function returns `false` if not provided a `Date` object', function test( t ) {
	var values;
	var i;

	values = [
		'2017-01-01',
		new String( '2017-01-01' ),
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		{},
		/./,
		new RegExp( '.' ),
		function noop() {},
		function Date() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isDateObject( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
