'use strict';

/**
* Tests if a value is an even number.
*
* @module @stdlib/utils/is-even
*
* @example
* var isEven = require( '@stdlib/utils/is-even' );
*
* var bool = isEven( 4.0 );
* // returns true
*
* bool = isEven( new Number( 4.0 ) );
* // returns true
*
* bool = isEven( 3.0 );
* // returns false
*
* bool = isEven( new Number( 5.0 ) );
* // returns false
*
* bool = isEven( -3.14 );
* // returns false
*
* bool = isEven( null );
* // returns false
* @example
* // Use interface to check for even number primitives...
* var isEven = require( '@stdlib/utils/is-even' ).isPrimitive;
*
* var bool = isEven( -4.0 );
* // returns true
*
* bool = isEven( new Number( -4.0 ) );
* // returns false
* @example
* // Use interface to check for even number objects...
* var isEven = require( '@stdlib/utils/is-even' ).isObject;
*
* var bool = isEven( 4.0 );
* // returns false
*
* bool = isEven( new Number( 4.0 ) );
* // returns true
* @example
* // Use interface to check for even number arrays...
* var isEven = require( '@stdlib/utils/is-even' ).isEvenArray;
*
* var bool = isEven( [ -2.0, new Number(2.0) ] );
* // returns true
*
* bool = isEven( [ 2.0, '2.0' ] );
* // returns false
* @example
* // Use interface to check for array of even number primitives...
* var isEven = require( '@stdlib/utils/is-even' ).isPrimitiveEvenArray;
*
* var bool = isEven( [ 2.0, -2.0 ] );
* // returns true
*
* bool = isEven( [ 2.0, new Number(-2.0) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isEven = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// METHODS //

setReadOnly( isEven, 'isPrimitive', isPrimitive );
setReadOnly( isEven, 'isObject', isObject );
setReadOnly( isEven, 'isEvenArray', arrayfun.create( isEven ) );
setReadOnly( isEven, 'isPrimitiveEvenArray', arrayfun.create( isPrimitive ) );


// EXPORTS //

module.exports = isEven;
