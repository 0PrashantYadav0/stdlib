'use strict';

// MODULES //

var isCollection = require( '@stdlib/assert/is-collection' );
var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

/**
* Until a test condition is true, invokes a function once for each element in a collection.
*
* @param {Collection} collection - input collection
* @param {Function} predicate - function which indicates whether to stop iterating over a collection
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context for the applied function
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a function
* @throws {TypeError} third argument must be a function
* @returns {Collection} input collection
*
* @example
* function predicate( v, key, collection ) {
*     return ( v !== v );
* }
*
* function log( v, key, collection ) {
*     console.log( '%s: %d', key, v );
* }
*
* var arr = [ 1, 2, 3, 4, NaN, 5 ];
*
* untilEach( arr, predicate, log );
*/
function untilEach( collection, predicate, fcn, thisArg ) {
	var len;
	var i;
	if ( !isCollection( collection ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a collection. Value: `'+collection+'`.' );
	}
	if ( !isFunction( predicate ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+predicate+'`.' );
	}
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. Third argument must be a function. Value: `'+fcn+'`.' );
	}
	len = collection.length;
	i = 0;
	while (
		i < len &&
		!predicate( collection[ i ], i, collection )
	) {
		fcn.call( thisArg, collection[ i ], i, collection );
		i += 1;
		len = collection.length; // ...account for dynamically resizing a collection
	}
	return collection;
}


// EXPORTS //

module.exports = untilEach;
