'use strict';

// MODULES //

var tape = require( 'tape' );
var isNaNArray = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isNaNArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function tests for an array-like object containing only `NaN` values', function test( t ) {
	var arr;

	arr = [ NaN, new Number( NaN ), NaN ];
	t.equal( isNaNArray( arr ), true, 'returns true' );

	arr = [ NaN, 3, NaN ];
	t.equal( isNaNArray( arr ), false, 'returns false' );

	arr = [ NaN, null, NaN ];
	t.equal( isNaNArray( arr ), false, 'returns false' );

	t.end();
});

tape( 'attached to the main export is a method to test for an array-like object containing only primitive `NaN` values', function test( t ) {
	var arr;

	arr = [ NaN, NaN, NaN ];
	t.equal( isNaNArray.primitives( arr ), true, 'returns true' );

	arr = [ new Number( NaN ), NaN, NaN ];
	t.equal( isNaNArray.primitives( arr ), false, 'returns false' );

	t.end();
});

tape( 'attached to the main export is a method to test for an array-like object containing only object `NaN` values', function test( t ) {
	var arr;

	arr = [ NaN, NaN, NaN ];
	t.equal( isNaNArray.objects( arr ), false, 'returns false' );

	arr = [ new Number( NaN ), NaN, NaN ];
	t.equal( isNaNArray.objects( arr ), false, 'returns false' );

	arr = [ new Number( NaN ), new Number( NaN ), new Number( NaN ) ];
	t.equal( isNaNArray.objects( arr ), true, 'returns true' );

	t.end();
});
