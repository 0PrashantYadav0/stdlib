'use strict';

/**
* Test if a value is an array-like object containing only NaN values.
*
* @module @stdlib/utils/is-nan-array
*
* @example
* var isNaNArray = require( '@stdlib/utils/is-nan-array' );
*
* var bool = isNaNArray( [NaN,NaN,NaN] );
* // returns true
*
* bool = isNaNArray( [NaN,2] );
* // returns false
*
* bool = isNaNArray.primitives( [NaN,new Number( NaN )] );
* // returns false
*
* bool = isNaNArray.primitives( [NaN,NaN,NaN] );
* // returns true
*
* bool = isNaNArray.objects( [new Number( NaN ),new Number( NaN )] );
* // returns true
*
* bool = isNaNArray.objects( [NaN,new Number( NaN ),new Number( NaN )] );
* // returns false
*
* bool = isNaNArray.objects( [NaN,NaN,NaN] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/utils/tools/array-like-function' );
var isnan = require( '@stdlib/utils/is-nan' );


// VARIABLES //

var isNaNArray = arrayfun.create( isnan );


// METHODS //

setReadOnly( isNaNArray, 'primitives', arrayfun.create( isnan.isPrimitive ) );
setReadOnly( isNaNArray, 'objects', arrayfun.create( isnan.isObject ) );


// EXPORTS //

module.exports = isNaNArray;
