'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isArguments = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isArguments, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided an `arguments` object', function test( t ) {
	t.strictEqual( isArguments( arguments ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided an `arguments` object', function test( t ) {
	var values;
	var i;

	function Arguments() {
		return this;
	}

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{},
		{'length': 3.14},
		{'length': -1},
		{'length': '5'},
		function(){},
		new Arguments(),
		Array.prototype.slice.call( arguments )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isArguments( values[i] ), false, 'returns false for when provided ' + values[i] );
	}
	t.end();
});

tape( 'the function uses a polyfill for environments which return an unexpected internal class', function test( t ) {
	var isArguments;
	var values;
	var i;

	function Arguments() {
		return this;
	}

	isArguments = proxyquire( './../lib/index.js', {
		'./detect.js': false
	});

	t.strictEqual( isArguments( arguments ), true, 'returns true when provided an `arguments` object' );

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{},
		{'length': 3.14},
		{'length': -1},
		{'length': '5'},
		function(){},
		new Arguments(),
		Array.prototype.slice.call( arguments )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isArguments( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
