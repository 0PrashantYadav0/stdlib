'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var isEven = require( './fixtures/isEven.js' );
var create = require( './../lib/create.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof create, 'function', 'main export is a function' );
	t.end();
});

tape( 'function throws an error if not provided a test function', function test( t ) {
	var values;
	var i;
	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws TypeError' );
	}
	function badValue( value ) {
		return function() {
			create( value );
		};
	}
	t.end();
});

tape( 'function returns a function', function test( t ) {
	var validate;

	validate = create( isEven );
	t.equal( typeof validate, 'function' );

	validate = create( noop );
	t.equal( typeof validate, 'function' );
	t.end();
});

tape( 'function returns a function that tests an array-like object', function test( t ) {
	var validate;
	var actual;
	var arr;
	var out;

	validate = create( isEven );

	arr = [ 2, 2, 2, 2 ];
	out = true;

	actual = validate( arr );

	t.equal( actual, out );
	t.equal( out, true );

	arr = [ 2, 2, 2, 3 ];
	out = false;

	actual = validate( arr );

	t.equal( actual, out );
	t.equal( out, false );
	t.end();
});

tape( 'function returns a function which returns `false` if not supplied an array-like object', function test( t ) {
	var isEvenArray = create( isEven );
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		undefined,
		{},
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isEvenArray( values[ i ] ), false, 'returns false' );
	}
	t.end();
});

tape( 'function returns a function which returns `false` if provided an empty array', function test( t ) {
	var validate;
	var actual;

	validate = create( isEven );
	actual = validate( [] );
	t.equal( actual, false );
	t.end();
});
