'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pkg = require( './../package.json' ).name;
var doWhile = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var sum;
	var i;

	function predicate( i ) {
		return ( i < 10 );
	}

	function fcn( i ) {
		sum += i;
	}

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		sum = 0;
		doWhile( predicate, fcn );
		if ( isnan( sum ) ) {
			b.fail( 'should not be NaN' );
		}
	}
	b.toc();
	if ( isnan( sum ) ) {
		b.fail( 'should not be NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::loop', function benchmark( b ) {
	var sum;
	var i;
	var j;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		sum = 0;
		j = 0;
		do {
			sum += j;
			j += 1;
		} while ( j < 10 );
		if ( isnan( sum ) ) {
			b.fail( 'should not be NaN' );
		}
	}
	b.toc();
	if ( isnan( sum ) ) {
		b.fail( 'should not be NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
