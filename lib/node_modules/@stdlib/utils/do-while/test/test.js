'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var doWhile = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof doWhile, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a predicate function', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		{},
		[],
		/.*/,
		new Date()
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			doWhile( value, noop );
		};
	}
});

tape( 'the function throws an error if not provided a function to invoke', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		{},
		[],
		/.*/,
		new Date()
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			doWhile( noop, value );
		};
	}
});

tape( 'while a test condition is true, the function invokes a provided function (and does so at least once)', function test( t ) {
	var out = [];

	doWhile( predicate, fcn );

	t.deepEqual( out, [ 0, 1, 2, 3, 4 ], 'expected result' );
	t.end();

	function predicate( i ) {
		return ( i < 5 );
	}

	function fcn( i ) {
		out.push( i );
	}
});

tape( 'the function supports providing an execution context', function test( t ) {
	var ctx = {
		'count': 0
	};

	doWhile( predicate, fcn, ctx );

	t.strictEqual( ctx.count, 5, 'expected result' );
	t.end();

	function predicate( i ) {
		return ( i < 5 );
	}

	function fcn() {
		/* eslint-disable no-invalid-this */
		this.count += 1;
	}
});
