'use strict';

/**
* Split values into two groups according to a predicate function.
*
* @module @stdlib/utils/bifurcate-own
*
* @example
* var bifurcateOwn = require( '@stdlib/utils/bifurcate-own' );
*
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var obj = {
*     'a': 'beep',
*     'b': 'boop',
*     'c': 'foo',
*     'd': 'bar'
* };
*
* var out = bifurcateOwn( obj, predicate );
* // e.g., returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]
*
* @example
* var bifurcateOwn = require( '@stdlib/utils/bifurcate-own' );
*
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var obj = {
*     'a': 'beep',
*     'b': 'boop',
*     'c': 'foo',
*     'd': 'bar'
* };
*
* var opts = {
*     'returns': 'keys'
* };
* var out = bifurcateOwn( obj, opts, predicate );
* // e.g., returns [ [ 'a', 'b', 'd' ], [ 'c' ] ]
*
* @example
* var bifurcateOwn = require( '@stdlib/utils/bifurcate-own' );
*
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var obj = {
*     'a': 'beep',
*     'b': 'boop',
*     'c': 'foo',
*     'd': 'bar'
* };
* var opts = {
*     'returns': '*'
* };
* var out = bifurcateOwn( obj, opts, predicate );
* // e.g., returns [ [ [ 'a', 'beep' ], [ 'b', 'boop' ], [ 'd', 'bar' ] ], [ [ 'c', 'foo' ] ] ]
*/

// MODULES //

var bifurcateOwn = require( './main.js' );


// EXPORTS //

module.exports = bifurcateOwn;
