'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();
var detect = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof detect, 'function', 'main export is a function' );
	t.end();
});

tape( 'feature detection result is a boolean', function test( t ) {
	t.strictEqual( typeof detect(), 'boolean', 'detection result is a boolean' );
	t.end();
});

tape( 'if `Symbols` are not supported, detection result is `false`', function test( t ) {
	var detect = proxyquire( './../lib/has_tostringtag_support.js', {
		'@stdlib/utils/detect-symbol-support': hasSupport
	});

	t.strictEqual( detect(), false, 'detection result is `true`' );
	t.end();

	function hasSupport() {
		return false;
	}
});

tape( 'if `toStringTag` is supported, detection result is `true`', opts, function test( t ) {
	if ( typeof Symbol.toStringTag === 'symbol' ) {
		t.strictEqual( detect(), true, 'detection result is `true`' );
	} else {
		t.strictEqual( detect(), false, 'detection result is `false`' );
	}
	t.end();
});

tape( 'if `toStringTag` is not supported, the function guards against non-symbol `toStringTag` properties and the detection result is `false`', opts, function test( t ) {
	if ( typeof Symbol.toStringTag === 'symbol' ) {
		t.strictEqual( detect(), true, 'detection result is `true`' );
	} else {
		Symbol.toStringTag = 'beep';
		t.strictEqual( detect(), false, 'detection result is `false`' );
	}
	t.end();
});
