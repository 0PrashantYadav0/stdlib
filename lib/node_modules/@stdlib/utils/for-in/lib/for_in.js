/* eslint-disable guard-for-in */
'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

/**
* Invokes a function once for each own and inherited enumerable property of an object.
*
* ## Notes
*
* -   Iteration order is **not** guaranteed.
*
*
* @param {Object} obj - input object
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be a function
* @returns {Object} obj - input object
*
* @example
* function log( v, key ) {
*     console.log( '%s: %d', key, v );
* }
*
* function Foo() {
*     this.a = 1;
*     this.b = 2;
*     return this;
* }
*
* Foo.prototype.c = 3;
* Foo.prototype.d = 4;
*
* var obj = new Foo();
*
* forIn( obj, log );
*/
function forIn( obj, fcn, thisArg ) {
	var bool;
	var key;
	if ( typeof obj !== 'object' || obj === null ) {
		throw new TypeError( 'invalid input argument. First argument must be an object. Value: `'+obj+'`.' );
	}
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+fcn+'`.' );
	}
	for ( key in obj ) {
		bool = fcn.call( thisArg, obj[ key ], key, obj );
		if ( bool === false ) {
			return obj;
		}
	}
	return obj;
}


// EXPORTS //

module.exports = forIn;
