'use strict';

// MODULES //

var tape = require( 'tape' );
var curry = require( './../lib' );


// FUNCTIONS //

function add( x, y, z ) {
	return x + y + z;
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof curry, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a function', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			curry( value );
		};
	}
});

tape( 'the function throws an error if provided an arity argument which is not a positive integer (3 args)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		3.14,
		0,
		-1,
		NaN,
		null,
		undefined,
		true,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			curry( add, value, {} );
		};
	}
});

tape( 'the function returns a function', function test( t ) {
	var fcn = curry( add );
	t.strictEqual( typeof fcn, 'function', 'returns a function' );
	t.end();
});

tape( 'the function curries a function', function test( t) {
	var fcn;
	var out;
	var f1;

	fcn = curry( add );
	t.strictEqual( typeof fcn, 'function', 'returns a function' );

	out = fcn( 5 );
	f1 = out;
	t.strictEqual( typeof out, 'function', 'returns a function' );

	out = fcn( 4 );
	t.strictEqual( typeof out, 'function', 'returns a function' );
	t.strictEqual( out, f1, 'returns curry function' );

	out = fcn( 3 );
	t.strictEqual( out, 12, 'returns curried function result' );

	t.end();
});

tape( 'once all arguments have been provided, the curry function returns the curried function result for all future invocations', function test( t ) {
	var nargs;
	var fcn;
	var out;
	var sum;
	var i;

	fcn = curry( add );
	nargs = add.length;

	for ( i = 0; i < 25; i++ ) {
		out = fcn( i*10 );
		if ( i < nargs-1 ) {
			t.strictEqual( typeof out, 'function', 'returns a function' );
		}
		else if ( i === nargs-1 ) {
			sum = out;
			t.strictEqual( sum, 30, 'returns curried function result' );
		}
		else {
			t.strictEqual( out, sum, 'returns curried function result' );
		}
	}
	t.end();
});

tape( 'the function supports specifying a function arity', function test( t ) {
	var fcn;
	var out;
	var f1;

	function add() {
		return arguments[ 0 ] + arguments[ 1 ] + arguments[ 2 ];
	}

	fcn = curry( add, 3 );
	t.strictEqual( typeof fcn, 'function', 'returns a function' );

	out = fcn( 5 );
	f1 = out;
	t.strictEqual( typeof out, 'function', 'returns a function' );

	out = fcn( 4 );
	t.strictEqual( typeof out, 'function', 'returns a function' );
	t.strictEqual( out, f1, 'returns curry function' );

	out = fcn( 3 );
	t.strictEqual( out, 12, 'returns curried function result' );

	t.end();
});

tape( 'the function supports specifying a function context', function test( t ) {
	var context;
	var fcn;
	var out;
	var f1;

	context = {
		'style': 'border',
		'generate': function generate( length, units, type, color ) {
			return this.style+': '+length+units+' '+type+' '+color;
		}
	};

	fcn = curry( context.generate, context );
	t.strictEqual( typeof fcn, 'function', 'returns a function' );

	out = fcn( 2 );
	f1 = out;
	t.strictEqual( typeof out, 'function', 'returns a function' );

	out = fcn( 'px' );
	t.strictEqual( typeof out, 'function', 'returns a function' );
	t.strictEqual( out, f1, 'returns curry function' );

	out = fcn( 'dashed' );
	t.strictEqual( typeof out, 'function', 'returns a function' );
	t.strictEqual( out, f1, 'returns curry function' );

	out = fcn( 'steelblue' );
	t.strictEqual( out, 'border: 2px dashed steelblue' );

	t.end();
});

tape( 'the function supports specifying a function arity and context', function test( t ) {
	var context;
	var fcn;
	var out;
	var f1;

	context = {
		'style': 'border',
		'generate': function generate() {
			return this.style+': '+arguments[0]+arguments[1]+' '+arguments[2]+' '+arguments[3];
		}
	};

	fcn = curry( context.generate, 4, context );
	t.strictEqual( typeof fcn, 'function', 'returns a function' );

	out = fcn( 2 );
	f1 = out;
	t.strictEqual( typeof out, 'function', 'returns a function' );

	out = fcn( 'px' );
	t.strictEqual( typeof out, 'function', 'returns a function' );
	t.strictEqual( out, f1, 'returns curry function' );

	out = fcn( 'dashed' );
	t.strictEqual( typeof out, 'function', 'returns a function' );
	t.strictEqual( out, f1, 'returns curry function' );

	out = fcn( 'steelblue' );
	t.strictEqual( out, 'border: 2px dashed steelblue' );

	t.end();
});
