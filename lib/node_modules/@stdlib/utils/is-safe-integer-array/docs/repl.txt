
{{alias}}( value )
    Tests if a value is an array-like object containing only safe integers.

    An integer valued number is "safe" when the number can be exactly
    represented as a double-precision floating-point number.

    Parameters
    ----------
    value: any
        Value to test.

    Returns
    -------
    bool: boolean
        Boolean indicating whether value is an array-like object containing
        only safe integers.

    Examples
    --------
    > var bool = {{alias}}( [ -3.0, new Number(0.0), 2.0 ] )
    true
    > bool = {{alias}}( [ -3.0, '3.0' ] )
    false


{{alias}}.primitives( value )
    Tests if a value is an array-like object containing only primitive safe
    integer values.

    Parameters
    ----------
    value: any
        Value to test.

    Returns
    -------
    bool: boolean
        Boolean indicating whether value is an array-like object containing only
        primitive safe integer values.

    Examples
    --------
    > var bool = {{alias}}.primitives( [ -1.0, 10.0 ] )
    true
    > bool = {{alias}}.primitives( [ -1.0, 0.0, 5.0 ] )
    true
    > bool = {{alias}}.primitives( [ -3.0, new Number(-1.0) ] )
    false


{{alias}}.objects( value )
    Tests if a value is an array-like object containing only number objects
    having safe integer values.

    Parameters
    ----------
    value: any
        Value to test.

    Returns
    -------
    bool: boolean
        Boolean indicating whether value is an array-like object containing only
        number objects having safe integer values.

    Examples
    --------
    > var bool = {{alias}}.objects( [ new Number(1.0), new Number(3.0) ] )
    true
    > bool = {{alias}}.objects( [ -1.0, 0.0, 3.0 ] )
    false
    > bool = {{alias}}.objects( [ 3.0, new Number(-1.0) ] )
    false

    See Also
    --------

