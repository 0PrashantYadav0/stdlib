'use strict';

// MODULES //

var tape = require( 'tape' );
var reFromString = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof reFromString, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a primitive string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ),TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			reFromString( value );
		};
	}
});

tape( 'the function returns a regular expression', function test( t ) {
	var expected;
	var actual;
	var values;
	var i;

	values = [
		'/beep/',
		'/[A-Z]*/',
		'/\\\\\\\//ig',
		'/[A-Z]{0,}/',
		'/^boop$/',
		'/(?:.*)/',
		'/(?:beep|boop)/',
		'/\\w+/'
	];

	expected = [
		/beep/,
		/[A-Z]*/,
		/\\\//ig,
		/[A-Z]{0,}/,
		/^boop$/,
		/(?:.*)/,
		/(?:beep|boop)/,
		/\w+/
	];

	for ( i = 0; i < values.length; i++ ) {
		actual = reFromString( values[ i ] );
		t.equal( actual.toString(), expected[ i ].toString(), values[ i ] );
	}
	t.end();
});

tape( 'the function returns `null` if unable to parse an input string as a regular expression', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		'/boop',
		'/dir//',
		'/dir/goo',
		'\/\/\/\/'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( reFromString( values[i] ), null, values[ i ] );
	}
	t.end();
});
