'use strict';

// MODULES //

var tape = require( 'tape' );
var deepGet = require( './../lib/index.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof deepGet, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function exports a factory function', function test( t ) {
	t.equal( typeof deepGet.factory, 'function', 'exports a factory function' );
	t.end();
});

tape( 'the function returns `undefined` if provided a non-object or null', function test( t ) {
	var values = [
		'5',
		5,
		null,
		undefined,
		NaN,
		true,
		function(){}
	];

	for ( var i = 0; i < values.length; i++ ) {
		t.equal( deepGet( values[ i ], 'a.b.c' ), undefined, 'returns undefined' );
	}
	t.end();
});

tape( 'the function throws an error if provided a key path argument which is not either a string primitive or a key array', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		undefined,
		NaN,
		true,
		{},
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function() {
			deepGet( {'a':5}, value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		true,
		undefined,
		[],
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function() {
			deepGet( {'a':5}, 'a', value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		NaN,
		{},
		undefined,
		function(){}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function() {
			deepGet( {'a':5}, 'a', {
				'sep': value
			});
		};
	}
});

tape( 'the function deep gets', function test( t ) {
	var obj, actual, expected;

	obj = { 'a': { 'b': 999 } };

	// String path:
	actual = deepGet( obj, 'a.b' );
	expected = 999;

	t.strictEqual( actual, expected );

	// String path with custom separator:
	actual = deepGet( obj, 'a/b', {
		'sep': '/'
	});
	expected = 999;

	t.strictEqual( actual, expected );

	// Array path:
	actual = deepGet( obj, ['a','b'] );
	expected = 999;

	t.strictEqual( actual, expected );

	// Non-existent path:
	actual = deepGet( obj, ['a','c'] );
	expected = undefined;

	t.strictEqual( actual, expected );
	t.end();
});
