'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var err;

	values = [
		'5',
		5,
		null,
		NaN,
		true,
		undefined,
		[],
		function(){}
	];

	for ( var i = 0; i < values.length; i++ ) {
		err = validate( {}, values[ i ] );
		t.ok( err instanceof TypeError, values[ i ], 'returns a TypeError' );
	}
	t.end();
});

tape( 'the function returns an error if provided a separator option which is not a string primitive', function test( t ) {
	var values;
	var err;

	values = [
		new String( '5' ),
		5,
		null,
		NaN,
		true,
		undefined,
		[],
		{},
		function(){}
	];

	for ( var i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'sep': values[ i ]
		});
		t.ok( err instanceof TypeError, values[ i ], 'returns a TypeError' );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var opts;

	opts = {
		'sep': '_'
	};
	t.equal( validate( {}, opts ), null, 'returns null' );

	opts = {
		'beep': true, // unrelated options
		'boop': false
	};
	t.equal( validate( {}, opts ), null, 'returns null' );
	t.end();
});
