'use strict';

// MODULES //

var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var isArray = require( '@stdlib/utils/is-array' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var dget = require( './dget.js' );


// FACTORY //

/**
* Creates a reusable deep get factory.
*
* @param {(string|Array)} path - key path
* @param {Options} [opts] - function options
* @param {string} [opts.sep='.'] - key path separator
* @throws {TypeError} first argument must be a string primitive or key array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} deep get factory
*
* @example
* var dget = factory( 'a/b/c', {
* 	'sep': '/'
* });
*/
function factory( path, options ) {
	var isStr = isString( path );
	var props;
	var opts;
	var err;
	if ( !isStr && !isArray( path ) ) {
		throw new TypeError( 'invalid input argument. Key path must be a string primitive or a key array. Value: `' + path + '`.' );
	}
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( isStr ) {
		props = path.split( opts.sep );
	} else {
		props = path;
	}
	/**
	* Deep get a nested property.
	*
	* @param {(Object|Array)} obj - input object
	* @returns {*} nested property value
	*
	* @example
	* var obj = { 'a': { 'b': { 'c': 'd' } } };
	* var val = deepGet( obj );
	*/
	return function deepGet( obj ) {
		if ( typeof obj !== 'object' || obj === null ) {
			return;
		}
		return dget( obj, props );
	}; // end FUNCTION deepGet()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
