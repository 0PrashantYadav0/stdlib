/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var Int32Array = require( '@stdlib/array/int32' );
var Int8Array = require( '@stdlib/array/int8' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var floor = require( '@stdlib/math/base/special/floor' );
var fifo = require( '@stdlib/utils/fifo' );
var setBit = require( './set_bit.js' );
var clearBit = require( './clear_bit.js' );
var isSet = require( './is_set.js' );
var bitValue = require( './bit_value.js' );


// VARIABLES //

var NBITS = Int32Array.BYTES_PER_ELEMENT * 8; // 8 bits per byte


// MAIN //

/**
* Compact adjacency matrix constructor.
*
* @constructor
* @param {NonNegativeInteger} N - number of vertices
* @throws {TypeError} must provide a nonnegative integer
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*/
function CompactAdjacencyMatrix( N ) {
	if ( !( this instanceof CompactAdjacencyMatrix ) ) {
		return new CompactAdjacencyMatrix( N );
	}
	if ( !isNonNegativeInteger( N ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + N + '`.' );
	}
	this._N = N;
	this._buffer = new Int32Array( ceil( N*N/NBITS ) ); // square matrix
	return this;
}

/**
* Returns indices ("bucket" and bit offset) for an `(i,j)` vertex pair.
*
* @private
* @name _loc
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @param {Array} out - output array
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {Array} output array
*/
setReadOnly( CompactAdjacencyMatrix.prototype, '_loc', function loc( i, j, out ) {
	var bucket;
	var bit;
	var idx;

	// Compute a strided index for the desired bit:
	idx = ( i*this._N ) + j;

	// Compute the index of the buffer element (bucket) containing the bit:
	bucket = floor( idx / NBITS );

	// Compute the bit offset:
	bit = idx - ( bucket*NBITS );

	// Set the output values:
	out[ 0 ] = bucket;
	out[ 1 ] = bit;

	return out;
});

/**
* Adds a directed edge between two vertices.
*
* @name addEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'addEdge', function addEdge( i, j ) {
	var idx;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Resolve the `(i,j)` pair:
	idx = this._loc( i, j, [ 0, 0 ] );

	// Set the bit for the edge:
	this._buffer[ idx[0] ] = setBit( this._buffer[ idx[0] ], idx[1] );

	return this;
});

/**
* Returns the list of all edges.
*
* @name edges
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @returns {Array<NonNegativeIntegerArray>} list of edges
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var edges = adj.edges();
* // returns [ [ 0, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 3 ] ]
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'edges', function edges() {
	var edges;
	var idx;
	var i;
	var j;

	edges = [];
	idx = [ 0, 0 ];
	for ( i = 0; i < this._N; i++ ) {
		for ( j = 0; j < this._N; j++ ) {
			// Resolve the `(i,j)` pair:
			idx = this._loc( i, j, idx );

			// Check for an edge:
			if ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {
				edges.push( [ i, j ] );
			}
		}
	}
	return edges;
});

/**
* Checks whether a directed edge exists between two vertices.
*
* @name hasEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {boolean} boolean indicating if an edge exists
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* // ...
*
* var bool = adj.hasEdge( 0, 1 );
* // returns true
*
* bool = adj.hasEdge( 0, 2 );
* // returns true
*
* bool = adj.hasEdge( 1, 2 );
* // returns true
*
* bool = adj.hasEdge( 2, 3 );
* // returns true
*
* bool = adj.hasEdge( 1, 3 );
* // returns false
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'hasEdge', function hasEdge( i, j ) {
	var idx;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Resolve the `(i,j)` pair:
	idx = this._loc( i, j, [ 0, 0 ] );

	// Check for an edge:
	return isSet( this._buffer[ idx[0] ], idx[1] );
});

/**
* Returns the indegree of a vertex (i.e., number of edges ending at a vertex).
*
* @name inDegree
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} j - vertex
* @throws {TypeError} must provide a nonnegative integer
* @throws {RangeError} must not exceed matrix dimensions
* @returns {NonNegativeInteger} indegree
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var d = adj.inDegree( 2 );
* // returns 2
*
* d = adj.inDegree( 3 );
* // returns 1
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'inDegree', function inDegree( j ) {
	var deg;
	var idx;
	var i;
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Input argument cannot exceed matrix dimensions. Value: `' + j + '`.' );
	}
	// Iterate over the rows and add up the number of edges...
	deg = 0;
	idx = [ 0, 0 ];
	for ( i = 0; i < this._N; i++ ) {
		// Resolve the `(i,j)` pair:
		idx = this._loc( i, j, idx );

		// Check for an edge:
		deg += bitValue( this._buffer[ idx[0] ], idx[1] );
	}
	return deg;
});

/**
* Returns a list of vertices having edges ending at a specified vertex.
*
* @name inEdges
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} j - vertex
* @throws {TypeError} must provide a nonnegative integer
* @throws {RangeError} must not exceed matrix dimensions
* @returns {NonNegativeIntegerArray} list of vertices
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var e = adj.inEdges( 2 );
* // returns [ 0, 1 ]
*
* e = adj.inEdges( 3 );
* // returns [ 2 ]
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'inEdges', function inEdges( j ) {
	var edges;
	var idx;
	var i;
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Input argument cannot exceed matrix dimensions. Value: `' + j + '`.' );
	}
	// Iterate over the rows and retrieve edges...
	edges = [];
	idx = [ 0, 0 ];
	for ( i = 0; i < this._N; i++ ) {
		// Resolve the `(i,j)` pair:
		idx = this._loc( i, j, idx );

		// Check for an edge:
		if ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {
			edges.push( i );
		}
	}
	return edges;
});

/**
* Returns the outdegree of a vertex (i.e., number of edges starting from a vertex).
*
* @name outDegree
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - vertex
* @throws {TypeError} must provide a nonnegative integer
* @throws {RangeError} must not exceed matrix dimensions
* @returns {NonNegativeInteger} outdegree
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var d = adj.outDegree( 2 );
* // returns 1
*
* d = adj.outDegree( 0 );
* // returns 2
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'outDegree', function outDegree( i ) {
	var deg;
	var idx;
	var j;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. Input argument cannot exceed matrix dimensions. Value: `' + i + '`.' );
	}
	// Iterate over the columns and add up the number of edges...
	deg = 0;
	idx = [ 0, 0 ];
	for ( j = 0; j < this._N; j++ ) {
		// Resolve the `(i,j)` pair:
		idx = this._loc( i, j, idx );

		// Check for an edge:
		deg += bitValue( this._buffer[ idx[0] ], idx[1] );
	}
	return deg;
});

/**
* Returns a list of vertices having edges starting at a specified vertex.
*
* @name outEdges
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - vertex
* @throws {TypeError} must provide a nonnegative integer
* @throws {RangeError} must not exceed matrix dimensions
* @returns {NonNegativeIntegerArray} list of vertices
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var e = adj.outEdges( 2 );
* // returns [ 3 ]
*
* e = adj.outEdges( 0 );
* // returns [ 1, 2 ]
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'outEdges', function outEdges( i ) {
	var edges;
	var idx;
	var j;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. Input argument cannot exceed matrix dimensions. Value: `' + i + '`.' );
	}
	// Iterate over the rows and retrieve edges...
	edges = [];
	idx = [ 0, 0 ];
	for ( j = 0; j < this._N; j++ ) {
		// Resolve the `(i,j)` pair:
		idx = this._loc( i, j, idx );

		// Check for an edge:
		if ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {
			edges.push( j );
		}
	}
	return edges;
});

/**
* Removes a directed edge between two vertices.
*
* @name removeEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* // ...
*
* adj.removeEdge( 0, 1 );
* adj.removeEdge( 0, 2 );
* adj.removeEdge( 1, 2 );
* adj.removeEdge( 2, 3 );
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'removeEdge', function removeEdge( i, j ) {
	var idx;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Resolve the `(i,j)` pair:
	idx = this._loc( i, j, [ 0, 0 ] );

	// Clear the bit for the edge:
	this._buffer[ idx[0] ] = clearBit( this._buffer[ idx[0] ], idx[1] );

	return this;
});

/**
* Returns an adjacency list representation.
*
* @name toAdjacencyList
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @returns {Array<NonNegativeIntegerArray>} adjacency list representation
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var list = adj.toAdjacencyList();
* // returns [ [ 1, 2 ], [ 2 ], [ 3 ], [] ]
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'toAdjacencyList', function toAdjacencyList() {
	var list;
	var idx;
	var tmp;
	var i;
	var j;

	list = [];
	idx = [ 0, 0 ];
	for ( i = 0; i < this._N; i++ ) {
		tmp = [];
		for ( j = 0; j < this._N; j++ ) {
			// Resolve the `(i,j)` pair:
			idx = this._loc( i, j, idx );

			// Check for an edge:
			if ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {
				tmp.push( j );
			}
		}
		list.push( tmp );
	}
	return list;
});

/**
* Returns a topological ordering of the directed graph.
*
* ## Notes
*
* -   If a topological ordering cannot be achieved (e.g., due to the graph not being a directed acyclic graph (DAG)), the function returns `null`.
*
* @name toposort
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @returns {(NonNegativeIntegerArray|null)} topological ordering
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 1, 0 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 2, 3 );
*
* var order = adj.toposort();
* // returns [ 1, 0, 2, 3 ]
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'toposort', function toposort() {
	var visited;
	var degs;
	var buf;
	var out;
	var idx;
	var N;
	var s;
	var w;
	var i;
	var j;

	N = this._N;

	// Initialize an empty list that will contain the sorted vertices:
	out = [];

	// If the graph is empty, nothing to sort...
	if ( this._N === 0 ) {
		return out;
	}
	// Create a stack for handling the set of all vertices with no incoming edge:
	s = fifo();

	// Initialize an array for keeping track of "visited" (i.e., processed) vertices:
	visited = new Int8Array( N );

	// Find the list of "start vertices" (i.e., vertices which have no incoming edges):
	degs = [];
	for ( i = 0; i < N; i++ ) {
		degs.push( this.inDegree( i ) );
		if ( degs[ i ] === 0 ) {
			s.push( i );
			visited[ i ] = 1;
		}
	}
	// Check that at least one node has no incoming edges, which is required for a non-empty directed acyclic graph...
	if ( s.length === 0 ) {
		return null;
	}
	// Create a copy of the underlying data buffer, as we'll need to mutate the graph:
	buf = new Int32Array( this._buffer );

	// Process vertices using Kahn's algorithm...
	idx = [ 0, 0 ];
	while ( s.length > 0 ) {
		i = s.pop();
		out.push( i );
		for ( j = 0; j < N; j++ ) {
			// Check whether we've already processed the current vertex:
			if ( visited[ j ] ) {
				continue;
			}
			// Determine if an edge exists:
			idx = this._loc( i, j, idx );
			w = buf[ idx[0] ];
			if ( isSet( w, idx[1] ) ) {
				// Remove the edge:
				buf[ idx[0] ] = clearBit( w, idx[1] );

				// Decrement the number of incoming edges for the current vertex:
				degs[ j ] -= 1;

				// Check whether the current vertex has any incoming edges:
				if ( degs[ j ] === 0 ) {
					// We have a new vertex which we can push onto the stack:
					s.push( j );
					visited[ j ] = 1;
				}
			}
		}
	}
	// Check whether the graph still has edges (and thus has at least one cycle):
	for ( i = 0; i < buf.length; i++ ) {
		if ( buf[ i ] > 0 ) {
			return null;
		}
	}
	return out;
});


// EXPORTS //

module.exports = CompactAdjacencyMatrix;
