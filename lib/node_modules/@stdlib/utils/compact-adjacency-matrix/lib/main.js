/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var Int32Array = require( '@stdlib/array/int32' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var floor = require( '@stdlib/math/base/special/floor' );
var setBit = require( './set_bit.js' );
var clearBit = require( './clear_bit.js' );
var isSet = require( './is_set.js' );
var bitValue = require( './bit_value.js' );


// VARIABLES //

var NBITS = 32;


// MAIN //

/**
* Compact adjacency matrix constructor.
*
* @constructor
* @param {NonNegativeInteger} N - number of vertices
* @throws {TypeError} must provide a nonnegative integer
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*/
function CompactAdjacencyMatrix( N ) {
	if ( !( this instanceof CompactAdjacencyMatrix ) ) {
		return new CompactAdjacencyMatrix( N );
	}
	if ( !isNonNegativeInteger( N ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + N + '`.' );
	}
	this._N = N;
	this._buffer = new Int32Array( ceil( N*N/NBITS ) ); // square matrix
	return this;
}

/**
* Returns indices ("bucket" and bit offset) for an `(i,j)` vertex pair.
*
* @private
* @name _loc
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {NonNegativeIntegerArray} indices
*/
setReadOnly( CompactAdjacencyMatrix.prototype, '_loc', function loc( i, j ) {
	var bucket;
	var bit;
	var idx;

	// Compute a strided index for the desired bit:
	idx = ( i*this._N ) + j;

	// Compute the index of the buffer element (bucket) containing the bit:
	bucket = floor( idx / NBITS );

	// Compute the bit offset:
	bit = idx - ( bucket*NBITS );

	return [ bucket, bit ];
});

/**
* Adds a directed edge between two vertices.
*
* @name addEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'addEdge', function addEdge( i, j ) {
	var idx;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Resolve the `(i,j)` pair:
	idx = this._loc( i, j );

	// Set the bit for the edge:
	this._buffer[ idx[0] ] = setBit( this._buffer[ idx[0] ], idx[1] );

	return this;
});

/**
* Checks whether a directed edge exists between two vertices.
*
* @name hasEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {boolean} boolean indicating if an edge exists
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* // ...
*
* var bool = adj.hasEdge( 0, 1 );
* // returns true
*
* bool = adj.hasEdge( 0, 2 );
* // returns true
*
* bool = adj.hasEdge( 1, 2 );
* // returns true
*
* bool = adj.hasEdge( 2, 3 );
* // returns true
*
* bool = adj.hasEdge( 1, 3 );
* // returns false
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'hasEdge', function hasEdge( i, j ) {
	var idx;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Resolve the `(i,j)` pair:
	idx = this._loc( i, j );

	// Check for an edge:
	return isSet( this._buffer[ idx[0] ], idx[1] );
});

/**
* Returns the indegree of a vertix (i.e., number of edges ending at a vertex).
*
* @name inDegree
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} j - vertex
* @throws {TypeError} must provide a nonnegative integer
* @throws {RangeError} must not exceed matrix dimensions
* @returns {NonNegativeInteger} indegree
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var d = adj.inDegree( 2 );
* // returns 2
*
* d = adj.inDegree( 3 );
* // returns 1
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'inDegree', function inDegree( j ) {
	var deg;
	var idx;
	var i;
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Input argument cannot exceed matrix dimensions. Value: `' + j + '`.' );
	}
	// Iterate over the rows and add up the number of edges...
	deg = 0;
	for ( i = 0; i < this._N; i++ ) {
		// Resolve the `(i,j)` pair:
		idx = this._loc( i, j );

		// Check for an edge:
		deg += bitValue( this._buffer[ idx[0] ], idx[1] );
	}
	return deg;
});

/**
* Returns the outdegree of a vertix (i.e., number of edges starting from a vertex).
*
* @name outDegree
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - vertex
* @throws {TypeError} must provide a nonnegative integer
* @throws {RangeError} must not exceed matrix dimensions
* @returns {NonNegativeInteger} indegree
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* var d = adj.outDegree( 2 );
* // returns 1
*
* d = adj.outDegree( 0 );
* // returns 2
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'outDegree', function outDegree( i ) {
	var deg;
	var idx;
	var j;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. Input argument cannot exceed matrix dimensions. Value: `' + i + '`.' );
	}
	// Iterate over the rows and add up the number of edges...
	deg = 0;
	for ( j = 0; j < this._N; j++ ) {
		// Resolve the `(i,j)` pair:
		idx = this._loc( i, j );

		// Check for an edge:
		deg += bitValue( this._buffer[ idx[0] ], idx[1] );
	}
	return deg;
});

/**
* Removes a directed edge between two vertices.
*
* @name addEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* // ...
*
* adj.removeEdge( 0, 1 );
* adj.removeEdge( 0, 2 );
* adj.removeEdge( 1, 2 );
* adj.removeEdge( 2, 3 );
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'removeEdge', function removeEdge( i, j ) {
	var idx;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Resolve the `(i,j)` pair:
	idx = this._loc( i, j );

	// Clear the bit for the edge:
	this._buffer[ idx[0] ] = clearBit( this._buffer[ idx[0] ], idx[1] );

	return this;
});

// TODO: add methods outDegree( i ), inEdges( i ), outEdges( i ), toposort()


// EXPORTS //

module.exports = CompactAdjacencyMatrix;
