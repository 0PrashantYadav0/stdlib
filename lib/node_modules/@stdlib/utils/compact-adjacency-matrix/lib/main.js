/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var Int32Array = require( '@stdlib/array/int32' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var floor = require( '@stdlib/math/base/special/floor' );


// VARIABLES //

var NBITS = 32;


// FUNCTIONS //

/**
* Sets a bit.
*
* @private
* @param {integer32} value - integer value
* @param {NonNegativeInteger} i - bit to set
* @returns {integer32} updated integer value
*/
function setBit( value, i ) {
	value |= 1 << i;
	return value;
}

/**
* Clears a bit.
*
* @private
* @param {integer32} value - integer value
* @param {NonNegativeInteger} i - bit to clear
* @returns {integer32} updated integer value
*/
function clearBit( value, i ) {
	value &= ~( 1 << i );
	return value;
}

/**
* Checks whether a bit is set.
*
* @private
* @param {integer32} value - integer value
* @param {NonNegativeInteger} i - bit to check
* @returns {boolean} boolean indicating whether a bit is set
*/
function isSet( value, i ) {
	return Boolean( ( value >> i ) & 1 );
}


// MAIN //

/**
* Compact adjacency matrix constructor.
*
* @constructor
* @param {NonNegativeInteger} N - number of vertices
* @throws {TypeError} must provide a nonnegative integer
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*/
function CompactAdjacencyMatrix( N ) {
	if ( !( this instanceof CompactAdjacencyMatrix ) ) {
		return new CompactAdjacencyMatrix( N );
	}
	if ( !isNonNegativeInteger( N ) ) {
		throw new TypeError( 'invalid argument. Must provide a nonnegative integer. Value: `' + N + '`.' );
	}
	this._N = N;
	this._M = ceil( N/NBITS );
	this._buffer = new Int32Array( this._M*this._M ); // square matrix
	return this;
}

/**
* Returns the index (bucket) containing the edge between a starting vertex and an ending vertex.
*
* @private
* @name _getIndex
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {NonNegativeInteger} index
*/
setReadOnly( CompactAdjacencyMatrix.prototype, '_getIndex', function getIndex( i, j ) {
	var row;
	var col;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( 'invalid argument. First argument must be a nonnegative integer. Value: `' + i + '`.' );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a nonnegative integer. Value: `' + j + '`.' );
	}
	if ( i >= this._N ) {
		throw new RangeError( 'invalid argument. First argument exceeds matrix dimensions. Value: `' + i + '`.' );
	}
	if ( j >= this._N ) {
		throw new RangeError( 'invalid argument. Second argument exceeds matrix dimensions. Value: `' + j + '`.' );
	}
	// Compute the row in the adjacency matrix:
	row = floor( i/NBITS );

	// Compute the column in the adjacency matrix:
	col = floor( j/NBITS );

	// Determine the index of the element containing the edge:
	return ( row*this._M ) + col;
});

/**
* Adds a directed edge between two vertices.
*
* @name addEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'addEdge', function addEdge( i, j ) {
	var bit;
	var idx;

	// Determine the index of the element containing the edge:
	idx = this._getIndex( i, j );

	// Determine the bit we need to set in order to add an edge:
	bit = j % NBITS;

	// Set the bit for the edge:
	this._buffer[ idx ] = setBit( this._buffer[ idx ], bit );

	return this;
});

/**
* Checks whether a directed edge exists between two vertices.
*
* @name hasEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {boolean} boolean indicating if an edge exists
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* // ...
*
* var bool = adj.hasEdge( 0, 1 );
* // returns true
*
* bool = adj.hasEdge( 0, 2 );
* // returns true
*
* bool = adj.hasEdge( 1, 2 );
* // returns true
*
* bool = adj.hasEdge( 2, 3 );
* // returns true
*
* bool = adj.hasEdge( 1, 3 );
* // returns false
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'hasEdge', function hasEdge( i, j ) {
	var bit;
	var idx;

	// Determine the index of the element containing the edge:
	idx = this._getIndex( i, j );

	// Determine the bit we need to test in order to check for an edge:
	bit = j % NBITS;

	// Check the bit for an edge:
	return isSet( this._buffer[ idx ], bit );
});

/**
* Removes a directed edge between two vertices.
*
* @name addEdge
* @type Function
* @memberof CompactAdjacencyMatrix.prototype
* @param {NonNegativeInteger} i - starting vertex
* @param {NonNegativeInteger} j - ending vertex
* @throws {TypeError} first argument must be a non-negative integer
* @throws {TypeError} second argument must be a non-negative integer
* @throws {RangeError} first argument must not exceed matrix dimensions
* @throws {RangeError} second argument must not exceed matrix dimensions
* @returns {CompactAdjacencyMatrix} adjacency matrix instance
*
* @example
* var adj = new CompactAdjacencyMatrix( 4 );
* // returns <CompactAdjacencyMatrix>
*
* adj.addEdge( 0, 1 );
* adj.addEdge( 0, 2 );
* adj.addEdge( 1, 2 );
* adj.addEdge( 2, 3 );
*
* // ...
*
* adj.removeEdge( 0, 1 );
* adj.removeEdge( 0, 2 );
* adj.removeEdge( 1, 2 );
* adj.removeEdge( 2, 3 );
*/
setReadOnly( CompactAdjacencyMatrix.prototype, 'removeEdge', function removeEdge( i, j ) {
	var bit;
	var idx;

	// Determine the index of the element containing the edge:
	idx = this._getIndex( i, j );

	// Determine the bit we need to clear in order to remove an edge:
	bit = j % NBITS;

	// Clear the bit for the edge:
	this._buffer[ idx ] = clearBit( this._buffer[ idx ], bit );

	return this;
});

// TODO: add methods inDegree( i ), outDegree( i ), inEdges( i ), outEdges( i ), toposort()


// EXPORTS //

module.exports = CompactAdjacencyMatrix;
