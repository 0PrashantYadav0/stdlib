'use strict';

/**
* Invert an object, such that keys become values and values become keys, according to a transform function.
*
* @module @stdlib/utils/object-inverse-by
*
* @example
* var invertBy = require( '@stdlib/utils/object-inverse-by' );
*
* function transform( key, value ) {
*     return key + value;
* }
* var obj = {
*     'a': 'beep',
*     'b': 'boop'
* };
* var out = invertBy( obj, transform );
* // returns { 'abeep': 'a', 'bboop': 'b' }
*
* @example
* var invertBy = require( '@stdlib/utils/object-inverse-by' );
*
* function transform( key, value ) {
*     return value;
* }
* var obj = {
*     'a': 'beep',
*     'b': 'beep'
* };
* var out = invertBy( obj, transform );
* // returns { 'beep': [ 'a', 'b' ] }
*
* @example
* var invertBy = require( '@stdlib/utils/object-inverse-by' );
*
* function transform( key, value ) {
*     return value;
* }
*
* var obj = {};
* obj.a = 'beep';
* obj.b = 'boop';
* obj.c = 'beep'; // inserted after `a`
*
* var opts = {
*     'duplicates': false
* };
* var out = invertBy( obj, opts, transform );
* // returns { 'beep': 'c', 'boop': 'b' }
*/

// MODULES //

var invertBy = require( './object_inverse_by.js' );


// EXPORTS //

module.exports = invertBy;
