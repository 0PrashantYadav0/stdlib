'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;


// MAIN //

/**
* Invokes a function `n` times and returns an array of accumulated function return values.
*
* @param {Function} fcn - function to invoke
* @param {NonNegativeInteger} n - number of function invocations
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be a function
* @throws {TypeError} second argument must be a nonnegative integer
* @returns {Array} accumulated results
*
* @example
* function fcn( i ) {
*     return i;
* }
*
* var arr = mapFun( fcn, 5 );
* // returns [ 0, 1, 2, 3, 4 ]
*/
function mapFun( fcn, n, thisArg ) {
	var out;
	var i;
	if ( !isFunction( fcn ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a function. Value: `'+fcn+'`.' );
	}
	if ( !isNonNegativeInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `'+n+'`.' );
	}
	// Note: we explicitly do not preallocate in order to ensure "fast" elements for large output arrays (i.e., >64K elements).
	out = [];
	for ( i = 0; i < n; i++ ) {
		out.push( fcn.call( thisArg, i ) );
	}
	return out;
} // end FUNCTION mapFun()


// EXPORTS //

module.exports = mapFun;
