'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/types/array/float32' );
var Float64Array = require( '@stdlib/types/array/float64' );
var Int8Array = require( '@stdlib/types/array/int8' );
var Int16Array = require( '@stdlib/types/array/int16' );
var Int32Array = require( '@stdlib/types/array/int32' );
var Uint8Array = require( '@stdlib/types/array/uint8' );
var Uint8ClampedArray = require( '@stdlib/types/array/uint8c' );
var Uint16Array = require( '@stdlib/types/array/uint16' );
var Uint32Array = require( '@stdlib/types/array/uint32' );
var ArrayBuffer = require( '@stdlib/types/array/buffer' );
var isArrayBuffer = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isArrayBuffer, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided an ArrayBuffer', function test( t ) {
	t.strictEqual( isArrayBuffer( new ArrayBuffer( 10 ) ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided an ArrayBuffer', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function noop() {},
		new Array( 10 ),
		new Float64Array( 10 ),
		new Float32Array( 10 ),
		new Uint32Array( 10 ),
		new Int32Array( 10 ),
		new Uint16Array( 10 ),
		new Int16Array( 10 ),
		new Uint8Array( 10 ),
		new Int8Array( 10 ),
		new Uint8ClampedArray( 10 )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isArrayBuffer( values[i] ), false, 'returns false when provided ' + values[i] );
	}
	t.end();
});
