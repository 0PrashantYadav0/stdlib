'use strict';

// MODULES //

var tape = require( 'tape' );
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();
var isPrimitive = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isPrimitive, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a primitive', function test( t ) {
	var values;
	var i;

	values = [
		'',
		0,
		false,
		undefined,
		null
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isPrimitive( values[i] ), true, 'returns true' );
	}
	t.end();
});

tape( 'the function returns `true` if provided a `Symbol`', opts, function test( t ) {
	t.equal( isPrimitive( Symbol( 'symbol' ) ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided a primitive', function test( t ) {
	var values;
	var i;

	values = [
		new Boolean(),
		new String(),
		new Array(), // eslint-disable-line no-array-constructor
		new Object(), // eslint-disable-line no-new-object
		new Number(),
		function noop() {},
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isPrimitive( values[i] ), false, 'returns false for value: '+values[i] );
	}
	t.end();
});
