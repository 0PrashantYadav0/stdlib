'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var Float64Array = require( '@stdlib/array/float64' );
var Int8Array = require( '@stdlib/array/int8' );
var Int16Array = require( '@stdlib/array/int16' );
var Int32Array = require( '@stdlib/array/int32' );
var Uint8Array = require( '@stdlib/array/uint8' );
var Uint8ClampedArray = require( '@stdlib/array/uint8c' );
var Uint16Array = require( '@stdlib/array/uint16' );
var Uint32Array = require( '@stdlib/array/uint32' );
var ArrayBuffer = require( '@stdlib/array/buffer' );
var SharedArrayBuffer = require( '@stdlib/array/shared-buffer' );
var isSharedArrayBuffer = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isSharedArrayBuffer, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a SharedArrayBuffer', function test( t ) {
	try {
		t.strictEqual( isSharedArrayBuffer( new SharedArrayBuffer( 10 ) ), true, 'returns true' );
	} catch ( err ) { // eslint-disable-line no-unused-vars
		t.pass( 'environment does not support SharedArrayBuffer' );
	}
	t.end();
});

tape( 'the function returns `false` if not provided a SharedArrayBuffer', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		void 0,
		[],
		{},
		function noop() {},
		new Array( 10 ),
		new Float64Array( 10 ),
		new Float32Array( 10 ),
		new Uint32Array( 10 ),
		new Int32Array( 10 ),
		new Uint16Array( 10 ),
		new Int16Array( 10 ),
		new Uint8Array( 10 ),
		new Int8Array( 10 ),
		new Uint8ClampedArray( 10 ),
		new ArrayBuffer( 10 )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isSharedArrayBuffer( values[i] ), false, 'returns false when provided ' + values[i] );
	}
	t.end();
});
