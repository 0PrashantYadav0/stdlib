'use strict';

/**
* Test if a value is an array-like object containing only symbols.
*
* @module @stdlib/assert/is-symbol-array
*
* @example
* var isSymbolArray = require( '@stdlib/assert/is-symbol-array' );
*
* var bool = isSymbolArray( [ Symbol( 'abc' ), Symbol( 'def' ) ] );
* // returns true
*
* bool = isSymbolArray( [ Symbol( 'abc' ), 'def' ] );
* // returns false
*
* @example
* // Use interface to check for primitives...
* var isSymbolArray = require( '@stdlib/assert/is-symbol-array' ).primitives;
*
* var bool = isSymbolArray( [ Symbol( 'abc' ), Symbol( 'def' ) ] );
* // returns true
*
* bool = isSymbolArray( [ Symbol( 'abc' ), Object( Symbol( 'def' ) ) ] );
* // returns false
*
* @example
* // Use interface to check for objects...
* var isSymbolArray = require( '@stdlib/assert/is-symbol-array' ).objects;
*
* var bool = isSymbolArray( [ Object( Symbol( 'abc' ) ), Object( Symbol( 'def' ) ) ] );
* // returns true
*
* bool = isSymbolArray( [ Symbol( 'abc' ), Symbol( 'def' ) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-like-function' );
var isSymbol = require( '@stdlib/assert/is-symbol' );


// MAIN //

var isSymbolArray = arrayfun.create( isSymbol );
setReadOnly( isSymbolArray, 'primitives', arrayfun.create( isSymbol.isPrimitive ) );
setReadOnly( isSymbolArray, 'objects', arrayfun.create( isSymbol.isObject ) );


// EXPORTS //

module.exports = isSymbolArray;
