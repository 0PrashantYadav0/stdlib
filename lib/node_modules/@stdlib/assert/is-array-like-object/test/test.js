/* eslint-disable object-curly-newline, no-unused-vars */
'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var UINT32_MAX = require( '@stdlib/math/constants/uint32-max' );
var isArrayLikeObject = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isArrayLikeObject, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		[],
		{ 'length': 10 },
		new Float64Array( 10 ),
		arguments
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isArrayLikeObject( values[i] ), true, 'returns true when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `false` if provided an array-like object whose length exceeds the maximum array length', function test( t ) {
	var o = { 'length': UINT32_MAX+1 };
	t.strictEqual( isArrayLikeObject( o ), false, 'returns false' );
	t.end();
});

tape( 'the function returns `false` if provided an array-like object whose length property is not an integer', function test( t ) {
	var o = { 'length': 3.14 };
	t.strictEqual( isArrayLikeObject( o ), false, 'returns false' );
	t.end();
});

tape( 'the function returns `false` if provided an array-like object whose length property is a negative integer', function test( t ) {
	var o = { 'length': -1 };
	t.strictEqual( isArrayLikeObject( o ), false, 'returns false' );
	t.end();
});

tape( 'the function returns `false` if not provided an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		5,
		null,
		undefined,
		NaN,
		true,
		false,
		{},
		function boop( a, b, c ) {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isArrayLikeObject( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
