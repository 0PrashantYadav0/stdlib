'use strict';

/**
* Test if a value is an array-like object containing only finite numbers.
*
* @module @stdlib/assert/is-finite-array
*
* @example
* var isFiniteArray = require( '@stdlib/assert/is-finite-array' );
*
* var bool = isFiniteArray( [ -3.0, new Number(0.0), 2.0 ] );
* // returns true
*
* bool = isFiniteArray( [ -3.0, 1.0/0.0 ] );
* // returns false
*
* @example
* var isFiniteArray = require( '@stdlib/assert/is-finite-array' ).primitives;
*
* var bool = isFiniteArray( [ -1.0, 10.0 ] );
* // returns true
*
* bool = isFiniteArray( [ -1.5, 0.0, 5.0 ] );
* // returns true
*
* bool = isFiniteArray( [ -3.0, new Number(-1.0) ] );
* // returns false
*
* @example
* var isFiniteArray = require( '@stdlib/assert/is-finite-array' ).objects;
*
* var bool = isFiniteArray( [ new Number(1.0), new Number(3.0) ] );
* // returns true
*
* bool = isFiniteArray( [ -1.0, 0.0, 3.0 ] );
* // returns false
*
* bool = isFiniteArray( [ 3.0, new Number(-1.0) ] );
* // returns false
*/

// MODULES //

var isFinite = require( '@stdlib/assert/is-finite' ); // eslint-disable-line no-redeclare
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-like-function' );


// MAIN //

var isFiniteArray = arrayfun( isFinite );
setReadOnly( isFiniteArray, 'primitives', arrayfun( isFinite.isPrimitive ) );
setReadOnly( isFiniteArray, 'objects', arrayfun( isFinite.isObject ) );


// EXPORTS //

module.exports = isFiniteArray;
