'use strict';

// MODULES //

var tape = require( 'tape' );
var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();
var isnan = require( './../lib/primitive.js' );


// VARIABLES //

var opts = {
	'skip': !hasSymbols
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isnan, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a `NaN` primitive number', function test( t ) {
	t.equal( isnan( NaN ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if provided a number object, even if the value of the object is `NaN`', function test( t ) {
	t.equal( isnan( new Number( 5 ) ), false, 'returns false' );
	t.equal( isnan( new Number( NaN ) ), false, 'returns false' );
	t.end();
});

tape( 'function returns `false` if not provided `NaN`', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		3.14,
		-1.0,
		null,
		true,
		undefined,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isnan( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `false` when provided a symbol (symbols are unique)', opts, function test( t ) {
	var s = Symbol( 'foo' );
	t.equal( isnan( s ), false, 'returns false' );
	t.end();
});
