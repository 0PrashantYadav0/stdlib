'use strict';

// MODULES //

var isTypedArray = require( '@stdlib/assert/is-typed-array' );
var isArray = require( '@stdlib/assert/is-array' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var absdiff = require( '@stdlib/math/base/utils/absolute-difference' );
var FLOAT64_SQRT_EPS = require( '@stdlib/constants/math/float64-sqrt-eps' );


// MAIN //

/**
* Tests if a value is an array of probabilities that sum to one.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is a probability array
*
* @example
* var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] );
* // returns true
*
* @example
* var bool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) );
* // returns true
*
* @example
* var bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] );
* // returns false
*
* @example
* var bool = isUnityProbabilityArray( [ 3.14, 0.0 ] );
* // returns false
*/
function isUnityProbabilityArray( v ) {
	var sum;
	var i;
	if ( isTypedArray( v ) ) {
		sum = 0.0;
		for ( i = 0; i < v.length; i++ ) {
			if (
				v[ i ] > 1.0 ||
				v[ i ] < 0.0
			) {
				return false;
			}
			sum += v[ i ];
		}
		return ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS );
	}
	if ( isArray( v ) ) {
		sum = 0.0;
		for ( i = 0; i < v.length; i++ ) {
			if (
				!isNumber( v[ i ] ) ||
				v[ i ] > 1.0 ||
				v[ i ] < 0.0
			) {
				return false;
			}
			sum += v[ i ];
		}
		return ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS );
	}
	return false;
}


// EXPORTS //

module.exports = isUnityProbabilityArray;
