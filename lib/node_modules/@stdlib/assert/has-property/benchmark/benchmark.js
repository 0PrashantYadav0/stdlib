'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var hasProp = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var bool;
	var obj;
	var key;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		key = String.fromCharCode( 97+(i%26) );
		obj = {};
		obj[ key ] = i;
		bool = hasProp( obj, key );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( !isBoolean( bool ) ) {
		b.fail( 'should return a boolean' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::built-in', function benchmark( b ) {
	var bool;
	var obj;
	var key;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		key = String.fromCharCode( 97+(i%26) );
		obj = {};
		obj[ key ] = i;
		bool = ( key in obj );
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( !isBoolean( bool ) ) {
		b.fail( 'should return a boolean' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
