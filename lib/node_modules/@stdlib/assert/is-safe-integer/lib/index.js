'use strict';

/**
* Test if a value is a safe integer.
*
* @module @stdlib/assert/is-safe-integer
*
* @example
* var isSafeInteger = require( '@stdlib/assert/is-safe-integer' );
*
* var bool = isSafeInteger( 5.0 );
* // returns true
*
* bool = isSafeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isSafeInteger( 2.0e200 );
* // returns false
*
* bool = isSafeInteger( -3.14 );
* // returns false
*
* bool = isSafeInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isSafeInteger = require( '@stdlib/assert/is-safe-integer' ).isPrimitive;
*
* var bool = isSafeInteger( -3.0 );
* // returns true
*
* bool = isSafeInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isSafeInteger = require( '@stdlib/assert/is-safe-integer' ).isObject;
*
* var bool = isSafeInteger.isObject( 3.0 );
* // returns false
*
* bool = isSafeInteger.isObject( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isSafeInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isSafeInteger, 'isPrimitive', isPrimitive );
setReadOnly( isSafeInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isSafeInteger;
