'use strict';

/**
* Test if a value is an array-like object containing only safe integers.
*
* @module @stdlib/assert/is-safe-integer-array
*
* @example
* var isSafeIntegerArray = require( '@stdlib/assert/is-safe-integer-array' );
*
* var bool = isSafeIntegerArray( [ -3.0, new Number(0.0), 2.0 ] );
* // returns true
*
* bool = isSafeIntegerArray( [ -3.0, '3.0' ] );
* // returns false
*
* @example
* // Use interface to check for primitives...
* var isSafeIntegerArray = require( '@stdlib/assert/is-safe-integer-array' ).primitives;
*
* var bool = isSafeIntegerArray( [ -1.0, 10.0 ] );
* // returns true
*
* bool = isSafeIntegerArray( [ -1.0, 0.0, 5.0 ] );
* // returns true
*
* bool = isSafeIntegerArray( [ -3.0, new Number(-1.0) ] );
* // returns false
*
* @example
* // Use interface to check for objects...
* var isSafeIntegerArray = require( '@stdlib/assert/is-safe-integer-array' ).objects;
*
* var bool = isSafeIntegerArray( [ new Number(1.0), new Number(3.0) ] );
* // returns true
*
* bool = isSafeIntegerArray( [ -1.0, 0.0, 3.0 ] );
* // returns false
*
* bool = isSafeIntegerArray( [ 3.0, new Number(-1.0) ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-like-function' );
var isSafeInteger = require( '@stdlib/assert/is-safe-integer' );


// MAIN //

var isSafeIntegerArray = arrayfun.create( isSafeInteger );
setReadOnly( isSafeIntegerArray, 'primitives', arrayfun.create( isSafeInteger.isPrimitive ) );
setReadOnly( isSafeIntegerArray, 'objects', arrayfun.create( isSafeInteger.isObject ) );


// EXPORTS //

module.exports = isSafeIntegerArray;
