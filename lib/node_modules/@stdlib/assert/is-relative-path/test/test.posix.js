'use strict';

// MODULES //

var tape = require( 'tape' );
var isRelativePath = require( './../lib/posix.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isRelativePath, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `false` if not provided a string', function test( t ) {
	var values;
	var bool;
	var i;

	values = [
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		bool = isRelativePath( values[ i ] );
		t.equal( bool, false, 'returns `false` when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `true` if provided an empty string', function test( t ) {
	var bool = isRelativePath( '' );
	t.strictEqual( bool, true, 'returns true' );
	t.end();
});

tape( 'the function returns `true` if provided a POSIX relative path', function test( t ) {
	var values;
	var bool;
	var i;

	values = [
		'.',
		'foo',
		'foo/bar',
		'./foo/bar',
		'..',
		'../foo/bar',
		'foo/../bar'
	];
	for ( i = 0; i < values.length; i++ ) {
		bool = isRelativePath( values[ i ] );
		t.strictEqual( bool, true, 'returns true when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `false` if provided an absolute POSIX path', function test( t ) {
	var values;
	var bool;
	var i;

	values = [
		'/foo/bar/baz',
		'/foo/..',
		'/beep boop',
		'/'
	];
	for ( i = 0; i < values.length; i++ ) {
		bool = isRelativePath( values[ i ] );
		t.strictEqual( bool, false, 'returns false when provided '+values[i] );
	}
	t.end();
});
