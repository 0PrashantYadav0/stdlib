#!/usr/bin/env node
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/process/read-stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var isRelativePath = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var cli;
	var fun;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided options:
	flags = cli.flags();
	if ( flags.platform === 'win32' ) {
		fun = isRelativePath.win32;
	} else if ( flags.platform === 'posix' ) {
		fun = isRelativePath.posix;
	} else {
		fun = isRelativePath;
	}
	// Check if we are receiving data from `stdin`...
	if ( !process.stdin.isTTY ) {
		return stdin( onRead );
	}
	console.log( fun( args[ 0 ] ) ); // eslint-disable-line no-console

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		/* eslint-disable no-console */
		var lines;
		var i;
		if ( error ) {
			process.exitCode = 1;
			return console.error( 'Error: %s', error.message );
		}
		lines = data.toString().split( RE_EOL );
		for ( i = 0; i < lines.length; i++ ) {
			console.log( fun( lines[ i ] ) );
		}
	}
}

main();
