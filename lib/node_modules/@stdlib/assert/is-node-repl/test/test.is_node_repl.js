'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isNodeREPL = require( './../lib/is_node_repl.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isNodeREPL, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `false` if the runtime environment is not Node.js', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': false
	});

	t.strictEqual( isNodeREPL(), false, 'returns false' );
	t.end();
});

tape( 'the function returns `false` if a parent module is not the Node.js `repl` builtin', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': true,
		'./mod.js': mock()
	});

	t.strictEqual( isNodeREPL(), false, 'returns false' );
	t.end();

	function mock() {
		return {
			'id': 'beep',
			'parent': void 0
		};
	}
});

tape( 'the function returns `false` if a parent module is not the Node.js `repl` builtin', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': true,
		'./mod.js': mock()
	});

	t.strictEqual( isNodeREPL(), false, 'returns false' );
	t.end();

	function mock() {
		return {
			'id': 'beep',
			'parent': {
				'id': 'boop',
				'parent': {
					'id': 'foo',
					'parent': {
						'id': 'bar',
						'parent': {
							'id': '.',
							'parent': void 0
						}
					}
				}
			}
		};
	}
});

tape( 'the function returns `true` if a parent module is the Node.js `repl` builtin (Node versions >=4; root)', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': true,
		'./mod.js': mock()
	});

	t.strictEqual( isNodeREPL(), true, 'returns true' );
	t.end();

	function mock() {
		return {
			'id': 'beep',
			'parent': {
				'id': 'boop',
				'parent': {
					'id': 'foo',
					'parent': {
						'id': 'bar',
						'parent': {
							'id': '<repl>',
							'parent': void 0
						}
					}
				}
			}
		};
	}
});

tape( 'the function returns `true` if a parent module is the Node.js `repl` builtin (Node versions <4; root)', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': true,
		'./mod.js': mock()
	});

	t.strictEqual( isNodeREPL(), true, 'returns true' );
	t.end();

	function mock() {
		return {
			'id': 'beep',
			'parent': {
				'id': 'boop',
				'parent': {
					'id': 'foo',
					'parent': {
						'id': 'bar',
						'parent': {
							'id': 'repl',
							'parent': void 0
						}
					}
				}
			}
		};
	}
});

tape( 'the function returns `true` if a parent module is the Node.js `repl` builtin (Node versions >=4; non-root)', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': true,
		'./mod.js': mock()
	});

	t.strictEqual( isNodeREPL(), true, 'returns true' );
	t.end();

	function mock() {
		return {
			'id': 'beep',
			'parent': {
				'id': 'boop',
				'parent': {
					'id': '<repl>',
					'parent': {
						'id': 'bar',
						'parent': {
							'id': 'foo',
							'parent': void 0
						}
					}
				}
			}
		};
	}
});

tape( 'the function returns `true` if a parent module is the Node.js `repl` builtin (Node versions <4; non-root)', function test( t ) {
	var isNodeREPL = proxyquire( './../lib/is_node_repl.js', {
		'@stdlib/assert/is-node': true,
		'./mod.js': mock()
	});

	t.strictEqual( isNodeREPL(), true, 'returns true' );
	t.end();

	function mock() {
		return {
			'id': 'beep',
			'parent': {
				'id': 'boop',
				'parent': {
					'id': 'repl',
					'parent': {
						'id': 'bar',
						'parent': {
							'id': 'foo',
							'parent': void 0
						}
					}
				}
			}
		};
	}
});

