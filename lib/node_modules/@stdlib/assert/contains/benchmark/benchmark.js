'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var fromCodePoint = require( '@stdlib/string/from-code-point' );
var pkg = require( './../package.json' ).name;
var contains = require( './../lib' );


// MAIN //

bench( pkg+'::string', function benchmark( b ) {
	var bool;
	var str;
	var i;
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = 'abcdefghijklmnopqrstuvwxyz'+fromCodePoint( i%126 );
		bool = contains( str, 'z' );
		if ( bool === false ) {
			b.fail( 'should not return false' );
		}
	}
	b.toc();
	if ( bool === false ) {
		b.fail( 'should not return false' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::array', function benchmark( b ) {
	var bool;
	var arr;
	var i;

	arr = new Array( 10 );
	for ( i = 0; i < arr.length; i++ ) {
		arr[ i ] = i;
	}
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		arr[ 0 ] = randu();
		bool = contains( arr, 9 );
		if ( bool === false ) {
			b.fail( 'should not return false' );
		}
	}
	b.toc();
	if ( bool === false ) {
		b.fail( 'should not return false' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
