'use strict';

var inherit = require( '@stdlib/utils/inherit' );
var hasPrototype = require( './../lib' );

function A() {
	return this;
}

function B() {
	return this;
}
inherit( B, A );

function C() {
	return this;
}
inherit( C, B );

function D() {
	return this;
}
inherit( D, C );

var a = new A();
var b = new B();
var c = new C();
var d = new D();

var bool = hasPrototype( d, C.prototype );
console.log( 'd --> ... --> C? %s.', bool );
// => 'd --> ... --> C? true.'

bool = hasPrototype( d, B.prototype );
console.log( 'd --> ... --> B? %s.', bool );
// => 'd --> ... --> B? true.'

bool = hasPrototype( d, A.prototype );
console.log( 'd --> ... --> A? %s.', bool );
// => 'd --> ... --> A? true.'

bool = hasPrototype( c, B.prototype );
console.log( 'c --> ... --> B? %s.', bool );
// => 'c --> ... --> B? true.'

bool = hasPrototype( c, A.prototype );
console.log( 'c --> ... --> A? %s.', bool );
// => 'c --> ... --> A? true.'

bool = hasPrototype( c, D.prototype );
console.log( 'c --> ... --> D? %s.', bool );
// => 'c --> ... --> D? false.'

bool = hasPrototype( b, A.prototype );
console.log( 'b --> ... --> A? %s.', bool );
// => 'b --> ... --> A? true.'

bool = hasPrototype( b, C.prototype );
console.log( 'b --> ... --> C? %s.', bool );
// => 'b --> ... --> C? false.'

bool = hasPrototype( b, D.prototype );
console.log( 'b --> ... --> D? %s.', bool );
// => 'b --> ... --> D? false.'

bool = hasPrototype( a, B.prototype );
console.log( 'a --> ... --> B? %s.', bool );
// => 'a --> ... --> B? false.'

bool = hasPrototype( a, C.prototype );
console.log( 'a --> ... --> C? %s.', bool );
// => 'a --> ... --> C? false.'

bool = hasPrototype( a, D.prototype );
console.log( 'a --> ... --> D? %s.', bool );
// => 'a --> ... --> D? false.'
