'use strict';

// MODULES //

var tape = require( 'tape' );
var Int8Array = require( '@stdlib/types/array/int8' );
var Uint8Array = require( '@stdlib/types/array/uint8' );
var Uint8ClampedArray = require( '@stdlib/types/array/uint8c' );
var Int16Array = require( '@stdlib/types/array/int16' );
var Uint16Array = require( '@stdlib/types/array/uint16' );
var Int32Array = require( '@stdlib/types/array/int32' );
var Uint32Array = require( '@stdlib/types/array/uint32' );
var Float32Array = require( '@stdlib/types/array/float32' );
var Float64Array = require( '@stdlib/types/array/float64' );
var isNumericArray = require( './../lib' );


// TESTS //


tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isNumericArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a numeric array', function test( t ) {
	var values;
	var i;

	values = [
		new Int8Array( 10 ),
		new Uint8Array( 10 ),
		new Uint8ClampedArray( 10 ),
		new Int16Array( 10 ),
		new Uint16Array( 10 ),
		new Int32Array( 10 ),
		new Uint32Array( 10 ),
		new Float32Array( 10 ),
		new Float64Array( 10 ),
		[ 1, 2, 3 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isNumericArray( values[i] ), true, 'returns true when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `false` if not provided a numeric array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		[5, null],
		[5, '5' ],
		{},
		function noop() {},
		new Buffer( 10 )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isNumericArray( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
