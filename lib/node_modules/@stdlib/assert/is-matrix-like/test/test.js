/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Int8Array = require( '@stdlib/array/int8' );
var isMatrixLike = require( './../lib' );


// FUNCTIONS //

/**
* Creates an matrix-like object.
*
* @returns {Object} matrix-like object
*/
function create() {
	var matrix = {};
	matrix.data = new Int8Array( 10 );
	matrix.shape = [ 5, 2 ];
	matrix.offset = 0;
	matrix.strides = [ 2, 1 ];
	matrix.dtype = 'int8';
	matrix.length = 10;
	return matrix;
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isMatrixLike, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a matrix-like object', function test( t ) {
	t.equal( isMatrixLike( create() ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided a matrix-like object', function test( t ) {
	var values;
	var mat;
	var i;

	values = [
		5,
		'5',
		null,
		undefined,
		NaN,
		true,
		[],
		{},
		function noop() {}
	];

	mat = create();
	delete mat.data;
	values.push( mat );

	mat = create();
	mat.shape = true;
	values.push( mat );

	mat = create();
	mat.offset = [];
	values.push( mat );

	mat = create();
	mat.strides = 0;
	values.push( mat );

	mat = create();
	mat.dtype = false;
	values.push( mat );

	mat = create();
	mat.length = new Number( NaN );
	values.push( mat );

	mat = create();
	mat.length = null;
	values.push( mat );

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isMatrixLike( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
