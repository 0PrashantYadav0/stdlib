'use strict';

// MODULES //

var vm = require( 'vm' ); // TODO: handle in-browser tests
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var inherit = require( '@stdlib/utils/inherit' );
var isTypedArray = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isTypedArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a typed array', function test( t ) {
	var values;
	var i;

	values = [
		new Int8Array( 10 ),
		new Uint8Array( 10 ),
		new Uint8ClampedArray( 10 ),
		new Int16Array( 10 ),
		new Uint16Array( 10 ),
		new Int32Array( 10 ),
		new Uint32Array( 10 ),
		new Float32Array( 10 ),
		new Float64Array( 10 )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isTypedArray( values[i] ), true, 'returns true when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `true` if provided an object inheriting from a typed array', function test( t ) {
	function CustomArray( data ) {
		var i;
		for ( i = 0; i < data.length; i++ ) {
			this[ i ] = data[ i ];
		}
		return this;
	}

	inherit( CustomArray, Float64Array );

	t.strictEqual( isTypedArray( new CustomArray( [ 5.0, 3.0 ] ) ), true, 'returns true when provided a value which inherits from a typed array' );
	t.end();
});

tape( 'the function returns `true` if provided a typed array from a different realm', opts, function test( t ) {
	var arr = vm.runInNewContext( 'new Float64Array( [ 5.0, 3.0 ] )' );
	t.strictEqual( isTypedArray( arr ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `true` if provided an object from a different realm which inherits from a typed array', opts, function test( t ) {
	var arr = vm.runInNewContext( 'function Arr() { return this; }; Arr.prototype = new Float64Array(); new Arr();' );
	t.strictEqual( isTypedArray( arr ), true, 'returns true' );
	t.end();
});

tape( 'the function returns `false` if not provided a typed array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isTypedArray( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
