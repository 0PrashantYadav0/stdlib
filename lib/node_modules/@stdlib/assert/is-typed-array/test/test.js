'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var inherit = require( '@stdlib/utils/inherit' );
var Int8Array = require( '@stdlib/types/array/int8' );
var Uint8Array = require( '@stdlib/types/array/uint8' );
var Uint8ClampedArray = require( '@stdlib/types/array/uint8c' );
var Int16Array = require( '@stdlib/types/array/int16' );
var Uint16Array = require( '@stdlib/types/array/uint16' );
var Int32Array = require( '@stdlib/types/array/int32' );
var Uint32Array = require( '@stdlib/types/array/uint32' );
var Float32Array = require( '@stdlib/types/array/float32' );
var Float64Array = require( '@stdlib/types/array/float64' );
var isTypedArray = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isTypedArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a typed array', function test( t ) {
	var values;
	var i;

	values = [
		new Int8Array( 10 ),
		new Uint8Array( 10 ),
		new Uint8ClampedArray( 10 ),
		new Int16Array( 10 ),
		new Uint16Array( 10 ),
		new Int32Array( 10 ),
		new Uint32Array( 10 ),
		new Float32Array( 10 ),
		new Float64Array( 10 )
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isTypedArray( values[i] ), true, 'returns true when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `true` if provided an object inheriting from a typed array', function test( t ) {
	function CustomArray( data ) {
		var i;
		for ( i = 0; i < data.length; i++ ) {
			this[ i ] = data[ i ];
		}
		return this;
	}

	inherit( CustomArray, Float64Array );

	t.strictEqual( isTypedArray( new CustomArray( [ 5.0, 3.0 ] ) ), true, 'returns true when provided a value which inherits from a typed array' );
	t.end();
});

tape( 'the function returns `true` if provided a typed array from a different realm', function test( t ) {
	var isTypedArray;
	var arr;

	isTypedArray = proxyquire( './../lib/is_typed_array.js', {
		'@stdlib/assert/instance-of': instanceOf
	});

	arr = new Float64Array( [ 5.0, 3.0 ] );
	t.strictEqual( isTypedArray( arr ), true, 'returns true' );
	t.end();

	function instanceOf() {
		// Mocks comparison of values from different realms...
		return false;
	}
});

tape( 'the function returns `true` if provided an object from a different realm which inherits from a typed array', function test( t ) {
	var isTypedArray;
	var arr;

	function Arr() {
		return this;
	}
	Arr.prototype = Object.create( Float64Array.prototype );
	Arr.prototype.constructor = Arr;

	isTypedArray = proxyquire( './../lib/is_typed_array.js', {
		'@stdlib/assert/instance-of': instanceOf
	});

	arr = new Arr();
	t.strictEqual( isTypedArray( arr ), true, 'returns true' );
	t.end();

	function instanceOf() {
		// Mocks comparison of values from different realms...
		return false;
	}
});

tape( 'the function returns `false` if not provided a typed array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isTypedArray( values[i] ), false, 'returns false when provided '+values[i] );
	}
	t.end();
});
