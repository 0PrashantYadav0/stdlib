/*
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/// <reference types="@stdlib/types"/>

import { Iterator, IterableIterator, IteratorResult } from '@stdlib/types/iterator';

/**
* Returns an iterator protocol-compliant object.
*
* @returns iterator protocol-compliant object
*/
function createIterator1(): Iterator {
	return {
		'next': next
	};

	/**
	* Implements the iterator protocol `next` method.
	*
	* @returns iterator protocol-compliant object
	*/
	function next(): IteratorResult {
		return {
			'value': true,
			'done': false
		};
	}
}

/**
* Returns an iterator protocol-compliant object.
*
* @returns iterator protocol-compliant object
*/
function createIterator2(): Iterator {
	return {
		'next': next
	};

	/**
	* Implements the iterator protocol `next` method.
	*
	* @returns iterator protocol-compliant object
	*/
	function next(): IteratorResult {
		return {
			'done': true
		};
	}
}

/**
* Returns an iterable iterator protocol-compliant object.
*
* @returns iterable iterator protocol-compliant object
*/
function createIterableIterator(): IterableIterator {
	return {
		'next': next,
		[ Symbol.iterator ]: factory
	};

	/**
	* Implements the iterator protocol `next` method.
	*
	* @returns iterator protocol-compliant object
	*/
	function next(): IteratorResult {
		return {
			'done': true
		};
	}

	/**
	* Returns an iterable iterator protocol-compliant object.
	*
	* @returns iterable iterator protocol-compliant object
	*/
	function factory(): IterableIterator {
		return createIterableIterator();
	}
}


// TESTS //

// The compiler should not throw an error when a function returns an iterators and iterables...
{
	createIterator1();
	createIterator2();
	createIterableIterator();
}
