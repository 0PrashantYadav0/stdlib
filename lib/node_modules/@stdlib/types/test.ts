/*
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/// <reference types="@stdlib/types"/>

import * as array from '@stdlib/types/array';
import * as iter from '@stdlib/types/iterator';
import * as random from '@stdlib/types/random';

/**
* Returns an iterator protocol-compliant object.
*
* @returns iterator protocol-compliant object
*/
function createIterator1(): iter.Iterator {
	return {
		'next': next
	};

	/**
	* Implements the iterator protocol `next` method.
	*
	* @returns iterator protocol-compliant object
	*/
	function next(): iter.IteratorResult {
		return {
			'value': true,
			'done': false
		};
	}
}

/**
* Returns an iterator protocol-compliant object.
*
* @returns iterator protocol-compliant object
*/
function createIterator2(): iter.Iterator {
	return {
		'next': next
	};

	/**
	* Implements the iterator protocol `next` method.
	*
	* @returns iterator protocol-compliant object
	*/
	function next(): iter.IteratorResult {
		return {
			'done': true
		};
	}
}

/**
* Returns an iterable iterator protocol-compliant object.
*
* @returns iterable iterator protocol-compliant object
*/
function createIterableIterator(): iter.IterableIterator {
	return {
		'next': next,
		[ Symbol.iterator ]: factory
	};

	/**
	* Implements the iterator protocol `next` method.
	*
	* @returns iterator protocol-compliant object
	*/
	function next(): iter.IteratorResult {
		return {
			'done': true
		};
	}

	/**
	* Returns an iterable iterator protocol-compliant object.
	*
	* @returns iterable iterator protocol-compliant object
	*/
	function factory(): iter.IterableIterator {
		return createIterableIterator();
	}
}


// TESTS //

// The compiler should not throw an error when using array type aliases...
{
	const x: array.TypedArray = new Float64Array( 10 );
	if ( x[ 0 ] !== 0.0 ) {
		throw new Error( 'something went wrong' );
	}

	const y: array.IntegerTypedArray = new Int32Array( 10 );
	if ( y[ 0 ] !== 0 ) {
		throw new Error( 'something went wrong' );
	}

	const z: array.NumericArray = new Float64Array( 10 );
	if ( z[ 0 ] !== 0.0 ) {
		throw new Error( 'something went wrong' );
	}

	const w: array.ArrayLike<string> = 'beep';
	if ( w[ 0 ] !== 'b' ) {
		throw new Error( 'something went wrong' );
	}

	const v: array.ArrayLike<number> = [ 1, 2, 3 ];
	if ( v[ 0 ] !== 1 ) {
		throw new Error( 'something went wrong' );
	}

	const t: array.ArrayLike<number> = new Int8Array( 10 );
	if ( t[ 0 ] !== 1 ) {
		throw new Error( 'something went wrong' );
	}
}

// The compiler should not throw an error when using iterator or iterable types...
{
	createIterator1();
	createIterator2();
	createIterableIterator();
}

// The compiler should not throw an error when using PRNG types...
{
	const rand: random.PRNG = (): number => 3.14;
	if ( rand() !== 3.14 ) {
		throw new Error( 'something went wrong' );
	}

	const s1: random.PRNGSeedMT19937 = 12345;
	if ( s1 !== 12345 ) {
		throw new Error( 'something went wrong' );
	}

	const s2: random.PRNGSeedMT19937 = new Uint32Array( 10 );
	if ( s2[ 0 ] !== 0 ) {
		throw new Error( 'something went wrong' );
	}

	const s3: random.PRNGSeedMINSTD = 12345;
	if ( s3 !== 12345 ) {
		throw new Error( 'something went wrong' );
	}

	const s4: random.PRNGSeedMINSTD = new Int32Array( 10 );
	if ( s4[ 0 ] !== 0 ) {
		throw new Error( 'something went wrong' );
	}

	const s5: random.PRNGStateMT19937 = new Uint32Array( 10 );
	if ( s5[ 0 ] !== 0 ) {
		throw new Error( 'something went wrong' );
	}

	const s6: random.PRNGStateMINSTD = new Int32Array( 10 );
	if ( s6[ 0 ] !== 0 ) {
		throw new Error( 'something went wrong' );
	}
}
