'use strict';

// MODULES //

var tape = require( 'tape' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var allocUnsafe = require( './../lib/main.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof allocUnsafe, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a nonnegative integer', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 2, 3, 4 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			allocUnsafe( value );
		};
	}
});

tape( 'the function (unsafely) allocates a buffer having a specified number of bytes', function test( t ) {
	var flg;
	var buf;
	var i;

	buf = allocUnsafe( 1000 );
	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );
	t.strictEqual( buf.length, 1000, 'has expected length' );

	for ( i = 0; i < buf.length; i++ ) {
		if ( buf[ i ] !== 0 ) {
			flg = true;
			break;
		}
	}
	t.strictEqual( flg, true, 'has uninitialized memory' );

	t.end();
});
