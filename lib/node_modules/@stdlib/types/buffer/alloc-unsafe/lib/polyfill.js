'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
var Buffer = require( '@stdlib/types/buffer/ctor' );


// MAIN //

/**
* Allocates a buffer having a specified number of bytes.
*
* ## Notes
*
* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.
* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.
*
*
* @param {NonNegativeInteger} size - number of bytes to allocate
* @throws {TypeError} must provide a nonnegative integer
* @returns {Buffer} new `Buffer` instance
*
* @example
* var buf = allocUnsafe( 10 );
* // returns <Buffer>
*/
function allocUnsafe( size ) {
	if ( !isNonNegativeInteger( size ) ) {
		throw new TypeError( 'invalid input argument. Must provide a nonnegative integer. Value: `' + size + '`' );
	}
	return new Buffer( size ); // eslint-disable-line no-buffer-constructor
} // end FUNCTION allocUnsafe()


// EXPORTS //

module.exports = allocUnsafe;
