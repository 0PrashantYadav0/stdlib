'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var allocUnsafe = require( '@stdlib/types/buffer/alloc-unsafe' );
var pkg = require( './../package.json' ).name;
var toJSON = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var buf;
	var o;
	var i;

	buf = allocUnsafe( 10 );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		buf[ 0 ] = i % 256;
		o = toJSON( buf );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::built-in', function benchmark( b ) {
	var buf;
	var o;
	var i;

	buf = allocUnsafe( 10 );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		buf[ 0 ] = i % 256;
		o = buf.toJSON();
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::large', function benchmark( b ) {
	var buf;
	var o;
	var i;

	buf = allocUnsafe( 1e6 );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		buf[ 0 ] = i % 256;
		o = toJSON( buf );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::built-in,large', function benchmark( b ) {
	var buf;
	var o;
	var i;

	buf = allocUnsafe( 1e6 );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		buf[ 0 ] = i % 256;
		o = buf.toJSON();
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
