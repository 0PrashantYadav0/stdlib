'use strict';

// MODULES //

var isArrayBuffer = require( '@stdlib/assert/is-arraybuffer' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var Buffer = require( '@stdlib/types/buffer/ctor' );


// MAIN //

/**
* Allocates a buffer from an `ArrayBuffer`.
*
* @param {ArrayBuffer} buf - ArrayBuffer instance
* @param {NonNegativeInteger} [byteOffset=0] - index specifying the location of the first buffer byte
* @param {NonNegativeInteger} [length=buf.byteLength] - number of buffer bytes
* @throws {TypeError} first argument must provide an ArrayBuffer
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {TypeError} last argument must be a nonnegative integer
* @returns {Buffer} new `Buffer` instance
*
* @example
* var ArrayBuffer = require( '@stdlib/types/array/buffer' );
* var ab = new ArrayBuffer( 10 );
*
* var buf = fromArrayBuffer( ab );
* // returns <Buffer>
*
* @example
* var ArrayBuffer = require( '@stdlib/types/array/buffer' );
* var ab = new ArrayBuffer( 10 );
*
* var buf = fromArrayBuffer( ab, 2, 4 );
* // returns <Buffer>
*/
function fromArrayBuffer( buf, byteOffset, length ) {
	var offset;
	var len;
	if ( !isArrayBuffer( buf ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an ArrayBuffer. Value: `' + buf + '`' );
	}
	if ( arguments.length > 1 ) {
		if ( !isNonNegativeInteger( byteOffset ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + byteOffset + '`.' );
		}
		offset = byteOffset;
		if ( arguments.length > 2 ) {
			if ( !isNonNegativeInteger( length ) ) {
				throw new TypeError( 'invalid input argument. Last argument must be a nonnegative integer. Value: `' + length + '`.' );
			}
			len = length;
		} else {
			len = buf.byteLength - offset;
		}
	} else {
		offset = 0;
		len = buf.byteLength;
	}
	return Buffer.from( buf, offset, len );
} // end FUNCTION fromArrayBuffer()


// EXPORTS //

module.exports = fromArrayBuffer;
