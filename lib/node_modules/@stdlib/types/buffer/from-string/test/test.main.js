'use strict';

// MODULES //

var tape = require( 'tape' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isFunction = require( '@stdlib/assert/is-function' );
var Buffer = require( '@stdlib/types/buffer/ctor' );
var fromString = require( './../lib/main.js' );


// VARIABLES //

var opts = {
	'skip': !isFunction( Buffer.from )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof fromString, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 2, 3, 4 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			fromString( value );
		};
	}
});

tape( 'the function throws an error if not provided a string (encoding)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 2, 3, 4 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			fromString( value, 'utf8' );
		};
	}
});

tape( 'the function throws an error if not provided a valid encoding argument', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		'boop',
		'bop',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 2, 3, 4 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			fromString( 'beep', value );
		};
	}
});

tape( 'the function allocates a buffer containing a provided string', opts, function test( t ) {
	var buf = fromString( 'beep boop' );
	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );
	t.strictEqual( buf.length, 9, 'has expected length' );
	t.strictEqual( buf.toString(), 'beep boop', 'returns expected value' );
	t.end();
});

tape( 'the function allocates a buffer containing a provided string (encoding)', opts, function test( t ) {
	var buf = fromString( '7468697320697320612074c3a97374', 'hex' );
	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );
	t.strictEqual( buf.length, 15, 'has expected length' );
	t.strictEqual( buf.toString(), 'this is a tÃ©st', 'returns expected value' );
	t.end();
});
