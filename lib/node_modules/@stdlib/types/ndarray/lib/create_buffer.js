'use strict';

// MODULES //

var bufferCtors = require( '@stdlib/types/ndarray/base/buffer-ctors' );
var isFunction = require( '@stdlib/assert/is-function' );
var zeros = require( './zeros.js' );


// VARIABLES //

/*
* For historical background, see
*
* - https://www.html5rocks.com/en/tutorials/speed/v8/#toc-topic-numbers
* - https://github.com/thlorenz/v8-perf/blob/master/data-types.md#fast-elements
*
* Apparently, in more recent V8 versions, this has increased to 32 million.
*
* - https://github.com/v8/v8/blob/2feb99dc8ac75f20d2e5c9c1b343e923476851ea/src/objects/js-array.h#L87-L88
*/
var MAX_FAST_ELEMENTS_LENGTH = 64000;


// MAIN //

/**
* Returns a data buffer.
*
* @private
* @param {NonNegativeInteger} len - buffer length
* @param {string} dtype - data type
* @returns {(Array|TypedArray|Buffer)} buffer
*
* @example
* var b = createBuffer( 3, 'float64' );
* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]
*/
function createBuffer( len, dtype ) {
	var buffer;
	var ctor;
	var i;

	ctor = bufferCtors( dtype );

	// In some engines, we need to ensure "fast elements" (i.e., contiguous memory) for generic arrays...
	if ( dtype === 'generic' ) {
		if ( len > MAX_FAST_ELEMENTS_LENGTH ) {
			buffer = zeros( new ctor( MAX_FAST_ELEMENTS_LENGTH ) );
			for ( i = MAX_FAST_ELEMENTS_LENGTH; i < len; i++ ) {
				buffer.push( 0.0 );
			}
			return buffer;
		}
		return zeros( new ctor( len ) ); // eslint-disable-line no-new-cap
	}
	// TODO: replace the following exception with the generalized buffer API `@stdlib/types/buffer`
	if ( dtype === 'binary' && isFunction( ctor.alloc ) ) {
		return ctor.alloc( len );
	}
	return new ctor( len ); // eslint-disable-line no-new-cap
} // end FUNCTION createBuffer()


// EXPORTS //

module.exports = createBuffer;
