'use strict';

// MODULES //

var btypes = require( './btypes.js' );


// MAIN //

/**
* Casts buffer elements by copying those elements to a buffer of another data type.
*
* @private
* @param {(Array|TypedArray|Buffer)} buffer - input buffer
* @param {NonNegativeInteger} len - number of elements to cast
* @param {string} dtype - data type
* @returns {(Array|TypedArray|Buffer)} output buffer
*
* @example
* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 2, 'float64' );
* // returns <Float64Array>[ 1.0, 2.0 ]
*/
function castBuffer( buffer, len, dtype ) {
	/* eslint-disable no-new-cap */
	var ctor;
	var out;
	var i;

	ctor = btypes[ dtype ];

	// In some engines, we need to ensure "fast elements" for generic arrays...
	if ( dtype === 'generic' && len > 64000 ) {
		out = new ctor( 64000 );
		for ( i = 0; i < len; i++ ) {
			out[ i ] = 0; // TODO: index into buffer (will want ability to provide linear index)
		}
		for ( i = 64000; i < len; i++ ) {
			out.push( 0 ); // TODO: index into buffer
		}
	} else {
		out = new ctor( len );
		for ( i = 0; i < len; i++ ) {
			out[ i ] = 0; // TODO: index into buffer
		}
	}
	return out;
} // end FUNCTION castBuffer()


// EXPORTS //

module.exports = castBuffer;
