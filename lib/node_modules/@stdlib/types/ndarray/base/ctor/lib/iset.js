'use strict';

// MAIN //

/**
* Sets an array element located a specified linear view index.
*
* @private
* @param {integer} idx - linear view index
* @param {*} v - value to set
* @returns {ndarray} ndarray instance
*/
function set( idx, v ) {
	/* eslint-disable no-invalid-this */
	var strides;
	var shape;
	var ndims;
	var ind;
	var s;
	var i;

	// Trivial case where we have all positive strides...
	if ( this._iterationOrder === 1 ) {
		this._buffer[ this._offset + idx ] = v;
		return this;
	}
	// Trivial case where we have all negative strides...
	if ( this._iterationOrder === -1 ) {
		this._buffer[ this._offset - idx ] = v;
		return this;
	}
	// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...
	shape = this._shape;
	ndims = this._shape.length;
	strides = this._strides;
	ind = this._offset;
	if ( this._order === 'column-major' ) {
		for ( i = 0; i < ndims; i++ ) {
			s = idx % shape[ i ];
			idx -= s;
			idx /= shape[ i ];
			ind += s * strides[ i ];
		}
		this._buffer[ ind ] = v;
		return this;
	}
	// Case: row-major
	for ( i = ndims-1; i >= 0; i-- ) {
		s = idx % shape[ i ];
		idx -= s;
		idx /= shape[ i ];
		ind += s * strides[ i ];
	}
	this._buffer[ ind ] = v;
	return this;
} // end FUNCTION set()


// EXPORTS //

module.exports = set;
