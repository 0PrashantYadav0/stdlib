'use strict';

// MODULES //

var BYTES_PER_ELEMENT = require( './bytes_per_element.json' );
var iterationOrder = require( './iteration_order.js' );
var compileSet = require( './compile_set.js' );
var compileGet = require( './compile_get.js' );
var igetValue = require( './iget.js' );
var setValue = require( './set.js' );
var getValue = require( './get.js' );
var toJSON = require( './tojson.js' );
var defaults = require( './defaults.json' );


// MAIN /

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'float64', 3 );
* // returns <Function>
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/
function ctor( dtype, ndims, options ) {
	/* eslint-disable no-restricted-syntax */
	var opts = {};
	if ( arguments.length > 2 ) {
		opts.codegen = ( options.codegen === void 0 ) ? defaults.codgen : options.codegen; // eslint-disable-line max-len
	} else {
		opts.codegen = defaults.codegen;
	}

	/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @returns {ndarray} ndarray instance
	*/
	function ndarray( buffer, shape, strides, offset, order ) {
		/* eslint-disable no-invalid-this */
		var nbytes;
		var len;
		var i;
		if ( !(this instanceof ndarray) ) {
			return new ndarray( buffer, shape, strides, offset, order ); // eslint-disable-line no-new-cap
		}
		// Compute the number of elements...
		len = 1;
		for ( i = 0; i < ndims; i++ ) {
			len *= shape[ i ];
		}
		// Compute the number of bytes...
		if ( ndarray.BYTES_PER_ELEMENT ) {
			nbytes = ndarray.BYTES_PER_ELEMENT * len;
		} else {
			nbytes = null;
		}
		// Set private properties...
		this._byteLength = nbytes;
		this._buffer = buffer;
		this._flags = {}; // TODO: reserved for later use
		this._length = len;
		this._offset = offset;
		this._order = order;
		this._shape = shape;
		this._strides = strides;
		this._iterationOrder = iterationOrder( this._strides );

		return this;
	} // end FUNCTION ndarray()

	/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @memberof ndarray
	* @name BYTES_PER_ELEMENT
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var nbytes = ndarray.BYTES_PER_ELEMENT;
	* // returns <number>
	*/
	Object.defineProperty( ndarray, 'BYTES_PER_ELEMENT', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': BYTES_PER_ELEMENT[ dtype ]
	});

	/**
	* Underlying data type.
	*
	* @private
	* @memberof ndarray
	* @name dtype
	* @type {string}
	*
	* @example
	* var dtype = ndarray.dtype;
	* // returns <string>
	*/
	Object.defineProperty( ndarray, 'dtype', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': dtype
	});

	/**
	* Number of dimensions.
	*
	* @private
	* @memberof ndarray
	* @name ndims
	* @type {PositiveInteger}
	*
	* @example
	* var ndims = ndarray.ndims;
	* // returns <number>
	*/
	Object.defineProperty( ndarray, 'ndims', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ndims
	});

	/**
	* Size (in bytes) of the array (if known).
	*
	* @private
	* @memberof ndarray.prototype
	* @name byteLength
	* @type {(NonNegativeInteger|null)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var byteLength = x.byteLength;
	* // returns <number>
	*/
	Object.defineProperty( ndarray.prototype, 'byteLength', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._byteLength;
		}
	});

	/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @memberof ndarray.prototype
	* @name BYTES_PER_ELEMENT
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var nbytes = x.BYTES_PER_ELEMENT;
	* // returns <number>
	*/
	Object.defineProperty( ndarray.prototype, 'BYTES_PER_ELEMENT', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ndarray.BYTES_PER_ELEMENT
	});

	/**
	* Pointer to the underlying data buffer.
	*
	* @private
	* @memberof ndarray.prototype
	* @name data
	* @type {(Array|TypedArray|Buffer)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var data = x.data;
	* // returns [ 1, 2, 3, 4, 5, 6 ]
	*/
	Object.defineProperty( ndarray.prototype, 'data', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._buffer;
		}
	});

	/**
	* Underlying data type.
	*
	* @private
	* @memberof ndarray.prototype
	* @name dtype
	* @type {string}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var dtype = x.dtype;
	* // returns <string>
	*/
	Object.defineProperty( ndarray.prototype, 'dtype', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ndarray.dtype
	});

	/**
	* Information about the memory layout of the array.
	*
	* @private
	* @memberof ndarray.prototype
	* @name flags
	* @type {Object}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var flgs = x.flags;
	* // returns <Object>
	*/
	Object.defineProperty( ndarray.prototype, 'flags', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return {}; // TODO: reserved for future use
		}
	});

	/**
	* Length of the array.
	*
	* @private
	* @memberof ndarray.prototype
	* @name length
	* @type {NonNegativeInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var len = x.length;
	* // returns 6
	*/
	Object.defineProperty( ndarray.prototype, 'length', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._length;
		}
	});

	/**
	* Number of dimensions.
	*
	* @private
	* @memberof ndarray.prototype
	* @name ndims
	* @type {PositiveInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var ndims = x.ndims;
	* // returns <number>
	*/
	Object.defineProperty( ndarray.prototype, 'ndims', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ndims
	});

	/**
	* Index offset which specifies the buffer index at which to start iterating over array elements.
	*
	* @private
	* @memberof ndarray.prototype
	* @name offset
	* @type {NonNegativeInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var offset = x.offset;
	* // returns 0
	*/
	Object.defineProperty( ndarray.prototype, 'offset', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._offset;
		}
	});

	/**
	* Array order.
	*
	* ## Notes
	*
	* -   The array order is either row-major (C-style) or column-major (Fortran-style).
	*
	*
	* @private
	* @memberof ndarray.prototype
	* @name order
	* @type {string}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var order = x.order;
	* // returns 'row-major'
	*/
	Object.defineProperty( ndarray.prototype, 'order', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._order;
		}
	});

	/**
	* Shape of the array.
	*
	* @private
	* @memberof ndarray.prototype
	* @name shape
	* @type {NonNegativeIntegerArray}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var s = x.shape;
	* // returns [ 3, 2 ]
	*/
	Object.defineProperty( ndarray.prototype, 'shape', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._shape.slice();
		}
	});

	/**
	* Index strides which specify how to access data along corresponding array dimensions.
	*
	* @private
	* @memberof ndarray.prototype
	* @name strides
	* @type {IntegerArray}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var s = x.strides;
	* // returns [ 2, 1 ]
	*/
	Object.defineProperty( ndarray.prototype, 'strides', {
		'configurable': false,
		'enumerable': false,
		'get': function get() {
			return this._strides.slice();
		}
	});

	/**
	* Returns an array element.
	*
	* @private
	* @memberof ndarray.prototype
	* @name get
	* @type {Function}
	* @param {...integer} idx - indices
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*/
	Object.defineProperty( ndarray.prototype, 'get', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ( opts.codegen ) ? compileGet( ndims ) : getValue
	});

	/**
	* Returns an array element located at a specified linear index.
	*
	* @private
	* @memberof ndarray.prototype
	* @name get
	* @type {Function}
	* @param {integer} idx - indices
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*/
	Object.defineProperty( ndarray.prototype, 'iget', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': igetValue
	});

	/**
	* Sets an array element.
	*
	* @private
	* @memberof ndarray.prototype
	* @name set
	* @type {Function}
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*
	* x.set( 1, 1, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.get( 1, 1 );
	* // returns 10
	*/
	Object.defineProperty( ndarray.prototype, 'set', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ( opts.codegen ) ? compileSet( ndims ) : setValue
	});

	/**
	* Serializes an ndarray as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a `ndarray` instance.
	* -   The method does **not** serialize data outside of the buffer region defined by the array shape.
	*
	*
	* @private
	* @memberof ndarray.prototype
	* @name toJSON
	* @type {Function}
	* @returns {Object} serialized complex number
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 2;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var o = x.toJSON();
	* // e.g., returns { 'type': 'ndarray', 'dtype': '<dtype>', 'flags': {...}, 'offset': 0, 'order': 'row-major', 'shape': [ 3, 2 ], 'strides': [ 2, 1 ], 'data': [ 3, 4, 5, 6, 7, 8 ] }
	*/
	Object.defineProperty( ndarray.prototype, 'toJSON', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': toJSON
	});

	return ndarray;
} // end FUNCTION ctor()


// EXPORTS //

module.exports = ctor;
