'use strict';

// MAIN //

/**
* Converts subscripts to a linear index.
*
* ## Notes
*
* -   The function accepts the following "modes":
*
*     -   `throw`: throws an error when a subscript exceeds array dimensions.
*     -   `wrap`: wrap around subscripts exceeding array dimensions using modulo arithmetic.
*     -   `clamp`: set subscripts exceeding array dimensions to either `0` (minimum index) or the maximum index along a particular dimension.
*
*
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - location of the first indexed value based on the stride array
* @param {...integer} i - subscripts
* @param {string} mode - specifies how to handle subscripts which exceed array dimensions
* @throws {RangeError} must provide subscripts which do not exceed array dimensions
* @returns {NonNegativeInteger} linear index
*
* @example
* var shape = [ 3, 3, 3 ];
* var strides = [ 9, 3, 1 ];
* var offset = 0;
*
* var idx = sub2ind( shape, strides, offset, 1, 2, 2, 'throw' );
* // returns 17
*/
function sub2ind() {
	var strides;
	var offset;
	var shape;
	var ndims;
	var mode;
	var idx;
	var m;
	var j;
	var i;

	shape = arguments[ 0 ];
	strides = arguments[ 1 ];
	offset = arguments[ 2 ];
	ndims = shape.length;
	mode = arguments[ 3+ndims ]; // last argument

	idx = offset;
	if ( mode === 'clamp' ) {
		for ( i = 0; i < ndims; i++ ) {
			m = shape[ i ];
			j = arguments[ i+3 ];
			if ( j < 0 ) {
				j = 0;
			} else if ( j >= m ) {
				j = m - 1;
			}
			idx += j * strides[ i ];
		}
		return idx;
	}
	if ( mode === 'wrap' ) {
		for ( i = 0; i < ndims; i++ ) {
			m = shape[ i ];
			j = arguments[ i+3 ];
			if ( j < 0 ) {
				j += m; // slight optimization to avoid modulo arithmetic when |j| <= m
				if ( j < 0 ) {
					j %= m;
					if ( j !== 0 ) {
						j += m;
					}
				}
			} else if ( j >= m ) {
				j -= m;// slight optimization to avoid modulo arithmetic when m < j <= 2m
				if ( j >= m ) {
					j %= m;
				}
			}
			idx += j * strides[ i ];
		}
		return idx;
	}
	// Case: throw
	for ( i = 0; i < ndims; i++ ) {
		m = shape[ i ];
		j = arguments[ i+3 ];
		if ( j < 0 || j >= m ) {
			throw new RangeError( 'invalid input argument. Subscripts must not exceed array dimensions. Subscript: ' + i + '. Value: `' + j + '`.' );
		}
		idx += j * strides[ i ];
	}
	return idx;
} // end FUNCTION sub2ind()


// EXPORTS //

module.exports = sub2ind;
