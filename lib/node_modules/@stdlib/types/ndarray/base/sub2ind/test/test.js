'use strict';

// MODULES //

var tape = require( 'tape' );
var sub2ind = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof sub2ind, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function converts subscripts to a linear index (simple)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ 2, 1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	t.end();
});

tape( 'the function converts subscripts to a linear index', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ -2, 1 ];
	offset = 2;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	t.end();
});

tape( 'the function converts subscripts to a linear index (offset=0)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ -2, 1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	t.end();
});

tape( 'the function converts subscripts to a linear index', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ 2, -1 ];
	offset = 1;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	t.end();
});

tape( 'the function converts subscripts to a linear index (offset=0)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ 2, -1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	t.end();
});

tape( 'the function converts subscripts to a linear index', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ -2, -1 ];
	offset = 3;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	t.end();
});

tape( 'the function converts subscripts to a linear index (offset=0)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ -2, -1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 0, 0, 'throw' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 1, 'throw' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 0, 'throw' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 1, 'throw' );
	t.strictEqual( idx, 3, 'returns expected value' );

	t.end();
});

tape( 'if the `mode` is `throw`, the function throws if provided a subscript which exceeds array dimensions', function test( t ) {
	var strides;
	var offset;
	var shape;

	shape = [ 2, 2 ];
	strides = [ 2, 1 ];
	offset = 0;

	t.throws( foo, RangeError, 'throws a range error' );
	t.throws( bar, RangeError, 'throws a range error' );

	t.end();

	function foo() {
		sub2ind( shape, strides, offset, 999999, 1, 'throw' );
	}

	function bar() {
		sub2ind( shape, strides, offset, 1, 999999, 'throw' );
	}
});

tape( 'if the `mode` is `wrap`, the function wraps subscripts which exceed array dimensions', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ 2, 1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 1, 0, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 2, 0, 'wrap' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 3, 'wrap' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, -1, 0, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, -3, 0, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 5, 'wrap' );
	t.strictEqual( idx, 3, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 4, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, -4, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	t.end();
});

tape( 'if the `mode` is `wrap`, the function wraps subscripts which exceed array dimensions (offset=0)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ -2, 1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 1, 0, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 2, 0, 'wrap' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 3, 'wrap' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, -1, 0, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, -3, 0, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 5, 'wrap' );
	t.strictEqual( idx, 3, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 4, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, -4, 'wrap' );
	t.strictEqual( idx, 2, 'returns expected value' );

	t.end();
});

tape( 'if the `mode` is `clamp`, the function clamps subscripts which exceed array dimensions', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ 2, 1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 1, 0, 'clamp' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 2, 0, 'clamp' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 3, 'clamp' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, -3, 0, 'clamp' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 5, 'clamp' );
	t.strictEqual( idx, 3, 'returns expected value' );

	t.end();
});

tape( 'if the `mode` is `clamp`, the function clamps subscripts which exceed array dimensions (offset=0)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 2, 2 ];
	strides = [ -2, 1 ];
	offset = 0;

	idx = sub2ind( shape, strides, offset, 1, 0, 'clamp' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 2, 0, 'clamp' );
	t.strictEqual( idx, 2, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 0, 3, 'clamp' );
	t.strictEqual( idx, 1, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, -3, 0, 'clamp' );
	t.strictEqual( idx, 0, 'returns expected value' );

	idx = sub2ind( shape, strides, offset, 1, 5, 'clamp' );
	t.strictEqual( idx, 3, 'returns expected value' );

	t.end();
});
