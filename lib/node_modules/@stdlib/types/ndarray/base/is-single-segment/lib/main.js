'use strict';

// MODULES //

var numel = require( '@stdlib/types/ndarray/base/numel' );
var minmax = require( '@stdlib/types/ndarray/base/minmax-view-buffer-index' );


// MAIN //

/**
* Returns a boolean indicating if an array is compatible with a single memory segment.
*
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {boolean} boolean indicating if an array is compatible with a single memory segment
*
* @example
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var bool = isSingleSegment( shape, strides, offset );
* // returns true
*
* @example
* var shape = [ 10 ];
* var strides = [ 3 ];
* var offset = 0;
*
* var bool = isSingleSegment( shape, strides, offset );
* // returns false
*/
function isSingleSegment( shape, strides, offset ) {
	var len;
	var idx;

	// Compute the total number of elements:
	len = numel( shape );
	if ( len === 0 ) {
		return false;
	}
	// Determine the minimum and maximum linear indices which are accessible by the array view:
	idx = minmax( shape, strides, offset );

	return ( len === ( idx[1]-idx[0]+1 ) );
} // end FUNCTION isSingleSegment()


// EXPORTS //

module.exports = isSingleSegment;
