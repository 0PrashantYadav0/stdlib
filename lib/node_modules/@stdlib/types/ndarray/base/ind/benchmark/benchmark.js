'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var floor = require( '@stdlib/math/base/special/floor' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var ind = require( './../lib' );


// MAIN //

bench( pkg+'::mode=clamp', function benchmark( b ) {
	var out;
	var idx;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*100.0 ) - 50.0;
		out = ind( idx, 10, 'clamp' );
		if ( out !== out ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( !isNonNegativeInteger( out ) ) {
		b.fail( 'should return a nonnegative integer' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::mode=wrap', function benchmark( b ) {
	var out;
	var idx;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*100.0 ) - 50.0;
		out = ind( idx, 10, 'wrap' );
		if ( out !== out ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( !isNonNegativeInteger( out ) ) {
		b.fail( 'should return a nonnegative integer' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::mode=throw', function benchmark( b ) {
	var out;
	var idx;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*11.0 );
		out = ind( idx, 10, 'throw' );
		if ( out !== out ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( !isNonNegativeInteger( out ) ) {
		b.fail( 'should return a nonnegative integer' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
