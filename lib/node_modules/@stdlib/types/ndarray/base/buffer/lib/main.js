'use strict';

// MODULES //

var bufferCtors = require( '@stdlib/types/ndarray/base/buffer-ctors' );
var allocUnsafe = require( '@stdlib/types/buffer/alloc-unsafe' );
var zeros = require( './zeros.js' );


// VARIABLES //

/*
* In some engines, we need to ensure "fast elements" (i.e., contiguous memory) for generic arrays. For historical background, see
*
* -   https://www.html5rocks.com/en/tutorials/speed/v8/#toc-topic-numbers
* -   https://github.com/thlorenz/v8-perf/blob/ee76ddf1e414f3299bd03943ef212072dd16200f/data-types.md#fast-elements
*
* Apparently, in more recent V8 versions, this has increased to 32 million.
*
* -   https://github.com/v8/v8/blob/2feb99dc8ac75f20d2e5c9c1b343e923476851ea/src/objects/js-array.h#L87-L88
*/
var MAX_FAST_ELEMENTS_LENGTH = 64000;


// MAIN //

/**
* Returns a zero-filled contiguous linear ndarray data buffer.
*
* @param {string} dtype - data type
* @param {NonNegativeInteger} size - buffer size
* @returns {(Array|TypedArray|Buffer)|null} data buffer
*
* @example
* var buf = buffer( 'float64', 3 );
* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]
*/
function buffer( dtype, size ) {
	var ctor;
	var buf;
	var i;

	if ( dtype === 'generic' ) {
		ctor = bufferCtors( dtype );
		if ( size > MAX_FAST_ELEMENTS_LENGTH ) {
			buf = zeros( new ctor( MAX_FAST_ELEMENTS_LENGTH ) );
			for ( i = MAX_FAST_ELEMENTS_LENGTH; i < size; i++ ) {
				buf.push( 0 );
			}
			return buf;
		}
		return zeros( new ctor( size ) ); // eslint-disable-line no-new-cap
	}
	if ( dtype === 'binary' ) {
		return zeros( allocUnsafe( size ) );
	}
	ctor = bufferCtors( dtype );
	if ( ctor ) {
		return new ctor( size ); // eslint-disable-line no-new-cap
	}
	return null;
} // end FUNCTION buffer()


// EXPORTS //

module.exports = buffer;
