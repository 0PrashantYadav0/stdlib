'use strict';

var discreteUniform = require( '@stdlib/math/base/random/discrete-uniform' );
var shape2strides = require( '@stdlib/types/ndarray/base/shape2strides' );
var strides2offset = require( '@stdlib/types/ndarray/base/strides2offset' );
var randu = require( '@stdlib/math/base/random/randu' );
var maxViewBufferIndex = require( './../lib' );

var strides;
var offset;
var shape;
var idx;
var i;
var j;

shape = new Array( 3 );

for ( i = 0; i < 100; i++ ) {
	// Generate a random array shape:
	shape[ 0 ] = discreteUniform( 1, 10 );
	shape[ 1 ] = discreteUniform( 1, 10 );
	shape[ 2 ] = discreteUniform( 1, 10 );

	// Generate strides:
	if ( randu() < 0.5 ) {
		strides = shape2strides( shape, 'row-major' );
	} else {
		strides = shape2strides( shape, 'column-major' );
	}
	j = discreteUniform( 0, shape.length-1 );
	strides[ j ] *= ( randu() < 0.5 ) ? -1 : 1;

	// Compute the index offset:
	offset = strides2offset( shape, strides );

	// Compute the maximum linear index:
	idx = maxViewBufferIndex( shape, strides, offset );
	console.log( 'Shape: %s. Strides: %s. Offset: %d. Max idx: %d.', shape.join( 'x' ), strides.join( ',' ), offset, idx );
}
