'use strict';

// MODULES //

var tape = require( 'tape' );
var maxViewBufferIndex = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof maxViewBufferIndex, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the maximum linear index in an underlying array buffer which is accessible to an array view', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 3, 2 ];

	strides = [ 2, 1 ];
	offset = 0;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ -2, 1 ];
	offset = 4;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ 2, -1 ];
	offset = 1;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ -2, -1 ];
	offset = 5;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ 1, 3 ];
	offset = 0;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ -1, 3 ];
	offset = 2;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ 1, -3 ];
	offset = 3;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	strides = [ -1, -3 ];
	offset = 5;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 5, 'returns expected value' );

	// 3d array...
	shape = [ 2, 3, 10 ];

	strides = [ 30, 10, 1 ];
	offset = 0;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 59, 'returns expected value' );

	strides = [ 30, -10, 1 ];
	offset = 20;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 59, 'returns expected value' );

	t.end();
});

tape( 'the function computes the maximum linear index in an underlying array buffer which is accessible to an array view (buffer offset)', function test( t ) {
	var strides;
	var offset;
	var shape;
	var idx;

	shape = [ 3, 2 ];

	strides = [ 2, 1 ];
	offset = 10;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 15, 'returns expected value' );

	strides = [ -2, 1 ];
	offset = 14;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 15, 'returns expected value' );

	strides = [ 2, -1 ];
	offset = 11;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 15, 'returns expected value' );

	strides = [ -2, -1 ];
	offset = 15;
	idx = maxViewBufferIndex( shape, strides, offset );
	t.strictEqual( idx, 15, 'returns expected value' );

	t.end();
});
