'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var dtypes = require( '@stdlib/types/ndarray/dtypes' );
var bufferCtors = require( '@stdlib/types/ndarray/base/buffer-ctors' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var pkg = require( './../package.json' ).name;
var dtype = require( './../lib' );


// VARIABLES //

var DTYPES = dtypes();


// MAIN //

bench( pkg, function benchmark( b ) {
	var buffers;
	var ctor;
	var dt;
	var i;

	buffers = new Array( DTYPES.length );
	for ( i = 0; i < DTYPES.length; i++ ) {
		ctor = bufferCtors( DTYPES[ i ] );
		if ( DTYPES[ i ] === 'binary' && isFunction( ctor.alloc ) ) {
			buffers[ i ] = ctor.alloc( 10 );
		} else {
			buffers[ i ] = new ctor( 10 ); // eslint-disable-line no-new-cap
		}
	}
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		dt = dtype( buffers[ i%buffers.length ] );
		if ( typeof dt !== 'string' ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( dt ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
