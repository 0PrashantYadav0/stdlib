'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var floor = require( '@stdlib/math/base/special/floor' );
var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
var pkg = require( './../package.json' ).name;
var ind2sub = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var shape;
	var len;
	var out;
	var idx;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		out = ind2sub( shape, idx );
		if ( out.length !== shape.length ) {
			b.fail( 'should return an array with expected length' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( out ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::memory_reuse', function benchmark( b ) {
	var shape;
	var len;
	var out;
	var idx;
	var s;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}
	out = new Array( shape.length );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		s = ind2sub( out, shape, idx );
		if ( s !== out ) {
			b.fail( 'should return output array' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( s ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':mode=wrap', function benchmark( b ) {
	var shape;
	var opts;
	var len;
	var out;
	var idx;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}
	opts = {
		'mode': 'wrap'
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		out = ind2sub( shape, idx, opts );
		if ( out.length !== shape.length ) {
			b.fail( 'should return an array with expected length' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( out ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':mode=clamp', function benchmark( b ) {
	var shape;
	var opts;
	var len;
	var out;
	var idx;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}
	opts = {
		'mode': 'clamp'
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		out = ind2sub( shape, idx, opts );
		if ( out.length !== shape.length ) {
			b.fail( 'should return an array with expected length' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( out ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':mode=throw', function benchmark( b ) {
	var shape;
	var opts;
	var len;
	var out;
	var idx;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}
	opts = {
		'mode': 'throw'
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		out = ind2sub( shape, idx, opts );
		if ( out.length !== shape.length ) {
			b.fail( 'should return an array with expected length' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( out ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':order=row-major', function benchmark( b ) {
	var shape;
	var opts;
	var len;
	var out;
	var idx;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}
	opts = {
		'order': 'row-major'
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		out = ind2sub( shape, idx, opts );
		if ( out.length !== shape.length ) {
			b.fail( 'should return an array with expected length' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( out ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':order=column-major', function benchmark( b ) {
	var shape;
	var opts;
	var len;
	var out;
	var idx;
	var i;

	shape = [ 10, 10, 10 ];
	len = 1;
	for ( i = 0; i < shape.length; i++ ) {
		len *= shape[ i ];
	}
	opts = {
		'order': 'column-major'
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		idx = floor( randu()*len );
		out = ind2sub( shape, idx, opts );
		if ( out.length !== shape.length ) {
			b.fail( 'should return an array with expected length' );
		}
	}
	b.toc();
	if ( !isNonNegativeIntegerArray( out ) ) {
		b.fail( 'should return an array containing nonnegative integers' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
