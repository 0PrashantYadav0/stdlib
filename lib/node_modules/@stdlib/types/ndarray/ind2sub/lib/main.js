'use strict';

// MODULES //

var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var shape2strides = require( '@stdlib/types/ndarray/base/shape2strides' );
var getSubscripts = require( '@stdlib/types/ndarray/base/ind2sub' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// MAIN //

/**
* Converts a linear index to an array of subscripts.
*
* ## Notes
*
* -   The function accepts the following "modes":
*
*     -   `throw`: throws an error when a linear index exceeds array dimensions.
*     -   `wrap`: wrap around a linear index exceeding array dimensions using modulo arithmetic.
*     -   `clamp`: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.
*
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {NonNegativeIntegerArray} shape - array shape
* @param {integer} idx - linear index
* @param {Options} [options] - function options
* @param {string} [options.mode="throw"] - specifies how to handle a linear index which exceeds array dimensions
* @param {string} [options.order="row-major"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
* @throws {TypeError} output argument must be either an array, typed array, and an object
* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers
* @throws {TypeError} linear index argument must be integer valued
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} must provide a linear index which does not exceed array dimensions
* @returns {NonNegativeIntegerArray} subscripts
*
* @example
* var s = ind2sub( [ 3, 3, 3 ], 17 )
* // returns [ 1, 2, 2 ]
*
* @example
* var shape = [ 3, 3, 3 ];
* var out = new Array( shape.length );
*
* var s = ind2sub( out, shape, 17 )
* // returns [ 1, 2, 2 ]
*
* var bool = ( s === out );
* // returns true
*/
function ind2sub() {
	var options;
	var strides;
	var offset;
	var shape;
	var opts;
	var idx;
	var out;
	var err;

	opts = {};
	opts.mode = defaults.mode;
	opts.order = defaults.order;
	if ( arguments.length === 2 ) {
		shape = arguments[ 0 ];
		idx = arguments[ 1 ];
	} else if ( arguments.length === 3 ) {
		if ( isInteger( arguments[ 1 ] ) ) {
			shape = arguments[ 0 ];
			idx = arguments[ 1 ];
			options = arguments[ 2 ];
			err = validate( opts, options );
			if ( err ) {
				throw err;
			}
		} else {
			out = arguments[ 0 ];
			if ( typeof out !== 'object' || out === null ) {
				throw new TypeError( 'invalid input argument. Output argument must be either an array, typed array, or object. Value: `' + out + '`.' );
			}
			shape = arguments[ 1 ];
			idx = arguments[ 2 ];
		}
	} else {
		out = arguments[ 0 ];
		if ( typeof out !== 'object' || out === null ) {
			throw new TypeError( 'invalid input argument. Output argument must be either an array, typed array, or object. Value: `' + out + '`.' );
		}
		shape = arguments[ 1 ];
		idx = arguments[ 2 ];
		options = arguments[ 3 ];
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( !isNonNegativeIntegerArray( shape ) ) {
		throw new TypeError( 'invalid input argument. Shape argument must be an array-like object containing nonnegative integers. Value: `' + shape + '`.' );
	}
	if ( !isInteger( idx ) ) {
		throw new TypeError( 'invalid input argument. Linear index argument must be integer valued. Value: `' + idx + '`.' );
	}
	if ( out === void 0 ) {
		out = new Array( shape.length );
	}
	strides = shape2strides( shape, opts.order );
	offset = 0; // strides are positive, so offset is always zero
	return getSubscripts( out, shape, strides, offset, opts.order, idx, opts.mode ); // eslint-disable-line max-len
} // end FUNCTION ind2sub()


// EXPORTS //

module.exports = ind2sub;
