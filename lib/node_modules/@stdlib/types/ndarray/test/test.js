'use strict';

// MODULES //

var tape = require( 'tape' );
var ndarray = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ndarray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( value );
		};
	}
});

tape( 'the function throws an error if not provided either a `shape` or `buffer` option', function test( t ) {
	t.throws( badValue( {} ), Error, 'throws an error when not provided either a `shape` or `buffer` option' );
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		'beep',
		'boop',
		'foo',
		'bar',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'shape': [ 3, 2 ],
				'dtype': value
			};
			ndarray( opts );
		};
	}
});

tape( 'the function throws an error if provided a `shape` option which is incompatible with a provided buffer', function test( t ) {
	var opts = {
		'shape': [ 3, 3 ],
		'buffer': [ 1, 2, 3, 4, 5, 6 ]
	};
	t.throws( badValue( opts ), Error, 'throws an error when provided incompatible `shape` and `buffer` options' );
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( value );
		};
	}
});

// TODO: tests
