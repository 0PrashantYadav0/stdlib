'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, values[ i ] );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `shape` option which is not an array-like object containing nonnegative integers', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		[ 1, 1, -1 ],
		[ 3, 2, null ],
		[ 3, 2, 3.14 ],
		[ 3, 2, NaN ],
		[ 3, 2, '3' ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'shape': values[ i ]
		};
		err = validate( {}, opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `buffer` option which is not an array-like object', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'shape': [ 1 ],
			'buffer': values[ i ]
		};
		err = validate( {}, opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `dtype` option which is not supported/recognized', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		'beep',
		'boop',
		'foo',
		'bar',
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'shape': [ 1 ],
			'dtype': values[ i ]
		};
		err = validate( {}, opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided an `offset` option which is not a nonnegative integer', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		-5,
		3.14,
		true,
		false,
		void 0,
		null,
		NaN,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'shape': [ 1 ],
			'offset': values[ i ]
		};
		err = validate( {}, opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided an `order` option which is not supported/recognized', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		'beep',
		'boop',
		'foo',
		'bar',
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'shape': [ 1 ],
			'order': values[ i ]
		};
		err = validate( {}, opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `strides` option which is not an array-like object containing integers', function test( t ) {
	var values;
	var opts;
	var err;
	var i;

	values = [
		'5',
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		{},
		[],
		[ 3, 2, 3.14 ],
		[ 3, 2, null ],
		[ 3, 2, '1' ],
		[ 3, 2, NaN ],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		opts = {
			'shape': [ 1 ],
			'strides': values[ i ]
		};
		err = validate( {}, opts );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var options;
	var opts;
	var err;

	opts = {};
	options = {
		'shape': [ 2, 3 ],
		'buffer': [ 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0 ],
		'dtype': 'float32',
		'offset': 2,
		'order': 'row-major',
		'strides': [ 3, 1 ]
	};

	err = validate( opts, options );
	t.strictEqual( err, null, 'returns null' );
	t.deepEqual( opts, options, 'sets options' );

	t.end();
});

tape( 'the function will ignore unrecognized options', function test( t ) {
	var expected;
	var options;
	var opts;
	var err;

	opts = {};
	options = {
		'shape': [ 2, 3 ],
		'beep': true,
		'boop': 'bop'
	};
	expected = {
		'shape': [ 2, 3 ]
	};

	err = validate( opts, options );
	t.strictEqual( err, null, 'returns null' );
	t.deepEqual( opts, expected, 'ignores unrecognized options' );

	t.end();
});
