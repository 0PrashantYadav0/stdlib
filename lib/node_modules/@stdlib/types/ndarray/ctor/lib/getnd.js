'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var getIndex = require( '@stdlib/types/ndarray/base/ind' );


// FUNCTIONS //

/**
* Returns a method for returning an array element.
*
* @private
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for returning an array element
*/
function wrap( mode ) {
	var M = mode.length;
	return get;

	/**
	* Returns an array element.
	*
	* @private
	* @param {...integer} idx - indices
	* @throws {TypeError} provided indices must be integer valued
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/
	function get() {
		/* eslint-disable no-invalid-this */
		var len;
		var idx;
		var ind;
		var i;

		len = arguments.length;
		idx = this._offset;
		for ( i = 0; i < len; i++ ) {
			if ( !isInteger( arguments[ i ] ) ) {
				throw new TypeError( 'invalid input argument. Indices must be integer valued. Argument: '+i+'. Value: `'+arguments[i]+'`.' );
			}
			ind = getIndex( arguments[ i ], this._shape[ i ]-1, mode[ i%M ] );
			idx += this._strides[ i ] * ind;
		}
		return this._buffer[ idx ];
	} // end FUNCTION get()
} // end FUNCTION wrap()


// EXPORTS //

module.exports = wrap;
