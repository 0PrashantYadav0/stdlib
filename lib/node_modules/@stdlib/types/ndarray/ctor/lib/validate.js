'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isArray = require( '@stdlib/assert/is-array' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isIndexMode = require( '@stdlib/types/ndarray/base/assert/is-index-mode' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {boolean} [options.codegen] - boolean indicating whether to use code generation
* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions
* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'mode': 'clamp',
*     'submode': [ 'throw', 'wrap', 'clamp' ]
*     'codegen': false
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	var i;
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'codegen' ) ) {
		opts.codegen = options.codegen;
		if ( !isBoolean( opts.codegen ) ) {
			return new TypeError( 'invalid option. `codegen` option must be a boolean primitive. Option: `' + opts.codegen + '`.' );
		}
	}
	if ( hasOwnProp( options, 'mode' ) ) {
		opts.mode = options.mode;
		if ( !isIndexMode( opts.mode ) ) {
			return new TypeError( 'invalid option. `mode` option must be a recognized mode. Option: `' + opts.mode + '`.' );
		}
	}
	if ( hasOwnProp( options, 'submode' ) ) {
		opts.submode = options.submode;
		if ( !isArray( opts.submode ) ) {
			return new TypeError( 'invalid option. `submode` option must be an array containing recognized modes. Option: `' + opts.submode + '`.' );
		}
		if ( opts.submode.length === 0 ) {
			return new TypeError( 'invalid option. `submode` option must be an array containing recognized modes. Option: `' + opts.submode.join( ',' ) + '`.' );
		}
		for ( i = 0; i < opts.submode.length; i++ ) {
			if ( !isIndexMode( opts.submode[ i ] ) ) {
				return new TypeError( 'invalid option. Each `submode` must be a recognized modes. Option: `' + opts.submode[ i ] + '`.' );
			}
		}
		opts.submode = opts.submode.slice();
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;
