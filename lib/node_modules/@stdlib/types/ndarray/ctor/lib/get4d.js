'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var getIndex = require( '@stdlib/types/ndarray/base/ind' );


// FUNCTIONS //

/**
* Returns a method for returning an array element.
*
* @private
* @param {string} mode - specifies how to handle subscripts which exceed array dimensions
* @returns {Function} method for returning an array element
*/
function wrap( mode ) {
	return get;

	/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {integer} l - index for fourth dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {TypeError} index for fourth dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/
	function get( i, j, k, l ) {
		/* eslint-disable no-invalid-this */
		var idx;
		if ( !isInteger( i ) ) {
			throw new TypeError( 'invalid input argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );
		}
		if ( !isInteger( j ) ) {
			throw new TypeError( 'invalid input argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );
		}
		if ( !isInteger( k ) ) {
			throw new TypeError( 'invalid input argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );
		}
		if ( !isInteger( l ) ) {
			throw new TypeError( 'invalid input argument. Index for fourth dimension must be an integer value. Value: `'+l+'`.' );
		}
		i = getIndex( i, this._shape[ 0 ], mode );
		j = getIndex( j, this._shape[ 1 ], mode );
		k = getIndex( k, this._shape[ 2 ], mode );
		l = getIndex( l, this._shape[ 3 ], mode );

		idx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ) + ( this._strides[3]*l ); // eslint-disable-line max-len
		return this._buffer[ idx ];
	} // end FUNCTION get()
} // end FUNCTION wrap()


// EXPORTS //

module.exports = wrap;
