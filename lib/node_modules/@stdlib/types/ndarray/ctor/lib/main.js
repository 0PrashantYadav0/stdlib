'use strict';

// MODULES //

var baseCtor = require( '@stdlib/types/ndarray/base/ctor' );
var inherit = require( '@stdlib/utils/inherit' );
var defaults = require( './defaults.json' );


// MAIN //

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'float64', 3 );
* // returns <Function>
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/
function ctor( dtype, ndims, options ) {
	/* eslint-disable no-restricted-syntax */
	var parent;
	var opts;

	opts = {};
	if ( arguments.length > 2 ) {
		opts.codegen = ( options.codegen === void 0 ) ? defaults.codgen : options.codegen; // eslint-disable-line max-len
	} else {
		opts.codegen = defaults.codegen;
	}
	// Create a lower-level base constructor:
	parent = baseCtor( dtype, ndims, opts );

	/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @returns {ndarray} ndarray instance
	*/
	function ndarray( buffer, shape, strides, offset, order ) {
		/* eslint-disable no-invalid-this */
		if ( !(this instanceof ndarray) ) {
			return new ndarray( buffer, shape, strides, offset, order ); // eslint-disable-line no-new-cap
		}
		// TODO: input argument validation (?)

		// Call the parent constructor:
		parent.call( this, buffer, shape, strides, offset, order );

		// Cache references to the parent constructor and parent constructor methods:
		this._parent = parent;
		this._get = parent.prototype.get;
		this._set = parent.prototype.set;
		this._iget = parent.prototype.iget;
		this._iset = parent.prototype.iset;

		return this;
	} // end FUNCTION ndarray()

	// Inherit from the parent constructor:
	inherit( ndarray, parent );

	/**
	* Returns an array element.
	*
	* @private
	* @memberof ndarray.prototype
	* @name get
	* @type {Function}
	* @param {...integer} idx - indices
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*/
	Object.defineProperty( ndarray.prototype, 'get', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': function get() {
			var args;
			var len;
			var i;

			// TODO: perform sanity checks

			len = arguments.length;
			if ( len === 1 ) {
				// eslint-disable-next-line no-useless-call
				return this._get.call( this, arguments[ 0 ] );
			}
			if ( len === 2 ) {
				// eslint-disable-next-line no-useless-call
				return this._get.call( this, arguments[ 0 ], arguments[ 1 ] );
			}
			if ( len === 3 ) {
				// eslint-disable-next-line no-useless-call, max-len
				return this._get.call( this, arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
			}
			args = new Array( len );
			for ( i = 0; i < len; i++ ) {
				args[ i ] = arguments[ i ];
			}
			return this._get.apply( this, args );
		}
	});

	/**
	* Sets an array element.
	*
	* @private
	* @memberof ndarray.prototype
	* @name set
	* @type {Function}
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*
	* x.set( 1, 1, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.get( 1, 1 );
	* // returns 10
	*/
	Object.defineProperty( ndarray.prototype, 'set', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': function set() {
			var args;
			var len;
			var i;

			// TODO: perform sanity checks

			len = arguments.length;
			if ( len === 2 ) {
				// eslint-disable-next-line no-useless-call
				return this._set.call( this, arguments[ 0 ], arguments[ 1 ] );
			}
			if ( len === 3 ) {
				// eslint-disable-next-line no-useless-call, max-len
				return this._set.call( this, arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] ); // eslint-disable-line max-len
			}
			if ( len === 4 ) {
				// eslint-disable-next-line no-useless-call, max-len
				return this._set.call( this, arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], arguments[ 3 ] );
			}
			args = new Array( len );
			for ( i = 0; i < len; i++ ) {
				args[ i ] = arguments[ i ];
			}
			return this._set.apply( this, args );
		}
	});

	return ndarray;
} // end FUNCTION ctor()


// EXPORTS //

module.exports = ctor;
