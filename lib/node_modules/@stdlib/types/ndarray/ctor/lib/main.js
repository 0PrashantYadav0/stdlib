'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isIntegerArray = require( '@stdlib/assert/is-integer-array' ).primitives;
var isOrder = require( '@stdlib/types/ndarray/base/assert/is-order' );
var isDataType = require( '@stdlib/types/ndarray/base/assert/is-data-type' );
var bytesPerElement = require( '@stdlib/types/ndarray/base/bytes-per-element' );
var baseCtor = require( '@stdlib/types/ndarray/base/ctor' );
var inherit = require( '@stdlib/utils/inherit' );
var defaults = require( './defaults.json' );
var igetValue = require( './iget.js' );
var isetValue = require( './iset.js' );
var getValue = require( './get.js' );
var setValue = require( './set.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @throws {TypeError} first argument must be a supported ndarray data type
* @throws {TypeError} second argument must be a number having a positive integer value
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'generic', 3 );
* // returns <Function>
*
* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/
function ctor( dtype, ndims, options ) {
	var parent;
	var opts;
	var err;

	if ( !isDataType( dtype ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a supported ndarray data type. Value: `' + dtype + '`.' );
	}
	if ( !isPositiveInteger( ndims ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a positive integer. Value: `' + ndims + '`.' );
	}
	opts = {};
	opts.codegen = defaults.codegen;
	opts.mode = defaults.mode;
	if ( arguments.length > 2 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.submode === void 0 ) {
		opts.submode = [ opts.mode ];
	}
	// Create a lower-level base constructor:
	parent = baseCtor( dtype, ndims, opts );

	/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer
	* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers
	* @throws {Error} `shape` argument length must equal the number of dimensions
	* @throws {TypeError} `strides` argument must be an array-like object containing integers
	* @throws {Error} `strides` argument length must equal the number of dimensions
	* @throws {TypeError} `offset` argument must be a nonnegative integer
	* @throws {TypeError} `order` argument must be a supported ndarray order
	* @returns {ndarray} ndarray instance
	*/
	function ndarray( buffer, shape, strides, offset, order ) {
		/* eslint-disable no-invalid-this */
		if ( !(this instanceof ndarray) ) {
			return new ndarray( buffer, shape, strides, offset, order ); // eslint-disable-line no-new-cap
		}
		if (
			!isArrayLikeObject( buffer ) &&
			!isTypedArrayLike( buffer ) &&
			!isBuffer( buffer )
		) {
			throw new TypeError( 'invalid input argument. `buffer` argument must be an array-like object, typed-array-like, or a Buffer. Value: `' + buffer + '`.' );
		}
		if ( !isNonNegativeIntegerArray( shape ) ) {
			throw new TypeError( 'invalid input argument. `shape` argument must be an array-like object containing nonnegative integers. Value: `' + shape + '`.' );
		}
		if ( shape.length !== ndims ) {
			throw new Error( 'invalid input argument. `shape` length must match the number of dimensions. Expected number of dimensions: ' + ndims + '. Shape length: ' + shape.length + '.' );
		}
		if ( !isIntegerArray( strides ) ) {
			throw new TypeError( 'invalid input argument. `strides` argument must be an array-like object containing integers. Value: `' + strides + '`.' );
		}
		if ( strides.length !== ndims ) {
			throw new Error( 'invalid input argument. `strides` length must match the number of dimensions. Expected number of dimensions: ' + ndims + '. Strides length: ' + strides.length + '.' );
		}
		if ( !isNonNegativeInteger( offset ) ) {
			throw new TypeError( 'invalid input argument. `offset` argument must be a nonnegative integer. Value: `' + offset + '`.' );
		}
		if ( !isOrder( order ) ) {
			throw new TypeError( 'invalid input argument. `order` argument must be a supported order. Value: `' + order + '`.' );
		}
		// Call the parent constructor:
		parent.call( this, buffer, shape, strides, offset, order );

		// Cache references to the parent constructor and parent constructor methods:
		setReadOnly( this, '_parent', parent );

		return this;
	} // end FUNCTION ndarray()

	/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @memberof ndarray
	* @name BYTES_PER_ELEMENT
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var nbytes = ndarray.BYTES_PER_ELEMENT;
	* // returns <number>
	*/
	Object.defineProperty( ndarray, 'BYTES_PER_ELEMENT', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': bytesPerElement( dtype )
	});

	/**
	* Underlying data type.
	*
	* @private
	* @memberof ndarray
	* @name dtype
	* @type {string}
	*
	* @example
	* var dtype = ndarray.dtype;
	* // returns <string>
	*/
	Object.defineProperty( ndarray, 'dtype', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': dtype
	});

	/**
	* Number of dimensions.
	*
	* @private
	* @memberof ndarray
	* @name ndims
	* @type {PositiveInteger}
	*
	* @example
	* var ndims = ndarray.ndims;
	* // returns <number>
	*/
	Object.defineProperty( ndarray, 'ndims', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': ndims
	});

	// Inherit from the parent constructor:
	inherit( ndarray, parent );

	/**
	* Returns an array element.
	*
	* @private
	* @memberof ndarray.prototype
	* @name get
	* @type {Function}
	* @param {...integer} idx - indices
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*/
	Object.defineProperty( ndarray.prototype, 'get', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': getValue( ndims, opts.codegen, opts.submode )
	});

	/**
	* Returns an array element located at a specified linear index.
	*
	* @private
	* @memberof ndarray.prototype
	* @name iget
	* @type {Function}
	* @param {integer} idx - linear index
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*/
	Object.defineProperty( ndarray.prototype, 'iget', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': igetValue( parent.prototype.iget, opts.mode )
	});

	/**
	* Sets an array element.
	*
	* @private
	* @memberof ndarray.prototype
	* @name set
	* @type {Function}
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*
	* x.set( 1, 1, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.get( 1, 1 );
	* // returns 10
	*/
	Object.defineProperty( ndarray.prototype, 'set', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': setValue( ndims, opts.codegen, opts.submode )
	});

	/**
	* Sets an array element located at a specified linear index.
	*
	* @private
	* @memberof ndarray.prototype
	* @name iset
	* @type {Function}
	* @param {integer} idx - linear index
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*
	* x.iset( 3, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.iget( 3 );
	* // returns 10
	*/
	Object.defineProperty( ndarray.prototype, 'iset', {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': isetValue( parent.prototype.iset, opts.mode )
	});

	return ndarray;
} // end FUNCTION ctor()


// EXPORTS //

module.exports = ctor;
