'use strict';

// MAIN //

/**
* Returns a function factory for creating getter functions for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @returns {Function} getter factory
*
* @example
* var f = get( 3 );
* // returns <Function>
*/
function get( ndims ) {
	var n = ndims - 1;
	var f;
	var i;

	// Code generation. Start with the outer function definition...
	// > function createGetter( data, strides, offset ) {
	f = 'return function createGetter(d,s,o){';

	// Dereference stride elements...
	// > var s0 = strides[0], s1 = strides[1],...
	f += 'var ';
	for ( i = 0; i < ndims; i++ ) {
		f += 's' + i + '=s[' + i + ']';
		if ( i < n ) {
			f += ',';
		} else {
			f += ';';
		}
	}

	// Add the inner function definition...
	f += 'return function get(';

	// Create the index input arguments...
	// > function get( i0, i1, ...) {
	for ( i = 0; i < ndims; i++ ) {
		f += 'i' + i;
		if ( i < n ) {
			f += ',';
		}
	}
	f += '){';

	// Create the inner function body...

	// Index into the array according to the offset and strides...
	// > return d[offset+strides[0]*i0+strides[1]*i1+...];
	f += 'return d[o+';
	for ( i = 0; i < ndims; i++ ) {
		f += 's' + i + '*i' + i;
		if ( i < n ) {
			f += '+';
		}
	}
	f += '];';

	// Close the inner function:
	f += '};';

	// Close the outer function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=ndarray.ctor.get.js';

	// Create the outer function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* e.g., returns
	*     function createGetter( data, strides, offset ) {
	*         var s0 = strides[ 0 ], s1 = strides[ 1 ], s2 = strides[ 2 ];
	*         return function get( i0, i1, i2 ) {
	*             return data[ offset + s0*i0 + s1*i1 + s2*i2 ];
	*         };
	*     }
	*/
} // end FUNCTION get()


// EXPORTS //

module.exports = get;
