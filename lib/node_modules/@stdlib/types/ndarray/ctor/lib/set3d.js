'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var getIndex = require( '@stdlib/types/ndarray/base/ind' );


// FUNCTIONS //

/**
* Sets an array element.
*
* @private
* @param {integer} i - index for first dimension
* @param {integer} j - index for second dimension
* @param {integer} k - index for third dimension
* @param {*} v - value to set
* @throws {TypeError} index for first dimension must be an integer value
* @throws {TypeError} index for second dimension must be an integer value
* @throws {TypeError} index for third dimension must be an integer value
* @throws {RangeError} index exceeds array dimensions
* @returns {ndarray} ndarray instance
*/
function set( i, j, k, v ) {
	/* eslint-disable no-invalid-this */
	var idx;
	if ( !isInteger( i ) ) {
		throw new TypeError( 'invalid input argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );
	}
	if ( !isInteger( j ) ) {
		throw new TypeError( 'invalid input argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );
	}
	if ( !isInteger( k ) ) {
		throw new TypeError( 'invalid input argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );
	}
	i = getIndex( i, this._shape[ 0 ], this._mode );
	j = getIndex( j, this._shape[ 1 ], this._mode );
	k = getIndex( k, this._shape[ 2 ], this._mode );

	idx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ); // eslint-disable-line max-len
	this._buffer[ idx ] = v;
	return this;
} // end FUNCTION set()


// EXPORTS //

module.exports = set;
