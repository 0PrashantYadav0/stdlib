'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/types/array/float64' ); // eslint-disable-line no-redeclare
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var hasProp = require( '@stdlib/assert/has-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (row-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 4.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (row-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, -1 ];
	offset = 1;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 4.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 3.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (row-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ -2, 1 ];
	offset = 2;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 4.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 2.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (row-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ -2, -1 ];
	offset = 3;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 4.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 1.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (column-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'column-major';
	strides = [ 1, 2 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 4.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (column-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'column-major';
	strides = [ -1, 2 ];
	offset = 1;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 4.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 3.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (column-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'column-major';
	strides = [ 1, -2 ];
	offset = 2;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 4.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 2.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has an `iget` method for retrieving an array element using a linear index (column-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 2, 2 ];
	order = 'column-major';
	strides = [ -1, -2 ];
	offset = 3;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'iget' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'iget' ), true, 'has property' );
	t.strictEqual( isFunction( arr.iget ), true, 'has method' );

	t.strictEqual( arr.iget( 0 ), 4.0, 'returns expected value' );
	t.strictEqual( arr.iget( 1 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.iget( 2 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.iget( 3 ), 1.0, 'returns expected value' );

	t.end();
});
