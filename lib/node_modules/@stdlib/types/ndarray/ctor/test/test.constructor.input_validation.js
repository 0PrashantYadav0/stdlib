'use strict';

// MODULES //

var tape = require( 'tape' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `buffer` argument', function test( t ) {
	var strides;
	var ndarray;
	var values;
	var offset;
	var dtype;
	var order;
	var shape;
	var i;

	dtype = 'generic';
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	ndarray = ctor( dtype, shape.length );

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( value, shape, strides, offset, order );
		};
	}
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `shape` argument', function test( t ) {
	var strides;
	var ndarray;
	var values;
	var offset;
	var buffer;
	var dtype;
	var order;
	var i;

	dtype = 'generic';
	buffer = [ 0.0, 1.0, 2.0, 3.0 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	ndarray = ctor( dtype, strides.length );

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 3.14 ],
		[ -1, -2 ],
		[ 1, '1' ],
		[ 1, null ],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( buffer, value, strides, offset, order );
		};
	}
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `shape` argument (number of dimensions)', function test( t ) {
	var ndarray;
	var strides;
	var values;
	var offset;
	var buffer;
	var dtype;
	var order;
	var i;

	dtype = 'generic';
	buffer = [ 0.0, 1.0, 2.0, 3.0 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	ndarray = ctor( dtype, strides.length );

	values = [
		[ 2 ],
		[ 2, 2, 2 ],
		[ 2, 2, 2, 2 ],
		[ 2, 2, 2, 2, 2 ]
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( buffer, value, strides, offset, order );
		};
	}
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `strides` argument', function test( t ) {
	var ndarray;
	var values;
	var offset;
	var buffer;
	var shape;
	var dtype;
	var order;
	var i;

	dtype = 'generic';
	shape = [ 2, 2 ];
	buffer = [ 0.0, 1.0, 2.0, 3.0 ];
	order = 'row-major';
	offset = 0;

	ndarray = ctor( dtype, shape.length );

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 3.14 ],
		[ -1, -3.14 ],
		[ 1, '1' ],
		[ 1, null ],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( buffer, shape, value, offset, order );
		};
	}
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `strides` argument (number of dimensions)', function test( t ) {
	var ndarray;
	var values;
	var offset;
	var buffer;
	var shape;
	var dtype;
	var order;
	var i;

	dtype = 'generic';
	shape = [ 2, 2 ];
	buffer = [ 0.0, 1.0, 2.0, 3.0 ];
	order = 'row-major';
	offset = 0;

	ndarray = ctor( dtype, shape.length );

	values = [
		[ 1 ],
		[ 4, 2, 1 ],
		[ 4, 4, 2, 1 ],
		[ 4, 4, 4, 2, 1 ],
		[ 4, 4, 4, 4, 2, 1 ]
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( buffer, shape, value, offset, order );
		};
	}
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `offset` argument', function test( t ) {
	var strides;
	var ndarray;
	var values;
	var buffer;
	var shape;
	var dtype;
	var order;
	var i;

	dtype = 'generic';
	buffer = [ 0.0, 1.0, 2.0, 3.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];

	ndarray = ctor( dtype, shape.length );

	values = [
		'5',
		-5,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( buffer, shape, strides, value, order );
		};
	}
});

tape( 'the function returns an ndarray constructor which throws an error if not provided a valid `order` argument', function test( t ) {
	var strides;
	var ndarray;
	var values;
	var offset;
	var buffer;
	var dtype;
	var shape;
	var i;

	dtype = 'generic';
	buffer = [ 0.0, 1.0, 2.0, 3.0 ];
	shape = [ 2, 2 ];
	strides = [ 2, 1 ];
	offset = 0;

	ndarray = ctor( dtype, shape.length );

	values = [
		'c',
		'f',
		'c-style',
		'fortran',
		'fortran-style',
		'row',
		'column',
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ndarray( buffer, shape, strides, offset, value );
		};
	}
});
