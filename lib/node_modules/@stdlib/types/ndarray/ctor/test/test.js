'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/types/array/float64' ); // eslint-disable-line no-redeclare
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var hasProp = require( '@stdlib/assert/has-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'an ndarray constructor returns an instance which has a custom `toString()` method', function test( t ) {
	var expected;
	var strides;
	var actual;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var f;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 2;

	f = ctor( dtype, shape.length );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'toString' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'toString' ), true, 'has property' );
	t.strictEqual( isFunction( arr.toString ), true, 'has method' );

	expected = 'ndarray( [ 3, 4, 5, 6 ], [ 2, 2 ], [ 2, 1 ], 0, \'row-major\' )';
	actual = arr.toString();
	t.strictEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a custom `toString()` method', function test( t ) {
	var expected;
	var strides;
	var actual;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var f;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'column-major';
	strides = [ -1, -2 ];
	offset = 3;

	f = ctor( dtype, shape.length );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'toString' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'toString' ), true, 'has property' );
	t.strictEqual( isFunction( arr.toString ), true, 'has method' );

	expected = 'ndarray( [ 4, 3, 2, 1 ], [ 2, 2 ], [ 1, 2 ], 0, \'column-major\' )';
	actual = arr.toString();
	t.strictEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a custom `toString()` method (large array)', function test( t ) {
	var expected;
	var strides;
	var actual;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var f;

	dtype = 'generic';
	buffer = new Array( 1e4 );
	shape = [ buffer.length ];
	order = 'row-major';
	strides = [ 1 ];
	offset = 0;

	buffer[ 0 ] = 1.0;
	buffer[ 1 ] = 2.0;
	buffer[ 2 ] = 3.0;
	buffer[ buffer.length-3 ] = 4.0;
	buffer[ buffer.length-2 ] = 5.0;
	buffer[ buffer.length-1 ] = 6.0;

	f = ctor( dtype, shape.length );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'toString' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'toString' ), true, 'has property' );
	t.strictEqual( isFunction( arr.toString ), true, 'has method' );

	expected = 'ndarray( [ 1, 2, 3, ..., 4, 5, 6 ], [ 10000 ], [ 1 ], 0, \'row-major\' )';
	actual = arr.toString();
	t.strictEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a custom `toJSON()` method', function test( t ) {
	var expected;
	var strides;
	var actual;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var f;

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 2;

	f = ctor( dtype, shape.length );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'toJSON' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'toJSON' ), true, 'has property' );
	t.strictEqual( isFunction( arr.toJSON ), true, 'has method' );

	expected = {
		'type': 'ndarray',
		'dtype': 'float64',
		'data': [ 3.0, 4.0, 5.0, 6.0 ],
		'shape': [ 2, 2 ],
		'strides': [ 2, 1 ],
		'order': 'row-major',
		'flags': {}
	};
	actual = arr.toJSON();
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a custom `toJSON()` method', function test( t ) {
	var expected;
	var strides;
	var actual;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var f;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'column-major';
	strides = [ -1, -2 ];
	offset = 3;

	f = ctor( dtype, shape.length );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'toJSON' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'toJSON' ), true, 'has property' );
	t.strictEqual( isFunction( arr.toJSON ), true, 'has method' );

	expected = {
		'type': 'ndarray',
		'dtype': 'generic',
		'data': [ 4.0, 3.0, 2.0, 1.0 ],
		'shape': [ 2, 2 ],
		'strides': [ 1, 2 ],
		'order': 'column-major',
		'flags': {}
	};
	actual = arr.toJSON();
	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});
