'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/types/array/float64' ); // eslint-disable-line no-redeclare
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var hasProp = require( '@stdlib/assert/has-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'an ndarray constructor returns an instance which has a `get` method which throws an error if not provided an integer value (>4d; codegen=false)', function test( t ) {
	var strides;
	var values;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;
	var i;
	var j;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 1, 1, 1, 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1, 1, 1, 1 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'get' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'get' ), true, 'has property' );
	t.strictEqual( isFunction( arr.get ), true, 'has method' );

	values = [
		'5',
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		for ( j = 0; j < shape.length; j++ ) {
			t.throws( badValue( values[ i ], j ), TypeError, 'throws an error when provided ' + values[ i ] );
		}
	}
	t.end();

	function badValue( value, dim ) {
		return function badValue() {
			var args = new Array( shape.length );
			var i;

			for ( i = 0; i < args.length; i++ ) {
				if ( i === dim ) {
					args[ i ] = value;
				} else {
					args[ i ] = 0;
				}
			}
			arr.get.apply( arr, args );
		};
	}
});

tape( 'an ndarray constructor returns an instance which has a `get` method for retrieving an array element using subscripts (>4d; row-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 1, 2, 2, 1, 1 ];
	order = 'row-major';
	strides = [ 4, 2, 1, 1, 1 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'get' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'get' ), true, 'has property' );
	t.strictEqual( isFunction( arr.get ), true, 'has method' );

	t.strictEqual( arr.get( 0, 0, 0, 0, 0 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 0, 1, 0, 0 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 1, 0, 0, 0 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 1, 1, 0, 0 ), 4.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a `get` method for retrieving an array element using subscripts (>4d; column-major; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 1, 1, 2, 2, 1 ];
	order = 'column-major';
	strides = [ 1, 1, 1, 2, 4 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'get' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'get' ), true, 'has property' );
	t.strictEqual( isFunction( arr.get ), true, 'has method' );

	t.strictEqual( arr.get( 0, 0, 0, 0, 0 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 0, 0, 1, 0 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 0, 1, 0, 0 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 0, 1, 1, 0 ), 4.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a `get` method for retrieving an array element using subscripts (>4d; row-major; mode=wrap; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false,
		'mode': 'wrap'
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 1, 2, 2, 1, 1 ];
	order = 'row-major';
	strides = [ 4, 2, 1, 1, 1 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'get' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'get' ), true, 'has property' );
	t.strictEqual( isFunction( arr.get ), true, 'has method' );

	t.strictEqual( arr.get( 0, 10, 10, 0, 0 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 0, 5, 0, 0 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 5, 6, 0, 0 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, -1, -1, 0, 0 ), 4.0, 'returns expected value' );

	t.end();
});

tape( 'an ndarray constructor returns an instance which has a `get` method for retrieving an array element using subscripts (>4d; column-major; mode=wrap; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var f;

	opts = {
		'codegen': false,
		'mode': 'wrap'
	};

	dtype = 'float64';
	buffer = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	shape = [ 1, 2, 2, 1, 1 ];
	order = 'column-major';
	strides = [ 1, 1, 2, 4, 4 ];
	offset = 0;

	f = ctor( dtype, shape.length, opts );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( hasOwnProp( arr, 'get' ), false, 'does not have own property' );
	t.strictEqual( hasProp( arr, 'get' ), true, 'has property' );
	t.strictEqual( isFunction( arr.get ), true, 'has method' );

	t.strictEqual( arr.get( 0, 10, 10, 0, 0 ), 1.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 0, 5, 0, 0 ), 3.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, 5, 6, 0, 0 ), 2.0, 'returns expected value' );
	t.strictEqual( arr.get( 0, -1, -1, 0, 0 ), 4.0, 'returns expected value' );

	t.end();
});
