'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var CTORS = require( './ctors.js' );


// MAIN //

/**
* Creates a typed array.
*
* @param {(NonNegativeInteger|TypedArray|ArrayLikeObject|ArrayBuffer)} arg - a length, typed array, array-like object, or buffer
* @param {NonNegativeInteger} [byteOffset=0] - byte offset
* @param {NonNegativeInteger} [length] - view length
* @param {string} [dtype="float64"] - data type
* @throws {TypeError} must provide a recognized data type
* @returns {TypedArray} typed array
*
* @example
* var arr = typedarray();
* // returns <Float64Array>
*
* @example
* var arr = typedarray( 2 );
* // returns <Float64Array>[ 0.0, 0.0 ]
*
* @example
* var arr = typedarray( 2, 'float32' );
* // returns <Float32Array>[ 0.0, 0.0 ]
*
* @example
* var arr = typedarray( [ 0.5, 0.5 ] );
* // returns <Float64Array>[ 0.5, 0.5 ]
*
* @example
* var arr = typedarray( [ 5, -3 ], 'int32' );
* // returns <Int32Array>[ 5, -3 ]
*
* @example
* var arr1 = typedarray( [ 5, 3 ], 'int32' );
* var arr2 = typedarray( arr1 );
* // returns <Float64Array>[ 5.0, 3.0 ]
*
* @example
* var arr1 = typedarray( [ 5, 3 ], 'int32' );
* var arr2 = typedarray( arr1, 'uint32' );
* // returns <Uint32Array>[ 5, 3 ]
*
* @example
* var buf = new ArrayBuffer( 16 );
* var arr = typedarray( buf, 0, 4, 'int32' );
* // returns <Int32Array>[ 0, 0, 0, 0 ]
*/
function typedarray() {
	var nargs;
	var dtype;
	var ctor;

	nargs = arguments.length;
	if ( nargs && isString( arguments[ nargs-1 ] ) ) {
		nargs -= 1;
		dtype = arguments[ nargs ];
	} else {
		dtype = 'float64';
	}
	ctor = CTORS[ dtype ];
	if ( ctor === void 0 ) {
		throw new TypeError( 'invalid input argument. Must provide a recognized data type. Value: `'+dtype+'`.' );
	}
	if ( nargs <= 0 ) {
		return new ctor();
	}
	if ( nargs === 1 ) {
		return new ctor( arguments[0] );
	}
	if ( nargs === 2 ) {
		return new ctor( arguments[0], arguments[1] );
	}
	return new ctor( arguments[0], arguments[1], arguments[2] );
} // end FUNCTION typedarray()


// EXPORTS //

module.exports = typedarray;
