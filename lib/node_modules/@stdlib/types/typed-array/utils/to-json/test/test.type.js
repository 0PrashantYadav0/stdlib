'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var typeName = require( './../lib/type.js' );


// TESTS //

tape( 'file exports a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof typeName, 'function', 'export is a function' );
	t.end();
});

tape( 'if provided a typed array, the function returns the closest typed array type', function test( t ) {
	var expected;
	var values;
	var i;

	values = [
		new Float64Array( [ 5.0, 3.0 ] ),
		new Float32Array( [ 5.0, 3.0 ] ),
		new Int32Array( [ 5, 3 ] ),
		new Uint32Array( [ 5, 3 ] ),
		new Int16Array( [ 5, 3 ] ),
		new Uint16Array( [ 5, 3 ] ),
		new Int8Array( [ 5, 3 ] ),
		new Uint8Array( [ 5, 3 ] ),
		new Uint8ClampedArray( [ 5, 3 ] )
	];

	expected = [
		'Float64Array',
		'Float32Array',
		'Int32Array',
		'Uint32Array',
		'Int16Array',
		'Uint16Array',
		'Int8Array',
		'Uint8Array',
		'Uint8ClampedArray'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( typeName( values[i] ), expected[ i ], 'returns the constructor name: ' + expected[ i ] );
	}
	t.end();
});

tape( 'if provided a typed array from a different realm, the function returns the closest typed array type', function test( t ) {
	var typeName;
	var expected;
	var values;
	var i;

	typeName = proxyquire( './../lib/type.js', {
		'@stdlib/assert/instance-of': instanceOf
	});

	values = [
		new Float64Array( [ 5.0, 3.0 ] ),
		new Float32Array( [ 5.0, 3.0 ] ),
		new Int32Array( [ 5, 3 ] ),
		new Uint32Array( [ 5, 3 ] ),
		new Int16Array( [ 5, 3 ] ),
		new Uint16Array( [ 5, 3 ] ),
		new Int8Array( [ 5, 3 ] ),
		new Uint8Array( [ 5, 3 ] ),
		new Uint8ClampedArray( [ 5, 3 ] )
	];

	expected = [
		'Float64Array',
		'Float32Array',
		'Int32Array',
		'Uint32Array',
		'Int16Array',
		'Uint16Array',
		'Int8Array',
		'Uint8Array',
		'Uint8ClampedArray'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( typeName( values[i] ), expected[ i ], 'returns the constructor name: ' + expected[ i ] );
	}
	t.end();

	function instanceOf() {
		// Mocks comparing values from different realms...
		return false;
	}
});

tape( 'if not provided a typed array, the function returns `undefined`', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		NaN,
		5,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {},
		function typedarray() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( typeName( values[i] ), void 0, 'returns expected value' );
	}
	t.end();
});
