'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/math/base/random/randu' );
var parseJSON = require( '@stdlib/utils/parse-json' );
var pkg = require( './../package.json' ).name;
var reviver = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var str;
	var o;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = '{"type":"Float64Array","data":['+randu()+','+randu()+']}';
		o = parseJSON( str, reviver );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::no_reviver', function benchmark( b ) {
	var str;
	var o;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = '{"type":"Float64Array","data":['+randu()+','+randu()+']}';
		o = parseJSON( str );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::no_reviver,built-in', function benchmark( b ) {
	var str;
	var o;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		str = '{"type":"Float64Array","data":['+randu()+','+randu()+']}';
		o = JSON.parse( str );
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( typeof o !== 'object' ) {
		b.fail( 'should return an object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
