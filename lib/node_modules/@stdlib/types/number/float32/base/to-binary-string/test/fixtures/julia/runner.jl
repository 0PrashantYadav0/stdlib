#!/usr/bin/env julia

import JSON

"""
    gen( x, name )

Generate fixture data and write to file.

# Arguments

* `x`: domain
* `name::AbstractString`: output filename

# Examples

``` julia
julia> x = linspace( 1e-36, 1e-38, 1007 );
julia> gen( x, \"data.json\" );
```
"""
function gen( x, name )
	y = Array( Any, length(x) );
	z = Array( Any, length(x) );
	for i in eachindex(x)
		# Mimic implicit type promotion in JavaScript where we need to cast a Float64 to a Float32 before deriving a bit sequence:
		f32 = convert( Float32, x[i] );
	    y[i] = bits( f32 );
	    z[i] = convert( Float64, f32 );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("x", z),
		("expected", y)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Small values:
x = linspace( 1e-36, 1e-38, 1007 );
gen( x, "bits_1e-36_1e-38.json" );

# Medium values:
x = linspace( -1e3, 1e3, 1007 );
gen( x, "bits_-1e3_1e3.json" );

# Large values:
x = linspace( 1e36, 1e38, 1007 );
gen( x, "bits_1e36_1e38.json" );

# Subnormal values:
x = linspace( 1e-39, 1e-45, 1007 );
gen( x, "bits_1e-39_1e-45.json" );
