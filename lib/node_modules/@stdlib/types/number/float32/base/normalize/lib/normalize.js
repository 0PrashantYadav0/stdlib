'use strict';

// MODULES //

var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/math/constants/float32-smallest-normal' );
var PINF = require( '@stdlib/math/constants/float32-pinf' );
var NINF = require( '@stdlib/math/constants/float32-ninf' );
var abs = require( '@stdlib/math/base/special/abs' );
var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );


// VARIABLES //

// (1<<32)
var SCALAR = 8388608;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - single-precision floating-point number
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var toFloat32 = require( '@stdlib/math/base/utils/float64-to-float32' );
* var v = normalizef( toFloat32( 1.401e-45 ) );
* // returns [ 1.1754943508222875e-38, -23 ]
* @example
* var v = normalizef( 0.0 );
* // returns [ 0.0, 0 ];
* @example
* var PINF = require( '@stdlib/math/constants/float32-pinf' );
* var v = normalizef( PINF );
* // returns [ PINF, 0 ]
* @example
* var NINF = require( '@stdlib/math/constants/float32-ninf' );
* var v = normalizef( NINF );
* // returns [ NINF, 0 ]
* @example
* var v = normalizef( NaN );
* // returns [ NaN, 0 ]
*/
function normalizef( x ) {
	if (
		x !== x ||
		x === PINF ||
		x === NINF
	) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {
		x = toFloat32( x*SCALAR );
		return [ x, -23 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalizef()


// EXPORTS //

module.exports = normalizef;
