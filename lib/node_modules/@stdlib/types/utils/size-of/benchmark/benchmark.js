'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pkg = require( './../package.json' ).name;
var sizeOf = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var values;
	var s;
	var i;

	values = [
		'float64',
		'float32',
		'float16',
		'int32',
		'uint32',
		'int16',
		'uint16',
		'int8',
		'uint8',
		'uint8c',
		'complex128',
		'complex64'
	];
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		s = sizeOf( values[ i%values.length ] );
		if ( isnan( s ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( s ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
