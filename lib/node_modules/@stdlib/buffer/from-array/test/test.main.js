'use strict';

// MODULES //

var tape = require( 'tape' );
var Buffer = require( '@stdlib/buffer/ctor' );
var Uint8Array = require( '@stdlib/array/uint8' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isFunction = require( '@stdlib/assert/is-function' );
var fromArray = require( './../lib/main.js' );


// VARIABLES //

var opts = {
	'skip': !isFunction( Buffer.from )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof fromArray, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		Array,
		Buffer,
		Uint8Array,
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			fromArray( value );
		};
	}
});

tape( 'the function allocates a buffer using an octet array (array)', opts, function test( t ) {
	var buf;
	var arr;
	var i;

	arr = [ 1, 2, 3, 4 ];
	buf = fromArray( arr );

	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );

	for ( i = 0; i < arr.length; i++ ) {
		t.strictEqual( buf[ i ], arr[ i ], 'returns expected value for element ' + i );
	}
	t.end();
});

tape( 'the function allocates a buffer using an octet array (typed array)', opts, function test( t ) {
	var buf;
	var arr;
	var i;

	arr = new Uint8Array( [ 1, 2, 3, 4 ] );
	buf = fromArray( arr );

	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );

	for ( i = 0; i < arr.length; i++ ) {
		t.strictEqual( buf[ i ], arr[ i ], 'returns expected value for element ' + i );
	}
	t.end();
});

tape( 'the function allocates a buffer using an octet array (array-like)', opts, function test( t ) {
	var buf;
	var arr;
	var i;

	arr = {
		'length': 4,
		'0': 1,
		'1': 2,
		'2': 3,
		'3': 4
	};
	buf = fromArray( arr );

	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );

	for ( i = 0; i < arr.length; i++ ) {
		t.strictEqual( buf[ i ], arr[ i ], 'returns expected value for element ' + i );
	}
	t.end();
});

tape( 'if provided an empty array, the function returns an empty buffer', opts, function test( t ) {
	var buf = fromArray( [] );
	t.strictEqual( isBuffer( buf ), true, 'returns a buffer' );
	t.strictEqual( buf.length, 0, 'has expected length' );
	t.end();
});
