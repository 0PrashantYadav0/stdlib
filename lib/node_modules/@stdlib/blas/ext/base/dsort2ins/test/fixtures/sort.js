/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ascending = require( './ascending.js' );
var descending = require( './descending.js' );


// MAIN //

/**
* Sorts two arrays using built-in sort functionality.
*
* @private
* @param {PositiveInteger} N - number of indexed elements
* @param {number} order - sort order
* @param {Float64Array} x - first input array
* @param {integer} strideX - `x` index increment
* @param {NonNegativeInteger} offsetX - `x` starting index
* @param {Float64Array} y - second input array
* @param {integer} strideY - `y` index increment
* @param {NonNegativeInteger} offsetY - `y` starting index
*/
function sort( N, order, x, strideX, offsetX, y, strideY, offsetY ) {
	var tmp;
	var o;
	var i;

	tmp = [];
	for ( i = 0; i < N; i++ ) {
		tmp.push({
			'x': x[ offsetX+(i*strideX) ],
			'y': y[ offsetY+(i*strideY) ]
		});
	}
	if ( order > 0.0 ) {
		tmp.sort( ascending );
	} else if ( order < 0.0 ) {
		tmp.sort( descending );
	}
	for ( i = 0; i < N; i++ ) {
		o = tmp[ i ];
		x[ offsetX+(i*strideX) ] = o.x;
		y[ offsetY+(i*strideY) ] = o.y;
	}
}


// EXPORTS //

module.exports = sort;
