/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var floor = require( '@stdlib/math/base/special/floor' );
var tryFunction = require( '@stdlib/utils/try-function' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var factory = require( './../lib/daxpy.wasm.js' );


// VARIABLES //

var opts = {
	'skip': ( tryFunction( factory )() instanceof Error )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory({
				'memory': value
			});
		};
	}
});

tape( 'the function returns a function', opts, function test( t ) {
	var daxpy = factory();
	t.strictEqual( typeof daxpy, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (options)', opts, function test( t ) {
	var daxpy = factory({
		'memory': 16777216
	});
	t.strictEqual( typeof daxpy, 'function', 'returns a function' );
	t.end();
});

tape( 'attached to the returned function is a method to allocate memory', opts, function test( t ) {
	var daxpy = factory();
	t.strictEqual( typeof daxpy.malloc, 'function', 'has method' );
	t.end();
});

tape( 'attached to the returned function is a method to free memory', opts, function test( t ) {
	var daxpy = factory();
	t.strictEqual( typeof daxpy.free, 'function', 'has method' );
	t.end();
});

tape( 'the returned function has an arity of 6', opts, function test( t ) {
	var daxpy = factory();
	t.strictEqual( daxpy.length, 6, 'arity of 6' );
	t.end();
});

tape( 'the returned function multiplies `x` by a constant and adds the result to `y` (external data)', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var alpha;
	var view;
	var x;
	var y;
	var i;

	daxpy = factory();

	alpha = 2.0;
	x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	expected = new Float64Array( [ 3.0, 5.0, 7.0, 9.0, 11.0 ] );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	// Short datasets:
	x = new Float64Array( [ 1.0, 2.0 ] );
	y = new Float64Array( [ 1.0, 1.0 ] );

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	expected = new Float64Array( [ 3.0, 5.0 ] );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function multiplies `x` by a constant and adds the result to `y` (malloc)', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var alpha;
	var N;
	var x;
	var y;
	var i;

	daxpy = factory();

	alpha = 2.0;
	N = 5;

	xbytes = daxpy.malloc( N * 8 ); // 8 bytes per double
	ybytes = daxpy.malloc( N * 8 );

	x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );
	x.set( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );

	y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
	y.set( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );

	expected = new Float64Array( [ 3.0, 5.0, 7.0, 9.0, 11.0 ] );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	// Short datasets:
	N = 2;

	xbytes = daxpy.malloc( N * 8 );
	ybytes = daxpy.malloc( N * 8 );

	x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );
	x.set( [ 1.0, 2.0 ] );

	y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
	y.set( [ 1.0, 1.0 ] );

	expected = new Float64Array( [ 3.0, 5.0 ] );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function efficiently handles the case where `alpha` is `0`', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var alpha;
	var view;
	var x;
	var y;
	var i;

	daxpy = factory();

	x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );
	alpha = 0.0;

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	expected = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function supports an `x` stride', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var view;
	var x;
	var y;
	var N;
	var i;

	daxpy = factory();

	x = new Float64Array([
		1.0, // 0
		2.0,
		3.0, // 1
		4.0,
		5.0  // 2
	]);
	y = new Float64Array([
		1.0, // 0
		1.0, // 1
		1.0, // 2
		1.0,
		1.0
	]);
	N = 3;

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( N, 2.0, xbytes, 2, ybytes, 1 );

	expected = new Float64Array( [ 3.0, 7.0, 11.0, 1.0, 1.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function supports a `y` stride', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var view;
	var x;
	var y;
	var N;
	var i;

	daxpy = factory();

	x = new Float64Array([
		1.0, // 0
		2.0, // 1
		3.0, // 2
		4.0,
		5.0
	]);
	y = new Float64Array([
		1.0, // 0
		1.0,
		1.0, // 1
		1.0,
		1.0  // 2
	]);
	N = 3;

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( N, 2.0, xbytes, 1, ybytes, 2 );

	expected = new Float64Array( [ 3.0, 1.0, 5.0, 1.0, 7.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function returns a reference to the destination heap buffer', opts, function test( t ) {
	var xbytes;
	var ybytes;
	var daxpy;
	var out;
	var x;
	var y;

	daxpy = factory();

	x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	out = daxpy( x.length, 3.0, xbytes, 1, ybytes, 1 );

	t.strictEqual( out, ybytes, 'same reference' );

	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the returned function returns `y` unchanged', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var view;
	var x;
	var y;
	var i;

	daxpy = factory();

	x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	expected = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( -1, 3.0, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy( 0, 3.0, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function supports negative strides', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var view;
	var x;
	var y;
	var N;
	var i;

	daxpy = factory();

	x = new Float64Array([
		1.0, // 2
		2.0,
		3.0, // 1
		4.0,
		5.0  // 0
	]);
	y = new Float64Array([
		6.0, // 2
		7.0, // 1
		8.0, // 0
		9.0,
		10.0
	]);
	N = 3;

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( N, 3.0, xbytes, -2, ybytes, -1 );

	expected = new Float64Array( [ 9.0, 16.0, 23.0, 9.0, 10.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function supports complex access patterns', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var view;
	var x;
	var y;
	var N;
	var i;

	daxpy = factory();

	x = new Float64Array([
		1.0, // 0
		2.0,
		3.0, // 1
		4.0,
		5.0, // 2
		6.0
	]);
	y = new Float64Array([
		7.0,  // 2
		8.0,  // 1
		9.0,  // 0
		10.0,
		11.0,
		12.0
	]);
	N = 3;

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( N, 3.0, xbytes, 2, ybytes, -1 );

	expected = new Float64Array( [ 22.0, 17.0, 12.0, 10.0, 11.0, 12.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'the returned function supports view offsets', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var view;
	var x0;
	var y0;
	var x1;
	var y1;
	var N;
	var i;

	daxpy = factory();

	// Initial arrays...
	x0 = new Float64Array([
		1.0,
		2.0, // 2
		3.0,
		4.0, // 1
		5.0,
		6.0  // 0
	]);
	y0 = new Float64Array([
		7.0,
		8.0,
		9.0,
		10.0, // 0
		11.0, // 1
		12.0  // 2
	]);

	// Create offset views...
	x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 ); // begin at 2nd element
	y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 ); // begin at the 4th element

	N = floor( x0.length / 2 );

	xbytes = daxpy.malloc( x1.length * x1.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x1.buffer, x1.byteOffset ) );

	ybytes = daxpy.malloc( y1.length * y1.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y1.buffer, y1.byteOffset ) );

	daxpy( N, 3.0, xbytes, -2, ybytes, 1 );

	expected = new Float64Array([
		7.0,
		8.0,
		9.0,
		28.0,
		23.0,
		18.0
	]);

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y1.length );
	for ( i = 0; i < y1.length; i++ ) {
		y1[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y0[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'if both strides are equal to `1`, the returned function efficiently multiplies `x` by a constant and adds to `y`', opts, function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var daxpy;
	var alpha;
	var view;
	var x;
	var y;
	var i;

	daxpy = factory();

	alpha = 3.0;

	x = new Float64Array( 100 );
	y = new Float64Array( x.length );
	expected = new Float64Array( x.length );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = i;
		y[ i ] = x.length - i;
		expected[ i ] = ( x[i]*alpha ) + y[i];
	}

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	x = new Float64Array( 123 );
	y = new Float64Array( x.length );
	expected = new Float64Array( x.length );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = i*2;
		y[ i ] = x.length - i;
		expected[ i ] = ( x[i]*alpha ) + y[i];
	}

	xbytes = daxpy.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = daxpy.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	daxpy( x.length, alpha, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	daxpy.free( xbytes );
	daxpy.free( ybytes );

	t.end();
});

tape( 'if provided an unrecognized `x` heap buffer, the returned function throws an error', opts, function test( t ) {
	var daxpy = factory();
	var y;

	y = daxpy.malloc( 64 );

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		daxpy( 8, 5.0, new Uint8Array( 64 ), 1, y, 1 );
	}
});

tape( 'if provided an unrecognized `y` heap buffer, the returned function throws an error', opts, function test( t ) {
	var daxpy = factory();
	var x;

	x = daxpy.malloc( 64 );

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		daxpy( 8, 5.0, x, 1, new Uint8Array( 64 ), 1 );
	}
});

tape( 'if provided an `x` heap buffer which has already been freed, the returned function throws an error', opts, function test( t ) {
	var daxpy = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var xbytes = daxpy.malloc( 64 );
		var ybytes = daxpy.malloc( 64 );
		daxpy.free( xbytes );
		daxpy( 8, 5.0, xbytes, 1, ybytes, 1 );
	}
});

tape( 'if provided a `y` heap buffer which has already been freed, the returned function throws an error', opts, function test( t ) {
	var daxpy = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var xbytes = daxpy.malloc( 64 );
		var ybytes = daxpy.malloc( 64 );
		daxpy.free( ybytes );
		daxpy( 8, 5.0, xbytes, 1, ybytes, 1 );
	}
});

tape( 'if the `free` method is provided an unrecognized buffer, the returned function throws an error', opts, function test( t ) {
	var daxpy = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		daxpy.free( new Uint8Array( 64 ) );
	}
});

tape( 'if the `free` method is provided a buffer which has already been freed, the returned function throws an error', opts, function test( t ) {
	var daxpy = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var bytes = daxpy.malloc( 64 );
		daxpy.free( bytes );
		daxpy.free( bytes );
	}
});

tape( 'the returned function handles repeated memory allocation', opts, function test( t ) {
	var daxpy;
	var heaps;
	var i;

	daxpy = factory();

	heaps = new Array( 1e5 );
	for ( i = 0; i < heaps.length; i++ ) {
		heaps[ i ] = daxpy.malloc( 1 );
	}
	for ( i = 0; i < heaps.length; i++ ) {
		daxpy.free( heaps[ i ] );
	}
	t.pass( 'handles repeated memory allocation' );
	t.end();
});

tape( 'the buffer view returned when allocating memory supports accessing a value at a specific memory address', opts, function test( t ) {
	var daxpy;
	var bytes;
	var x;
	var y;

	daxpy = factory();

	x = new Float64Array( [ 0.0, 2.0, 4.0, 6.0, 8.0, 10.0 ] );

	bytes = daxpy.malloc( x.length*x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	// Default behavior:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT );
	t.strictEqual( y, 4.0, 'returns value' );

	// Specify type:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'returns value' );

	// Word:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'i32' );
	t.notEqual( y, 4.0, 'returns word' );

	daxpy.free( bytes );

	t.end();
});

tape( 'the buffer view returned when allocating memory supports setting a value at a specific memory address', opts, function test( t ) {
	var daxpy;
	var bytes;
	var x;
	var y;

	daxpy = factory();

	x = new Float64Array( [ 0.0, 2.0, 4.0, 6.0, 8.0, 10.0 ] );

	bytes = daxpy.malloc( x.length*x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	// Default behavior:
	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 10.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 10.0, 'set value' );

	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 4.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'reset value' );

	// Specify type:
	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 10.0, 'double' );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 10.0, 'set value' );

	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 4.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'reset value' );

	// Word:
	bytes.setValue( (2*x.BYTES_PER_ELEMENT) + 4, 10, 'i32' );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.notEqual( y, 4.0, 'sets word' );

	daxpy.free( bytes );

	t.end();
});
