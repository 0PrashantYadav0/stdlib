'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var pkg = require( './../package.json' ).name;
var dasum = require( './../lib/wasm.js' )();


// FUNCTIONS //

/**
* Wraps `dasum`, explicitly allocating upon receiving a typed array. This would need to happen if one wanted to provide unique externally defined arrays to a WASM interface.
*
* @private
* @param {PositiveInteger} N - number of values to sum
* @param {Float64Array} x - input array
* @param {PositiveInteger} stride - `x` stride length
* @returns {number} sum
*/
function wrapper( N, x, stride ) {
	var nbytes;
	var bytes;
	var s;

	// Determine the number of bytes:
	nbytes = x.length * x.BYTES_PER_ELEMENT;

	// Allocate space on the heap:
	bytes = dasum.malloc( nbytes );

	// Copy the data to the heap:
	bytes.set( new Uint8Array( x.buffer ) );

	// Compute the sum:
	s = dasum( N, bytes, stride );

	// Free the memory:
	dasum.free( bytes );

	return s;
}

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark( len ) {
	var x;
	var i;

	x = new Float64Array( len );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = ( randu()*20000.0 ) - 10000.0;
	}
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var y;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			y = wrapper( x.length, x, 1 );
			if ( isnan( y ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var len;
	var min;
	var max;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );
		f = createBenchmark( len );
		bench( pkg+'::wasm,malloc:len='+len, f );
	}
}

main();
