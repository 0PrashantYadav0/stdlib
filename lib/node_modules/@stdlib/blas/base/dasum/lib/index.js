'use strict';

/**
* Blas level 1 routine to compute the sum of absolute values.
*
* @module @stdlib/blas/base/dasum
*
* @example
* var dasum = require( '@stdlib/blas/base/dasum' );
*
* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* var s = dasum( x.length, x, 1 );
* // returns 15.0
*
* @example
* // Use the `ndarray` interface...
* var dasum = require( '@stdlib/blas/base/dasum' ).ndarray;
*
* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* var s = dasum( x.length, x, 1, 0 );
* // returns 15.0
*
* @example
* // Use the `wasm` interface:
* var wasm = require( '@stdlib/blas/base/dasum' ).wasm;
*
* // Number of data elements:
* var N = 5;
*
* // Allocate space on the heap:
* var bytes = wasm.malloc( N * 8 ); // 8 bytes per double
*
* // Create a Float64Array view:
* var view = new Float64Array( bytes.buffer, bytes.byteOffset, N );
*
* // Copy data to the heap:
* view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* // Compute the sum of absolute values:
* var s = dasum( N, bytes, 1 );
* // returns 15.0
*
* // Free the memory:
* wasm.free( bytes );
*/

// MODULES //

var join = require( 'path' ).join;
var isBrowser = require( '@stdlib/assert/is-browser' );
var tryRequire = require( '@stdlib/utils/try-require' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var wasm = require( './wasm.js' );


// MAIN //

var dasum;
if ( isBrowser ) {
	dasum = require( './main.js' );
} else {
	dasum = tryRequire( join( __dirname, './native.js' ) );
	if ( dasum instanceof Error ) {
		dasum = require( './main.js' );
	}
}
setReadOnly( dasum, 'wasm', wasm );


// EXPORTS //

module.exports = dasum;
