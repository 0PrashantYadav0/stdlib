/*
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/// <reference types="node"/>
/// <reference types="@stdlib/types"/>

import { Readable } from 'stream';
import * as random from '@stdlib/types/random';

interface Options {
	/**
	* Specifies whether a stream should operate in object mode (default: `false`).
	*/
	objectMode?: boolean;

	/**
	* Specifies how `Buffer` objects should be decoded to strings (default: `null`).
	*/
	encoding?: string | null;
	/**
	* Specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers.
	*/
	highWaterMark?: number;

	/**
	* Separator used to join streamed data (default: `'\n'`).
	*/
	sep?: string;

	/**
	* Number of iterations.
	*/
	iter?: number;

	/**
	* Pseudorandom number generator which generates uniformly distributed pseudorandom numbers.
	*/
	prng?: random.PRNG;

	/**
	* Pseudorandom number generator seed.
	*/
	seed?: random.PRNGSeedMT19937;

	/**
	* Pseudorandom number generator state.
	*/
	state?: random.PRNGStateMT19937;

	/**
	* Specifies whether to copy a provided pseudorandom number generator state (default: `true`).
	*/
	copy?: boolean;

	/**
	* Number of iterations after which to emit the PRNG state.
	*/
	siter?: number;
}

/**
* Stream constructor for generating a stream of pseudorandom numbers drawn from an arcsine distribution.
*/
declare class RandomStream extends Readable {
	/**
	* Returns a readable stream for generating a stream of pseudorandom numbers drawn from an arcsine distribution.
	*
	* @param a - minimum support
	* @param b - maximum support
	* @param options - stream options
	* @throws `a` must be less than `b`
	* @throws must provide valid options
	* @throws must provide a valid state
	* @returns stream instance
	*
	* @example
	*
	* var inspectStream = require( `@stdlib/streams/node/inspect-sink` );
	*
	* function log( chunk ) {
	*    console.log( chunk.toString() );
	* }
	*
	* var opts = {
	*     'iter': 10
	* };
	*
	* var stream = new RandomStream( 2.0, 5.0, opts );
	*
	* stream.pipe( inspectStream( log )  );
	*/
	constructor( a: number, b: number, options?: Options );

	/**
	* Destruction state.
	*/
	private readonly _destroyed: boolean; // tslint:disable-line: variable-name

	/**
	* Flag indicating whether a stream is operating in object mode.
	*/
	private readonly _objectMode: boolean; // tslint:disable-line: variable-name

	/**
	* Data separator.
	*/
	private readonly _sep: string; // tslint:disable-line: variable-name

	/**
	* Total number of iterations.
	*/
	private readonly _iter: number; // tslint:disable-line: variable-name

	/**
	* Number of iterations after which to emit the underlying PRNG state.
	*/
	private readonly _siter: number; // tslint:disable-line: variable-name

	/**
	* Iteration counter.
	*/
	private _i: number; // tslint:disable-line: variable-name

	/**
	* Pseudorandom number generator for generating arcsine distributed pseudorandom numbers.
	*/
	private readonly _prng: random.PRNG; // tslint:disable-line: variable-name

	/**
	* Underlying PRNG.
	*/
	readonly PRNG: random.PRNG;

	/**
	* PRNG seed.
	*/
	readonly seed: random.PRNGSeedMT19937;

	/**
	* PRNG seed length.
	*/
	readonly seedLength: number;

	/**
	* PRNG state.
	*/
	state: random.PRNGStateMT19937;

	/**
	* PRNG state length.
	*/
	readonly stateLength: number;

	/**
	* PRNG state size (in bytes).
	*/
	readonly byteLength: number;

	/**
	* Gracefully destroys a stream, providing backward compatibility.
	*
	* @param error - error
	*/
	destroy( error?: Error ): void;
}


// EXPORTS //

export = RandomStream;
