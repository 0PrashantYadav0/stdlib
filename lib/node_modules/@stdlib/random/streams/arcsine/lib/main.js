/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ReadableStream = require( 'readable-stream' ).Readable; // eslint-disable-line stdlib/no-redeclare
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var copy = require( '@stdlib/utils/copy' );
var inherit = require( '@stdlib/utils/inherit' );
var setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var rarcsine = require( '@stdlib/random/iterators/arcsine' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );
var debug = require( './debug.js' );


// MAIN //

/**
* Stream constructor for generating a stream of pseudorandom numbers drawn from an arcsine distribution.
*
* @constructor
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {Options} [options] - stream options
* @param {string} [options.sep='\n'] - separator used to join streamed data
* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options must be an object
* @throws {TypeError} must provide valid options
* @returns {RandomStream} Stream instance
*
* @example
* var inspectStream = require( '@stdlib/streams/utils/inspect' );
*
* function log( chunk ) {
*    console.log( chunk );
* }
*
* var opts = {
*     'iter': 10
* };
*
* var stream = new RandomStream( 2.0, 5.0, opts );
*
* stream.pipe( inspectStream( log )  );
*/
function RandomStream( a, b, options ) {
	var opts;
	var err;
	if ( !( this instanceof RandomStream ) ) {
		if ( arguments.length > 2 ) {
			return new RandomStream( a, b, options );
		}
		return new RandomStream( a, b );
	}
	if ( !isNumber( a ) || isnan( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !isNumber( b ) || isnan( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a >= b ) {
		throw new RangeError( 'invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `['+a+','+b+']`.');
	}
	opts = copy( DEFAULTS );
	if ( arguments.length > 2 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Make the stream a readable stream:
	debug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );
	ReadableStream.call( this, opts );

	// Destruction state:
	setNonEnumerable( this, '_destroyed', false );

	// Cache whether the stream is operating in object mode:
	setNonEnumerable( this, '_objectMode', opts.objectMode );

	// Cache the separator:
	setNonEnumerable( this, '_sep', opts.sep );

	// Initialize a counter:
	setNonEnumerable( this, '_count', 0 );

	// Create the underlying PRNG iterator:
	setReadOnly( this, 'prng', rarcsine( a, b, opts ) );

	return this;
}

/*
* Inherit from the `ReadableStream` prototype.
*/
inherit( RandomStream, ReadableStream );

/**
* Implements the `_read` method.
*
* @private
* @memberof RandomStream.prototype
* @function _read
* @param {number} size - number (of bytes) to read
*/
RandomStream.prototype._read = require( './_read.js' ); // eslint-disable-line no-underscore-dangle

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @memberof RandomStream.prototype
* @function destroy
* @param {Object} [error] - optional error message
* @returns {RandomStream} Stream instance
*/
RandomStream.prototype.destroy = require( './destroy.js' );


// EXPORTS //

module.exports = RandomStream;
