/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Readable = require( 'readable-stream' ).Readable;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isError = require( '@stdlib/assert/is-error' );
var copy = require( '@stdlib/utils/copy' );
var inherit = require( '@stdlib/utils/inherit' );
var defineProperty = require( '@stdlib/utils/define-property' );
var setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var rarcsine = require( '@stdlib/random/iterators/arcsine' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );
var debug = require( './debug.js' );


// MAIN //

/**
* Stream constructor for generating a stream of pseudorandom numbers drawn from an arcsine distribution.
*
* @constructor
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {Options} [options] - stream options
* @param {string} [options.sep='\n'] - separator used to join streamed data
* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers
* @param {NonNegativeInteger} [options.iter] - number of iterations
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {RandomStream} Stream instance
*
* @example
* var inspectStream = require( '@stdlib/streams/utils/inspect' );
*
* function log( chunk ) {
*    console.log( chunk );
* }
*
* var opts = {
*     'iter': 10
* };
*
* var stream = new RandomStream( 2.0, 5.0, opts );
*
* stream.pipe( inspectStream( log )  );
*/
function RandomStream( a, b, options ) {
	var opts;
	var err;
	if ( !( this instanceof RandomStream ) ) {
		if ( arguments.length > 2 ) {
			return new RandomStream( a, b, options );
		}
		return new RandomStream( a, b );
	}
	if ( !isNumber( a ) || isnan( a ) ) {
		throw new TypeError( 'invalid argument. First argument must be a number primitive and not `NaN`. Value: `'+a+'`.' );
	}
	if ( !isNumber( b ) || isnan( b ) ) {
		throw new TypeError( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `'+b+'`.' );
	}
	if ( a >= b ) {
		throw new RangeError( 'invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `['+a+','+b+']`.');
	}
	opts = copy( DEFAULTS );
	if ( arguments.length > 2 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Make the stream a readable stream:
	debug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );
	Readable.call( this, opts );

	// Destruction state:
	setNonEnumerable( this, '_destroyed', false );

	// Cache whether the stream is operating in object mode:
	setNonEnumerable( this, '_objectMode', opts.objectMode );

	// Cache the separator:
	setNonEnumerable( this, '_sep', opts.sep );

	// Initialize an iteration counter:
	setNonEnumerable( this, '_iter', 0 );

	// Create the underlying PRNG iterator:
	setReadOnly( this, 'prng', rarcsine( a, b, opts ) );

	return this;
}

/*
* Inherit from the `Readable` prototype.
*/
inherit( RandomStream, Readable );

/**
* Implements the `_read` method.
*
* @private
* @name _read
* @memberof RandomStream.prototype
* @type {Function}
* @param {number} size - number (of bytes) to read
* @returns {void}
*/
defineProperty( RandomStream.prototype, '_read', {
	'configurable': false,
	'enumerable': false,
	'writable': false,
	'value': function read() { // eslint-disable-line no-restricted-syntax
		var FLG;
		var r;

		FLG = true;
		while ( FLG ) {
			r = this.prng.next();
			if ( r.done ) {
				debug( 'Finished generating pseudorandom numbers.' );
				return this.push( null );
			}
			this._iter += 1;

			r = r.value.toString();
			debug( 'Generated a new pseudorandom number. Value: %s. Iter: %d.', r, this._iter );

			if ( this._objectMode === false ) {
				if ( this._iter === 1 ) {
					r = string2buffer( r );
				} else {
					r = string2buffer( this._sep+r );
				}
			}
			FLG = this.push( r );
		}
	}
});

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @name destroy
* @memberof RandomStream.prototype
* @type {Function}
* @param {(string|Object|Error)} [error] - optional error (message)
* @returns {RandomStream} Stream instance
*/
defineProperty( RandomStream.prototype, 'destroy', {
	'configurable': false,
	'enumerable': false,
	'writable': false,
	'value': function destroy( error ) { // eslint-disable-line no-restricted-syntax
		var self;
		if ( this._destroyed ) {
			debug( 'Attempted to destroy an already destroyed stream.' );
			return this;
		}
		self = this;
		this._destroyed = true;

		// TODO: replace with polyfill
		process.nextTick( close );

		return this;

		/**
		* Closes a stream.
		*
		* @private
		*/
		function close() {
			if ( error ) {
				debug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );
				self.emit( 'error', error );
			}
			debug( 'Closing the stream...' );
			self.emit( 'close' );
		}
	}
});


// EXPORTS //

module.exports = RandomStream;
