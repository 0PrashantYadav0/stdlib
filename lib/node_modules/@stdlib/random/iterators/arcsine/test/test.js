/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var now = require( '@stdlib/time/now' );
var arcsine = require( '@stdlib/random/base/arcsine' ).factory;
var iterator = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof iterator, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if minimum support `a` is not a number primitive', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		null,
		true,
		false,
		void 0,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterator( value, 2.0 );
		};
	}
});

tape( 'the function throws an error if maximum support `b` is not a number primitive', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		null,
		true,
		false,
		void 0,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterator( 2.0, value );
		};
	}
});

tape( 'the function throws an error if minimum support `a` is not less than maximum support `b`', function test( t ) {
	var values;
	var i;

	values = [
		[ 0.0, 0.0 ],
		[ -2.0, -4.0 ],
		[ 2.0, 1.0 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( arr ) {
		return function badValue() {
			iterator( arr[0], arr[1] );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (no other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		false,
		void 0,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterator( 2.0, 5.0, value );
		};
	}
});

tape( 'the function returns an iterator protocol-compliant object (no seed)', function test( t ) {
	var iter;
	var r;
	var i;

	iter = iterator( -10.0, 10.0 );
	t.equal( iter.next.length, 0, 'has zero arity' );

	for ( i = 0; i < 100; i++ ) {
		r = iter.next();
		t.equal( typeof r.value, 'number', 'returns a number' );
		t.equal( typeof r.done, 'boolean', 'returns a boolean' );
	}
	t.end();
});

tape( 'the function returns an iterator protocol-compliant object (seed)', function test( t ) {
	var iter1;
	var iter2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = now();

	iter1 = iterator( 0.0, 4.0, {
		'seed': seed
	});
	iter2 = iterator( 0.0, 4.0, {
		'seed': seed
	});

	t.notEqual( iter1, iter2, 'separate iterators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = iter1.next();
		r2 = iter2.next();
		t.equal( r1.value, r2.value, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned iterator is the generator seed', function test( t ) {
	var iter = iterator( 2.0, 5.0, {
		'seed': 12345
	});
	t.equal( typeof iter.SEED, 'number', 'has `SEED` property' );
	t.equal( iter.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'the function returns an iterator for generating pseudorandom numbers from an arcsine distribution', function test( t ) {
	var rand;
	var iter;
	var i;

	// Note: we assume that the underlying generator is the following PRNG...
	rand = arcsine( 2.0, 5.0, {
		'seed': 12345
	});

	iter = iterator( 2.0, 5.0, {
		'seed': 12345
	});

	for ( i = 0; i < 1e3; i++ ) {
		t.equal( rand(), iter.next().value, 'returns expected value' );
	}
	t.end();
});

tape( 'the function supports limiting the number of iterations', function test( t ) {
	var niter;
	var iter;
	var r;
	var i;
	var j;

	niter = 10;

	iter = iterator( 2.0, 5.0, {
		'iterations': niter
	});

	for ( i = 0; i < 100; i++ ) {
		r = iter.next();
		j = i + 1;
		if ( j <= niter ) {
			t.equal( typeof r.value, 'number', 'returns expected `value` value. iteration: '+j );
			t.equal( r.done, false, 'returns expected `done` value. iteration: '+j );
		} else {
			t.equal( r.value, void 0, 'returns expected `value` value. iteration: '+j );
			t.equal( r.done, true, 'returns expected `done` value. iteration: '+j );
		}
	}
	t.end();
});

tape( 'the returned iterator has a `return` method for closing an iterator (no argument)', function test( t ) {
	var iter;
	var r;

	iter = iterator( -10.0, 10.0 );

	r = iter.next();
	t.equal( typeof r.value, 'number', 'returns a number' );
	t.equal( r.done, false, 'returns expected value' );

	r = iter.next();
	t.equal( typeof r.value, 'number', 'returns a number' );
	t.equal( r.done, false, 'returns expected value' );

	r = iter.return();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	r = iter.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'the returned iterator has a `return` method for closing an iterator (argument)', function test( t ) {
	var iter;
	var r;

	iter = iterator( -10.0, 10.0 );

	r = iter.next();
	t.equal( typeof r.value, 'number', 'returns a number' );
	t.equal( r.done, false, 'returns expected value' );

	r = iter.next();
	t.equal( typeof r.value, 'number', 'returns a number' );
	t.equal( r.done, false, 'returns expected value' );

	r = iter.return( 'finished' );
	t.equal( r.value, 'finished', 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	r = iter.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'if an environment supports `Symbol.iterator`, the returned iterator is iterable', function test( t ) {
	var iterator;
	var iter1;
	var iter2;
	var i;

	iterator = proxyquire( './../lib/main.js', {
		'./iterator_symbol.js': '__ITERATOR_SYMBOL__'
	});

	iter1 = iterator( 2.0, 5.0 );
	t.equal( typeof iter1[ '__ITERATOR_SYMBOL__' ], 'function', 'has method' );
	t.equal( iter1[ '__ITERATOR_SYMBOL__' ].length, 0, 'has zero arity' );

	iter2 = iter1[ '__ITERATOR_SYMBOL__' ]();
	t.equal( typeof iter2, 'object', 'returns an object' );
	t.equal( typeof iter2.next, 'function', 'has `next` method' );
	t.equal( typeof iter2.return, 'function', 'has `return` method' );
	t.equal( iter2.SEED, iter1.SEED, 'has expected seed' );

	for ( i = 0; i < 100; i++ ) {
		t.equal( iter2.next().value, iter1.next().value, 'returns expected value' );
	}
	t.end();
});
