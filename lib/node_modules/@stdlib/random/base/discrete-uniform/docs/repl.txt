
{{alias}}( a, b )
    Returns a pseudorandom number drawn from a discrete uniform distribution.

    If `a > b`, the function returns `NaN`.

    If `a` or `b` is not an integer value, the function returns `NaN`.

    Parameters
    ----------
    a: integer
        Minimum support.

    b: integer
        Maximum support.

    Returns
    -------
    r: integer
        Pseudorandom number.

    Examples
    --------
    > var r = {{alias}}( 2, 50 );


{{alias}}.factory( [a, b, ][options] )
    Returns a pseudorandom number generator (PRNG) for generating pseudorandom
    numbers drawn from a discrete uniform distribution.

    If provided `a` and `b`, the returned PRNG returns random variates drawn
    from the specified distribution.

    If not provided `a` and `b`, the returned PRNG requires that both `a` and
    `b` be provided at each invocation.

    Parameters
    ----------
    a: integer (optional)
        Minimum support.

    b: integer (optional)
        Maximum support.

    options: Object (optional)
        Options.

    options.seed: any (optional)
        Pseudorandom number generator seed.

    Returns
    -------
    rand: Function
        Pseudorandom number generator (PRNG).

    Examples
    --------
    // Basic usage:
    > var rand = {{alias}}.factory();
    > var r = rand( 0, 10 );
    > r = rand( -20, 20 );

    // Provide `a` and `b`:
    > rand = {{alias}}.factory( 0, 10 );
    > r = rand();
    > r = rand();


{{alias}}.NAME
    Generator name.

    Examples
    --------
    > var str = {{alias}}.NAME
    'discrete-uniform'


{{alias}}.PRNG
    Underlying pseudorandom number generator.

    Examples
    --------
    > var prng = {{alias}}.PRNG;


{{alias}}.seed
    Pseudorandom number generator seed.

    Examples
    --------
    > var seed = {{alias}}.seed;


{{alias}}.state
    Generator state.

    Examples
    --------
    > var r = {{alias}}( 2, 50 )
    <number>
    > r = {{alias}}( 2, 50 )
    <number>
    > r = {{alias}}( 2, 50 )
    <number>

    // Get a copy of the current state:
    > var state = {{alias}}.state
    <Uint32Array>

    > r = {{alias}}( 2, 50 )
    <number>
    > r = {{alias}}( 2, 50 )
    <number>

    // Set the state:
    > {{alias}}.state = state;

    // Replay the last two pseudorandom numbers:
    > r = {{alias}}( 2, 50 )
    <number>
    > r = {{alias}}( 2, 50 )
    <number>


{{alias}}.STATE_LENGTH
    Length of generator state.

    Examples
    --------
    > var len = {{alias}}.STATE_LENGTH;


{{alias}}.STATE_SIZE
    Size (in bytes) of generator state.

    Examples
    --------
    > var sz = {{alias}}.STATE_SIZE;

    See Also
    --------

