/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
var randint32 = require( './rand_int32.js' );


// VARIABLES //

var NORMALIZATION_CONSTANT = (INT32_MAX - 1)|0; // asm type annotation
var MAX_SEED = (INT32_MAX - 1)|0; // asm type annotation
var A = 16807|0; // asm type annotation


// MAIN //

/**
* Returns a linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @param {Options} [options] - options
* @param {PositiveInteger} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} options argument must be an object
* @throws {TypeError} `seed` option must be a positive integer
* @throws {RangeError} `seed` option must be a positive integer less than the maximum signed 32-bit integer
* @returns {Function} LCG
*
* @example
* var minstd = factory();
*
* var v = minstd();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 20739838
*/
function factory( options ) {
	var state;
	var seed;
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'seed' ) ) {
			seed = options.seed;
			if ( !isPositiveInteger( seed ) ) {
				throw new TypeError( 'invalid option. `seed` option must be a positive integer. Option: `' + seed + '`.' );
			}
			if ( seed > MAX_SEED ) {
				throw new RangeError( 'invalid option. `seed` option must be a positive integer less than the maximum signed 32-bit integer. Option: `' + seed + '`.' );
			}
			state = seed|0; // asm type annotation
		} else {
			state = randint32()|0; // asm type annotation
		}
	} else {
		state = randint32()|0; // asm type annotation
	}
	setReadOnly( minstd, 'NAME', 'minstd' );
	setReadOnly( minstd, 'SEED', state );
	setReadOnly( minstd, 'MIN', 1 );
	setReadOnly( minstd, 'MAX', INT32_MAX-1 );
	setReadOnly( minstd, 'normalized', normalized );
	defineProperty( minstd, 'STATE', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	setReadOnly( minstd, 'STATE_LENGTH', null );
	setReadOnly( minstd, 'STATE_SIZE', 4 ); // 4 bytes per int32

	setReadOnly( normalized, 'NAME', minstd.NAME );
	setReadOnly( normalized, 'SEED', minstd.SEED );
	setReadOnly( normalized, 'MIN', (minstd.MIN-1.0) / NORMALIZATION_CONSTANT );
	setReadOnly( normalized, 'MAX', (minstd.MAX-1.0) / NORMALIZATION_CONSTANT );
	defineProperty( normalized, 'STATE', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	setReadOnly( normalized, 'STATE_LENGTH', minstd.STATE_LENGTH );
	setReadOnly( normalized, 'STATE_SIZE', minstd.STATE_SIZE );

	return minstd;

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {integer32} current state
	*/
	function getState() {
		return state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PositiveInteger} s - generator state
	* @throws {TypeError} must provide a positive integer
	* @throws {RangeError} must provide a positive integer less than the maximum signed 32-bit integer
	*/
	function setState( s ) {
		if ( !isPositiveInteger( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + s + '`.' );
		}
		if ( s > MAX_SEED ) {
			throw new RangeError( 'invalid argument. Must provide a positive integer less than the maximum signed 32-bit integer. Value: `' + s + '`.' );
		}
		state = s|0; // asm type annotation
	}

	/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*/
	function minstd() {
		state = ( (A*state)%INT32_MAX )|0; // asm type annotation
		return state;
	}

	/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*/
	function normalized() {
		return (minstd()-1) / NORMALIZATION_CONSTANT;
	}
}


// EXPORTS //

module.exports = factory;
