/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isCollection = require( '@stdlib/assert/is-collection' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isInt32Array = require( '@stdlib/assert/is-int32array' );
var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
var Int32Array = require( '@stdlib/array/int32' );
var gcopy = require( '@stdlib/blas/base/gcopy' );
var randint32 = require( './rand_int32.js' );


// VARIABLES //

var NORMALIZATION_CONSTANT = (INT32_MAX - 1)|0; // asm type annotation
var MAX_SEED = (INT32_MAX - 1)|0; // asm type annotation
var A = 16807|0; // asm type annotation


// MAIN //

/**
* Returns a linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @param {Options} [options] - options
* @param {(integer32|Collection<integer32>)} [options.seed] - pseudorandom number generator seed
* @param {Int32Array} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than or equal to the maximum signed 32-bit integer or an array-like object containing integers less than or equal to the maximum signed 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than or equal to the maximum signed 32-bit integer
* @throws {TypeError} state must be an `Int32Array`
* @throws {RangeError} insufficient state length
* @throws {TypeError} `copy` option must be a boolean
* @returns {Function} LCG PRNG
*
* @example
* var minstd = factory();
*
* var v = minstd();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 20739838
*/
function factory( options ) {
	var state;
	var seed;
	var slen;
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'copy' ) ) {
			if ( !isBoolean( options.copy ) ) {
				throw new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + options.copy + '`.' );
			}
		}
		if ( hasOwnProp( options, 'state' ) ) {
			state = options.state;
			if ( !isInt32Array( state ) ) {
				throw new TypeError( 'invalid option. `state` option must be an Int32Array. Option: `' + state + '`.' );
			}
			// Determine the seed length:
			slen = state.length - 1;
			if ( slen <= 0 ) {
				throw new RangeError( 'invalid option. `state` option has insufficient length.' );
			}
			if ( options.copy === false ) {
				// Create a state "view":
				state = new Int32Array( state.buffer, state.byteOffset, 1 );

				// Create a seed "view":
				seed = new Int32Array( state.buffer, state.byteOffset+(1*state.BYTES_PER_ELEMENT), slen ); // eslint-disable-line max-len
			} else {
				// Extract the state:
				state = gcopy( 1, state, 1, new Int32Array( 1 ), 1 );

				// Extract the PRNG seed:
				seed = gcopy.ndarray( slen, state, 1, 1, new Int32Array( slen ), 1, 0 ); // eslint-disable-line max-len
			}
		}
		// If provided a PRNG state, we ignore the `seed` option...
		if ( seed === void 0 ) {
			if ( hasOwnProp( options, 'seed' ) ) {
				seed = options.seed;
				if ( isPositiveInteger( seed ) ) {
					if ( seed > MAX_SEED ) {
						throw new RangeError( 'invalid option. `seed` option must be a positive integer less than the maximum signed 32-bit integer. Option: `' + seed + '`.' );
					}
					seed |= 0; // asm type annotation
				} else if ( isCollection( seed ) && seed.length > 0 ) {
					slen = seed.length;

					// Create an internal copy of the provided seed array to prevent the inability to reproduce PRNG values based on the PRNG's stated seed due to external state mutation:
					seed = gcopy( slen, seed, 1, new Int32Array( slen ), 1 );

					// Initialize the internal PRNG state:
					state = new Int32Array( 1 );
					state[ 0 ] = seed[ 0 ];
				} else {
					throw new TypeError( 'invalid option. `seed` option must be either a positive integer less than or equal to the maximum signed 32-bit integer or an array-like object containing integer values less than or equal to the maximum signed 32-bit integer. Option: `' + seed + '`.' );
				}
			} else {
				seed = randint32()|0; // asm type annotation
			}
		}
	} else {
		seed = randint32()|0; // asm type annotation
	}
	if ( state === void 0 ) {
		state = new Int32Array( 1 );
		state[ 0 ] = seed;

		seed = new Int32Array( [ seed ] );
		slen = 1;
	}
	setReadOnly( minstd, 'NAME', 'minstd' );
	defineProperty( minstd, 'SEED', {
		'configurable': false,
		'enumerable': true,
		'get': getSeed
	});
	setReadOnly( minstd, 'MIN', 1 );
	setReadOnly( minstd, 'MAX', INT32_MAX-1 );
	setReadOnly( minstd, 'normalized', normalized );
	defineProperty( minstd, 'STATE', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	defineProperty( minstd, 'STATE_LENGTH', {
		'configurable': false,
		'enumerable': true,
		'get': getStateLength
	});
	defineProperty( minstd, 'STATE_SIZE', {
		'configurable': false,
		'enumerable': true,
		'get': getStateSize
	});

	setReadOnly( normalized, 'NAME', minstd.NAME );
	defineProperty( normalized, 'SEED', {
		'configurable': false,
		'enumerable': true,
		'get': getSeed
	});
	setReadOnly( normalized, 'MIN', (minstd.MIN-1.0) / NORMALIZATION_CONSTANT );
	setReadOnly( normalized, 'MAX', (minstd.MAX-1.0) / NORMALIZATION_CONSTANT );
	defineProperty( normalized, 'STATE', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	defineProperty( normalized, 'STATE_LENGTH', {
		'configurable': false,
		'enumerable': true,
		'get': getStateLength
	});
	defineProperty( normalized, 'STATE_SIZE', {
		'configurable': false,
		'enumerable': true,
		'get': getStateSize
	});

	return minstd;

	/**
	* Returns the generator seed.
	*
	* @private
	* @returns {Int32Array} seed
	*/
	function getSeed() {
		return gcopy( slen, seed, 1, new Int32Array( slen ), 1 );
	}

	/**
	* Returns the current pseudorandom number generate state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/
	function getStateLength() {
		return 1 + slen;
	}

	/**
	* Returns the current pseudorandom number generate state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/
	function getStateSize() {
		return getStateLength() * 4; // 4 bytes per int32
	}

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {Int32Array} current state
	*/
	function getState() {
		var out = new Int32Array( getStateLength() );

		// Copy the internal state:
		out[ 0 ] = state[ 0 ];

		// Copy the seed:
		out = gcopy.ndarray( slen, seed, 1, 0, out, 1, 1 );

		return out;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {Int32Array} s - generator state
	* @throws {TypeError} must provide an `Int32Array`
	* @throws {RangeError} must provide an `Int32Array` having sufficient length
	*/
	function setState( s ) {
		if ( !isInt32Array( s ) ) {
			throw new TypeError( 'invalid argument. Must provide an Int32Array. Value: `' + s + '`.' );
		}
		// Determine the seed length:
		slen = s.length - 1;
		if ( slen <= 0 ) {
			throw new RangeError( 'invalid argument. The provided array has insufficient length.' );
		}
		// Update the PRNG state:
		state[ 0 ] = s[ 0 ];

		// Set the seed:
		seed = gcopy.ndarray( slen, s, 1, 1, new Int32Array( slen ), 1, 0 );
	}

	/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*/
	function minstd() {
		var s = state[ 0 ]|0; // asm type annotation
		s = ( (A*s)%INT32_MAX )|0; // asm type annotation
		state[ 0 ] = s;
		return s|0; // asm type annotation
	}

	/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*/
	function normalized() {
		return (minstd()-1) / NORMALIZATION_CONSTANT;
	}
}


// EXPORTS //

module.exports = factory;
