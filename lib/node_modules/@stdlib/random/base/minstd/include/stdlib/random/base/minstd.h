/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDLIB_RANDOM_BASE_MINSTD_H
#define STDLIB_RANDOM_BASE_MINSTD_H

#include <stdint.h>

/**
* MINSTD PRNG structure.
*
* @example
* #include <stdlib.h>
* #include <stdio.h>
* #include "stdlib/random/base/minstd.h"
*
* struct stdlib_base_minstd_prng *prng = malloc( sizeof( struct stdlib_base_minstd_prng ) );
* if ( prng == NULL ) {
*     fprintf( stderr, "Error allocating memory.\n" );
*     exit( 1 );
* }
*
* // Free allocated memory:
* stdlib_base_minstd_prng_free( prng );
*/
struct stdlib_base_minstd_prng {
	// Define the generator name:
	const char *name;

	// Define the minimum possible generated integer value:
	const int32_t min;

	// Define the maximum possible generated integer value:
	const int32_t max;

	// Define the minimum possible generated double-precision floating-point number:
	const double normalized_min;

	// Define the maximum possible generated double-precision floating-point number:
	const double normalized_max;

	// Define a pointer to the generator seed:
	const int32_t seed;

	// Define a pointer to the generator state:
	int32_t state;

	// Define a pointer to a function for returning the next generated value:
	int32_t (* const next)( struct stdlib_base_minstd_prng *prng );

	// Define a pointer to a function for returning the next generated value on the interval `[0,1)`:
	double (* const normalized)( struct stdlib_base_minstd_prng *prng );
};

/**
* Returns a pointer to a dynamically allocated MINSTD PRNG.
*/
struct stdlib_base_minstd_prng * stdlib_base_minstd_prng_allocate( const int32_t seed );

/**
* Frees a MINSTD PRNG's allocated memory.
*/
void stdlib_base_minstd_prng_free( struct stdlib_base_minstd_prng *prng );

#endif // !STDLIB_RANDOM_BASE_MINSTD_H
