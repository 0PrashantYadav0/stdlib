/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ENV = require( '@stdlib/process/env' );
var chi2gof = require( '@stdlib/stats/chi2gof' );
var now = require( '@stdlib/time/now' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( ENV.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var bernoulli;
	var r;
	var i;

	// When binding distribution parameters...
	bernoulli = factory( 0.05 );
	for ( i = 0; i < 100; i++ ) {
		r = bernoulli();
		t.equal( typeof r, 'number', 'returns a number' );
	}

	// Without binding distribution parameters...
	bernoulli = factory();
	for ( i = 0; i < 100; i++ ) {
		r = bernoulli( 0.1 );
		t.equal( typeof r, 'number', 'returns a number' );
	}

	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var bernoulli1;
	var bernoulli2;
	var seed;
	var r1;
	var r2;
	var i;

	seed = now();

	bernoulli1 = factory( 0.3, {
		'seed': seed
	});
	bernoulli2 = factory( 0.3, {
		'seed': seed
	});

	t.notEqual( bernoulli1, bernoulli2, 'separate generators' );

	for ( i = 0; i < 100; i++ ) {
		r1 = bernoulli1();
		r2 = bernoulli2();
		t.equal( r1, r2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var bernoulli = factory();
	t.equal( bernoulli.NAME, 'bernoulli', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var bernoulli = factory();
	t.equal( typeof bernoulli.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var bernoulli = factory({
		'seed': 12345
	});
	t.equal( isUint32Array( bernoulli.SEED ), true, 'has `SEED` property' );
	t.equal( bernoulli.SEED[ 0 ], 12345, 'equal to provided seed' );
	t.end();
});

tape( 'attached to the returned function is the generator state', function test( t ) {
	var bernoulli = factory();
	t.equal( isUint32Array( bernoulli.STATE ), true, 'has `STATE` property' );
	t.end();
});

tape( 'attached to the returned function is the generator state length', function test( t ) {
	var bernoulli = factory();
	t.equal( typeof bernoulli.STATE_LENGTH, 'number', 'has `STATE_LENGTH` property' );
	t.end();
});

tape( 'attached to the returned function is the generator state size', function test( t ) {
	var bernoulli = factory();
	t.equal( typeof bernoulli.STATE_SIZE, 'number', 'has `STATE_SIZE` property' );
	t.end();
});

tape( 'the function throws an error if provided a probability argument which is not a probability (no options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		-1.0,
		3.14,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided a probability argument which is not a probability (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		-1.0,
		3.14,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value, {} );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (no other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		null,
		true,
		false,
		void 0,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (other arguments)', function test( t ) {
	var values;
	var i;

	values = [
		'abc',
		5,
		null,
		true,
		false,
		void 0,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( 0.3, value );
		};
	}
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a probability equal to `NaN`', function test( t ) {
	var bernoulli;
	var r;

	bernoulli = factory();
	r = bernoulli( NaN );

	t.strictEqual( isnan( r ), true, 'returns NaN' );
	t.end();
});

tape( 'when called without arguments, the function returns a PRNG that returns `NaN` when provided a probability argument which is not a probability', function test( t ) {
	var bernoulli;
	var r;

	bernoulli = factory();

	r = bernoulli( 3.14 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = bernoulli( -1.0 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	r = bernoulli( -3.14 );
	t.strictEqual( isnan( r ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns a PRNG for generating random numbers from a Bernoulli distribution', opts, function test( t ) {
	var threshold;
	var repeats;
	var count;
	var npass;
	var freq;
	var N;
	var p;
	var x;

	threshold = 0.12;

	p = 0.67;

	freq = new Array( 30 );
	repeats = 200;
	N = 1e3;

	count = -1;
	npass = 0;

	gof();

	function gof() {
		var bernoulli;
		var rejected;
		var pValue;
		var bool;
		var i;
		var j;

		count += 1;
		rejected = 0;
		for ( i = 0; i < repeats; i++ ) {
			bernoulli = factory( p );
			t.ok( true, 'seed: '+bernoulli.SEED );

			// Reset the `freq` array...
			for ( j = 0; j < freq.length; j++ ) {
				freq[ j ] = 0;
			}
			for ( j = 0; j < N; j++ ) {
				x = bernoulli();
				freq[ x ] += 1;
			}
			// Test using chi-square goodness-of-fit test:
			pValue = chi2gof( freq, 'bernoulli', p, {
				'simulate': true,
				'iterations': 500
			}).pValue;
			t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
			if ( pValue < 0.05 ) {
				rejected += 1;
			}
		}
		// Account for small sample sizes and few repeats...
		bool = ( rejected / repeats < threshold );

		// If we succeed the first time, we are done...
		if ( count === 0 && bool ) {
			return done( bool, rejected );
		}
		// Retry mode...
		if ( bool ) {
			npass += 1;
		}
		// Retry twice...
		if ( count < 2 ) {
			return gof();
		}
		// Both retries must succeed for test to pass:
		bool = ( npass >= 2 );
		return done( bool, rejected );
	}

	function done( bool, rejected ) {
		t.ok( bool, 'null hypothesis (i.e., that numbers are drawn from Bernoulli('+p+') is rejected in less than '+(threshold*100)+'% of cases ('+rejected+' of '+repeats+'). Repeats: '+npass+' of '+count+'.' );
		t.end();
	}
});

tape( 'the returned function supports setting the generator state', function test( t ) {
	var bernoulli;
	var state;
	var arr;
	var i;

	bernoulli = factory( 0.3 );

	// Move to a future state...
	for ( i = 0; i < 100; i++ ) {
		bernoulli();
	}
	// Capture the current state:
	state = bernoulli.STATE;

	// Move to a future state...
	arr = [];
	for ( i = 0; i < 100; i++ ) {
		arr.push( bernoulli() );
	}
	// Set the state:
	bernoulli.STATE = state;

	// Replay previously generated values...
	for ( i = 0; i < 100; i++ ) {
		t.equal( bernoulli(), arr[ i ], 'returns expected value. i: '+i+'.' );
	}
	t.end();
});
