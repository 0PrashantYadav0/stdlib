/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var defaults = require( './defaults.json' );
var PRNGS = require( './prngs.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating random numbers having integer values.
*
* @param {Options} opts - function options
* @param {string} [opts.name='minstd-shuffle'] - name of pseudorandom number generator
* @param {*} [opts.seed] - pseudorandom number generator seed
* @throws {TypeError} must provide an object
* @throws {Error} must provide the name of a supported pseudorandom number generator
* @returns {Function} pseudorandom number generator
*
* @example
* var randi = factory();
* var v = randi();
* // returns <number>
*
* @example
* var randi = factory({
*     'name': 'minstd'
* });
* var v = randi();
* // returns <number>
*
* @example
* var randi = factory({
*     'seed': 12345
* });
* var v = randi();
* // returns <number>
*
* @example
* var randi = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
* var v = randi();
* // returns <number>
*/
function factory( opts ) {
	var rand;
	var name;
	var prng;
	var seed;
	if ( arguments.length ) {
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Must provide an object. Value: `' + opts + '`.' );
		}
		if ( hasOwnProp( opts, 'name' ) ) {
			name = opts.name;
		} else {
			name = defaults.name;
		}
		if ( hasOwnProp( opts, 'seed' ) ) {
			seed = opts.seed;
		}
	} else {
		name = defaults.name;
	}
	prng = PRNGS[ name ];
	if ( prng === void 0 ) {
		throw new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + name + '`.' );
	}
	if ( seed === void 0 ) {
		rand = prng.factory();
	} else {
		rand = prng.factory( seed );
	}
	setReadOnly( randi, 'NAME', 'randi' );
	setReadOnly( randi, 'SEED', rand.SEED );
	setReadOnly( randi, 'MIN', rand.MIN );
	setReadOnly( randi, 'MAX', rand.MAX );
	setReadOnly( randi, 'PRNG', rand );

	return randi;

	/**
	* Returns a pseudorandom number having an integer value.
	*
	* @private
	* @returns {integer} pseudorandom number
	*
	* @example
	* var v = randi();
	* // returns <number>
	*/
	function randi() {
		return rand();
	}
}


// EXPORTS //

module.exports = factory;
