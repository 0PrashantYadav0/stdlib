/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var now = require( '@stdlib/time/now' );
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a value which is not an object, the factory function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		3.14,
		NaN,
		true,
		null,
		undefined,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an unrecognized/unsupported PRNG name', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		'boop',
		'foo',
		'bar'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory({
				'name': value
			});
		};
	}
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var randi;
	var v;
	var i;

	randi = factory();
	for ( i = 0; i < 1e4; i++ ) {
		v = randi();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( isInteger( v ), true, 'returns an integer' );
		t.equal( v >= randi.MIN && v <= randi.MAX, true, 'returns a number between MIN (inclusive) and MAX (inclusive)' );
	}
	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var randi1;
	var randi2;
	var seed;
	var v1;
	var v2;
	var i;

	seed = now();

	randi1 = factory({
		'seed': seed
	});
	randi2 = factory({
		'seed': seed
	});

	t.notEqual( randi1, randi2, 'separate generators' );

	for ( i = 0; i < 1e3; i++ ) {
		v1 = randi1();
		v2 = randi2();
		t.equal( v1, v2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var randi = factory();
	t.equal( randi.NAME, 'randi', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var randi = factory({
		'seed': 12345
	});
	t.equal( isArrayLikeObject( randi.SEED ), true, 'has `SEED` property' );
	t.equal( randi.SEED[ 0 ], 12345, 'equal to provided seed' );
	t.end();
});

tape( 'attached to the returned function is the minimum possible generated number', function test( t ) {
	var randi = factory();
	t.equal( typeof randi.MIN, 'number', 'has `MIN` property' );
	t.equal( isInteger( randi.MIN ), true, 'is an integer' );
	t.end();
});

tape( 'attached to the returned function is the maximum possible generated number', function test( t ) {
	var randi = factory();
	t.equal( typeof randi.MAX, 'number', 'has `MAX` property' );
	t.equal( isInteger( randi.MAX ), true, 'is an integer' );
	t.end();
});

tape( 'attached to the returned function is the underlying PRNG', function test( t ) {
	var randi = factory();
	t.equal( typeof randi.PRNG, 'function', 'has `PRNG` property' );
	t.end();
});

tape( 'the function supports specifying the underlying PRNG', function test( t ) {
	var randi;
	var v;
	var i;

	randi = factory({
		'name': 'minstd'
	});

	t.equal( randi.PRNG.NAME, 'minstd', 'expected `PRNG` value' );

	for ( i = 0; i < 1e3; i++ ) {
		v = randi();
		t.equal( v >= randi.MIN && v <= randi.MAX, true, 'returns a number between MIN (inclusive) and MAX (inclusive)' );
	}
	t.end();
});
