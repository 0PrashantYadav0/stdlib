
{{alias}}( α, β )
    Returns a pseudorandom number drawn from a beta prime distribution.

    If `α <= 0` or `β <= 0`, the function returns `NaN`.

    If `α` or `β` is `NaN`, the function returns `NaN`.

    Parameters
    ----------
    α: number
        First shape parameter.

    β: number
        Second shape parameter.

    Returns
    -------
    r: number
        Pseudorandom number.

    Examples
    --------
    > var r = {{alias}}( 2.0, 5.0 );


{{alias}}.factory( [α, β, ][options] )
    Returns a pseudorandom number generator (PRNG) for generating pseudorandom
    numbers drawn from a beta prime distribution.

    If provided `α` and `β`, the returned PRNG returns random variates drawn
    from the specified distribution.

    If not provided `α` and `β`, the returned PRNG requires that both `α` and
    `β` be provided at each invocation.

    Parameters
    ----------
    α: number (optional)
        First shape parameter.

    β: number (optional)
        Second shape parameter.

    options: Object (optional)
        Options.

    options.seed: any (optional)
        Pseudorandom number generator seed.

    Returns
    -------
    rand: Function
        Pseudorandom number generator (PRNG).

    Examples
    --------
    // Basic usage:
    > var rand = {{alias}}.factory();
    > var r = rand( 1.5, 1.5 );
    > r = rand( 2.0, 3.14 );

    // Provide `α` and `β`:
    > rand = {{alias}}.factory( 1.5, 1.5 );
    > r = rand();
    > r = rand();


{{alias}}.NAME
    Generator name.

    Examples
    --------
    > var str = {{alias}}.NAME
    'betaprime'


{{alias}}.PRNG
    Underlying pseudorandom number generator.

    Examples
    --------
    > var prng = {{alias}}.PRNG;


{{alias}}.SEED
    Pseudorandom number generator seed.

    Examples
    --------
    > var seed = {{alias}}.SEED;


{{alias}}.STATE
    Generator state.

    Examples
    --------
    > var r = {{alias}}( 0.3 )
    <number>
    > r = {{alias}}( 0.3 )
    <number>
    > r = {{alias}}( 0.3 )
    <number>

    // Get a copy of the current state:
    > var state = {{alias}}.STATE
    <Uint32Array>

    > r = {{alias}}( 0.3 )
    <number>
    > r = {{alias}}( 0.3 )
    <number>

    // Set the state:
    > {{alias}}.STATE = state;

    // Replay the last two pseudorandom numbers:
    > r = {{alias}}( 0.3 )
    <number>
    > r = {{alias}}( 0.3 )
    <number>


{{alias}}.STATE_SIZE
    Size of generator state.

    Examples
    --------
    > var sz = {{alias}}.STATE_SIZE;

    See Also
    --------

