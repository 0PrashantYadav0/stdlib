/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var gammaFactory = require( '@stdlib/random/base/gamma' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var validate = require( './validate.js' );
var betaprime0 = require( './_betaprime.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating beta prime distributed random numbers.
*
* @param {PositiveNumber} [alpha] - first shape parameter
* @param {PositiveNumber} [beta] - second shape parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} `options` must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var betaprime = factory( 2.0, 1.0 );
* var v = betaprime();
* // returns <number>
*
* @example
* var betaprime = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = betaprime();
* // returns ~0.411
*/
function factory() {
	var alpha;
	var beta;
	var opts;
	var rand;
	var prng;
	var err;

	if ( arguments.length === 0 ) {
		rand = gammaFactory();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = gammaFactory( opts );
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = validate( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = gammaFactory( opts );
		} else {
			rand = gammaFactory();
		}
	}
	if ( alpha === void 0 ) {
		prng = betaprime2;
	} else {
		prng = betaprime1;
	}
	setReadOnly( prng, 'NAME', 'betaprime' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns a random number drawn from a beta prime distribution with bound parameter values.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = betaprime1();
	* // returns <number>
	*/
	function betaprime1() {
		return betaprime0( rand, alpha, beta );
	}

	/**
	* Returns a random number drawn from a beta prime distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - first shape parameter
	* @param {PositiveNumber} beta - second shape parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = betaprime2( 2.0, 3.0 );
	* // returns <number>
	*/
	function betaprime2( alpha, beta ) {
		if (
			isnan( alpha ) ||
			isnan( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		return betaprime0( rand, alpha, beta );
	}
}


// EXPORTS //

module.exports = factory;
