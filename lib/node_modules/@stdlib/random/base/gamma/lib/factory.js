/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var randn = require( '@stdlib/random/base/improved-ziggurat' ).factory;
var randu = require( '@stdlib/random/base/mt19937' ).factory;
var minstd = require( '@stdlib/random/base/minstd-shuffle' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;
var Uint32Array = require( '@stdlib/array/uint32' );
var validate = require( './validate.js' );
var gamma0 = require( './gamma.js' );


// VARIABLES //

var ONE_THIRD = 1.0 / 3.0;


// MAIN //

/**
* Returns a pseudorandom number generator for generating gamma distributed random numbers.
*
* @param {PositiveNumber} [alpha] - shape parameter
* @param {PositiveNumber} [beta] - rate parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var gamma = factory( 2.0, 1.0 );
* var v = gamma();
* // returns <number>
*
* @example
* var gamma = factory( 2.0, 2.0, {
*     'seed': 297
* });
* var v = gamma();
* // returns <number>
*/
function factory() {
	var alpha;
	var rnorm;
	var randi;
	var beta;
	var opts;
	var rand;
	var prng;
	var err;
	var N;
	var M;
	var c;
	var d;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = randu( opts );
	} else {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		err = validate( alpha, beta );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	rand = rand.normalized;

	randi = minstd({
		'seed': ( rand.SEED%(minstd.MAX+1) ) || 1
	});
	rnorm = randn({
		'seed': randi()
	});

	N = rand.STATE_SIZE;
	M = rnorm.STATE_SIZE;

	if ( alpha === void 0 ) {
		prng = gamma2;
	} else {
		if ( alpha >= 1.0 ) {
			prng = gamma1a;
			d = alpha - ONE_THIRD;
		} else {
			prng = gamma1b;
			d = alpha + 1.0 - ONE_THIRD;
		}
		c = 1.0 / sqrt( 9.0*d );
	}
	setReadOnly( prng, 'NAME', 'gamma' );
	setReadOnly( prng, 'SEED', rand.SEED );
	defineProperty( prng, 'STATE', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	setReadOnly( prng, 'STATE_SIZE', N+M );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {Uint32Array} current state
	*/
	function getState() {
		var out;
		var s1;
		var s2;

		s1 = rand.STATE;
		s2 = rnorm.STATE;

		out = new Uint32Array( N+M );
		gcopy( N, s1, 1, 0, out, 1, 0 );
		gcopy( M, s2, 1, 0, out, 1, N );

		return out;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {Uint32Array} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {RangeError} must provide a `Uint32Array` having an expected length
	*/
	function setState( s ) {
		var buf;
		var o;
		if ( !isUint32Array( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		if ( s.length !== N+M ) {
			throw new RangeError( 'invalid argument. The provided array has an unexpected length.' );
		}
		buf = s.buffer;
		o = s.byteOffset;
		rand.STATE = new Uint32Array( buf, o, N );
		rnorm.STATE = new Uint32Array( buf, o+(N*s.BYTES_PER_ELEMENT), M );
	}

	/**
	* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha >= 1`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma1a();
	* // returns <number>
	*/
	function gamma1a() {
		return gamma0( rand, rnorm, beta, d, c );
	}

	/**
	* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha < 1`.
	*
	* @private
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma1b();
	* // returns <number>
	*/
	function gamma1b() {
		return gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );
	}

	/**
	* Returns a pseudorandom number drawn from a gamma distribution.
	*
	* @private
	* @param {PositiveNumber} alpha - shape parameter
	* @param {PositiveNumber} beta - rate parameter
	* @returns {PositiveNumber} pseudorandom number
	*
	* @example
	* var v = gamma2( 2.0, 4.0 );
	* // returns <number>
	*
	* @example
	* var v = gamma2( 3.0, 0.0 );
	* // returns NaN
	*
	* @example
	* var v = gamma2( 0.0, 2.0 );
	* // returns NaN
	*
	* @example
	* var v = gamma2( NaN, NaN );
	* // returns NaN
	*/
	function gamma2( alpha, beta ) {
		var c;
		var d;
		if (
			isnan( alpha ) ||
			isnan( beta ) ||
			alpha <= 0.0 ||
			beta <= 0.0
		) {
			return NaN;
		}
		if ( alpha < 1.0 ) {
			d = alpha + 1.0 - ONE_THIRD;
			c = 1.0 / sqrt( 9.0*d );
			return gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );
		}
		d = alpha - ONE_THIRD;
		c = 1.0 / sqrt( 9.0*d );
		return gamma0( rand, rnorm, beta, d, c );
	}
}


// EXPORTS //

module.exports = factory;
