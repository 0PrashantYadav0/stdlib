'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isFunction = require( '@stdlib/assert/is-function' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var randu = require( '@stdlib/random/base/randu' ).factory;
var randn0 = require( './_randn.js' );
var getMin = require( './min.js' );
var getMax = require( './max.js' );


// MAIN //

/**
* Returns a pseudorandom number generator which implements the Box-Muller transform to generate standard normally distributed pseudorandom numbers.
*
* @param {Options} options - function options
* @param {Function} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @returns {Function} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var r = randn();
* // returns <number>
*
* @example
* // Return a seeded PRNG:
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/
function factory( options ) {
	var randn;
	var rand;
	var seed;
	var v;
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'prng' ) ) {
			if ( !isFunction( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			rand = options.prng;
		}
		if ( hasOwnProp( options, 'seed' ) ) {
			seed = options.seed;
		}
	}
	if ( rand === void 0 ) {
		if ( seed === void 0 ) {
			rand = randu();
		} else {
			rand = randu({
				'seed': seed
			});
		}
	}
	randn = randn0( rand );
	setReadOnly( randn, 'NAME', 'box-muller' );
	setReadOnly( randn, 'PRNG', rand );

	if ( hasOwnProp( rand, 'SEED' ) ) {
		v = rand.SEED;
	} else {
		v = null;
	}
	setReadOnly( randn, 'SEED', v );

	if ( hasOwnProp( rand, 'MIN' ) ) {
		v = getMin( rand.MIN );
	} else {
		v = null;
	}
	setReadOnly( randn, 'MIN', v );

	if ( hasOwnProp( rand, 'MIN' ) ) {
		v = getMax( rand.MIN );
	} else {
		v = null;
	}
	setReadOnly( randn, 'MAX', v );

	return randn;
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;
