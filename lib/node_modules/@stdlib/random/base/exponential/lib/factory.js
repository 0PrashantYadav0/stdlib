'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var randu = require( '@stdlib/random/base/randu' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exponential0 = require( './_exponential.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating exponentially distributed random numbers.
*
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var exponential = factory( 0.5 );
* var v = exponential();
* // returns <number>
*
* @example
* var exponential = factory( 0.8, {
*     'seed': 297
* });
* var v = exponential();
* // returns ~0.519
*
* @example
* var exponential = factory()
* var v = exponential( 0.5 );
* // returns <number>
*/
function factory() {
	var lambda;
	var opts;
	var rand;
	var prng;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		rand = randu( arguments[ 0 ] );
	} else {
		lambda = arguments[ 0 ];
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a positive number. Value: `' + lambda + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	if ( lambda === void 0 ) {
		prng = exponential2;
	} else {
		prng = exponential1;
	}
	setReadOnly( prng, 'NAME', 'exponential' );
	setReadOnly( prng, 'SEED', rand.SEED );
	setReadOnly( prng, 'PRNG', rand.PRNG );

	return prng;

	/**
	* Returns a pseudorandom number drawn from an exponential distribution with bound parameter `lambda`.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = exponential1();
	* // returns <number>
	*/
	function exponential1() {
		return exponential0( rand, lambda );
	}

	/**
	* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.
	*
	* @private
	* @param {PositiveNumber} lambda - rate parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = exponential2( 4.8 );
	* // returns <number>
	*/
	function exponential2( lambda ) {
		if (
			isnan( lambda ) ||
			lambda <= 0.0
		) {
			return NaN;
		}
		return exponential0( rand, lambda );
	}
}


// EXPORTS //

module.exports = factory;
