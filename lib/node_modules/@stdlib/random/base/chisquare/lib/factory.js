/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var rgamma = require( '@stdlib/random/base/gamma' ).factory;
var chisquare0 = require( './chisquare.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating chi-square distributed random numbers.
*
* @param {PositiveNumber} [k] - degrees of freedom
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var chisquare = factory( 2 );
* var v = chisquare();
* // returns <number>
*
* @example
* var chisquare = factory( 2, {
*     'seed': 297
* });
* var v = chisquare();
* // returns <number>
*/
function factory() {
	var rand;
	var opts;
	var prng;
	var k;
	if ( arguments.length === 0 ) {
		rand = rgamma();
	} else if (
		arguments.length === 1 &&
		isObject( arguments[ 0 ] )
	) {
		rand = rgamma( arguments[ 0 ] );
	} else {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + k + '`.' );
		}
		if ( arguments.length > 1 ) {
			opts = arguments[ 1 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = rgamma( k/2.0, 0.5, opts );
		} else {
			rand = rgamma( k/2.0, 0.5 );
		}
	}
	if ( k === void 0 ) {
		prng = chisquare2;
	} else {
		prng = chisquare1;
	}
	setReadOnly( prng, 'NAME', 'chisquare' );
	setReadOnly( prng, 'seed', rand.seed );
	defineProperty( prng, 'STATE', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	setReadOnly( prng, 'STATE_LENGTH', rand.STATE_LENGTH );
	setReadOnly( prng, 'STATE_SIZE', rand.STATE_SIZE );
	setReadOnly( prng, 'PRNG', rand.PRNG );

	return prng;

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {Uint32Array} current state
	*/
	function getState() {
		return rand.STATE;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {Uint32Array} s - generator state
	*/
	function setState( s ) {
		rand.STATE = s;
	}

	/**
	* Returns a random number drawn from a chi-square distribution with bound `k`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare1();
	* // returns <number>
	*/
	function chisquare1() {
		return chisquare0( rand, k );
	}

	/**
	* Returns a random number drawn from a chi-square distribution with degrees of freedom `k`.
	*
	* @private
	* @param {PositiveNumber} k - degrees of freedom
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = chisquare2( 2 );
	* // returns <number>
	*/
	function chisquare2( k ) {
		if (
			isnan( k ) ||
			k <= 0
		) {
			return NaN;
		}
		return chisquare0( rand, k );
	}
}


// EXPORTS //

module.exports = factory;
