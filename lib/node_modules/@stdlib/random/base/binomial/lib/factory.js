/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isProbability = require( '@stdlib/math/base/assert/is-probability' );
var randu = require( '@stdlib/random/base/mt19937' ).factory;
var validate = require( './validate.js' );
var binomial0 = require( './binomial.js' );


// MAIN //

/**
* Returns a pseudorandom number generator for generating binomially distributed random numbers.
*
* @param {PositiveInteger} [n] - number of trials
* @param {Probability} [p] - success probability
* @param {Options} [options] - function options
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a probability
* @throws {TypeError} options argument must be an object
* @returns {Function} pseudorandom number generator
*
* @example
* var binomial = factory( 17, 0.5 );
* var v = binomial();
* // returns <number>
*
* @example
* var binomial = factory( 8, 0.8, {
*     'seed': 297
* });
* var v = binomial();
* // returns <number>
*
* @example
* var binomial = factory();
* var v = binomial( 20, 0.5 );
* // returns <number>
*/
function factory() {
	var opts;
	var rand;
	var prng;
	var err;
	var n;
	var p;

	if ( arguments.length === 0 ) {
		rand = randu();
	} else if ( arguments.length === 1 ) {
		opts = arguments[ 0 ];
		if ( !isObject( opts ) ) {
			throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
		}
		rand = randu( opts );
	} else {
		n = arguments[ 0 ];
		p = arguments[ 1 ];
		err = validate( n, p );
		if ( err ) {
			throw err;
		}
		if ( arguments.length > 2 ) {
			opts = arguments[ 2 ];
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );
			}
			rand = randu( opts );
		} else {
			rand = randu();
		}
	}
	rand = rand.normalized;

	if ( n === void 0 ) {
		prng = binomial2;
	}
	else {
		prng = binomial1;
	}
	setReadOnly( prng, 'NAME', 'binomial' );
	setReadOnly( prng, 'seed', rand.seed );
	defineProperty( prng, 'state', {
		'configurable': false,
		'enumerable': true,
		'get': getState,
		'set': setState
	});
	setReadOnly( prng, 'stateLength', rand.stateLength );
	setReadOnly( prng, 'byteLength', rand.byteLength );
	setReadOnly( prng, 'PRNG', rand );

	return prng;

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {Uint32Array} current state
	*/
	function getState() {
		return rand.state;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {Uint32Array} s - generator state
	*/
	function setState( s ) {
		rand.state = s;
	}

	/**
	* Returns a random number drawn from a binomial distribution with bound parameter values.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var r = binomial1();
	* // returns <number>
	*/
	function binomial1() {
		return binomial0( rand, n, p );
	}

	/**
	* Returns a random number drawn from a binomial distribution.
	*
	* @private
	* @param {PositiveInteger} n - number of trials
	* @param {Probability} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var r = binomial2( 20, 0.8 );
	* // returns <number>
	*/
	function binomial2( n, p ) {
		if (
			isnan( n ) ||
			isnan( p ) ||
			!isPositiveInteger( n ) ||
			!isProbability( p )
		) {
			return NaN;
		}
		return binomial0( rand, n, p );
	}
}


// EXPORTS //

module.exports = factory;
