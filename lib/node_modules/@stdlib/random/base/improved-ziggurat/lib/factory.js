/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var prng = require( '@stdlib/random/base/mt19937' ).factory;
var minstd = require( '@stdlib/random/base/minstd-shuffle' ).factory;
var constantFunction = require( '@stdlib/utils/constant-function' );
var noop = require( '@stdlib/utils/noop' );
var Uint32Array = require( '@stdlib/array/uint32' );
var gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;
var improvedZiggurat = require( './improved_ziggurat.js' );


// MAIN //

/**
* Returns a pseudorandom number generator which implements the improved Ziggurat method to generate normally distributed pseudorandom numbers.
*
* @param {Options} [options] - function options
* @param {Function} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {*} [options.seed] - pseudorandom number generator seed
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @returns {Function} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var r = randn();
* // returns <number>
*
* @example
* // Return a seeded PRNG:
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/
function factory( options ) {
	var randu;
	var randi;
	var randm;
	var randn;
	var seed;
	var N;
	var M;
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'prng' ) ) {
			if ( !isFunction( options.prng ) ) {
				throw new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + options.prng + '`.' );
			}
			randu = options.prng;
		}
		if ( hasOwnProp( options, 'seed' ) ) {
			seed = options.seed;
		}
	}
	if ( randu === void 0 ) {
		if ( seed === void 0 ) {
			randu = prng();
		} else {
			randu = prng({
				'seed': seed
			});
		}
		randu = randu.normalized;
	}
	if ( hasOwnProp( randu, 'SEED' ) ) {
		seed = randu.SEED;
		randm = minstd({
			'seed': ( seed%(minstd.MAX+1) ) || 1
		});
		randi = prng({
			'seed': randm()
		});
	} else {
		randi = prng();
		seed = null;
	}
	randn = improvedZiggurat( randu, randi );

	setReadOnly( randn, 'NAME', 'improved-ziggurat' );
	setReadOnly( randn, 'SEED', seed );

	// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity. Furthermore, if provided a PRNG, presumably the user can simply get and set the state independently of this PRNG.
	if ( options && options.prng ) {
		defineProperty( randn, 'STATE', {
			'configurable': false,
			'enumerable': true,
			'get': constantFunction( null ),
			'set': noop
		});
		setReadOnly( randn, 'STATE_LENGTH', null );
		setReadOnly( randn, 'STATE_SIZE', null );
	} else {
		defineProperty( randn, 'STATE', {
			'configurable': false,
			'enumerable': true,
			'get': getState,
			'set': setState
		});

		N = randu.STATE_LENGTH;
		M = randi.STATE_LENGTH;
		setReadOnly( randn, 'STATE_LENGTH', N+M );
		setReadOnly( randn, 'STATE_SIZE', randn.STATE_LENGTH*4 ); // 4 bytes per uint32
	}
	setReadOnly( randn, 'PRNG', randu );

	return randn;

	/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {Uint32Array} current state
	*/
	function getState() {
		var out;
		var s1;
		var s2;

		s1 = randu.STATE;
		s2 = randi.STATE;

		out = new Uint32Array( N+M );
		gcopy( N, s1, 1, 0, out, 1, 0 );
		gcopy( M, s2, 1, 0, out, 1, N );

		return out;
	}

	/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {Uint32Array} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {RangeError} must provide a `Uint32Array` having an expected length
	*/
	function setState( s ) {
		var buf;
		var o;
		if ( !isUint32Array( s ) ) {
			throw new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );
		}
		if ( s.length !== N+M ) {
			throw new RangeError( 'invalid argument. The provided array has an unexpected length.' );
		}
		buf = s.buffer;
		o = s.byteOffset;
		randu.STATE = new Uint32Array( buf, o, N );
		randi.STATE = new Uint32Array( buf, o+(N*s.BYTES_PER_ELEMENT), M );
	}
}


// EXPORTS //

module.exports = factory;
