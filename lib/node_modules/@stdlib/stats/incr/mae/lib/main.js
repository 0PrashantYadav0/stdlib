/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Returns an accumulator function which incrementally computes the mean absolute error.
*
* ## Method
*
* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows
*
*     ```tex
*     \begin{align*}
*     \operatorname{MAE}_n &= \frac{1}{n} \sum_{i=0}^{n-1} |y_i - x_i| \\
*           &= \frac{1}{n} \biggl(|y_{n-1} - x_{n-1}| + \sum_{i=0}^{n-2} |y_i - x_i|\biggr) \\
*           &= \frac{1}{n} \biggl(|y_{n-1} - x_{n-1}| + (n-1)\operatorname{MAE}_{n-1}\biggr) \\
*           &= \operatorname{MAE}_{n-1} + \frac{1}{n} \biggl(|y_{n-1} - x_{n-1}| - \operatorname{MAE}_{n-1}\biggr)
*     \end{align*}
*     ```
*
* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmae();
*
* var m = accumulator();
* // returns null
*
* m = accumulator( 2.0, 3.0 );
* // returns 1.0
*
* m = accumulator( -5.0, 2.0 );
* // returns 4.0
*
* m = accumulator();
* // returns 4.0
*/
function incrmae() {
	var delta;
	var mu;
	var N;

	mu = 0.0;
	N = 0;

	return accumulator;

	/**
	* If provided input values, the accumulator function returns an updated mean absolute error. If not provided input values, the accumulator function returns the current mean absolute error.
	*
	* @private
	* @param {number} [x] - input value
	* @param {number} [y] - input value
	* @returns {(number|null)} mean absolute error or null
	*/
	function accumulator( x, y ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			return mu;
		}
		N += 1;
		delta = abs( y-x ) - mu;
		mu += delta / N;
		return mu;
	}
}


// EXPORTS //

module.exports = incrmae;
