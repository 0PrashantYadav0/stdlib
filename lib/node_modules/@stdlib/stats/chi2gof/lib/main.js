/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var absdiff = require( '@stdlib/math/base/utils/absolute-difference' );
var FLOAT64_SQRT_EPS = require( '@stdlib/constants/math/float64-sqrt-eps' );
var incrspace = require( '@stdlib/math/utils/incrspace' );
var chisqCDF = require( '@stdlib/stats/base/dists/chisquare/cdf' );
var sample = require( '@stdlib/random/sample' );
var isnan = require( '@stdlib/assert/is-nan' );
var gcopy = require( '@stdlib/blas/base/gcopy' );
var gaxpy = require( '@stdlib/blas/base/gaxpy' );
var gsumpw = require( '@stdlib/blas/ext/base/gsumpw' );
var dfill = require( '@stdlib/blas/ext/base/dfill' );
var Float64Array = require( '@stdlib/array/float64' );
var defaults = require( './defaults.js' );
var validate = require( './validate.js' );
var getPMF = require( './get_pmf.js' );
var tabulate = require( './tabulate.js' );
var testStatistic = require( './statistic.js' );
var Results = require( './results.js' );


// MAIN //

/**
* Performs a chi-square goodness-of-fit test.
*
* @param {NonNegativeIntegerArray} x - observation frequencies
* @param {(NonNegativeNumericArray|ProbabilityArray|string)} y - array-like object of expected frequencies or a discrete probability distribution name
* @param {...number} [args] - probability mass function (PMF) arguments
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment
* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation
* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations
* @throws {TypeError} first argument must be an array-like object containing nonnegative integers
* @throws {TypeError} second argument must be either an array-like object of nonnegative numbers, an array-like object of probabilities summing to one, or a discrete probability distribution name
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} first and second arguments must have the same length
* @throws {Error} first argument must contain at least one element greater than zero
* @throws {RangeError} significance level must be a number on the interval `[0,1]`
* @throws {TypeError} probability mass function (PMF) arguments must be number primitives
* @returns {Object} test results
*
* @example
* var x = [ 89, 37, 30, 28, 2 ];
* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];
*
* var out = chi2gof( x, p );
*
* var o = out.toJSON();
* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }
*/
function chi2gof( x, y ) {
	var expected;
	var sopts;
	var nargs;
	var args;
	var opts;
	var psum;
	var pval;
	var stat;
	var freq;
	var pool;
	var obs;
	var err;
	var len;
	var pmf;
	var geq;
	var df;
	var n;
	var p;
	var v;
	var i;

	obs = x;
	if ( !isArrayLikeObject( obs ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array-like object. Value: `' + obs + '`.' );
	}
	len = obs.length;
	n = 0;
	for ( i = 0; i < len; i++ ) {
		v = obs[ i ];
		if ( !isNonNegativeInteger( v ) ) {
			throw new TypeError( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Index: `' + i + '`. Value: `' + v + '`.' );
		}
		n += v;
	}
	if ( n === 0 ) {
		throw new Error( 'invalid argument. First argument must contain at least one element greater than zero (i.e., the total number number of observations must be greater than zero).' );
	}
	nargs = 0;
	if ( isString( y ) ) {
		pmf = getPMF( y );
		if ( pmf instanceof Error ) {
			throw pmf;
		}
		nargs += pmf.length - 1; // WARNING: this relies on PMF functions having an explicit arity
		args = [ 0 ];
		for ( i = 0; i < nargs; i++ ) {
			v = arguments[ i+2 ];
			if ( !isNumber( v ) || isnan( v ) ) {
				throw new TypeError( 'invalid argument. Probability mass function (PMF) arguments must be number primitives. Argument: `' + (i+2) + '`. Value: `' + v + '`.' );
			}
			args.push( v );
		}
		expected = [];
		psum = 0.0;
		for ( i = 0; i < len; i++ ) {
			args[ 0 ] = i;
			if ( y === 'discrete-uniform' ) {
				args[ 0 ] += args[ 1 ]; // scales the value at which to evaluate the PMF based on the minimum support of the distribution (which should have been provided as the first distribution parameter)
			}
			// TODO: consider using `gsumpw-by` for this computation; or better, use `gcusumpw-by` and then multiply the cumulative sum stored in `expected` in-place by `n` via `gscal`
			v = pmf.apply( null, args );
			psum += v;
			expected.push( v*n );
		}
		// Check whether we need to add a remaining category for all values greater than or equal to `len`...
		if ( psum < 1.0 ) {
			// Note: we need to make a copy in order to avoid mutating the input array...
			obs = gcopy( len, obs, 1, new Float64Array( len+1 ), 1 );
			expected.push( (1.0-psum)*n );
			len += 1;
		}
	} else {
		if ( !isArrayLikeObject( y ) ) {
			throw new TypeError( 'invalid argument. Second argument must be either an array-like object of probabilities summing to one, an array-like object of expected frequencies, or a discrete probability distribution name. Value: `' + y + '`.' );
		}
		if ( y.length !== len ) {
			throw new Error( 'invalid arguments. First and second arguments must have the same length.' );
		}
		psum = 0.0;
		for ( i = 0; i < len; i++ ) {
			v = y[ i ];
			if ( !isNumber( v ) ) {
				throw new TypeError( 'invalid argument. Second argument must only contain numbers. Index: `' + i + '`. Value: `' + v + '`.' );
			}
			if ( v < 0.0 ) {
				throw new TypeError( 'invalid argument. Second argument must only contain nonnegative numbers. Index: `' + i + '`. Value: `' + v + '`.' );
			} else if ( v > 1.0 ) {
				expected = y;
			} else {
				psum += v;
			}
		}
		if ( expected === void 0 ) {
			// Check if unity probability array...
			if ( absdiff( psum, 1.0 ) <= FLOAT64_SQRT_EPS ) {
				p = y;
				expected = gaxpy( len, n, y, 1, new Float64Array( len ), 1 );
			} else {
				// Assume we were provided an expected frequencies array...
				expected = y;
			}
		}
	}
	opts = defaults();
	if ( arguments.length > 2+nargs ) {
		err = validate( opts, arguments[ 2+nargs ] );
		if ( err ) {
			throw err;
		}
	}
	stat = testStatistic( obs, expected );
	if ( opts.simulate ) {
		if ( p === void 0 ) {
			psum = gsumpw( len, expected, 1 );
			p = gaxpy( len, 1.0/psum, expected, 1, new Float64Array( len ), 1 );
		}
		pool = incrspace( 0, len, 1 );
		sopts = {
			'size': n,
			'probs': p
		};
		freq = new Float64Array( len );
		geq = 1;
		for ( i = 0; i < opts.iterations; i++ ) {
			// TODO: use `sample.factory` method once sample pkg is updated.
			v = sample( pool, sopts );
			freq = tabulate( dfill( len, 0.0, freq, 1 ), v );
			if ( testStatistic( freq, expected ) >= stat ) {
				geq += 1;
			}
		}
		df = null;
		pval = geq / ( opts.iterations+1 );
	} else {
		df = len - 1 - opts.ddof;
		pval = 1.0 - chisqCDF( stat, df );
	}
	return new Results( pval, opts.alpha, stat, df );
}


// EXPORTS //

module.exports = chi2gof;
