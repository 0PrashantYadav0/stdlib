/* eslint-disable no-restricted-syntax */
'use strict';

// Warning: this is an example only. You would not want to pipe two separate benchmark streams to the same destination, as the results will be interleaved.

var randu = require( '@stdlib/math/base/random/randu' );
var hypot = require( '@stdlib/math/base/special/hypot' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var logStream = require( './../lib/log' );
var createHarness = require( './../lib' ).createHarness;

// Create the first benchmark harness:
var bench1 = createHarness( onFinish1 );

function onFinish1() {
	bench1.close();
}

// Create the second benchmark harness:
var bench2 = createHarness( onFinish2 );

function onFinish2() {
	bench2.close();
}

// Write benchmark results to `stdout`:
var log = logStream();
bench1.createStream().pipe( log );
bench2.createStream().pipe( log );

// Specify benchmark options:
var opts = {
	'iterations': 1e6,
	'repeats': 3
};

// Run benchmarks:
bench1( 'Math.hypot', opts, function benchmark( b ) {
	var x;
	var y;
	var h;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = (randu()*100.0) - 50.0;
		y = (randu()*100.0) - 50.0;
		h = Math.hypot( x, y );
		if ( h < 0.0 || h > 200.0 ) {
			b.fail( 'something went wrong!' );
		}
	}
	b.toc();

	if ( isnan( h ) ) {
		b.fail( 'something went wrong!' );
	} else {
		b.pass( 'benchmark success!' );
	}
	b.end();
});

bench2( 'hypot', opts, function benchmark( b ) {
	var x;
	var y;
	var h;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = (randu()*100.0) - 50.0;
		y = (randu()*100.0) - 50.0;
		h = hypot( x, y );
		if ( h < 0.0 || h > 200.0 ) {
			b.fail( 'something went wrong!' );
		}
	}
	b.toc();

	if ( isnan( h ) ) {
		b.fail( 'something went wrong!' );
	} else {
		b.pass( 'benchmark success!' );
	}
	b.end();
});
