/* eslint-disable no-restricted-syntax */
'use strict';

var randu = require( '@stdlib/math/base/random/randu' );
var hypot = require( '@stdlib/math/base/special/hypot' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var bench = require( './../lib' );

var opts = {
	'iterations': null,
	'repeats': 3
};

bench( 'Math.hypot', opts, function benchmark( b ) {
	var x;
	var y;
	var h;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = (randu()*100.0) - 50.0;
		y = (randu()*100.0) - 50.0;
		h = Math.hypot( x, y );
		if ( h < 0.0 || h > 200.0 ) {
			b.fail( 'something went wrong!' );
		}
	}
	b.toc();

	if ( isnan( h ) ) {
		b.fail( 'something went wrong!' );
	} else {
		b.pass( 'benchmark success!' );
	}
	b.end();
});

bench( 'async (1)', opts, function benchmark( b ) {
	var i = 0;

	b.tic();
	setTimeout( next, 0 );

	function next( error ) {
		if ( error ) {
			return b.fail( error.message );
		}
		i += 1;
		if ( i <= b.iterations ) {
			return setTimeout( next, 200 );
		}
		b.toc();
		b.pass( 'benchmark success!' );
		after();
	}

	function after() {
		setTimeout( onAfter, 0 );
	}

	function onAfter() {
		b.end();
	}
});

bench( 'hypot', opts, function benchmark( b ) {
	var x;
	var y;
	var h;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = (randu()*100.0) - 50.0;
		y = (randu()*100.0) - 50.0;
		h = hypot( x, y );
		if ( h < 0.0 || h > 200.0 ) {
			b.fail( 'something went wrong!' );
		}
	}
	b.toc();

	if ( isnan( h ) ) {
		b.fail( 'something went wrong!' );
	} else {
		b.pass( 'benchmark success!' );
	}
	b.end();
});

bench( 'async (2)', opts, function benchmark( b ) {
	var i = 0;

	b.tic();
	setTimeout( next, 0 );

	function next( error ) {
		if ( error ) {
			return b.fail( error.message );
		}
		i += 1;
		if ( i <= b.iterations ) {
			return setTimeout( next, 0 );
		}
		b.toc();
		b.pass( 'benchmark success!' );
		after();
	}

	function after() {
		setTimeout( onAfter, 0 );
	}

	function onAfter() {
		b.end();
	}
});
