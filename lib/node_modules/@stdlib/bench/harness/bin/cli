#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var resolve = require( 'resolve' ).sync;
var glob = require( 'glob' );
var isString = require( '@stdlib/utils/is-string' ).isPrimitive;
var cwd = require( '@stdlib/utils/cwd' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var filelist;
var ropts;
var gopts;
var args;
var idx;
var dir;
var r;
var i;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
dir = cwd();

if ( args.require ) {
	if ( isString( args.require ) ) {
		args.require = [ args.require ];
	}
	ropts = {
		'basedir': dir
	};
	for ( i = 0; i < args.require.length; i++ ) {
		r = args.require[ i ];

		// Ignore a trailing `-r` or when a user may inadvertently provide an empty string `-r ""`:
		if ( r ) {
			require( resolve( r, ropts ) );
		}
	}
}
filelist = [];
idx = -1;

// Resolve each glob...
gopts = {
	'cwd': dir
};
next();

/**
* Resolves the next glob.
*
* @private
* @returns {void}
*/
function next() {
	var g;

	idx += 1;
	if ( idx < args._.length ) {
		g = args._[ idx ];
		return glob( g, gopts, onGlob );
	}
	run();
} // end FUNCTION next()

/**
* Callback invoked upon resolving a glob.
*
* @private
* @param {(Error|null)} error - error object
* @param {(Array|StringArray)} files - file list
*/
function onGlob( error, files ) {
	var i;
	if ( error ) {
		throw error;
	}
	for ( i = 0; i < files.length; i++ ) {
		filelist.push( path.resolve( dir, files[ i ] ) );
	}
	next();
} // end FUNCTION onGlob()

/**
* Runs benchmarks.
*
* @private
*/
function run() {
	var i;
	for ( i = 0; i < filelist.length; i++ ) {
		require( filelist[ i ] );
	}
} // end FUNCTION run()
