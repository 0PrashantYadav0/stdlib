'use strict';

// MODULES //

var tape = require( 'tape' );
// var proxyquire = require( 'proxyquire' );
// var cos = require( '@stdlib/math/base/special/cos' );
// var randu = require( '@stdlib/math/base/random/randu' );
var noop = require( '@stdlib/utils/noop' );
var createHarness = require( './../lib/harness' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof createHarness, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided only one argument which is neither a function nor an options object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createHarness( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (> 1 argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[],
		function beep() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createHarness( value, noop );
		};
	}
});

tape( 'the function throws an error if provided an `autoclose` option which is not a boolean (> 1 argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		[],
		{},
		function beep() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'autoclose': value
			};
			createHarness( opts, noop );
		};
	}
});

tape( 'the function throws an error if provided an callback argument which is not a function (> 1 argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createHarness( {}, value );
		};
	}
});

tape( 'the function returns a function (no arguments)', function test( t ) {
	var harness = createHarness();
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (options)', function test( t ) {
	var harness = createHarness( {} );
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (callback)', function test( t ) {
	var harness = createHarness( noop );
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (more than 1 argument)', function test( t ) {
	var harness = createHarness( {}, noop );
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});
