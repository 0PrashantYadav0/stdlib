'use strict';

// MODULES //

var tape = require( 'tape' );
var cos = require( '@stdlib/math/base/special/cos' );
var randu = require( '@stdlib/math/base/random/randu' );
var noop = require( '@stdlib/utils/noop' );
var createHarness = require( './../lib/harness' );


// VARIABLES //

var RE_RESULTS = /!!RESULTS: ([0-9.]+),([0-9.]+),([0-9.]+)$/;


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof createHarness, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided only one argument which is neither a function nor an options object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createHarness( value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object (> 1 argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[],
		function beep() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createHarness( value, noop );
		};
	}
});

tape( 'the function throws an error if provided an `autoclose` option which is not a boolean (> 1 argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		[],
		{},
		function beep() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'autoclose': value
			};
			createHarness( opts, noop );
		};
	}
});

tape( 'the function throws an error if provided an callback argument which is not a function (> 1 argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		false,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createHarness( {}, value );
		};
	}
});

tape( 'the function returns a function (no arguments)', function test( t ) {
	var harness = createHarness();
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (options)', function test( t ) {
	var harness = createHarness( {} );
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (callback)', function test( t ) {
	var harness = createHarness( noop );
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (more than 1 argument)', function test( t ) {
	var harness = createHarness( {}, noop );
	t.strictEqual( typeof harness, 'function', 'returns a function' );
	t.end();
});

tape( 'the returned function has a `createStream` method', function test( t ) {
	var harness = createHarness();
	t.strictEqual( typeof harness.createStream, 'function', 'has method' );
	t.end();
});

tape( 'the returned function has a `close` method', function test( t ) {
	var harness = createHarness();
	t.strictEqual( typeof harness.close, 'function', 'has method' );
	t.end();
});

tape( 'the returned function has an `exit` method', function test( t ) {
	var harness = createHarness();
	t.strictEqual( typeof harness.exit, 'function', 'has method' );
	t.end();
});

tape( 'the returned function has an `exitCode` property', function test( t ) {
	var harness = createHarness();
	t.strictEqual( typeof harness.exitCode, 'number', 'has property' );
	t.strictEqual( harness.exitCode, 0, 'value is 0' );
	t.end();
});

tape( 'the returned function throws an error if provided a first argument which is not a string', function test( t ) {
	var harness;
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];

	harness = createHarness();

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			harness( value, {}, noop );
		};
	}
});

tape( 'the returned function throws an error if provided a first argument which begins with a restricted prefix', function test( t ) {
	var harness;
	var values;
	var i;

	values = [
		'!!HEADERS: beep,beep,bop',
		'!!RESULTS: 1,1,1'
	];

	harness = createHarness();

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), Error, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			harness( value, {}, noop );
		};
	}
});

tape( 'the returned function throws an error if provided an options argument which is not an object (no benchmark function)', function test( t ) {
	var harness;
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[]
	];

	harness = createHarness();

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			harness( 'beep', value );
		};
	}
});

tape( 'the returned function throws an error if provided an options argument which is not an object (benchmark function)', function test( t ) {
	var harness;
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		function noop() {}
	];

	harness = createHarness();

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			harness( 'beep', value, noop );
		};
	}
});

tape( 'the returned function throws an error if provided a benchmark function argument which is not a function (no options)', function test( t ) {
	var harness;
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[]
	];

	harness = createHarness();

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			harness( 'beep', value );
		};
	}
});

tape( 'the returned function throws an error if provided a benchmark function argument which is not a function (options)', function test( t ) {
	var harness;
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		[],
		{}
	];

	harness = createHarness();

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			harness( 'beep', {}, value );
		};
	}
});

tape( 'the returned function runs benchmarks (sync)', function test( t ) {
	var harness;
	var stream;
	var opts;

	opts = {
		'autoclose': true
	};
	harness = createHarness( opts, onFinish );
	stream = harness.createStream();

	stream.on( 'close', onClose );

	opts = {
		'iterations': 100,
		'repeats': 3
	};
	harness( 'beep', opts, beep );
	harness( 'boop', opts, boop );

	function beep( b ) {
		var i;
		b.tic();
		for ( i = 0; i < b.iterations; i++) {
			b.ok( true, 'is okay' );
		}
		b.toc();
		b.end();
	}

	function boop( b ) {
		var i;
		b.tic();
		for ( i = 0; i < b.iterations; i++) {
			b.equal( true, true, 'is equal' );
		}
		b.toc();
		b.end();
	}

	function onFinish() {
		t.ok( true, 'finished running benchmarks' );
		stream.destroy();
	}

	function onClose() {
		t.end();
	}
});

tape( 'the returned function runs benchmarks (async)', function test( t ) {
	var harness;
	var stream;
	var opts;

	opts = {
		'autoclose': true
	};
	harness = createHarness( opts, onFinish );
	stream = harness.createStream();

	stream.on( 'close', onClose );

	opts = {
		'iterations': 10,
		'repeats': 2
	};
	harness( 'beep', opts, beep );
	harness( 'boop', opts, boop );

	function beep( b ) {
		var i;

		i = 0;
		b.tic();

		setTimeout( next, 0 );

		function next() {
			i += 1;
			if ( i <= b.iterations ) {
				b.ok( true, 'is okay' );
				return setTimeout( next, 10 );
			}
			b.toc();
			b.end();
		}
	}

	function boop( b ) {
		var i;

		i = 0;
		b.tic();

		setTimeout( next, 0 );

		function next() {
			i += 1;
			if ( i <= b.iterations ) {
				b.equal( true, true, 'is equal' );
				return setTimeout( next, 10 );
			}
			b.toc();
			b.end();
		}
	}

	function onFinish() {
		t.ok( true, 'finished running benchmarks' );
		stream.destroy();
	}

	function onClose() {
		t.end();
	}
});

tape( 'the returned function runs benchmarks (sync and async)', function test( t ) {
	var harness;
	var stream;
	var sopts;
	var aopts;
	var opts;

	opts = {
		'autoclose': true
	};
	harness = createHarness( opts, onFinish );
	stream = harness.createStream();

	stream.on( 'close', onClose );

	sopts = {
		'iterations': 1000,
		'repeats': 2
	};
	aopts = {
		'iterations': 10,
		'repeats': 2
	};
	harness( 'sync (1)', sopts, beep );
	harness( 'async (1)', aopts, boop );
	harness( 'sync (2)', sopts, beep );
	harness( 'async (2)', aopts, boop );

	function beep( b ) {
		var i;
		b.tic();
		for ( i = 0; i < b.iterations; i++) {
			b.ok( true, 'is okay' );
		}
		b.toc();
		b.end();
	}

	function boop( b ) {
		var i;

		i = 0;
		b.tic();

		setTimeout( next, 0 );

		function next() {
			i += 1;
			if ( i <= b.iterations ) {
				b.equal( true, true, 'is equal' );
				return setTimeout( next, 10 );
			}
			b.toc();
			b.end();
		}
	}

	function onFinish() {
		t.ok( true, 'finished running benchmarks' );
		stream.destroy();
	}

	function onClose() {
		t.end();
	}
});

tape( 'if the `iterations` option is `null`, the returned function supports automatically determining iteration number', function test( t ) {
	var harness;
	var stream;
	var opts;

	opts = {
		'autoclose': true
	};
	harness = createHarness( opts, onFinish );

	stream = harness.createStream();
	stream.on( 'close', onClose );

	opts = {
		'iterations': null,
		'repeats': 3
	};
	harness( 'beep', opts, beep );
	harness( 'boop', opts, boop );

	function beep( b ) {
		var x;
		var y;
		var i;

		t.strictEqual( typeof b.iterations, 'number', 'iterations is a number' );
		t.notEqual( b.iterations, opts.iterations, 'iteration number does not equal provided option (null)' );
		t.strictEqual( b.iterations >= 1, true, 'iteration number is >= 1' );

		b.tic();
		for ( i = 0; i < b.iterations; i++) {
			x = (randu()*100.0) - 50.0;
			y = cos( x );
			if ( y < -1.0 || y > 1.0 ) {
				b.fail( 'something went wrong' );
			}
		}
		b.toc();
		if ( y < -1.0 || y > 1.0 ) {
			b.fail( 'something went wrong' );
		}
		b.end();
	}

	function boop( b ) {
		var i;

		t.strictEqual( typeof b.iterations, 'number', 'iterations is a number' );
		t.notEqual( b.iterations, opts.iterations, 'iteration number does not equal provided option (null)' );
		t.strictEqual( b.iterations >= 1, true, 'iteration number is >= 1' );

		i = 0;
		b.tic();

		setTimeout( next, 0 );

		function next() {
			i += 1;
			if ( i <= b.iterations ) {
				b.equal( true, true, 'is equal' );
				return setTimeout( next, 10 );
			}
			b.toc();
			b.end();
		}
	}

	function onFinish() {
		t.ok( true, 'finished running benchmarks' );
		stream.destroy();
	}

	function onClose() {
		t.end();
	}
});

tape( 'by default, the `iterations` option is `null` and the number of repeats is `3`', function test( t ) {
	var harness;
	var stream;
	var opts;
	var str;

	opts = {
		'autoclose': true
	};
	harness = createHarness( opts, onFinish );

	stream = harness.createStream();
	stream.on( 'data', onData );
	stream.on( 'close', onClose );

	str = '';

	harness( 'beep', beep );

	function beep( b ) {
		var x;
		var y;
		var i;

		t.strictEqual( typeof b.iterations, 'number', 'iterations is a number' );
		t.strictEqual( b.iterations >= 1, true, 'iteration number is >= 1' );

		b.tic();
		for ( i = 0; i < b.iterations; i++) {
			x = (randu()*100.0) - 50.0;
			y = cos( x );
			if ( y < -1.0 || y > 1.0 ) {
				b.fail( 'something went wrong' );
			}
		}
		b.toc();
		if ( y < -1.0 || y > 1.0 ) {
			b.fail( 'something went wrong' );
		}
		b.end();
	}

	function onData( data ) {
		str += data.toString();
	}

	function onFinish() {
		var count;
		var i;

		t.ok( true, 'finished running benchmarks' );

		str = str.split( '\n' );
		count = 0;
		for ( i = 0; i < str.length; i++ ) {
			if ( RE_RESULTS.test( str[ i ] ) ) {
				count += 1;
			}
		}
		t.strictEqual( count, 3, 'expected number of repeats' );
		stream.destroy();
	}

	function onClose() {
		t.end();
	}
});
