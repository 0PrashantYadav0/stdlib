/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "stdlib/strided/base/unary.h"
#include "stdlib/strided/common/dispatch.h"
#include "stdlib/strided/napi/addon_arguments.h"
#include "stdlib/ndarray/dtypes.h"
#include "stdlib/math/base/special/abs.h"
#include "stdlib/math/base/special/absf.h"
#include "stdlib/math/base/special/labs.h"
#include <node_api.h>
#include <stdint.h>
#include <stdbool.h>
#include <assert.h>

/**
* Evaluates the identity function for an unsigned 32-bit integer.
*
* @param x   input value
* @return    input value
*/
static uint32_t identity_u( uint32_t x ) {
	return x;
}

/**
* Evaluates the identity function for an unsigned 16-bit integer.
*
* @param x   input value
* @return    input value
*/
static uint16_t identity_t( uint16_t x ) {
	return x;
}

/**
* Evaluates the identity function for an unsigned 8-bit integer.
*
* @param x   input value
* @return    input value
*/
static uint8_t identity_b( uint8_t x ) {
	return x;
}

/**
* Computes the absolute value of a signed 16-bit integer.
*
* @param x   input value
* @return    absolute value
*/
static int16_t abs_k( int16_t x ) {
	if ( x < 0 ) {
		return -x;
	}
	return x;
}

/**
* Computes the absolute value of a signed 8-bit integer.
*
* @param x   input value
* @return    absolute value
*/
static int8_t abs_s( int8_t x ) {
	if ( x < 0 ) {
		return -x;
	}
	return x;
}

// Define an interface name:
static const char name[] = "stdlib_strided_abs";

// Define a list of strided array functions:
static StridedArrayFcn functions[] = {
	// NOTE: these are ordered according to likelihood of use (e.g., more likely that `float64` arrays are provided than `uint8`)

	// float64 (1)
	stdlib_strided_d_d,

	// float32 (2)
	stdlib_strided_f_f,
	stdlib_strided_f_d,

	// int32 (3)
	stdlib_strided_i_i,
	stdlib_strided_i_u,
	stdlib_strided_i_d,

	// int16 (6)
	stdlib_strided_k_k,
	stdlib_strided_k_i,
	stdlib_strided_k_t,
	stdlib_strided_k_u,
	stdlib_strided_k_f,
	stdlib_strided_k_d,

	// int8 (8)
	stdlib_strided_s_s,
	stdlib_strided_s_k,
	stdlib_strided_s_i,
	stdlib_strided_s_b,
	stdlib_strided_s_t,
	stdlib_strided_s_u,
	stdlib_strided_s_f,
	stdlib_strided_s_d,

	// uint32 (2)
	stdlib_strided_u_u,
	stdlib_strided_u_d,

	// uint16 (5)
	stdlib_strided_t_i,
	stdlib_strided_t_t,
	stdlib_strided_t_u,
	stdlib_strided_t_f,
	stdlib_strided_t_d,

	// uint8 (7)
	stdlib_strided_b_k,
	stdlib_strided_b_i,
	stdlib_strided_b_b,
	stdlib_strided_b_t,
	stdlib_strided_b_u,
	stdlib_strided_b_f,
	stdlib_strided_b_d
};

// Define the **strided array** argument types for each strided array function:
static int32_t types[] = {
	// float64 (1)
	STDLIB_NDARRAY_FLOAT64, STDLIB_NDARRAY_FLOAT64,

	// float32 (2)
	STDLIB_NDARRAY_FLOAT32, STDLIB_NDARRAY_FLOAT32,
	STDLIB_NDARRAY_FLOAT32, STDLIB_NDARRAY_FLOAT64,

	// int32 (3)
	STDLIB_NDARRAY_INT32, STDLIB_NDARRAY_INT32,
	STDLIB_NDARRAY_INT32, STDLIB_NDARRAY_UINT32,
	STDLIB_NDARRAY_INT32, STDLIB_NDARRAY_FLOAT64,

	// int16 (6)
	STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_INT16,
	STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_INT32,
	STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_UINT16,
	STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_UINT32,
	STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_FLOAT32,
	STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_FLOAT64,

	// int8 (8)
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_INT8,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_INT16,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_INT32,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_UINT8,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_UINT16,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_UINT32,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_FLOAT32,
	STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_FLOAT64,

	// uint32 (2)
	STDLIB_NDARRAY_UINT32, STDLIB_NDARRAY_UINT32,
	STDLIB_NDARRAY_UINT32, STDLIB_NDARRAY_FLOAT64,

	// uint16 (5)
	STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_INT32,
	STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_UINT16,
	STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_UINT32,
	STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_FLOAT32,
	STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_FLOAT64,

	// uint8 (7)
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_INT16,
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_INT32,
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_UINT8,
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_UINT16,
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_UINT32,
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_FLOAT32,
	STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_FLOAT64
};

// Define a list of strided array function "data" (in this case, callbacks):
static void *data[] = {
	// float64 (1)
	(void *)stdlib_base_abs,

	// float32 (2)
	(void *)stdlib_base_absf,
	(void *)stdlib_base_absf,

	// int32 (3)
	(void *)stdlib_base_labs,
	(void *)stdlib_base_labs,
	(void *)stdlib_base_labs,

	// int16 (6)
	(void *)abs_k,
	(void *)abs_k,
	(void *)abs_k,
	(void *)abs_k,
	(void *)abs_k,
	(void *)abs_k,

	// int8 (8)
	(void *)abs_s,
	(void *)abs_s,
	(void *)abs_s,
	(void *)abs_s,
	(void *)abs_s,
	(void *)abs_s,
	(void *)abs_s,
	(void *)abs_s,

	// uint32 (2)
	(void *)identity_u,
	(void *)identity_u,

	// uint16 (5)
	(void *)identity_t,
	(void *)identity_t,
	(void *)identity_t,
	(void *)identity_t,
	(void *)identity_t,

	// uint8 (7)
	(void *)identity_b,
	(void *)identity_b,
	(void *)identity_b,
	(void *)identity_b,
	(void *)identity_b,
	(void *)identity_b,
	(void *)identity_b
};

// Create a strided array function object:
static const struct StridedFunctionObject obj = {
	// Strided array function name:
	name,

	// Number of input strided arrays:
	1,

	// Number of output strided arrays:
	1,

	// Total number of strided array arguments (nin + nout):
	2,

	// Array containing strided array functions:
	functions,

	// Number of strided array functions:
	34,

	// Array of type "numbers" (as enumerated elsewhere), where the total number of types equals `narrays * nfunctions` and where each set of `narrays` consecutive types (non-overlapping) corresponds to the set of strided array argument types for a corresponding strided array function:
	types,

	// Array of void pointers corresponding to the "data" (e.g., callbacks) which should be passed to a respective strided array function (note: the number of pointers should match the number of strided array functions):
	data
};

// Define a pointer to the strided function object:
static const struct StridedFunctionObject *optr = &obj;

/**
* Add-on namespace.
*/
namespace stdlib_strided_abs {

	/**
	* Computes the absolute value of each element in `X` and assigns the results to elements in `Y`.
	*
	* ## Notes
	*
	* -   When called from JavaScript, the function expects the following arguments:
	*
	*     -   `N`: number of indexed elements
	*     -   `X`: input array
	*     -   `strideX`: `X` stride length
	*     -   `Y`: destination array
	*     -   `strideY`: `Y` stride length
	*/
	napi_value node_abs( napi_env env, napi_callback_info info ) {
		napi_status status;

		// Total number of input arguments:
		int64_t nargs = 5;

		// Number of input strided array arguments:
		int64_t nin = 1;

		// Get callback arguments:
		size_t argc = 5;
		napi_value argv[ 5 ];
		status = napi_get_cb_info( env, info, &argc, argv, nullptr, nullptr );
		assert( status == napi_ok );

		// Check whether we were provided the correct number of arguments:
		int64_t argc64 = (int64_t)argc;
		if ( argc64 < nargs ) {
			napi_throw_error( env, nullptr, "invalid invocation. Insufficient arguments." );
			return nullptr;
		}
		if ( argc64 > nargs ) {
			napi_throw_error( env, nullptr, "invalid invocation. Too many arguments." );
			return nullptr;
		}
		// Process the provided arguments:
		uint8_t *arrays[ 2 ];
		int64_t strides[ 2 ];
		int64_t shape[ 1 ];
		int32_t types[ 2 ];

		napi_value err;
		status = stdlib_strided_napi_addon_arguments( env, argv, nargs, nin, arrays, shape, strides, types, &err );
		assert( status == napi_ok );

		// Check whether processing was successful:
		if ( err != NULL ) {
			status = napi_throw( env, err );
			assert( status == napi_ok );
			return nullptr;
		}
		// Resolve the strided array function satisfying the input array types:
		int64_t idx = stdlib_strided_dispatch_function_index_of( optr, types );

		// Check whether we were able to successfully resolve a strided array function:
		if ( idx < 0 ) {
			napi_throw_error( env, nullptr, "invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types." );
			return nullptr;
		}
		// Retrieve the strided array function:
		StridedArrayFcn fcn = optr->functions[ idx ];

		// Retrieve the associated function data:
		void *clbk = optr->data[ idx ];

		// Evaluate the strided array function:
		fcn( arrays, shape, strides, clbk );

		return nullptr;
	}

	napi_value Init( napi_env env, napi_value exports ) {
		napi_status status;
		napi_value fcn;
		status = napi_create_function( env, "exports", NAPI_AUTO_LENGTH, node_abs, NULL, &fcn );
		assert( status == napi_ok );
		return fcn;
	}

	NAPI_MODULE( NODE_GYP_MODULE_NAME, Init )
} // end namespace stdlib_strided_abs
