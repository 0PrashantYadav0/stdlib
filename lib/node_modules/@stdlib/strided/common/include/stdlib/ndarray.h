/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* Header file containing the ndarray declaration and associated utilities.
*/
#ifndef STDLIB_NDARRAY_H
#define STDLIB_NDARRAY_H

#include <stdint.h>
#include "stdlib/ndarray_order.h"
#include "strided_dtypes.h"

/**
* Flag indicating whether an ndarray is row-major (C-style) contiguous.
*
* ## Notes
*
* -   Row-major order indicates that the last ndarray index varies the fastest.
* -   Contiguous means that an ndarray is compatible with being stored in a single memory segment and that ndarray elements are adjacent to each other in memory.
* -   `strides` array is in reverse order to that of column-major order.
* -   An ndarray can be both row-major and column-major contiguous if an ndarray has zero or one element(s).
*/
#define STDLIB_NDARRAY_ROW_MAJOR_CONTIGUOUS_FLAG 0x0001

/**
* Flag indicating whether an ndarray is column-major (Fortran-style) contiguous.
*
* ## Notes
*
* -   Column-major order indicates that the first ndarray index varies the fastest.
* -   Contiguous means that an ndarray is compatible with being stored in a single memory segment and that ndarray elements are adjacent to each other in memory.
* -   `strides` array is in reverse order to that of row-major order.
* -   An ndarray can be both row-major and column-major contiguous if an ndarray has zero or one element(s).
*/
#define STDLIB_NDARRAY_COLUMN_MAJOR_CONTIGUOUS_FLAG 0x0002

/**
* ndarray structure.
*
* @example
* TODO
*/
struct ndarray {
	// Underlying data type:
	enum STDLIB_STRIDED_DTYPES dtype;

	// Pointer to the underlying byte array:
	uint8_t *data;

	// Array shape (dimensions):
	int64_t *shape;

	// Array strides (in bytes) specifying how to iterate over a strided array:
	int64_t *strides;

	// Byte offset which specifies the location at which to start iterating over array elements:
	uint64_t offset;

	// Array order (either row-major (C-style) or column-major (Fortran-style)):
	enum STDLIB_NDARRAY_ORDER order;

	// Number of array dimensions:
	uint64_t ndims;

	// Number of array elements:
	uint64_t length;

	// Size in bytes:
	uint64_t byteLength;

	// Number of bytes per element (i.e., item size):
	enum STDLIB_STRIDED_DTYPE_NBYTES BYTES_PER_ELEMENT;

	// Information regarding the memory layout of the array (e.g., see macros in this file):
	int flags;

	// One-letter character abbreviation:
	enum STDLIB_STRIDED_DTYPE_CHAR ltr;
};

/**
* Returns a pointer to strided array object.
*/
struct ndarray * ndarray_constructor();

#endif // !STDLIB_NDARRAY_H
