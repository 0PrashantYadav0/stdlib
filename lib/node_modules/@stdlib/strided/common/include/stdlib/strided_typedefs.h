/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* Header file containing strided array type definitions.
*/
#ifndef STDLIB_STRIDED_TYPEDEFS_H
#define STDLIB_STRIDED_TYPEDEFS_H

// Note: keep project includes in alphabetical order...
#include <stdint.h>
#include "strided_binary_typedefs.h"
#include "strided_casting.h"
#include "strided_nullary_typedefs.h"
#include "strided_quaternary_typedefs.h"
#include "strided_quinary_typedefs.h"
#include "strided_ternary_typedefs.h"
#include "strided_unary_typedefs.h"

// Forward declaration for typedefs:
struct StridedArrayObject;

/**
* Generic strided array function interface.
*
* @param arrays   array containing pointers to both input and output strided arrays
* @param dims     array whose only element is the number of elements over which to iterate
* @param strides  array containing strides (in bytes) for each strided array
* @param data     function "data" (e.g., a callback)
*/
typedef void (*StridedArrayFcn)( uint8_t *arrays[], int64_t *dims, int64_t *strides, void *data );

/**
* Determines the input and output data types, based on operands provided to a generic strided array function.
*
* @param obj       strided array function interface
* @param operands  array of strided array "operands"
* @param types     array of "type" numbers corresponding to strided array function signatures
* @param casting   casting mode (as enumerated elsewhere)
* @param out       output array containing pointers to resolved data types for both inputs and outputs
* @return an integer indicating success (`0`), failure (`-1`), or not implemented (`-2`)
*/
typedef int8_t (TypeResolutionFcn)( struct StridedArrayObject *obj, uint8_t *operands[], uint8_t *types, enum STDLIB_STRIDED_CASTING casting, uint8_t **out );

/**
* Resolves a low-level strided array function and associated function "data", based on an array of input and output data types.
*
* @param obj     strided array function interface
* @param dtypes  array containing pointers to resolved data types for both inputs and outputs
* @param fcn     resolved low-level strided array function
* @param data    associated function "data" to be provided to the low-level strided array function upon invocation
* @return an integer indicating success (`0`) or failure (`-1`)
*/
typedef int8_t (StridedArrayFcnResolutionFcn)( struct StridedArrayObject *obj, uint8_t **dtypes, StridedArrayFcn *fcn, void **data );

/**
* Structure describing a generalized strided array function interface.
*
* @example
* #include <stdlib.h>
* #include <stdio.h>
* #include "stdlib/strided_binary.h"
* #include "stdlib/strided_dtypes.h"
*
* StridedArrayObject *obj = malloc( sizeof( struct StridedArrayObject ) );
* if ( obj == Null ) {
*     printf( "Error allocating memory.\n" );
*     exit( 1 );
* }
*
* // Assume a binary strided array interface:
* obj->nin = 2;
* obj->nout = 1;
* obj->nargs = 3; // (obj->nin) + (obj->nout)
*
* char name[] = "binary_strided_array_function";
* obj->name = name;
*
* // Define a list of strided array functions:
* StridedArrayFcn functions[] = {
*     stdlib_strided_dd_d,
*     stdlib_strided_ff_d_as_dd_d,
*     stdlib_strided_II_d_as_dd_d,
*     stdlib_strided_ii_d_as_dd_d,
*     stdlib_strided_HH_d_as_dd_d,
*     stdlib_strided_hh_d_as_dd_d,
*     stdlib_strided_BB_d_as_dd_d,
*     stdlib_strided_bb_d_as_dd_d
* };
* obj->functions = functions;
* obj->ntypes = 8; // number of functions
*
* // Define a function for adding two doubles:
* double add( double x, double y ) {
*     return x + y;
* }
*
* // Define a list of strided array function "data" (in this case, callbacks):
* void *data[] = {
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add
* };
* obj->data = data;
*
* // Define the type signatures for each of the strided array functions:
* int signatures[] = {
*     STDLIB_STRIDED_FLOAT64, STDLIB_STRIDED_FLOAT64, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_FLOAT32, STDLIB_STRIDED_FLOAT32, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_UINT32, STDLIB_STRIDED_UINT32, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_INT32, STDLIB_STRIDED_INT32, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_UINT16, STDLIB_STRIDED_UINT16, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_INT16, STDLIB_STRIDED_INT16, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_UINT8, STDLIB_STRIDED_UINT8, STDLIB_STRIDED_FLOAT64,
*     STDLIB_STRIDED_INT8, STDLIB_STRIDED_INT8, STDLIB_STRIDED_FLOAT64
* };
* obj->types = signatures;
*/
struct StridedArrayObject {
	// Strided array function name:
	const char *name;

	// Number of input arguments:
	uint32_t nin;

	// Number of output arguments:
	uint32_t nout;

	// Total number of arguments (nin + nout):
	uint32_t nargs;

	// Array containing strided array functions:
	StridedArrayFcn *functions;

	// Number of elements in `functions`:
	uint32_t ntypes;

	// Array of type "numbers" (as enumerated elsewhere), where the total number of types equals `nargs * ntypes` and where each set of `nargs` consecutive types (non-overlapping) corresponds to the set of input types for a corresponding strided array function:
	int *types;

	// Array of void pointers corresponding to the "data" (e.g., callbacks) which should be passed to a respective strided array function (note: the number of pointers should match the number of strided array functions):
	void **data;

	// Function which resolves data types:
	TypeResolutionFcn *type_resolver;

	// Function which resolves a low-level strided array function:
	StridedArrayFcnResolutionFcn *function_resolver;
};

#endif // !STDLIB_STRIDED_TYPEDEFS_H
