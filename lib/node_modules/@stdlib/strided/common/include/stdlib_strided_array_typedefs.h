/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* Header file containing strided array type definitions.
*/
#ifndef STDLIB_STRIDED_ARRAY_TYPEDEFS_H
#define STDLIB_STRIDED_ARRAY_TYPEDEFS_H

#include <stdint.h>

// Strided array functions which accept/return single-precision floating-point numbers:
typedef float (*NullaryFcnFloat32)();
typedef float (*UnaryFcnFloat32)( const float x );
typedef float (*BinaryFcnFloat32)( const float x, const float y );
typedef float (*TernaryFcnFloat32)( const float x, const float y, const float z );
typedef float (*QuaternaryFcnFloat32)( const float x, const float y, const float z, const float w );
typedef float (*QuinaryFcnFloat32)( const float x, const float y, const float z, const float w, const float v );

// Strided array functions which accept/return double-precision floating-point numbers:
typedef double (*NullaryFcnFloat64)();
typedef double (*UnaryFcnFloat64)( const double x );
typedef double (*BinaryFcnFloat64)( const double x, const double y );
typedef double (*TernaryFcnFloat64)( const double x, const double y, const double z );
typedef double (*QuaternaryFcnFloat64)( const double x, const double y, const double z, const double w );
typedef double (*QuinaryFcnFloat64)( const double x, const double y, const double z, const double w, const double v );

// Strided array functions which accept/return signed 64-bit integers:
typedef int64_t (*NullaryFcnInt64)();
typedef int64_t (*UnaryFcnInt64)( const int64_t x );
typedef int64_t (*BinaryFcnInt64)( const int64_t x, const int64_t y );
typedef int64_t (*TernaryFcnInt64)( const int64_t x, const int64_t y, const int64_t z );
typedef int64_t (*QuaternaryFcnInt64)( const int64_t x, const int64_t y, const int64_t z,const int64_t w );
typedef int64_t (*QuinaryFcnInt64)( const int64_t x, const int64_t y, const int64_t z,const int64_t w, const int64_t v );

// Strided array functions which accept/return unsigned 64-bit integers:
typedef uint64_t (*NullaryFcnUint64)();
typedef uint64_t (*UnaryFcnUint64)( const uint64_t x );
typedef uint64_t (*BinaryFcnUint64)( const uint64_t x, const uint64_t y );
typedef uint64_t (*TernaryFcnUint64)( const uint64_t x, const uint64_t y, const uint64_t z );
typedef uint64_t (*QuaternaryFcnUint64)( const uint64_t x, const uint64_t y, const uint64_t z, const uint64_t w );
typedef uint64_t (*QuinaryFcnUint64)( const uint64_t x, const uint64_t y, const uint64_t z, const uint64_t w, const uint64_t v );

// Strided array functions which accept/return signed 32-bit integers:
typedef int32_t (*NullaryFcnInt32)();
typedef int32_t (*UnaryFcnInt32)( const int32_t x );
typedef int32_t (*BinaryFcnInt32)( const int32_t x, const int32_t y );
typedef int32_t (*TernaryFcnInt32)( const int32_t x, const int32_t y, const int32_t z );
typedef int32_t (*QuaternaryFcnInt32)( const int32_t x, const int32_t y, const int32_t z,const int32_t w );
typedef int32_t (*QuinaryFcnInt32)( const int32_t x, const int32_t y, const int32_t z,const int32_t w, const int32_t v );

// Strided array functions which accept/return unsigned 32-bit integers:
typedef uint32_t (*NullaryFcnUint32)();
typedef uint32_t (*UnaryFcnUint32)( const uint32_t x );
typedef uint32_t (*BinaryFcnUint32)( const uint32_t x, const uint32_t y );
typedef uint32_t (*TernaryFcnUint32)( const uint32_t x, const uint32_t y, const uint32_t z );
typedef uint32_t (*QuaternaryFcnUint32)( const uint32_t x, const uint32_t y, const uint32_t z, const uint32_t w );
typedef uint32_t (*QuinaryFcnUint32)( const uint32_t x, const uint32_t y, const uint32_t z, const uint32_t w, const uint32_t v );

// Strided array functions which accept/return signed 16-bit integers:
typedef int16_t (*NullaryFcnInt16)();
typedef int16_t (*UnaryFcnInt16)( const int16_t x );
typedef int16_t (*BinaryFcnInt16)( const int16_t x, const int16_t y );
typedef int16_t (*TernaryFcnInt16)( const int16_t x, const int16_t y, const int16_t z );
typedef int16_t (*QuaternaryFcnInt16)( const int16_t x, const int16_t y, const int16_t z, const int16_t w );
typedef int16_t (*QuinaryFcnInt16)( const int16_t x, const int16_t y, const int16_t z, const int16_t w, const int16_t v );

// Strided array functions which accept/return unsigned 16-bit integers:
typedef uint16_t (*NullaryFcnUint16)();
typedef uint16_t (*UnaryFcnUint16)( const uint16_t x );
typedef uint16_t (*BinaryFcnUint16)( const uint16_t x, const uint16_t y );
typedef uint16_t (*TernaryFcnUint16)( const uint16_t x, const uint16_t y, const uint16_t z );
typedef uint16_t (*QuaternaryFcnUint16)( const uint16_t x, const uint16_t y, const uint16_t z, const uint16_t w );
typedef uint16_t (*QuinaryFcnUint16)( const uint16_t x, const uint16_t y, const uint16_t z, const uint16_t w, const uint16_t v );

// Strided array functions which accept/return signed 8-bit integers:
typedef int8_t (*NullaryFcnInt8)();
typedef int8_t (*UnaryFcnInt8)( const int8_t x );
typedef int8_t (*BinaryFcnInt8)( const int8_t x, const int8_t y );
typedef int8_t (*TernaryFcnInt8)( const int8_t x, const int8_t y, const int8_t z );
typedef int8_t (*QuaternaryFcnInt8)( const int8_t x, const int8_t y, const int8_t z, const int8_t w );
typedef int8_t (*QuinaryFcnInt8)( const int8_t x, const int8_t y, const int8_t z, const int8_t w, const int8_t v );

// Strided array functions which accept/return unsigned 8-bit integers:
typedef uint8_t (*NullaryFcnUint8)();
typedef uint8_t (*UnaryFcnUint8)( const uint8_t x );
typedef uint8_t (*BinaryFcnUint8)( const uint8_t x, const uint8_t y );
typedef uint8_t (*TernaryFcnUint8)( const uint8_t x, const uint8_t y, const uint8_t z );
typedef uint8_t (*QuaternaryFcnUint8)( const uint8_t x, const uint8_t y, const uint8_t z, const uint8_t w );
typedef uint8_t (*QuinaryFcnUint8)( const uint8_t x, const uint8_t y, const uint8_t z, const uint8_t w, const uint8_t v );

#endif // !STDLIB_STRIDED_ARRAY_TYPEDEFS_H
