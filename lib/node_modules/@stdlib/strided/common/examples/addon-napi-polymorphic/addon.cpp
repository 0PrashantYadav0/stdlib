/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "stdlib/strided_binary.h"
#include "stdlib/strided/napi/addon_arguments.h"
#include <node_api.h>
#include <stdint.h>
#include <assert.h>

/**
* Add-on namespace.
*/
namespace addon_strided_add {

	/**
	* Adds two doubles.
	*
	* @private
	* @param x  first double
	* @param y  second double
	* @return   sum
	*/
	double add( double x, double y ) {
		return x + y;
	}

	/**
	* Adds each element in `X` to a corresponding element in `Y` and assigns the result to an element in `Z`.
	*
	* ## Notes
	*
	* -   When called from JavaScript, the function expects the following arguments:
	*
	*     -   `N`: number of indexed elements
	*     -   `X`: input array (or scalar constant)
	*     -   `strideX`: `X` stride length
	*     -   `Y`: input array (or scalar constant)
	*     -   `strideY`: `Y` stride length
	*     -   `Z`: destination array
	*     -   `strideZ`: `Z` stride length
	*/
	napi_value node_add( napi_env env, napi_callback_info info ) {
		napi_status status;

		// Total number of input arguments:
		int64_t nargs = 7;

		// Number of input and output strided array arguments:
		int64_t nin = 2;
		int64_t nout = 1;

		// Get callback arguments:
		size_t argc = 7;
		napi_value argv[ 7 ];
		status = napi_get_cb_info( env, info, &argc, argv, nullptr, nullptr );
		assert( status == napi_ok );

		// Check whether we were provided the correct number of arguments:
		int64_t argc64 = (int64_t)argc;
		if ( argc64 < nargs ) {
			napi_throw_error( env, nullptr, "invalid invocation. Insufficient arguments." );
			return nullptr;
		}
		if ( argc64 > nargs ) {
			napi_throw_error( env, nullptr, "invalid invocation. Too many arguments." );
			return nullptr;
		}
		// Process the provided arguments:
		enum STDLIB_NDARRAY_DTYPE types[ 3 ];
		uint8_t *arrays[ 3 ];
		int64_t strides[ 3 ];
		int64_t shape[ 1 ];

		napi_value err;
		status = stdlib_strided_napi_addon_arguments( env, argv, nargs, nin, arrays, shape, strides, types, &err );
		assert( status == napi_ok );

		// Check whether processing was successful:
		if ( err != nullptr ) {
			status = napi_throw( env, err );
			assert( status == napi_ok );
			return nullptr;
		}

		// FIXME: perform dispatch based on dtypes...
		// TODO: could write a small utility function to perform dispatch, returning a function handle

		// Perform addition (NOTE: this currently assumes Float64Array input and output strided array arguments!!!):
		stdlib_strided_dd_d( arrays, shape, strides, (void *)add );

		return nullptr;
	}

	napi_value Init( napi_env env, napi_value exports ) {
		napi_status status;
		napi_value fcn;
		status = napi_create_function( env, "exports", NAPI_AUTO_LENGTH, node_add, NULL, &fcn );
		assert( status == napi_ok );
		return fcn;
	}

	NAPI_MODULE( NODE_GYP_MODULE_NAME, Init )
} // end namespace addon_strided_add
