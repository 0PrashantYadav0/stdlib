/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* {{HEADER_DESC}}
*/
#include <stdint.h>
#include <nan.h>
#include "stdlib_strided_{{ALIAS}}.h"

/**
* Add-on namespace.
*/
namespace addon_strided_{{ALIAS}} {

	using Nan::FunctionCallbackInfo;
	using Nan::TypedArrayContents;
	using Nan::ThrowTypeError;
	using Nan::ThrowError;
	using v8::Number;
	using v8::Local;
	using v8::Value;

	/**
	* {{MAIN_DESC}}
	*
	* When called from JavaScript, the function expects the following arguments:
	*
	* * __n__: number of elements.
	* * __X__: input typed array.
	* * __sx__: `X` stride length.
	* * __Y__: destination typed array.
	* * __sy__: destination typed array stride length.
	*
	* @param info   arguments
	*/
	void node_{{ALIAS}}( const FunctionCallbackInfo<Value>& info ) {
		uint8_t bytesPerElement;
		size_t byteLength;
		size_t len;
		size_t i;

		int64_t strides[ 2 ];
		int64_t dims[ 1 ];

		uint8_t *arrays[ 2 ];

		if ( info.Length() != 5 ) {
			ThrowError( "invalid invocation. Must provide 5 arguments." );
			return;
		}
		if ( !info[ 0 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. First argument must be a number." );
			return;
		}
		if ( !info[ 2 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. Third argument must be a number." );
			return;
		}
		if ( !info[ 4 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. Fourth argument must be a number." );
			return;
		}
		// Retrieve the number of elements:
		dims[ 0 ] = (int64_t)( info[ 0 ]->Int32Value() );

		// Retrieve the strides:
		strides[ 0 ] = (int64_t)( info[ 2 ]->Int32Value() );
		strides[ 1 ] = (int64_t)( info[ 4 ]->Int32Value() );

		// We assume we are given typed arrays:
		TypedArrayContents<uint8_t> X( info[ 1 ] );
		TypedArrayContents<uint8_t> Y( info[ 3 ] );

		// Convert the strides from units of elements to units of bytes...
		for ( i = 0; i < 2; i++ ) {
			// Total bytes in view:
			byteLength = X->ByteLength();

			// Number of view elements:
			len = X->Length();

			// Calculate bytes per element (should evenly divide):
			bytesPerElement = (uint8_t)( byteLength / len );

			// Express strides in units of bytes:
			strides[ i ] *= bytesPerElement;
		}

		// Add the arrays to our array of array pointers:
		arrays[ 0 ] = X;
		arrays[ 1 ] = Y;

		//
	}

	NAN_MODULE_INIT( Init ) {
		Nan::Export( target, "{{ALIAS}}", node_{{ALIAS}} );
	}

	NODE_MODULE( addon, Init )
} // end namespace addon_{{ALIAS}}
