/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* Add each element in `X` to a corresponding element in `Y` and assigns the result to an element in `Z`.
*/
#include <stdint.h>
#include <nan.h>
#include "stdlib/strided_binary.h"

/**
* Macro for determining the number of bytes per typed array element.
*
* @param x     V8 value wrapper
* @param ctor  typed array constructor name
*
* @example
* STDLIB_V8_TYPED_ARRAY_BYTES_PER_ELEMENT( info[ 1 ], Float64Array )
*/
#define STDLIB_V8_TYPED_ARRAY_BYTES_PER_ELEMENT( x, ctor )                     \
	len = static_cast<int64_t>( (x).As<ctor>()->Length() );                    \
	byteLength = static_cast<int64_t>( (x).As<ctor>()->ByteLength() );         \
	bytesPerElement = static_cast<uint8_t>( byteLength / len );

/**
* Add-on namespace.
*/
namespace addon_strided_add {

	using Nan::FunctionCallbackInfo;
	using Nan::TypedArrayContents;
	using Nan::ThrowTypeError;
	using Nan::ThrowError;
	using v8::Value;
	using v8::Float64Array;

	/**
	* Adds two doubles.
	*
	* @private
	* @param x  first double
	* @param y  second double
	* @return   sum
	*/
	double add( double x, double y ) {
		return x + y;
	}

	/**
	* Adds each element in `X` to a corresponding element in `Y` and assigns the result to an element in `Z`.
	*
	* When called from JavaScript, the function expects the following arguments:
	*
	* * __n__: number of elements.
	* * __X__: input typed array.
	* * __sx__: `X` stride length.
	* * __Y__: input typed array.
	* * __sy__: `Y` typed array stride length.
	* * __Z__: destination typed array.
	* * __sz__: destination typed array stride length.
	*
	* @param info   arguments
	*/
	void node_add( const FunctionCallbackInfo<Value>& info ) {
		uint8_t bytesPerElement;
		int64_t byteLength;
		int64_t len;

		int64_t strides[ 3 ];
		int64_t shape[ 1 ];

		uint8_t *arrays[ 3 ];

		if ( info.Length() != 7 ) {
			ThrowError( "invalid invocation. Must provide 7 arguments." );
			return;
		}
		if ( !info[ 0 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. First argument must be a number." );
			return;
		}
		if ( !info[ 2 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. Third argument must be a number." );
			return;
		}
		if ( !info[ 4 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. Fifth argument must be a number." );
			return;
		}
		if ( !info[ 6 ]->IsNumber() ) {
			ThrowTypeError( "invalid input argument. Seventh argument must be a number." );
			return;
		}
		// Retrieve the number of elements:
		shape[ 0 ] = static_cast<int64_t>( info[ 0 ]->IntegerValue() );

		// Retrieve the strides:
		strides[ 0 ] = static_cast<int64_t>( info[ 2 ]->IntegerValue() );
		strides[ 1 ] = static_cast<int64_t>( info[ 4 ]->IntegerValue() );
		strides[ 2 ] = static_cast<int64_t>( info[ 6 ]->IntegerValue() );

		// Convert the strides from units of elements to units of bytes...
		if ( info[ 1 ]->IsFloat64Array() ) {
			STDLIB_V8_TYPED_ARRAY_BYTES_PER_ELEMENT( info[ 1 ], Float64Array )
		} else {
			bytesPerElement = 0;
		}
		strides[ 0 ] *= bytesPerElement; // stride in units of bytes

		if ( info[ 3 ]->IsFloat64Array() ) {
			STDLIB_V8_TYPED_ARRAY_BYTES_PER_ELEMENT( info[ 3 ], Float64Array )
		} else {
			bytesPerElement = 0;
		}
		strides[ 1 ] *= bytesPerElement;

		if ( info[ 5 ]->IsFloat64Array() ) {
			STDLIB_V8_TYPED_ARRAY_BYTES_PER_ELEMENT( info[ 5 ], Float64Array )
		} else {
			bytesPerElement = 0;
		}
		strides[ 2 ] *= bytesPerElement;

		// Get the underlying byte arrays:
		TypedArrayContents<uint8_t> X( info[ 1 ] );
		TypedArrayContents<uint8_t> Y( info[ 3 ] );
		TypedArrayContents<uint8_t> Z( info[ 5 ] );

		// Add the arrays to our array of array pointers:
		arrays[ 0 ] = *X;
		arrays[ 1 ] = *Y;
		arrays[ 2 ] = *Z;

		// Perform addition:
		stdlib_strided_dd_d( arrays, shape, strides, (void *)add );
	}

	NAN_MODULE_INIT( Init ) {
		Nan::Export( target, "add", node_add );
	}

	NODE_MODULE( addon, Init )
} // end namespace addon_strided_add
