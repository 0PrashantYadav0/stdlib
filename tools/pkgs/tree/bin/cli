#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var getKeys = require( 'object-keys' ).shim();
var pkg = require( './../package.json' );
var prefix = require( './../lib/stdlib.js' );
var isObject = require( prefix+'@stdlib/utils/is-plain-object' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Prints an object as a tree.
*
* @private
* @param {Object} obj - object
* @param {string} prefix - indentation prefix
*/
function printTree( obj, prefix ) {
	var keys;
	var key;
	var val;
	var sym;
	var pre;
	var i;
	keys = getKeys( obj );
	for ( i = 0; i < keys.length; i++ ) {
		if ( keys[ i ] === '__namespace__' ) {
			keys.splice( i, 1 );
			break;
		}
	}
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		if ( i < keys.length-1 ) {
			sym = '├──';
		} else {
			sym = '└──';
		}
		console.log( '%s%s %s', prefix, sym, key );
		val = obj[ key ];
		if ( isObject( val ) ) {
			if ( i < keys.length-1 ) {
				pre = '│   ';
			} else {
				pre = '    ';
			}
			printTree( val, prefix+pre );
		}
	}
} // end FUNCTION printTree()


// VARIABLES //

var args;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.dir ) {
	opts.dir = args.dir;
}


// MAIN //

main( opts, onTree );

/**
* Callback invoked after generating a package tree.
*
* @private
* @param {(Error|null)} error - error object
* @param {Object} tree - package tree
* @throws {Error} unexpected error
*/
function onTree( error, tree ) {
	if ( error ) {
		throw error;
	}
	tree = tree[ '@stdlib' ];
	if ( tree ) {
		console.log( '@stdlib' );
		printTree( tree, '' );
	}
} // end FUNCTION onTree()
