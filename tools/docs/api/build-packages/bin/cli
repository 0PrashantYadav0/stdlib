#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
}

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
}

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
}


// VARIABLES //

var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {
	'packages': {},
	'tests': {},
	'benchmarks': {}
};
if ( args.dir ) {
	opts.dir = args.dir;
}
if ( args.readme ) {
	opts.readme = args.readme;
}
if ( args.index ) {
	opts.index = args.index;
}
if ( args.mount ) {
	opts.mount = args.mount;
}
if ( args[ 'packages-pattern' ] ) {
	opts.packages.pattern = args[ 'packages-pattern' ];
}
if ( args[ 'packages-ignore' ] ) {
	opts.packages.ignore = args[ 'packages-ignore' ];
	if ( typeof opts.packages.ignore === 'string' ) {
		opts.packages.ignore = [ opts.packages.ignore ];
	}
}
if ( args[ 'tests-pattern' ] ) {
	opts.tests.pattern = args[ 'tests-pattern' ];
}
if ( args[ 'tests-folder' ] ) {
	opts.tests.folder = args[ 'tests-folder' ];
}
if ( args[ 'tests-bundle' ] ) {
	opts.tests.bundle = args[ 'tests-bundle' ];
}
if ( args[ 'tests-html' ] ) {
	opts.tests.html = args[ 'tests-html' ];
}
if ( args[ 'benchmarks-pattern' ] ) {
	opts.benchmarks.pattern = args[ 'benchmarks-pattern' ];
}
if ( args[ 'benchmarks-folder' ] ) {
	opts.benchmarks.folder = args[ 'benchmarks-folder' ];
}
if ( args[ 'benchmarks-bundle' ] ) {
	opts.benchmarks.bundle = args[ 'benchmarks-bundle' ];
}
if ( args[ 'benchmarks-html' ] ) {
	opts.benchmarks.html = args[ 'benchmarks-html' ];
}

main( args.out, opts, clbk );

/**
* Callback invoked upon completion.
*
* @private
* @param {(Error|null)} error - error object
*/
function clbk( error ) {
	if ( error ) {
		throw error;
	}
}
