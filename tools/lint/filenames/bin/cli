#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var lint = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var args;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.dir ) {
	opts.dir = args.dir;
}
if ( args.pattern ) {
	opts.pattern = args.pattern;
}


// MAIN //

lint( opts, onLint );

/**
* Callback invoked after linting filenames.
*
* @private
* @param {(Error|null)} error - error object
* @param {(ObjectArray|EmptyArray)} filenames - list of failed filenames
* @throws {Error} unexpected error
*/
function onLint( error, filenames ) {
	var i;
	if ( error ) {
		throw error;
	}
	for ( i = 0; i < filenames.length; i++ ) {
		console.error( JSON.stringify( filenames[ i ] ) );
	}
	if ( filenames.length ) {
		process.exit( 1 );
	}
} // end FUNCTION onLint()
