#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var stdin = require( '@stdlib/utils/read-stdin' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var cwd = require( '@stdlib/utils/cwd' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );
var lint = require( './../lib/lint.js' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Callback invoked upon reading from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - data
*/
function onRead( error, data ) {
	if ( error ) {
		console.error( error.message );
		return process.exit( 1 );
	}
	data = data.toString().split( opts.split );
	onLint( null, lint( data ) );
} // end FUNCTION onRead()

/**
* Callback invoked after linting filenames.
*
* @private
* @param {(Error|null)} error - error object
* @param {(ObjectArray|EmptyArray)} filenames - list of failed filenames
* @throws {Error} unexpected error
*/
function onLint( error, filenames ) {
	var i;
	if ( error ) {
		throw error;
	}
	for ( i = 0; i < filenames.length; i++ ) {
		console.error( JSON.stringify( filenames[ i ] ) );
	}
	if ( filenames.length ) {
		process.exit( 1 );
	}
} // end FUNCTION onLint()


// VARIABLES //

var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};

// Check if we are receiving a list of filenames from `stdin`...
if ( !process.stdin.isTTY ) {
	if ( args.split ) {
		opts.split = reFromString( args.split );
	} else {
		opts.split = RE_EOL;
	}
	return stdin( onRead );
}
if ( args.pattern ) {
	opts.pattern = args.pattern;
}
opts.dir = args._[ 0 ] || cwd();

main( opts, onLint );
