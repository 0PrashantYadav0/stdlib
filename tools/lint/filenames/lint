#!/usr/bin/env bash
#
# Script to lint filenames.
#
# To specify the allowed filename pattern, set a `FILENAME_PATTERN` environment variable when invoking this script.


# VARIABLES #

# Regular expression to filter filenames (default: snakecase, except for Markdown files):
pattern=""
if [[ -n "${FILENAME_PATTERN}" ]]; then
    pattern="${FILENAME_PATTERN}"
else
    pattern='\/[a-z0-9._-]{1,}\.(html|css|svg|png|jpg|gif|eof|woff|tmpl|js|json|csv|jl|R|py|go|c|h|cpp|hpp|mk|sh|yml|txt)$|\/[a-zA-Z0-9._-]{1,}\.md$'
fi


# FUNCTIONS #

# Defines an error handler.
#
# $1 - error status
on_error() {
	echo 'ERROR: An error was encountered during execution.' >&2
	cleanup
	exit "$1"
}

# Runs clean-up tasks:
cleanup() {
    echo '' >&2
}

# Prints a success message.
print_success() {
    echo 'Success!' >&2
}

# Prints failing filenames.
#
# $1 - failing filenames
print_bad_filenames() {
    echo '' >&2
    echo "ERROR: One or more filenames failed. Ensure that filenames meet the following criteria: ${pattern}." >&2
    echo '' >&2
    printf '%s\n' "$1" >&2
    echo '' >&2
}

# Lints filenames.
lint() {
	# Find all files which do not match the desired pattern:
	local files="$(make list-files | grep -vE ${pattern})"

	# Check if any filenames fail...
	if [[ -z "${files}" ]]; then
		return 0
    fi
    print_bad_filenames "${files}"
	return 1
}

# Main execution sequence.
main() {
    lint
    if [[ "$?" -ne 0 ]]; then
        on_error 1
    fi
    cleanup
    print_success
    exit 0
}

# Run main:
main
