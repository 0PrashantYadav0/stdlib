#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var cwd = require( '@stdlib/utils/cwd' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var stdin = require( '@stdlib/utils/read-stdin' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );
var lint = require( './../lib/lint.js' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Callback invoked upon reading from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - data
*/
function onRead( error, data ) {
	var i;
	if ( error ) {
		console.error( error.message );
		return process.exit( 1 );
	}
	data = data.toString().split( opts.split );

	// Resolve absolute file paths...
	for ( i = 0; i < data.length; i++ ) {
		data[ i ] = path.resolve( opts.dir, data[i] );
	}
	lint( data, onFinish );
} // end FUNCTION onRead()

/**
* Prints lint errors as newline-delimited JSON.
*
* @private
* @param {ObjectArray} errs - lint errors
*/
function ndjson( errs ) {
	var i;
	for ( i = 0; i < errs.length; i++ ) {
		console.error( JSON.stringify( errs[ i ] ) );
	}
} // end FUNCTION ndjson()

/**
* Pretty prints lint errors.
*
* @private
* @param {ObjectArray} errors - lint errors
*/
function prettyPrint( errors ) {
	var total;
	var error;
	var errs;
	var err;
	var i;
	var j;

	total = 0;

	console.error( '' );
	for ( i = 0; i < errors.length; i++ ) {
		error = errors[ i ];
		console.error( error.file );

		errs = error.errors;
		total += errs.length;
		for ( j = 0; j < errs.length; j++ ) {
			err = errs[ j ];
			console.error( '' );
			console.error( '    message: %s', err.message );
			console.error( '    field: %s', err.dataPath );
			console.error( '    data: %s', JSON.stringify( err.data ) );
		}
		console.error( '' );
	}
	console.error( '%d errors', total );
	console.error( '' );
} // end FUNCTION prettyPrint()


// VARIABLES //

var args;
var fmt;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
if ( args.format ) {
	fmt = args.format;
} else {
	if ( process.stdout.isTTY ) {
		fmt = 'pretty';
	} else {
		fmt = 'ndjson';
	}
}
opts = {};
opts.dir = args._[ 0 ] || cwd();

// Check if we are receiving a list of filenames from `stdin`...
if ( !process.stdin.isTTY ) {
	if ( args.split ) {
		opts.split = reFromString( args.split );
	} else {
		opts.split = RE_EOL;
	}
	return stdin( onRead );
}
if ( args.pattern ) {
	opts.pattern = args.pattern;
}
if ( args.ignore ) {
	if ( typeof args.ignore === 'string' ) {
		opts.ignore = [ args.ignore ];
	} else {
		opts.ignore = args.ignore;
	}
}
main( opts, onFinish );

/**
* Callback invoked after linting.
*
* @private
* @param {(Error|null)} error - error object
* @param {(ObjectArray|null)} errs - lint errors
* @throws {Error} unexpected error
*/
function onFinish( error, errs ) {
	if ( error ) {
		throw error;
	}
	if ( errs ) {
		if ( fmt === 'ndjson' ) {
			ndjson( errs );
		} else {
			prettyPrint( errs );
		}
		return process.exit( 1 );
	}
} // end FUNCTION onFinish()
