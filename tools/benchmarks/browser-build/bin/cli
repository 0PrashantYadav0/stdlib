#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var cwd = require( '@stdlib/utils/cwd' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	var opts;

	// Check if newer versions exist for this package:
	opts = {
		'pkg': pkg
	};
	notifier( opts ).notify();

	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Callback invoked upon completion.
*
* @private
* @param {(Error|null)} error - error object
*/
function onFinish( error ) {
	if ( error ) {
		throw error;
	}
} // end FUNCTION onFinish()


// VARIABLES //

var root;
var args;
var out;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.pattern ) {
	opts.pattern = args.pattern;
}
if ( args.bundle ) {
	opts.bundle = args.bundle;
}
if ( args.html ) {
	opts.html = args.html;
}
if ( args.mount ) {
	opts.mount = args.mount;
}
if ( args.title ) {
	opts.title = args.title;
}
if ( args.out ) {
	out = args.out;
} else {
	out = cwd();
}
if ( args._[ 0 ] ) {
	root = args._[ 0 ];
} else {
	root = cwd();
}
main( root, out, opts, onFinish );
