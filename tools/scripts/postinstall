#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
* Script to perform a post-install sequence, allowing users to require/import project packages as documented in the repository documentation.
*
* For example,
*
* ```javascript
* var sin = require( '@stdlib/math/base/special/sin' );
* ```
*
* rather than
*
* ```javascript
* var sin = require( '@stdlib/stdlib/lib/node_modules/@stdlib/math/base/special/sin' );
* ```
*
* ## Usage
*
* ```bash
* $ postinstall
* ```
*
* ### Notes
*
* -   The script supports the following environment variables:
*
*     -   `STDLIB_DRY_RUN`: run script in "dry run" mode (i.e., without creating artifacts).
*
* -   The script outputs a `.postinstall.json` file which can be used to revert changes introduced by this script (see `preuninstall`).
*/

/* eslint-disable no-sync, no-process-env, no-console */

'use strict';

// MODULES //

var path = require( 'path' );
var fs = require( 'fs' );
var logger = require( 'debug' );


// VARIABLES //

var debug = logger( 'stdlib:post-install' );

// Define a flag for specifying whether to run the script in "dry run" mode:
var DRY_RUN = Boolean( process.env.STDLIB_DRY_RUN );

// Resolve the root project directory (WARNING: this is fragile and likely needs to be updated should this file move!):
var ROOT_DIR = path.resolve( __dirname, '..', '..' );

// Resolve the project package directory:
var PKG_DIR = path.join( ROOT_DIR, 'lib', 'node_modules', '@stdlib' );

// Define the relative path to project packages:
var RELATIVE_PKG_DIR = path.join( 'stdlib', 'lib', 'node_modules', '@stdlib' );

// Resolve the destination directory:
var DEST_DIR = path.resolve( ROOT_DIR, '..' );

// Define an output file path for storing post-install meta data:
var OUTPUT_FILE = path.join( ROOT_DIR, '.postinstall.json' );

// Regular expression to detect whether this script is being executed after this package was installed as a node_modules dependency:
var RE_SCRIPT_CONTEXT = /[\\/]node_modules[\\/]@stdlib[\\/]stdlib[\\/]/;

// Define a list of `package.json` fields to extract when generating meta data:
var PKG_FIELDS = [
	'name',
	'version',
	'description',
	'license',
	'author',
	'contributors',
	'homepage',
	'repository',
	'bugs',
	'engines',
	'os',
	'keywords'
];


// FUNCTIONS //

/**
* Returns a relative path for resolving a package from a destination directory.
*
* @private
* @param {string} dpath - package directory path (e.g., `'utils/copy'`, `'math/base/special/sin'`, etc)
* @returns {string} relative path
*/
function resolvePkg( dpath ) {
	var parts;
	var p;
	var i;

	// Initialize the relative path:
	p = '.' + path.sep;

	// Split the directory path in order to determine folder depth:
	parts = dpath.split( path.sep );
	for ( i = 0; i < parts.length; i++ ) {
		p += '..' + path.sep;
	}
	// Return the generated path:
	return path.join( p, RELATIVE_PKG_DIR, dpath );
}

/**
* Creates directories from a nested path.
*
* @private
* @param {Array} out - output array for tracking changes
* @param {string} root - root directory
* @param {string} dpath - directory path
* @returns {Array} output array
*/
function mkdirp( out, root, dpath ) {
	var parts;
	var stats;
	var p;
	var i;

	parts = dpath.split( path.sep );
	p = root;
	for ( i = 0; i < parts.length; i++ ) {
		p = path.join( p, parts[ i ] );
		if ( fs.existsSync( p ) ) {
			stats = fs.statSync( p );
			if ( !stats.isDirectory() ) {
				if ( DRY_RUN ) {
					console.log( 'Created directory: %s', p );
				} else {
					fs.mkdirSync( p );
				}
				out.push( [ 'create', p ] );
			}
		} else {
			if ( DRY_RUN ) {
				console.log( 'Created directory: %s', p );
			} else {
				fs.mkdirSync( p );
			}
			out.push( [ 'create', p ] );
		}
	}
	return out;
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var findPkgs;
	var fopts;
	var stats;
	var meta;
	var pdir;
	var ndir;
	var dirs;
	var pkgs;
	var pkg;
	var out;
	var f;
	var i;
	var j;
	var k;

	fopts = {
		'encoding': 'utf8'
	};

	if ( DRY_RUN ) {
		debug( 'Performing a dry run...' );
	}

	debug( 'Checking file system context...' );
	if ( !DRY_RUN && !RE_SCRIPT_CONTEXT.test( __filename ) ) {
		debug( 'Detected non-node_modules context. Aborting script execution...' );
		return;
	}
	debug( 'Detected node_modules context.' );

	debug( 'Root directory: %s', ROOT_DIR );
	debug( 'Package directory: %s', PKG_DIR );
	debug( 'Destination directory: %s', DEST_DIR );

	out = [];

	// Load a package for resolving project packages ('@stdlib/_tools/pkgs/find'):
	findPkgs = require( path.join( PKG_DIR, '_tools', 'pkgs', 'find' ) ); // eslint-disable-line stdlib/no-dynamic-require

	debug( 'Resolving packages...' );
	pkgs = findPkgs.sync({
		'dir': PKG_DIR
	});
	debug( 'Found %d packages.', pkgs.length );

	debug( 'Processing packages...' );
	for ( i = 0; i < pkgs.length; i++ ) {
		pdir = pkgs[ i ].slice( PKG_DIR.length+1 ); // +1 to account for trailing `/`

		debug( 'Reading package meta data...' );
		pkg = require( path.join( pkgs[ i ], 'package.json' ) ); // eslint-disable-line stdlib/no-dynamic-require

		debug( 'Package name: %s', pkg.name );

		debug( 'Generating package meta data...' );
		meta = {};
		for ( j = 0; j < PKG_FIELDS.length; j++ ) {
			k = PKG_FIELDS[ j ];
			if ( pkg.hasOwnProperty( k ) ) { // eslint-disable-line no-prototype-builtins
				meta[ k ] = pkg[ k ];
			}
		}
		meta.main = path.join( resolvePkg( pdir ), pkg.main );
		debug( 'Resolved package entry point: %s', meta.main );

		ndir = path.join( DEST_DIR, pdir );
		if ( fs.existsSync( ndir ) ) {
			debug( 'Destination directory already exists: %s', ndir );
		} else {
			debug( 'Creating destination directory: %s', ndir );
			mkdirp( out, DEST_DIR, pdir );
		}

		f = path.join( ndir, 'package.json' );
		if ( fs.existsSync( f ) ) {
			debug( 'Package meta data already exists: %s. Skipping package...', f );
			continue;
		}
		debug( 'Writing package meta data...' );
		if ( DRY_RUN ) {
			console.log( 'Created file: %s', f );
		} else {
			fs.writeFileSync( f, JSON.stringify( meta )+'\n', fopts );
		}
		out.push( [ 'create', f ] );

		debug( 'Finished processing package.' );
	}
	debug( 'Reading package meta data...' );
	pkg = path.join( ROOT_DIR, 'package.json' );
	meta = require( pkg ); // eslint-disable-line stdlib/no-dynamic-require

	debug( 'Modifying package meta data...' );
	dirs = fs.readdirSync( PKG_DIR );
	for ( i = 0; i < dirs.length; i++ ) {
		f = dirs[ i ];
		stats = fs.statSync( path.join( PKG_DIR, f ) );
		if ( stats.isDirectory() ) {
			meta.dependencies[ '@stdlib/'+f ] = '*';
		}
	}
	debug( 'Renaming file...' );
	f = path.join( ROOT_DIR, '__package__.json' );
	if ( DRY_RUN ) {
		console.log( 'Renamed file: %s => %s', pkg, f );
	} else {
		fs.renameSync( pkg, f );
	}
	out.push( [ 'rename', pkg, f ] );

	debug( 'Writing package meta data...' );
	if ( DRY_RUN ) {
		console.log( 'Modified file: %s', pkg );
		console.log( 'Meta data: %s', JSON.stringify( meta ) );
	} else {
		fs.writeFileSync( pkg, JSON.stringify( meta )+'\n', fopts );
	}
	out.push( [ 'create', pkg ] );

	debug( 'Finished post-install sequence.' );

	debug( 'Saving changes...' );
	out.push( [ 'create', OUTPUT_FILE ] );
	if ( DRY_RUN ) {
		debug( 'Changes: %s', JSON.stringify( out ) );
		console.log( 'Created file: %s', OUTPUT_FILE );
	} else {
		fs.writeFileSync( OUTPUT_FILE, JSON.stringify( out )+'\n', fopts );
	}

	debug( 'Finished saving changes.' );
}

main();
