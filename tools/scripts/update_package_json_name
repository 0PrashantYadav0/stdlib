#!/usr/bin/env node
'use strict';

/*
* Update the package `package.json` name field.
*
* To enable verbose logging, set the `DEBUG` environment variable.
*
* ``` bash
* $ DEBUG=* update_package_json_name .
* ```
*/

// MODULES //

var debug = require( 'debug' )( 'update-package_name' );
var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var writeFile = require( 'fs' ).writeFileSync;
var parseArgs = require( 'minimist' );
var hasOwnProp = require( '@stdlib/utils/has-own-property' );
var SEP = require( '@stdlib/utils/path-sep' );
var findPkgs = require( './../pkgs/find' ).sync;


// VARIABLES //

var ROOT = resolve( __dirname, '../../lib/node_modules' );
var opts;
var args;


// FUNCTIONS //

/**
* Updates package `package.json` files by setting the `name` field.
*
* ## Notes
*
* * The implementation assumes that a package name can be inferred from the directory structure.
*
*
* @private
*/
function main() {
	var fpath;
	var parts;
	var name;
	var opts;
	var pkgs;
	var pkg;
	var i;

	debug( 'Searching for packages in %s.', ROOT );
	opts = {
		'dir': ROOT,
		'pattern': '**/package.json'
	};
	pkgs = findPkgs( opts );
	debug( 'Found %d packages.', pkgs.length );

	for ( i = 0; i < pkgs.length; i++ ) {
		fpath = join( pkgs[ i ], 'package.json' );
		debug( 'Loading package file: %s (%d of %d).', fpath, i+1, pkgs.length );
		pkg = require( fpath );
		if ( !hasOwnProp( pkg, 'name' ) ) {
			debug( 'Found a package missing a `name` field: %s. Skipping.', fpath );
			continue;
		}
		name = fpath.substring( ROOT.length );
		debug( 'Package path: %s.', name );

		// Remove initial slash and `/package.json`:
		name = name.substring( 1, name.length-13 );

		// Split the path based on the platform:
		parts = name.split( SEP );

		// Recombine into a package name:
		name = parts.join( '/' );
		debug( 'Package name: %s.', name );
		pkg.name = name;

		debug( 'Serializing package data.' );
		pkg = JSON.stringify( pkg, null, 2 ); // 2-space indentation

		debug( 'Writing package data to file.' );
		writeFile( fpath, pkg, {
			'encoding': 'utf8'
		});
	}
	debug( 'Finished updating all packages.' );
} // end FUNCTION main()


// MAIN //

// Parse command-line arguments:
opts = {};
args = parseArgs( process.argv.slice( 2 ), opts );

main();
