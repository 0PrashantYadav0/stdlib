#!/usr/bin/env node
/*
* Script to analysis REPL namespace.
*/
'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isFunction = require( '@stdlib/utils/is-function' );
var isRegExp = require( '@stdlib/utils/is-regexp' );
var NAMESPACE = require( '@stdlib/repl/lib/namespace' );


// FUNCTIONS //

/**
* Prints analysis results.
*
* @private
* @param {Object} results - results
*/
function printResults( results ) {
	var str = '';
	str += '\n';
	str += 'REPL Namespace\n';
	str += '================\n';
	str += '\n';
	str += 'Size:        '+results.total+'\n';
	str += 'Functions:   '+results.functions+'\n';
	str += 'Methods:     '+results.methods+'\n';
	str += 'RegExp:      '+results.regexp+'\n';
	str += 'Constants:   '+results.constants+'\n';
	console.log( str );
} // end FUNCTION printResults()


// MAIN //

/**
* Analyzes REPL namespace.
*
* @private
*/
function main() {
	var stats;
	var keys;
	var key;
	var v;
	var i;
	var j;

	stats = {
		'total': NAMESPACE.length,
		'functions': 0,
		'regexp': 0,
		'constants': 0,
		'methods': 0
	};
	for ( i = 0; i < NAMESPACE.length; i++ ) {
		v = NAMESPACE[ i ].value;
		if ( isFunction( v ) ) {
			stats.functions += 1;
			keys = getKeys( v );
			for ( j = 0; j < keys.length; j++ ) {
				key = keys[ j ];
				if ( isFunction( v[ key ] ) ) {
					stats.methods += 1;
				}
			}
		} else if ( isRegExp( v ) ) {
			stats.regexp += 1;
		} else {
			stats.constants += 1;
		}
	}
	printResults( stats );
} // end FUNCTION main()

main();
