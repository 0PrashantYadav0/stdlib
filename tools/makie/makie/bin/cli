#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var makie = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var dirpath;
var args;
var cwd;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
cwd = process.cwd();
if ( args.dir ) {
	dirpath = path.resolve( cwd, args.dir );
} else {
	// FIXME: this is fragile, as will break if the location of this file changes. Maybe search for first Makefile in a parent dir of `makie`? (similar to a package.json search; can use fs/resolve-parent-path stdlib pkg)
	dirpath = path.resolve( __dirname, '../../../../' );
}
if ( args.config ) {
	opts = require( path.resolve( cwd, args.config ) );
} else {
	opts = {};
}

makie( dirpath, opts, args._[0] );
