#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var stdin = require( '@stdlib/process/read-stdin' );
var round = require( '@stdlib/math/base/special/round' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var reporter = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Sort function.
*
* @private
* @param {Array} a - input array
* @param {Array} b - input array
* @returns {number} number indicating if `a` should be sorted to a lower index than `b`
*/
function comparator( a, b ) {
	if ( a[ 1 ] > b[ 1 ] ) {
		return -1;
	}
	if ( a[ 1 ] < b[ 1 ] ) {
		return 1;
	}
	return 0;
} // end FUNCTION comparator()

/**
* Callback invoked after reading `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {string} data - data
* @throws {Error} unexpected error
*/
function onRead( error, data ) {
	var results;
	var percent;
	var total;
	var name;
	var sym;
	var tmp;
	var x;
	var i;
	if ( error ) {
		throw error;
	}
	data = data.toString().split( /\r?\n/g );
	results = [];
	for ( i = 0; i < data.length; i++ ) {
		if ( data[ i ] ) {
			results.push( JSON.parse( data[ i ] ) );
		}
	}
	results = reporter( results );

	console.log( '\nLicense summary:\n' );

	total = results.dependencies.length;
	console.log( 'Dependencies: %d', total );

	x = results.licenses.length;
	console.log( 'Licenses: %s', x );

	x = total - results.valid.length;
	percent = round( x / total * 100.0 );
	console.log( 'Invalid SPDX ids: %d (%d%%)', x, percent );

	x = results.missing.length;
	percent = round( x / total * 100.0 );
	console.log( 'Missing licenses: %d (%d%%)', x, percent );

	x = results.ambiguous.length;
	percent = round( x / total * 100.0 );
	console.log( 'Ambiguous licenses: %d (%d%%)', x, percent );

	console.log( '\nLicenses:' );
	tmp = new Array( results.licenses.length );
	for ( i = 0; i < tmp.length; i++ ) {
		name = results.licenses[ i ];
		tmp[ i ] = [ name, results.totals[ name ] ];
	}
	tmp.sort( comparator );
	for ( i = 0; i < tmp.length; i++ ) {
		if ( i < tmp.length-1 ) {
			sym = '├──';
		} else {
			sym = '└──';
		}
		x = tmp[ i ][ 1 ];
		percent = round( x / total * 100.0 );
		console.log( '%s %d (%d%%): %s', sym, x, percent, tmp[ i ][ 0 ] );
	}
	console.log( '' );
} // end FUNCTION onRead()


// VARIABLES //

var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
stdin( 'utf8', onRead );
