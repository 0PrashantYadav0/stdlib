#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var stdin = require( '@stdlib/process/read-stdin' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var reporter = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
}

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
}

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
}

/**
* Callback invoked after reading `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {string} data - data
* @throws {Error} unexpected error
*/
function onRead( error, data ) {
	var results;
	var i;
	if ( error ) {
		throw error;
	}
	data = data.toString().split( /\r?\n/g );
	results = [];
	for ( i = 0; i < data.length; i++ ) {
		if ( data[ i ] ) {
			results.push( JSON.parse( data[ i ] ) );
		}
	}
	results = reporter( results );
	if ( process.stdout.isTTY ) {
		return prettyPrint( results );
	}
	printNDJSON( results );
}

/**
* Pretty prints results.
*
* @private
* @param {(ObjectArray|EmptyArray)} results - results
*/
function prettyPrint( results ) {
	var i;
	if ( results.length ) {
		console.log( '\nPackages missing a license:\n' );
		for ( i = 0; i < results.length; i++ ) {
			console.log( results[ i ].id );
			console.log( '├── path: %s', results[ i ].pkg );
			console.log( '└── repo: %s', results[ i ].repo || 'UNKNOWN' );
			console.log( '' );
		}
		return process.exit( 1 );
	}
	console.log( 'All packages have licenses.' );
}

/**
* Prints results as newline-delimited JSON (NDJSON).
*
* @private
* @param {(ObjectArray|EmptyArray)} results - results
*/
function printNDJSON( results ) {
	var i;
	for ( i = 0; i < results.length; i++ ) {
		console.log( JSON.stringify( results[ i ] ) );
	}
}


// VARIABLES //

var args;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
stdin( 'utf8', onRead );
