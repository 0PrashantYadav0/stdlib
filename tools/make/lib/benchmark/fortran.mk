
# TARGETS #

#/
# Runs Fortran benchmarks consecutively.
#
# ## Notes
#
# -   This recipe delegates to local Makefiles which are responsible for actually compiling and running the respective benchmarks.
# -   This recipe is useful when wanting to glob for Fortran benchmark files (e.g., run all Fortran benchmarks for a particular package).
#
#
# @param {string} [BENCHMARKS_FILTER] - file path pattern (e.g., `.*/blas/base/daxpy/.*`)
# @param {string} [FORTRAN_COMPILER] - Fortran compiler (e.g., `gfortran`)
#
# @example
# make benchmark-fortran
#
# @example
# make benchmark-fortran BENCHMARKS_FILTER=.*/blas/base/daxpy/.*
#/
benchmark-fortran:
	$(QUIET) $(FIND_FORTRAN_BENCHMARKS_CMD) | grep '^[\/]\|^[a-zA-Z]:[/\]' | while read -r file; do \
		echo ""; \
		echo "Running benchmark: $$file"; \
		cd `dirname $$file` && \
		$(MAKE) clean && \
		$(MAKE) && \
		FORTRAN_COMPILER="$(FC)" \
		$(MAKE) run || exit 1; \
	done

.PHONY: benchmark-fortran

#/
# Runs a specified list of Fortran benchmarks consecutively.
#
# ## Notes
#
# -   This recipe delegates to local Makefiles which are responsible for actually compiling and running the respective benchmarks.
# -   This recipe is useful when wanting to run a list of Fortran benchmark files generated by some other command (e.g., a list of changed Fortran benchmark files obtained via `git diff`).
#
#
# @param {string} FILES - list of Fortran benchmark file paths
# @param {string} [FORTRAN_COMPILER] - Fortran compiler (e.g., `gfortran`)
#
# @example
# make benchmark-fortran-files FILES='/foo/benchmark.f /bar/benchmark.f'
#/
benchmark-fortran-files:
	$(QUIET) for file in $(FILES); do \
		echo ""; \
		echo "Running benchmark: $$file"; \
		cd `dirname $$file` && \
		$(MAKE) clean && \
		$(MAKE) && \
		FORTRAN_COMPILER="$(FC)" \
		$(MAKE) run || exit 1; \
	done

.PHONY: benchmark-fortran-files
