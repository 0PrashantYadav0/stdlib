
# VARIABLES #

# Define the command to recursively sync directories:
RSYNC_RECURSIVE ?= rsync -r

# Define the command to recursively create directories:
MKDIR_RECURSIVE ?= mkdir -p

# Define the command for removing files and directories:
DELETE ?= -rm
DELETE_FLAGS ?= -rf

# Determine the host kernel:
KERNEL ?= $(shell uname -s)

# Based on the kernel, determine the `open` command:
ifeq ($(KERNEL), Darwin)
	OPEN ?= open
else
	OPEN ?= xdg-open
endif
# TODO: add Windows command

# Define the path to the Istanbul executable.
#
# To install Istanbul:
#     $ npm install istanbul
#
# [1]: https://github.com/gotwarlost/istanbul

ISTANBUL ?= $(BIN_DIR)/istanbul

# Define which files and directories to exclude from coverage instrumentation:
ISTANBUL_EXCLUDES_FLAGS ?= \
	--no-default-excludes \
	-x 'node_modules/**' \
	-x 'reports/**' \
	-x 'tmp/**' \
	-x '**/$(TESTS_FOLDER)/**' \
	-x '**/$(EXAMPLES_FOLDER)/**' \
	-x '**/$(BENCHMARKS_FOLDER)/**' \
	-x '**/$(CONFIG_FOLDER)/**' \
	-x '**/$(DOCUMENTATION_FOLDER)/**'

# Define which files and directories to exclude when syncing the instrumented source code directory:
ISTANBUL_RSYNC_EXCLUDES_FLAGS ?= \
	--ignore-existing \
	--exclude '$(EXAMPLES_FOLDER)/' \
	--exclude '$(BENCHMARKS_FOLDER)/' \
	--exclude '$(DOCUMENTATION_FOLDER)/'

# Define the command to instrument source code for code coverage:
ISTANBUL_INSTRUMENT ?= $(ISTANBUL) instrument

# Define the output directory for instrumented source code:
ISTANBUL_INSTRUMENT_OUT ?= $(COVERAGE_INSTRUMENTATION_DIR)/node_modules

# Define the command-line options to be used when instrumenting source code:
ISTANBUL_INSTRUMENT_FLAGS ?= \
	$(ISTANBUL_EXCLUDES_FLAGS) \
	--output $(ISTANBUL_INSTRUMENT_OUT)

# Define the command to generate test coverage:
ISTANBUL_COVER ?= $(ISTANBUL) cover

# Define the type of report Istanbul should produce:
ISTANBUL_REPORT ?= lcov

# Define the output file path for the HTML report generated by Istanbul:
ISTANBUL_HTML_REPORT ?= $(COVERAGE_DIR)/lcov-report/index.html

# Define the command-line options to be used when generating code coverage:
ISTANBUL_COVER_FLAGS ?= \
	$(ISTANBUL_EXCLUDES_FLAGS) \
	--dir $(COVERAGE_DIR) \
	--report $(ISTANBUL_REPORT)


# TARGETS #

# Instruments source code.
#
# This target instruments source code.

test-istanbul-instrument: $(NODE_MODULES) clean-istanbul-instrument
	$(MKDIR_RECURSIVE) $(ISTANBUL_INSTRUMENT_OUT)
	$(ISTANBUL_INSTRUMENT) $(ISTANBUL_INSTRUMENT_FLAGS) $(NODE_PATH)
	$(RSYNC_RECURSIVE) \
		$(ISTANBUL_RSYNC_EXCLUDES_FLAGS) \
		$(NODE_PATH)/ \
		$(ISTANBUL_INSTRUMENT_OUT)

.PHONY: test-istanbul-instrument


# Run units and generate a test coverage report.
#
# This target instruments source code, runs unit tests, and outputs a test coverage report.

test-istanbul: $(NODE_MODULES)
	for dir in $(TESTS_DIRS); do \
		echo ''; \
		echo "Running tests in directory: $$dir"; \
		echo ''; \
		NODE_ENV=$(NODE_ENV_TEST) \
		NODE_PATH=$(NODE_PATH_TEST) \
		$(ISTANBUL_COVER) $(ISTANBUL_COVER_FLAGS) $(JAVASCRIPT_TEST) -- $(JAVASCRIPT_TEST_FLAGS) $$dir/**/$(TESTS_PATTERN); \
	done

.PHONY: test-istanbul


# View a test coverage report.
#
# This target opens an HTML coverage report in a local web browser.

view-istanbul-report:
	$(OPEN) $(ISTANBUL_HTML_REPORT)

.PHONY: view-istanbul-report


# Removes instrumented files.
#
# This targets removes previously instrumented files by removing the instrumented source code directory entirely.

clean-istanbul-instrument:
	$(DELETE) $(DELETE_FLAGS) $(COVERAGE_INSTRUMENTATION_DIR)

.PHONY: clean-istanbul-instrument
