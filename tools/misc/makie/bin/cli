#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var makie = require( './../lib' );
var targets = require( './../lib/targets.js' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Lists the available targets.
*
* @private
* @example
* list();
* // => '...'
* // => '...'
*/
function list() {
	var keys;
	var msg;
	keys = Object.keys( targets );
	msg = '\n'+keys.join( '\n' )+'\n\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION list()


// VARIABLES //

var dirpath;
var args;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
    return help();
}
if ( args.version ) {
	return version();
}
if ( args.list || args.ls ) {
	return list();
}


// MAKE //

dirpath = path.resolve( __dirname, './../../../../' );
makie( dirpath, args._[0] );
