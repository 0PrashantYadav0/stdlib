#!/usr/bin/env bash
#
# A git hook called by `git commit`. If this scripts exits with a non-zero status, the commit will be aborted.
#
# This hook is called with no arguments.

# VARIABLES #

# Determine root directory:
root=$(git rev-parse --show-toplevel)

# Define the path to a utility for linting filenames:
lint_filenames="${root}/tools/lint/filenames/bin/cli"

# Define the path to a utility for linting package.json files:
lint_package_json="${root}/tools/lint/pkg-json/bin/cli"


# FUNCTIONS #

# Defines an error handler.
#
# $1 - error status
on_error() {
	cleanup
	exit "$1"
}

# Runs clean-up tasks.
cleanup() {
	echo '' >&2
}

# Checks for non-ASCII filenames (to ensure cross platform portability).
check_filenames() {
	local commit=$(git rev-parse --verify HEAD)
	local against
	if [[ -z "${commit}" ]]; then
		# This is the initial commit, so we diff against an empty tree object:
		against='4b825dc642cb6eb9a060e54bf8d69288fbee4904'
	else
		against='HEAD'
	fi
	# We exploit the fact that the printable range starts with the space character and ends with the tilde. Note that the use of brackets around a `tr` range is okay here, (for portability to Solaris 10's /usr/bin/tr, it's even required), since the square bracket bytes happen to fall in the designated range.
	local num_files=$(git diff --cached --name-only --diff-filter=A -z "${against}" | LC_ALL=C tr -d '[ -~]\0' | wc -c)

	if [[ "${num_files}" -ne 0 ]]; then
		echo 'Error: Attempting to add a non-ASCII filename. Non-ASCII filenames limit cross-platform portability. Please rename offending files before committing.' >&2
		return 1
	fi
	return 0
}

# Lints staged files.
run_lint() {
	local changed_files
	local files

	# Get the set of changed files (added and modified):
	changed_files=$(git diff --name-only --cached --diff-filter AM)

	# Lint filenames:
	echo "${changed_files}" | "${lint_filenames}"
	if [[ "$?" -ne 0 ]]; then
		echo '' >&2
		echo 'Filename lint errors.' >&2
		return 1
	fi

	# Lint Markdown files...
	files=$(echo "${changed_files}" | grep '\.md$' | tr '\n' ' ')
	if [[ -n "${files}" ]]; then
		make MARKDOWN_FILES="${files}" lint-markdown > /dev/null
		if [[ "$?" -ne 0 ]]; then
			echo '' >&2
			echo 'Markdown lint errors.' >&2
			return 1
		fi
	fi

	# Lint package.json files...
	files=$(echo "${changed_files}" | grep 'package\.json$')
	if [[ -n "${files}" ]]; then
		echo "${files}" | "${lint_package_json}" >&2
		if [[ "$?" -ne 0 ]]; then
			echo '' >&2
			echo 'Package.json lint errors.' >&2
			return 1
		fi
	fi

	# Lint JavaScript files...
	files=$(echo "${changed_files}" | grep '\.js$' | tr '\n' ' ')
	if [[ -n "${files}" ]]; then
		make FILES="${files}" lint-javascript-files > /dev/null >&2
		if [[ "$?" -ne 0 ]]; then
			echo '' >&2
			echo 'JavaScript lint errors.' >&2
			return 1
		fi
	fi

	# TODO: if datapackage.json, validate via schema

	return 0
}

# Main execution sequence.
main() {
	check_filenames
	if [[ "$?" -ne 0 ]]; then
		on_error 1
	fi
	run_lint
	if [[ "$?" -ne 0 ]]; then
		on_error 1
	fi
	cleanup
	exit 0
}

# Run main:
main
