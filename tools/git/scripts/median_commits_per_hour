#!/usr/bin/env bash
#
# Prints the median number of commits per hour.

# Determine root directory:
root="$(git rev-parse --show-toplevel)"

# Define the path to a utility to compute the median:
median="${root}/tools/awk/median.awk"

# * `git log`
#   - Show commit logs.
# * `grep Date`
#   - Extract the line which begins with `Date` from each log.
# * `awk '{}'`
#   - Tabulate hourly totals.
git log --reverse | grep Date | awk '
BEGIN {
	# Get the date of the first commit:
	cmd = "git log --reverse --date=short | grep Date | head -n 1"
	(cmd | getline tmp)
	close(cmd)

	split(tmp, date, OFS)
	split(date[2], t1, "-")

	# Get the date for "now":
	cmd = "date '\''+%Y %m %d'\''"
	(cmd | getline now)
	close(cmd)

	split(now, t2, OFS)

	# Compute the number of days between "now" and the first commit:
	num = daynum(t1[1], t2[1], 0+t1[2], 0+t2[2], 0+t1[3], 0+t2[3])
}
{
	day = $3 OFS $4 OFS $6

	split($5, time, ":")
	hr = time[1]

	# Update totals for each hour:
	lines[hr] += 1 / num
}
END {
	for (k in lines) {
		split(k, keys, SUBSEP)
		hr = keys[2]
		if (hr == "00") {
			hr0[i0++] = lines[k]
		}
		if (hr == "01") {
			hr1[i1++] = lines[k]
		}
		if (hr == "02") {
			hr2[i2++] = lines[k]
		}
		if (hr == "03") {
			hr3[i3++] = lines[k]
		}
		if (hr == "04") {
			hr4[i4++] = lines[k]
		}
		if (hr == "05") {
			hr5[i5++] = lines[k]
		}
		if (hr == "06") {
			hr6[i6++] = lines[k]
		}
		if (hr == "07") {
			hr7[i7++] = lines[k]
		}
		if (hr == "08") {
			hr8[i8++] = lines[k]
		}
		if (hr == "09") {
			hr9[i9++] = lines[k]
		}
		if (hr == "10") {
			hr10[i10++] = lines[k]
		}
		if (hr == "11") {
			hr11[i11++] = lines[k]
		}
		if (hr == "12") {
			hr12[i12++] = lines[k]
		}
	}
	median(hr0, "00")
	median(hr1, "01")
	median(hr2, "02")
	median(hr3, "03")
	median(hr4, "04")
	median(hr5, "05")
	median(hr6, "06")
	median(hr7, "07")
	median(hr8, "08")
	median(hr9, "09")
	median(hr10, "10")
	median(hr11, "11")
	median(hr12, "12")
}

function daynum(y1, y2, m1, m2, d1, d2,   days, i, n) {
	split("31 28 31 30 31 30 31 31 30 31 30 31", days)

	# 365 days in a year, plus one during a leap year:
	if (y2 > y1) {
		n = (y2-y1)*365 + int((y2-y1)/4)
	}
	if (y2 % 4 == 0) {
		# leap year
		days[2] += 1
	}
	if ( m2 > m1 ) {
		for (i = m1; i < m2; i++) {
			n += days[i]
		}
	} else {
		for (i = m1; i >= m2; i--) {
			n -= days[i]
		}
	}
	return n + d2 - d1
}

function median(arr, name,   cmd, nums, v, m) {
	nums = ""
	for (v in arr) {
		nums = v "\n" nums
	}
	cmd = "echo -n $'\''" nums "'\'' | sort -n | '"${median}"'"
	(cmd | getline m)
	close(cmd)
	print name OFS m
}
'
