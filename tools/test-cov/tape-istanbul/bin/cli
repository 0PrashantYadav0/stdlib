#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var runner = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()


// VARIABLES //

var args;
var out;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.dir ) {
	opts.dir = args.dir;
}
if ( args.global ) {
	opts.global = args.global;
}
if ( args.output ) {
	out = args.output;
} else {
	out = path.join( process.cwd(), 'coverage.json' );
}


// MAIN //

runner( args._[ 0 ], opts, done );

/**
* Callback invoked upon completion.
*
* @private
* @param {(Error|null)} error - error object
* @param {Object} coverage - coverage information
* @throws {Error} unexpected error
*/
function done( error, coverage ) {
	var opts;
	if ( error ) {
		throw error;
	}
	coverage = JSON.stringify( coverage );
	opts = {
		'encoding': 'utf8'
	};
	fs.writeFile( out, coverage, opts, onWrite );
} // end FUNCTION done()

/**
* Callback invoked upon writing coverage information to file.
*
* @private
* @param {(Error|null)} error - error object
*/
function onWrite( error ) {
	if ( error ) {
		throw error;
	}
} // end FUNCTION onWrite()
