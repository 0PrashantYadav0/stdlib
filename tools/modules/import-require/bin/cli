#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var stdin = require( '@stdlib/utils/read-stdin' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	// Set the process title to allow the process to be more easily identified:
	process.title = pkg.name;
	process.stdout.on( 'error', process.exit );
} // end FUNCTION init()

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Writes an error message to `stderr` and then exits.
*
* @private
* @param {string} msg - error message
*/
function exit( msg ) {
	process.stderr.write( msg+'\n', 'utf8' );
	process.exit( 1 );
} // end FUNCTION exit()

/**
* Prints results as newline-delimited JSON (NDJSON).
*
* @private
* @param {Object} results - results
*/
function printNDJSON( results ) {
	console.log( JSON.stringify( results ) );
} // end FUNCTION printNDJSON()

/**
* Pretty prints results.
*
* @private
* @param {Object} results - results
*/
function prettyPrint( results ) {
	console.log( '\nLiterals:' );
	printPaths( results.literals );

	console.log( '\nExpressions:' );
	printPaths( results.expressions );

	console.log( '' );
} // end FUNCTION prettyPrint()

/**
* Pretty prints paths.
*
* @private
* @param {StringArray} paths - paths to print
*/
function printPaths( paths ) {
	var sym;
	var i;
	for ( i = 0; i < paths.length; i++ ) {
		if ( i < paths.length-1 ) {
			sym = '├──';
		} else {
			sym = '└──';
		}
		console.log( '%s %s', sym, paths[ i ] );
	}
} // end FUNCTION printPaths()


// VARIABLES //

var args;
var src;
var err;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
if ( !process.stdin.isTTY ) {
	return stdin( onData );
}
src = args._[ 0 ];
if ( src === void 0 ) {
	err = new Error( 'no input. Must provide a source string as a command-line argument or via `stdin`.' );
	return exit( err.message );
}
process.nextTick( next );

/**
* Callback invoked after attempting to read data from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - `stdin` data
*/
function onData( error, data ) {
	if ( error ) {
		return exit( error.message );
	}
	src = data.toString();
	if ( src === '' ) {
		error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
		return exit( error.message );
	}
	next();
} // end FUNCTION onData()

/**
* Callback invoked once ready to analyze a source string.
*
* @private
*/
function next() {
	var results = main( src );
	if ( process.stdout.isTTY ) {
		return prettyPrint( results );
	}
	printNDJSON( results );
} // end FUNCTION next()
