#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var prefix = require( './../lib/stdlib.js' );
var stdin = require( prefix+'@stdlib/utils/read-stdin' );
var regexp = require( prefix+'@stdlib/utils/regexp-from-string' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( process.stdout )
		.on( 'close', onClose );

	function onClose() {
		process.exit( 0 );
	}
} // end FUNCTION help()

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	process.stdout.write( msg, 'utf8' );
	process.exit( 0 );
} // end FUNCTION version()

/**
* Writes an error message to `stderr` and then exits.
*
* @private
* @param {string} msg - error message
*/
function exit( msg ) {
	process.stderr.write( msg+'\n', 'utf8' );
	process.exit( 1 );
} // end FUNCTION exit()

/**
* Callback invoked after resolving dependencies.
*
* @private
* @param {(Error|null)} error - error object
* @param {ObjectArray} results - results
* @throws {Error} unexpected error
*/
function done( error, results ) {
	var i;
	if ( error ) {
		throw error;
	}
	for ( i = 0; i < results.length; i++ ) {
		console.log( JSON.stringify( results[ i ] ) );
	}
} // end FUNCTION clbk()


// VARIABLES //

var files;
var args;
var err;
var sep;


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.builtins === false ) {
	opts.builtins = args.builtins;
}
if ( args.walk === false ) {
	opts.walk = args.walk;
}
if ( args.split ) {
	sep = regexp( args.split );
	if ( sep === null ) {
		sep = args.split;
	}
} else {
	sep = /\r?\n/;
}


// MAIN //

if ( !process.stdin.isTTY ) {
	return stdin( onData );
}
files = args._;
if ( files.length === 0 ) {
	err = new Error( 'no input. Must provide a list of files as command-line arguments or via `stdin`.' );
	return exit( err.message );
}
process.nextTick( next );

/**
* Callback invoked after attempting to read data from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - `stdin` data
*/
function onData( error, data ) {
	var i;
	if ( error ) {
		return exit( error.message );
	}
	data = data.toString();
	if ( data === '' ) {
		error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
		return exit( error.message );
	}
	data = data.split( sep );
	files = [];
	for ( i = 0; i < data.length; i++ ) {
		// Address empty elements...
		if ( data[ i ] ) {
			files.push( data[ i ] );
		}
	}
	next();
} // end FUNCTION onData()

/**
* Callback invoked once ready to resolve dependencies.
*
* @private
*/
function next() {
	main( files, opts, done );
} // end FUNCTION next()
